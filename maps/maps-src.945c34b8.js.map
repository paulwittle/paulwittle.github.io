{"mappings":"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","sources":["<anon>","mapdef.js","node_modules/ol/Feature.js","node_modules/ol/Object.js","node_modules/ol/ObjectEventType.js","node_modules/ol/Observable.js","node_modules/ol/events/EventType.js","node_modules/ol/events/Target.js","node_modules/ol/Disposable.js","node_modules/ol/functions.js","node_modules/ol/array.js","node_modules/ol/obj.js","node_modules/ol/events/Event.js","node_modules/ol/events.js","node_modules/ol/util.js","node_modules/ol/asserts.js","node_modules/ol/Map.js","node_modules/ol/Collection.js","node_modules/ol/CollectionEventType.js","node_modules/ol/MapBrowserEvent.js","node_modules/ol/MapEvent.js","node_modules/ol/MapBrowserEventHandler.js","node_modules/ol/MapBrowserEventType.js","node_modules/ol/has.js","node_modules/ol/pointer/EventType.js","node_modules/ol/MapEventType.js","node_modules/ol/MapProperty.js","node_modules/ol/TileQueue.js","node_modules/ol/TileState.js","node_modules/ol/structs/PriorityQueue.js","node_modules/ol/View.js","node_modules/ol/ViewHint.js","node_modules/ol/ViewProperty.js","node_modules/ol/centerconstraint.js","node_modules/ol/math.js","node_modules/ol/coordinate.js","node_modules/ol/extent.js","node_modules/ol/extent/Relationship.js","node_modules/ol/string.js","node_modules/ol/easing.js","node_modules/ol/geom/Polygon.js","node_modules/ol/sphere.js","node_modules/ol/geom/LinearRing.js","node_modules/ol/geom/SimpleGeometry.js","node_modules/ol/geom/Geometry.js","node_modules/ol/proj.js","node_modules/ol/console.js","node_modules/ol/proj/Units.js","node_modules/ol/proj/epsg3857.js","node_modules/ol/proj/Projection.js","node_modules/ol/proj/epsg4326.js","node_modules/ol/proj/projections.js","node_modules/ol/proj/transforms.js","node_modules/ol/proj/utm.js","node_modules/ol/transform.js","node_modules/ol/geom/flat/transform.js","node_modules/ol/geom/flat/area.js","node_modules/ol/geom/flat/closest.js","node_modules/ol/geom/flat/deflate.js","node_modules/ol/geom/flat/inflate.js","node_modules/ol/geom/flat/simplify.js","node_modules/ol/geom/Point.js","node_modules/ol/geom/flat/contains.js","node_modules/ol/geom/flat/interiorpoint.js","node_modules/ol/geom/flat/intersectsextent.js","node_modules/ol/geom/flat/segments.js","node_modules/ol/geom/flat/orient.js","node_modules/ol/geom/flat/reverse.js","node_modules/ol/resolutionconstraint.js","node_modules/ol/rotationconstraint.js","node_modules/ol/tilegrid/common.js","node_modules/ol/control/defaults.js","node_modules/ol/control/Attribution.js","node_modules/ol/css.js","node_modules/ol/dom.js","node_modules/ol/control/Control.js","node_modules/ol/control/Rotate.js","node_modules/ol/control/Zoom.js","node_modules/ol/interaction/defaults.js","node_modules/ol/Kinetic.js","node_modules/ol/interaction/DoubleClickZoom.js","node_modules/ol/interaction/Interaction.js","node_modules/ol/interaction/Property.js","node_modules/ol/interaction/DragPan.js","node_modules/ol/events/condition.js","node_modules/ol/interaction/Pointer.js","node_modules/ol/interaction/DragRotate.js","node_modules/ol/interaction/DragZoom.js","node_modules/ol/interaction/DragBox.js","node_modules/ol/render/Box.js","node_modules/ol/interaction/KeyboardPan.js","node_modules/ol/events/Key.js","node_modules/ol/interaction/KeyboardZoom.js","node_modules/ol/interaction/MouseWheelZoom.js","node_modules/ol/interaction/PinchRotate.js","node_modules/ol/interaction/PinchZoom.js","node_modules/ol/layer/Group.js","node_modules/ol/layer/Base.js","node_modules/ol/layer/Property.js","node_modules/ol/layer/Layer.js","node_modules/ol/render/EventType.js","node_modules/ol/renderer/Composite.js","node_modules/ol/layer/BaseVector.js","node_modules/rbush/rbush.min.js","node_modules/ol/render/canvas/style.js","node_modules/ol/color.js","node_modules/ol/expr/cpu.js","node_modules/ol/expr/expression.js","node_modules/ol/size.js","node_modules/ol/style/Circle.js","node_modules/ol/style/RegularShape.js","node_modules/ol/ImageState.js","node_modules/ol/colorlike.js","node_modules/ol/style/IconImage.js","node_modules/ol/Image.js","node_modules/ol/style/IconImageCache.js","node_modules/ol/render/canvas.js","node_modules/ol/style/Image.js","node_modules/ol/style/Fill.js","node_modules/ol/style/Icon.js","node_modules/ol/style/Stroke.js","node_modules/ol/style/Style.js","node_modules/ol/style/Text.js","node_modules/ol/render/Event.js","node_modules/ol/renderer/Map.js","node_modules/ol/format/GeoJSON.js","node_modules/ol/render/Feature.js","node_modules/ol/geom/flat/center.js","node_modules/ol/geom/flat/interpolate.js","node_modules/ol/geom/LineString.js","node_modules/ol/geom/flat/length.js","node_modules/ol/geom/MultiLineString.js","node_modules/ol/geom/MultiPoint.js","node_modules/ol/geom/MultiPolygon.js","node_modules/ol/format/Feature.js","node_modules/ol/geom/GeometryCollection.js","node_modules/ol/format/JSONFeature.js","node_modules/ol/source/OSM.js","node_modules/ol/source/XYZ.js","node_modules/ol/tilegrid.js","node_modules/ol/tilegrid/TileGrid.js","node_modules/ol/TileRange.js","node_modules/ol/tilecoord.js","node_modules/ol/source/TileImage.js","node_modules/ol/ImageTile.js","node_modules/ol/Tile.js","node_modules/ol/reproj/Tile.js","node_modules/ol/reproj.js","node_modules/ol/reproj/Triangulation.js","node_modules/ol/reproj/common.js","node_modules/ol/source/UrlTile.js","node_modules/ol/tileurlfunction.js","node_modules/ol/uri.js","node_modules/ol/source/Tile.js","node_modules/ol/source/Source.js","node_modules/ol/source/TileEventType.js","node_modules/ol/layer/Vector.js","node_modules/ol/renderer/canvas/VectorLayer.js","node_modules/ol/render/canvas/BuilderGroup.js","node_modules/ol/render/canvas/Builder.js","node_modules/ol/render/VectorContext.js","node_modules/ol/render/canvas/Instruction.js","node_modules/ol/render/canvas/ImageBuilder.js","node_modules/ol/render/canvas/LineStringBuilder.js","node_modules/ol/render/canvas/PolygonBuilder.js","node_modules/ol/render/canvas/TextBuilder.js","node_modules/ol/geom/flat/linechunk.js","node_modules/ol/geom/flat/straightchunk.js","node_modules/ol/render/canvas/ExecutorGroup.js","node_modules/ol/render/canvas/Executor.js","node_modules/ol/geom/flat/textpath.js","node_modules/ol/render/canvas/ZIndexContext.js","node_modules/ol/render/canvas/hitdetect.js","node_modules/ol/render/canvas/Immediate.js","node_modules/ol/renderer/vector.js","node_modules/ol/renderer/canvas/Layer.js","node_modules/ol/renderer/Layer.js","node_modules/ol/source/Vector.js","node_modules/ol/featureloader.js","node_modules/ol/loadingstrategy.js","node_modules/ol/structs/RBush.js","node_modules/ol/source/VectorEventType.js","node_modules/ol/layer/Tile.js","node_modules/ol/renderer/canvas/TileLayer.js","node_modules/ol/DataTile.js","node_modules/ol/structs/LRUCache.js","node_modules/ol/layer/BaseTile.js","node_modules/ol/layer/TileProperty.js","node_modules/ol/Geolocation.js"],"sourcesContent":["\nfunction $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n}\n\n/**\r\n * @module ol/Feature\r\n */ /**\r\n * @module ol/Object\r\n */ /**\r\n * @module ol/ObjectEventType\r\n */ /**\r\n * @enum {string}\r\n */ var $e881b5dca21eb5d4$export$2e2bcd8739ae039 /**\r\n * @typedef {'propertychange'} Types\r\n */  = {\n    /**\r\n   * Triggered when a property is changed.\r\n   * @event module:ol/Object.ObjectEvent#propertychange\r\n   * @api\r\n   */ PROPERTYCHANGE: 'propertychange'\n};\n\n\n/**\r\n * @module ol/Observable\r\n */ /**\r\n * @module ol/events/EventType\r\n */ /**\r\n * @enum {string}\r\n * @const\r\n */ var $294047c5e65f31a3$export$2e2bcd8739ae039 = {\n    /**\r\n   * Generic change event. Triggered when the revision counter is increased.\r\n   * @event module:ol/events/Event~BaseEvent#change\r\n   * @api\r\n   */ CHANGE: 'change',\n    /**\r\n   * Generic error event. Triggered when an error occurs.\r\n   * @event module:ol/events/Event~BaseEvent#error\r\n   * @api\r\n   */ ERROR: 'error',\n    BLUR: 'blur',\n    CLEAR: 'clear',\n    CONTEXTMENU: 'contextmenu',\n    CLICK: 'click',\n    DBLCLICK: 'dblclick',\n    DRAGENTER: 'dragenter',\n    DRAGOVER: 'dragover',\n    DROP: 'drop',\n    FOCUS: 'focus',\n    KEYDOWN: 'keydown',\n    KEYPRESS: 'keypress',\n    LOAD: 'load',\n    RESIZE: 'resize',\n    TOUCHMOVE: 'touchmove',\n    WHEEL: 'wheel'\n};\n\n\n/**\r\n * @module ol/events/Target\r\n */ /**\r\n * @module ol/Disposable\r\n */ /**\r\n * @classdesc\r\n * Objects that need to clean up after themselves.\r\n */ class $3273ed08087da3da$var$Disposable {\n    constructor(){\n        /**\r\n     * The object has already been disposed.\r\n     * @type {boolean}\r\n     * @protected\r\n     */ this.disposed = false;\n    }\n    /**\r\n   * Clean up.\r\n   */ dispose() {\n        if (!this.disposed) {\n            this.disposed = true;\n            this.disposeInternal();\n        }\n    }\n    /**\r\n   * Extension point for disposable objects.\r\n   * @protected\r\n   */ disposeInternal() {}\n}\nvar $3273ed08087da3da$export$2e2bcd8739ae039 = $3273ed08087da3da$var$Disposable;\n\n\n/**\r\n * @module ol/functions\r\n */ /**\r\n * @module ol/array\r\n */ /**\r\n * Performs a binary search on the provided sorted list and returns the index of the item if found. If it can't be found it'll return -1.\r\n * https://github.com/darkskyapp/binary-search\r\n *\r\n * @param {Array<*>} haystack Items to search through.\r\n * @param {*} needle The item to look for.\r\n * @param {Function} [comparator] Comparator function.\r\n * @return {number} The index of the item if found, -1 if not.\r\n */ function $b998d41b678ed5d1$export$2e0ae67339d5f1ac(haystack, needle, comparator) {\n    let mid, cmp;\n    comparator = comparator || $b998d41b678ed5d1$export$fcb633242ef15540;\n    let low = 0;\n    let high = haystack.length;\n    let found = false;\n    while(low < high){\n        /* Note that \"(low + high) >>> 1\" may overflow, and results in a typecast\r\n     * to double (which gives the wrong results). */ mid = low + (high - low >> 1);\n        cmp = +comparator(haystack[mid], needle);\n        if (cmp < 0.0) /* Too low. */ low = mid + 1;\n        else {\n            /* Key found or too high */ high = mid;\n            found = !cmp;\n        }\n    }\n    /* Key not found. */ return found ? low : ~low;\n}\nfunction $b998d41b678ed5d1$export$fcb633242ef15540(a, b) {\n    return a > b ? 1 : a < b ? -1 : 0;\n}\nfunction $b998d41b678ed5d1$export$4fa3190a997c3d8f(a, b) {\n    return a < b ? 1 : a > b ? -1 : 0;\n}\nfunction $b998d41b678ed5d1$export$8a3786cc03fdb777(arr, target, direction) {\n    if (arr[0] <= target) return 0;\n    const n = arr.length;\n    if (target <= arr[n - 1]) return n - 1;\n    if (typeof direction === 'function') {\n        for(let i = 1; i < n; ++i){\n            const candidate = arr[i];\n            if (candidate === target) return i;\n            if (candidate < target) {\n                if (direction(target, arr[i - 1], candidate) > 0) return i - 1;\n                return i;\n            }\n        }\n        return n - 1;\n    }\n    if (direction > 0) {\n        for(let i = 1; i < n; ++i){\n            if (arr[i] < target) return i - 1;\n        }\n        return n - 1;\n    }\n    if (direction < 0) {\n        for(let i = 1; i < n; ++i){\n            if (arr[i] <= target) return i;\n        }\n        return n - 1;\n    }\n    for(let i = 1; i < n; ++i){\n        if (arr[i] == target) return i;\n        if (arr[i] < target) {\n            if (arr[i - 1] - target < target - arr[i]) return i - 1;\n            return i;\n        }\n    }\n    return n - 1;\n}\nfunction $b998d41b678ed5d1$export$292cfa960964f0e0(arr, begin, end) {\n    while(begin < end){\n        const tmp = arr[begin];\n        arr[begin] = arr[end];\n        arr[end] = tmp;\n        ++begin;\n        --end;\n    }\n}\nfunction $b998d41b678ed5d1$export$8b58be045bf06082(arr, data) {\n    const extension = Array.isArray(data) ? data : [\n        data\n    ];\n    const length = extension.length;\n    for(let i = 0; i < length; i++)arr[arr.length] = extension[i];\n}\nfunction $b998d41b678ed5d1$export$cd7f480d6b8286c3(arr, obj) {\n    const i = arr.indexOf(obj);\n    const found = i > -1;\n    if (found) arr.splice(i, 1);\n    return found;\n}\nfunction $b998d41b678ed5d1$export$e9bab7fafb253603(arr1, arr2) {\n    const len1 = arr1.length;\n    if (len1 !== arr2.length) return false;\n    for(let i = 0; i < len1; i++){\n        if (arr1[i] !== arr2[i]) return false;\n    }\n    return true;\n}\nfunction $b998d41b678ed5d1$export$c7d3d1f96a700512(arr, compareFnc) {\n    const length = arr.length;\n    const tmp = Array(arr.length);\n    let i;\n    for(i = 0; i < length; i++)tmp[i] = {\n        index: i,\n        value: arr[i]\n    };\n    tmp.sort(function(a, b) {\n        return compareFnc(a.value, b.value) || a.index - b.index;\n    });\n    for(i = 0; i < arr.length; i++)arr[i] = tmp[i].value;\n}\nfunction $b998d41b678ed5d1$export$efa610630f9e181(arr, func, strict) {\n    const compare = func || $b998d41b678ed5d1$export$fcb633242ef15540;\n    return arr.every(function(currentVal, index) {\n        if (index === 0) return true;\n        const res = compare(arr[index - 1], currentVal);\n        return !(res > 0 || strict && res === 0);\n    });\n}\n\n\nfunction $013a1733c226ec50$export$22e23a2304399231() {\n    return true;\n}\nfunction $013a1733c226ec50$export$8f11cee4bdc7e668() {\n    return false;\n}\nfunction $013a1733c226ec50$export$1cd1943b3a73bbe8() {}\nfunction $013a1733c226ec50$export$ff83df6f9971435f(fn) {\n    /** @type {ReturnType} */ let lastResult;\n    /** @type {Array<any>|undefined} */ let lastArgs;\n    let lastThis;\n    /**\r\n   * @this {*} Only need to know if `this` changed, don't care what type\r\n   * @return {ReturnType} Memoized value\r\n   */ return function() {\n        const nextArgs = Array.prototype.slice.call(arguments);\n        if (!lastArgs || this !== lastThis || !(0, $b998d41b678ed5d1$export$e9bab7fafb253603)(nextArgs, lastArgs)) {\n            lastThis = this;\n            lastArgs = nextArgs;\n            lastResult = fn.apply(this, arguments);\n        }\n        return lastResult;\n    };\n}\nfunction $013a1733c226ec50$export$4dbaaf6c79705e6c(getter) {\n    function promiseGetter() {\n        let value;\n        try {\n            value = getter();\n        } catch (err) {\n            return Promise.reject(err);\n        }\n        if (value instanceof Promise) return value;\n        return Promise.resolve(value);\n    }\n    return promiseGetter();\n}\n\n\n/**\r\n * @module ol/obj\r\n */ /**\r\n * Removes all properties from an object.\r\n * @param {Object<string, unknown>} object The object to clear.\r\n */ function $beaefe87199bb537$export$42ffd38884aecdac(object) {\n    for(const property in object)delete object[property];\n}\nfunction $beaefe87199bb537$export$dd1bc94b04021eeb(object) {\n    let property;\n    for(property in object)return false;\n    return !property;\n}\n\n\n/**\r\n * @module ol/events/Event\r\n */ /**\r\n * @classdesc\r\n * Stripped down implementation of the W3C DOM Level 2 Event interface.\r\n * See https://www.w3.org/TR/DOM-Level-2-Events/events.html#Events-interface.\r\n *\r\n * This implementation only provides `type` and `target` properties, and\r\n * `stopPropagation` and `preventDefault` methods. It is meant as base class\r\n * for higher level events defined in the library, and works with\r\n * {@link module:ol/events/Target~Target}.\r\n */ class $aeedce20e9577100$var$BaseEvent {\n    /**\r\n   * @param {string} type Type.\r\n   */ constructor(type){\n        /**\r\n     * @type {boolean}\r\n     */ this.propagationStopped;\n        /**\r\n     * @type {boolean}\r\n     */ this.defaultPrevented;\n        /**\r\n     * The event type.\r\n     * @type {string}\r\n     * @api\r\n     */ this.type = type;\n        /**\r\n     * The event target.\r\n     * @type {Object}\r\n     * @api\r\n     */ this.target = null;\n    }\n    /**\r\n   * Prevent default. This means that no emulated `click`, `singleclick` or `doubleclick` events\r\n   * will be fired.\r\n   * @api\r\n   */ preventDefault() {\n        this.defaultPrevented = true;\n    }\n    /**\r\n   * Stop event propagation.\r\n   * @api\r\n   */ stopPropagation() {\n        this.propagationStopped = true;\n    }\n}\nfunction $aeedce20e9577100$export$51134cce184326b9(evt) {\n    evt.stopPropagation();\n}\nfunction $aeedce20e9577100$export$fa3b29edae795ef4(evt) {\n    evt.preventDefault();\n}\nvar $aeedce20e9577100$export$2e2bcd8739ae039 = $aeedce20e9577100$var$BaseEvent;\n\n\n/**\r\n * @typedef {EventTarget|Target} EventTargetLike\r\n */ /**\r\n * @classdesc\r\n * A simplified implementation of the W3C DOM Level 2 EventTarget interface.\r\n * See https://www.w3.org/TR/2000/REC-DOM-Level-2-Events-20001113/events.html#Events-EventTarget.\r\n *\r\n * There are two important simplifications compared to the specification:\r\n *\r\n * 1. The handling of `useCapture` in `addEventListener` and\r\n *    `removeEventListener`. There is no real capture model.\r\n * 2. The handling of `stopPropagation` and `preventDefault` on `dispatchEvent`.\r\n *    There is no event target hierarchy. When a listener calls\r\n *    `stopPropagation` or `preventDefault` on an event object, it means that no\r\n *    more listeners after this one will be called. Same as when the listener\r\n *    returns false.\r\n */ class $08c28d22c0cb5a39$var$Target extends (0, $3273ed08087da3da$export$2e2bcd8739ae039) {\n    /**\r\n   * @param {*} [target] Default event target for dispatched events.\r\n   */ constructor(target){\n        super();\n        /**\r\n     * @private\r\n     * @type {*}\r\n     */ this.eventTarget_ = target;\n        /**\r\n     * @private\r\n     * @type {Object<string, number>|null}\r\n     */ this.pendingRemovals_ = null;\n        /**\r\n     * @private\r\n     * @type {Object<string, number>|null}\r\n     */ this.dispatching_ = null;\n        /**\r\n     * @private\r\n     * @type {Object<string, Array<import(\"../events.js\").Listener>>|null}\r\n     */ this.listeners_ = null;\n    }\n    /**\r\n   * @param {string} type Type.\r\n   * @param {import(\"../events.js\").Listener} listener Listener.\r\n   */ addEventListener(type, listener) {\n        if (!type || !listener) return;\n        const listeners = this.listeners_ || (this.listeners_ = {});\n        const listenersForType = listeners[type] || (listeners[type] = []);\n        if (!listenersForType.includes(listener)) listenersForType.push(listener);\n    }\n    /**\r\n   * Dispatches an event and calls all listeners listening for events\r\n   * of this type. The event parameter can either be a string or an\r\n   * Object with a `type` property.\r\n   *\r\n   * @param {import(\"./Event.js\").default|string} event Event object.\r\n   * @return {boolean|undefined} `false` if anyone called preventDefault on the\r\n   *     event object or if any of the listeners returned false.\r\n   * @api\r\n   */ dispatchEvent(event) {\n        const isString = typeof event === 'string';\n        const type = isString ? event : event.type;\n        const listeners = this.listeners_ && this.listeners_[type];\n        if (!listeners) return;\n        const evt = isString ? new (0, $aeedce20e9577100$export$2e2bcd8739ae039)(event) : /** @type {Event} */ event;\n        if (!evt.target) evt.target = this.eventTarget_ || this;\n        const dispatching = this.dispatching_ || (this.dispatching_ = {});\n        const pendingRemovals = this.pendingRemovals_ || (this.pendingRemovals_ = {});\n        if (!(type in dispatching)) {\n            dispatching[type] = 0;\n            pendingRemovals[type] = 0;\n        }\n        ++dispatching[type];\n        let propagate;\n        for(let i = 0, ii = listeners.length; i < ii; ++i){\n            if ('handleEvent' in listeners[i]) propagate = /** @type {import(\"../events.js\").ListenerObject} */ listeners[i].handleEvent(evt);\n            else propagate = /** @type {import(\"../events.js\").ListenerFunction} */ listeners[i].call(this, evt);\n            if (propagate === false || evt.propagationStopped) {\n                propagate = false;\n                break;\n            }\n        }\n        if (--dispatching[type] === 0) {\n            let pr = pendingRemovals[type];\n            delete pendingRemovals[type];\n            while(pr--)this.removeEventListener(type, (0, $013a1733c226ec50$export$1cd1943b3a73bbe8));\n            delete dispatching[type];\n        }\n        return propagate;\n    }\n    /**\r\n   * Clean up.\r\n   * @override\r\n   */ disposeInternal() {\n        this.listeners_ && (0, $beaefe87199bb537$export$42ffd38884aecdac)(this.listeners_);\n    }\n    /**\r\n   * Get the listeners for a specified event type. Listeners are returned in the\r\n   * order that they will be called in.\r\n   *\r\n   * @param {string} type Type.\r\n   * @return {Array<import(\"../events.js\").Listener>|undefined} Listeners.\r\n   */ getListeners(type) {\n        return this.listeners_ && this.listeners_[type] || undefined;\n    }\n    /**\r\n   * @param {string} [type] Type. If not provided,\r\n   *     `true` will be returned if this event target has any listeners.\r\n   * @return {boolean} Has listeners.\r\n   */ hasListener(type) {\n        if (!this.listeners_) return false;\n        return type ? type in this.listeners_ : Object.keys(this.listeners_).length > 0;\n    }\n    /**\r\n   * @param {string} type Type.\r\n   * @param {import(\"../events.js\").Listener} listener Listener.\r\n   */ removeEventListener(type, listener) {\n        if (!this.listeners_) return;\n        const listeners = this.listeners_[type];\n        if (!listeners) return;\n        const index = listeners.indexOf(listener);\n        if (index !== -1) {\n            if (this.pendingRemovals_ && type in this.pendingRemovals_) {\n                // make listener a no-op, and remove later in #dispatchEvent()\n                listeners[index] = (0, $013a1733c226ec50$export$1cd1943b3a73bbe8);\n                ++this.pendingRemovals_[type];\n            } else {\n                listeners.splice(index, 1);\n                if (listeners.length === 0) delete this.listeners_[type];\n            }\n        }\n    }\n}\nvar $08c28d22c0cb5a39$export$2e2bcd8739ae039 = $08c28d22c0cb5a39$var$Target;\n\n\n/**\r\n * @module ol/events\r\n */ \nfunction $d5bf8abd656a3cdc$export$63174c828edd6ff8(target, type, listener, thisArg, once) {\n    if (once) {\n        const originalListener = listener;\n        /**\r\n     * @param {Event|import('./events/Event.js').default} event The event\r\n     * @return {void|boolean} When the function returns `false`, event propagation will stop.\r\n     * @this {typeof target}\r\n     */ listener = function(event) {\n            target.removeEventListener(type, listener);\n            return originalListener.call(thisArg ?? this, event);\n        };\n    } else if (thisArg && thisArg !== target) listener = listener.bind(thisArg);\n    const eventsKey = {\n        target: target,\n        type: type,\n        listener: listener\n    };\n    target.addEventListener(type, listener);\n    return eventsKey;\n}\nfunction $d5bf8abd656a3cdc$export$8d2a95bc11b44725(target, type, listener, thisArg) {\n    return $d5bf8abd656a3cdc$export$63174c828edd6ff8(target, type, listener, thisArg, true);\n}\nfunction $d5bf8abd656a3cdc$export$b0a21c8b3c1c921(key) {\n    if (key && key.target) {\n        key.target.removeEventListener(key.type, key.listener);\n        (0, $beaefe87199bb537$export$42ffd38884aecdac)(key);\n    }\n}\n\n\n/***\r\n * @template {string} Type\r\n * @template {Event|import(\"./events/Event.js\").default} EventClass\r\n * @template Return\r\n * @typedef {(type: Type, listener: (event: EventClass) => ?) => Return} OnSignature\r\n */ /***\r\n * @template {string} Type\r\n * @template Return\r\n * @typedef {(type: Type[], listener: (event: Event|import(\"./events/Event\").default) => ?) => Return extends void ? void : Return[]} CombinedOnSignature\r\n */ /**\r\n * @typedef {'change'|'error'} EventTypes\r\n */ /***\r\n * @template Return\r\n * @typedef {OnSignature<EventTypes, import(\"./events/Event.js\").default, Return> & CombinedOnSignature<EventTypes, Return>} ObservableOnSignature\r\n */ /**\r\n * @classdesc\r\n * Abstract base class; normally only used for creating subclasses and not\r\n * instantiated in apps.\r\n * An event target providing convenient methods for listener registration\r\n * and unregistration. A generic `change` event is always available through\r\n * {@link module:ol/Observable~Observable#changed}.\r\n *\r\n * @fires import(\"./events/Event.js\").default\r\n * @api\r\n */ class $1f093ab5083c8a1f$var$Observable extends (0, $08c28d22c0cb5a39$export$2e2bcd8739ae039) {\n    constructor(){\n        super();\n        this.on = /** @type {ObservableOnSignature<import(\"./events\").EventsKey>} */ this.onInternal;\n        this.once = /** @type {ObservableOnSignature<import(\"./events\").EventsKey>} */ this.onceInternal;\n        this.un = /** @type {ObservableOnSignature<void>} */ this.unInternal;\n        /**\r\n     * @private\r\n     * @type {number}\r\n     */ this.revision_ = 0;\n    }\n    /**\r\n   * Increases the revision counter and dispatches a 'change' event.\r\n   * @api\r\n   */ changed() {\n        ++this.revision_;\n        this.dispatchEvent((0, $294047c5e65f31a3$export$2e2bcd8739ae039).CHANGE);\n    }\n    /**\r\n   * Get the version number for this object.  Each time the object is modified,\r\n   * its version number will be incremented.\r\n   * @return {number} Revision.\r\n   * @api\r\n   */ getRevision() {\n        return this.revision_;\n    }\n    /**\r\n   * @param {string|Array<string>} type Type.\r\n   * @param {function((Event|import(\"./events/Event\").default)): ?} listener Listener.\r\n   * @return {import(\"./events.js\").EventsKey|Array<import(\"./events.js\").EventsKey>} Event key.\r\n   * @protected\r\n   */ onInternal(type, listener) {\n        if (Array.isArray(type)) {\n            const len = type.length;\n            const keys = new Array(len);\n            for(let i = 0; i < len; ++i)keys[i] = (0, $d5bf8abd656a3cdc$export$63174c828edd6ff8)(this, type[i], listener);\n            return keys;\n        }\n        return (0, $d5bf8abd656a3cdc$export$63174c828edd6ff8)(this, /** @type {string} */ type, listener);\n    }\n    /**\r\n   * @param {string|Array<string>} type Type.\r\n   * @param {function((Event|import(\"./events/Event\").default)): ?} listener Listener.\r\n   * @return {import(\"./events.js\").EventsKey|Array<import(\"./events.js\").EventsKey>} Event key.\r\n   * @protected\r\n   */ onceInternal(type, listener) {\n        let key;\n        if (Array.isArray(type)) {\n            const len = type.length;\n            key = new Array(len);\n            for(let i = 0; i < len; ++i)key[i] = (0, $d5bf8abd656a3cdc$export$8d2a95bc11b44725)(this, type[i], listener);\n        } else key = (0, $d5bf8abd656a3cdc$export$8d2a95bc11b44725)(this, /** @type {string} */ type, listener);\n        /** @type {Object} */ listener.ol_key = key;\n        return key;\n    }\n    /**\r\n   * Unlisten for a certain type of event.\r\n   * @param {string|Array<string>} type Type.\r\n   * @param {function((Event|import(\"./events/Event\").default)): ?} listener Listener.\r\n   * @protected\r\n   */ unInternal(type, listener) {\n        const key = /** @type {Object} */ listener.ol_key;\n        if (key) $1f093ab5083c8a1f$export$b7ef3f8527533384(key);\n        else if (Array.isArray(type)) for(let i = 0, ii = type.length; i < ii; ++i)this.removeEventListener(type[i], listener);\n        else this.removeEventListener(type, listener);\n    }\n}\n/**\r\n * Listen for a certain type of event.\r\n * @function\r\n * @param {string|Array<string>} type The event type or array of event types.\r\n * @param {function((Event|import(\"./events/Event\").default)): ?} listener The listener function.\r\n * @return {import(\"./events.js\").EventsKey|Array<import(\"./events.js\").EventsKey>} Unique key for the listener. If\r\n *     called with an array of event types as the first argument, the return\r\n *     will be an array of keys.\r\n * @api\r\n */ $1f093ab5083c8a1f$var$Observable.prototype.on;\n/**\r\n * Listen once for a certain type of event.\r\n * @function\r\n * @param {string|Array<string>} type The event type or array of event types.\r\n * @param {function((Event|import(\"./events/Event\").default)): ?} listener The listener function.\r\n * @return {import(\"./events.js\").EventsKey|Array<import(\"./events.js\").EventsKey>} Unique key for the listener. If\r\n *     called with an array of event types as the first argument, the return\r\n *     will be an array of keys.\r\n * @api\r\n */ $1f093ab5083c8a1f$var$Observable.prototype.once;\n/**\r\n * Unlisten for a certain type of event.\r\n * @function\r\n * @param {string|Array<string>} type The event type or array of event types.\r\n * @param {function((Event|import(\"./events/Event\").default)): ?} listener The listener function.\r\n * @api\r\n */ $1f093ab5083c8a1f$var$Observable.prototype.un;\nfunction $1f093ab5083c8a1f$export$b7ef3f8527533384(key) {\n    if (Array.isArray(key)) for(let i = 0, ii = key.length; i < ii; ++i)(0, $d5bf8abd656a3cdc$export$b0a21c8b3c1c921)(key[i]);\n    else (0, $d5bf8abd656a3cdc$export$b0a21c8b3c1c921)(/** @type {import(\"./events.js\").EventsKey} */ key);\n}\nvar $1f093ab5083c8a1f$export$2e2bcd8739ae039 = $1f093ab5083c8a1f$var$Observable;\n\n\n\n\n/**\r\n * @module ol/util\r\n */ /**\r\n * @return {never} Any return.\r\n */ function $6c5e11070e371322$export$817eb92a8194bab0() {\n    throw new Error('Unimplemented abstract method.');\n}\n/**\r\n * Counter for getUid.\r\n * @type {number}\r\n * @private\r\n */ let $6c5e11070e371322$var$uidCounter_ = 0;\nfunction $6c5e11070e371322$export$5e82334337e0f204(obj) {\n    return obj.ol_uid || (obj.ol_uid = String(++$6c5e11070e371322$var$uidCounter_));\n}\nconst $6c5e11070e371322$export$a4ad2735b021c132 = '10.5.0';\n\n\nclass $b68b3d6e32e3074a$export$cf395d7c4a2d5a17 extends (0, $aeedce20e9577100$export$2e2bcd8739ae039) {\n    /**\r\n   * @param {string} type The event type.\r\n   * @param {string} key The property name.\r\n   * @param {*} oldValue The old value for `key`.\r\n   */ constructor(type, key, oldValue){\n        super(type);\n        /**\r\n     * The name of the property whose value is changing.\r\n     * @type {string}\r\n     * @api\r\n     */ this.key = key;\n        /**\r\n     * The old value. To get the new value use `e.target.get(e.key)` where\r\n     * `e` is the event object.\r\n     * @type {*}\r\n     * @api\r\n     */ this.oldValue = oldValue;\n    }\n}\n/***\r\n * @template Return\r\n * @typedef {import(\"./Observable\").OnSignature<import(\"./Observable\").EventTypes, import(\"./events/Event.js\").default, Return> &\r\n *    import(\"./Observable\").OnSignature<import(\"./ObjectEventType\").Types, ObjectEvent, Return> &\r\n *    import(\"./Observable\").CombinedOnSignature<import(\"./Observable\").EventTypes|import(\"./ObjectEventType\").Types, Return>} ObjectOnSignature\r\n */ /**\r\n * @classdesc\r\n * Abstract base class; normally only used for creating subclasses and not\r\n * instantiated in apps.\r\n * Most non-trivial classes inherit from this.\r\n *\r\n * This extends {@link module:ol/Observable~Observable} with observable\r\n * properties, where each property is observable as well as the object as a\r\n * whole.\r\n *\r\n * Classes that inherit from this have pre-defined properties, to which you can\r\n * add your owns. The pre-defined properties are listed in this documentation as\r\n * 'Observable Properties', and have their own accessors; for example,\r\n * {@link module:ol/Map~Map} has a `target` property, accessed with\r\n * `getTarget()` and changed with `setTarget()`. Not all properties are however\r\n * settable. There are also general-purpose accessors `get()` and `set()`. For\r\n * example, `get('target')` is equivalent to `getTarget()`.\r\n *\r\n * The `set` accessors trigger a change event, and you can monitor this by\r\n * registering a listener. For example, {@link module:ol/View~View} has a\r\n * `center` property, so `view.on('change:center', function(evt) {...});` would\r\n * call the function whenever the value of the center property changes. Within\r\n * the function, `evt.target` would be the view, so `evt.target.getCenter()`\r\n * would return the new center.\r\n *\r\n * You can add your own observable properties with\r\n * `object.set('prop', 'value')`, and retrieve that with `object.get('prop')`.\r\n * You can listen for changes on that property value with\r\n * `object.on('change:prop', listener)`. You can get a list of all\r\n * properties with {@link module:ol/Object~BaseObject#getProperties}.\r\n *\r\n * Note that the observable properties are separate from standard JS properties.\r\n * You can, for example, give your map object a title with\r\n * `map.title='New title'` and with `map.set('title', 'Another title')`. The\r\n * first will be a `hasOwnProperty`; the second will appear in\r\n * `getProperties()`. Only the second is observable.\r\n *\r\n * Properties can be deleted by using the unset method. E.g.\r\n * object.unset('foo').\r\n *\r\n * @fires ObjectEvent\r\n * @api\r\n */ class $b68b3d6e32e3074a$var$BaseObject extends (0, $1f093ab5083c8a1f$export$2e2bcd8739ae039) {\n    /**\r\n   * @param {Object<string, *>} [values] An object with key-value pairs.\r\n   */ constructor(values){\n        super();\n        /***\r\n     * @type {ObjectOnSignature<import(\"./events\").EventsKey>}\r\n     */ this.on;\n        /***\r\n     * @type {ObjectOnSignature<import(\"./events\").EventsKey>}\r\n     */ this.once;\n        /***\r\n     * @type {ObjectOnSignature<void>}\r\n     */ this.un;\n        // Call {@link module:ol/util.getUid} to ensure that the order of objects' ids is\n        // the same as the order in which they were created.  This also helps to\n        // ensure that object properties are always added in the same order, which\n        // helps many JavaScript engines generate faster code.\n        (0, $6c5e11070e371322$export$5e82334337e0f204)(this);\n        /**\r\n     * @private\r\n     * @type {Object<string, *>|null}\r\n     */ this.values_ = null;\n        if (values !== undefined) this.setProperties(values);\n    }\n    /**\r\n   * Gets a value.\r\n   * @param {string} key Key name.\r\n   * @return {*} Value.\r\n   * @api\r\n   */ get(key) {\n        let value;\n        if (this.values_ && this.values_.hasOwnProperty(key)) value = this.values_[key];\n        return value;\n    }\n    /**\r\n   * Get a list of object property names.\r\n   * @return {Array<string>} List of property names.\r\n   * @api\r\n   */ getKeys() {\n        return this.values_ && Object.keys(this.values_) || [];\n    }\n    /**\r\n   * Get an object of all property names and values.\r\n   * @return {Object<string, *>} Object.\r\n   * @api\r\n   */ getProperties() {\n        return this.values_ && Object.assign({}, this.values_) || {};\n    }\n    /**\r\n   * Get an object of all property names and values.\r\n   * @return {Object<string, *>?} Object.\r\n   */ getPropertiesInternal() {\n        return this.values_;\n    }\n    /**\r\n   * @return {boolean} The object has properties.\r\n   */ hasProperties() {\n        return !!this.values_;\n    }\n    /**\r\n   * @param {string} key Key name.\r\n   * @param {*} oldValue Old value.\r\n   */ notify(key, oldValue) {\n        let eventType;\n        eventType = `change:${key}`;\n        if (this.hasListener(eventType)) this.dispatchEvent(new $b68b3d6e32e3074a$export$cf395d7c4a2d5a17(eventType, key, oldValue));\n        eventType = (0, $e881b5dca21eb5d4$export$2e2bcd8739ae039).PROPERTYCHANGE;\n        if (this.hasListener(eventType)) this.dispatchEvent(new $b68b3d6e32e3074a$export$cf395d7c4a2d5a17(eventType, key, oldValue));\n    }\n    /**\r\n   * @param {string} key Key name.\r\n   * @param {import(\"./events.js\").Listener} listener Listener.\r\n   */ addChangeListener(key, listener) {\n        this.addEventListener(`change:${key}`, listener);\n    }\n    /**\r\n   * @param {string} key Key name.\r\n   * @param {import(\"./events.js\").Listener} listener Listener.\r\n   */ removeChangeListener(key, listener) {\n        this.removeEventListener(`change:${key}`, listener);\n    }\n    /**\r\n   * Sets a value.\r\n   * @param {string} key Key name.\r\n   * @param {*} value Value.\r\n   * @param {boolean} [silent] Update without triggering an event.\r\n   * @api\r\n   */ set(key, value, silent) {\n        const values = this.values_ || (this.values_ = {});\n        if (silent) values[key] = value;\n        else {\n            const oldValue = values[key];\n            values[key] = value;\n            if (oldValue !== value) this.notify(key, oldValue);\n        }\n    }\n    /**\r\n   * Sets a collection of key-value pairs.  Note that this changes any existing\r\n   * properties and adds new ones (it does not remove any existing properties).\r\n   * @param {Object<string, *>} values Values.\r\n   * @param {boolean} [silent] Update without triggering an event.\r\n   * @api\r\n   */ setProperties(values, silent) {\n        for(const key in values)this.set(key, values[key], silent);\n    }\n    /**\r\n   * Apply any properties from another object without triggering events.\r\n   * @param {BaseObject} source The source object.\r\n   * @protected\r\n   */ applyProperties(source) {\n        if (!source.values_) return;\n        Object.assign(this.values_ || (this.values_ = {}), source.values_);\n    }\n    /**\r\n   * Unsets a property.\r\n   * @param {string} key Key name.\r\n   * @param {boolean} [silent] Unset without triggering an event.\r\n   * @api\r\n   */ unset(key, silent) {\n        if (this.values_ && key in this.values_) {\n            const oldValue = this.values_[key];\n            delete this.values_[key];\n            if ((0, $beaefe87199bb537$export$dd1bc94b04021eeb)(this.values_)) this.values_ = null;\n            if (!silent) this.notify(key, oldValue);\n        }\n    }\n}\nvar $b68b3d6e32e3074a$export$2e2bcd8739ae039 = $b68b3d6e32e3074a$var$BaseObject;\n\n\n/**\r\n * @module ol/asserts\r\n */ /**\r\n * @param {*} assertion Assertion we expected to be truthy.\r\n * @param {string} errorMessage Error message.\r\n */ function $35d5ec884318008e$export$a7a9523472993e97(assertion, errorMessage) {\n    if (!assertion) throw new Error(errorMessage);\n}\n\n\n\n\n/**\r\n * @typedef {typeof Feature|typeof import(\"./render/Feature.js\").default} FeatureClass\r\n */ /**\r\n * @typedef {Feature|import(\"./render/Feature.js\").default} FeatureLike\r\n */ /***\r\n * @template Return\r\n * @typedef {import(\"./Observable\").OnSignature<import(\"./Observable\").EventTypes, import(\"./events/Event.js\").default, Return> &\r\n *   import(\"./Observable\").OnSignature<import(\"./ObjectEventType\").Types|'change:geometry', import(\"./Object\").ObjectEvent, Return> &\r\n *   import(\"./Observable\").CombinedOnSignature<import(\"./Observable\").EventTypes|import(\"./ObjectEventType\").Types\r\n *     |'change:geometry', Return>} FeatureOnSignature\r\n */ /***\r\n * @template {import(\"./geom/Geometry.js\").default} [Geometry=import(\"./geom/Geometry.js\").default]\r\n * @typedef {Object<string, *> & { geometry?: Geometry }} ObjectWithGeometry\r\n */ /**\r\n * @classdesc\r\n * A vector object for geographic features with a geometry and other\r\n * attribute properties, similar to the features in vector file formats like\r\n * GeoJSON.\r\n *\r\n * Features can be styled individually with `setStyle`; otherwise they use the\r\n * style of their vector layer.\r\n *\r\n * Note that attribute properties are set as {@link module:ol/Object~BaseObject} properties on\r\n * the feature object, so they are observable, and have get/set accessors.\r\n *\r\n * Typically, a feature has a single geometry property. You can set the\r\n * geometry using the `setGeometry` method and get it with `getGeometry`.\r\n * It is possible to store more than one geometry on a feature using attribute\r\n * properties. By default, the geometry used for rendering is identified by\r\n * the property name `geometry`. If you want to use another geometry property\r\n * for rendering, use the `setGeometryName` method to change the attribute\r\n * property associated with the geometry for the feature.  For example:\r\n *\r\n * ```js\r\n *\r\n * import Feature from 'ol/Feature.js';\r\n * import Polygon from 'ol/geom/Polygon.js';\r\n * import Point from 'ol/geom/Point.js';\r\n *\r\n * const feature = new Feature({\r\n *   geometry: new Polygon(polyCoords),\r\n *   labelPoint: new Point(labelCoords),\r\n *   name: 'My Polygon',\r\n * });\r\n *\r\n * // get the polygon geometry\r\n * const poly = feature.getGeometry();\r\n *\r\n * // Render the feature as a point using the coordinates from labelPoint\r\n * feature.setGeometryName('labelPoint');\r\n *\r\n * // get the point geometry\r\n * const point = feature.getGeometry();\r\n * ```\r\n *\r\n * @api\r\n * @template {import(\"./geom/Geometry.js\").default} [Geometry=import(\"./geom/Geometry.js\").default]\r\n */ class $9fd014ab6df63665$var$Feature extends (0, $b68b3d6e32e3074a$export$2e2bcd8739ae039) {\n    /**\r\n   * @param {Geometry|ObjectWithGeometry<Geometry>} [geometryOrProperties]\r\n   *     You may pass a Geometry object directly, or an object literal containing\r\n   *     properties. If you pass an object literal, you may include a Geometry\r\n   *     associated with a `geometry` key.\r\n   */ constructor(geometryOrProperties){\n        super();\n        /***\r\n     * @type {FeatureOnSignature<import(\"./events\").EventsKey>}\r\n     */ this.on;\n        /***\r\n     * @type {FeatureOnSignature<import(\"./events\").EventsKey>}\r\n     */ this.once;\n        /***\r\n     * @type {FeatureOnSignature<void>}\r\n     */ this.un;\n        /**\r\n     * @private\r\n     * @type {number|string|undefined}\r\n     */ this.id_ = undefined;\n        /**\r\n     * @type {string}\r\n     * @private\r\n     */ this.geometryName_ = 'geometry';\n        /**\r\n     * User provided style.\r\n     * @private\r\n     * @type {import(\"./style/Style.js\").StyleLike}\r\n     */ this.style_ = null;\n        /**\r\n     * @private\r\n     * @type {import(\"./style/Style.js\").StyleFunction|undefined}\r\n     */ this.styleFunction_ = undefined;\n        /**\r\n     * @private\r\n     * @type {?import(\"./events.js\").EventsKey}\r\n     */ this.geometryChangeKey_ = null;\n        this.addChangeListener(this.geometryName_, this.handleGeometryChanged_);\n        if (geometryOrProperties) {\n            if (typeof /** @type {?} */ geometryOrProperties.getSimplifiedGeometry === 'function') {\n                const geometry = /** @type {Geometry} */ geometryOrProperties;\n                this.setGeometry(geometry);\n            } else {\n                /** @type {Object<string, *>} */ const properties = geometryOrProperties;\n                this.setProperties(properties);\n            }\n        }\n    }\n    /**\r\n   * Clone this feature. If the original feature has a geometry it\r\n   * is also cloned. The feature id is not set in the clone.\r\n   * @return {Feature<Geometry>} The clone.\r\n   * @api\r\n   */ clone() {\n        const clone = /** @type {Feature<Geometry>} */ new $9fd014ab6df63665$var$Feature(this.hasProperties() ? this.getProperties() : null);\n        clone.setGeometryName(this.getGeometryName());\n        const geometry = this.getGeometry();\n        if (geometry) clone.setGeometry(/** @type {Geometry} */ geometry.clone());\n        const style = this.getStyle();\n        if (style) clone.setStyle(style);\n        return clone;\n    }\n    /**\r\n   * Get the feature's default geometry.  A feature may have any number of named\r\n   * geometries.  The \"default\" geometry (the one that is rendered by default) is\r\n   * set when calling {@link module:ol/Feature~Feature#setGeometry}.\r\n   * @return {Geometry|undefined} The default geometry for the feature.\r\n   * @api\r\n   * @observable\r\n   */ getGeometry() {\n        return /** @type {Geometry|undefined} */ this.get(this.geometryName_);\n    }\n    /**\r\n   * Get the feature identifier.  This is a stable identifier for the feature and\r\n   * is either set when reading data from a remote source or set explicitly by\r\n   * calling {@link module:ol/Feature~Feature#setId}.\r\n   * @return {number|string|undefined} Id.\r\n   * @api\r\n   */ getId() {\n        return this.id_;\n    }\n    /**\r\n   * Get the name of the feature's default geometry.  By default, the default\r\n   * geometry is named `geometry`.\r\n   * @return {string} Get the property name associated with the default geometry\r\n   *     for this feature.\r\n   * @api\r\n   */ getGeometryName() {\n        return this.geometryName_;\n    }\n    /**\r\n   * Get the feature's style. Will return what was provided to the\r\n   * {@link module:ol/Feature~Feature#setStyle} method.\r\n   * @return {import(\"./style/Style.js\").StyleLike|undefined} The feature style.\r\n   * @api\r\n   */ getStyle() {\n        return this.style_;\n    }\n    /**\r\n   * Get the feature's style function.\r\n   * @return {import(\"./style/Style.js\").StyleFunction|undefined} Return a function\r\n   * representing the current style of this feature.\r\n   * @api\r\n   */ getStyleFunction() {\n        return this.styleFunction_;\n    }\n    /**\r\n   * @private\r\n   */ handleGeometryChange_() {\n        this.changed();\n    }\n    /**\r\n   * @private\r\n   */ handleGeometryChanged_() {\n        if (this.geometryChangeKey_) {\n            (0, $d5bf8abd656a3cdc$export$b0a21c8b3c1c921)(this.geometryChangeKey_);\n            this.geometryChangeKey_ = null;\n        }\n        const geometry = this.getGeometry();\n        if (geometry) this.geometryChangeKey_ = (0, $d5bf8abd656a3cdc$export$63174c828edd6ff8)(geometry, (0, $294047c5e65f31a3$export$2e2bcd8739ae039).CHANGE, this.handleGeometryChange_, this);\n        this.changed();\n    }\n    /**\r\n   * Set the default geometry for the feature.  This will update the property\r\n   * with the name returned by {@link module:ol/Feature~Feature#getGeometryName}.\r\n   * @param {Geometry|undefined} geometry The new geometry.\r\n   * @api\r\n   * @observable\r\n   */ setGeometry(geometry) {\n        this.set(this.geometryName_, geometry);\n    }\n    /**\r\n   * Set the style for the feature to override the layer style.  This can be a\r\n   * single style object, an array of styles, or a function that takes a\r\n   * resolution and returns an array of styles. To unset the feature style, call\r\n   * `setStyle()` without arguments or a falsey value.\r\n   * @param {import(\"./style/Style.js\").StyleLike} [style] Style for this feature.\r\n   * @api\r\n   * @fires module:ol/events/Event~BaseEvent#event:change\r\n   */ setStyle(style) {\n        this.style_ = style;\n        this.styleFunction_ = !style ? undefined : $9fd014ab6df63665$export$bb06ddfd5d66e02e(style);\n        this.changed();\n    }\n    /**\r\n   * Set the feature id.  The feature id is considered stable and may be used when\r\n   * requesting features or comparing identifiers returned from a remote source.\r\n   * The feature id can be used with the\r\n   * {@link module:ol/source/Vector~VectorSource#getFeatureById} method.\r\n   * @param {number|string|undefined} id The feature id.\r\n   * @api\r\n   * @fires module:ol/events/Event~BaseEvent#event:change\r\n   */ setId(id) {\n        this.id_ = id;\n        this.changed();\n    }\n    /**\r\n   * Set the property name to be used when getting the feature's default geometry.\r\n   * When calling {@link module:ol/Feature~Feature#getGeometry}, the value of the property with\r\n   * this name will be returned.\r\n   * @param {string} name The property name of the default geometry.\r\n   * @api\r\n   */ setGeometryName(name) {\n        this.removeChangeListener(this.geometryName_, this.handleGeometryChanged_);\n        this.geometryName_ = name;\n        this.addChangeListener(this.geometryName_, this.handleGeometryChanged_);\n        this.handleGeometryChanged_();\n    }\n}\nfunction $9fd014ab6df63665$export$bb06ddfd5d66e02e(obj) {\n    if (typeof obj === 'function') return obj;\n    /**\r\n   * @type {Array<import(\"./style/Style.js\").default>}\r\n   */ let styles;\n    if (Array.isArray(obj)) styles = obj;\n    else {\n        (0, $35d5ec884318008e$export$a7a9523472993e97)(typeof /** @type {?} */ obj.getZIndex === 'function', 'Expected an `ol/style/Style` or an array of `ol/style/Style.js`');\n        const style = /** @type {import(\"./style/Style.js\").default} */ obj;\n        styles = [\n            style\n        ];\n    }\n    return function() {\n        return styles;\n    };\n}\nvar $9fd014ab6df63665$export$2e2bcd8739ae039 = $9fd014ab6df63665$var$Feature;\n\n\n/**\r\n * @module ol/Map\r\n */ /**\r\n * @module ol/Collection\r\n */ /**\r\n * @module ol/CollectionEventType\r\n */ /**\r\n * @enum {string}\r\n */ var $161dd067fe2d672c$export$2e2bcd8739ae039 = {\n    /**\r\n   * Triggered when an item is added to the collection.\r\n   * @event module:ol/Collection.CollectionEvent#add\r\n   * @api\r\n   */ ADD: 'add',\n    /**\r\n   * Triggered when an item is removed from the collection.\r\n   * @event module:ol/Collection.CollectionEvent#remove\r\n   * @api\r\n   */ REMOVE: 'remove'\n};\n\n\n\n\n/**\r\n * @enum {string}\r\n * @private\r\n */ const $931ffc4e747c14db$var$Property = {\n    LENGTH: 'length'\n};\nclass $931ffc4e747c14db$export$a87ae6eb2761ec6d extends (0, $aeedce20e9577100$export$2e2bcd8739ae039) {\n    /**\r\n   * @param {import(\"./CollectionEventType.js\").default} type Type.\r\n   * @param {T} element Element.\r\n   * @param {number} index The index of the added or removed element.\r\n   */ constructor(type, element, index){\n        super(type);\n        /**\r\n     * The element that is added to or removed from the collection.\r\n     * @type {T}\r\n     * @api\r\n     */ this.element = element;\n        /**\r\n     * The index of the added or removed element.\r\n     * @type {number}\r\n     * @api\r\n     */ this.index = index;\n    }\n}\n/***\r\n * @template T\r\n * @template Return\r\n * @typedef {import(\"./Observable\").OnSignature<import(\"./Observable\").EventTypes, import(\"./events/Event.js\").default, Return> &\r\n *   import(\"./Observable\").OnSignature<import(\"./ObjectEventType\").Types|'change:length', import(\"./Object\").ObjectEvent, Return> &\r\n *   import(\"./Observable\").OnSignature<'add'|'remove', CollectionEvent<T>, Return> &\r\n *   import(\"./Observable\").CombinedOnSignature<import(\"./Observable\").EventTypes|import(\"./ObjectEventType\").Types|\r\n *     'change:length'|'add'|'remove',Return>} CollectionOnSignature\r\n */ /**\r\n * @typedef {Object} Options\r\n * @property {boolean} [unique=false] Disallow the same item from being added to\r\n * the collection twice.\r\n */ /**\r\n * @classdesc\r\n * An expanded version of standard JS Array, adding convenience methods for\r\n * manipulation. Add and remove changes to the Collection trigger a Collection\r\n * event. Note that this does not cover changes to the objects _within_ the\r\n * Collection; they trigger events on the appropriate object, not on the\r\n * Collection as a whole.\r\n *\r\n * @fires CollectionEvent\r\n *\r\n * @template T\r\n * @api\r\n */ class $931ffc4e747c14db$var$Collection extends (0, $b68b3d6e32e3074a$export$2e2bcd8739ae039) {\n    /**\r\n   * @param {Array<T>} [array] Array.\r\n   * @param {Options} [options] Collection options.\r\n   */ constructor(array, options){\n        super();\n        /***\r\n     * @type {CollectionOnSignature<T, import(\"./events\").EventsKey>}\r\n     */ this.on;\n        /***\r\n     * @type {CollectionOnSignature<T, import(\"./events\").EventsKey>}\r\n     */ this.once;\n        /***\r\n     * @type {CollectionOnSignature<T, void>}\r\n     */ this.un;\n        options = options || {};\n        /**\r\n     * @private\r\n     * @type {boolean}\r\n     */ this.unique_ = !!options.unique;\n        /**\r\n     * @private\r\n     * @type {!Array<T>}\r\n     */ this.array_ = array ? array : [];\n        if (this.unique_) for(let i = 0, ii = this.array_.length; i < ii; ++i)this.assertUnique_(this.array_[i], i);\n        this.updateLength_();\n    }\n    /**\r\n   * Remove all elements from the collection.\r\n   * @api\r\n   */ clear() {\n        while(this.getLength() > 0)this.pop();\n    }\n    /**\r\n   * Add elements to the collection.  This pushes each item in the provided array\r\n   * to the end of the collection.\r\n   * @param {!Array<T>} arr Array.\r\n   * @return {Collection<T>} This collection.\r\n   * @api\r\n   */ extend(arr) {\n        for(let i = 0, ii = arr.length; i < ii; ++i)this.push(arr[i]);\n        return this;\n    }\n    /**\r\n   * Iterate over each element, calling the provided callback.\r\n   * @param {function(T, number, Array<T>): *} f The function to call\r\n   *     for every element. This function takes 3 arguments (the element, the\r\n   *     index and the array). The return value is ignored.\r\n   * @api\r\n   */ forEach(f) {\n        const array = this.array_;\n        for(let i = 0, ii = array.length; i < ii; ++i)f(array[i], i, array);\n    }\n    /**\r\n   * Get a reference to the underlying Array object. Warning: if the array\r\n   * is mutated, no events will be dispatched by the collection, and the\r\n   * collection's \"length\" property won't be in sync with the actual length\r\n   * of the array.\r\n   * @return {!Array<T>} Array.\r\n   * @api\r\n   */ getArray() {\n        return this.array_;\n    }\n    /**\r\n   * Get the element at the provided index.\r\n   * @param {number} index Index.\r\n   * @return {T} Element.\r\n   * @api\r\n   */ item(index) {\n        return this.array_[index];\n    }\n    /**\r\n   * Get the length of this collection.\r\n   * @return {number} The length of the array.\r\n   * @observable\r\n   * @api\r\n   */ getLength() {\n        return this.get($931ffc4e747c14db$var$Property.LENGTH);\n    }\n    /**\r\n   * Insert an element at the provided index.\r\n   * @param {number} index Index.\r\n   * @param {T} elem Element.\r\n   * @api\r\n   */ insertAt(index, elem) {\n        if (index < 0 || index > this.getLength()) throw new Error('Index out of bounds: ' + index);\n        if (this.unique_) this.assertUnique_(elem);\n        this.array_.splice(index, 0, elem);\n        this.updateLength_();\n        this.dispatchEvent(new $931ffc4e747c14db$export$a87ae6eb2761ec6d((0, $161dd067fe2d672c$export$2e2bcd8739ae039).ADD, elem, index));\n    }\n    /**\r\n   * Remove the last element of the collection and return it.\r\n   * Return `undefined` if the collection is empty.\r\n   * @return {T|undefined} Element.\r\n   * @api\r\n   */ pop() {\n        return this.removeAt(this.getLength() - 1);\n    }\n    /**\r\n   * Insert the provided element at the end of the collection.\r\n   * @param {T} elem Element.\r\n   * @return {number} New length of the collection.\r\n   * @api\r\n   */ push(elem) {\n        if (this.unique_) this.assertUnique_(elem);\n        const n = this.getLength();\n        this.insertAt(n, elem);\n        return this.getLength();\n    }\n    /**\r\n   * Remove the first occurrence of an element from the collection.\r\n   * @param {T} elem Element.\r\n   * @return {T|undefined} The removed element or undefined if none found.\r\n   * @api\r\n   */ remove(elem) {\n        const arr = this.array_;\n        for(let i = 0, ii = arr.length; i < ii; ++i){\n            if (arr[i] === elem) return this.removeAt(i);\n        }\n        return undefined;\n    }\n    /**\r\n   * Remove the element at the provided index and return it.\r\n   * Return `undefined` if the collection does not contain this index.\r\n   * @param {number} index Index.\r\n   * @return {T|undefined} Value.\r\n   * @api\r\n   */ removeAt(index) {\n        if (index < 0 || index >= this.getLength()) return undefined;\n        const prev = this.array_[index];\n        this.array_.splice(index, 1);\n        this.updateLength_();\n        this.dispatchEvent(/** @type {CollectionEvent<T>} */ new $931ffc4e747c14db$export$a87ae6eb2761ec6d((0, $161dd067fe2d672c$export$2e2bcd8739ae039).REMOVE, prev, index));\n        return prev;\n    }\n    /**\r\n   * Set the element at the provided index.\r\n   * @param {number} index Index.\r\n   * @param {T} elem Element.\r\n   * @api\r\n   */ setAt(index, elem) {\n        const n = this.getLength();\n        if (index >= n) {\n            this.insertAt(index, elem);\n            return;\n        }\n        if (index < 0) throw new Error('Index out of bounds: ' + index);\n        if (this.unique_) this.assertUnique_(elem, index);\n        const prev = this.array_[index];\n        this.array_[index] = elem;\n        this.dispatchEvent(/** @type {CollectionEvent<T>} */ new $931ffc4e747c14db$export$a87ae6eb2761ec6d((0, $161dd067fe2d672c$export$2e2bcd8739ae039).REMOVE, prev, index));\n        this.dispatchEvent(/** @type {CollectionEvent<T>} */ new $931ffc4e747c14db$export$a87ae6eb2761ec6d((0, $161dd067fe2d672c$export$2e2bcd8739ae039).ADD, elem, index));\n    }\n    /**\r\n   * @private\r\n   */ updateLength_() {\n        this.set($931ffc4e747c14db$var$Property.LENGTH, this.array_.length);\n    }\n    /**\r\n   * @private\r\n   * @param {T} elem Element.\r\n   * @param {number} [except] Optional index to ignore.\r\n   */ assertUnique_(elem, except) {\n        for(let i = 0, ii = this.array_.length; i < ii; ++i){\n            if (this.array_[i] === elem && i !== except) throw new Error('Duplicate item added to a unique collection');\n        }\n    }\n}\nvar $931ffc4e747c14db$export$2e2bcd8739ae039 = $931ffc4e747c14db$var$Collection;\n\n\n\n/**\r\n * @module ol/MapBrowserEvent\r\n */ /**\r\n * @module ol/MapEvent\r\n */ \n/**\r\n * @classdesc\r\n * Events emitted as map events are instances of this type.\r\n * See {@link module:ol/Map~Map} for which events trigger a map event.\r\n */ class $3a171922c3a0c5ed$var$MapEvent extends (0, $aeedce20e9577100$export$2e2bcd8739ae039) {\n    /**\r\n   * @param {string} type Event type.\r\n   * @param {import(\"./Map.js\").default} map Map.\r\n   * @param {?import(\"./Map.js\").FrameState} [frameState] Frame state.\r\n   */ constructor(type, map, frameState){\n        super(type);\n        /**\r\n     * The map where the event occurred.\r\n     * @type {import(\"./Map.js\").default}\r\n     * @api\r\n     */ this.map = map;\n        /**\r\n     * The frame state at the time of the event.\r\n     * @type {?import(\"./Map.js\").FrameState}\r\n     * @api\r\n     */ this.frameState = frameState !== undefined ? frameState : null;\n    }\n}\nvar $3a171922c3a0c5ed$export$2e2bcd8739ae039 = $3a171922c3a0c5ed$var$MapEvent;\n\n\n/**\r\n * @classdesc\r\n * Events emitted as map browser events are instances of this type.\r\n * See {@link module:ol/Map~Map} for which events trigger a map browser event.\r\n * @template {PointerEvent|KeyboardEvent|WheelEvent} [EVENT=PointerEvent|KeyboardEvent|WheelEvent]\r\n */ class $a1b91f073c6a6c43$var$MapBrowserEvent extends (0, $3a171922c3a0c5ed$export$2e2bcd8739ae039) {\n    /**\r\n   * @param {string} type Event type.\r\n   * @param {import(\"./Map.js\").default} map Map.\r\n   * @param {EVENT} originalEvent Original event.\r\n   * @param {boolean} [dragging] Is the map currently being dragged?\r\n   * @param {import(\"./Map.js\").FrameState} [frameState] Frame state.\r\n   * @param {Array<PointerEvent>} [activePointers] Active pointers.\r\n   */ constructor(type, map, originalEvent, dragging, frameState, activePointers){\n        super(type, map, frameState);\n        /**\r\n     * The original browser event.\r\n     * @const\r\n     * @type {EVENT}\r\n     * @api\r\n     */ this.originalEvent = originalEvent;\n        /**\r\n     * The map pixel relative to the viewport corresponding to the original browser event.\r\n     * @type {?import(\"./pixel.js\").Pixel}\r\n     * @private\r\n     */ this.pixel_ = null;\n        /**\r\n     * The coordinate in the user projection corresponding to the original browser event.\r\n     * @type {?import(\"./coordinate.js\").Coordinate}\r\n     * @private\r\n     */ this.coordinate_ = null;\n        /**\r\n     * Indicates if the map is currently being dragged. Only set for\r\n     * `POINTERDRAG` and `POINTERMOVE` events. Default is `false`.\r\n     *\r\n     * @type {boolean}\r\n     * @api\r\n     */ this.dragging = dragging !== undefined ? dragging : false;\n        /**\r\n     * @type {Array<PointerEvent>|undefined}\r\n     */ this.activePointers = activePointers;\n    }\n    /**\r\n   * The map pixel relative to the viewport corresponding to the original event.\r\n   * @type {import(\"./pixel.js\").Pixel}\r\n   * @api\r\n   */ get pixel() {\n        if (!this.pixel_) this.pixel_ = this.map.getEventPixel(this.originalEvent);\n        return this.pixel_;\n    }\n    set pixel(pixel) {\n        this.pixel_ = pixel;\n    }\n    /**\r\n   * The coordinate corresponding to the original browser event.  This will be in the user\r\n   * projection if one is set.  Otherwise it will be in the view projection.\r\n   * @type {import(\"./coordinate.js\").Coordinate}\r\n   * @api\r\n   */ get coordinate() {\n        if (!this.coordinate_) this.coordinate_ = this.map.getCoordinateFromPixel(this.pixel);\n        return this.coordinate_;\n    }\n    set coordinate(coordinate) {\n        this.coordinate_ = coordinate;\n    }\n    /**\r\n   * Prevents the default browser action.\r\n   * See https://developer.mozilla.org/en-US/docs/Web/API/event.preventDefault.\r\n   * @api\r\n   * @override\r\n   */ preventDefault() {\n        super.preventDefault();\n        if ('preventDefault' in this.originalEvent) /** @type {UIEvent} */ this.originalEvent.preventDefault();\n    }\n    /**\r\n   * Prevents further propagation of the current event.\r\n   * See https://developer.mozilla.org/en-US/docs/Web/API/event.stopPropagation.\r\n   * @api\r\n   * @override\r\n   */ stopPropagation() {\n        super.stopPropagation();\n        if ('stopPropagation' in this.originalEvent) /** @type {UIEvent} */ this.originalEvent.stopPropagation();\n    }\n}\nvar $a1b91f073c6a6c43$export$2e2bcd8739ae039 = $a1b91f073c6a6c43$var$MapBrowserEvent;\n\n\n/**\r\n * @module ol/MapBrowserEventHandler\r\n */ \n/**\r\n * @module ol/MapBrowserEventType\r\n */ \nvar /**\r\n * Constants for event names.\r\n * @enum {string}\r\n */ $150f412a4a7fa263$export$2e2bcd8739ae039 /***\r\n * @typedef {'singleclick'|'click'|'dblclick'|'pointerdrag'|'pointermove'} Types\r\n */  = {\n    /**\r\n   * A true single click with no dragging and no double click. Note that this\r\n   * event is delayed by 250 ms to ensure that it is not a double click.\r\n   * @event module:ol/MapBrowserEvent~MapBrowserEvent#singleclick\r\n   * @api\r\n   */ SINGLECLICK: 'singleclick',\n    /**\r\n   * A click with no dragging. A double click will fire two of this.\r\n   * @event module:ol/MapBrowserEvent~MapBrowserEvent#click\r\n   * @api\r\n   */ CLICK: (0, $294047c5e65f31a3$export$2e2bcd8739ae039).CLICK,\n    /**\r\n   * A true double click, with no dragging.\r\n   * @event module:ol/MapBrowserEvent~MapBrowserEvent#dblclick\r\n   * @api\r\n   */ DBLCLICK: (0, $294047c5e65f31a3$export$2e2bcd8739ae039).DBLCLICK,\n    /**\r\n   * Triggered when a pointer is dragged.\r\n   * @event module:ol/MapBrowserEvent~MapBrowserEvent#pointerdrag\r\n   * @api\r\n   */ POINTERDRAG: 'pointerdrag',\n    /**\r\n   * Triggered when a pointer is moved. Note that on touch devices this is\r\n   * triggered when the map is panned, so is not the same as mousemove.\r\n   * @event module:ol/MapBrowserEvent~MapBrowserEvent#pointermove\r\n   * @api\r\n   */ POINTERMOVE: 'pointermove',\n    POINTERDOWN: 'pointerdown',\n    POINTERUP: 'pointerup',\n    POINTEROVER: 'pointerover',\n    POINTEROUT: 'pointerout',\n    POINTERENTER: 'pointerenter',\n    POINTERLEAVE: 'pointerleave',\n    POINTERCANCEL: 'pointercancel'\n};\n\n\n\n\n\n/**\r\n * @module ol/has\r\n */ const $67c66761d21428d0$var$ua = typeof navigator !== 'undefined' && typeof navigator.userAgent !== 'undefined' ? navigator.userAgent.toLowerCase() : '';\nconst $67c66761d21428d0$export$3227bfbdaa9275de = $67c66761d21428d0$var$ua.includes('safari') && !$67c66761d21428d0$var$ua.includes('chrom');\nconst $67c66761d21428d0$export$b23eed0e325a206a = $67c66761d21428d0$export$3227bfbdaa9275de && ($67c66761d21428d0$var$ua.includes('version/15.4') || /cpu (os|iphone os) 15_4 like mac os x/.test($67c66761d21428d0$var$ua));\nconst $67c66761d21428d0$export$39dfd62a25e0fe93 = $67c66761d21428d0$var$ua.includes('webkit') && !$67c66761d21428d0$var$ua.includes('edge');\nconst $67c66761d21428d0$export$76c0a3b101d93136 = $67c66761d21428d0$var$ua.includes('macintosh');\nconst $67c66761d21428d0$export$6b83a0446fc26f94 = typeof devicePixelRatio !== 'undefined' ? devicePixelRatio : 1;\nconst $67c66761d21428d0$export$98fcef3dc9973292 = typeof WorkerGlobalScope !== 'undefined' && typeof OffscreenCanvas !== 'undefined' && self instanceof WorkerGlobalScope; //eslint-disable-line\nconst $67c66761d21428d0$export$716f8695eedb9bad = typeof Image !== 'undefined' && Image.prototype.decode;\nconst $67c66761d21428d0$export$7478563940788376 = typeof createImageBitmap === 'function';\nconst $67c66761d21428d0$export$f751ce96c6c4e4fc = function() {\n    let passive = false;\n    try {\n        const options = Object.defineProperty({}, 'passive', {\n            get: function() {\n                passive = true;\n            }\n        });\n        // @ts-ignore Ignore invalid event type '_'\n        window.addEventListener('_', null, options);\n        // @ts-ignore Ignore invalid event type '_'\n        window.removeEventListener('_', null, options);\n    } catch  {\n    // passive not supported\n    }\n    return passive;\n}();\n\n\n/**\r\n * @module ol/pointer/EventType\r\n */ /**\r\n * Constants for event names.\r\n * @enum {string}\r\n */ var $d564567e31203d44$export$2e2bcd8739ae039 = {\n    POINTERMOVE: 'pointermove',\n    POINTERDOWN: 'pointerdown',\n    POINTERUP: 'pointerup',\n    POINTEROVER: 'pointerover',\n    POINTEROUT: 'pointerout',\n    POINTERENTER: 'pointerenter',\n    POINTERLEAVE: 'pointerleave',\n    POINTERCANCEL: 'pointercancel'\n};\n\n\nclass $6085d006f9d0efe2$var$MapBrowserEventHandler extends (0, $08c28d22c0cb5a39$export$2e2bcd8739ae039) {\n    /**\r\n   * @param {import(\"./Map.js\").default} map The map with the viewport to listen to events on.\r\n   * @param {number} [moveTolerance] The minimal distance the pointer must travel to trigger a move.\r\n   */ constructor(map, moveTolerance){\n        super(map);\n        /**\r\n     * This is the element that we will listen to the real events on.\r\n     * @type {import(\"./Map.js\").default}\r\n     * @private\r\n     */ this.map_ = map;\n        /**\r\n     * @type {ReturnType<typeof setTimeout>}\r\n     * @private\r\n     */ this.clickTimeoutId_;\n        /**\r\n     * Emulate dblclick and singleclick. Will be true when only one pointer is active.\r\n     * @type {boolean}\r\n     */ this.emulateClicks_ = false;\n        /**\r\n     * @type {boolean}\r\n     * @private\r\n     */ this.dragging_ = false;\n        /**\r\n     * @type {!Array<import(\"./events.js\").EventsKey>}\r\n     * @private\r\n     */ this.dragListenerKeys_ = [];\n        /**\r\n     * @type {number}\r\n     * @private\r\n     */ this.moveTolerance_ = moveTolerance === undefined ? 1 : moveTolerance;\n        /**\r\n     * The most recent \"down\" type event (or null if none have occurred).\r\n     * Set on pointerdown.\r\n     * @type {PointerEvent|null}\r\n     * @private\r\n     */ this.down_ = null;\n        const element = this.map_.getViewport();\n        /**\r\n     * @type {Array<PointerEvent>}\r\n     * @private\r\n     */ this.activePointers_ = [];\n        /**\r\n     * @type {!Object<number, Event>}\r\n     * @private\r\n     */ this.trackedTouches_ = {};\n        /**\r\n     * @private\r\n     */ this.element_ = element;\n        /**\r\n     * @type {?import(\"./events.js\").EventsKey}\r\n     * @private\r\n     */ this.pointerdownListenerKey_ = (0, $d5bf8abd656a3cdc$export$63174c828edd6ff8)(element, (0, $d564567e31203d44$export$2e2bcd8739ae039).POINTERDOWN, this.handlePointerDown_, this);\n        /**\r\n     * @type {PointerEvent}\r\n     * @private\r\n     */ this.originalPointerMoveEvent_;\n        /**\r\n     * @type {?import(\"./events.js\").EventsKey}\r\n     * @private\r\n     */ this.relayedListenerKey_ = (0, $d5bf8abd656a3cdc$export$63174c828edd6ff8)(element, (0, $d564567e31203d44$export$2e2bcd8739ae039).POINTERMOVE, this.relayMoveEvent_, this);\n        /**\r\n     * @private\r\n     */ this.boundHandleTouchMove_ = this.handleTouchMove_.bind(this);\n        this.element_.addEventListener((0, $294047c5e65f31a3$export$2e2bcd8739ae039).TOUCHMOVE, this.boundHandleTouchMove_, (0, $67c66761d21428d0$export$f751ce96c6c4e4fc) ? {\n            passive: false\n        } : false);\n    }\n    /**\r\n   * @param {PointerEvent} pointerEvent Pointer\r\n   * event.\r\n   * @private\r\n   */ emulateClick_(pointerEvent) {\n        let newEvent = new (0, $a1b91f073c6a6c43$export$2e2bcd8739ae039)((0, $150f412a4a7fa263$export$2e2bcd8739ae039).CLICK, this.map_, pointerEvent);\n        this.dispatchEvent(newEvent);\n        if (this.clickTimeoutId_ !== undefined) {\n            // double-click\n            clearTimeout(this.clickTimeoutId_);\n            this.clickTimeoutId_ = undefined;\n            newEvent = new (0, $a1b91f073c6a6c43$export$2e2bcd8739ae039)((0, $150f412a4a7fa263$export$2e2bcd8739ae039).DBLCLICK, this.map_, pointerEvent);\n            this.dispatchEvent(newEvent);\n        } else // click\n        this.clickTimeoutId_ = setTimeout(()=>{\n            this.clickTimeoutId_ = undefined;\n            const newEvent = new (0, $a1b91f073c6a6c43$export$2e2bcd8739ae039)((0, $150f412a4a7fa263$export$2e2bcd8739ae039).SINGLECLICK, this.map_, pointerEvent);\n            this.dispatchEvent(newEvent);\n        }, 250);\n    }\n    /**\r\n   * Keeps track on how many pointers are currently active.\r\n   *\r\n   * @param {PointerEvent} pointerEvent Pointer\r\n   * event.\r\n   * @private\r\n   */ updateActivePointers_(pointerEvent) {\n        const event = pointerEvent;\n        const id = event.pointerId;\n        if (event.type == (0, $150f412a4a7fa263$export$2e2bcd8739ae039).POINTERUP || event.type == (0, $150f412a4a7fa263$export$2e2bcd8739ae039).POINTERCANCEL) {\n            delete this.trackedTouches_[id];\n            for(const pointerId in this.trackedTouches_)if (this.trackedTouches_[pointerId].target !== event.target) {\n                // Some platforms assign a new pointerId when the target changes.\n                // If this happens, delete one tracked pointer. If there is more\n                // than one tracked pointer for the old target, it will be cleared\n                // by subsequent POINTERUP events from other pointers.\n                delete this.trackedTouches_[pointerId];\n                break;\n            }\n        } else if (event.type == (0, $150f412a4a7fa263$export$2e2bcd8739ae039).POINTERDOWN || event.type == (0, $150f412a4a7fa263$export$2e2bcd8739ae039).POINTERMOVE) this.trackedTouches_[id] = event;\n        this.activePointers_ = Object.values(this.trackedTouches_);\n    }\n    /**\r\n   * @param {PointerEvent} pointerEvent Pointer\r\n   * event.\r\n   * @private\r\n   */ handlePointerUp_(pointerEvent) {\n        this.updateActivePointers_(pointerEvent);\n        const newEvent = new (0, $a1b91f073c6a6c43$export$2e2bcd8739ae039)((0, $150f412a4a7fa263$export$2e2bcd8739ae039).POINTERUP, this.map_, pointerEvent, undefined, undefined, this.activePointers_);\n        this.dispatchEvent(newEvent);\n        // We emulate click events on left mouse button click, touch contact, and pen\n        // contact. isMouseActionButton returns true in these cases (evt.button is set\n        // to 0).\n        // See http://www.w3.org/TR/pointerevents/#button-states\n        // We only fire click, singleclick, and doubleclick if nobody has called\n        // event.preventDefault().\n        if (this.emulateClicks_ && !newEvent.defaultPrevented && !this.dragging_ && this.isMouseActionButton_(pointerEvent)) this.emulateClick_(this.down_);\n        if (this.activePointers_.length === 0) {\n            this.dragListenerKeys_.forEach((0, $d5bf8abd656a3cdc$export$b0a21c8b3c1c921));\n            this.dragListenerKeys_.length = 0;\n            this.dragging_ = false;\n            this.down_ = null;\n        }\n    }\n    /**\r\n   * @param {PointerEvent} pointerEvent Pointer\r\n   * event.\r\n   * @return {boolean} If the left mouse button was pressed.\r\n   * @private\r\n   */ isMouseActionButton_(pointerEvent) {\n        return pointerEvent.button === 0;\n    }\n    /**\r\n   * @param {PointerEvent} pointerEvent Pointer\r\n   * event.\r\n   * @private\r\n   */ handlePointerDown_(pointerEvent) {\n        this.emulateClicks_ = this.activePointers_.length === 0;\n        this.updateActivePointers_(pointerEvent);\n        const newEvent = new (0, $a1b91f073c6a6c43$export$2e2bcd8739ae039)((0, $150f412a4a7fa263$export$2e2bcd8739ae039).POINTERDOWN, this.map_, pointerEvent, undefined, undefined, this.activePointers_);\n        this.dispatchEvent(newEvent);\n        this.down_ = new PointerEvent(pointerEvent.type, pointerEvent);\n        Object.defineProperty(this.down_, 'target', {\n            writable: false,\n            value: pointerEvent.target\n        });\n        if (this.dragListenerKeys_.length === 0) {\n            const doc = this.map_.getOwnerDocument();\n            this.dragListenerKeys_.push((0, $d5bf8abd656a3cdc$export$63174c828edd6ff8)(doc, (0, $150f412a4a7fa263$export$2e2bcd8739ae039).POINTERMOVE, this.handlePointerMove_, this), (0, $d5bf8abd656a3cdc$export$63174c828edd6ff8)(doc, (0, $150f412a4a7fa263$export$2e2bcd8739ae039).POINTERUP, this.handlePointerUp_, this), /* Note that the listener for `pointercancel is set up on\r\n         * `pointerEventHandler_` and not `documentPointerEventHandler_` like\r\n         * the `pointerup` and `pointermove` listeners.\r\n         *\r\n         * The reason for this is the following: `TouchSource.vacuumTouches_()`\r\n         * issues `pointercancel` events, when there was no `touchend` for a\r\n         * `touchstart`. Now, let's say a first `touchstart` is registered on\r\n         * `pointerEventHandler_`. The `documentPointerEventHandler_` is set up.\r\n         * But `documentPointerEventHandler_` doesn't know about the first\r\n         * `touchstart`. If there is no `touchend` for the `touchstart`, we can\r\n         * only receive a `touchcancel` from `pointerEventHandler_`, because it is\r\n         * only registered there.\r\n         */ (0, $d5bf8abd656a3cdc$export$63174c828edd6ff8)(this.element_, (0, $150f412a4a7fa263$export$2e2bcd8739ae039).POINTERCANCEL, this.handlePointerUp_, this));\n            if (this.element_.getRootNode && this.element_.getRootNode() !== doc) this.dragListenerKeys_.push((0, $d5bf8abd656a3cdc$export$63174c828edd6ff8)(this.element_.getRootNode(), (0, $150f412a4a7fa263$export$2e2bcd8739ae039).POINTERUP, this.handlePointerUp_, this));\n        }\n    }\n    /**\r\n   * @param {PointerEvent} pointerEvent Pointer\r\n   * event.\r\n   * @private\r\n   */ handlePointerMove_(pointerEvent) {\n        // Between pointerdown and pointerup, pointermove events are triggered.\n        // To avoid a 'false' touchmove event to be dispatched, we test if the pointer\n        // moved a significant distance.\n        if (this.isMoving_(pointerEvent)) {\n            this.updateActivePointers_(pointerEvent);\n            this.dragging_ = true;\n            const newEvent = new (0, $a1b91f073c6a6c43$export$2e2bcd8739ae039)((0, $150f412a4a7fa263$export$2e2bcd8739ae039).POINTERDRAG, this.map_, pointerEvent, this.dragging_, undefined, this.activePointers_);\n            this.dispatchEvent(newEvent);\n        }\n    }\n    /**\r\n   * Wrap and relay a pointermove event.\r\n   * @param {PointerEvent} pointerEvent Pointer\r\n   * event.\r\n   * @private\r\n   */ relayMoveEvent_(pointerEvent) {\n        this.originalPointerMoveEvent_ = pointerEvent;\n        const dragging = !!(this.down_ && this.isMoving_(pointerEvent));\n        this.dispatchEvent(new (0, $a1b91f073c6a6c43$export$2e2bcd8739ae039)((0, $150f412a4a7fa263$export$2e2bcd8739ae039).POINTERMOVE, this.map_, pointerEvent, dragging));\n    }\n    /**\r\n   * Flexible handling of a `touch-action: none` css equivalent: because calling\r\n   * `preventDefault()` on a `pointermove` event does not stop native page scrolling\r\n   * and zooming, we also listen for `touchmove` and call `preventDefault()` on it\r\n   * when an interaction (currently `DragPan` handles the event.\r\n   * @param {TouchEvent} event Event.\r\n   * @private\r\n   */ handleTouchMove_(event) {\n        // Due to https://github.com/mpizenberg/elm-pep/issues/2, `this.originalPointerMoveEvent_`\n        // may not be initialized yet when we get here on a platform without native pointer events,\n        // when elm-pep is used as pointer events polyfill.\n        const originalEvent = this.originalPointerMoveEvent_;\n        if ((!originalEvent || originalEvent.defaultPrevented) && (typeof event.cancelable !== 'boolean' || event.cancelable === true)) event.preventDefault();\n    }\n    /**\r\n   * @param {PointerEvent} pointerEvent Pointer\r\n   * event.\r\n   * @return {boolean} Is moving.\r\n   * @private\r\n   */ isMoving_(pointerEvent) {\n        return this.dragging_ || Math.abs(pointerEvent.clientX - this.down_.clientX) > this.moveTolerance_ || Math.abs(pointerEvent.clientY - this.down_.clientY) > this.moveTolerance_;\n    }\n    /**\r\n   * Clean up.\r\n   * @override\r\n   */ disposeInternal() {\n        if (this.relayedListenerKey_) {\n            (0, $d5bf8abd656a3cdc$export$b0a21c8b3c1c921)(this.relayedListenerKey_);\n            this.relayedListenerKey_ = null;\n        }\n        this.element_.removeEventListener((0, $294047c5e65f31a3$export$2e2bcd8739ae039).TOUCHMOVE, this.boundHandleTouchMove_);\n        if (this.pointerdownListenerKey_) {\n            (0, $d5bf8abd656a3cdc$export$b0a21c8b3c1c921)(this.pointerdownListenerKey_);\n            this.pointerdownListenerKey_ = null;\n        }\n        this.dragListenerKeys_.forEach((0, $d5bf8abd656a3cdc$export$b0a21c8b3c1c921));\n        this.dragListenerKeys_.length = 0;\n        this.element_ = null;\n        super.disposeInternal();\n    }\n}\nvar $6085d006f9d0efe2$export$2e2bcd8739ae039 = $6085d006f9d0efe2$var$MapBrowserEventHandler;\n\n\n\n\n/**\r\n * @module ol/MapEventType\r\n */ /**\r\n * @enum {string}\r\n */ var $e4ad75f913b6f7ff$export$2e2bcd8739ae039 /***\r\n * @typedef {'postrender'|'movestart'|'moveend'|'loadstart'|'loadend'} Types\r\n */  = {\n    /**\r\n   * Triggered after a map frame is rendered.\r\n   * @event module:ol/MapEvent~MapEvent#postrender\r\n   * @api\r\n   */ POSTRENDER: 'postrender',\n    /**\r\n   * Triggered when the map starts moving.\r\n   * @event module:ol/MapEvent~MapEvent#movestart\r\n   * @api\r\n   */ MOVESTART: 'movestart',\n    /**\r\n   * Triggered after the map is moved.\r\n   * @event module:ol/MapEvent~MapEvent#moveend\r\n   * @api\r\n   */ MOVEEND: 'moveend',\n    /**\r\n   * Triggered when loading of additional map data (tiles, images, features) starts.\r\n   * @event module:ol/MapEvent~MapEvent#loadstart\r\n   * @api\r\n   */ LOADSTART: 'loadstart',\n    /**\r\n   * Triggered when loading of additional map data has completed.\r\n   * @event module:ol/MapEvent~MapEvent#loadend\r\n   * @api\r\n   */ LOADEND: 'loadend'\n};\n\n\n/**\r\n * @module ol/MapProperty\r\n */ /**\r\n * @enum {string}\r\n */ var $07fa325567004bb7$export$2e2bcd8739ae039 = {\n    LAYERGROUP: 'layergroup',\n    SIZE: 'size',\n    TARGET: 'target',\n    VIEW: 'view'\n};\n\n\n\n\n/**\r\n * @module ol/TileQueue\r\n */ /**\r\n * @module ol/TileState\r\n */ /**\r\n * @enum {number}\r\n */ var $b8291d9739c3c64e$export$2e2bcd8739ae039 = {\n    IDLE: 0,\n    LOADING: 1,\n    LOADED: 2,\n    /**\r\n   * Indicates that tile loading failed\r\n   * @type {number}\r\n   */ ERROR: 3,\n    EMPTY: 4\n};\n\n\n\n/**\r\n * @module ol/structs/PriorityQueue\r\n */ \n\nconst $716c6804ea170b71$export$b4af72c40fd57063 = Infinity;\n/**\r\n * @classdesc\r\n * Priority queue.\r\n *\r\n * The implementation is inspired from the Closure Library's Heap class and\r\n * Python's heapq module.\r\n *\r\n * See https://github.com/google/closure-library/blob/master/closure/goog/structs/heap.js\r\n * and https://hg.python.org/cpython/file/2.7/Lib/heapq.py.\r\n *\r\n * @template T\r\n */ class $716c6804ea170b71$var$PriorityQueue {\n    /**\r\n   * @param {function(T): number} priorityFunction Priority function.\r\n   * @param {function(T): string} keyFunction Key function.\r\n   */ constructor(priorityFunction, keyFunction){\n        /**\r\n     * @type {function(T): number}\r\n     * @private\r\n     */ this.priorityFunction_ = priorityFunction;\n        /**\r\n     * @type {function(T): string}\r\n     * @private\r\n     */ this.keyFunction_ = keyFunction;\n        /**\r\n     * @type {Array<T>}\r\n     * @private\r\n     */ this.elements_ = [];\n        /**\r\n     * @type {Array<number>}\r\n     * @private\r\n     */ this.priorities_ = [];\n        /**\r\n     * @type {!Object<string, boolean>}\r\n     * @private\r\n     */ this.queuedElements_ = {};\n    }\n    /**\r\n   * FIXME empty description for jsdoc\r\n   */ clear() {\n        this.elements_.length = 0;\n        this.priorities_.length = 0;\n        (0, $beaefe87199bb537$export$42ffd38884aecdac)(this.queuedElements_);\n    }\n    /**\r\n   * Remove and return the highest-priority element. O(log N).\r\n   * @return {T} Element.\r\n   */ dequeue() {\n        const elements = this.elements_;\n        const priorities = this.priorities_;\n        const element = elements[0];\n        if (elements.length == 1) {\n            elements.length = 0;\n            priorities.length = 0;\n        } else {\n            elements[0] = /** @type {T} */ elements.pop();\n            priorities[0] = /** @type {number} */ priorities.pop();\n            this.siftUp_(0);\n        }\n        const elementKey = this.keyFunction_(element);\n        delete this.queuedElements_[elementKey];\n        return element;\n    }\n    /**\r\n   * Enqueue an element. O(log N).\r\n   * @param {T} element Element.\r\n   * @return {boolean} The element was added to the queue.\r\n   */ enqueue(element) {\n        (0, $35d5ec884318008e$export$a7a9523472993e97)(!(this.keyFunction_(element) in this.queuedElements_), 'Tried to enqueue an `element` that was already added to the queue');\n        const priority = this.priorityFunction_(element);\n        if (priority != $716c6804ea170b71$export$b4af72c40fd57063) {\n            this.elements_.push(element);\n            this.priorities_.push(priority);\n            this.queuedElements_[this.keyFunction_(element)] = true;\n            this.siftDown_(0, this.elements_.length - 1);\n            return true;\n        }\n        return false;\n    }\n    /**\r\n   * @return {number} Count.\r\n   */ getCount() {\n        return this.elements_.length;\n    }\n    /**\r\n   * Gets the index of the left child of the node at the given index.\r\n   * @param {number} index The index of the node to get the left child for.\r\n   * @return {number} The index of the left child.\r\n   * @private\r\n   */ getLeftChildIndex_(index) {\n        return index * 2 + 1;\n    }\n    /**\r\n   * Gets the index of the right child of the node at the given index.\r\n   * @param {number} index The index of the node to get the right child for.\r\n   * @return {number} The index of the right child.\r\n   * @private\r\n   */ getRightChildIndex_(index) {\n        return index * 2 + 2;\n    }\n    /**\r\n   * Gets the index of the parent of the node at the given index.\r\n   * @param {number} index The index of the node to get the parent for.\r\n   * @return {number} The index of the parent.\r\n   * @private\r\n   */ getParentIndex_(index) {\n        return index - 1 >> 1;\n    }\n    /**\r\n   * Make this a heap. O(N).\r\n   * @private\r\n   */ heapify_() {\n        let i;\n        for(i = (this.elements_.length >> 1) - 1; i >= 0; i--)this.siftUp_(i);\n    }\n    /**\r\n   * @return {boolean} Is empty.\r\n   */ isEmpty() {\n        return this.elements_.length === 0;\n    }\n    /**\r\n   * @param {string} key Key.\r\n   * @return {boolean} Is key queued.\r\n   */ isKeyQueued(key) {\n        return key in this.queuedElements_;\n    }\n    /**\r\n   * @param {T} element Element.\r\n   * @return {boolean} Is queued.\r\n   */ isQueued(element) {\n        return this.isKeyQueued(this.keyFunction_(element));\n    }\n    /**\r\n   * @param {number} index The index of the node to move down.\r\n   * @private\r\n   */ siftUp_(index) {\n        const elements = this.elements_;\n        const priorities = this.priorities_;\n        const count = elements.length;\n        const element = elements[index];\n        const priority = priorities[index];\n        const startIndex = index;\n        while(index < count >> 1){\n            const lIndex = this.getLeftChildIndex_(index);\n            const rIndex = this.getRightChildIndex_(index);\n            const smallerChildIndex = rIndex < count && priorities[rIndex] < priorities[lIndex] ? rIndex : lIndex;\n            elements[index] = elements[smallerChildIndex];\n            priorities[index] = priorities[smallerChildIndex];\n            index = smallerChildIndex;\n        }\n        elements[index] = element;\n        priorities[index] = priority;\n        this.siftDown_(startIndex, index);\n    }\n    /**\r\n   * @param {number} startIndex The index of the root.\r\n   * @param {number} index The index of the node to move up.\r\n   * @private\r\n   */ siftDown_(startIndex, index) {\n        const elements = this.elements_;\n        const priorities = this.priorities_;\n        const element = elements[index];\n        const priority = priorities[index];\n        while(index > startIndex){\n            const parentIndex = this.getParentIndex_(index);\n            if (priorities[parentIndex] > priority) {\n                elements[index] = elements[parentIndex];\n                priorities[index] = priorities[parentIndex];\n                index = parentIndex;\n            } else break;\n        }\n        elements[index] = element;\n        priorities[index] = priority;\n    }\n    /**\r\n   * FIXME empty description for jsdoc\r\n   */ reprioritize() {\n        const priorityFunction = this.priorityFunction_;\n        const elements = this.elements_;\n        const priorities = this.priorities_;\n        let index = 0;\n        const n = elements.length;\n        let element, i, priority;\n        for(i = 0; i < n; ++i){\n            element = elements[i];\n            priority = priorityFunction(element);\n            if (priority == $716c6804ea170b71$export$b4af72c40fd57063) delete this.queuedElements_[this.keyFunction_(element)];\n            else {\n                priorities[index] = priority;\n                elements[index++] = element;\n            }\n        }\n        elements.length = index;\n        priorities.length = index;\n        this.heapify_();\n    }\n}\nvar $716c6804ea170b71$export$2e2bcd8739ae039 = $716c6804ea170b71$var$PriorityQueue;\n\n\n/**\r\n * @typedef {function(import(\"./Tile.js\").default, string, import('./tilecoord.js').TileCoord, number): number} PriorityFunction\r\n */ /**\r\n * @typedef {[import('./Tile.js').default, string, import('./tilecoord.js').TileCoord, number]} TileQueueElement\r\n */ /**\r\n * @extends PriorityQueue<TileQueueElement>}\r\n */ class $4c51fd53052a6bbc$var$TileQueue extends (0, $716c6804ea170b71$export$2e2bcd8739ae039) {\n    /**\r\n   * @param {PriorityFunction} tilePriorityFunction Tile priority function.\r\n   * @param {function(): ?} tileChangeCallback Function called on each tile change event.\r\n   */ constructor(tilePriorityFunction, tileChangeCallback){\n        super((element)=>tilePriorityFunction.apply(null, element), (element)=>element[0].getKey());\n        /** @private */ this.boundHandleTileChange_ = this.handleTileChange.bind(this);\n        /**\r\n     * @private\r\n     * @type {function(): ?}\r\n     */ this.tileChangeCallback_ = tileChangeCallback;\n        /**\r\n     * @private\r\n     * @type {number}\r\n     */ this.tilesLoading_ = 0;\n        /**\r\n     * @private\r\n     * @type {!Object<string,boolean>}\r\n     */ this.tilesLoadingKeys_ = {};\n    }\n    /**\r\n   * @param {TileQueueElement} element Element.\r\n   * @return {boolean} The element was added to the queue.\r\n   * @override\r\n   */ enqueue(element) {\n        const added = super.enqueue(element);\n        if (added) {\n            const tile = element[0];\n            tile.addEventListener((0, $294047c5e65f31a3$export$2e2bcd8739ae039).CHANGE, this.boundHandleTileChange_);\n        }\n        return added;\n    }\n    /**\r\n   * @return {number} Number of tiles loading.\r\n   */ getTilesLoading() {\n        return this.tilesLoading_;\n    }\n    /**\r\n   * @param {import(\"./events/Event.js\").default} event Event.\r\n   * @protected\r\n   */ handleTileChange(event) {\n        const tile = /** @type {import(\"./Tile.js\").default} */ event.target;\n        const state = tile.getState();\n        if (state === (0, $b8291d9739c3c64e$export$2e2bcd8739ae039).LOADED || state === (0, $b8291d9739c3c64e$export$2e2bcd8739ae039).ERROR || state === (0, $b8291d9739c3c64e$export$2e2bcd8739ae039).EMPTY) {\n            if (state !== (0, $b8291d9739c3c64e$export$2e2bcd8739ae039).ERROR) tile.removeEventListener((0, $294047c5e65f31a3$export$2e2bcd8739ae039).CHANGE, this.boundHandleTileChange_);\n            const tileKey = tile.getKey();\n            if (tileKey in this.tilesLoadingKeys_) {\n                delete this.tilesLoadingKeys_[tileKey];\n                --this.tilesLoading_;\n            }\n            this.tileChangeCallback_();\n        }\n    }\n    /**\r\n   * @param {number} maxTotalLoading Maximum number tiles to load simultaneously.\r\n   * @param {number} maxNewLoads Maximum number of new tiles to load.\r\n   */ loadMoreTiles(maxTotalLoading, maxNewLoads) {\n        let newLoads = 0;\n        while(this.tilesLoading_ < maxTotalLoading && newLoads < maxNewLoads && this.getCount() > 0){\n            const tile = this.dequeue()[0];\n            const tileKey = tile.getKey();\n            const state = tile.getState();\n            if (state === (0, $b8291d9739c3c64e$export$2e2bcd8739ae039).IDLE && !(tileKey in this.tilesLoadingKeys_)) {\n                this.tilesLoadingKeys_[tileKey] = true;\n                ++this.tilesLoading_;\n                ++newLoads;\n                tile.load();\n            }\n        }\n    }\n}\nvar $4c51fd53052a6bbc$export$2e2bcd8739ae039 = $4c51fd53052a6bbc$var$TileQueue;\nfunction $4c51fd53052a6bbc$export$f08ad5eceeff5d45(frameState, tile, tileSourceKey, tileCenter, tileResolution) {\n    // Filter out tiles at higher zoom levels than the current zoom level, or that\n    // are outside the visible extent.\n    if (!frameState || !(tileSourceKey in frameState.wantedTiles)) return 0, $716c6804ea170b71$export$b4af72c40fd57063;\n    if (!frameState.wantedTiles[tileSourceKey][tile.getKey()]) return 0, $716c6804ea170b71$export$b4af72c40fd57063;\n    // Prioritize the highest zoom level tiles closest to the focus.\n    // Tiles at higher zoom levels are prioritized using Math.log(tileResolution).\n    // Within a zoom level, tiles are prioritized by the distance in pixels between\n    // the center of the tile and the center of the viewport.  The factor of 65536\n    // means that the prioritization should behave as desired for tiles up to\n    // 65536 * Math.log(2) = 45426 pixels from the focus.\n    const center = frameState.viewState.center;\n    const deltaX = tileCenter[0] - center[0];\n    const deltaY = tileCenter[1] - center[1];\n    return 65536 * Math.log(tileResolution) + Math.sqrt(deltaX * deltaX + deltaY * deltaY) / tileResolution;\n}\n\n\n/**\r\n * @module ol/View\r\n */ \n/**\r\n * @module ol/ViewHint\r\n */ /**\r\n * @enum {number}\r\n */ var $7d362782b4ccb93d$export$2e2bcd8739ae039 = {\n    ANIMATING: 0,\n    INTERACTING: 1\n};\n\n\n/**\r\n * @module ol/ViewProperty\r\n */ /**\r\n * @enum {string}\r\n */ var $d35baefbe89be4c5$export$2e2bcd8739ae039 = {\n    CENTER: 'center',\n    RESOLUTION: 'resolution',\n    ROTATION: 'rotation'\n};\n\n\n\n\n/**\r\n * @module ol/centerconstraint\r\n */ /**\r\n * @module ol/math\r\n */ /**\r\n * Takes a number and clamps it to within the provided bounds.\r\n * @param {number} value The input number.\r\n * @param {number} min The minimum value to return.\r\n * @param {number} max The maximum value to return.\r\n * @return {number} The input number if it is within bounds, or the nearest\r\n *     number within the bounds.\r\n */ function $6b000a049d919fe5$export$7d15b64cf5a3a4c4(value, min, max) {\n    return Math.min(Math.max(value, min), max);\n}\nfunction $6b000a049d919fe5$export$251bb0a9cef172e6(x, y, x1, y1, x2, y2) {\n    const dx = x2 - x1;\n    const dy = y2 - y1;\n    if (dx !== 0 || dy !== 0) {\n        const t = ((x - x1) * dx + (y - y1) * dy) / (dx * dx + dy * dy);\n        if (t > 1) {\n            x1 = x2;\n            y1 = y2;\n        } else if (t > 0) {\n            x1 += dx * t;\n            y1 += dy * t;\n        }\n    }\n    return $6b000a049d919fe5$export$88e6ebb4fe54f538(x, y, x1, y1);\n}\nfunction $6b000a049d919fe5$export$88e6ebb4fe54f538(x1, y1, x2, y2) {\n    const dx = x2 - x1;\n    const dy = y2 - y1;\n    return dx * dx + dy * dy;\n}\nfunction $6b000a049d919fe5$export$8240f01c446270e6(mat) {\n    const n = mat.length;\n    for(let i = 0; i < n; i++){\n        // Find max in the i-th column (ignoring i - 1 first rows)\n        let maxRow = i;\n        let maxEl = Math.abs(mat[i][i]);\n        for(let r = i + 1; r < n; r++){\n            const absValue = Math.abs(mat[r][i]);\n            if (absValue > maxEl) {\n                maxEl = absValue;\n                maxRow = r;\n            }\n        }\n        if (maxEl === 0) return null; // matrix is singular\n        // Swap max row with i-th (current) row\n        const tmp = mat[maxRow];\n        mat[maxRow] = mat[i];\n        mat[i] = tmp;\n        // Subtract the i-th row to make all the remaining rows 0 in the i-th column\n        for(let j = i + 1; j < n; j++){\n            const coef = -mat[j][i] / mat[i][i];\n            for(let k = i; k < n + 1; k++)if (i == k) mat[j][k] = 0;\n            else mat[j][k] += coef * mat[i][k];\n        }\n    }\n    // Solve Ax=b for upper triangular matrix A (mat)\n    const x = new Array(n);\n    for(let l = n - 1; l >= 0; l--){\n        x[l] = mat[l][n] / mat[l][l];\n        for(let m = l - 1; m >= 0; m--)mat[m][n] -= mat[m][l] * x[l];\n    }\n    return x;\n}\nfunction $6b000a049d919fe5$export$56cb859c01fa134d(angleInRadians) {\n    return angleInRadians * 180 / Math.PI;\n}\nfunction $6b000a049d919fe5$export$cba01ba138429a1d(angleInDegrees) {\n    return angleInDegrees * Math.PI / 180;\n}\nfunction $6b000a049d919fe5$export$ba467bec01d66def(a, b) {\n    const r = a % b;\n    return r * b < 0 ? r + b : r;\n}\nfunction $6b000a049d919fe5$export$3a89f8d6f6bf6c9f(a, b, x) {\n    return a + x * (b - a);\n}\nfunction $6b000a049d919fe5$export$a81f732198733497(n, decimals) {\n    const factor = Math.pow(10, decimals);\n    return Math.round(n * factor) / factor;\n}\nfunction $6b000a049d919fe5$export$2077e0241d6afd3c(n, decimals) {\n    return Math.round($6b000a049d919fe5$export$a81f732198733497(n, decimals));\n}\nfunction $6b000a049d919fe5$export$a3fe094919f356fd(n, decimals) {\n    return Math.floor($6b000a049d919fe5$export$a81f732198733497(n, decimals));\n}\nfunction $6b000a049d919fe5$export$803ce6b71a0a94b2(n, decimals) {\n    return Math.ceil($6b000a049d919fe5$export$a81f732198733497(n, decimals));\n}\nfunction $6b000a049d919fe5$export$4997ffc0176396a6(n, min, max) {\n    if (n >= min && n < max) return n;\n    const range = max - min;\n    return ((n - min) % range + range) % range + min;\n}\n\n\nfunction $b21a6e049949bb31$export$c2f0af2c946f6897(extent, onlyCenter, smooth) {\n    return(/**\r\n     * @param {import(\"./coordinate.js\").Coordinate|undefined} center Center.\r\n     * @param {number|undefined} resolution Resolution.\r\n     * @param {import(\"./size.js\").Size} size Viewport size; unused if `onlyCenter` was specified.\r\n     * @param {boolean} [isMoving] True if an interaction or animation is in progress.\r\n     * @param {Array<number>} [centerShift] Shift between map center and viewport center.\r\n     * @return {import(\"./coordinate.js\").Coordinate|undefined} Center.\r\n     */ function(center, resolution, size, isMoving, centerShift) {\n        if (!center) return undefined;\n        if (!resolution && !onlyCenter) return center;\n        const viewWidth = onlyCenter ? 0 : size[0] * resolution;\n        const viewHeight = onlyCenter ? 0 : size[1] * resolution;\n        const shiftX = centerShift ? centerShift[0] : 0;\n        const shiftY = centerShift ? centerShift[1] : 0;\n        let minX = extent[0] + viewWidth / 2 + shiftX;\n        let maxX = extent[2] - viewWidth / 2 + shiftX;\n        let minY = extent[1] + viewHeight / 2 + shiftY;\n        let maxY = extent[3] - viewHeight / 2 + shiftY;\n        // note: when zooming out of bounds, min and max values for x and y may\n        // end up inverted (min > max); this has to be accounted for\n        if (minX > maxX) {\n            minX = (maxX + minX) / 2;\n            maxX = minX;\n        }\n        if (minY > maxY) {\n            minY = (maxY + minY) / 2;\n            maxY = minY;\n        }\n        let x = (0, $6b000a049d919fe5$export$7d15b64cf5a3a4c4)(center[0], minX, maxX);\n        let y = (0, $6b000a049d919fe5$export$7d15b64cf5a3a4c4)(center[1], minY, maxY);\n        // during an interaction, allow some overscroll\n        if (isMoving && smooth && resolution) {\n            const ratio = 30 * resolution;\n            x += -ratio * Math.log(1 + Math.max(0, minX - center[0]) / ratio) + ratio * Math.log(1 + Math.max(0, center[0] - maxX) / ratio);\n            y += -ratio * Math.log(1 + Math.max(0, minY - center[1]) / ratio) + ratio * Math.log(1 + Math.max(0, center[1] - maxY) / ratio);\n        }\n        return [\n            x,\n            y\n        ];\n    });\n}\nfunction $b21a6e049949bb31$export$f883a24d5edde77c(center) {\n    return center;\n}\n\n\n/**\r\n * @module ol/coordinate\r\n */ /**\r\n * @module ol/extent\r\n */ /**\r\n * @module ol/extent/Relationship\r\n */ /**\r\n * Relationship to an extent.\r\n * @enum {number}\r\n */ var $dab4245bc22b806c$export$2e2bcd8739ae039 = {\n    UNKNOWN: 0,\n    INTERSECTING: 1,\n    ABOVE: 2,\n    RIGHT: 4,\n    BELOW: 8,\n    LEFT: 16\n};\n\n\nfunction $6da4c8ed3074c92b$export$8aceca7c77505534(coordinates) {\n    const extent = $6da4c8ed3074c92b$export$fe201bb3bbe031e9();\n    for(let i = 0, ii = coordinates.length; i < ii; ++i)$6da4c8ed3074c92b$export$1f820e3920fa5715(extent, coordinates[i]);\n    return extent;\n}\n/**\r\n * @param {Array<number>} xs Xs.\r\n * @param {Array<number>} ys Ys.\r\n * @param {Extent} [dest] Destination extent.\r\n * @private\r\n * @return {Extent} Extent.\r\n */ function $6da4c8ed3074c92b$var$_boundingExtentXYs(xs, ys, dest) {\n    const minX = Math.min.apply(null, xs);\n    const minY = Math.min.apply(null, ys);\n    const maxX = Math.max.apply(null, xs);\n    const maxY = Math.max.apply(null, ys);\n    return $6da4c8ed3074c92b$export$958e3e1a02eac4b6(minX, minY, maxX, maxY, dest);\n}\nfunction $6da4c8ed3074c92b$export$ab1029bcae9ddb4a(extent, value, dest) {\n    if (dest) {\n        dest[0] = extent[0] - value;\n        dest[1] = extent[1] - value;\n        dest[2] = extent[2] + value;\n        dest[3] = extent[3] + value;\n        return dest;\n    }\n    return [\n        extent[0] - value,\n        extent[1] - value,\n        extent[2] + value,\n        extent[3] + value\n    ];\n}\nfunction $6da4c8ed3074c92b$export$9cd59f9826255e47(extent, dest) {\n    if (dest) {\n        dest[0] = extent[0];\n        dest[1] = extent[1];\n        dest[2] = extent[2];\n        dest[3] = extent[3];\n        return dest;\n    }\n    return extent.slice();\n}\nfunction $6da4c8ed3074c92b$export$cbe64c389534206f(extent, x, y) {\n    let dx, dy;\n    if (x < extent[0]) dx = extent[0] - x;\n    else if (extent[2] < x) dx = x - extent[2];\n    else dx = 0;\n    if (y < extent[1]) dy = extent[1] - y;\n    else if (extent[3] < y) dy = y - extent[3];\n    else dy = 0;\n    return dx * dx + dy * dy;\n}\nfunction $6da4c8ed3074c92b$export$ac68c24d37ca240f(extent, coordinate) {\n    return $6da4c8ed3074c92b$export$805bdfd6d6690e97(extent, coordinate[0], coordinate[1]);\n}\nfunction $6da4c8ed3074c92b$export$be866b1e0809b17e(extent1, extent2) {\n    return extent1[0] <= extent2[0] && extent2[2] <= extent1[2] && extent1[1] <= extent2[1] && extent2[3] <= extent1[3];\n}\nfunction $6da4c8ed3074c92b$export$805bdfd6d6690e97(extent, x, y) {\n    return extent[0] <= x && x <= extent[2] && extent[1] <= y && y <= extent[3];\n}\nfunction $6da4c8ed3074c92b$export$f97905ead28c61a8(extent, coordinate) {\n    const minX = extent[0];\n    const minY = extent[1];\n    const maxX = extent[2];\n    const maxY = extent[3];\n    const x = coordinate[0];\n    const y = coordinate[1];\n    let relationship = (0, $dab4245bc22b806c$export$2e2bcd8739ae039).UNKNOWN;\n    if (x < minX) relationship = relationship | (0, $dab4245bc22b806c$export$2e2bcd8739ae039).LEFT;\n    else if (x > maxX) relationship = relationship | (0, $dab4245bc22b806c$export$2e2bcd8739ae039).RIGHT;\n    if (y < minY) relationship = relationship | (0, $dab4245bc22b806c$export$2e2bcd8739ae039).BELOW;\n    else if (y > maxY) relationship = relationship | (0, $dab4245bc22b806c$export$2e2bcd8739ae039).ABOVE;\n    if (relationship === (0, $dab4245bc22b806c$export$2e2bcd8739ae039).UNKNOWN) relationship = (0, $dab4245bc22b806c$export$2e2bcd8739ae039).INTERSECTING;\n    return relationship;\n}\nfunction $6da4c8ed3074c92b$export$fe201bb3bbe031e9() {\n    return [\n        Infinity,\n        Infinity,\n        -Infinity,\n        -Infinity\n    ];\n}\nfunction $6da4c8ed3074c92b$export$958e3e1a02eac4b6(minX, minY, maxX, maxY, dest) {\n    if (dest) {\n        dest[0] = minX;\n        dest[1] = minY;\n        dest[2] = maxX;\n        dest[3] = maxY;\n        return dest;\n    }\n    return [\n        minX,\n        minY,\n        maxX,\n        maxY\n    ];\n}\nfunction $6da4c8ed3074c92b$export$3e2152b047719fa1(dest) {\n    return $6da4c8ed3074c92b$export$958e3e1a02eac4b6(Infinity, Infinity, -Infinity, -Infinity, dest);\n}\nfunction $6da4c8ed3074c92b$export$4838bf78d04a9440(coordinate, dest) {\n    const x = coordinate[0];\n    const y = coordinate[1];\n    return $6da4c8ed3074c92b$export$958e3e1a02eac4b6(x, y, x, y, dest);\n}\nfunction $6da4c8ed3074c92b$export$29e3ad4dbd0cb863(coordinates, dest) {\n    const extent = $6da4c8ed3074c92b$export$3e2152b047719fa1(dest);\n    return $6da4c8ed3074c92b$export$795cd48be4d5f252(extent, coordinates);\n}\nfunction $6da4c8ed3074c92b$export$be0ab0bf96ca59ca(flatCoordinates, offset, end, stride, dest) {\n    const extent = $6da4c8ed3074c92b$export$3e2152b047719fa1(dest);\n    return $6da4c8ed3074c92b$export$30570204156ffd18(extent, flatCoordinates, offset, end, stride);\n}\nfunction $6da4c8ed3074c92b$export$73b4897e93bc5c83(rings, dest) {\n    const extent = $6da4c8ed3074c92b$export$3e2152b047719fa1(dest);\n    return $6da4c8ed3074c92b$export$9b319549574402d7(extent, rings);\n}\nfunction $6da4c8ed3074c92b$export$e9bab7fafb253603(extent1, extent2) {\n    return extent1[0] == extent2[0] && extent1[2] == extent2[2] && extent1[1] == extent2[1] && extent1[3] == extent2[3];\n}\nfunction $6da4c8ed3074c92b$export$998afeab28643bd6(extent1, extent2, tolerance) {\n    return Math.abs(extent1[0] - extent2[0]) < tolerance && Math.abs(extent1[2] - extent2[2]) < tolerance && Math.abs(extent1[1] - extent2[1]) < tolerance && Math.abs(extent1[3] - extent2[3]) < tolerance;\n}\nfunction $6da4c8ed3074c92b$export$8b58be045bf06082(extent1, extent2) {\n    if (extent2[0] < extent1[0]) extent1[0] = extent2[0];\n    if (extent2[2] > extent1[2]) extent1[2] = extent2[2];\n    if (extent2[1] < extent1[1]) extent1[1] = extent2[1];\n    if (extent2[3] > extent1[3]) extent1[3] = extent2[3];\n    return extent1;\n}\nfunction $6da4c8ed3074c92b$export$1f820e3920fa5715(extent, coordinate) {\n    if (coordinate[0] < extent[0]) extent[0] = coordinate[0];\n    if (coordinate[0] > extent[2]) extent[2] = coordinate[0];\n    if (coordinate[1] < extent[1]) extent[1] = coordinate[1];\n    if (coordinate[1] > extent[3]) extent[3] = coordinate[1];\n}\nfunction $6da4c8ed3074c92b$export$795cd48be4d5f252(extent, coordinates) {\n    for(let i = 0, ii = coordinates.length; i < ii; ++i)$6da4c8ed3074c92b$export$1f820e3920fa5715(extent, coordinates[i]);\n    return extent;\n}\nfunction $6da4c8ed3074c92b$export$30570204156ffd18(extent, flatCoordinates, offset, end, stride) {\n    for(; offset < end; offset += stride)$6da4c8ed3074c92b$export$f1dab130b92b85a9(extent, flatCoordinates[offset], flatCoordinates[offset + 1]);\n    return extent;\n}\nfunction $6da4c8ed3074c92b$export$9b319549574402d7(extent, rings) {\n    for(let i = 0, ii = rings.length; i < ii; ++i)$6da4c8ed3074c92b$export$795cd48be4d5f252(extent, rings[i]);\n    return extent;\n}\nfunction $6da4c8ed3074c92b$export$f1dab130b92b85a9(extent, x, y) {\n    extent[0] = Math.min(extent[0], x);\n    extent[1] = Math.min(extent[1], y);\n    extent[2] = Math.max(extent[2], x);\n    extent[3] = Math.max(extent[3], y);\n}\nfunction $6da4c8ed3074c92b$export$f9ed8a3d123a08e2(extent, callback) {\n    let val;\n    val = callback($6da4c8ed3074c92b$export$8d09f5e2e1bf560d(extent));\n    if (val) return val;\n    val = callback($6da4c8ed3074c92b$export$e77c1cf70445e168(extent));\n    if (val) return val;\n    val = callback($6da4c8ed3074c92b$export$b84fa077c8b05295(extent));\n    if (val) return val;\n    val = callback($6da4c8ed3074c92b$export$cb1538b07e6964ff(extent));\n    if (val) return val;\n    return false;\n}\nfunction $6da4c8ed3074c92b$export$520c40045967cb15(extent) {\n    let area = 0;\n    if (!$6da4c8ed3074c92b$export$dd1bc94b04021eeb(extent)) area = $6da4c8ed3074c92b$export$3c49c185de0c2bfc(extent) * $6da4c8ed3074c92b$export$c08559766941f856(extent);\n    return area;\n}\nfunction $6da4c8ed3074c92b$export$8d09f5e2e1bf560d(extent) {\n    return [\n        extent[0],\n        extent[1]\n    ];\n}\nfunction $6da4c8ed3074c92b$export$e77c1cf70445e168(extent) {\n    return [\n        extent[2],\n        extent[1]\n    ];\n}\nfunction $6da4c8ed3074c92b$export$c91255cadecfe081(extent) {\n    return [\n        (extent[0] + extent[2]) / 2,\n        (extent[1] + extent[3]) / 2\n    ];\n}\nfunction $6da4c8ed3074c92b$export$a1cfd206661d0801(extent, corner) {\n    let coordinate;\n    if (corner === 'bottom-left') coordinate = $6da4c8ed3074c92b$export$8d09f5e2e1bf560d(extent);\n    else if (corner === 'bottom-right') coordinate = $6da4c8ed3074c92b$export$e77c1cf70445e168(extent);\n    else if (corner === 'top-left') coordinate = $6da4c8ed3074c92b$export$cb1538b07e6964ff(extent);\n    else if (corner === 'top-right') coordinate = $6da4c8ed3074c92b$export$b84fa077c8b05295(extent);\n    else throw new Error('Invalid corner');\n    return coordinate;\n}\nfunction $6da4c8ed3074c92b$export$7d6fa884b32a3751(extent1, extent2) {\n    const minX = Math.min(extent1[0], extent2[0]);\n    const minY = Math.min(extent1[1], extent2[1]);\n    const maxX = Math.max(extent1[2], extent2[2]);\n    const maxY = Math.max(extent1[3], extent2[3]);\n    return (maxX - minX) * (maxY - minY);\n}\nfunction $6da4c8ed3074c92b$export$13ba650faf8308(center, resolution, rotation, size, dest) {\n    const [x0, y0, x1, y1, x2, y2, x3, y3] = $6da4c8ed3074c92b$export$4b7a6fb4002cd6ac(center, resolution, rotation, size);\n    return $6da4c8ed3074c92b$export$958e3e1a02eac4b6(Math.min(x0, x1, x2, x3), Math.min(y0, y1, y2, y3), Math.max(x0, x1, x2, x3), Math.max(y0, y1, y2, y3), dest);\n}\nfunction $6da4c8ed3074c92b$export$4b7a6fb4002cd6ac(center, resolution, rotation, size) {\n    const dx = resolution * size[0] / 2;\n    const dy = resolution * size[1] / 2;\n    const cosRotation = Math.cos(rotation);\n    const sinRotation = Math.sin(rotation);\n    const xCos = dx * cosRotation;\n    const xSin = dx * sinRotation;\n    const yCos = dy * cosRotation;\n    const ySin = dy * sinRotation;\n    const x = center[0];\n    const y = center[1];\n    return [\n        x - xCos + ySin,\n        y - xSin - yCos,\n        x - xCos - ySin,\n        y - xSin + yCos,\n        x + xCos - ySin,\n        y + xSin + yCos,\n        x + xCos + ySin,\n        y + xSin - yCos,\n        x - xCos + ySin,\n        y - xSin - yCos\n    ];\n}\nfunction $6da4c8ed3074c92b$export$c08559766941f856(extent) {\n    return extent[3] - extent[1];\n}\nfunction $6da4c8ed3074c92b$export$f3fe0e9a60cde324(extent1, extent2) {\n    const intersection = $6da4c8ed3074c92b$export$72209efa88586d42(extent1, extent2);\n    return $6da4c8ed3074c92b$export$520c40045967cb15(intersection);\n}\nfunction $6da4c8ed3074c92b$export$72209efa88586d42(extent1, extent2, dest) {\n    const intersection = dest ? dest : $6da4c8ed3074c92b$export$fe201bb3bbe031e9();\n    if ($6da4c8ed3074c92b$export$7b0a31e10bbff018(extent1, extent2)) {\n        if (extent1[0] > extent2[0]) intersection[0] = extent1[0];\n        else intersection[0] = extent2[0];\n        if (extent1[1] > extent2[1]) intersection[1] = extent1[1];\n        else intersection[1] = extent2[1];\n        if (extent1[2] < extent2[2]) intersection[2] = extent1[2];\n        else intersection[2] = extent2[2];\n        if (extent1[3] < extent2[3]) intersection[3] = extent1[3];\n        else intersection[3] = extent2[3];\n    } else $6da4c8ed3074c92b$export$3e2152b047719fa1(intersection);\n    return intersection;\n}\nfunction $6da4c8ed3074c92b$export$1bc603050bd777b1(extent) {\n    return $6da4c8ed3074c92b$export$3c49c185de0c2bfc(extent) + $6da4c8ed3074c92b$export$c08559766941f856(extent);\n}\nfunction $6da4c8ed3074c92b$export$31b21d0167753bb4(extent) {\n    return [\n        extent[2] - extent[0],\n        extent[3] - extent[1]\n    ];\n}\nfunction $6da4c8ed3074c92b$export$cb1538b07e6964ff(extent) {\n    return [\n        extent[0],\n        extent[3]\n    ];\n}\nfunction $6da4c8ed3074c92b$export$b84fa077c8b05295(extent) {\n    return [\n        extent[2],\n        extent[3]\n    ];\n}\nfunction $6da4c8ed3074c92b$export$3c49c185de0c2bfc(extent) {\n    return extent[2] - extent[0];\n}\nfunction $6da4c8ed3074c92b$export$7b0a31e10bbff018(extent1, extent2) {\n    return extent1[0] <= extent2[2] && extent1[2] >= extent2[0] && extent1[1] <= extent2[3] && extent1[3] >= extent2[1];\n}\nfunction $6da4c8ed3074c92b$export$dd1bc94b04021eeb(extent) {\n    return extent[2] < extent[0] || extent[3] < extent[1];\n}\nfunction $6da4c8ed3074c92b$export$6a4fe494c558c238(extent, dest) {\n    if (dest) {\n        dest[0] = extent[0];\n        dest[1] = extent[1];\n        dest[2] = extent[2];\n        dest[3] = extent[3];\n        return dest;\n    }\n    return extent;\n}\nfunction $6da4c8ed3074c92b$export$80cbab86674143b6(extent, value) {\n    const deltaX = (extent[2] - extent[0]) / 2 * (value - 1);\n    const deltaY = (extent[3] - extent[1]) / 2 * (value - 1);\n    extent[0] -= deltaX;\n    extent[2] += deltaX;\n    extent[1] -= deltaY;\n    extent[3] += deltaY;\n}\nfunction $6da4c8ed3074c92b$export$a6a5a7a461419425(extent, start, end) {\n    let intersects = false;\n    const startRel = $6da4c8ed3074c92b$export$f97905ead28c61a8(extent, start);\n    const endRel = $6da4c8ed3074c92b$export$f97905ead28c61a8(extent, end);\n    if (startRel === (0, $dab4245bc22b806c$export$2e2bcd8739ae039).INTERSECTING || endRel === (0, $dab4245bc22b806c$export$2e2bcd8739ae039).INTERSECTING) intersects = true;\n    else {\n        const minX = extent[0];\n        const minY = extent[1];\n        const maxX = extent[2];\n        const maxY = extent[3];\n        const startX = start[0];\n        const startY = start[1];\n        const endX = end[0];\n        const endY = end[1];\n        const slope = (endY - startY) / (endX - startX);\n        let x, y;\n        if (!!(endRel & (0, $dab4245bc22b806c$export$2e2bcd8739ae039).ABOVE) && !(startRel & (0, $dab4245bc22b806c$export$2e2bcd8739ae039).ABOVE)) {\n            // potentially intersects top\n            x = endX - (endY - maxY) / slope;\n            intersects = x >= minX && x <= maxX;\n        }\n        if (!intersects && !!(endRel & (0, $dab4245bc22b806c$export$2e2bcd8739ae039).RIGHT) && !(startRel & (0, $dab4245bc22b806c$export$2e2bcd8739ae039).RIGHT)) {\n            // potentially intersects right\n            y = endY - (endX - maxX) * slope;\n            intersects = y >= minY && y <= maxY;\n        }\n        if (!intersects && !!(endRel & (0, $dab4245bc22b806c$export$2e2bcd8739ae039).BELOW) && !(startRel & (0, $dab4245bc22b806c$export$2e2bcd8739ae039).BELOW)) {\n            // potentially intersects bottom\n            x = endX - (endY - minY) / slope;\n            intersects = x >= minX && x <= maxX;\n        }\n        if (!intersects && !!(endRel & (0, $dab4245bc22b806c$export$2e2bcd8739ae039).LEFT) && !(startRel & (0, $dab4245bc22b806c$export$2e2bcd8739ae039).LEFT)) {\n            // potentially intersects left\n            y = endY - (endX - minX) * slope;\n            intersects = y >= minY && y <= maxY;\n        }\n    }\n    return intersects;\n}\nfunction $6da4c8ed3074c92b$export$9f9dcb98c894b623(extent, transformFn, dest, stops) {\n    if ($6da4c8ed3074c92b$export$dd1bc94b04021eeb(extent)) return $6da4c8ed3074c92b$export$3e2152b047719fa1(dest);\n    let coordinates = [];\n    if (stops > 1) {\n        const width = extent[2] - extent[0];\n        const height = extent[3] - extent[1];\n        for(let i = 0; i < stops; ++i)coordinates.push(extent[0] + width * i / stops, extent[1], extent[2], extent[1] + height * i / stops, extent[2] - width * i / stops, extent[3], extent[0], extent[3] - height * i / stops);\n    } else coordinates = [\n        extent[0],\n        extent[1],\n        extent[2],\n        extent[1],\n        extent[2],\n        extent[3],\n        extent[0],\n        extent[3]\n    ];\n    transformFn(coordinates, coordinates, 2);\n    const xs = [];\n    const ys = [];\n    for(let i = 0, l = coordinates.length; i < l; i += 2){\n        xs.push(coordinates[i]);\n        ys.push(coordinates[i + 1]);\n    }\n    return $6da4c8ed3074c92b$var$_boundingExtentXYs(xs, ys, dest);\n}\nfunction $6da4c8ed3074c92b$export$39a9ce3624977b84(extent, projection) {\n    const projectionExtent = projection.getExtent();\n    const center = $6da4c8ed3074c92b$export$c91255cadecfe081(extent);\n    if (projection.canWrapX() && (center[0] < projectionExtent[0] || center[0] >= projectionExtent[2])) {\n        const worldWidth = $6da4c8ed3074c92b$export$3c49c185de0c2bfc(projectionExtent);\n        const worldsAway = Math.floor((center[0] - projectionExtent[0]) / worldWidth);\n        const offset = worldsAway * worldWidth;\n        extent[0] -= offset;\n        extent[2] -= offset;\n    }\n    return extent;\n}\nfunction $6da4c8ed3074c92b$export$9031237f01de0947(extent, projection, multiWorld) {\n    if (projection.canWrapX()) {\n        const projectionExtent = projection.getExtent();\n        if (!isFinite(extent[0]) || !isFinite(extent[2])) return [\n            [\n                projectionExtent[0],\n                extent[1],\n                projectionExtent[2],\n                extent[3]\n            ]\n        ];\n        $6da4c8ed3074c92b$export$39a9ce3624977b84(extent, projection);\n        const worldWidth = $6da4c8ed3074c92b$export$3c49c185de0c2bfc(projectionExtent);\n        if ($6da4c8ed3074c92b$export$3c49c185de0c2bfc(extent) > worldWidth && !multiWorld) // the extent wraps around on itself\n        return [\n            [\n                projectionExtent[0],\n                extent[1],\n                projectionExtent[2],\n                extent[3]\n            ]\n        ];\n        if (extent[0] < projectionExtent[0]) // the extent crosses the anti meridian, so it needs to be sliced\n        return [\n            [\n                extent[0] + worldWidth,\n                extent[1],\n                projectionExtent[2],\n                extent[3]\n            ],\n            [\n                projectionExtent[0],\n                extent[1],\n                extent[2],\n                extent[3]\n            ]\n        ];\n        if (extent[2] > projectionExtent[2]) // the extent crosses the anti meridian, so it needs to be sliced\n        return [\n            [\n                extent[0],\n                extent[1],\n                projectionExtent[2],\n                extent[3]\n            ],\n            [\n                projectionExtent[0],\n                extent[1],\n                extent[2] - worldWidth,\n                extent[3]\n            ]\n        ];\n    }\n    return [\n        extent\n    ];\n}\n\n\n\n/**\r\n * @module ol/string\r\n */ /**\r\n * @param {number} number Number to be formatted\r\n * @param {number} width The desired width\r\n * @param {number} [precision] Precision of the output string (i.e. number of decimal places)\r\n * @return {string} Formatted string\r\n */ function $ff7180bdd45ebb19$export$24be126cb0a7bbeb(number, width, precision) {\n    const numberString = precision !== undefined ? number.toFixed(precision) : '' + number;\n    let decimal = numberString.indexOf('.');\n    decimal = decimal === -1 ? numberString.length : decimal;\n    return decimal > width ? numberString : new Array(1 + width - decimal).join('0') + numberString;\n}\nfunction $ff7180bdd45ebb19$export$66e1c0999abad646(v1, v2) {\n    const s1 = ('' + v1).split('.');\n    const s2 = ('' + v2).split('.');\n    for(let i = 0; i < Math.max(s1.length, s2.length); i++){\n        const n1 = parseInt(s1[i] || '0', 10);\n        const n2 = parseInt(s2[i] || '0', 10);\n        if (n1 > n2) return 1;\n        if (n2 > n1) return -1;\n    }\n    return 0;\n}\n\n\nfunction $1bd0a226f9a16141$export$e16d8520af44a096(coordinate, delta) {\n    coordinate[0] += +delta[0];\n    coordinate[1] += +delta[1];\n    return coordinate;\n}\nfunction $1bd0a226f9a16141$export$cbe80a3fcd2b99b7(coordinate, circle) {\n    const r = circle.getRadius();\n    const center = circle.getCenter();\n    const x0 = center[0];\n    const y0 = center[1];\n    const x1 = coordinate[0];\n    const y1 = coordinate[1];\n    let dx = x1 - x0;\n    const dy = y1 - y0;\n    if (dx === 0 && dy === 0) dx = 1;\n    const d = Math.sqrt(dx * dx + dy * dy);\n    const x = x0 + r * dx / d;\n    const y = y0 + r * dy / d;\n    return [\n        x,\n        y\n    ];\n}\nfunction $1bd0a226f9a16141$export$18cdd31d17f97131(coordinate, segment) {\n    const x0 = coordinate[0];\n    const y0 = coordinate[1];\n    const start = segment[0];\n    const end = segment[1];\n    const x1 = start[0];\n    const y1 = start[1];\n    const x2 = end[0];\n    const y2 = end[1];\n    const dx = x2 - x1;\n    const dy = y2 - y1;\n    const along = dx === 0 && dy === 0 ? 0 : (dx * (x0 - x1) + dy * (y0 - y1)) / (dx * dx + dy * dy || 0);\n    let x, y;\n    if (along <= 0) {\n        x = x1;\n        y = y1;\n    } else if (along >= 1) {\n        x = x2;\n        y = y2;\n    } else {\n        x = x1 + along * dx;\n        y = y1 + along * dy;\n    }\n    return [\n        x,\n        y\n    ];\n}\nfunction $1bd0a226f9a16141$export$35ad6765fe262b6(fractionDigits) {\n    return(/**\r\n     * @param {Coordinate} coordinate Coordinate.\r\n     * @return {string} String XY.\r\n     */ function(coordinate) {\n        return $1bd0a226f9a16141$export$9ff8f16060979e0a(coordinate, fractionDigits);\n    });\n}\nfunction $1bd0a226f9a16141$export$6eb0ac5f024d8590(hemispheres, degrees, fractionDigits) {\n    const normalizedDegrees = (0, $6b000a049d919fe5$export$ba467bec01d66def)(degrees + 180, 360) - 180;\n    const x = Math.abs(3600 * normalizedDegrees);\n    const decimals = fractionDigits || 0;\n    let deg = Math.floor(x / 3600);\n    let min = Math.floor((x - deg * 3600) / 60);\n    let sec = (0, $6b000a049d919fe5$export$a81f732198733497)(x - deg * 3600 - min * 60, decimals);\n    if (sec >= 60) {\n        sec = 0;\n        min += 1;\n    }\n    if (min >= 60) {\n        min = 0;\n        deg += 1;\n    }\n    let hdms = deg + '\\u00b0';\n    if (min !== 0 || sec !== 0) hdms += ' ' + (0, $ff7180bdd45ebb19$export$24be126cb0a7bbeb)(min, 2) + '\\u2032';\n    if (sec !== 0) hdms += ' ' + (0, $ff7180bdd45ebb19$export$24be126cb0a7bbeb)(sec, 2, decimals) + '\\u2033';\n    if (normalizedDegrees !== 0) hdms += ' ' + hemispheres.charAt(normalizedDegrees < 0 ? 1 : 0);\n    return hdms;\n}\nfunction $1bd0a226f9a16141$export$d9468344d3651243(coordinate, template, fractionDigits) {\n    if (coordinate) return template.replace('{x}', coordinate[0].toFixed(fractionDigits)).replace('{y}', coordinate[1].toFixed(fractionDigits));\n    return '';\n}\nfunction $1bd0a226f9a16141$export$e9bab7fafb253603(coordinate1, coordinate2) {\n    let equals = true;\n    for(let i = coordinate1.length - 1; i >= 0; --i)if (coordinate1[i] != coordinate2[i]) {\n        equals = false;\n        break;\n    }\n    return equals;\n}\nfunction $1bd0a226f9a16141$export$bb628a54ab399bc9(coordinate, angle) {\n    const cosAngle = Math.cos(angle);\n    const sinAngle = Math.sin(angle);\n    const x = coordinate[0] * cosAngle - coordinate[1] * sinAngle;\n    const y = coordinate[1] * cosAngle + coordinate[0] * sinAngle;\n    coordinate[0] = x;\n    coordinate[1] = y;\n    return coordinate;\n}\nfunction $1bd0a226f9a16141$export$dcdf75081b88279d(coordinate, scale) {\n    coordinate[0] *= scale;\n    coordinate[1] *= scale;\n    return coordinate;\n}\nfunction $1bd0a226f9a16141$export$88e6ebb4fe54f538(coord1, coord2) {\n    const dx = coord1[0] - coord2[0];\n    const dy = coord1[1] - coord2[1];\n    return dx * dx + dy * dy;\n}\nfunction $1bd0a226f9a16141$export$9f17032d917177de(coord1, coord2) {\n    return Math.sqrt($1bd0a226f9a16141$export$88e6ebb4fe54f538(coord1, coord2));\n}\nfunction $1bd0a226f9a16141$export$6985570514055196(coordinate, segment) {\n    return $1bd0a226f9a16141$export$88e6ebb4fe54f538(coordinate, $1bd0a226f9a16141$export$18cdd31d17f97131(coordinate, segment));\n}\nfunction $1bd0a226f9a16141$export$c883fd238161f841(coordinate, fractionDigits) {\n    if (coordinate) return $1bd0a226f9a16141$export$6eb0ac5f024d8590('NS', coordinate[1], fractionDigits) + ' ' + $1bd0a226f9a16141$export$6eb0ac5f024d8590('EW', coordinate[0], fractionDigits);\n    return '';\n}\nfunction $1bd0a226f9a16141$export$9ff8f16060979e0a(coordinate, fractionDigits) {\n    return $1bd0a226f9a16141$export$d9468344d3651243(coordinate, '{x}, {y}', fractionDigits);\n}\nfunction $1bd0a226f9a16141$export$39a9ce3624977b84(coordinate, projection) {\n    if (projection.canWrapX()) {\n        const worldWidth = (0, $6da4c8ed3074c92b$export$3c49c185de0c2bfc)(projection.getExtent());\n        const worldsAway = $1bd0a226f9a16141$export$24e2b27d1ff0c1d5(coordinate, projection, worldWidth);\n        if (worldsAway) coordinate[0] -= worldsAway * worldWidth;\n    }\n    return coordinate;\n}\nfunction $1bd0a226f9a16141$export$24e2b27d1ff0c1d5(coordinate, projection, sourceExtentWidth) {\n    const projectionExtent = projection.getExtent();\n    let worldsAway = 0;\n    if (projection.canWrapX() && (coordinate[0] < projectionExtent[0] || coordinate[0] > projectionExtent[2])) {\n        sourceExtentWidth = sourceExtentWidth || (0, $6da4c8ed3074c92b$export$3c49c185de0c2bfc)(projectionExtent);\n        worldsAway = Math.floor((coordinate[0] - projectionExtent[0]) / sourceExtentWidth);\n    }\n    return worldsAway;\n}\n\n\n/**\r\n * @module ol/easing\r\n */ /**\r\n * Start slow and speed up.\r\n * @param {number} t Input between 0 and 1.\r\n * @return {number} Output between 0 and 1.\r\n * @api\r\n */ function $c7ccf7e681a9b333$export$929e5a82286172a6(t) {\n    return Math.pow(t, 3);\n}\nfunction $c7ccf7e681a9b333$export$57636bb43b1ccbb0(t) {\n    return 1 - $c7ccf7e681a9b333$export$929e5a82286172a6(1 - t);\n}\nfunction $c7ccf7e681a9b333$export$9b47139b511b56e4(t) {\n    return 3 * t * t - 2 * t * t * t;\n}\nfunction $c7ccf7e681a9b333$export$45db2fc2f15997e7(t) {\n    return t;\n}\nfunction $c7ccf7e681a9b333$export$7f4472f6708afaf3(t) {\n    if (t < 0.5) return $c7ccf7e681a9b333$export$9b47139b511b56e4(2 * t);\n    return 1 - $c7ccf7e681a9b333$export$9b47139b511b56e4(2 * (t - 0.5));\n}\n\n\n\n\n/**\r\n * @module ol/geom/Polygon\r\n */ \n\n\n/**\r\n * @module ol/sphere\r\n */ \nconst $fb75384508533d8f$export$63f2df7bd7371262 = 6371008.8;\nfunction $fb75384508533d8f$export$79376507b09a66f(c1, c2, radius) {\n    radius = radius || $fb75384508533d8f$export$63f2df7bd7371262;\n    const lat1 = (0, $6b000a049d919fe5$export$cba01ba138429a1d)(c1[1]);\n    const lat2 = (0, $6b000a049d919fe5$export$cba01ba138429a1d)(c2[1]);\n    const deltaLatBy2 = (lat2 - lat1) / 2;\n    const deltaLonBy2 = (0, $6b000a049d919fe5$export$cba01ba138429a1d)(c2[0] - c1[0]) / 2;\n    const a = Math.sin(deltaLatBy2) * Math.sin(deltaLatBy2) + Math.sin(deltaLonBy2) * Math.sin(deltaLonBy2) * Math.cos(lat1) * Math.cos(lat2);\n    return 2 * radius * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n}\n/**\r\n * Get the cumulative great circle length of linestring coordinates (geographic).\r\n * @param {Array} coordinates Linestring coordinates.\r\n * @param {number} radius The sphere radius to use.\r\n * @return {number} The length (in meters).\r\n */ function $fb75384508533d8f$var$getLengthInternal(coordinates, radius) {\n    let length = 0;\n    for(let i = 0, ii = coordinates.length; i < ii - 1; ++i)length += $fb75384508533d8f$export$79376507b09a66f(coordinates[i], coordinates[i + 1], radius);\n    return length;\n}\nfunction $fb75384508533d8f$export$f0d11c074a923179(geometry, options) {\n    options = options || {};\n    const radius = options.radius || $fb75384508533d8f$export$63f2df7bd7371262;\n    const projection = options.projection || 'EPSG:3857';\n    const type = geometry.getType();\n    if (type !== 'GeometryCollection') geometry = geometry.clone().transform(projection, 'EPSG:4326');\n    let length = 0;\n    let coordinates, coords, i, ii, j, jj;\n    switch(type){\n        case 'Point':\n        case 'MultiPoint':\n            break;\n        case 'LineString':\n        case 'LinearRing':\n            coordinates = /** @type {import(\"./geom/SimpleGeometry.js\").default} */ geometry.getCoordinates();\n            length = $fb75384508533d8f$var$getLengthInternal(coordinates, radius);\n            break;\n        case 'MultiLineString':\n        case 'Polygon':\n            coordinates = /** @type {import(\"./geom/SimpleGeometry.js\").default} */ geometry.getCoordinates();\n            for(i = 0, ii = coordinates.length; i < ii; ++i)length += $fb75384508533d8f$var$getLengthInternal(coordinates[i], radius);\n            break;\n        case 'MultiPolygon':\n            coordinates = /** @type {import(\"./geom/SimpleGeometry.js\").default} */ geometry.getCoordinates();\n            for(i = 0, ii = coordinates.length; i < ii; ++i){\n                coords = coordinates[i];\n                for(j = 0, jj = coords.length; j < jj; ++j)length += $fb75384508533d8f$var$getLengthInternal(coords[j], radius);\n            }\n            break;\n        case 'GeometryCollection':\n            {\n                const geometries = /** @type {import(\"./geom/GeometryCollection.js\").default} */ geometry.getGeometries();\n                for(i = 0, ii = geometries.length; i < ii; ++i)length += $fb75384508533d8f$export$f0d11c074a923179(geometries[i], options);\n                break;\n            }\n        default:\n            throw new Error('Unsupported geometry type: ' + type);\n    }\n    return length;\n}\n/**\r\n * Returns the spherical area for a list of coordinates.\r\n *\r\n * [Reference](https://trs.jpl.nasa.gov/handle/2014/40409)\r\n * Robert. G. Chamberlain and William H. Duquette, \"Some Algorithms for\r\n * Polygons on a Sphere\", JPL Publication 07-03, Jet Propulsion\r\n * Laboratory, Pasadena, CA, June 2007\r\n *\r\n * @param {Array<import(\"./coordinate.js\").Coordinate>} coordinates List of coordinates of a linear\r\n * ring. If the ring is oriented clockwise, the area will be positive,\r\n * otherwise it will be negative.\r\n * @param {number} radius The sphere radius.\r\n * @return {number} Area (in square meters).\r\n */ function $fb75384508533d8f$var$getAreaInternal(coordinates, radius) {\n    let area = 0;\n    const len = coordinates.length;\n    let x1 = coordinates[len - 1][0];\n    let y1 = coordinates[len - 1][1];\n    for(let i = 0; i < len; i++){\n        const x2 = coordinates[i][0];\n        const y2 = coordinates[i][1];\n        area += (0, $6b000a049d919fe5$export$cba01ba138429a1d)(x2 - x1) * (2 + Math.sin((0, $6b000a049d919fe5$export$cba01ba138429a1d)(y1)) + Math.sin((0, $6b000a049d919fe5$export$cba01ba138429a1d)(y2)));\n        x1 = x2;\n        y1 = y2;\n    }\n    return area * radius * radius / 2.0;\n}\nfunction $fb75384508533d8f$export$520c40045967cb15(geometry, options) {\n    options = options || {};\n    const radius = options.radius || $fb75384508533d8f$export$63f2df7bd7371262;\n    const projection = options.projection || 'EPSG:3857';\n    const type = geometry.getType();\n    if (type !== 'GeometryCollection') geometry = geometry.clone().transform(projection, 'EPSG:4326');\n    let area = 0;\n    let coordinates, coords, i, ii, j, jj;\n    switch(type){\n        case 'Point':\n        case 'MultiPoint':\n        case 'LineString':\n        case 'MultiLineString':\n        case 'LinearRing':\n            break;\n        case 'Polygon':\n            coordinates = /** @type {import(\"./geom/Polygon.js\").default} */ geometry.getCoordinates();\n            area = Math.abs($fb75384508533d8f$var$getAreaInternal(coordinates[0], radius));\n            for(i = 1, ii = coordinates.length; i < ii; ++i)area -= Math.abs($fb75384508533d8f$var$getAreaInternal(coordinates[i], radius));\n            break;\n        case 'MultiPolygon':\n            coordinates = /** @type {import(\"./geom/SimpleGeometry.js\").default} */ geometry.getCoordinates();\n            for(i = 0, ii = coordinates.length; i < ii; ++i){\n                coords = coordinates[i];\n                area += Math.abs($fb75384508533d8f$var$getAreaInternal(coords[0], radius));\n                for(j = 1, jj = coords.length; j < jj; ++j)area -= Math.abs($fb75384508533d8f$var$getAreaInternal(coords[j], radius));\n            }\n            break;\n        case 'GeometryCollection':\n            {\n                const geometries = /** @type {import(\"./geom/GeometryCollection.js\").default} */ geometry.getGeometries();\n                for(i = 0, ii = geometries.length; i < ii; ++i)area += $fb75384508533d8f$export$520c40045967cb15(geometries[i], options);\n                break;\n            }\n        default:\n            throw new Error('Unsupported geometry type: ' + type);\n    }\n    return area;\n}\nfunction $fb75384508533d8f$export$cc800923e997bb8(c1, distance, bearing, radius) {\n    radius = radius || $fb75384508533d8f$export$63f2df7bd7371262;\n    const lat1 = (0, $6b000a049d919fe5$export$cba01ba138429a1d)(c1[1]);\n    const lon1 = (0, $6b000a049d919fe5$export$cba01ba138429a1d)(c1[0]);\n    const dByR = distance / radius;\n    const lat = Math.asin(Math.sin(lat1) * Math.cos(dByR) + Math.cos(lat1) * Math.sin(dByR) * Math.cos(bearing));\n    const lon = lon1 + Math.atan2(Math.sin(bearing) * Math.sin(dByR) * Math.cos(lat1), Math.cos(dByR) - Math.sin(lat1) * Math.sin(lat));\n    return [\n        (0, $6b000a049d919fe5$export$56cb859c01fa134d)(lon),\n        (0, $6b000a049d919fe5$export$56cb859c01fa134d)(lat)\n    ];\n}\n\n\n/**\r\n * @module ol/geom/LinearRing\r\n */ \n/**\r\n * @module ol/geom/SimpleGeometry\r\n */ \n\n/**\r\n * @module ol/geom/Geometry\r\n */ \n\n\n/**\r\n * @module ol/proj\r\n */ /**\r\n * The ol/proj module stores:\r\n * a list of {@link module:ol/proj/Projection~Projection}\r\n * objects, one for each projection supported by the application\r\n * a list of transform functions needed to convert coordinates in one projection\r\n * into another.\r\n *\r\n * The static functions are the methods used to maintain these.\r\n * Each transform function can handle not only simple coordinate pairs, but also\r\n * large arrays of coordinates such as vector geometries.\r\n *\r\n * When loaded, the library adds projection objects for EPSG:4326 (WGS84\r\n * geographic coordinates) and EPSG:3857 (Web or Spherical Mercator, as used\r\n * for example by Bing Maps or OpenStreetMap), together with the relevant\r\n * transform functions.\r\n *\r\n * Additional transforms may be added by using the http://proj4js.org/\r\n * library (version 2.2 or later). You can use the full build supplied by\r\n * Proj4js, or create a custom build to support those projections you need; see\r\n * the Proj4js website for how to do this. You also need the Proj4js definitions\r\n * for the required projections. These definitions can be obtained from\r\n * https://epsg.io/, and are a JS function, so can be loaded in a script\r\n * tag (as in the examples) or pasted into your application.\r\n *\r\n * After all required projection definitions are added to proj4's registry (by\r\n * using `proj4.defs()`), simply call `register(proj4)` from the `ol/proj/proj4`\r\n * package. Existing transforms are not changed by this function. See\r\n * examples/wms-image-custom-proj for an example of this.\r\n *\r\n * Additional projection definitions can be registered with `proj4.defs()` any\r\n * time. Just make sure to call `register(proj4)` again; for example, with user-supplied data where you don't\r\n * know in advance what projections are needed, you can initially load minimal\r\n * support and then load whichever are requested.\r\n *\r\n * Note that Proj4js does not support projection extents. If you want to add\r\n * one for creating default tile grids, you can add it after the Projection\r\n * object has been created with `setExtent`, for example,\r\n * `get('EPSG:1234').setExtent(extent)`.\r\n *\r\n * In addition to Proj4js support, any transform functions can be added with\r\n * {@link module:ol/proj.addCoordinateTransforms}. To use this, you must first create\r\n * a {@link module:ol/proj/Projection~Projection} object for the new projection and add it with\r\n * {@link module:ol/proj.addProjection}. You can then add the forward and inverse\r\n * functions with {@link module:ol/proj.addCoordinateTransforms}. See\r\n * examples/wms-custom-proj for an example of this.\r\n *\r\n * Note that if no transforms are needed and you only need to define the\r\n * projection, just add a {@link module:ol/proj/Projection~Projection} with\r\n * {@link module:ol/proj.addProjection}. See examples/wms-no-proj for an example of\r\n * this.\r\n */ /**\r\n * @module ol/console\r\n */ /**\r\n * @typedef {'info'|'warn'|'error'|'none'} Level\r\n */ /**\r\n * @type {Object<Level, number>}\r\n */ const $8c65b0699f3f3f8e$var$levels = {\n    info: 1,\n    warn: 2,\n    error: 3,\n    none: 4\n};\n/**\r\n * @type {number}\r\n */ let $8c65b0699f3f3f8e$var$level = $8c65b0699f3f3f8e$var$levels.info;\nfunction $8c65b0699f3f3f8e$export$2c97a59140dbf245(l) {\n    $8c65b0699f3f3f8e$var$level = $8c65b0699f3f3f8e$var$levels[l];\n}\nfunction $8c65b0699f3f3f8e$export$bef1f36f5486a6a3(...args) {\n    if ($8c65b0699f3f3f8e$var$level > $8c65b0699f3f3f8e$var$levels.info) return;\n    console.log(...args); // eslint-disable-line no-console\n}\nfunction $8c65b0699f3f3f8e$export$c106dd0671a0fc2d(...args) {\n    if ($8c65b0699f3f3f8e$var$level > $8c65b0699f3f3f8e$var$levels.warn) return;\n    console.warn(...args); // eslint-disable-line no-console\n}\nfunction $8c65b0699f3f3f8e$export$a3bc9b8ed74fc(...args) {\n    if ($8c65b0699f3f3f8e$var$level > $8c65b0699f3f3f8e$var$levels.error) return;\n    console.error(...args); // eslint-disable-line no-console\n}\n\n\n\n\n\n\n/**\r\n * @module ol/proj/Units\r\n */ /**\r\n * @typedef {'radians' | 'degrees' | 'ft' | 'm' | 'pixels' | 'tile-pixels' | 'us-ft'} Units\r\n * Projection units.\r\n */ /**\r\n * See http://duff.ess.washington.edu/data/raster/drg/docs/geotiff.txt\r\n * @type {Object<number, Units>}\r\n */ const $03edbd434a9e6608$var$unitByCode = {\n    '9001': 'm',\n    '9002': 'ft',\n    '9003': 'us-ft',\n    '9101': 'radians',\n    '9102': 'degrees'\n};\nfunction $03edbd434a9e6608$export$7f58726df3255edc(code) {\n    return $03edbd434a9e6608$var$unitByCode[code];\n}\nconst $03edbd434a9e6608$export$1482081eec883108 = {\n    // use the radius of the Normal sphere\n    'radians': 6370997 / (2 * Math.PI),\n    'degrees': 2 * Math.PI * 6370997 / 360,\n    'ft': 0.3048,\n    'm': 1,\n    'us-ft': 1200 / 3937\n};\n\n\n/**\r\n * @module ol/proj/epsg3857\r\n */ /**\r\n * @module ol/proj/Projection\r\n */ \n/**\r\n * The function is called with a `number` view resolution and a\r\n * {@link module:ol/coordinate~Coordinate} as arguments, and returns the `number` resolution\r\n * in projection units at the passed coordinate.\r\n * @typedef {function(number, import(\"../coordinate.js\").Coordinate):number} GetPointResolution\r\n * @api\r\n */ /**\r\n * @typedef {Object} Options\r\n * @property {string} code The SRS identifier code, e.g. `EPSG:4326`.\r\n * @property {import(\"./Units.js\").Units} [units] Units. Required unless a\r\n * proj4 projection is defined for `code`.\r\n * @property {import(\"../extent.js\").Extent} [extent] The validity extent for the SRS.\r\n * @property {string} [axisOrientation='enu'] The axis orientation as specified in Proj4.\r\n * @property {boolean} [global=false] Whether the projection is valid for the whole globe.\r\n * @property {number} [metersPerUnit] The meters per unit for the SRS.\r\n * If not provided, the `units` are used to get the meters per unit from the {@link METERS_PER_UNIT}\r\n * lookup table.\r\n * @property {import(\"../extent.js\").Extent} [worldExtent] The world extent for the SRS.\r\n * @property {GetPointResolution} [getPointResolution]\r\n * Function to determine resolution at a point. The function is called with a\r\n * `number` view resolution and a {@link module:ol/coordinate~Coordinate} as arguments, and returns\r\n * the `number` resolution in projection units at the passed coordinate. If this is `undefined`,\r\n * the default {@link module:ol/proj.getPointResolution} function will be used.\r\n */ /**\r\n * @classdesc\r\n * In most cases, you should not need to create instances of this class.\r\n * Instead, where projection information is required, you can use a string\r\n * projection code or identifier (e.g. `EPSG:4326`) instead of a projection\r\n * instance.\r\n *\r\n * The library includes support for transforming coordinates between the following\r\n * projections:\r\n *\r\n *  WGS 84 / Geographic - Using codes `EPSG:4326`, `CRS:84`, `urn:ogc:def:crs:EPSG:6.6:4326`,\r\n *    `urn:ogc:def:crs:OGC:1.3:CRS84`, `urn:ogc:def:crs:OGC:2:84`, `http://www.opengis.net/gml/srs/epsg.xml#4326`,\r\n *    or `urn:x-ogc:def:crs:EPSG:4326`\r\n *  WGS 84 / Spherical Mercator - Using codes `EPSG:3857`, `EPSG:102100`, `EPSG:102113`, `EPSG:900913`,\r\n *    `urn:ogc:def:crs:EPSG:6.18:3:3857`, or `http://www.opengis.net/gml/srs/epsg.xml#3857`\r\n *  WGS 84 / UTM zones - Using codes `EPSG:32601` through `EPSG:32660` for northern zones\r\n *    and `EPSG:32701` through `EPSG:32760` for southern zones. Note that the built-in UTM transforms\r\n *    are lower accuracy (with errors on the order of 0.1 m) than those that you might get in a\r\n *    library like [proj4js](https://github.com/proj4js/proj4js).\r\n *\r\n * For additional projection support, or to use higher accuracy transforms than the built-in ones, you can use\r\n * the [proj4js](https://github.com/proj4js/proj4js) library. With `proj4js`, after adding any new projection\r\n * definitions, call the {@link module:ol/proj/proj4.register} function.\r\n *\r\n * You can use the {@link module:ol/proj.get} function to retrieve a projection instance\r\n * for one of the registered projections.\r\n *\r\n * @api\r\n */ class $6dc418afeec7068a$var$Projection {\n    /**\r\n   * @param {Options} options Projection options.\r\n   */ constructor(options){\n        /**\r\n     * @private\r\n     * @type {string}\r\n     */ this.code_ = options.code;\n        /**\r\n     * Units of projected coordinates. When set to `TILE_PIXELS`, a\r\n     * `this.extent_` and `this.worldExtent_` must be configured properly for each\r\n     * tile.\r\n     * @private\r\n     * @type {import(\"./Units.js\").Units}\r\n     */ this.units_ = /** @type {import(\"./Units.js\").Units} */ options.units;\n        /**\r\n     * Validity extent of the projection in projected coordinates. For projections\r\n     * with `TILE_PIXELS` units, this is the extent of the tile in\r\n     * tile pixel space.\r\n     * @private\r\n     * @type {import(\"../extent.js\").Extent}\r\n     */ this.extent_ = options.extent !== undefined ? options.extent : null;\n        /**\r\n     * Extent of the world in EPSG:4326. For projections with\r\n     * `TILE_PIXELS` units, this is the extent of the tile in\r\n     * projected coordinate space.\r\n     * @private\r\n     * @type {import(\"../extent.js\").Extent}\r\n     */ this.worldExtent_ = options.worldExtent !== undefined ? options.worldExtent : null;\n        /**\r\n     * @private\r\n     * @type {string}\r\n     */ this.axisOrientation_ = options.axisOrientation !== undefined ? options.axisOrientation : 'enu';\n        /**\r\n     * @private\r\n     * @type {boolean}\r\n     */ this.global_ = options.global !== undefined ? options.global : false;\n        /**\r\n     * @private\r\n     * @type {boolean}\r\n     */ this.canWrapX_ = !!(this.global_ && this.extent_);\n        /**\r\n     * @private\r\n     * @type {GetPointResolution|undefined}\r\n     */ this.getPointResolutionFunc_ = options.getPointResolution;\n        /**\r\n     * @private\r\n     * @type {import(\"../tilegrid/TileGrid.js\").default}\r\n     */ this.defaultTileGrid_ = null;\n        /**\r\n     * @private\r\n     * @type {number|undefined}\r\n     */ this.metersPerUnit_ = options.metersPerUnit;\n    }\n    /**\r\n   * @return {boolean} The projection is suitable for wrapping the x-axis\r\n   */ canWrapX() {\n        return this.canWrapX_;\n    }\n    /**\r\n   * Get the code for this projection, e.g. 'EPSG:4326'.\r\n   * @return {string} Code.\r\n   * @api\r\n   */ getCode() {\n        return this.code_;\n    }\n    /**\r\n   * Get the validity extent for this projection.\r\n   * @return {import(\"../extent.js\").Extent} Extent.\r\n   * @api\r\n   */ getExtent() {\n        return this.extent_;\n    }\n    /**\r\n   * Get the units of this projection.\r\n   * @return {import(\"./Units.js\").Units} Units.\r\n   * @api\r\n   */ getUnits() {\n        return this.units_;\n    }\n    /**\r\n   * Get the amount of meters per unit of this projection.  If the projection is\r\n   * not configured with `metersPerUnit` or a units identifier, the return is\r\n   * `undefined`.\r\n   * @return {number|undefined} Meters.\r\n   * @api\r\n   */ getMetersPerUnit() {\n        return this.metersPerUnit_ || (0, $03edbd434a9e6608$export$1482081eec883108)[this.units_];\n    }\n    /**\r\n   * Get the world extent for this projection.\r\n   * @return {import(\"../extent.js\").Extent} Extent.\r\n   * @api\r\n   */ getWorldExtent() {\n        return this.worldExtent_;\n    }\n    /**\r\n   * Get the axis orientation of this projection.\r\n   * Example values are:\r\n   * enu - the default easting, northing, elevation.\r\n   * neu - northing, easting, up - useful for \"lat/long\" geographic coordinates,\r\n   *     or south orientated transverse mercator.\r\n   * wnu - westing, northing, up - some planetary coordinate systems have\r\n   *     \"west positive\" coordinate systems\r\n   * @return {string} Axis orientation.\r\n   * @api\r\n   */ getAxisOrientation() {\n        return this.axisOrientation_;\n    }\n    /**\r\n   * Is this projection a global projection which spans the whole world?\r\n   * @return {boolean} Whether the projection is global.\r\n   * @api\r\n   */ isGlobal() {\n        return this.global_;\n    }\n    /**\r\n   * Set if the projection is a global projection which spans the whole world\r\n   * @param {boolean} global Whether the projection is global.\r\n   * @api\r\n   */ setGlobal(global) {\n        this.global_ = global;\n        this.canWrapX_ = !!(global && this.extent_);\n    }\n    /**\r\n   * @return {import(\"../tilegrid/TileGrid.js\").default} The default tile grid.\r\n   */ getDefaultTileGrid() {\n        return this.defaultTileGrid_;\n    }\n    /**\r\n   * @param {import(\"../tilegrid/TileGrid.js\").default} tileGrid The default tile grid.\r\n   */ setDefaultTileGrid(tileGrid) {\n        this.defaultTileGrid_ = tileGrid;\n    }\n    /**\r\n   * Set the validity extent for this projection.\r\n   * @param {import(\"../extent.js\").Extent} extent Extent.\r\n   * @api\r\n   */ setExtent(extent) {\n        this.extent_ = extent;\n        this.canWrapX_ = !!(this.global_ && extent);\n    }\n    /**\r\n   * Set the world extent for this projection.\r\n   * @param {import(\"../extent.js\").Extent} worldExtent World extent\r\n   *     [minlon, minlat, maxlon, maxlat].\r\n   * @api\r\n   */ setWorldExtent(worldExtent) {\n        this.worldExtent_ = worldExtent;\n    }\n    /**\r\n   * Set the getPointResolution function (see {@link module:ol/proj.getPointResolution}\r\n   * for this projection.\r\n   * @param {function(number, import(\"../coordinate.js\").Coordinate):number} func Function\r\n   * @api\r\n   */ setGetPointResolution(func) {\n        this.getPointResolutionFunc_ = func;\n    }\n    /**\r\n   * Get the custom point resolution function for this projection (if set).\r\n   * @return {GetPointResolution|undefined} The custom point\r\n   * resolution function (if set).\r\n   */ getPointResolutionFunc() {\n        return this.getPointResolutionFunc_;\n    }\n}\nvar $6dc418afeec7068a$export$2e2bcd8739ae039 = $6dc418afeec7068a$var$Projection;\n\n\nconst $84ad988f04807ab1$export$2d2c9be8b5b863f = 6378137;\nconst $84ad988f04807ab1$export$f3928063e5e96d35 = Math.PI * $84ad988f04807ab1$export$2d2c9be8b5b863f;\nconst $84ad988f04807ab1$export$21e6da8a7375dfe8 = [\n    -$84ad988f04807ab1$export$f3928063e5e96d35,\n    -$84ad988f04807ab1$export$f3928063e5e96d35,\n    $84ad988f04807ab1$export$f3928063e5e96d35,\n    $84ad988f04807ab1$export$f3928063e5e96d35\n];\nconst $84ad988f04807ab1$export$ae9d6ed80df710e5 = [\n    -180,\n    -85,\n    180,\n    85\n];\nconst $84ad988f04807ab1$export$d26945d1ad52feeb = $84ad988f04807ab1$export$2d2c9be8b5b863f * Math.log(Math.tan(Math.PI / 2));\n/**\r\n * @classdesc\r\n * Projection object for web/spherical Mercator (EPSG:3857).\r\n */ class $84ad988f04807ab1$var$EPSG3857Projection extends (0, $6dc418afeec7068a$export$2e2bcd8739ae039) {\n    /**\r\n   * @param {string} code Code.\r\n   */ constructor(code){\n        super({\n            code: code,\n            units: 'm',\n            extent: $84ad988f04807ab1$export$21e6da8a7375dfe8,\n            global: true,\n            worldExtent: $84ad988f04807ab1$export$ae9d6ed80df710e5,\n            getPointResolution: function(resolution, point) {\n                return resolution / Math.cosh(point[1] / $84ad988f04807ab1$export$2d2c9be8b5b863f);\n            }\n        });\n    }\n}\nconst $84ad988f04807ab1$export$b508d7ad9a891c1b = [\n    new $84ad988f04807ab1$var$EPSG3857Projection('EPSG:3857'),\n    new $84ad988f04807ab1$var$EPSG3857Projection('EPSG:102100'),\n    new $84ad988f04807ab1$var$EPSG3857Projection('EPSG:102113'),\n    new $84ad988f04807ab1$var$EPSG3857Projection('EPSG:900913'),\n    new $84ad988f04807ab1$var$EPSG3857Projection('http://www.opengis.net/def/crs/EPSG/0/3857'),\n    new $84ad988f04807ab1$var$EPSG3857Projection('http://www.opengis.net/gml/srs/epsg.xml#3857')\n];\nfunction $84ad988f04807ab1$export$1ff8bb36c0983070(input, output, dimension, stride) {\n    const length = input.length;\n    dimension = dimension > 1 ? dimension : 2;\n    stride = stride ?? dimension;\n    if (output === undefined) {\n        if (dimension > 2) // preserve values beyond second dimension\n        output = input.slice();\n        else output = new Array(length);\n    }\n    for(let i = 0; i < length; i += stride){\n        output[i] = $84ad988f04807ab1$export$f3928063e5e96d35 * input[i] / 180;\n        let y = $84ad988f04807ab1$export$2d2c9be8b5b863f * Math.log(Math.tan(Math.PI * (+input[i + 1] + 90) / 360));\n        if (y > $84ad988f04807ab1$export$d26945d1ad52feeb) y = $84ad988f04807ab1$export$d26945d1ad52feeb;\n        else if (y < -$84ad988f04807ab1$export$d26945d1ad52feeb) y = -$84ad988f04807ab1$export$d26945d1ad52feeb;\n        output[i + 1] = y;\n    }\n    return output;\n}\nfunction $84ad988f04807ab1$export$8c71322ec28ed6b4(input, output, dimension, stride) {\n    const length = input.length;\n    dimension = dimension > 1 ? dimension : 2;\n    stride = stride ?? dimension;\n    if (output === undefined) {\n        if (dimension > 2) // preserve values beyond second dimension\n        output = input.slice();\n        else output = new Array(length);\n    }\n    for(let i = 0; i < length; i += stride){\n        output[i] = 180 * input[i] / $84ad988f04807ab1$export$f3928063e5e96d35;\n        output[i + 1] = 360 * Math.atan(Math.exp(input[i + 1] / $84ad988f04807ab1$export$2d2c9be8b5b863f)) / Math.PI - 90;\n    }\n    return output;\n}\n\n\n/**\r\n * @module ol/proj/epsg4326\r\n */ \nconst $b58ae362632b32c5$export$2d2c9be8b5b863f = 6378137;\nconst $b58ae362632b32c5$export$21e6da8a7375dfe8 = [\n    -180,\n    -90,\n    180,\n    90\n];\nconst $b58ae362632b32c5$export$1482081eec883108 = Math.PI * $b58ae362632b32c5$export$2d2c9be8b5b863f / 180;\n/**\r\n * @classdesc\r\n * Projection object for WGS84 geographic coordinates (EPSG:4326).\r\n *\r\n * Note that OpenLayers does not strictly comply with the EPSG definition.\r\n * The EPSG registry defines 4326 as a CRS for Latitude,Longitude (y,x).\r\n * OpenLayers treats EPSG:4326 as a pseudo-projection, with x,y coordinates.\r\n */ class $b58ae362632b32c5$var$EPSG4326Projection extends (0, $6dc418afeec7068a$export$2e2bcd8739ae039) {\n    /**\r\n   * @param {string} code Code.\r\n   * @param {string} [axisOrientation] Axis orientation.\r\n   */ constructor(code, axisOrientation){\n        super({\n            code: code,\n            units: 'degrees',\n            extent: $b58ae362632b32c5$export$21e6da8a7375dfe8,\n            axisOrientation: axisOrientation,\n            global: true,\n            metersPerUnit: $b58ae362632b32c5$export$1482081eec883108,\n            worldExtent: $b58ae362632b32c5$export$21e6da8a7375dfe8\n        });\n    }\n}\nconst $b58ae362632b32c5$export$b508d7ad9a891c1b = [\n    new $b58ae362632b32c5$var$EPSG4326Projection('CRS:84'),\n    new $b58ae362632b32c5$var$EPSG4326Projection('EPSG:4326', 'neu'),\n    new $b58ae362632b32c5$var$EPSG4326Projection('urn:ogc:def:crs:OGC:1.3:CRS84'),\n    new $b58ae362632b32c5$var$EPSG4326Projection('urn:ogc:def:crs:OGC:2:84'),\n    new $b58ae362632b32c5$var$EPSG4326Projection('http://www.opengis.net/def/crs/OGC/1.3/CRS84'),\n    new $b58ae362632b32c5$var$EPSG4326Projection('http://www.opengis.net/gml/srs/epsg.xml#4326', 'neu'),\n    new $b58ae362632b32c5$var$EPSG4326Projection('http://www.opengis.net/def/crs/EPSG/0/4326', 'neu')\n];\n\n\n/**\r\n * @module ol/proj/projections\r\n */ /**\r\n * @type {Object<string, import(\"./Projection.js\").default>}\r\n */ let $f5ec5c943d804ecb$var$cache = {};\nfunction $f5ec5c943d804ecb$export$42ffd38884aecdac() {\n    $f5ec5c943d804ecb$var$cache = {};\n}\nfunction $f5ec5c943d804ecb$export$3988ae62b71be9a3(code) {\n    return $f5ec5c943d804ecb$var$cache[code] || $f5ec5c943d804ecb$var$cache[code.replace(/urn:(x-)?ogc:def:crs:EPSG:(.*:)?(\\w+)$/, 'EPSG:$3')] || null;\n}\nfunction $f5ec5c943d804ecb$export$e16d8520af44a096(code, projection) {\n    $f5ec5c943d804ecb$var$cache[code] = projection;\n}\n\n\n/**\r\n * @module ol/proj/transforms\r\n */ \n/**\r\n * @private\r\n * @type {!Object<string, Object<string, import(\"../proj.js\").TransformFunction>>}\r\n */ let $11b5dd198626e1de$var$transforms = {};\nfunction $11b5dd198626e1de$export$42ffd38884aecdac() {\n    $11b5dd198626e1de$var$transforms = {};\n}\nfunction $11b5dd198626e1de$export$e16d8520af44a096(source, destination, transformFn) {\n    const sourceCode = source.getCode();\n    const destinationCode = destination.getCode();\n    if (!(sourceCode in $11b5dd198626e1de$var$transforms)) $11b5dd198626e1de$var$transforms[sourceCode] = {};\n    $11b5dd198626e1de$var$transforms[sourceCode][destinationCode] = transformFn;\n}\nfunction $11b5dd198626e1de$export$cd7f480d6b8286c3(source, destination) {\n    const sourceCode = source.getCode();\n    const destinationCode = destination.getCode();\n    const transform = $11b5dd198626e1de$var$transforms[sourceCode][destinationCode];\n    delete $11b5dd198626e1de$var$transforms[sourceCode][destinationCode];\n    if ((0, $beaefe87199bb537$export$dd1bc94b04021eeb)($11b5dd198626e1de$var$transforms[sourceCode])) delete $11b5dd198626e1de$var$transforms[sourceCode];\n    return transform;\n}\nfunction $11b5dd198626e1de$export$3988ae62b71be9a3(sourceCode, destinationCode) {\n    if (sourceCode in $11b5dd198626e1de$var$transforms && destinationCode in $11b5dd198626e1de$var$transforms[sourceCode]) return $11b5dd198626e1de$var$transforms[sourceCode][destinationCode];\n    return null;\n}\n\n\n/**\r\n * @module ol/proj/utm\r\n */ /**\r\n * Adapted from https://github.com/Turbo87/utm\r\n * Copyright (c) 2012-2017 Tobias Bieniek\r\n *\r\n * The functions here provide approximate transforms to and from UTM.\r\n * They are not appropriate for use beyond the validity extend of a UTM\r\n * zone, and the accuracy of the transform decreases toward the zone\r\n * edges.\r\n */ \n\n/**\r\n * @typedef {Object} UTMZone\r\n * @property {number} number The zone number (1 - 60).\r\n * @property {boolean} north The northern hemisphere.\r\n */ const $5f19451ebc03a1eb$var$K0 = 0.9996;\nconst $5f19451ebc03a1eb$var$E = 0.00669438;\nconst $5f19451ebc03a1eb$var$E2 = $5f19451ebc03a1eb$var$E * $5f19451ebc03a1eb$var$E;\nconst $5f19451ebc03a1eb$var$E3 = $5f19451ebc03a1eb$var$E2 * $5f19451ebc03a1eb$var$E;\nconst $5f19451ebc03a1eb$var$E_P2 = $5f19451ebc03a1eb$var$E / (1 - $5f19451ebc03a1eb$var$E);\nconst $5f19451ebc03a1eb$var$SQRT_E = Math.sqrt(1 - $5f19451ebc03a1eb$var$E);\nconst $5f19451ebc03a1eb$var$_E = (1 - $5f19451ebc03a1eb$var$SQRT_E) / (1 + $5f19451ebc03a1eb$var$SQRT_E);\nconst $5f19451ebc03a1eb$var$_E2 = $5f19451ebc03a1eb$var$_E * $5f19451ebc03a1eb$var$_E;\nconst $5f19451ebc03a1eb$var$_E3 = $5f19451ebc03a1eb$var$_E2 * $5f19451ebc03a1eb$var$_E;\nconst $5f19451ebc03a1eb$var$_E4 = $5f19451ebc03a1eb$var$_E3 * $5f19451ebc03a1eb$var$_E;\nconst $5f19451ebc03a1eb$var$_E5 = $5f19451ebc03a1eb$var$_E4 * $5f19451ebc03a1eb$var$_E;\nconst $5f19451ebc03a1eb$var$M1 = 1 - $5f19451ebc03a1eb$var$E / 4 - 3 * $5f19451ebc03a1eb$var$E2 / 64 - 5 * $5f19451ebc03a1eb$var$E3 / 256;\nconst $5f19451ebc03a1eb$var$M2 = 3 * $5f19451ebc03a1eb$var$E / 8 + 3 * $5f19451ebc03a1eb$var$E2 / 32 + 45 * $5f19451ebc03a1eb$var$E3 / 1024;\nconst $5f19451ebc03a1eb$var$M3 = 15 * $5f19451ebc03a1eb$var$E2 / 256 + 45 * $5f19451ebc03a1eb$var$E3 / 1024;\nconst $5f19451ebc03a1eb$var$M4 = 35 * $5f19451ebc03a1eb$var$E3 / 3072;\nconst $5f19451ebc03a1eb$var$P2 = 1.5 * $5f19451ebc03a1eb$var$_E - 27 / 32 * $5f19451ebc03a1eb$var$_E3 + 269 / 512 * $5f19451ebc03a1eb$var$_E5;\nconst $5f19451ebc03a1eb$var$P3 = 21 / 16 * $5f19451ebc03a1eb$var$_E2 - 55 / 32 * $5f19451ebc03a1eb$var$_E4;\nconst $5f19451ebc03a1eb$var$P4 = 151 / 96 * $5f19451ebc03a1eb$var$_E3 - 417 / 128 * $5f19451ebc03a1eb$var$_E5;\nconst $5f19451ebc03a1eb$var$P5 = 1097 / 512 * $5f19451ebc03a1eb$var$_E4;\nconst $5f19451ebc03a1eb$var$R = 6378137;\n/**\r\n * @param {number} easting Easting value of coordinate.\r\n * @param {number} northing Northing value of coordinate.\r\n * @param {UTMZone} zone The UTM zone.\r\n * @return {import(\"../coordinate.js\").Coordinate} The transformed coordinate.\r\n */ function $5f19451ebc03a1eb$var$toLonLat(easting, northing, zone) {\n    const x = easting - 500000;\n    const y = zone.north ? northing : northing - 10000000;\n    const m = y / $5f19451ebc03a1eb$var$K0;\n    const mu = m / ($5f19451ebc03a1eb$var$R * $5f19451ebc03a1eb$var$M1);\n    const pRad = mu + $5f19451ebc03a1eb$var$P2 * Math.sin(2 * mu) + $5f19451ebc03a1eb$var$P3 * Math.sin(4 * mu) + $5f19451ebc03a1eb$var$P4 * Math.sin(6 * mu) + $5f19451ebc03a1eb$var$P5 * Math.sin(8 * mu);\n    const pSin = Math.sin(pRad);\n    const pSin2 = pSin * pSin;\n    const pCos = Math.cos(pRad);\n    const pTan = pSin / pCos;\n    const pTan2 = pTan * pTan;\n    const pTan4 = pTan2 * pTan2;\n    const epSin = 1 - $5f19451ebc03a1eb$var$E * pSin2;\n    const epSinSqrt = Math.sqrt(1 - $5f19451ebc03a1eb$var$E * pSin2);\n    const n = $5f19451ebc03a1eb$var$R / epSinSqrt;\n    const r = (1 - $5f19451ebc03a1eb$var$E) / epSin;\n    const c = $5f19451ebc03a1eb$var$E_P2 * pCos ** 2;\n    const c2 = c * c;\n    const d = x / (n * $5f19451ebc03a1eb$var$K0);\n    const d2 = d * d;\n    const d3 = d2 * d;\n    const d4 = d3 * d;\n    const d5 = d4 * d;\n    const d6 = d5 * d;\n    const latitude = pRad - pTan / r * (d2 / 2 - d4 / 24 * (5 + 3 * pTan2 + 10 * c - 4 * c2 - 9 * $5f19451ebc03a1eb$var$E_P2)) + d6 / 720 * (61 + 90 * pTan2 + 298 * c + 45 * pTan4 - 252 * $5f19451ebc03a1eb$var$E_P2 - 3 * c2);\n    let longitude = (d - d3 / 6 * (1 + 2 * pTan2 + c) + d5 / 120 * (5 - 2 * c + 28 * pTan2 - 3 * c2 + 8 * $5f19451ebc03a1eb$var$E_P2 + 24 * pTan4)) / pCos;\n    longitude = (0, $6b000a049d919fe5$export$4997ffc0176396a6)(longitude + (0, $6b000a049d919fe5$export$cba01ba138429a1d)($5f19451ebc03a1eb$var$zoneToCentralLongitude(zone.number)), -Math.PI, Math.PI);\n    return [\n        (0, $6b000a049d919fe5$export$56cb859c01fa134d)(longitude),\n        (0, $6b000a049d919fe5$export$56cb859c01fa134d)(latitude)\n    ];\n}\nconst $5f19451ebc03a1eb$var$MIN_LATITUDE = -80;\nconst $5f19451ebc03a1eb$var$MAX_LATITUDE = 84;\nconst $5f19451ebc03a1eb$var$MIN_LONGITUDE = -180;\nconst $5f19451ebc03a1eb$var$MAX_LONGITUDE = 180;\n/**\r\n * @param {number} longitude The longitude.\r\n * @param {number} latitude The latitude.\r\n * @param {UTMZone} zone The UTM zone.\r\n * @return {import('../coordinate.js').Coordinate} The UTM coordinate.\r\n */ function $5f19451ebc03a1eb$var$fromLonLat(longitude, latitude, zone) {\n    longitude = (0, $6b000a049d919fe5$export$4997ffc0176396a6)(longitude, $5f19451ebc03a1eb$var$MIN_LONGITUDE, $5f19451ebc03a1eb$var$MAX_LONGITUDE);\n    if (latitude < $5f19451ebc03a1eb$var$MIN_LATITUDE) latitude = $5f19451ebc03a1eb$var$MIN_LATITUDE;\n    else if (latitude > $5f19451ebc03a1eb$var$MAX_LATITUDE) latitude = $5f19451ebc03a1eb$var$MAX_LATITUDE;\n    const latRad = (0, $6b000a049d919fe5$export$cba01ba138429a1d)(latitude);\n    const latSin = Math.sin(latRad);\n    const latCos = Math.cos(latRad);\n    const latTan = latSin / latCos;\n    const latTan2 = latTan * latTan;\n    const latTan4 = latTan2 * latTan2;\n    const lonRad = (0, $6b000a049d919fe5$export$cba01ba138429a1d)(longitude);\n    const centralLon = $5f19451ebc03a1eb$var$zoneToCentralLongitude(zone.number);\n    const centralLonRad = (0, $6b000a049d919fe5$export$cba01ba138429a1d)(centralLon);\n    const n = $5f19451ebc03a1eb$var$R / Math.sqrt(1 - $5f19451ebc03a1eb$var$E * latSin ** 2);\n    const c = $5f19451ebc03a1eb$var$E_P2 * latCos ** 2;\n    const a = latCos * (0, $6b000a049d919fe5$export$4997ffc0176396a6)(lonRad - centralLonRad, -Math.PI, Math.PI);\n    const a2 = a * a;\n    const a3 = a2 * a;\n    const a4 = a3 * a;\n    const a5 = a4 * a;\n    const a6 = a5 * a;\n    const m = $5f19451ebc03a1eb$var$R * ($5f19451ebc03a1eb$var$M1 * latRad - $5f19451ebc03a1eb$var$M2 * Math.sin(2 * latRad) + $5f19451ebc03a1eb$var$M3 * Math.sin(4 * latRad) - $5f19451ebc03a1eb$var$M4 * Math.sin(6 * latRad));\n    const easting = $5f19451ebc03a1eb$var$K0 * n * (a + a3 / 6 * (1 - latTan2 + c) + a5 / 120 * (5 - 18 * latTan2 + latTan4 + 72 * c - 58 * $5f19451ebc03a1eb$var$E_P2)) + 500000;\n    let northing = $5f19451ebc03a1eb$var$K0 * (m + n * latTan * (a2 / 2 + a4 / 24 * (5 - latTan2 + 9 * c + 4 * c ** 2) + a6 / 720 * (61 - 58 * latTan2 + latTan4 + 600 * c - 330 * $5f19451ebc03a1eb$var$E_P2)));\n    if (!zone.north) northing += 10000000;\n    return [\n        easting,\n        northing\n    ];\n}\n/**\r\n * @param {number} zone The zone number.\r\n * @return {number} The central longitude in degrees.\r\n */ function $5f19451ebc03a1eb$var$zoneToCentralLongitude(zone) {\n    return (zone - 1) * 6 - 180 + 3;\n}\n/**\r\n * @type {Array<RegExp>}\r\n */ const $5f19451ebc03a1eb$var$epsgRegExes = [\n    /^EPSG:(\\d+)$/,\n    /^urn:ogc:def:crs:EPSG::(\\d+)$/,\n    /^http:\\/\\/www\\.opengis\\.net\\/def\\/crs\\/EPSG\\/0\\/(\\d+)$/\n];\nfunction $5f19451ebc03a1eb$export$bb54dc52a08ed170(code) {\n    let epsgId = 0;\n    for (const re of $5f19451ebc03a1eb$var$epsgRegExes){\n        const match = code.match(re);\n        if (match) {\n            epsgId = parseInt(match[1]);\n            break;\n        }\n    }\n    if (!epsgId) return null;\n    let number = 0;\n    let north = false;\n    if (epsgId > 32700 && epsgId < 32761) number = epsgId - 32700;\n    else if (epsgId > 32600 && epsgId < 32661) {\n        north = true;\n        number = epsgId - 32600;\n    }\n    if (!number) return null;\n    return {\n        number: number,\n        north: north\n    };\n}\n/**\r\n * @param {function(number, number, UTMZone): import('../coordinate.js').Coordinate} transformer The transformer.\r\n * @param {UTMZone} zone The UTM zone.\r\n * @return {import('../proj.js').TransformFunction} The transform function.\r\n */ function $5f19451ebc03a1eb$var$makeTransformFunction(transformer, zone) {\n    return function(input, output, dimension, stride) {\n        const length = input.length;\n        dimension = dimension > 1 ? dimension : 2;\n        stride = stride ?? dimension;\n        if (!output) {\n            if (dimension > 2) output = input.slice();\n            else output = new Array(length);\n        }\n        for(let i = 0; i < length; i += stride){\n            const x = input[i];\n            const y = input[i + 1];\n            const coord = transformer(x, y, zone);\n            output[i] = coord[0];\n            output[i + 1] = coord[1];\n        }\n        return output;\n    };\n}\nfunction $5f19451ebc03a1eb$export$3277980d225b59be(code) {\n    const zone = $5f19451ebc03a1eb$export$bb54dc52a08ed170(code);\n    if (!zone) return null;\n    return new (0, $6dc418afeec7068a$export$2e2bcd8739ae039)({\n        code: code,\n        units: 'm'\n    });\n}\nfunction $5f19451ebc03a1eb$export$f94509e55523febf(projection) {\n    const zone = $5f19451ebc03a1eb$export$bb54dc52a08ed170(projection.getCode());\n    if (!zone) return null;\n    return {\n        forward: $5f19451ebc03a1eb$var$makeTransformFunction($5f19451ebc03a1eb$var$fromLonLat, zone),\n        inverse: $5f19451ebc03a1eb$var$makeTransformFunction($5f19451ebc03a1eb$var$toLonLat, zone)\n    };\n}\n\n\n\n/**\r\n * A projection as {@link module:ol/proj/Projection~Projection}, SRS identifier\r\n * string or undefined.\r\n * @typedef {Projection|string|undefined} ProjectionLike\r\n * @api\r\n */ /**\r\n * @typedef {Object} Transforms\r\n * @property {TransformFunction} forward The forward transform (from geographic).\r\n * @property {TransformFunction} inverse The inverse transform (to geographic).\r\n */ /**\r\n * @type {Array<function(Projection): Transforms|null>}\r\n */ const $9c4744460e43e41b$var$transformFactories = [\n    (0, $5f19451ebc03a1eb$export$f94509e55523febf)\n];\n/**\r\n * @type {Array<function(string): Projection|null>}\r\n */ const $9c4744460e43e41b$var$projectionFactories = [\n    (0, $5f19451ebc03a1eb$export$3277980d225b59be)\n];\nlet $9c4744460e43e41b$var$showCoordinateWarning = true;\nfunction $9c4744460e43e41b$export$ed949affbc7c4223(disable) {\n    const hide = disable === undefined ? true : disable;\n    $9c4744460e43e41b$var$showCoordinateWarning = !hide;\n}\nfunction $9c4744460e43e41b$export$dd516654c5f598fb(input, output) {\n    if (output !== undefined) {\n        for(let i = 0, ii = input.length; i < ii; ++i)output[i] = input[i];\n        output;\n    } else output = input.slice();\n    return output;\n}\nfunction $9c4744460e43e41b$export$83e8ab53904f8022(input, output) {\n    if (output !== undefined && input !== output) {\n        for(let i = 0, ii = input.length; i < ii; ++i)output[i] = input[i];\n        input = output;\n    }\n    return input;\n}\nfunction $9c4744460e43e41b$export$59ae956cd3e343f7(projection) {\n    (0, $f5ec5c943d804ecb$export$e16d8520af44a096)(projection.getCode(), projection);\n    (0, $11b5dd198626e1de$export$e16d8520af44a096)(projection, projection, $9c4744460e43e41b$export$dd516654c5f598fb);\n}\nfunction $9c4744460e43e41b$export$638ad73f7aafb913(projections) {\n    projections.forEach($9c4744460e43e41b$export$59ae956cd3e343f7);\n}\nfunction $9c4744460e43e41b$export$3988ae62b71be9a3(projectionLike) {\n    if (!(typeof projectionLike === 'string')) return projectionLike;\n    const projection = (0, $f5ec5c943d804ecb$export$3988ae62b71be9a3)(projectionLike);\n    if (projection) return projection;\n    for (const makeProjection of $9c4744460e43e41b$var$projectionFactories){\n        const projection = makeProjection(projectionLike);\n        if (projection) return projection;\n    }\n    return null;\n}\nfunction $9c4744460e43e41b$export$2d8f7b4eec383d44(projection, resolution, point, units) {\n    projection = $9c4744460e43e41b$export$3988ae62b71be9a3(projection);\n    let pointResolution;\n    const getter = projection.getPointResolutionFunc();\n    if (getter) {\n        pointResolution = getter(resolution, point);\n        if (units && units !== projection.getUnits()) {\n            const metersPerUnit = projection.getMetersPerUnit();\n            if (metersPerUnit) pointResolution = pointResolution * metersPerUnit / (0, $03edbd434a9e6608$export$1482081eec883108)[units];\n        }\n    } else {\n        const projUnits = projection.getUnits();\n        if (projUnits == 'degrees' && !units || units == 'degrees') pointResolution = resolution;\n        else {\n            // Estimate point resolution by transforming the center pixel to EPSG:4326,\n            // measuring its width and height on the normal sphere, and taking the\n            // average of the width and height.\n            const toEPSG4326 = $9c4744460e43e41b$export$e3c4995a701c26a3(projection, $9c4744460e43e41b$export$3988ae62b71be9a3('EPSG:4326'));\n            if (!toEPSG4326 && projUnits !== 'degrees') // no transform is available\n            pointResolution = resolution * projection.getMetersPerUnit();\n            else {\n                let vertices = [\n                    point[0] - resolution / 2,\n                    point[1],\n                    point[0] + resolution / 2,\n                    point[1],\n                    point[0],\n                    point[1] - resolution / 2,\n                    point[0],\n                    point[1] + resolution / 2\n                ];\n                vertices = toEPSG4326(vertices, vertices, 2);\n                const width = (0, $fb75384508533d8f$export$79376507b09a66f)(vertices.slice(0, 2), vertices.slice(2, 4));\n                const height = (0, $fb75384508533d8f$export$79376507b09a66f)(vertices.slice(4, 6), vertices.slice(6, 8));\n                pointResolution = (width + height) / 2;\n            }\n            const metersPerUnit = units ? (0, $03edbd434a9e6608$export$1482081eec883108)[units] : projection.getMetersPerUnit();\n            if (metersPerUnit !== undefined) pointResolution /= metersPerUnit;\n        }\n    }\n    return pointResolution;\n}\nfunction $9c4744460e43e41b$export$eeb8392580a05a37(projections) {\n    $9c4744460e43e41b$export$638ad73f7aafb913(projections);\n    projections.forEach(function(source) {\n        projections.forEach(function(destination) {\n            if (source !== destination) (0, $11b5dd198626e1de$export$e16d8520af44a096)(source, destination, $9c4744460e43e41b$export$dd516654c5f598fb);\n        });\n    });\n}\nfunction $9c4744460e43e41b$export$4856f21c2f184f24(projections1, projections2, forwardTransform, inverseTransform) {\n    projections1.forEach(function(projection1) {\n        projections2.forEach(function(projection2) {\n            (0, $11b5dd198626e1de$export$e16d8520af44a096)(projection1, projection2, forwardTransform);\n            (0, $11b5dd198626e1de$export$e16d8520af44a096)(projection2, projection1, inverseTransform);\n        });\n    });\n}\nfunction $9c4744460e43e41b$export$4860237d10380594() {\n    (0, $f5ec5c943d804ecb$export$42ffd38884aecdac)();\n    (0, $11b5dd198626e1de$export$42ffd38884aecdac)();\n}\nfunction $9c4744460e43e41b$export$549167224996a0fb(projection, defaultCode) {\n    if (!projection) return $9c4744460e43e41b$export$3988ae62b71be9a3(defaultCode);\n    if (typeof projection === 'string') return $9c4744460e43e41b$export$3988ae62b71be9a3(projection);\n    return /** @type {Projection} */ projection;\n}\nfunction $9c4744460e43e41b$export$6b4aafd331159e0d(coordTransform) {\n    return(/**\r\n     * @param {Array<number>} input Input.\r\n     * @param {Array<number>} [output] Output.\r\n     * @param {number} [dimension] Dimensions that should be transformed.\r\n     * @param {number} [stride] Stride.\r\n     * @return {Array<number>} Output.\r\n     */ function(input, output, dimension, stride) {\n        const length = input.length;\n        dimension = dimension !== undefined ? dimension : 2;\n        stride = stride ?? dimension;\n        output = output !== undefined ? output : new Array(length);\n        for(let i = 0; i < length; i += stride){\n            const point = coordTransform(input.slice(i, i + dimension));\n            const pointLength = point.length;\n            for(let j = 0, jj = stride; j < jj; ++j)output[i + j] = j >= pointLength ? input[i + j] : point[j];\n        }\n        return output;\n    });\n}\nfunction $9c4744460e43e41b$export$6b1c2e6623f4f49d(source, destination, forward, inverse) {\n    const sourceProj = $9c4744460e43e41b$export$3988ae62b71be9a3(source);\n    const destProj = $9c4744460e43e41b$export$3988ae62b71be9a3(destination);\n    (0, $11b5dd198626e1de$export$e16d8520af44a096)(sourceProj, destProj, $9c4744460e43e41b$export$6b4aafd331159e0d(forward));\n    (0, $11b5dd198626e1de$export$e16d8520af44a096)(destProj, sourceProj, $9c4744460e43e41b$export$6b4aafd331159e0d(inverse));\n}\nfunction $9c4744460e43e41b$export$b15d9668511529b9(coordinate, projection) {\n    $9c4744460e43e41b$export$ed949affbc7c4223();\n    return $9c4744460e43e41b$export$51186ad6e864892a(coordinate, 'EPSG:4326', projection !== undefined ? projection : 'EPSG:3857');\n}\nfunction $9c4744460e43e41b$export$3fb495868742d370(coordinate, projection) {\n    const lonLat = $9c4744460e43e41b$export$51186ad6e864892a(coordinate, projection !== undefined ? projection : 'EPSG:3857', 'EPSG:4326');\n    const lon = lonLat[0];\n    if (lon < -180 || lon > 180) lonLat[0] = (0, $6b000a049d919fe5$export$ba467bec01d66def)(lon + 180, 360) - 180;\n    return lonLat;\n}\nfunction $9c4744460e43e41b$export$fe091d73a555748b(projection1, projection2) {\n    if (projection1 === projection2) return true;\n    const equalUnits = projection1.getUnits() === projection2.getUnits();\n    if (projection1.getCode() === projection2.getCode()) return equalUnits;\n    const transformFunc = $9c4744460e43e41b$export$e3c4995a701c26a3(projection1, projection2);\n    return transformFunc === $9c4744460e43e41b$export$dd516654c5f598fb && equalUnits;\n}\nfunction $9c4744460e43e41b$export$e3c4995a701c26a3(source, destination) {\n    const sourceCode = source.getCode();\n    const destinationCode = destination.getCode();\n    let transformFunc = (0, $11b5dd198626e1de$export$3988ae62b71be9a3)(sourceCode, destinationCode);\n    if (transformFunc) return transformFunc;\n    /**\r\n   * @type {Transforms|null}\r\n   */ let sourceTransforms = null;\n    /**\r\n   * @type {Transforms|null}\r\n   */ let destinationTransforms = null;\n    // lazily add projections if we have supported transforms\n    for (const makeTransforms of $9c4744460e43e41b$var$transformFactories){\n        if (!sourceTransforms) sourceTransforms = makeTransforms(source);\n        if (!destinationTransforms) destinationTransforms = makeTransforms(destination);\n    }\n    if (!sourceTransforms && !destinationTransforms) return null;\n    const intermediateCode = 'EPSG:4326';\n    if (!destinationTransforms) {\n        const toDestination = (0, $11b5dd198626e1de$export$3988ae62b71be9a3)(intermediateCode, destinationCode);\n        if (toDestination) transformFunc = $9c4744460e43e41b$var$composeTransformFuncs(sourceTransforms.inverse, toDestination);\n    } else if (!sourceTransforms) {\n        const fromSource = (0, $11b5dd198626e1de$export$3988ae62b71be9a3)(sourceCode, intermediateCode);\n        if (fromSource) transformFunc = $9c4744460e43e41b$var$composeTransformFuncs(fromSource, destinationTransforms.forward);\n    } else transformFunc = $9c4744460e43e41b$var$composeTransformFuncs(sourceTransforms.inverse, destinationTransforms.forward);\n    if (transformFunc) {\n        $9c4744460e43e41b$export$59ae956cd3e343f7(source);\n        $9c4744460e43e41b$export$59ae956cd3e343f7(destination);\n        (0, $11b5dd198626e1de$export$e16d8520af44a096)(source, destination, transformFunc);\n    }\n    return transformFunc;\n}\n/**\r\n * @param {TransformFunction} t1 The first transform function.\r\n * @param {TransformFunction} t2 The second transform function.\r\n * @return {TransformFunction} The composed transform function.\r\n */ function $9c4744460e43e41b$var$composeTransformFuncs(t1, t2) {\n    return function(input, output, dimensions, stride) {\n        output = t1(input, output, dimensions, stride);\n        return t2(output, output, dimensions, stride);\n    };\n}\nfunction $9c4744460e43e41b$export$fce0c6cfca85ed96(source, destination) {\n    const sourceProjection = $9c4744460e43e41b$export$3988ae62b71be9a3(source);\n    const destinationProjection = $9c4744460e43e41b$export$3988ae62b71be9a3(destination);\n    return $9c4744460e43e41b$export$e3c4995a701c26a3(sourceProjection, destinationProjection);\n}\nfunction $9c4744460e43e41b$export$51186ad6e864892a(coordinate, source, destination) {\n    const transformFunc = $9c4744460e43e41b$export$fce0c6cfca85ed96(source, destination);\n    if (!transformFunc) {\n        const sourceCode = $9c4744460e43e41b$export$3988ae62b71be9a3(source).getCode();\n        const destinationCode = $9c4744460e43e41b$export$3988ae62b71be9a3(destination).getCode();\n        throw new Error(`No transform available between ${sourceCode} and ${destinationCode}`);\n    }\n    return transformFunc(coordinate, undefined, coordinate.length);\n}\nfunction $9c4744460e43e41b$export$751c68e0e0efff79(extent, source, destination, stops) {\n    const transformFunc = $9c4744460e43e41b$export$fce0c6cfca85ed96(source, destination);\n    return (0, $6da4c8ed3074c92b$export$9f9dcb98c894b623)(extent, transformFunc, undefined, stops);\n}\nfunction $9c4744460e43e41b$export$affbde93b1db73f8(point, sourceProjection, destinationProjection) {\n    const transformFunc = $9c4744460e43e41b$export$e3c4995a701c26a3(sourceProjection, destinationProjection);\n    return transformFunc(point);\n}\n/**\r\n * @type {Projection|null}\r\n */ let $9c4744460e43e41b$var$userProjection = null;\nfunction $9c4744460e43e41b$export$d0aeadbeac54116e(projection) {\n    $9c4744460e43e41b$var$userProjection = $9c4744460e43e41b$export$3988ae62b71be9a3(projection);\n}\nfunction $9c4744460e43e41b$export$1ae11279759d4e8f() {\n    $9c4744460e43e41b$var$userProjection = null;\n}\nfunction $9c4744460e43e41b$export$3973b77d5f6f2790() {\n    return $9c4744460e43e41b$var$userProjection;\n}\nfunction $9c4744460e43e41b$export$aa7494edfbe36197() {\n    $9c4744460e43e41b$export$d0aeadbeac54116e('EPSG:4326');\n}\nfunction $9c4744460e43e41b$export$698f563af1ba02a5(coordinate, sourceProjection) {\n    if (!$9c4744460e43e41b$var$userProjection) return coordinate;\n    return $9c4744460e43e41b$export$51186ad6e864892a(coordinate, sourceProjection, $9c4744460e43e41b$var$userProjection);\n}\nfunction $9c4744460e43e41b$export$d4b8ec0b96db1ee2(coordinate, destProjection) {\n    if (!$9c4744460e43e41b$var$userProjection) {\n        if ($9c4744460e43e41b$var$showCoordinateWarning && !(0, $1bd0a226f9a16141$export$e9bab7fafb253603)(coordinate, [\n            0,\n            0\n        ]) && coordinate[0] >= -180 && coordinate[0] <= 180 && coordinate[1] >= -90 && coordinate[1] <= 90) {\n            $9c4744460e43e41b$var$showCoordinateWarning = false;\n            (0, $8c65b0699f3f3f8e$export$c106dd0671a0fc2d)('Call useGeographic() from ol/proj once to work with [longitude, latitude] coordinates.');\n        }\n        return coordinate;\n    }\n    return $9c4744460e43e41b$export$51186ad6e864892a(coordinate, $9c4744460e43e41b$var$userProjection, destProjection);\n}\nfunction $9c4744460e43e41b$export$96bfd09e2cffb006(extent, sourceProjection) {\n    if (!$9c4744460e43e41b$var$userProjection) return extent;\n    return $9c4744460e43e41b$export$751c68e0e0efff79(extent, sourceProjection, $9c4744460e43e41b$var$userProjection);\n}\nfunction $9c4744460e43e41b$export$494be3a3a25689ca(extent, destProjection) {\n    if (!$9c4744460e43e41b$var$userProjection) return extent;\n    return $9c4744460e43e41b$export$751c68e0e0efff79(extent, $9c4744460e43e41b$var$userProjection, destProjection);\n}\nfunction $9c4744460e43e41b$export$b56bb8ad8b3a00e9(resolution, sourceProjection) {\n    if (!$9c4744460e43e41b$var$userProjection) return resolution;\n    const sourceMetersPerUnit = $9c4744460e43e41b$export$3988ae62b71be9a3(sourceProjection).getMetersPerUnit();\n    const userMetersPerUnit = $9c4744460e43e41b$var$userProjection.getMetersPerUnit();\n    return sourceMetersPerUnit && userMetersPerUnit ? resolution * sourceMetersPerUnit / userMetersPerUnit : resolution;\n}\nfunction $9c4744460e43e41b$export$bd1cd3b88140b906(resolution, destProjection) {\n    if (!$9c4744460e43e41b$var$userProjection) return resolution;\n    const destMetersPerUnit = $9c4744460e43e41b$export$3988ae62b71be9a3(destProjection).getMetersPerUnit();\n    const userMetersPerUnit = $9c4744460e43e41b$var$userProjection.getMetersPerUnit();\n    return destMetersPerUnit && userMetersPerUnit ? resolution * userMetersPerUnit / destMetersPerUnit : resolution;\n}\nfunction $9c4744460e43e41b$export$1873f9cfeb8bd1d6(sourceProj, destProj, transform) {\n    return function(coord) {\n        let transformed, worldsAway;\n        if (sourceProj.canWrapX()) {\n            const sourceExtent = sourceProj.getExtent();\n            const sourceExtentWidth = (0, $6da4c8ed3074c92b$export$3c49c185de0c2bfc)(sourceExtent);\n            coord = coord.slice(0);\n            worldsAway = (0, $1bd0a226f9a16141$export$24e2b27d1ff0c1d5)(coord, sourceProj, sourceExtentWidth);\n            if (worldsAway) // Move x to the real world\n            coord[0] = coord[0] - worldsAway * sourceExtentWidth;\n            coord[0] = (0, $6b000a049d919fe5$export$7d15b64cf5a3a4c4)(coord[0], sourceExtent[0], sourceExtent[2]);\n            coord[1] = (0, $6b000a049d919fe5$export$7d15b64cf5a3a4c4)(coord[1], sourceExtent[1], sourceExtent[3]);\n            transformed = transform(coord);\n        } else transformed = transform(coord);\n        if (worldsAway && destProj.canWrapX()) // Move transformed coordinate back to the offset world\n        transformed[0] += worldsAway * (0, $6da4c8ed3074c92b$export$3c49c185de0c2bfc)(destProj.getExtent());\n        return transformed;\n    };\n}\nfunction $9c4744460e43e41b$export$86eed449eb2dcac4() {\n    // Add transformations that don't alter coordinates to convert within set of\n    // projections with equal meaning.\n    $9c4744460e43e41b$export$eeb8392580a05a37((0, $84ad988f04807ab1$export$b508d7ad9a891c1b));\n    $9c4744460e43e41b$export$eeb8392580a05a37((0, $b58ae362632b32c5$export$b508d7ad9a891c1b));\n    // Add transformations to convert EPSG:4326 like coordinates to EPSG:3857 like\n    // coordinates and back.\n    $9c4744460e43e41b$export$4856f21c2f184f24((0, $b58ae362632b32c5$export$b508d7ad9a891c1b), (0, $84ad988f04807ab1$export$b508d7ad9a891c1b), (0, $84ad988f04807ab1$export$1ff8bb36c0983070), (0, $84ad988f04807ab1$export$8c71322ec28ed6b4));\n}\n$9c4744460e43e41b$export$86eed449eb2dcac4();\n\n\n/**\r\n * @module ol/transform\r\n */ \n/**\r\n * An array representing an affine 2d transformation for use with\r\n * {@link module:ol/transform} functions. The array has 6 elements.\r\n * @typedef {!Array<number>} Transform\r\n * @api\r\n */ /**\r\n * Collection of affine 2d transformation functions. The functions work on an\r\n * array of 6 elements. The element order is compatible with the [SVGMatrix\r\n * interface](https://developer.mozilla.org/en-US/docs/Web/API/SVGMatrix) and is\r\n * a subset (elements a to f) of a 3×3 matrix:\r\n * ```\r\n * [ a c e ]\r\n * [ b d f ]\r\n * [ 0 0 1 ]\r\n * ```\r\n */ /**\r\n * @private\r\n * @type {Transform}\r\n */ const $e22e7611e69f42a9$var$tmp_ = new Array(6);\nfunction $e22e7611e69f42a9$export$185802fd694ee1f5() {\n    return [\n        1,\n        0,\n        0,\n        1,\n        0,\n        0\n    ];\n}\nfunction $e22e7611e69f42a9$export$aad8462122ac592b(transform) {\n    return $e22e7611e69f42a9$export$adaa4cf7ef1b65be(transform, 1, 0, 0, 1, 0, 0);\n}\nfunction $e22e7611e69f42a9$export$2060d2db72cce88f(transform1, transform2) {\n    const a1 = transform1[0];\n    const b1 = transform1[1];\n    const c1 = transform1[2];\n    const d1 = transform1[3];\n    const e1 = transform1[4];\n    const f1 = transform1[5];\n    const a2 = transform2[0];\n    const b2 = transform2[1];\n    const c2 = transform2[2];\n    const d2 = transform2[3];\n    const e2 = transform2[4];\n    const f2 = transform2[5];\n    transform1[0] = a1 * a2 + c1 * b2;\n    transform1[1] = b1 * a2 + d1 * b2;\n    transform1[2] = a1 * c2 + c1 * d2;\n    transform1[3] = b1 * c2 + d1 * d2;\n    transform1[4] = a1 * e2 + c1 * f2 + e1;\n    transform1[5] = b1 * e2 + d1 * f2 + f1;\n    return transform1;\n}\nfunction $e22e7611e69f42a9$export$adaa4cf7ef1b65be(transform, a, b, c, d, e, f) {\n    transform[0] = a;\n    transform[1] = b;\n    transform[2] = c;\n    transform[3] = d;\n    transform[4] = e;\n    transform[5] = f;\n    return transform;\n}\nfunction $e22e7611e69f42a9$export$42b4187a82d80ed0(transform1, transform2) {\n    transform1[0] = transform2[0];\n    transform1[1] = transform2[1];\n    transform1[2] = transform2[2];\n    transform1[3] = transform2[3];\n    transform1[4] = transform2[4];\n    transform1[5] = transform2[5];\n    return transform1;\n}\nfunction $e22e7611e69f42a9$export$5635d7ef4b8fee1c(transform, coordinate) {\n    const x = coordinate[0];\n    const y = coordinate[1];\n    coordinate[0] = transform[0] * x + transform[2] * y + transform[4];\n    coordinate[1] = transform[1] * x + transform[3] * y + transform[5];\n    return coordinate;\n}\nfunction $e22e7611e69f42a9$export$bb628a54ab399bc9(transform, angle) {\n    const cos = Math.cos(angle);\n    const sin = Math.sin(angle);\n    return $e22e7611e69f42a9$export$2060d2db72cce88f(transform, $e22e7611e69f42a9$export$adaa4cf7ef1b65be($e22e7611e69f42a9$var$tmp_, cos, sin, -sin, cos, 0, 0));\n}\nfunction $e22e7611e69f42a9$export$dcdf75081b88279d(transform, x, y) {\n    return $e22e7611e69f42a9$export$2060d2db72cce88f(transform, $e22e7611e69f42a9$export$adaa4cf7ef1b65be($e22e7611e69f42a9$var$tmp_, x, 0, 0, y, 0, 0));\n}\nfunction $e22e7611e69f42a9$export$3e4e33ea14aeb531(target, x, y) {\n    return $e22e7611e69f42a9$export$adaa4cf7ef1b65be(target, x, 0, 0, y, 0, 0);\n}\nfunction $e22e7611e69f42a9$export$d73ee8ef04f5226a(transform, dx, dy) {\n    return $e22e7611e69f42a9$export$2060d2db72cce88f(transform, $e22e7611e69f42a9$export$adaa4cf7ef1b65be($e22e7611e69f42a9$var$tmp_, 1, 0, 0, 1, dx, dy));\n}\nfunction $e22e7611e69f42a9$export$f672e0b6f7222cd7(transform, dx1, dy1, sx, sy, angle, dx2, dy2) {\n    const sin = Math.sin(angle);\n    const cos = Math.cos(angle);\n    transform[0] = sx * cos;\n    transform[1] = sy * sin;\n    transform[2] = -sx * sin;\n    transform[3] = sy * cos;\n    transform[4] = dx2 * sx * cos - dy2 * sx * sin + dx1;\n    transform[5] = dx2 * sy * sin + dy2 * sy * cos + dy1;\n    return transform;\n}\nfunction $e22e7611e69f42a9$export$12a96a1aaf5558e3(dx1, dy1, sx, sy, angle, dx2, dy2) {\n    return $e22e7611e69f42a9$export$f84e8e69fd4488a5($e22e7611e69f42a9$export$f672e0b6f7222cd7($e22e7611e69f42a9$export$185802fd694ee1f5(), dx1, dy1, sx, sy, angle, dx2, dy2));\n}\nfunction $e22e7611e69f42a9$export$6897c284b6f9f4dc(source) {\n    return $e22e7611e69f42a9$export$bd70ea2a93c0fa4(source, source);\n}\nfunction $e22e7611e69f42a9$export$bd70ea2a93c0fa4(target, source) {\n    const det = $e22e7611e69f42a9$export$a04698f914c55ed9(source);\n    (0, $35d5ec884318008e$export$a7a9523472993e97)(det !== 0, 'Transformation matrix cannot be inverted');\n    const a = source[0];\n    const b = source[1];\n    const c = source[2];\n    const d = source[3];\n    const e = source[4];\n    const f = source[5];\n    target[0] = d / det;\n    target[1] = -b / det;\n    target[2] = -c / det;\n    target[3] = a / det;\n    target[4] = (c * f - d * e) / det;\n    target[5] = -(a * f - b * e) / det;\n    return target;\n}\nfunction $e22e7611e69f42a9$export$a04698f914c55ed9(mat) {\n    return mat[0] * mat[3] - mat[1] * mat[2];\n}\n/**\r\n * @type {Array}\r\n */ const $e22e7611e69f42a9$var$matrixPrecision = [\n    1e5,\n    1e5,\n    1e5,\n    1e5,\n    2,\n    2\n];\nfunction $e22e7611e69f42a9$export$f84e8e69fd4488a5(mat) {\n    const transformString = 'matrix(' + mat.join(', ') + ')';\n    return transformString;\n}\n/**\r\n * Create a transform from a CSS transform matrix string.\r\n * @param {string} cssTransform The CSS string to parse.\r\n * @return {!Transform} The transform.\r\n */ function $e22e7611e69f42a9$var$fromString(cssTransform) {\n    const values = cssTransform.substring(7, cssTransform.length - 1).split(',');\n    return values.map(parseFloat);\n}\nfunction $e22e7611e69f42a9$export$fe091d73a555748b(cssTransform1, cssTransform2) {\n    const mat1 = $e22e7611e69f42a9$var$fromString(cssTransform1);\n    const mat2 = $e22e7611e69f42a9$var$fromString(cssTransform2);\n    for(let i = 0; i < 6; ++i){\n        if (Math.round((mat1[i] - mat2[i]) * $e22e7611e69f42a9$var$matrixPrecision[i]) !== 0) return false;\n    }\n    return true;\n}\n\n\n\n/**\r\n * @module ol/geom/flat/transform\r\n */ /**\r\n * @param {Array<number>} flatCoordinates Flat coordinates.\r\n * @param {number} offset Offset.\r\n * @param {number} end End.\r\n * @param {number} stride Stride.\r\n * @param {import(\"../../transform.js\").Transform} transform Transform.\r\n * @param {Array<number>} [dest] Destination.\r\n * @param {number} [destinationStride] Stride of destination coordinates; if unspecified, assumed to be 2.\r\n * @return {Array<number>} Transformed coordinates.\r\n */ function $14c6e714516e527b$export$b92b2dedcfff79de(flatCoordinates, offset, end, stride, transform, dest, destinationStride) {\n    dest = dest ? dest : [];\n    destinationStride = destinationStride ? destinationStride : 2;\n    let i = 0;\n    for(let j = offset; j < end; j += stride){\n        const x = flatCoordinates[j];\n        const y = flatCoordinates[j + 1];\n        dest[i++] = transform[0] * x + transform[2] * y + transform[4];\n        dest[i++] = transform[1] * x + transform[3] * y + transform[5];\n        for(let k = 2; k < destinationStride; k++)dest[i++] = flatCoordinates[j + k];\n    }\n    if (dest && dest.length != i) dest.length = i;\n    return dest;\n}\nfunction $14c6e714516e527b$export$bb628a54ab399bc9(flatCoordinates, offset, end, stride, angle, anchor, dest) {\n    dest = dest ? dest : [];\n    const cos = Math.cos(angle);\n    const sin = Math.sin(angle);\n    const anchorX = anchor[0];\n    const anchorY = anchor[1];\n    let i = 0;\n    for(let j = offset; j < end; j += stride){\n        const deltaX = flatCoordinates[j] - anchorX;\n        const deltaY = flatCoordinates[j + 1] - anchorY;\n        dest[i++] = anchorX + deltaX * cos - deltaY * sin;\n        dest[i++] = anchorY + deltaX * sin + deltaY * cos;\n        for(let k = j + 2; k < j + stride; ++k)dest[i++] = flatCoordinates[k];\n    }\n    if (dest && dest.length != i) dest.length = i;\n    return dest;\n}\nfunction $14c6e714516e527b$export$dcdf75081b88279d(flatCoordinates, offset, end, stride, sx, sy, anchor, dest) {\n    dest = dest ? dest : [];\n    const anchorX = anchor[0];\n    const anchorY = anchor[1];\n    let i = 0;\n    for(let j = offset; j < end; j += stride){\n        const deltaX = flatCoordinates[j] - anchorX;\n        const deltaY = flatCoordinates[j + 1] - anchorY;\n        dest[i++] = anchorX + sx * deltaX;\n        dest[i++] = anchorY + sy * deltaY;\n        for(let k = j + 2; k < j + stride; ++k)dest[i++] = flatCoordinates[k];\n    }\n    if (dest && dest.length != i) dest.length = i;\n    return dest;\n}\nfunction $14c6e714516e527b$export$d73ee8ef04f5226a(flatCoordinates, offset, end, stride, deltaX, deltaY, dest) {\n    dest = dest ? dest : [];\n    let i = 0;\n    for(let j = offset; j < end; j += stride){\n        dest[i++] = flatCoordinates[j] + deltaX;\n        dest[i++] = flatCoordinates[j + 1] + deltaY;\n        for(let k = j + 2; k < j + stride; ++k)dest[i++] = flatCoordinates[k];\n    }\n    if (dest && dest.length != i) dest.length = i;\n    return dest;\n}\n\n\n/**\r\n * @typedef {'XY' | 'XYZ' | 'XYM' | 'XYZM'} GeometryLayout\r\n * The coordinate layout for geometries, indicating whether a 3rd or 4th z ('Z')\r\n * or measure ('M') coordinate is available.\r\n */ /**\r\n * @typedef {'Point' | 'LineString' | 'LinearRing' | 'Polygon' | 'MultiPoint' | 'MultiLineString' | 'MultiPolygon' | 'GeometryCollection' | 'Circle'} Type\r\n * The geometry type.  One of `'Point'`, `'LineString'`, `'LinearRing'`,\r\n * `'Polygon'`, `'MultiPoint'`, `'MultiLineString'`, `'MultiPolygon'`,\r\n * `'GeometryCollection'`, or `'Circle'`.\r\n */ /**\r\n * @type {import(\"../transform.js\").Transform}\r\n */ const $50db89a00eb954f6$var$tmpTransform = (0, $e22e7611e69f42a9$export$185802fd694ee1f5)();\n/** @type {import('../coordinate.js').Coordinate} */ const $50db89a00eb954f6$var$tmpPoint = [\n    NaN,\n    NaN\n];\n/**\r\n * @classdesc\r\n * Abstract base class; normally only used for creating subclasses and not\r\n * instantiated in apps.\r\n * Base class for vector geometries.\r\n *\r\n * To get notified of changes to the geometry, register a listener for the\r\n * generic `change` event on your geometry instance.\r\n *\r\n * @abstract\r\n * @api\r\n */ class $50db89a00eb954f6$var$Geometry extends (0, $b68b3d6e32e3074a$export$2e2bcd8739ae039) {\n    constructor(){\n        super();\n        /**\r\n     * @private\r\n     * @type {import(\"../extent.js\").Extent}\r\n     */ this.extent_ = (0, $6da4c8ed3074c92b$export$fe201bb3bbe031e9)();\n        /**\r\n     * @private\r\n     * @type {number}\r\n     */ this.extentRevision_ = -1;\n        /**\r\n     * @protected\r\n     * @type {number}\r\n     */ this.simplifiedGeometryMaxMinSquaredTolerance = 0;\n        /**\r\n     * @protected\r\n     * @type {number}\r\n     */ this.simplifiedGeometryRevision = 0;\n        /**\r\n     * Get a transformed and simplified version of the geometry.\r\n     * @abstract\r\n     * @param {number} revision The geometry revision.\r\n     * @param {number} squaredTolerance Squared tolerance.\r\n     * @param {import(\"../proj.js\").TransformFunction} [transform] Optional transform function.\r\n     * @return {Geometry} Simplified geometry.\r\n     */ this.simplifyTransformedInternal = (0, $013a1733c226ec50$export$ff83df6f9971435f)((revision, squaredTolerance, transform)=>{\n            if (!transform) return this.getSimplifiedGeometry(squaredTolerance);\n            const clone = this.clone();\n            clone.applyTransform(transform);\n            return clone.getSimplifiedGeometry(squaredTolerance);\n        });\n    }\n    /**\r\n   * Get a transformed and simplified version of the geometry.\r\n   * @abstract\r\n   * @param {number} squaredTolerance Squared tolerance.\r\n   * @param {import(\"../proj.js\").TransformFunction} [transform] Optional transform function.\r\n   * @return {Geometry} Simplified geometry.\r\n   */ simplifyTransformed(squaredTolerance, transform) {\n        return this.simplifyTransformedInternal(this.getRevision(), squaredTolerance, transform);\n    }\n    /**\r\n   * Make a complete copy of the geometry.\r\n   * @abstract\r\n   * @return {!Geometry} Clone.\r\n   */ clone() {\n        return (0, $6c5e11070e371322$export$817eb92a8194bab0)();\n    }\n    /**\r\n   * @abstract\r\n   * @param {number} x X.\r\n   * @param {number} y Y.\r\n   * @param {import(\"../coordinate.js\").Coordinate} closestPoint Closest point.\r\n   * @param {number} minSquaredDistance Minimum squared distance.\r\n   * @return {number} Minimum squared distance.\r\n   */ closestPointXY(x, y, closestPoint, minSquaredDistance) {\n        return (0, $6c5e11070e371322$export$817eb92a8194bab0)();\n    }\n    /**\r\n   * @param {number} x X.\r\n   * @param {number} y Y.\r\n   * @return {boolean} Contains (x, y).\r\n   */ containsXY(x, y) {\n        return this.closestPointXY(x, y, $50db89a00eb954f6$var$tmpPoint, Number.MIN_VALUE) === 0;\n    }\n    /**\r\n   * Return the closest point of the geometry to the passed point as\r\n   * {@link module:ol/coordinate~Coordinate coordinate}.\r\n   * @param {import(\"../coordinate.js\").Coordinate} point Point.\r\n   * @param {import(\"../coordinate.js\").Coordinate} [closestPoint] Closest point.\r\n   * @return {import(\"../coordinate.js\").Coordinate} Closest point.\r\n   * @api\r\n   */ getClosestPoint(point, closestPoint) {\n        closestPoint = closestPoint ? closestPoint : [\n            NaN,\n            NaN\n        ];\n        this.closestPointXY(point[0], point[1], closestPoint, Infinity);\n        return closestPoint;\n    }\n    /**\r\n   * Returns true if this geometry includes the specified coordinate. If the\r\n   * coordinate is on the boundary of the geometry, returns false.\r\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\r\n   * @return {boolean} Contains coordinate.\r\n   * @api\r\n   */ intersectsCoordinate(coordinate) {\n        return this.containsXY(coordinate[0], coordinate[1]);\n    }\n    /**\r\n   * @abstract\r\n   * @param {import(\"../extent.js\").Extent} extent Extent.\r\n   * @protected\r\n   * @return {import(\"../extent.js\").Extent} extent Extent.\r\n   */ computeExtent(extent) {\n        return (0, $6c5e11070e371322$export$817eb92a8194bab0)();\n    }\n    /**\r\n   * Get the extent of the geometry.\r\n   * @param {import(\"../extent.js\").Extent} [extent] Extent.\r\n   * @return {import(\"../extent.js\").Extent} extent Extent.\r\n   * @api\r\n   */ getExtent(extent) {\n        if (this.extentRevision_ != this.getRevision()) {\n            const extent = this.computeExtent(this.extent_);\n            if (isNaN(extent[0]) || isNaN(extent[1])) (0, $6da4c8ed3074c92b$export$3e2152b047719fa1)(extent);\n            this.extentRevision_ = this.getRevision();\n        }\n        return (0, $6da4c8ed3074c92b$export$6a4fe494c558c238)(this.extent_, extent);\n    }\n    /**\r\n   * Rotate the geometry around a given coordinate. This modifies the geometry\r\n   * coordinates in place.\r\n   * @abstract\r\n   * @param {number} angle Rotation angle in radians.\r\n   * @param {import(\"../coordinate.js\").Coordinate} anchor The rotation center.\r\n   * @api\r\n   */ rotate(angle, anchor) {\n        (0, $6c5e11070e371322$export$817eb92a8194bab0)();\n    }\n    /**\r\n   * Scale the geometry (with an optional origin).  This modifies the geometry\r\n   * coordinates in place.\r\n   * @abstract\r\n   * @param {number} sx The scaling factor in the x-direction.\r\n   * @param {number} [sy] The scaling factor in the y-direction (defaults to sx).\r\n   * @param {import(\"../coordinate.js\").Coordinate} [anchor] The scale origin (defaults to the center\r\n   *     of the geometry extent).\r\n   * @api\r\n   */ scale(sx, sy, anchor) {\n        (0, $6c5e11070e371322$export$817eb92a8194bab0)();\n    }\n    /**\r\n   * Create a simplified version of this geometry.  For linestrings, this uses\r\n   * the [Douglas Peucker](https://en.wikipedia.org/wiki/Ramer-Douglas-Peucker_algorithm)\r\n   * algorithm.  For polygons, a quantization-based\r\n   * simplification is used to preserve topology.\r\n   * @param {number} tolerance The tolerance distance for simplification.\r\n   * @return {Geometry} A new, simplified version of the original geometry.\r\n   * @api\r\n   */ simplify(tolerance) {\n        return this.getSimplifiedGeometry(tolerance * tolerance);\n    }\n    /**\r\n   * Create a simplified version of this geometry using the Douglas Peucker\r\n   * algorithm.\r\n   * See https://en.wikipedia.org/wiki/Ramer-Douglas-Peucker_algorithm.\r\n   * @abstract\r\n   * @param {number} squaredTolerance Squared tolerance.\r\n   * @return {Geometry} Simplified geometry.\r\n   */ getSimplifiedGeometry(squaredTolerance) {\n        return (0, $6c5e11070e371322$export$817eb92a8194bab0)();\n    }\n    /**\r\n   * Get the type of this geometry.\r\n   * @abstract\r\n   * @return {Type} Geometry type.\r\n   */ getType() {\n        return (0, $6c5e11070e371322$export$817eb92a8194bab0)();\n    }\n    /**\r\n   * Apply a transform function to the coordinates of the geometry.\r\n   * The geometry is modified in place.\r\n   * If you do not want the geometry modified in place, first `clone()` it and\r\n   * then use this function on the clone.\r\n   * @abstract\r\n   * @param {import(\"../proj.js\").TransformFunction} transformFn Transform function.\r\n   * Called with a flat array of geometry coordinates.\r\n   */ applyTransform(transformFn) {\n        (0, $6c5e11070e371322$export$817eb92a8194bab0)();\n    }\n    /**\r\n   * Test if the geometry and the passed extent intersect.\r\n   * @abstract\r\n   * @param {import(\"../extent.js\").Extent} extent Extent.\r\n   * @return {boolean} `true` if the geometry and the extent intersect.\r\n   */ intersectsExtent(extent) {\n        return (0, $6c5e11070e371322$export$817eb92a8194bab0)();\n    }\n    /**\r\n   * Translate the geometry.  This modifies the geometry coordinates in place.  If\r\n   * instead you want a new geometry, first `clone()` this geometry.\r\n   * @abstract\r\n   * @param {number} deltaX Delta X.\r\n   * @param {number} deltaY Delta Y.\r\n   * @api\r\n   */ translate(deltaX, deltaY) {\n        (0, $6c5e11070e371322$export$817eb92a8194bab0)();\n    }\n    /**\r\n   * Transform each coordinate of the geometry from one coordinate reference\r\n   * system to another. The geometry is modified in place.\r\n   * For example, a line will be transformed to a line and a circle to a circle.\r\n   * If you do not want the geometry modified in place, first `clone()` it and\r\n   * then use this function on the clone.\r\n   *\r\n   * @param {import(\"../proj.js\").ProjectionLike} source The current projection.  Can be a\r\n   *     string identifier or a {@link module:ol/proj/Projection~Projection} object.\r\n   * @param {import(\"../proj.js\").ProjectionLike} destination The desired projection.  Can be a\r\n   *     string identifier or a {@link module:ol/proj/Projection~Projection} object.\r\n   * @return {this} This geometry.  Note that original geometry is\r\n   *     modified in place.\r\n   * @api\r\n   */ transform(source, destination) {\n        /** @type {import(\"../proj/Projection.js\").default} */ const sourceProj = (0, $9c4744460e43e41b$export$3988ae62b71be9a3)(source);\n        const transformFn = sourceProj.getUnits() == 'tile-pixels' ? function(inCoordinates, outCoordinates, stride) {\n            const pixelExtent = sourceProj.getExtent();\n            const projectedExtent = sourceProj.getWorldExtent();\n            const scale = (0, $6da4c8ed3074c92b$export$c08559766941f856)(projectedExtent) / (0, $6da4c8ed3074c92b$export$c08559766941f856)(pixelExtent);\n            (0, $e22e7611e69f42a9$export$f672e0b6f7222cd7)($50db89a00eb954f6$var$tmpTransform, projectedExtent[0], projectedExtent[3], scale, -scale, 0, 0, 0);\n            const transformed = (0, $14c6e714516e527b$export$b92b2dedcfff79de)(inCoordinates, 0, inCoordinates.length, stride, $50db89a00eb954f6$var$tmpTransform, outCoordinates);\n            const projTransform = (0, $9c4744460e43e41b$export$fce0c6cfca85ed96)(sourceProj, destination);\n            if (projTransform) return projTransform(transformed, transformed, stride);\n            return transformed;\n        } : (0, $9c4744460e43e41b$export$fce0c6cfca85ed96)(sourceProj, destination);\n        this.applyTransform(transformFn);\n        return this;\n    }\n}\nvar $50db89a00eb954f6$export$2e2bcd8739ae039 = $50db89a00eb954f6$var$Geometry;\n\n\n\n/**\r\n * @classdesc\r\n * Abstract base class; only used for creating subclasses; do not instantiate\r\n * in apps, as cannot be rendered.\r\n *\r\n * @abstract\r\n * @api\r\n */ class $c76e993e57efc8c4$var$SimpleGeometry extends (0, $50db89a00eb954f6$export$2e2bcd8739ae039) {\n    constructor(){\n        super();\n        /**\r\n     * @protected\r\n     * @type {import(\"./Geometry.js\").GeometryLayout}\r\n     */ this.layout = 'XY';\n        /**\r\n     * @protected\r\n     * @type {number}\r\n     */ this.stride = 2;\n        /**\r\n     * @protected\r\n     * @type {Array<number>}\r\n     */ this.flatCoordinates;\n    }\n    /**\r\n   * @param {import(\"../extent.js\").Extent} extent Extent.\r\n   * @protected\r\n   * @return {import(\"../extent.js\").Extent} extent Extent.\r\n   * @override\r\n   */ computeExtent(extent) {\n        return (0, $6da4c8ed3074c92b$export$be0ab0bf96ca59ca)(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride, extent);\n    }\n    /**\r\n   * @abstract\r\n   * @return {Array<*> | null} Coordinates.\r\n   */ getCoordinates() {\n        return (0, $6c5e11070e371322$export$817eb92a8194bab0)();\n    }\n    /**\r\n   * Return the first coordinate of the geometry.\r\n   * @return {import(\"../coordinate.js\").Coordinate} First coordinate.\r\n   * @api\r\n   */ getFirstCoordinate() {\n        return this.flatCoordinates.slice(0, this.stride);\n    }\n    /**\r\n   * @return {Array<number>} Flat coordinates.\r\n   */ getFlatCoordinates() {\n        return this.flatCoordinates;\n    }\n    /**\r\n   * Return the last coordinate of the geometry.\r\n   * @return {import(\"../coordinate.js\").Coordinate} Last point.\r\n   * @api\r\n   */ getLastCoordinate() {\n        return this.flatCoordinates.slice(this.flatCoordinates.length - this.stride);\n    }\n    /**\r\n   * Return the {@link import(\"./Geometry.js\").GeometryLayout layout} of the geometry.\r\n   * @return {import(\"./Geometry.js\").GeometryLayout} Layout.\r\n   * @api\r\n   */ getLayout() {\n        return this.layout;\n    }\n    /**\r\n   * Create a simplified version of this geometry using the Douglas Peucker algorithm.\r\n   * @param {number} squaredTolerance Squared tolerance.\r\n   * @return {SimpleGeometry} Simplified geometry.\r\n   * @override\r\n   */ getSimplifiedGeometry(squaredTolerance) {\n        if (this.simplifiedGeometryRevision !== this.getRevision()) {\n            this.simplifiedGeometryMaxMinSquaredTolerance = 0;\n            this.simplifiedGeometryRevision = this.getRevision();\n        }\n        // If squaredTolerance is negative or if we know that simplification will not\n        // have any effect then just return this.\n        if (squaredTolerance < 0 || this.simplifiedGeometryMaxMinSquaredTolerance !== 0 && squaredTolerance <= this.simplifiedGeometryMaxMinSquaredTolerance) return this;\n        const simplifiedGeometry = this.getSimplifiedGeometryInternal(squaredTolerance);\n        const simplifiedFlatCoordinates = simplifiedGeometry.getFlatCoordinates();\n        if (simplifiedFlatCoordinates.length < this.flatCoordinates.length) return simplifiedGeometry;\n        // Simplification did not actually remove any coordinates.  We now know\n        // that any calls to getSimplifiedGeometry with a squaredTolerance less\n        // than or equal to the current squaredTolerance will also not have any\n        // effect.  This allows us to short circuit simplification (saving CPU\n        // cycles) and prevents the cache of simplified geometries from filling\n        // up with useless identical copies of this geometry (saving memory).\n        this.simplifiedGeometryMaxMinSquaredTolerance = squaredTolerance;\n        return this;\n    }\n    /**\r\n   * @param {number} squaredTolerance Squared tolerance.\r\n   * @return {SimpleGeometry} Simplified geometry.\r\n   * @protected\r\n   */ getSimplifiedGeometryInternal(squaredTolerance) {\n        return this;\n    }\n    /**\r\n   * @return {number} Stride.\r\n   */ getStride() {\n        return this.stride;\n    }\n    /**\r\n   * @param {import(\"./Geometry.js\").GeometryLayout} layout Layout.\r\n   * @param {Array<number>} flatCoordinates Flat coordinates.\r\n   */ setFlatCoordinates(layout, flatCoordinates) {\n        this.stride = $c76e993e57efc8c4$export$6af0c1b4a8549a43(layout);\n        this.layout = layout;\n        this.flatCoordinates = flatCoordinates;\n    }\n    /**\r\n   * @abstract\r\n   * @param {!Array<*>} coordinates Coordinates.\r\n   * @param {import(\"./Geometry.js\").GeometryLayout} [layout] Layout.\r\n   */ setCoordinates(coordinates, layout) {\n        (0, $6c5e11070e371322$export$817eb92a8194bab0)();\n    }\n    /**\r\n   * @param {import(\"./Geometry.js\").GeometryLayout|undefined} layout Layout.\r\n   * @param {Array<*>} coordinates Coordinates.\r\n   * @param {number} nesting Nesting.\r\n   * @protected\r\n   */ setLayout(layout, coordinates, nesting) {\n        let stride;\n        if (layout) stride = $c76e993e57efc8c4$export$6af0c1b4a8549a43(layout);\n        else {\n            for(let i = 0; i < nesting; ++i){\n                if (coordinates.length === 0) {\n                    this.layout = 'XY';\n                    this.stride = 2;\n                    return;\n                }\n                coordinates = /** @type {Array<unknown>} */ coordinates[0];\n            }\n            stride = coordinates.length;\n            layout = $c76e993e57efc8c4$export$61bb6938093db2c8(stride);\n        }\n        this.layout = layout;\n        this.stride = stride;\n    }\n    /**\r\n   * Apply a transform function to the coordinates of the geometry.\r\n   * The geometry is modified in place.\r\n   * If you do not want the geometry modified in place, first `clone()` it and\r\n   * then use this function on the clone.\r\n   * @param {import(\"../proj.js\").TransformFunction} transformFn Transform function.\r\n   * Called with a flat array of geometry coordinates.\r\n   * @api\r\n   * @override\r\n   */ applyTransform(transformFn) {\n        if (this.flatCoordinates) {\n            transformFn(this.flatCoordinates, this.flatCoordinates, this.layout.startsWith('XYZ') ? 3 : 2, this.stride);\n            this.changed();\n        }\n    }\n    /**\r\n   * Rotate the geometry around a given coordinate. This modifies the geometry\r\n   * coordinates in place.\r\n   * @param {number} angle Rotation angle in counter-clockwise radians.\r\n   * @param {import(\"../coordinate.js\").Coordinate} anchor The rotation center.\r\n   * @api\r\n   * @override\r\n   */ rotate(angle, anchor) {\n        const flatCoordinates = this.getFlatCoordinates();\n        if (flatCoordinates) {\n            const stride = this.getStride();\n            (0, $14c6e714516e527b$export$bb628a54ab399bc9)(flatCoordinates, 0, flatCoordinates.length, stride, angle, anchor, flatCoordinates);\n            this.changed();\n        }\n    }\n    /**\r\n   * Scale the geometry (with an optional origin).  This modifies the geometry\r\n   * coordinates in place.\r\n   * @param {number} sx The scaling factor in the x-direction.\r\n   * @param {number} [sy] The scaling factor in the y-direction (defaults to sx).\r\n   * @param {import(\"../coordinate.js\").Coordinate} [anchor] The scale origin (defaults to the center\r\n   *     of the geometry extent).\r\n   * @api\r\n   * @override\r\n   */ scale(sx, sy, anchor) {\n        if (sy === undefined) sy = sx;\n        if (!anchor) anchor = (0, $6da4c8ed3074c92b$export$c91255cadecfe081)(this.getExtent());\n        const flatCoordinates = this.getFlatCoordinates();\n        if (flatCoordinates) {\n            const stride = this.getStride();\n            (0, $14c6e714516e527b$export$dcdf75081b88279d)(flatCoordinates, 0, flatCoordinates.length, stride, sx, sy, anchor, flatCoordinates);\n            this.changed();\n        }\n    }\n    /**\r\n   * Translate the geometry.  This modifies the geometry coordinates in place.  If\r\n   * instead you want a new geometry, first `clone()` this geometry.\r\n   * @param {number} deltaX Delta X.\r\n   * @param {number} deltaY Delta Y.\r\n   * @api\r\n   * @override\r\n   */ translate(deltaX, deltaY) {\n        const flatCoordinates = this.getFlatCoordinates();\n        if (flatCoordinates) {\n            const stride = this.getStride();\n            (0, $14c6e714516e527b$export$d73ee8ef04f5226a)(flatCoordinates, 0, flatCoordinates.length, stride, deltaX, deltaY, flatCoordinates);\n            this.changed();\n        }\n    }\n}\nfunction $c76e993e57efc8c4$export$61bb6938093db2c8(stride) {\n    let layout;\n    if (stride == 2) layout = 'XY';\n    else if (stride == 3) layout = 'XYZ';\n    else if (stride == 4) layout = 'XYZM';\n    return /** @type {import(\"./Geometry.js\").GeometryLayout} */ layout;\n}\nfunction $c76e993e57efc8c4$export$6af0c1b4a8549a43(layout) {\n    let stride;\n    if (layout == 'XY') stride = 2;\n    else if (layout == 'XYZ' || layout == 'XYM') stride = 3;\n    else if (layout == 'XYZM') stride = 4;\n    return /** @type {number} */ stride;\n}\nfunction $c76e993e57efc8c4$export$a3767472617c7861(simpleGeometry, transform, dest) {\n    const flatCoordinates = simpleGeometry.getFlatCoordinates();\n    if (!flatCoordinates) return null;\n    const stride = simpleGeometry.getStride();\n    return (0, $14c6e714516e527b$export$b92b2dedcfff79de)(flatCoordinates, 0, flatCoordinates.length, stride, transform, dest);\n}\nvar $c76e993e57efc8c4$export$2e2bcd8739ae039 = $c76e993e57efc8c4$var$SimpleGeometry;\n\n\n/**\r\n * @module ol/geom/flat/area\r\n */ /**\r\n * @param {Array<number>} flatCoordinates Flat coordinates.\r\n * @param {number} offset Offset.\r\n * @param {number} end End.\r\n * @param {number} stride Stride.\r\n * @return {number} Area.\r\n */ function $01ff26a2f986a1d0$export$3c5e1905f889266e(flatCoordinates, offset, end, stride) {\n    let twiceArea = 0;\n    const x0 = flatCoordinates[end - stride];\n    const y0 = flatCoordinates[end - stride + 1];\n    let dx1 = 0;\n    let dy1 = 0;\n    for(; offset < end; offset += stride){\n        const dx2 = flatCoordinates[offset] - x0;\n        const dy2 = flatCoordinates[offset + 1] - y0;\n        twiceArea += dy1 * dx2 - dx1 * dy2;\n        dx1 = dx2;\n        dy1 = dy2;\n    }\n    return twiceArea / 2;\n}\nfunction $01ff26a2f986a1d0$export$7a8ee541dfdf2ed5(flatCoordinates, offset, ends, stride) {\n    let area = 0;\n    for(let i = 0, ii = ends.length; i < ii; ++i){\n        const end = ends[i];\n        area += $01ff26a2f986a1d0$export$3c5e1905f889266e(flatCoordinates, offset, end, stride);\n        offset = end;\n    }\n    return area;\n}\nfunction $01ff26a2f986a1d0$export$78e139679ca7205(flatCoordinates, offset, endss, stride) {\n    let area = 0;\n    for(let i = 0, ii = endss.length; i < ii; ++i){\n        const ends = endss[i];\n        area += $01ff26a2f986a1d0$export$7a8ee541dfdf2ed5(flatCoordinates, offset, ends, stride);\n        offset = ends[ends.length - 1];\n    }\n    return area;\n}\n\n\n/**\r\n * @module ol/geom/flat/closest\r\n */ \n/**\r\n * Returns the point on the 2D line segment flatCoordinates[offset1] to\r\n * flatCoordinates[offset2] that is closest to the point (x, y).  Extra\r\n * dimensions are linearly interpolated.\r\n * @param {Array<number>} flatCoordinates Flat coordinates.\r\n * @param {number} offset1 Offset 1.\r\n * @param {number} offset2 Offset 2.\r\n * @param {number} stride Stride.\r\n * @param {number} x X.\r\n * @param {number} y Y.\r\n * @param {Array<number>} closestPoint Closest point.\r\n */ function $bf5604c1b8258b71$var$assignClosest(flatCoordinates, offset1, offset2, stride, x, y, closestPoint) {\n    const x1 = flatCoordinates[offset1];\n    const y1 = flatCoordinates[offset1 + 1];\n    const dx = flatCoordinates[offset2] - x1;\n    const dy = flatCoordinates[offset2 + 1] - y1;\n    let offset;\n    if (dx === 0 && dy === 0) offset = offset1;\n    else {\n        const t = ((x - x1) * dx + (y - y1) * dy) / (dx * dx + dy * dy);\n        if (t > 1) offset = offset2;\n        else if (t > 0) {\n            for(let i = 0; i < stride; ++i)closestPoint[i] = (0, $6b000a049d919fe5$export$3a89f8d6f6bf6c9f)(flatCoordinates[offset1 + i], flatCoordinates[offset2 + i], t);\n            closestPoint.length = stride;\n            return;\n        } else offset = offset1;\n    }\n    for(let i = 0; i < stride; ++i)closestPoint[i] = flatCoordinates[offset + i];\n    closestPoint.length = stride;\n}\nfunction $bf5604c1b8258b71$export$bc2eb611ddf80103(flatCoordinates, offset, end, stride, max) {\n    let x1 = flatCoordinates[offset];\n    let y1 = flatCoordinates[offset + 1];\n    for(offset += stride; offset < end; offset += stride){\n        const x2 = flatCoordinates[offset];\n        const y2 = flatCoordinates[offset + 1];\n        const squaredDelta = (0, $6b000a049d919fe5$export$88e6ebb4fe54f538)(x1, y1, x2, y2);\n        if (squaredDelta > max) max = squaredDelta;\n        x1 = x2;\n        y1 = y2;\n    }\n    return max;\n}\nfunction $bf5604c1b8258b71$export$fbf31c8f2668ed5a(flatCoordinates, offset, ends, stride, max) {\n    for(let i = 0, ii = ends.length; i < ii; ++i){\n        const end = ends[i];\n        max = $bf5604c1b8258b71$export$bc2eb611ddf80103(flatCoordinates, offset, end, stride, max);\n        offset = end;\n    }\n    return max;\n}\nfunction $bf5604c1b8258b71$export$37c18e6e7d50501a(flatCoordinates, offset, endss, stride, max) {\n    for(let i = 0, ii = endss.length; i < ii; ++i){\n        const ends = endss[i];\n        max = $bf5604c1b8258b71$export$fbf31c8f2668ed5a(flatCoordinates, offset, ends, stride, max);\n        offset = ends[ends.length - 1];\n    }\n    return max;\n}\nfunction $bf5604c1b8258b71$export$4adc8e5135fb44c(flatCoordinates, offset, end, stride, maxDelta, isRing, x, y, closestPoint, minSquaredDistance, tmpPoint) {\n    if (offset == end) return minSquaredDistance;\n    let i, squaredDistance;\n    if (maxDelta === 0) {\n        // All points are identical, so just test the first point.\n        squaredDistance = (0, $6b000a049d919fe5$export$88e6ebb4fe54f538)(x, y, flatCoordinates[offset], flatCoordinates[offset + 1]);\n        if (squaredDistance < minSquaredDistance) {\n            for(i = 0; i < stride; ++i)closestPoint[i] = flatCoordinates[offset + i];\n            closestPoint.length = stride;\n            return squaredDistance;\n        }\n        return minSquaredDistance;\n    }\n    tmpPoint = tmpPoint ? tmpPoint : [\n        NaN,\n        NaN\n    ];\n    let index = offset + stride;\n    while(index < end){\n        $bf5604c1b8258b71$var$assignClosest(flatCoordinates, index - stride, index, stride, x, y, tmpPoint);\n        squaredDistance = (0, $6b000a049d919fe5$export$88e6ebb4fe54f538)(x, y, tmpPoint[0], tmpPoint[1]);\n        if (squaredDistance < minSquaredDistance) {\n            minSquaredDistance = squaredDistance;\n            for(i = 0; i < stride; ++i)closestPoint[i] = tmpPoint[i];\n            closestPoint.length = stride;\n            index += stride;\n        } else // Skip ahead multiple points, because we know that all the skipped\n        // points cannot be any closer than the closest point we have found so\n        // far.  We know this because we know how close the current point is, how\n        // close the closest point we have found so far is, and the maximum\n        // distance between consecutive points.  For example, if we're currently\n        // at distance 10, the best we've found so far is 3, and that the maximum\n        // distance between consecutive points is 2, then we'll need to skip at\n        // least (10 - 3) / 2 == 3 (rounded down) points to have any chance of\n        // finding a closer point.  We use Math.max(..., 1) to ensure that we\n        // always advance at least one point, to avoid an infinite loop.\n        index += stride * Math.max((Math.sqrt(squaredDistance) - Math.sqrt(minSquaredDistance)) / maxDelta | 0, 1);\n    }\n    if (isRing) {\n        // Check the closing segment.\n        $bf5604c1b8258b71$var$assignClosest(flatCoordinates, end - stride, offset, stride, x, y, tmpPoint);\n        squaredDistance = (0, $6b000a049d919fe5$export$88e6ebb4fe54f538)(x, y, tmpPoint[0], tmpPoint[1]);\n        if (squaredDistance < minSquaredDistance) {\n            minSquaredDistance = squaredDistance;\n            for(i = 0; i < stride; ++i)closestPoint[i] = tmpPoint[i];\n            closestPoint.length = stride;\n        }\n    }\n    return minSquaredDistance;\n}\nfunction $bf5604c1b8258b71$export$5a48a0eefcf14992(flatCoordinates, offset, ends, stride, maxDelta, isRing, x, y, closestPoint, minSquaredDistance, tmpPoint) {\n    tmpPoint = tmpPoint ? tmpPoint : [\n        NaN,\n        NaN\n    ];\n    for(let i = 0, ii = ends.length; i < ii; ++i){\n        const end = ends[i];\n        minSquaredDistance = $bf5604c1b8258b71$export$4adc8e5135fb44c(flatCoordinates, offset, end, stride, maxDelta, isRing, x, y, closestPoint, minSquaredDistance, tmpPoint);\n        offset = end;\n    }\n    return minSquaredDistance;\n}\nfunction $bf5604c1b8258b71$export$60e067685eb8f9c4(flatCoordinates, offset, endss, stride, maxDelta, isRing, x, y, closestPoint, minSquaredDistance, tmpPoint) {\n    tmpPoint = tmpPoint ? tmpPoint : [\n        NaN,\n        NaN\n    ];\n    for(let i = 0, ii = endss.length; i < ii; ++i){\n        const ends = endss[i];\n        minSquaredDistance = $bf5604c1b8258b71$export$5a48a0eefcf14992(flatCoordinates, offset, ends, stride, maxDelta, isRing, x, y, closestPoint, minSquaredDistance, tmpPoint);\n        offset = ends[ends.length - 1];\n    }\n    return minSquaredDistance;\n}\n\n\n/**\r\n * @module ol/geom/flat/deflate\r\n */ /**\r\n * @param {Array<number>} flatCoordinates Flat coordinates.\r\n * @param {number} offset Offset.\r\n * @param {import(\"../../coordinate.js\").Coordinate} coordinate Coordinate.\r\n * @param {number} stride Stride.\r\n * @return {number} offset Offset.\r\n */ function $6b086aa46281540d$export$60815ead40ec79ab(flatCoordinates, offset, coordinate, stride) {\n    for(let i = 0, ii = coordinate.length; i < ii; ++i)flatCoordinates[offset++] = coordinate[i];\n    return offset;\n}\nfunction $6b086aa46281540d$export$5c4daf67e03c190f(flatCoordinates, offset, coordinates, stride) {\n    for(let i = 0, ii = coordinates.length; i < ii; ++i){\n        const coordinate = coordinates[i];\n        for(let j = 0; j < stride; ++j)flatCoordinates[offset++] = coordinate[j];\n    }\n    return offset;\n}\nfunction $6b086aa46281540d$export$47c3746a74384d45(flatCoordinates, offset, coordinatess, stride, ends) {\n    ends = ends ? ends : [];\n    let i = 0;\n    for(let j = 0, jj = coordinatess.length; j < jj; ++j){\n        const end = $6b086aa46281540d$export$5c4daf67e03c190f(flatCoordinates, offset, coordinatess[j], stride);\n        ends[i++] = end;\n        offset = end;\n    }\n    ends.length = i;\n    return ends;\n}\nfunction $6b086aa46281540d$export$f9f2bb59da4accd3(flatCoordinates, offset, coordinatesss, stride, endss) {\n    endss = endss ? endss : [];\n    let i = 0;\n    for(let j = 0, jj = coordinatesss.length; j < jj; ++j){\n        const ends = $6b086aa46281540d$export$47c3746a74384d45(flatCoordinates, offset, coordinatesss[j], stride, endss[i]);\n        if (ends.length === 0) ends[0] = offset;\n        endss[i++] = ends;\n        offset = ends[ends.length - 1];\n    }\n    endss.length = i;\n    return endss;\n}\n\n\n/**\r\n * @module ol/geom/flat/inflate\r\n */ /**\r\n * @param {Array<number>} flatCoordinates Flat coordinates.\r\n * @param {number} offset Offset.\r\n * @param {number} end End.\r\n * @param {number} stride Stride.\r\n * @param {Array<import(\"../../coordinate.js\").Coordinate>} [coordinates] Coordinates.\r\n * @return {Array<import(\"../../coordinate.js\").Coordinate>} Coordinates.\r\n */ function $5454470599558ddd$export$9c0934e4e9c3f61e(flatCoordinates, offset, end, stride, coordinates) {\n    coordinates = coordinates !== undefined ? coordinates : [];\n    let i = 0;\n    for(let j = offset; j < end; j += stride)coordinates[i++] = flatCoordinates.slice(j, j + stride);\n    coordinates.length = i;\n    return coordinates;\n}\nfunction $5454470599558ddd$export$cbb9596fc0f40db2(flatCoordinates, offset, ends, stride, coordinatess) {\n    coordinatess = coordinatess !== undefined ? coordinatess : [];\n    let i = 0;\n    for(let j = 0, jj = ends.length; j < jj; ++j){\n        const end = ends[j];\n        coordinatess[i++] = $5454470599558ddd$export$9c0934e4e9c3f61e(flatCoordinates, offset, end, stride, coordinatess[i]);\n        offset = end;\n    }\n    coordinatess.length = i;\n    return coordinatess;\n}\nfunction $5454470599558ddd$export$915c7058aeb4dfeb(flatCoordinates, offset, endss, stride, coordinatesss) {\n    coordinatesss = coordinatesss !== undefined ? coordinatesss : [];\n    let i = 0;\n    for(let j = 0, jj = endss.length; j < jj; ++j){\n        const ends = endss[j];\n        coordinatesss[i++] = ends.length === 1 && ends[0] === offset ? [] : $5454470599558ddd$export$cbb9596fc0f40db2(flatCoordinates, offset, ends, stride, coordinatesss[i]);\n        offset = ends[ends.length - 1];\n    }\n    coordinatesss.length = i;\n    return coordinatesss;\n}\n\n\n/**\r\n * @module ol/geom/flat/simplify\r\n */ // Based on simplify-js https://github.com/mourner/simplify-js\n// Copyright (c) 2012, Vladimir Agafonkin\n// All rights reserved.\n//\n// Redistribution and use in source and binary forms, with or without\n// modification, are permitted provided that the following conditions are met:\n//\n//    1. Redistributions of source code must retain the above copyright notice,\n//       this list of conditions and the following disclaimer.\n//\n//    2. Redistributions in binary form must reproduce the above copyright\n//       notice, this list of conditions and the following disclaimer in the\n//       documentation and/or other materials provided with the distribution.\n//\n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n// ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\n// LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n// CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n// SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n// CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n// POSSIBILITY OF SUCH DAMAGE.\n\nfunction $8780aae6970f5f65$export$2cbbcce9030b8734(flatCoordinates, offset, end, stride, squaredTolerance, highQuality, simplifiedFlatCoordinates) {\n    simplifiedFlatCoordinates = simplifiedFlatCoordinates !== undefined ? simplifiedFlatCoordinates : [];\n    if (!highQuality) {\n        end = $8780aae6970f5f65$export$46dba205a0107e9e(flatCoordinates, offset, end, stride, squaredTolerance, simplifiedFlatCoordinates, 0);\n        flatCoordinates = simplifiedFlatCoordinates;\n        offset = 0;\n        stride = 2;\n    }\n    simplifiedFlatCoordinates.length = $8780aae6970f5f65$export$ef693d1572e64fb8(flatCoordinates, offset, end, stride, squaredTolerance, simplifiedFlatCoordinates, 0);\n    return simplifiedFlatCoordinates;\n}\nfunction $8780aae6970f5f65$export$ef693d1572e64fb8(flatCoordinates, offset, end, stride, squaredTolerance, simplifiedFlatCoordinates, simplifiedOffset) {\n    const n = (end - offset) / stride;\n    if (n < 3) {\n        for(; offset < end; offset += stride){\n            simplifiedFlatCoordinates[simplifiedOffset++] = flatCoordinates[offset];\n            simplifiedFlatCoordinates[simplifiedOffset++] = flatCoordinates[offset + 1];\n        }\n        return simplifiedOffset;\n    }\n    /** @type {Array<number>} */ const markers = new Array(n);\n    markers[0] = 1;\n    markers[n - 1] = 1;\n    /** @type {Array<number>} */ const stack = [\n        offset,\n        end - stride\n    ];\n    let index = 0;\n    while(stack.length > 0){\n        const last = stack.pop();\n        const first = stack.pop();\n        let maxSquaredDistance = 0;\n        const x1 = flatCoordinates[first];\n        const y1 = flatCoordinates[first + 1];\n        const x2 = flatCoordinates[last];\n        const y2 = flatCoordinates[last + 1];\n        for(let i = first + stride; i < last; i += stride){\n            const x = flatCoordinates[i];\n            const y = flatCoordinates[i + 1];\n            const squaredDistance = (0, $6b000a049d919fe5$export$251bb0a9cef172e6)(x, y, x1, y1, x2, y2);\n            if (squaredDistance > maxSquaredDistance) {\n                index = i;\n                maxSquaredDistance = squaredDistance;\n            }\n        }\n        if (maxSquaredDistance > squaredTolerance) {\n            markers[(index - offset) / stride] = 1;\n            if (first + stride < index) stack.push(first, index);\n            if (index + stride < last) stack.push(index, last);\n        }\n    }\n    for(let i = 0; i < n; ++i)if (markers[i]) {\n        simplifiedFlatCoordinates[simplifiedOffset++] = flatCoordinates[offset + i * stride];\n        simplifiedFlatCoordinates[simplifiedOffset++] = flatCoordinates[offset + i * stride + 1];\n    }\n    return simplifiedOffset;\n}\nfunction $8780aae6970f5f65$export$cedb9900c0b225c2(flatCoordinates, offset, ends, stride, squaredTolerance, simplifiedFlatCoordinates, simplifiedOffset, simplifiedEnds) {\n    for(let i = 0, ii = ends.length; i < ii; ++i){\n        const end = ends[i];\n        simplifiedOffset = $8780aae6970f5f65$export$ef693d1572e64fb8(flatCoordinates, offset, end, stride, squaredTolerance, simplifiedFlatCoordinates, simplifiedOffset);\n        simplifiedEnds.push(simplifiedOffset);\n        offset = end;\n    }\n    return simplifiedOffset;\n}\nfunction $8780aae6970f5f65$export$5d74fb54bb752ea0(flatCoordinates, offset, endss, stride, squaredTolerance, simplifiedFlatCoordinates, simplifiedOffset, simplifiedEndss) {\n    for(let i = 0, ii = endss.length; i < ii; ++i){\n        const ends = endss[i];\n        /** @type {Array<number>} */ const simplifiedEnds = [];\n        simplifiedOffset = $8780aae6970f5f65$export$cedb9900c0b225c2(flatCoordinates, offset, ends, stride, squaredTolerance, simplifiedFlatCoordinates, simplifiedOffset, simplifiedEnds);\n        simplifiedEndss.push(simplifiedEnds);\n        offset = ends[ends.length - 1];\n    }\n    return simplifiedOffset;\n}\nfunction $8780aae6970f5f65$export$46dba205a0107e9e(flatCoordinates, offset, end, stride, squaredTolerance, simplifiedFlatCoordinates, simplifiedOffset) {\n    if (end <= offset + stride) {\n        // zero or one point, no simplification possible, so copy and return\n        for(; offset < end; offset += stride){\n            simplifiedFlatCoordinates[simplifiedOffset++] = flatCoordinates[offset];\n            simplifiedFlatCoordinates[simplifiedOffset++] = flatCoordinates[offset + 1];\n        }\n        return simplifiedOffset;\n    }\n    let x1 = flatCoordinates[offset];\n    let y1 = flatCoordinates[offset + 1];\n    // copy first point\n    simplifiedFlatCoordinates[simplifiedOffset++] = x1;\n    simplifiedFlatCoordinates[simplifiedOffset++] = y1;\n    let x2 = x1;\n    let y2 = y1;\n    for(offset += stride; offset < end; offset += stride){\n        x2 = flatCoordinates[offset];\n        y2 = flatCoordinates[offset + 1];\n        if ((0, $6b000a049d919fe5$export$88e6ebb4fe54f538)(x1, y1, x2, y2) > squaredTolerance) {\n            // copy point at offset\n            simplifiedFlatCoordinates[simplifiedOffset++] = x2;\n            simplifiedFlatCoordinates[simplifiedOffset++] = y2;\n            x1 = x2;\n            y1 = y2;\n        }\n    }\n    if (x2 != x1 || y2 != y1) {\n        // copy last point\n        simplifiedFlatCoordinates[simplifiedOffset++] = x2;\n        simplifiedFlatCoordinates[simplifiedOffset++] = y2;\n    }\n    return simplifiedOffset;\n}\nfunction $8780aae6970f5f65$export$51a0620f7a28532b(value, tolerance) {\n    return tolerance * Math.round(value / tolerance);\n}\nfunction $8780aae6970f5f65$export$b84e8d2c4920a0c6(flatCoordinates, offset, end, stride, tolerance, simplifiedFlatCoordinates, simplifiedOffset) {\n    // do nothing if the line is empty\n    if (offset == end) return simplifiedOffset;\n    // snap the first coordinate (P1)\n    let x1 = $8780aae6970f5f65$export$51a0620f7a28532b(flatCoordinates[offset], tolerance);\n    let y1 = $8780aae6970f5f65$export$51a0620f7a28532b(flatCoordinates[offset + 1], tolerance);\n    offset += stride;\n    // add the first coordinate to the output\n    simplifiedFlatCoordinates[simplifiedOffset++] = x1;\n    simplifiedFlatCoordinates[simplifiedOffset++] = y1;\n    // find the next coordinate that does not snap to the same value as the first\n    // coordinate (P2)\n    let x2, y2;\n    do {\n        x2 = $8780aae6970f5f65$export$51a0620f7a28532b(flatCoordinates[offset], tolerance);\n        y2 = $8780aae6970f5f65$export$51a0620f7a28532b(flatCoordinates[offset + 1], tolerance);\n        offset += stride;\n        if (offset == end) {\n            // all coordinates snap to the same value, the line collapses to a point\n            // push the last snapped value anyway to ensure that the output contains\n            // at least two points\n            // FIXME should we really return at least two points anyway?\n            simplifiedFlatCoordinates[simplifiedOffset++] = x2;\n            simplifiedFlatCoordinates[simplifiedOffset++] = y2;\n            return simplifiedOffset;\n        }\n    }while (x2 == x1 && y2 == y1);\n    while(offset < end){\n        // snap the next coordinate (P3)\n        const x3 = $8780aae6970f5f65$export$51a0620f7a28532b(flatCoordinates[offset], tolerance);\n        const y3 = $8780aae6970f5f65$export$51a0620f7a28532b(flatCoordinates[offset + 1], tolerance);\n        offset += stride;\n        // skip P3 if it is equal to P2\n        if (x3 == x2 && y3 == y2) continue;\n        // calculate the delta between P1 and P2\n        const dx1 = x2 - x1;\n        const dy1 = y2 - y1;\n        // calculate the delta between P3 and P1\n        const dx2 = x3 - x1;\n        const dy2 = y3 - y1;\n        // if P1, P2, and P3 are colinear and P3 is further from P1 than P2 is from\n        // P1 in the same direction then P2 is on the straight line between P1 and\n        // P3\n        if (dx1 * dy2 == dy1 * dx2 && (dx1 < 0 && dx2 < dx1 || dx1 == dx2 || dx1 > 0 && dx2 > dx1) && (dy1 < 0 && dy2 < dy1 || dy1 == dy2 || dy1 > 0 && dy2 > dy1)) {\n            // discard P2 and set P2 = P3\n            x2 = x3;\n            y2 = y3;\n            continue;\n        }\n        // either P1, P2, and P3 are not colinear, or they are colinear but P3 is\n        // between P3 and P1 or on the opposite half of the line to P2.  add P2,\n        // and continue with P1 = P2 and P2 = P3\n        simplifiedFlatCoordinates[simplifiedOffset++] = x2;\n        simplifiedFlatCoordinates[simplifiedOffset++] = y2;\n        x1 = x2;\n        y1 = y2;\n        x2 = x3;\n        y2 = y3;\n    }\n    // add the last point (P2)\n    simplifiedFlatCoordinates[simplifiedOffset++] = x2;\n    simplifiedFlatCoordinates[simplifiedOffset++] = y2;\n    return simplifiedOffset;\n}\nfunction $8780aae6970f5f65$export$60a9904b67f8d51b(flatCoordinates, offset, ends, stride, tolerance, simplifiedFlatCoordinates, simplifiedOffset, simplifiedEnds) {\n    for(let i = 0, ii = ends.length; i < ii; ++i){\n        const end = ends[i];\n        simplifiedOffset = $8780aae6970f5f65$export$b84e8d2c4920a0c6(flatCoordinates, offset, end, stride, tolerance, simplifiedFlatCoordinates, simplifiedOffset);\n        simplifiedEnds.push(simplifiedOffset);\n        offset = end;\n    }\n    return simplifiedOffset;\n}\nfunction $8780aae6970f5f65$export$b9acf67ef05cd17c(flatCoordinates, offset, endss, stride, tolerance, simplifiedFlatCoordinates, simplifiedOffset, simplifiedEndss) {\n    for(let i = 0, ii = endss.length; i < ii; ++i){\n        const ends = endss[i];\n        /** @type {Array<number>} */ const simplifiedEnds = [];\n        simplifiedOffset = $8780aae6970f5f65$export$60a9904b67f8d51b(flatCoordinates, offset, ends, stride, tolerance, simplifiedFlatCoordinates, simplifiedOffset, simplifiedEnds);\n        simplifiedEndss.push(simplifiedEnds);\n        offset = ends[ends.length - 1];\n    }\n    return simplifiedOffset;\n}\n\n\n/**\r\n * @classdesc\r\n * Linear ring geometry. Only used as part of polygon; cannot be rendered\r\n * on its own.\r\n *\r\n * @api\r\n */ class $548636579b4087f2$var$LinearRing extends (0, $c76e993e57efc8c4$export$2e2bcd8739ae039) {\n    /**\r\n   * @param {Array<import(\"../coordinate.js\").Coordinate>|Array<number>} coordinates Coordinates.\r\n   *     For internal use, flat coordinates in combination with `layout` are also accepted.\r\n   * @param {import(\"./Geometry.js\").GeometryLayout} [layout] Layout.\r\n   */ constructor(coordinates, layout){\n        super();\n        /**\r\n     * @private\r\n     * @type {number}\r\n     */ this.maxDelta_ = -1;\n        /**\r\n     * @private\r\n     * @type {number}\r\n     */ this.maxDeltaRevision_ = -1;\n        if (layout !== undefined && !Array.isArray(coordinates[0])) this.setFlatCoordinates(layout, /** @type {Array<number>} */ coordinates);\n        else this.setCoordinates(/** @type {Array<import(\"../coordinate.js\").Coordinate>} */ coordinates, layout);\n    }\n    /**\r\n   * Make a complete copy of the geometry.\r\n   * @return {!LinearRing} Clone.\r\n   * @api\r\n   * @override\r\n   */ clone() {\n        return new $548636579b4087f2$var$LinearRing(this.flatCoordinates.slice(), this.layout);\n    }\n    /**\r\n   * @param {number} x X.\r\n   * @param {number} y Y.\r\n   * @param {import(\"../coordinate.js\").Coordinate} closestPoint Closest point.\r\n   * @param {number} minSquaredDistance Minimum squared distance.\r\n   * @return {number} Minimum squared distance.\r\n   * @override\r\n   */ closestPointXY(x, y, closestPoint, minSquaredDistance) {\n        if (minSquaredDistance < (0, $6da4c8ed3074c92b$export$cbe64c389534206f)(this.getExtent(), x, y)) return minSquaredDistance;\n        if (this.maxDeltaRevision_ != this.getRevision()) {\n            this.maxDelta_ = Math.sqrt((0, $bf5604c1b8258b71$export$bc2eb611ddf80103)(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride, 0));\n            this.maxDeltaRevision_ = this.getRevision();\n        }\n        return (0, $bf5604c1b8258b71$export$4adc8e5135fb44c)(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride, this.maxDelta_, true, x, y, closestPoint, minSquaredDistance);\n    }\n    /**\r\n   * Return the area of the linear ring on projected plane.\r\n   * @return {number} Area (on projected plane).\r\n   * @api\r\n   */ getArea() {\n        return (0, $01ff26a2f986a1d0$export$3c5e1905f889266e)(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride);\n    }\n    /**\r\n   * Return the coordinates of the linear ring.\r\n   * @return {Array<import(\"../coordinate.js\").Coordinate>} Coordinates.\r\n   * @api\r\n   * @override\r\n   */ getCoordinates() {\n        return (0, $5454470599558ddd$export$9c0934e4e9c3f61e)(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride);\n    }\n    /**\r\n   * @param {number} squaredTolerance Squared tolerance.\r\n   * @return {LinearRing} Simplified LinearRing.\r\n   * @protected\r\n   * @override\r\n   */ getSimplifiedGeometryInternal(squaredTolerance) {\n        /** @type {Array<number>} */ const simplifiedFlatCoordinates = [];\n        simplifiedFlatCoordinates.length = (0, $8780aae6970f5f65$export$ef693d1572e64fb8)(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride, squaredTolerance, simplifiedFlatCoordinates, 0);\n        return new $548636579b4087f2$var$LinearRing(simplifiedFlatCoordinates, 'XY');\n    }\n    /**\r\n   * Get the type of this geometry.\r\n   * @return {import(\"./Geometry.js\").Type} Geometry type.\r\n   * @api\r\n   * @override\r\n   */ getType() {\n        return 'LinearRing';\n    }\n    /**\r\n   * Test if the geometry and the passed extent intersect.\r\n   * @param {import(\"../extent.js\").Extent} extent Extent.\r\n   * @return {boolean} `true` if the geometry and the extent intersect.\r\n   * @api\r\n   * @override\r\n   */ intersectsExtent(extent) {\n        return false;\n    }\n    /**\r\n   * Set the coordinates of the linear ring.\r\n   * @param {!Array<import(\"../coordinate.js\").Coordinate>} coordinates Coordinates.\r\n   * @param {import(\"./Geometry.js\").GeometryLayout} [layout] Layout.\r\n   * @api\r\n   * @override\r\n   */ setCoordinates(coordinates, layout) {\n        this.setLayout(layout, coordinates, 1);\n        if (!this.flatCoordinates) this.flatCoordinates = [];\n        this.flatCoordinates.length = (0, $6b086aa46281540d$export$5c4daf67e03c190f)(this.flatCoordinates, 0, coordinates, this.stride);\n        this.changed();\n    }\n}\nvar $548636579b4087f2$export$2e2bcd8739ae039 = $548636579b4087f2$var$LinearRing;\n\n\n/**\r\n * @module ol/geom/Point\r\n */ \n\n\n\n/**\r\n * @classdesc\r\n * Point geometry.\r\n *\r\n * @api\r\n */ class $6eced4c969949f6b$var$Point extends (0, $c76e993e57efc8c4$export$2e2bcd8739ae039) {\n    /**\r\n   * @param {import(\"../coordinate.js\").Coordinate} coordinates Coordinates.\r\n   * @param {import(\"./Geometry.js\").GeometryLayout} [layout] Layout.\r\n   */ constructor(coordinates, layout){\n        super();\n        this.setCoordinates(coordinates, layout);\n    }\n    /**\r\n   * Make a complete copy of the geometry.\r\n   * @return {!Point} Clone.\r\n   * @api\r\n   * @override\r\n   */ clone() {\n        const point = new $6eced4c969949f6b$var$Point(this.flatCoordinates.slice(), this.layout);\n        point.applyProperties(this);\n        return point;\n    }\n    /**\r\n   * @param {number} x X.\r\n   * @param {number} y Y.\r\n   * @param {import(\"../coordinate.js\").Coordinate} closestPoint Closest point.\r\n   * @param {number} minSquaredDistance Minimum squared distance.\r\n   * @return {number} Minimum squared distance.\r\n   * @override\r\n   */ closestPointXY(x, y, closestPoint, minSquaredDistance) {\n        const flatCoordinates = this.flatCoordinates;\n        const squaredDistance = (0, $6b000a049d919fe5$export$88e6ebb4fe54f538)(x, y, flatCoordinates[0], flatCoordinates[1]);\n        if (squaredDistance < minSquaredDistance) {\n            const stride = this.stride;\n            for(let i = 0; i < stride; ++i)closestPoint[i] = flatCoordinates[i];\n            closestPoint.length = stride;\n            return squaredDistance;\n        }\n        return minSquaredDistance;\n    }\n    /**\r\n   * Return the coordinate of the point.\r\n   * @return {import(\"../coordinate.js\").Coordinate} Coordinates.\r\n   * @api\r\n   * @override\r\n   */ getCoordinates() {\n        return this.flatCoordinates.slice();\n    }\n    /**\r\n   * @param {import(\"../extent.js\").Extent} extent Extent.\r\n   * @protected\r\n   * @return {import(\"../extent.js\").Extent} extent Extent.\r\n   * @override\r\n   */ computeExtent(extent) {\n        return (0, $6da4c8ed3074c92b$export$4838bf78d04a9440)(this.flatCoordinates, extent);\n    }\n    /**\r\n   * Get the type of this geometry.\r\n   * @return {import(\"./Geometry.js\").Type} Geometry type.\r\n   * @api\r\n   * @override\r\n   */ getType() {\n        return 'Point';\n    }\n    /**\r\n   * Test if the geometry and the passed extent intersect.\r\n   * @param {import(\"../extent.js\").Extent} extent Extent.\r\n   * @return {boolean} `true` if the geometry and the extent intersect.\r\n   * @api\r\n   * @override\r\n   */ intersectsExtent(extent) {\n        return (0, $6da4c8ed3074c92b$export$805bdfd6d6690e97)(extent, this.flatCoordinates[0], this.flatCoordinates[1]);\n    }\n    /**\r\n   * @param {!Array<*>} coordinates Coordinates.\r\n   * @param {import(\"./Geometry.js\").GeometryLayout} [layout] Layout.\r\n   * @api\r\n   * @override\r\n   */ setCoordinates(coordinates, layout) {\n        this.setLayout(layout, coordinates, 0);\n        if (!this.flatCoordinates) this.flatCoordinates = [];\n        this.flatCoordinates.length = (0, $6b086aa46281540d$export$60815ead40ec79ab)(this.flatCoordinates, 0, coordinates, this.stride);\n        this.changed();\n    }\n}\nvar $6eced4c969949f6b$export$2e2bcd8739ae039 = $6eced4c969949f6b$var$Point;\n\n\n\n\n\n/**\r\n * @module ol/geom/flat/contains\r\n */ \nfunction $239aa88e7a573859$export$cedabedc7ac0e138(flatCoordinates, offset, end, stride, extent) {\n    const outside = (0, $6da4c8ed3074c92b$export$f9ed8a3d123a08e2)(extent, /**\r\n     * @param {import(\"../../coordinate.js\").Coordinate} coordinate Coordinate.\r\n     * @return {boolean} Contains (x, y).\r\n     */ function(coordinate) {\n        return !$239aa88e7a573859$export$949a7a3a4b6f34fa(flatCoordinates, offset, end, stride, coordinate[0], coordinate[1]);\n    });\n    return !outside;\n}\nfunction $239aa88e7a573859$export$949a7a3a4b6f34fa(flatCoordinates, offset, end, stride, x, y) {\n    // https://geomalgorithms.com/a03-_inclusion.html\n    // Copyright 2000 softSurfer, 2012 Dan Sunday\n    // This code may be freely used and modified for any purpose\n    // providing that this copyright notice is included with it.\n    // SoftSurfer makes no warranty for this code, and cannot be held\n    // liable for any real or imagined damage resulting from its use.\n    // Users of this code must verify correctness for their application.\n    let wn = 0;\n    let x1 = flatCoordinates[end - stride];\n    let y1 = flatCoordinates[end - stride + 1];\n    for(; offset < end; offset += stride){\n        const x2 = flatCoordinates[offset];\n        const y2 = flatCoordinates[offset + 1];\n        if (y1 <= y) {\n            if (y2 > y && (x2 - x1) * (y - y1) - (x - x1) * (y2 - y1) > 0) wn++;\n        } else if (y2 <= y && (x2 - x1) * (y - y1) - (x - x1) * (y2 - y1) < 0) wn--;\n        x1 = x2;\n        y1 = y2;\n    }\n    return wn !== 0;\n}\nfunction $239aa88e7a573859$export$ae868c0f6acc3355(flatCoordinates, offset, ends, stride, x, y) {\n    if (ends.length === 0) return false;\n    if (!$239aa88e7a573859$export$949a7a3a4b6f34fa(flatCoordinates, offset, ends[0], stride, x, y)) return false;\n    for(let i = 1, ii = ends.length; i < ii; ++i){\n        if ($239aa88e7a573859$export$949a7a3a4b6f34fa(flatCoordinates, ends[i - 1], ends[i], stride, x, y)) return false;\n    }\n    return true;\n}\nfunction $239aa88e7a573859$export$c760d9d16cf92043(flatCoordinates, offset, endss, stride, x, y) {\n    if (endss.length === 0) return false;\n    for(let i = 0, ii = endss.length; i < ii; ++i){\n        const ends = endss[i];\n        if ($239aa88e7a573859$export$ae868c0f6acc3355(flatCoordinates, offset, ends, stride, x, y)) return true;\n        offset = ends[ends.length - 1];\n    }\n    return false;\n}\n\n\n\n\n/**\r\n * @module ol/geom/flat/interiorpoint\r\n */ \n\nfunction $2166f19777f69377$export$50e3b25928a5e892(flatCoordinates, offset, ends, stride, flatCenters, flatCentersOffset, dest) {\n    let i, ii, x, x1, x2, y1, y2;\n    const y = flatCenters[flatCentersOffset + 1];\n    /** @type {Array<number>} */ const intersections = [];\n    // Calculate intersections with the horizontal line\n    for(let r = 0, rr = ends.length; r < rr; ++r){\n        const end = ends[r];\n        x1 = flatCoordinates[end - stride];\n        y1 = flatCoordinates[end - stride + 1];\n        for(i = offset; i < end; i += stride){\n            x2 = flatCoordinates[i];\n            y2 = flatCoordinates[i + 1];\n            if (y <= y1 && y2 <= y || y1 <= y && y <= y2) {\n                x = (y - y1) / (y2 - y1) * (x2 - x1) + x1;\n                intersections.push(x);\n            }\n            x1 = x2;\n            y1 = y2;\n        }\n    }\n    // Find the longest segment of the horizontal line that has its center point\n    // inside the linear ring.\n    let pointX = NaN;\n    let maxSegmentLength = -Infinity;\n    intersections.sort((0, $b998d41b678ed5d1$export$fcb633242ef15540));\n    x1 = intersections[0];\n    for(i = 1, ii = intersections.length; i < ii; ++i){\n        x2 = intersections[i];\n        const segmentLength = Math.abs(x2 - x1);\n        if (segmentLength > maxSegmentLength) {\n            x = (x1 + x2) / 2;\n            if ((0, $239aa88e7a573859$export$ae868c0f6acc3355)(flatCoordinates, offset, ends, stride, x, y)) {\n                pointX = x;\n                maxSegmentLength = segmentLength;\n            }\n        }\n        x1 = x2;\n    }\n    if (isNaN(pointX)) // There is no horizontal line that has its center point inside the linear\n    // ring.  Use the center of the the linear ring's extent.\n    pointX = flatCenters[flatCentersOffset];\n    if (dest) {\n        dest.push(pointX, y, maxSegmentLength);\n        return dest;\n    }\n    return [\n        pointX,\n        y,\n        maxSegmentLength\n    ];\n}\nfunction $2166f19777f69377$export$11463803eda8a372(flatCoordinates, offset, endss, stride, flatCenters) {\n    /** @type {Array<number>} */ let interiorPoints = [];\n    for(let i = 0, ii = endss.length; i < ii; ++i){\n        const ends = endss[i];\n        interiorPoints = $2166f19777f69377$export$50e3b25928a5e892(flatCoordinates, offset, ends, stride, flatCenters, 2 * i, interiorPoints);\n        offset = ends[ends.length - 1];\n    }\n    return interiorPoints;\n}\n\n\n/**\r\n * @module ol/geom/flat/intersectsextent\r\n */ \n\n/**\r\n * @module ol/geom/flat/segments\r\n */ /**\r\n * This function calls `callback` for each segment of the flat coordinates\r\n * array. If the callback returns a truthy value the function returns that\r\n * value immediately. Otherwise the function returns `false`.\r\n * @param {Array<number>} flatCoordinates Flat coordinates.\r\n * @param {number} offset Offset.\r\n * @param {number} end End.\r\n * @param {number} stride Stride.\r\n * @param {function(import(\"../../coordinate.js\").Coordinate, import(\"../../coordinate.js\").Coordinate): T} callback Function\r\n *     called for each segment.\r\n * @return {T|boolean} Value.\r\n * @template T\r\n */ function $3e64078bffae1cbd$export$4b80e395e36b5a56(flatCoordinates, offset, end, stride, callback) {\n    let ret;\n    offset += stride;\n    for(; offset < end; offset += stride){\n        ret = callback(flatCoordinates.slice(offset - stride, offset), flatCoordinates.slice(offset, offset + stride));\n        if (ret) return ret;\n    }\n    return false;\n}\nfunction $3e64078bffae1cbd$export$3f024338373820dc(segment1, segment2) {\n    const [a, b] = segment1;\n    const [c, d] = segment2;\n    const t = ((a[0] - c[0]) * (c[1] - d[1]) - (a[1] - c[1]) * (c[0] - d[0])) / ((a[0] - b[0]) * (c[1] - d[1]) - (a[1] - b[1]) * (c[0] - d[0]));\n    const u = ((a[0] - c[0]) * (a[1] - b[1]) - (a[1] - c[1]) * (a[0] - b[0])) / ((a[0] - b[0]) * (c[1] - d[1]) - (a[1] - b[1]) * (c[0] - d[0]));\n    // Check if lines actually intersect\n    if (0 <= t && t <= 1 && 0 <= u && u <= 1) return [\n        a[0] + t * (b[0] - a[0]),\n        a[1] + t * (b[1] - a[1])\n    ];\n    return undefined;\n}\n\n\nfunction $acee589e5b390c5c$export$40d8d71841a3d779(flatCoordinates, offset, end, stride, extent, coordinatesExtent) {\n    coordinatesExtent = coordinatesExtent ?? (0, $6da4c8ed3074c92b$export$30570204156ffd18)((0, $6da4c8ed3074c92b$export$fe201bb3bbe031e9)(), flatCoordinates, offset, end, stride);\n    if (!(0, $6da4c8ed3074c92b$export$7b0a31e10bbff018)(extent, coordinatesExtent)) return false;\n    if (coordinatesExtent[0] >= extent[0] && coordinatesExtent[2] <= extent[2] || coordinatesExtent[1] >= extent[1] && coordinatesExtent[3] <= extent[3]) return true;\n    return (0, $3e64078bffae1cbd$export$4b80e395e36b5a56)(flatCoordinates, offset, end, stride, /**\r\n     * @param {import(\"../../coordinate.js\").Coordinate} point1 Start point.\r\n     * @param {import(\"../../coordinate.js\").Coordinate} point2 End point.\r\n     * @return {boolean} `true` if the segment and the extent intersect,\r\n     *     `false` otherwise.\r\n     */ function(point1, point2) {\n        return (0, $6da4c8ed3074c92b$export$a6a5a7a461419425)(extent, point1, point2);\n    });\n}\nfunction $acee589e5b390c5c$export$fdb1d8e850bf7937(flatCoordinates, offset, ends, stride, extent) {\n    for(let i = 0, ii = ends.length; i < ii; ++i){\n        if ($acee589e5b390c5c$export$40d8d71841a3d779(flatCoordinates, offset, ends[i], stride, extent)) return true;\n        offset = ends[i];\n    }\n    return false;\n}\nfunction $acee589e5b390c5c$export$830a0dafbb2ef1c5(flatCoordinates, offset, end, stride, extent) {\n    if ($acee589e5b390c5c$export$40d8d71841a3d779(flatCoordinates, offset, end, stride, extent)) return true;\n    if ((0, $239aa88e7a573859$export$949a7a3a4b6f34fa)(flatCoordinates, offset, end, stride, extent[0], extent[1])) return true;\n    if ((0, $239aa88e7a573859$export$949a7a3a4b6f34fa)(flatCoordinates, offset, end, stride, extent[0], extent[3])) return true;\n    if ((0, $239aa88e7a573859$export$949a7a3a4b6f34fa)(flatCoordinates, offset, end, stride, extent[2], extent[1])) return true;\n    if ((0, $239aa88e7a573859$export$949a7a3a4b6f34fa)(flatCoordinates, offset, end, stride, extent[2], extent[3])) return true;\n    return false;\n}\nfunction $acee589e5b390c5c$export$76dcd8f8f83b6ddb(flatCoordinates, offset, ends, stride, extent) {\n    if (!$acee589e5b390c5c$export$830a0dafbb2ef1c5(flatCoordinates, offset, ends[0], stride, extent)) return false;\n    if (ends.length === 1) return true;\n    for(let i = 1, ii = ends.length; i < ii; ++i)if ((0, $239aa88e7a573859$export$cedabedc7ac0e138)(flatCoordinates, ends[i - 1], ends[i], stride, extent)) {\n        if (!$acee589e5b390c5c$export$40d8d71841a3d779(flatCoordinates, ends[i - 1], ends[i], stride, extent)) return false;\n    }\n    return true;\n}\nfunction $acee589e5b390c5c$export$77b72fa3792f5bf0(flatCoordinates, offset, endss, stride, extent) {\n    for(let i = 0, ii = endss.length; i < ii; ++i){\n        const ends = endss[i];\n        if ($acee589e5b390c5c$export$76dcd8f8f83b6ddb(flatCoordinates, offset, ends, stride, extent)) return true;\n        offset = ends[ends.length - 1];\n    }\n    return false;\n}\n\n\n/**\r\n * @module ol/geom/flat/orient\r\n */ /**\r\n * @module ol/geom/flat/reverse\r\n */ /**\r\n * @param {Array<number>} flatCoordinates Flat coordinates.\r\n * @param {number} offset Offset.\r\n * @param {number} end End.\r\n * @param {number} stride Stride.\r\n */ function $155dc783a4ec227e$export$741858880c96b18c(flatCoordinates, offset, end, stride) {\n    while(offset < end - stride){\n        for(let i = 0; i < stride; ++i){\n            const tmp = flatCoordinates[offset + i];\n            flatCoordinates[offset + i] = flatCoordinates[end - stride + i];\n            flatCoordinates[end - stride + i] = tmp;\n        }\n        offset += stride;\n        end -= stride;\n    }\n}\n\n\nfunction $7892dc06ffd23218$export$318f2842ed17e094(flatCoordinates, offset, end, stride) {\n    // https://stackoverflow.com/q/1165647/clockwise-method#1165943\n    // https://github.com/OSGeo/gdal/blob/master/gdal/ogr/ogrlinearring.cpp\n    let edge = 0;\n    let x1 = flatCoordinates[end - stride];\n    let y1 = flatCoordinates[end - stride + 1];\n    for(; offset < end; offset += stride){\n        const x2 = flatCoordinates[offset];\n        const y2 = flatCoordinates[offset + 1];\n        edge += (x2 - x1) * (y2 + y1);\n        x1 = x2;\n        y1 = y2;\n    }\n    return edge === 0 ? undefined : edge > 0;\n}\nfunction $7892dc06ffd23218$export$f27cd06e85f4ba28(flatCoordinates, offset, ends, stride, right) {\n    right = right !== undefined ? right : false;\n    for(let i = 0, ii = ends.length; i < ii; ++i){\n        const end = ends[i];\n        const isClockwise = $7892dc06ffd23218$export$318f2842ed17e094(flatCoordinates, offset, end, stride);\n        if (i === 0) {\n            if (right && isClockwise || !right && !isClockwise) return false;\n        } else {\n            if (right && !isClockwise || !right && isClockwise) return false;\n        }\n        offset = end;\n    }\n    return true;\n}\nfunction $7892dc06ffd23218$export$a1d138f4bd85f4b4(flatCoordinates, offset, endss, stride, right) {\n    for(let i = 0, ii = endss.length; i < ii; ++i){\n        const ends = endss[i];\n        if (!$7892dc06ffd23218$export$f27cd06e85f4ba28(flatCoordinates, offset, ends, stride, right)) return false;\n        if (ends.length) offset = ends[ends.length - 1];\n    }\n    return true;\n}\nfunction $7892dc06ffd23218$export$b71b604ddfc778c7(flatCoordinates, offset, ends, stride, right) {\n    right = right !== undefined ? right : false;\n    for(let i = 0, ii = ends.length; i < ii; ++i){\n        const end = ends[i];\n        const isClockwise = $7892dc06ffd23218$export$318f2842ed17e094(flatCoordinates, offset, end, stride);\n        const reverse = i === 0 ? right && isClockwise || !right && !isClockwise : right && !isClockwise || !right && isClockwise;\n        if (reverse) (0, $155dc783a4ec227e$export$741858880c96b18c)(flatCoordinates, offset, end, stride);\n        offset = end;\n    }\n    return offset;\n}\nfunction $7892dc06ffd23218$export$ea9ed55fc2a85010(flatCoordinates, offset, endss, stride, right) {\n    for(let i = 0, ii = endss.length; i < ii; ++i)offset = $7892dc06ffd23218$export$b71b604ddfc778c7(flatCoordinates, offset, endss[i], stride, right);\n    return offset;\n}\nfunction $7892dc06ffd23218$export$cb72ae403d6e78e6(flatCoordinates, ends) {\n    const endss = [];\n    let offset = 0;\n    let prevEndIndex = 0;\n    let startOrientation;\n    for(let i = 0, ii = ends.length; i < ii; ++i){\n        const end = ends[i];\n        // classifies an array of rings into polygons with outer rings and holes\n        const orientation = $7892dc06ffd23218$export$318f2842ed17e094(flatCoordinates, offset, end, 2);\n        if (startOrientation === undefined) startOrientation = orientation;\n        if (orientation === startOrientation) endss.push(ends.slice(prevEndIndex, i + 1));\n        else {\n            if (endss.length === 0) continue;\n            endss[endss.length - 1].push(ends[prevEndIndex]);\n        }\n        prevEndIndex = i + 1;\n        offset = end;\n    }\n    return endss;\n}\n\n\n\n/**\r\n * @classdesc\r\n * Polygon geometry.\r\n *\r\n * @api\r\n */ class $40aa8d43bbe572bf$var$Polygon extends (0, $c76e993e57efc8c4$export$2e2bcd8739ae039) {\n    /**\r\n   * @param {!Array<Array<import(\"../coordinate.js\").Coordinate>>|!Array<number>} coordinates\r\n   *     Array of linear rings that define the polygon. The first linear ring of the\r\n   *     array defines the outer-boundary or surface of the polygon. Each subsequent\r\n   *     linear ring defines a hole in the surface of the polygon. A linear ring is\r\n   *     an array of vertices' coordinates where the first coordinate and the last are\r\n   *     equivalent. (For internal use, flat coordinates in combination with\r\n   *     `layout` and `ends` are also accepted.)\r\n   * @param {import(\"./Geometry.js\").GeometryLayout} [layout] Layout.\r\n   * @param {Array<number>} [ends] Ends (for internal use with flat coordinates).\r\n   */ constructor(coordinates, layout, ends){\n        super();\n        /**\r\n     * @type {Array<number>}\r\n     * @private\r\n     */ this.ends_ = [];\n        /**\r\n     * @private\r\n     * @type {number}\r\n     */ this.flatInteriorPointRevision_ = -1;\n        /**\r\n     * @private\r\n     * @type {import(\"../coordinate.js\").Coordinate|null}\r\n     */ this.flatInteriorPoint_ = null;\n        /**\r\n     * @private\r\n     * @type {number}\r\n     */ this.maxDelta_ = -1;\n        /**\r\n     * @private\r\n     * @type {number}\r\n     */ this.maxDeltaRevision_ = -1;\n        /**\r\n     * @private\r\n     * @type {number}\r\n     */ this.orientedRevision_ = -1;\n        /**\r\n     * @private\r\n     * @type {Array<number>|null}\r\n     */ this.orientedFlatCoordinates_ = null;\n        if (layout !== undefined && ends) {\n            this.setFlatCoordinates(layout, /** @type {Array<number>} */ coordinates);\n            this.ends_ = ends;\n        } else this.setCoordinates(/** @type {Array<Array<import(\"../coordinate.js\").Coordinate>>} */ coordinates, layout);\n    }\n    /**\r\n   * Append the passed linear ring to this polygon.\r\n   * @param {LinearRing} linearRing Linear ring.\r\n   * @api\r\n   */ appendLinearRing(linearRing) {\n        if (!this.flatCoordinates) this.flatCoordinates = linearRing.getFlatCoordinates().slice();\n        else (0, $b998d41b678ed5d1$export$8b58be045bf06082)(this.flatCoordinates, linearRing.getFlatCoordinates());\n        this.ends_.push(this.flatCoordinates.length);\n        this.changed();\n    }\n    /**\r\n   * Make a complete copy of the geometry.\r\n   * @return {!Polygon} Clone.\r\n   * @api\r\n   * @override\r\n   */ clone() {\n        const polygon = new $40aa8d43bbe572bf$var$Polygon(this.flatCoordinates.slice(), this.layout, this.ends_.slice());\n        polygon.applyProperties(this);\n        return polygon;\n    }\n    /**\r\n   * @param {number} x X.\r\n   * @param {number} y Y.\r\n   * @param {import(\"../coordinate.js\").Coordinate} closestPoint Closest point.\r\n   * @param {number} minSquaredDistance Minimum squared distance.\r\n   * @return {number} Minimum squared distance.\r\n   * @override\r\n   */ closestPointXY(x, y, closestPoint, minSquaredDistance) {\n        if (minSquaredDistance < (0, $6da4c8ed3074c92b$export$cbe64c389534206f)(this.getExtent(), x, y)) return minSquaredDistance;\n        if (this.maxDeltaRevision_ != this.getRevision()) {\n            this.maxDelta_ = Math.sqrt((0, $bf5604c1b8258b71$export$fbf31c8f2668ed5a)(this.flatCoordinates, 0, this.ends_, this.stride, 0));\n            this.maxDeltaRevision_ = this.getRevision();\n        }\n        return (0, $bf5604c1b8258b71$export$5a48a0eefcf14992)(this.flatCoordinates, 0, this.ends_, this.stride, this.maxDelta_, true, x, y, closestPoint, minSquaredDistance);\n    }\n    /**\r\n   * @param {number} x X.\r\n   * @param {number} y Y.\r\n   * @return {boolean} Contains (x, y).\r\n   * @override\r\n   */ containsXY(x, y) {\n        return (0, $239aa88e7a573859$export$ae868c0f6acc3355)(this.getOrientedFlatCoordinates(), 0, this.ends_, this.stride, x, y);\n    }\n    /**\r\n   * Return the area of the polygon on projected plane.\r\n   * @return {number} Area (on projected plane).\r\n   * @api\r\n   */ getArea() {\n        return (0, $01ff26a2f986a1d0$export$7a8ee541dfdf2ed5)(this.getOrientedFlatCoordinates(), 0, this.ends_, this.stride);\n    }\n    /**\r\n   * Get the coordinate array for this geometry.  This array has the structure\r\n   * of a GeoJSON coordinate array for polygons.\r\n   *\r\n   * @param {boolean} [right] Orient coordinates according to the right-hand\r\n   *     rule (counter-clockwise for exterior and clockwise for interior rings).\r\n   *     If `false`, coordinates will be oriented according to the left-hand rule\r\n   *     (clockwise for exterior and counter-clockwise for interior rings).\r\n   *     By default, coordinate orientation will depend on how the geometry was\r\n   *     constructed.\r\n   * @return {Array<Array<import(\"../coordinate.js\").Coordinate>>} Coordinates.\r\n   * @api\r\n   * @override\r\n   */ getCoordinates(right) {\n        let flatCoordinates;\n        if (right !== undefined) {\n            flatCoordinates = this.getOrientedFlatCoordinates().slice();\n            (0, $7892dc06ffd23218$export$b71b604ddfc778c7)(flatCoordinates, 0, this.ends_, this.stride, right);\n        } else flatCoordinates = this.flatCoordinates;\n        return (0, $5454470599558ddd$export$cbb9596fc0f40db2)(flatCoordinates, 0, this.ends_, this.stride);\n    }\n    /**\r\n   * @return {Array<number>} Ends.\r\n   */ getEnds() {\n        return this.ends_;\n    }\n    /**\r\n   * @return {Array<number>} Interior point.\r\n   */ getFlatInteriorPoint() {\n        if (this.flatInteriorPointRevision_ != this.getRevision()) {\n            const flatCenter = (0, $6da4c8ed3074c92b$export$c91255cadecfe081)(this.getExtent());\n            this.flatInteriorPoint_ = (0, $2166f19777f69377$export$50e3b25928a5e892)(this.getOrientedFlatCoordinates(), 0, this.ends_, this.stride, flatCenter, 0);\n            this.flatInteriorPointRevision_ = this.getRevision();\n        }\n        return /** @type {import(\"../coordinate.js\").Coordinate} */ this.flatInteriorPoint_;\n    }\n    /**\r\n   * Return an interior point of the polygon.\r\n   * @return {Point} Interior point as XYM coordinate, where M is the\r\n   * length of the horizontal intersection that the point belongs to.\r\n   * @api\r\n   */ getInteriorPoint() {\n        return new (0, $6eced4c969949f6b$export$2e2bcd8739ae039)(this.getFlatInteriorPoint(), 'XYM');\n    }\n    /**\r\n   * Return the number of rings of the polygon,  this includes the exterior\r\n   * ring and any interior rings.\r\n   *\r\n   * @return {number} Number of rings.\r\n   * @api\r\n   */ getLinearRingCount() {\n        return this.ends_.length;\n    }\n    /**\r\n   * Return the Nth linear ring of the polygon geometry. Return `null` if the\r\n   * given index is out of range.\r\n   * The exterior linear ring is available at index `0` and the interior rings\r\n   * at index `1` and beyond.\r\n   *\r\n   * @param {number} index Index.\r\n   * @return {LinearRing|null} Linear ring.\r\n   * @api\r\n   */ getLinearRing(index) {\n        if (index < 0 || this.ends_.length <= index) return null;\n        return new (0, $548636579b4087f2$export$2e2bcd8739ae039)(this.flatCoordinates.slice(index === 0 ? 0 : this.ends_[index - 1], this.ends_[index]), this.layout);\n    }\n    /**\r\n   * Return the linear rings of the polygon.\r\n   * @return {Array<LinearRing>} Linear rings.\r\n   * @api\r\n   */ getLinearRings() {\n        const layout = this.layout;\n        const flatCoordinates = this.flatCoordinates;\n        const ends = this.ends_;\n        const linearRings = [];\n        let offset = 0;\n        for(let i = 0, ii = ends.length; i < ii; ++i){\n            const end = ends[i];\n            const linearRing = new (0, $548636579b4087f2$export$2e2bcd8739ae039)(flatCoordinates.slice(offset, end), layout);\n            linearRings.push(linearRing);\n            offset = end;\n        }\n        return linearRings;\n    }\n    /**\r\n   * @return {Array<number>} Oriented flat coordinates.\r\n   */ getOrientedFlatCoordinates() {\n        if (this.orientedRevision_ != this.getRevision()) {\n            const flatCoordinates = this.flatCoordinates;\n            if ((0, $7892dc06ffd23218$export$f27cd06e85f4ba28)(flatCoordinates, 0, this.ends_, this.stride)) this.orientedFlatCoordinates_ = flatCoordinates;\n            else {\n                this.orientedFlatCoordinates_ = flatCoordinates.slice();\n                this.orientedFlatCoordinates_.length = (0, $7892dc06ffd23218$export$b71b604ddfc778c7)(this.orientedFlatCoordinates_, 0, this.ends_, this.stride);\n            }\n            this.orientedRevision_ = this.getRevision();\n        }\n        return /** @type {Array<number>} */ this.orientedFlatCoordinates_;\n    }\n    /**\r\n   * @param {number} squaredTolerance Squared tolerance.\r\n   * @return {Polygon} Simplified Polygon.\r\n   * @protected\r\n   * @override\r\n   */ getSimplifiedGeometryInternal(squaredTolerance) {\n        /** @type {Array<number>} */ const simplifiedFlatCoordinates = [];\n        /** @type {Array<number>} */ const simplifiedEnds = [];\n        simplifiedFlatCoordinates.length = (0, $8780aae6970f5f65$export$60a9904b67f8d51b)(this.flatCoordinates, 0, this.ends_, this.stride, Math.sqrt(squaredTolerance), simplifiedFlatCoordinates, 0, simplifiedEnds);\n        return new $40aa8d43bbe572bf$var$Polygon(simplifiedFlatCoordinates, 'XY', simplifiedEnds);\n    }\n    /**\r\n   * Get the type of this geometry.\r\n   * @return {import(\"./Geometry.js\").Type} Geometry type.\r\n   * @api\r\n   * @override\r\n   */ getType() {\n        return 'Polygon';\n    }\n    /**\r\n   * Test if the geometry and the passed extent intersect.\r\n   * @param {import(\"../extent.js\").Extent} extent Extent.\r\n   * @return {boolean} `true` if the geometry and the extent intersect.\r\n   * @api\r\n   * @override\r\n   */ intersectsExtent(extent) {\n        return (0, $acee589e5b390c5c$export$76dcd8f8f83b6ddb)(this.getOrientedFlatCoordinates(), 0, this.ends_, this.stride, extent);\n    }\n    /**\r\n   * Set the coordinates of the polygon.\r\n   * @param {!Array<Array<import(\"../coordinate.js\").Coordinate>>} coordinates Coordinates.\r\n   * @param {import(\"./Geometry.js\").GeometryLayout} [layout] Layout.\r\n   * @api\r\n   * @override\r\n   */ setCoordinates(coordinates, layout) {\n        this.setLayout(layout, coordinates, 2);\n        if (!this.flatCoordinates) this.flatCoordinates = [];\n        const ends = (0, $6b086aa46281540d$export$47c3746a74384d45)(this.flatCoordinates, 0, coordinates, this.stride, this.ends_);\n        this.flatCoordinates.length = ends.length === 0 ? 0 : ends[ends.length - 1];\n        this.changed();\n    }\n}\nvar $40aa8d43bbe572bf$export$2e2bcd8739ae039 = $40aa8d43bbe572bf$var$Polygon;\nfunction $40aa8d43bbe572bf$export$f99d756c6d81ae3f(center, radius, n, sphereRadius) {\n    n = n ? n : 32;\n    /** @type {Array<number>} */ const flatCoordinates = [];\n    for(let i = 0; i < n; ++i)(0, $b998d41b678ed5d1$export$8b58be045bf06082)(flatCoordinates, (0, $fb75384508533d8f$export$cc800923e997bb8)(center, radius, 2 * Math.PI * i / n, sphereRadius));\n    flatCoordinates.push(flatCoordinates[0], flatCoordinates[1]);\n    return new $40aa8d43bbe572bf$var$Polygon(flatCoordinates, 'XY', [\n        flatCoordinates.length\n    ]);\n}\nfunction $40aa8d43bbe572bf$export$c16b671815801c75(extent) {\n    if ((0, $6da4c8ed3074c92b$export$dd1bc94b04021eeb)(extent)) throw new Error('Cannot create polygon from empty extent');\n    const minX = extent[0];\n    const minY = extent[1];\n    const maxX = extent[2];\n    const maxY = extent[3];\n    const flatCoordinates = [\n        minX,\n        minY,\n        minX,\n        maxY,\n        maxX,\n        maxY,\n        maxX,\n        minY,\n        minX,\n        minY\n    ];\n    return new $40aa8d43bbe572bf$var$Polygon(flatCoordinates, 'XY', [\n        flatCoordinates.length\n    ]);\n}\nfunction $40aa8d43bbe572bf$export$2451009d645fb8c2(circle, sides, angle) {\n    sides = sides ? sides : 32;\n    const stride = circle.getStride();\n    const layout = circle.getLayout();\n    const center = circle.getCenter();\n    const arrayLength = stride * (sides + 1);\n    const flatCoordinates = new Array(arrayLength);\n    for(let i = 0; i < arrayLength; i += stride){\n        flatCoordinates[i] = 0;\n        flatCoordinates[i + 1] = 0;\n        for(let j = 2; j < stride; j++)flatCoordinates[i + j] = center[j];\n    }\n    const ends = [\n        flatCoordinates.length\n    ];\n    const polygon = new $40aa8d43bbe572bf$var$Polygon(flatCoordinates, layout, ends);\n    $40aa8d43bbe572bf$export$87d6a1539a56e47f(polygon, center, circle.getRadius(), angle);\n    return polygon;\n}\nfunction $40aa8d43bbe572bf$export$87d6a1539a56e47f(polygon, center, radius, angle) {\n    const flatCoordinates = polygon.getFlatCoordinates();\n    const stride = polygon.getStride();\n    const sides = flatCoordinates.length / stride - 1;\n    const startAngle = angle ? angle : 0;\n    for(let i = 0; i <= sides; ++i){\n        const offset = i * stride;\n        const angle = startAngle + (0, $6b000a049d919fe5$export$ba467bec01d66def)(i, sides) * 2 * Math.PI / sides;\n        flatCoordinates[offset] = center[0] + radius * Math.cos(angle);\n        flatCoordinates[offset + 1] = center[1] + radius * Math.sin(angle);\n    }\n    polygon.changed();\n}\n\n\n\n\n/**\r\n * @module ol/resolutionconstraint\r\n */ \n\n\n/**\r\n * @typedef {function((number|undefined), number, import(\"./size.js\").Size, boolean=): (number|undefined)} Type\r\n */ /**\r\n * Returns a modified resolution taking into account the viewport size and maximum\r\n * allowed extent.\r\n * @param {number} resolution Resolution\r\n * @param {import(\"./extent.js\").Extent} maxExtent Maximum allowed extent.\r\n * @param {import(\"./size.js\").Size} viewportSize Viewport size.\r\n * @param {boolean} showFullExtent Whether to show the full extent.\r\n * @return {number} Capped resolution.\r\n */ function $bac43a1f4a628548$var$getViewportClampedResolution(resolution, maxExtent, viewportSize, showFullExtent) {\n    const xResolution = (0, $6da4c8ed3074c92b$export$3c49c185de0c2bfc)(maxExtent) / viewportSize[0];\n    const yResolution = (0, $6da4c8ed3074c92b$export$c08559766941f856)(maxExtent) / viewportSize[1];\n    if (showFullExtent) return Math.min(resolution, Math.max(xResolution, yResolution));\n    return Math.min(resolution, Math.min(xResolution, yResolution));\n}\n/**\r\n * Returns a modified resolution to be between maxResolution and minResolution while\r\n * still allowing the value to be slightly out of bounds.\r\n * Note: the computation is based on the logarithm function (ln):\r\n *  - at 1, ln(x) is 0\r\n *  - above 1, ln(x) keeps increasing but at a much slower pace than x\r\n * The final result is clamped to prevent getting too far away from bounds.\r\n * @param {number} resolution Resolution.\r\n * @param {number} maxResolution Max resolution.\r\n * @param {number} minResolution Min resolution.\r\n * @return {number} Smoothed resolution.\r\n */ function $bac43a1f4a628548$var$getSmoothClampedResolution(resolution, maxResolution, minResolution) {\n    let result = Math.min(resolution, maxResolution);\n    const ratio = 50;\n    result *= Math.log(1 + ratio * Math.max(0, resolution / maxResolution - 1)) / ratio + 1;\n    if (minResolution) {\n        result = Math.max(result, minResolution);\n        result /= Math.log(1 + ratio * Math.max(0, minResolution / resolution - 1)) / ratio + 1;\n    }\n    return (0, $6b000a049d919fe5$export$7d15b64cf5a3a4c4)(result, minResolution / 2, maxResolution * 2);\n}\nfunction $bac43a1f4a628548$export$d65a517690fc4385(resolutions, smooth, maxExtent, showFullExtent) {\n    smooth = smooth !== undefined ? smooth : true;\n    return(/**\r\n     * @param {number|undefined} resolution Resolution.\r\n     * @param {number} direction Direction.\r\n     * @param {import(\"./size.js\").Size} size Viewport size.\r\n     * @param {boolean} [isMoving] True if an interaction or animation is in progress.\r\n     * @return {number|undefined} Resolution.\r\n     */ function(resolution, direction, size, isMoving) {\n        if (resolution !== undefined) {\n            const maxResolution = resolutions[0];\n            const minResolution = resolutions[resolutions.length - 1];\n            const cappedMaxRes = maxExtent ? $bac43a1f4a628548$var$getViewportClampedResolution(maxResolution, maxExtent, size, showFullExtent) : maxResolution;\n            // during interacting or animating, allow intermediary values\n            if (isMoving) {\n                if (!smooth) return (0, $6b000a049d919fe5$export$7d15b64cf5a3a4c4)(resolution, minResolution, cappedMaxRes);\n                return $bac43a1f4a628548$var$getSmoothClampedResolution(resolution, cappedMaxRes, minResolution);\n            }\n            const capped = Math.min(cappedMaxRes, resolution);\n            const z = Math.floor((0, $b998d41b678ed5d1$export$8a3786cc03fdb777)(resolutions, capped, direction));\n            if (resolutions[z] > cappedMaxRes && z < resolutions.length - 1) return resolutions[z + 1];\n            return resolutions[z];\n        }\n        return undefined;\n    });\n}\nfunction $bac43a1f4a628548$export$22ac0f6b219de91a(power, maxResolution, minResolution, smooth, maxExtent, showFullExtent) {\n    smooth = smooth !== undefined ? smooth : true;\n    minResolution = minResolution !== undefined ? minResolution : 0;\n    return(/**\r\n     * @param {number|undefined} resolution Resolution.\r\n     * @param {number} direction Direction.\r\n     * @param {import(\"./size.js\").Size} size Viewport size.\r\n     * @param {boolean} [isMoving] True if an interaction or animation is in progress.\r\n     * @return {number|undefined} Resolution.\r\n     */ function(resolution, direction, size, isMoving) {\n        if (resolution !== undefined) {\n            const cappedMaxRes = maxExtent ? $bac43a1f4a628548$var$getViewportClampedResolution(maxResolution, maxExtent, size, showFullExtent) : maxResolution;\n            // during interacting or animating, allow intermediary values\n            if (isMoving) {\n                if (!smooth) return (0, $6b000a049d919fe5$export$7d15b64cf5a3a4c4)(resolution, minResolution, cappedMaxRes);\n                return $bac43a1f4a628548$var$getSmoothClampedResolution(resolution, cappedMaxRes, minResolution);\n            }\n            const tolerance = 1e-9;\n            const minZoomLevel = Math.ceil(Math.log(maxResolution / cappedMaxRes) / Math.log(power) - tolerance);\n            const offset = -direction * (0.5 - tolerance) + 0.5;\n            const capped = Math.min(cappedMaxRes, resolution);\n            const cappedZoomLevel = Math.floor(Math.log(maxResolution / capped) / Math.log(power) + offset);\n            const zoomLevel = Math.max(minZoomLevel, cappedZoomLevel);\n            const newResolution = maxResolution / Math.pow(power, zoomLevel);\n            return (0, $6b000a049d919fe5$export$7d15b64cf5a3a4c4)(newResolution, minResolution, cappedMaxRes);\n        }\n        return undefined;\n    });\n}\nfunction $bac43a1f4a628548$export$1c4e6da9b4b066fe(maxResolution, minResolution, smooth, maxExtent, showFullExtent) {\n    smooth = smooth !== undefined ? smooth : true;\n    return(/**\r\n     * @param {number|undefined} resolution Resolution.\r\n     * @param {number} direction Direction.\r\n     * @param {import(\"./size.js\").Size} size Viewport size.\r\n     * @param {boolean} [isMoving] True if an interaction or animation is in progress.\r\n     * @return {number|undefined} Resolution.\r\n     */ function(resolution, direction, size, isMoving) {\n        if (resolution !== undefined) {\n            const cappedMaxRes = maxExtent ? $bac43a1f4a628548$var$getViewportClampedResolution(maxResolution, maxExtent, size, showFullExtent) : maxResolution;\n            if (!smooth || !isMoving) return (0, $6b000a049d919fe5$export$7d15b64cf5a3a4c4)(resolution, minResolution, cappedMaxRes);\n            return $bac43a1f4a628548$var$getSmoothClampedResolution(resolution, cappedMaxRes, minResolution);\n        }\n        return undefined;\n    });\n}\n\n\n/**\r\n * @module ol/rotationconstraint\r\n */ \nfunction $d65f0a322291d127$export$e20fbacbb41798b(rotation) {\n    if (rotation !== undefined) return 0;\n    return undefined;\n}\nfunction $d65f0a322291d127$export$f883a24d5edde77c(rotation) {\n    if (rotation !== undefined) return rotation;\n    return undefined;\n}\nfunction $d65f0a322291d127$export$9ba78806de831083(n) {\n    const theta = 2 * Math.PI / n;\n    return(/**\r\n     * @param {number|undefined} rotation Rotation.\r\n     * @param {boolean} [isMoving] True if an interaction or animation is in progress.\r\n     * @return {number|undefined} Rotation.\r\n     */ function(rotation, isMoving) {\n        if (isMoving) return rotation;\n        if (rotation !== undefined) {\n            rotation = Math.floor(rotation / theta + 0.5) * theta;\n            return rotation;\n        }\n        return undefined;\n    });\n}\nfunction $d65f0a322291d127$export$17a6e6f3448b17e8(tolerance) {\n    const t = tolerance === undefined ? (0, $6b000a049d919fe5$export$cba01ba138429a1d)(5) : tolerance;\n    return(/**\r\n     * @param {number|undefined} rotation Rotation.\r\n     * @param {boolean} [isMoving] True if an interaction or animation is in progress.\r\n     * @return {number|undefined} Rotation.\r\n     */ function(rotation, isMoving) {\n        if (isMoving || rotation === undefined) return rotation;\n        if (Math.abs(rotation) <= t) return 0;\n        return rotation;\n    });\n}\n\n\n/**\r\n * @module ol/tilegrid/common\r\n */ /**\r\n * Default maximum zoom for default tile grids.\r\n * @type {number}\r\n */ const $57cd8651d88957a0$export$e98a216cdcc847dc = 42;\nconst $57cd8651d88957a0$export$6b8cb5cd370bd90c = 256;\n\n\n/**\r\n * An animation configuration\r\n *\r\n * @typedef {Object} Animation\r\n * @property {import(\"./coordinate.js\").Coordinate} [sourceCenter] Source center.\r\n * @property {import(\"./coordinate.js\").Coordinate} [targetCenter] Target center.\r\n * @property {number} [sourceResolution] Source resolution.\r\n * @property {number} [targetResolution] Target resolution.\r\n * @property {number} [sourceRotation] Source rotation.\r\n * @property {number} [targetRotation] Target rotation.\r\n * @property {import(\"./coordinate.js\").Coordinate} [anchor] Anchor.\r\n * @property {number} start Start.\r\n * @property {number} duration Duration.\r\n * @property {boolean} complete Complete.\r\n * @property {function(number):number} easing Easing.\r\n * @property {function(boolean):void} callback Callback.\r\n */ /**\r\n * @typedef {Object} Constraints\r\n * @property {import(\"./centerconstraint.js\").Type} center Center.\r\n * @property {import(\"./resolutionconstraint.js\").Type} resolution Resolution.\r\n * @property {import(\"./rotationconstraint.js\").Type} rotation Rotation.\r\n */ /**\r\n * @typedef {Object} FitOptions\r\n * @property {import(\"./size.js\").Size} [size] The size in pixels of the box to\r\n * fit the extent into. Defaults to the size of the map the view is associated with.\r\n * If no map or multiple maps are connected to the view, provide the desired box size\r\n * (e.g. `map.getSize()`).\r\n * @property {!Array<number>} [padding=[0, 0, 0, 0]] Padding (in pixels) to be\r\n * cleared inside the view. Values in the array are top, right, bottom and left\r\n * padding.\r\n * @property {boolean} [nearest=false] If the view `constrainResolution` option is `true`,\r\n * get the nearest extent instead of the closest that actually fits the view.\r\n * @property {number} [minResolution=0] Minimum resolution that we zoom to.\r\n * @property {number} [maxZoom] Maximum zoom level that we zoom to. If\r\n * `minResolution` is given, this property is ignored.\r\n * @property {number} [duration] The duration of the animation in milliseconds.\r\n * By default, there is no animation to the target extent.\r\n * @property {function(number):number} [easing] The easing function used during\r\n * the animation (defaults to {@link module:ol/easing.inAndOut}).\r\n * The function will be called for each frame with a number representing a\r\n * fraction of the animation's duration.  The function should return a number\r\n * between 0 and 1 representing the progress toward the destination state.\r\n * @property {function(boolean):void} [callback] Function called when the view is in\r\n * its final position. The callback will be called with `true` if the animation\r\n * series completed on its own or `false` if it was cancelled.\r\n */ /**\r\n * @typedef {Object} ViewOptions\r\n * @property {import(\"./coordinate.js\").Coordinate} [center] The initial center for\r\n * the view. If a user projection is not set, the coordinate system for the center is\r\n * specified with the `projection` option. Layer sources will not be fetched if this\r\n * is not set, but the center can be set later with {@link #setCenter}.\r\n * @property {boolean|number} [constrainRotation=true] Rotation constraint.\r\n * `false` means no constraint. `true` means no constraint, but snap to zero\r\n * near zero. A number constrains the rotation to that number of values. For\r\n * example, `4` will constrain the rotation to 0, 90, 180, and 270 degrees.\r\n * @property {boolean} [enableRotation=true] Enable rotation.\r\n * If `false`, a rotation constraint that always sets the rotation to zero is\r\n * used. The `constrainRotation` option has no effect if `enableRotation` is\r\n * `false`.\r\n * @property {import(\"./extent.js\").Extent} [extent] The extent that constrains the\r\n * view, in other words, nothing outside of this extent can be visible on the map.\r\n * @property {boolean} [constrainOnlyCenter=false] If true, the extent\r\n * constraint will only apply to the view center and not the whole extent.\r\n * @property {boolean} [smoothExtentConstraint=true] If true, the extent\r\n * constraint will be applied smoothly, i.e. allow the view to go slightly outside\r\n * of the given `extent`.\r\n * @property {number} [maxResolution] The maximum resolution used to determine\r\n * the resolution constraint. It is used together with `minResolution` (or\r\n * `maxZoom`) and `zoomFactor`. If unspecified it is calculated in such a way\r\n * that the projection's validity extent fits in a 256x256 px tile. If the\r\n * projection is Spherical Mercator (the default) then `maxResolution` defaults\r\n * to `40075016.68557849 / 256 = 156543.03392804097`.\r\n * @property {number} [minResolution] The minimum resolution used to determine\r\n * the resolution constraint.  It is used together with `maxResolution` (or\r\n * `minZoom`) and `zoomFactor`.  If unspecified it is calculated assuming 29\r\n * zoom levels (with a factor of 2). If the projection is Spherical Mercator\r\n * (the default) then `minResolution` defaults to\r\n * `40075016.68557849 / 256 / Math.pow(2, 28) = 0.0005831682455839253`.\r\n * @property {number} [maxZoom=28] The maximum zoom level used to determine the\r\n * resolution constraint. It is used together with `minZoom` (or\r\n * `maxResolution`) and `zoomFactor`.  Note that if `minResolution` is also\r\n * provided, it is given precedence over `maxZoom`.\r\n * @property {number} [minZoom=0] The minimum zoom level used to determine the\r\n * resolution constraint. It is used together with `maxZoom` (or\r\n * `minResolution`) and `zoomFactor`.  Note that if `maxResolution` is also\r\n * provided, it is given precedence over `minZoom`.\r\n * @property {boolean} [multiWorld=false] If `false` the view is constrained so\r\n * only one world is visible, and you cannot pan off the edge.  If `true` the map\r\n * may show multiple worlds at low zoom levels.  Only used if the `projection` is\r\n * global.  Note that if `extent` is also provided it is given precedence.\r\n * @property {boolean} [constrainResolution=false] If true, the view will always\r\n * animate to the closest zoom level after an interaction; false means\r\n * intermediary zoom levels are allowed.\r\n * @property {boolean} [smoothResolutionConstraint=true] If true, the resolution\r\n * min/max values will be applied smoothly, i. e. allow the view to exceed slightly\r\n * the given resolution or zoom bounds.\r\n * @property {boolean} [showFullExtent=false] Allow the view to be zoomed out to\r\n * show the full configured extent. By default, when a view is configured with an\r\n * extent, users will not be able to zoom out so the viewport exceeds the extent in\r\n * either dimension. This means the full extent may not be visible if the viewport\r\n * is taller or wider than the aspect ratio of the configured extent. If\r\n * showFullExtent is true, the user will be able to zoom out so that the viewport\r\n * exceeds the height or width of the configured extent, but not both, allowing the\r\n * full extent to be shown.\r\n * @property {import(\"./proj.js\").ProjectionLike} [projection='EPSG:3857'] The\r\n * projection. The default is Spherical Mercator.\r\n * @property {number} [resolution] The initial resolution for the view. The\r\n * units are `projection` units per pixel (e.g. meters per pixel). An\r\n * alternative to setting this is to set `zoom`. Layer sources will not be\r\n * fetched if neither this nor `zoom` are defined, but they can be set later\r\n * with {@link #setZoom} or {@link #setResolution}.\r\n * @property {Array<number>} [resolutions] Resolutions that determine the\r\n * zoom levels if specified. The index in the array corresponds to the zoom level,\r\n * therefore the resolution values have to be in descending order. It also constrains\r\n * the resolution by the minimum and maximum value. If set the `maxResolution`,\r\n * `minResolution`, `minZoom`, `maxZoom`, and `zoomFactor` options are ignored.\r\n * @property {number} [rotation=0] The initial rotation for the view in radians\r\n * (positive rotation clockwise, 0 means North).\r\n * @property {number} [zoom] Only used if `resolution` is not defined. Zoom\r\n * level used to calculate the initial resolution for the view.\r\n * @property {number} [zoomFactor=2] The zoom factor used to compute the\r\n * corresponding resolution.\r\n * @property {!Array<number>} [padding=[0, 0, 0, 0]] Padding (in css pixels).\r\n * If the map viewport is partially covered with other content (overlays) along\r\n * its edges, this setting allows to shift the center of the viewport away from\r\n * that content. The order of the values is top, right, bottom, left.\r\n */ /**\r\n * @typedef {Object} AnimationOptions\r\n * @property {import(\"./coordinate.js\").Coordinate} [center] The center of the view at the end of\r\n * the animation.\r\n * @property {number} [zoom] The zoom level of the view at the end of the\r\n * animation. This takes precedence over `resolution`.\r\n * @property {number} [resolution] The resolution of the view at the end\r\n * of the animation.  If `zoom` is also provided, this option will be ignored.\r\n * @property {number} [rotation] The rotation of the view at the end of\r\n * the animation.\r\n * @property {import(\"./coordinate.js\").Coordinate} [anchor] Optional anchor to remain fixed\r\n * during a rotation or resolution animation.\r\n * @property {number} [duration=1000] The duration of the animation in milliseconds.\r\n * @property {function(number):number} [easing] The easing function used\r\n * during the animation (defaults to {@link module:ol/easing.inAndOut}).\r\n * The function will be called for each frame with a number representing a\r\n * fraction of the animation's duration.  The function should return a number\r\n * between 0 and 1 representing the progress toward the destination state.\r\n */ /**\r\n * @typedef {Object} State\r\n * @property {import(\"./coordinate.js\").Coordinate} center Center (in view projection coordinates).\r\n * @property {import(\"./proj/Projection.js\").default} projection Projection.\r\n * @property {number} resolution Resolution.\r\n * @property {import(\"./coordinate.js\").Coordinate} [nextCenter] The next center during an animation series.\r\n * @property {number} [nextResolution] The next resolution during an animation series.\r\n * @property {number} [nextRotation] The next rotation during an animation series.\r\n * @property {number} rotation Rotation.\r\n * @property {number} zoom Zoom.\r\n */ /**\r\n * Like {@link import(\"./Map.js\").FrameState}, but just `viewState` and `extent`.\r\n * @typedef {Object} ViewStateLayerStateExtent\r\n * @property {State} viewState View state.\r\n * @property {import(\"./extent.js\").Extent} extent Extent (in user projection coordinates).\r\n * @property {Array<import(\"./layer/Layer.js\").State>} [layerStatesArray] Layer states.\r\n */ /**\r\n * Default min zoom level for the map view.\r\n * @type {number}\r\n */ const $70364d0195659942$var$DEFAULT_MIN_ZOOM = 0;\n/**\r\n * @typedef {import(\"./ObjectEventType\").Types|'change:center'|'change:resolution'|'change:rotation'} ViewObjectEventTypes\r\n */ /***\r\n * @template Return\r\n * @typedef {import(\"./Observable\").OnSignature<import(\"./Observable\").EventTypes, import(\"./events/Event.js\").default, Return> &\r\n *   import(\"./Observable\").OnSignature<ViewObjectEventTypes, import(\"./Object\").ObjectEvent, Return> &\r\n *   import(\"./Observable\").CombinedOnSignature<import(\"./Observable\").EventTypes|ViewObjectEventTypes, Return>} ViewOnSignature\r\n */ /**\r\n * @classdesc\r\n * A View object represents a simple 2D view of the map.\r\n *\r\n * This is the object to act upon to change the center, resolution,\r\n * and rotation of the map.\r\n *\r\n * A View has a `projection`. The projection determines the\r\n * coordinate system of the center, and its units determine the units of the\r\n * resolution (projection units per pixel). The default projection is\r\n * Web Mercator (EPSG:3857).\r\n *\r\n * ### The view states\r\n *\r\n * A View is determined by three states: `center`, `resolution`,\r\n * and `rotation`. Each state has a corresponding getter and setter, e.g.\r\n * `getCenter` and `setCenter` for the `center` state.\r\n *\r\n * The `zoom` state is actually not saved on the view: all computations\r\n * internally use the `resolution` state. Still, the `setZoom` and `getZoom`\r\n * methods are available, as well as `getResolutionForZoom` and\r\n * `getZoomForResolution` to switch from one system to the other.\r\n *\r\n * ### The constraints\r\n *\r\n * `setCenter`, `setResolution` and `setRotation` can be used to change the\r\n * states of the view, but any constraint defined in the constructor will\r\n * be applied along the way.\r\n *\r\n * A View object can have a *resolution constraint*, a *rotation constraint*\r\n * and a *center constraint*.\r\n *\r\n * The *resolution constraint* typically restricts min/max values and\r\n * snaps to specific resolutions. It is determined by the following\r\n * options: `resolutions`, `maxResolution`, `maxZoom` and `zoomFactor`.\r\n * If `resolutions` is set, the other three options are ignored. See\r\n * documentation for each option for more information. By default, the view\r\n * only has a min/max restriction and allow intermediary zoom levels when\r\n * pinch-zooming for example.\r\n *\r\n * The *rotation constraint* snaps to specific angles. It is determined\r\n * by the following options: `enableRotation` and `constrainRotation`.\r\n * By default rotation is allowed and its value is snapped to zero when approaching the\r\n * horizontal.\r\n *\r\n * The *center constraint* is determined by the `extent` option. By\r\n * default the view center is not constrained at all.\r\n *\r\n * ### Changing the view state\r\n *\r\n * It is important to note that `setZoom`, `setResolution`, `setCenter` and\r\n * `setRotation` are subject to the above mentioned constraints. As such, it\r\n * may sometimes not be possible to know in advance the resulting state of the\r\n * View. For example, calling `setResolution(10)` does not guarantee that\r\n * `getResolution()` will return `10`.\r\n *\r\n * A consequence of this is that, when applying a delta on the view state, one\r\n * should use `adjustCenter`, `adjustRotation`, `adjustZoom` and `adjustResolution`\r\n * rather than the corresponding setters. This will let view do its internal\r\n * computations. Besides, the `adjust*` methods also take an `anchor`\r\n * argument which allows specifying an origin for the transformation.\r\n *\r\n * ### Interacting with the view\r\n *\r\n * View constraints are usually only applied when the view is *at rest*, meaning that\r\n * no interaction or animation is ongoing. As such, if the user puts the view in a\r\n * state that is not equivalent to a constrained one (e.g. rotating the view when\r\n * the snap angle is 0), an animation will be triggered at the interaction end to\r\n * put back the view to a stable state;\r\n *\r\n * @api\r\n */ class $70364d0195659942$var$View extends (0, $b68b3d6e32e3074a$export$2e2bcd8739ae039) {\n    /**\r\n   * @param {ViewOptions} [options] View options.\r\n   */ constructor(options){\n        super();\n        /***\r\n     * @type {ViewOnSignature<import(\"./events\").EventsKey>}\r\n     */ this.on;\n        /***\r\n     * @type {ViewOnSignature<import(\"./events\").EventsKey>}\r\n     */ this.once;\n        /***\r\n     * @type {ViewOnSignature<void>}\r\n     */ this.un;\n        options = Object.assign({}, options);\n        /**\r\n     * @private\r\n     * @type {Array<number>}\r\n     */ this.hints_ = [\n            0,\n            0\n        ];\n        /**\r\n     * @private\r\n     * @type {Array<Array<Animation>>}\r\n     */ this.animations_ = [];\n        /**\r\n     * @private\r\n     * @type {number|undefined}\r\n     */ this.updateAnimationKey_;\n        /**\r\n     * @private\r\n     * @const\r\n     * @type {import(\"./proj/Projection.js\").default}\r\n     */ this.projection_ = (0, $9c4744460e43e41b$export$549167224996a0fb)(options.projection, 'EPSG:3857');\n        /**\r\n     * @private\r\n     * @type {import(\"./size.js\").Size}\r\n     */ this.viewportSize_ = [\n            100,\n            100\n        ];\n        /**\r\n     * @private\r\n     * @type {import(\"./coordinate.js\").Coordinate|undefined}\r\n     */ this.targetCenter_ = null;\n        /**\r\n     * @private\r\n     * @type {number|undefined}\r\n     */ this.targetResolution_;\n        /**\r\n     * @private\r\n     * @type {number|undefined}\r\n     */ this.targetRotation_;\n        /**\r\n     * @private\r\n     * @type {import(\"./coordinate.js\").Coordinate}\r\n     */ this.nextCenter_ = null;\n        /**\r\n     * @private\r\n     * @type {number}\r\n     */ this.nextResolution_;\n        /**\r\n     * @private\r\n     * @type {number}\r\n     */ this.nextRotation_;\n        /**\r\n     * @private\r\n     * @type {import(\"./coordinate.js\").Coordinate|undefined}\r\n     */ this.cancelAnchor_ = undefined;\n        if (options.projection) (0, $9c4744460e43e41b$export$ed949affbc7c4223)();\n        if (options.center) options.center = (0, $9c4744460e43e41b$export$d4b8ec0b96db1ee2)(options.center, this.projection_);\n        if (options.extent) options.extent = (0, $9c4744460e43e41b$export$494be3a3a25689ca)(options.extent, this.projection_);\n        this.applyOptions_(options);\n    }\n    /**\r\n   * Set up the view with the given options.\r\n   * @param {ViewOptions} options View options.\r\n   */ applyOptions_(options) {\n        const properties = Object.assign({}, options);\n        for(const key in 0, $d35baefbe89be4c5$export$2e2bcd8739ae039)delete properties[key];\n        this.setProperties(properties, true);\n        const resolutionConstraintInfo = $70364d0195659942$export$c68d65f9148da196(options);\n        /**\r\n     * @private\r\n     * @type {number}\r\n     */ this.maxResolution_ = resolutionConstraintInfo.maxResolution;\n        /**\r\n     * @private\r\n     * @type {number}\r\n     */ this.minResolution_ = resolutionConstraintInfo.minResolution;\n        /**\r\n     * @private\r\n     * @type {number}\r\n     */ this.zoomFactor_ = resolutionConstraintInfo.zoomFactor;\n        /**\r\n     * @private\r\n     * @type {Array<number>|undefined}\r\n     */ this.resolutions_ = options.resolutions;\n        /**\r\n     * @type {Array<number>|undefined}\r\n     * @private\r\n     */ this.padding_ = options.padding;\n        /**\r\n     * @private\r\n     * @type {number}\r\n     */ this.minZoom_ = resolutionConstraintInfo.minZoom;\n        const centerConstraint = $70364d0195659942$export$964345001ee9ac52(options);\n        const resolutionConstraint = resolutionConstraintInfo.constraint;\n        const rotationConstraint = $70364d0195659942$export$4eeaa08dd550e3c0(options);\n        /**\r\n     * @private\r\n     * @type {Constraints}\r\n     */ this.constraints_ = {\n            center: centerConstraint,\n            resolution: resolutionConstraint,\n            rotation: rotationConstraint\n        };\n        this.setRotation(options.rotation !== undefined ? options.rotation : 0);\n        this.setCenterInternal(options.center !== undefined ? options.center : null);\n        if (options.resolution !== undefined) this.setResolution(options.resolution);\n        else if (options.zoom !== undefined) this.setZoom(options.zoom);\n    }\n    /**\r\n   * Padding (in css pixels).\r\n   * If the map viewport is partially covered with other content (overlays) along\r\n   * its edges, this setting allows to shift the center of the viewport away from that\r\n   * content. The order of the values in the array is top, right, bottom, left.\r\n   * The default is no padding, which is equivalent to `[0, 0, 0, 0]`.\r\n   * @type {Array<number>|undefined}\r\n   * @api\r\n   */ get padding() {\n        return this.padding_;\n    }\n    set padding(padding) {\n        let oldPadding = this.padding_;\n        this.padding_ = padding;\n        const center = this.getCenterInternal();\n        if (center) {\n            const newPadding = padding || [\n                0,\n                0,\n                0,\n                0\n            ];\n            oldPadding = oldPadding || [\n                0,\n                0,\n                0,\n                0\n            ];\n            const resolution = this.getResolution();\n            const offsetX = resolution / 2 * (newPadding[3] - oldPadding[3] + oldPadding[1] - newPadding[1]);\n            const offsetY = resolution / 2 * (newPadding[0] - oldPadding[0] + oldPadding[2] - newPadding[2]);\n            this.setCenterInternal([\n                center[0] + offsetX,\n                center[1] - offsetY\n            ]);\n        }\n    }\n    /**\r\n   * Get an updated version of the view options used to construct the view.  The\r\n   * current resolution (or zoom), center, and rotation are applied to any stored\r\n   * options.  The provided options can be used to apply new min/max zoom or\r\n   * resolution limits.\r\n   * @param {ViewOptions} newOptions New options to be applied.\r\n   * @return {ViewOptions} New options updated with the current view state.\r\n   */ getUpdatedOptions_(newOptions) {\n        const options = this.getProperties();\n        // preserve resolution (or zoom)\n        if (options.resolution !== undefined) options.resolution = this.getResolution();\n        else options.zoom = this.getZoom();\n        // preserve center\n        options.center = this.getCenterInternal();\n        // preserve rotation\n        options.rotation = this.getRotation();\n        return Object.assign({}, options, newOptions);\n    }\n    /**\r\n   * Animate the view.  The view's center, zoom (or resolution), and rotation\r\n   * can be animated for smooth transitions between view states.  For example,\r\n   * to animate the view to a new zoom level:\r\n   *\r\n   *     view.animate({zoom: view.getZoom() + 1});\r\n   *\r\n   * By default, the animation lasts one second and uses in-and-out easing.  You\r\n   * can customize this behavior by including `duration` (in milliseconds) and\r\n   * `easing` options (see {@link module:ol/easing}).\r\n   *\r\n   * To chain together multiple animations, call the method with multiple\r\n   * animation objects.  For example, to first zoom and then pan:\r\n   *\r\n   *     view.animate({zoom: 10}, {center: [0, 0]});\r\n   *\r\n   * If you provide a function as the last argument to the animate method, it\r\n   * will get called at the end of an animation series.  The callback will be\r\n   * called with `true` if the animation series completed on its own or `false`\r\n   * if it was cancelled.\r\n   *\r\n   * Animations are cancelled by user interactions (e.g. dragging the map) or by\r\n   * calling `view.setCenter()`, `view.setResolution()`, or `view.setRotation()`\r\n   * (or another method that calls one of these).\r\n   *\r\n   * @param {...(AnimationOptions|function(boolean): void)} var_args Animation\r\n   *     options.  Multiple animations can be run in series by passing multiple\r\n   *     options objects.  To run multiple animations in parallel, call the method\r\n   *     multiple times.  An optional callback can be provided as a final\r\n   *     argument.  The callback will be called with a boolean indicating whether\r\n   *     the animation completed without being cancelled.\r\n   * @api\r\n   */ animate(var_args) {\n        if (this.isDef() && !this.getAnimating()) this.resolveConstraints(0);\n        const args = new Array(arguments.length);\n        for(let i = 0; i < args.length; ++i){\n            let options = arguments[i];\n            if (options.center) {\n                options = Object.assign({}, options);\n                options.center = (0, $9c4744460e43e41b$export$d4b8ec0b96db1ee2)(options.center, this.getProjection());\n            }\n            if (options.anchor) {\n                options = Object.assign({}, options);\n                options.anchor = (0, $9c4744460e43e41b$export$d4b8ec0b96db1ee2)(options.anchor, this.getProjection());\n            }\n            args[i] = options;\n        }\n        this.animateInternal.apply(this, args);\n    }\n    /**\r\n   * @param {...(AnimationOptions|function(boolean): void)} var_args Animation options.\r\n   */ animateInternal(var_args) {\n        let animationCount = arguments.length;\n        let callback;\n        if (animationCount > 1 && typeof arguments[animationCount - 1] === 'function') {\n            callback = arguments[animationCount - 1];\n            --animationCount;\n        }\n        let i = 0;\n        for(; i < animationCount && !this.isDef(); ++i){\n            // if view properties are not yet set, shortcut to the final state\n            const state = arguments[i];\n            if (state.center) this.setCenterInternal(state.center);\n            if (state.zoom !== undefined) this.setZoom(state.zoom);\n            else if (state.resolution) this.setResolution(state.resolution);\n            if (state.rotation !== undefined) this.setRotation(state.rotation);\n        }\n        if (i === animationCount) {\n            if (callback) $70364d0195659942$var$animationCallback(callback, true);\n            return;\n        }\n        let start = Date.now();\n        let center = this.targetCenter_.slice();\n        let resolution = this.targetResolution_;\n        let rotation = this.targetRotation_;\n        const series = [];\n        for(; i < animationCount; ++i){\n            const options = /** @type {AnimationOptions} */ arguments[i];\n            const animation = {\n                start: start,\n                complete: false,\n                anchor: options.anchor,\n                duration: options.duration !== undefined ? options.duration : 1000,\n                easing: options.easing || (0, $c7ccf7e681a9b333$export$9b47139b511b56e4),\n                callback: callback\n            };\n            if (options.center) {\n                animation.sourceCenter = center;\n                animation.targetCenter = options.center.slice();\n                center = animation.targetCenter;\n            }\n            if (options.zoom !== undefined) {\n                animation.sourceResolution = resolution;\n                animation.targetResolution = this.getResolutionForZoom(options.zoom);\n                resolution = animation.targetResolution;\n            } else if (options.resolution) {\n                animation.sourceResolution = resolution;\n                animation.targetResolution = options.resolution;\n                resolution = animation.targetResolution;\n            }\n            if (options.rotation !== undefined) {\n                animation.sourceRotation = rotation;\n                const delta = (0, $6b000a049d919fe5$export$ba467bec01d66def)(options.rotation - rotation + Math.PI, 2 * Math.PI) - Math.PI;\n                animation.targetRotation = rotation + delta;\n                rotation = animation.targetRotation;\n            }\n            // check if animation is a no-op\n            if ($70364d0195659942$export$ee75376562060184(animation)) animation.complete = true;\n            else start += animation.duration;\n            series.push(animation);\n        }\n        this.animations_.push(series);\n        this.setHint((0, $7d362782b4ccb93d$export$2e2bcd8739ae039).ANIMATING, 1);\n        this.updateAnimations_();\n    }\n    /**\r\n   * Determine if the view is being animated.\r\n   * @return {boolean} The view is being animated.\r\n   * @api\r\n   */ getAnimating() {\n        return this.hints_[(0, $7d362782b4ccb93d$export$2e2bcd8739ae039).ANIMATING] > 0;\n    }\n    /**\r\n   * Determine if the user is interacting with the view, such as panning or zooming.\r\n   * @return {boolean} The view is being interacted with.\r\n   * @api\r\n   */ getInteracting() {\n        return this.hints_[(0, $7d362782b4ccb93d$export$2e2bcd8739ae039).INTERACTING] > 0;\n    }\n    /**\r\n   * Cancel any ongoing animations.\r\n   * @api\r\n   */ cancelAnimations() {\n        this.setHint((0, $7d362782b4ccb93d$export$2e2bcd8739ae039).ANIMATING, -this.hints_[(0, $7d362782b4ccb93d$export$2e2bcd8739ae039).ANIMATING]);\n        let anchor;\n        for(let i = 0, ii = this.animations_.length; i < ii; ++i){\n            const series = this.animations_[i];\n            if (series[0].callback) $70364d0195659942$var$animationCallback(series[0].callback, false);\n            if (!anchor) for(let j = 0, jj = series.length; j < jj; ++j){\n                const animation = series[j];\n                if (!animation.complete) {\n                    anchor = animation.anchor;\n                    break;\n                }\n            }\n        }\n        this.animations_.length = 0;\n        this.cancelAnchor_ = anchor;\n        this.nextCenter_ = null;\n        this.nextResolution_ = NaN;\n        this.nextRotation_ = NaN;\n    }\n    /**\r\n   * Update all animations.\r\n   */ updateAnimations_() {\n        if (this.updateAnimationKey_ !== undefined) {\n            cancelAnimationFrame(this.updateAnimationKey_);\n            this.updateAnimationKey_ = undefined;\n        }\n        if (!this.getAnimating()) return;\n        const now = Date.now();\n        let more = false;\n        for(let i = this.animations_.length - 1; i >= 0; --i){\n            const series = this.animations_[i];\n            let seriesComplete = true;\n            for(let j = 0, jj = series.length; j < jj; ++j){\n                const animation = series[j];\n                if (animation.complete) continue;\n                const elapsed = now - animation.start;\n                let fraction = animation.duration > 0 ? elapsed / animation.duration : 1;\n                if (fraction >= 1) {\n                    animation.complete = true;\n                    fraction = 1;\n                } else seriesComplete = false;\n                const progress = animation.easing(fraction);\n                if (animation.sourceCenter) {\n                    const x0 = animation.sourceCenter[0];\n                    const y0 = animation.sourceCenter[1];\n                    const x1 = animation.targetCenter[0];\n                    const y1 = animation.targetCenter[1];\n                    this.nextCenter_ = animation.targetCenter;\n                    const x = x0 + progress * (x1 - x0);\n                    const y = y0 + progress * (y1 - y0);\n                    this.targetCenter_ = [\n                        x,\n                        y\n                    ];\n                }\n                if (animation.sourceResolution && animation.targetResolution) {\n                    const resolution = progress === 1 ? animation.targetResolution : animation.sourceResolution + progress * (animation.targetResolution - animation.sourceResolution);\n                    if (animation.anchor) {\n                        const size = this.getViewportSize_(this.getRotation());\n                        const constrainedResolution = this.constraints_.resolution(resolution, 0, size, true);\n                        this.targetCenter_ = this.calculateCenterZoom(constrainedResolution, animation.anchor);\n                    }\n                    this.nextResolution_ = animation.targetResolution;\n                    this.targetResolution_ = resolution;\n                    this.applyTargetState_(true);\n                }\n                if (animation.sourceRotation !== undefined && animation.targetRotation !== undefined) {\n                    const rotation = progress === 1 ? (0, $6b000a049d919fe5$export$ba467bec01d66def)(animation.targetRotation + Math.PI, 2 * Math.PI) - Math.PI : animation.sourceRotation + progress * (animation.targetRotation - animation.sourceRotation);\n                    if (animation.anchor) {\n                        const constrainedRotation = this.constraints_.rotation(rotation, true);\n                        this.targetCenter_ = this.calculateCenterRotate(constrainedRotation, animation.anchor);\n                    }\n                    this.nextRotation_ = animation.targetRotation;\n                    this.targetRotation_ = rotation;\n                }\n                this.applyTargetState_(true);\n                more = true;\n                if (!animation.complete) break;\n            }\n            if (seriesComplete) {\n                this.animations_[i] = null;\n                this.setHint((0, $7d362782b4ccb93d$export$2e2bcd8739ae039).ANIMATING, -1);\n                this.nextCenter_ = null;\n                this.nextResolution_ = NaN;\n                this.nextRotation_ = NaN;\n                const callback = series[0].callback;\n                if (callback) $70364d0195659942$var$animationCallback(callback, true);\n            }\n        }\n        // prune completed series\n        this.animations_ = this.animations_.filter(Boolean);\n        if (more && this.updateAnimationKey_ === undefined) this.updateAnimationKey_ = requestAnimationFrame(this.updateAnimations_.bind(this));\n    }\n    /**\r\n   * @param {number} rotation Target rotation.\r\n   * @param {import(\"./coordinate.js\").Coordinate} anchor Rotation anchor.\r\n   * @return {import(\"./coordinate.js\").Coordinate|undefined} Center for rotation and anchor.\r\n   */ calculateCenterRotate(rotation, anchor) {\n        let center;\n        const currentCenter = this.getCenterInternal();\n        if (currentCenter !== undefined) {\n            center = [\n                currentCenter[0] - anchor[0],\n                currentCenter[1] - anchor[1]\n            ];\n            (0, $1bd0a226f9a16141$export$bb628a54ab399bc9)(center, rotation - this.getRotation());\n            (0, $1bd0a226f9a16141$export$e16d8520af44a096)(center, anchor);\n        }\n        return center;\n    }\n    /**\r\n   * @param {number} resolution Target resolution.\r\n   * @param {import(\"./coordinate.js\").Coordinate} anchor Zoom anchor.\r\n   * @return {import(\"./coordinate.js\").Coordinate|undefined} Center for resolution and anchor.\r\n   */ calculateCenterZoom(resolution, anchor) {\n        let center;\n        const currentCenter = this.getCenterInternal();\n        const currentResolution = this.getResolution();\n        if (currentCenter !== undefined && currentResolution !== undefined) {\n            const x = anchor[0] - resolution * (anchor[0] - currentCenter[0]) / currentResolution;\n            const y = anchor[1] - resolution * (anchor[1] - currentCenter[1]) / currentResolution;\n            center = [\n                x,\n                y\n            ];\n        }\n        return center;\n    }\n    /**\r\n   * Returns the current viewport size.\r\n   * @private\r\n   * @param {number} [rotation] Take into account the rotation of the viewport when giving the size\r\n   * @return {import(\"./size.js\").Size} Viewport size or `[100, 100]` when no viewport is found.\r\n   */ getViewportSize_(rotation) {\n        const size = this.viewportSize_;\n        if (rotation) {\n            const w = size[0];\n            const h = size[1];\n            return [\n                Math.abs(w * Math.cos(rotation)) + Math.abs(h * Math.sin(rotation)),\n                Math.abs(w * Math.sin(rotation)) + Math.abs(h * Math.cos(rotation))\n            ];\n        }\n        return size;\n    }\n    /**\r\n   * Stores the viewport size on the view. The viewport size is not read every time from the DOM\r\n   * to avoid performance hit and layout reflow.\r\n   * This should be done on map size change.\r\n   * Note: the constraints are not resolved during an animation to avoid stopping it\r\n   * @param {import(\"./size.js\").Size} [size] Viewport size; if undefined, [100, 100] is assumed\r\n   */ setViewportSize(size) {\n        this.viewportSize_ = Array.isArray(size) ? size.slice() : [\n            100,\n            100\n        ];\n        if (!this.getAnimating()) this.resolveConstraints(0);\n    }\n    /**\r\n   * Get the view center.\r\n   * @return {import(\"./coordinate.js\").Coordinate|undefined} The center of the view.\r\n   * @observable\r\n   * @api\r\n   */ getCenter() {\n        const center = this.getCenterInternal();\n        if (!center) return center;\n        return (0, $9c4744460e43e41b$export$698f563af1ba02a5)(center, this.getProjection());\n    }\n    /**\r\n   * Get the view center without transforming to user projection.\r\n   * @return {import(\"./coordinate.js\").Coordinate|undefined} The center of the view.\r\n   */ getCenterInternal() {\n        return /** @type {import(\"./coordinate.js\").Coordinate|undefined} */ this.get((0, $d35baefbe89be4c5$export$2e2bcd8739ae039).CENTER);\n    }\n    /**\r\n   * @return {Constraints} Constraints.\r\n   */ getConstraints() {\n        return this.constraints_;\n    }\n    /**\r\n   * @return {boolean} Resolution constraint is set\r\n   */ getConstrainResolution() {\n        return this.get('constrainResolution');\n    }\n    /**\r\n   * @param {Array<number>} [hints] Destination array.\r\n   * @return {Array<number>} Hint.\r\n   */ getHints(hints) {\n        if (hints !== undefined) {\n            hints[0] = this.hints_[0];\n            hints[1] = this.hints_[1];\n            return hints;\n        }\n        return this.hints_.slice();\n    }\n    /**\r\n   * Calculate the extent for the current view state and the passed box size.\r\n   * @param {import(\"./size.js\").Size} [size] The pixel dimensions of the box\r\n   * into which the calculated extent should fit. Defaults to the size of the\r\n   * map the view is associated with.\r\n   * If no map or multiple maps are connected to the view, provide the desired\r\n   * box size (e.g. `map.getSize()`).\r\n   * @return {import(\"./extent.js\").Extent} Extent.\r\n   * @api\r\n   */ calculateExtent(size) {\n        const extent = this.calculateExtentInternal(size);\n        return (0, $9c4744460e43e41b$export$96bfd09e2cffb006)(extent, this.getProjection());\n    }\n    /**\r\n   * @param {import(\"./size.js\").Size} [size] Box pixel size. If not provided,\r\n   * the map's last known viewport size will be used.\r\n   * @return {import(\"./extent.js\").Extent} Extent.\r\n   */ calculateExtentInternal(size) {\n        size = size || this.getViewportSizeMinusPadding_();\n        const center = /** @type {!import(\"./coordinate.js\").Coordinate} */ this.getCenterInternal();\n        (0, $35d5ec884318008e$export$a7a9523472993e97)(center, 'The view center is not defined');\n        const resolution = /** @type {!number} */ this.getResolution();\n        (0, $35d5ec884318008e$export$a7a9523472993e97)(resolution !== undefined, 'The view resolution is not defined');\n        const rotation = /** @type {!number} */ this.getRotation();\n        (0, $35d5ec884318008e$export$a7a9523472993e97)(rotation !== undefined, 'The view rotation is not defined');\n        return (0, $6da4c8ed3074c92b$export$13ba650faf8308)(center, resolution, rotation, size);\n    }\n    /**\r\n   * Get the maximum resolution of the view.\r\n   * @return {number} The maximum resolution of the view.\r\n   * @api\r\n   */ getMaxResolution() {\n        return this.maxResolution_;\n    }\n    /**\r\n   * Get the minimum resolution of the view.\r\n   * @return {number} The minimum resolution of the view.\r\n   * @api\r\n   */ getMinResolution() {\n        return this.minResolution_;\n    }\n    /**\r\n   * Get the maximum zoom level for the view.\r\n   * @return {number} The maximum zoom level.\r\n   * @api\r\n   */ getMaxZoom() {\n        return /** @type {number} */ this.getZoomForResolution(this.minResolution_);\n    }\n    /**\r\n   * Set a new maximum zoom level for the view.\r\n   * @param {number} zoom The maximum zoom level.\r\n   * @api\r\n   */ setMaxZoom(zoom) {\n        this.applyOptions_(this.getUpdatedOptions_({\n            maxZoom: zoom\n        }));\n    }\n    /**\r\n   * Get the minimum zoom level for the view.\r\n   * @return {number} The minimum zoom level.\r\n   * @api\r\n   */ getMinZoom() {\n        return /** @type {number} */ this.getZoomForResolution(this.maxResolution_);\n    }\n    /**\r\n   * Set a new minimum zoom level for the view.\r\n   * @param {number} zoom The minimum zoom level.\r\n   * @api\r\n   */ setMinZoom(zoom) {\n        this.applyOptions_(this.getUpdatedOptions_({\n            minZoom: zoom\n        }));\n    }\n    /**\r\n   * Set whether the view should allow intermediary zoom levels.\r\n   * @param {boolean} enabled Whether the resolution is constrained.\r\n   * @api\r\n   */ setConstrainResolution(enabled) {\n        this.applyOptions_(this.getUpdatedOptions_({\n            constrainResolution: enabled\n        }));\n    }\n    /**\r\n   * Get the view projection.\r\n   * @return {import(\"./proj/Projection.js\").default} The projection of the view.\r\n   * @api\r\n   */ getProjection() {\n        return this.projection_;\n    }\n    /**\r\n   * Get the view resolution.\r\n   * @return {number|undefined} The resolution of the view.\r\n   * @observable\r\n   * @api\r\n   */ getResolution() {\n        return /** @type {number|undefined} */ this.get((0, $d35baefbe89be4c5$export$2e2bcd8739ae039).RESOLUTION);\n    }\n    /**\r\n   * Get the resolutions for the view. This returns the array of resolutions\r\n   * passed to the constructor of the View, or undefined if none were given.\r\n   * @return {Array<number>|undefined} The resolutions of the view.\r\n   * @api\r\n   */ getResolutions() {\n        return this.resolutions_;\n    }\n    /**\r\n   * Get the resolution for a provided extent (in map units) and size (in pixels).\r\n   * @param {import(\"./extent.js\").Extent} extent Extent.\r\n   * @param {import(\"./size.js\").Size} [size] Box pixel size.\r\n   * @return {number} The resolution at which the provided extent will render at\r\n   *     the given size.\r\n   * @api\r\n   */ getResolutionForExtent(extent, size) {\n        return this.getResolutionForExtentInternal((0, $9c4744460e43e41b$export$494be3a3a25689ca)(extent, this.getProjection()), size);\n    }\n    /**\r\n   * Get the resolution for a provided extent (in map units) and size (in pixels).\r\n   * @param {import(\"./extent.js\").Extent} extent Extent.\r\n   * @param {import(\"./size.js\").Size} [size] Box pixel size.\r\n   * @return {number} The resolution at which the provided extent will render at\r\n   *     the given size.\r\n   */ getResolutionForExtentInternal(extent, size) {\n        size = size || this.getViewportSizeMinusPadding_();\n        const xResolution = (0, $6da4c8ed3074c92b$export$3c49c185de0c2bfc)(extent) / size[0];\n        const yResolution = (0, $6da4c8ed3074c92b$export$c08559766941f856)(extent) / size[1];\n        return Math.max(xResolution, yResolution);\n    }\n    /**\r\n   * Return a function that returns a value between 0 and 1 for a\r\n   * resolution. Exponential scaling is assumed.\r\n   * @param {number} [power] Power.\r\n   * @return {function(number): number} Resolution for value function.\r\n   */ getResolutionForValueFunction(power) {\n        power = power || 2;\n        const maxResolution = this.getConstrainedResolution(this.maxResolution_);\n        const minResolution = this.minResolution_;\n        const max = Math.log(maxResolution / minResolution) / Math.log(power);\n        return(/**\r\n       * @param {number} value Value.\r\n       * @return {number} Resolution.\r\n       */ function(value) {\n            const resolution = maxResolution / Math.pow(power, value * max);\n            return resolution;\n        });\n    }\n    /**\r\n   * Get the view rotation.\r\n   * @return {number} The rotation of the view in radians.\r\n   * @observable\r\n   * @api\r\n   */ getRotation() {\n        return /** @type {number} */ this.get((0, $d35baefbe89be4c5$export$2e2bcd8739ae039).ROTATION);\n    }\n    /**\r\n   * Return a function that returns a resolution for a value between\r\n   * 0 and 1. Exponential scaling is assumed.\r\n   * @param {number} [power] Power.\r\n   * @return {function(number): number} Value for resolution function.\r\n   */ getValueForResolutionFunction(power) {\n        const logPower = Math.log(power || 2);\n        const maxResolution = this.getConstrainedResolution(this.maxResolution_);\n        const minResolution = this.minResolution_;\n        const max = Math.log(maxResolution / minResolution) / logPower;\n        return(/**\r\n       * @param {number} resolution Resolution.\r\n       * @return {number} Value.\r\n       */ function(resolution) {\n            const value = Math.log(maxResolution / resolution) / logPower / max;\n            return value;\n        });\n    }\n    /**\r\n   * Returns the size of the viewport minus padding.\r\n   * @private\r\n   * @param {number} [rotation] Take into account the rotation of the viewport when giving the size\r\n   * @return {import(\"./size.js\").Size} Viewport size reduced by the padding.\r\n   */ getViewportSizeMinusPadding_(rotation) {\n        let size = this.getViewportSize_(rotation);\n        const padding = this.padding_;\n        if (padding) size = [\n            size[0] - padding[1] - padding[3],\n            size[1] - padding[0] - padding[2]\n        ];\n        return size;\n    }\n    /**\r\n   * @return {State} View state.\r\n   */ getState() {\n        const projection = this.getProjection();\n        const resolution = this.getResolution();\n        const rotation = this.getRotation();\n        let center = /** @type {import(\"./coordinate.js\").Coordinate} */ this.getCenterInternal();\n        const padding = this.padding_;\n        if (padding) {\n            const reducedSize = this.getViewportSizeMinusPadding_();\n            center = $70364d0195659942$var$calculateCenterOn(center, this.getViewportSize_(), [\n                reducedSize[0] / 2 + padding[3],\n                reducedSize[1] / 2 + padding[0]\n            ], resolution, rotation);\n        }\n        return {\n            center: center.slice(0),\n            projection: projection !== undefined ? projection : null,\n            resolution: resolution,\n            nextCenter: this.nextCenter_,\n            nextResolution: this.nextResolution_,\n            nextRotation: this.nextRotation_,\n            rotation: rotation,\n            zoom: this.getZoom()\n        };\n    }\n    /**\r\n   * @return {ViewStateLayerStateExtent} Like `FrameState`, but just `viewState` and `extent`.\r\n   */ getViewStateAndExtent() {\n        return {\n            viewState: this.getState(),\n            extent: this.calculateExtent()\n        };\n    }\n    /**\r\n   * Get the current zoom level. This method may return non-integer zoom levels\r\n   * if the view does not constrain the resolution, or if an interaction or\r\n   * animation is underway.\r\n   * @return {number|undefined} Zoom.\r\n   * @api\r\n   */ getZoom() {\n        let zoom;\n        const resolution = this.getResolution();\n        if (resolution !== undefined) zoom = this.getZoomForResolution(resolution);\n        return zoom;\n    }\n    /**\r\n   * Get the zoom level for a resolution.\r\n   * @param {number} resolution The resolution.\r\n   * @return {number|undefined} The zoom level for the provided resolution.\r\n   * @api\r\n   */ getZoomForResolution(resolution) {\n        let offset = this.minZoom_ || 0;\n        let max, zoomFactor;\n        if (this.resolutions_) {\n            const nearest = (0, $b998d41b678ed5d1$export$8a3786cc03fdb777)(this.resolutions_, resolution, 1);\n            offset = nearest;\n            max = this.resolutions_[nearest];\n            if (nearest == this.resolutions_.length - 1) zoomFactor = 2;\n            else zoomFactor = max / this.resolutions_[nearest + 1];\n        } else {\n            max = this.maxResolution_;\n            zoomFactor = this.zoomFactor_;\n        }\n        return offset + Math.log(max / resolution) / Math.log(zoomFactor);\n    }\n    /**\r\n   * Get the resolution for a zoom level.\r\n   * @param {number} zoom Zoom level.\r\n   * @return {number} The view resolution for the provided zoom level.\r\n   * @api\r\n   */ getResolutionForZoom(zoom) {\n        if (this.resolutions_?.length) {\n            if (this.resolutions_.length === 1) return this.resolutions_[0];\n            const baseLevel = (0, $6b000a049d919fe5$export$7d15b64cf5a3a4c4)(Math.floor(zoom), 0, this.resolutions_.length - 2);\n            const zoomFactor = this.resolutions_[baseLevel] / this.resolutions_[baseLevel + 1];\n            return this.resolutions_[baseLevel] / Math.pow(zoomFactor, (0, $6b000a049d919fe5$export$7d15b64cf5a3a4c4)(zoom - baseLevel, 0, 1));\n        }\n        return this.maxResolution_ / Math.pow(this.zoomFactor_, zoom - this.minZoom_);\n    }\n    /**\r\n   * Fit the given geometry or extent based on the given map size and border.\r\n   * The size is pixel dimensions of the box to fit the extent into.\r\n   * In most cases you will want to use the map size, that is `map.getSize()`.\r\n   * Takes care of the map angle.\r\n   * @param {import(\"./geom/SimpleGeometry.js\").default|import(\"./extent.js\").Extent} geometryOrExtent The geometry or\r\n   *     extent to fit the view to.\r\n   * @param {FitOptions} [options] Options.\r\n   * @api\r\n   */ fit(geometryOrExtent, options) {\n        /** @type {import(\"./geom/SimpleGeometry.js\").default} */ let geometry;\n        (0, $35d5ec884318008e$export$a7a9523472993e97)(Array.isArray(geometryOrExtent) || typeof /** @type {?} */ geometryOrExtent.getSimplifiedGeometry === 'function', 'Invalid extent or geometry provided as `geometry`');\n        if (Array.isArray(geometryOrExtent)) {\n            (0, $35d5ec884318008e$export$a7a9523472993e97)(!(0, $6da4c8ed3074c92b$export$dd1bc94b04021eeb)(geometryOrExtent), 'Cannot fit empty extent provided as `geometry`');\n            const extent = (0, $9c4744460e43e41b$export$494be3a3a25689ca)(geometryOrExtent, this.getProjection());\n            geometry = (0, $40aa8d43bbe572bf$export$c16b671815801c75)(extent);\n        } else if (geometryOrExtent.getType() === 'Circle') {\n            const extent = (0, $9c4744460e43e41b$export$494be3a3a25689ca)(geometryOrExtent.getExtent(), this.getProjection());\n            geometry = (0, $40aa8d43bbe572bf$export$c16b671815801c75)(extent);\n            geometry.rotate(this.getRotation(), (0, $6da4c8ed3074c92b$export$c91255cadecfe081)(extent));\n        } else {\n            const userProjection = (0, $9c4744460e43e41b$export$3973b77d5f6f2790)();\n            if (userProjection) geometry = /** @type {import(\"./geom/SimpleGeometry.js\").default} */ geometryOrExtent.clone().transform(userProjection, this.getProjection());\n            else geometry = geometryOrExtent;\n        }\n        this.fitInternal(geometry, options);\n    }\n    /**\r\n   * Calculate rotated extent\r\n   * @param {import(\"./geom/SimpleGeometry.js\").default} geometry The geometry.\r\n   * @return {import(\"./extent\").Extent} The rotated extent for the geometry.\r\n   */ rotatedExtentForGeometry(geometry) {\n        const rotation = this.getRotation();\n        const cosAngle = Math.cos(rotation);\n        const sinAngle = Math.sin(-rotation);\n        const coords = geometry.getFlatCoordinates();\n        const stride = geometry.getStride();\n        let minRotX = Infinity;\n        let minRotY = Infinity;\n        let maxRotX = -Infinity;\n        let maxRotY = -Infinity;\n        for(let i = 0, ii = coords.length; i < ii; i += stride){\n            const rotX = coords[i] * cosAngle - coords[i + 1] * sinAngle;\n            const rotY = coords[i] * sinAngle + coords[i + 1] * cosAngle;\n            minRotX = Math.min(minRotX, rotX);\n            minRotY = Math.min(minRotY, rotY);\n            maxRotX = Math.max(maxRotX, rotX);\n            maxRotY = Math.max(maxRotY, rotY);\n        }\n        return [\n            minRotX,\n            minRotY,\n            maxRotX,\n            maxRotY\n        ];\n    }\n    /**\r\n   * @param {import(\"./geom/SimpleGeometry.js\").default} geometry The geometry.\r\n   * @param {FitOptions} [options] Options.\r\n   */ fitInternal(geometry, options) {\n        options = options || {};\n        let size = options.size;\n        if (!size) size = this.getViewportSizeMinusPadding_();\n        const padding = options.padding !== undefined ? options.padding : [\n            0,\n            0,\n            0,\n            0\n        ];\n        const nearest = options.nearest !== undefined ? options.nearest : false;\n        let minResolution;\n        if (options.minResolution !== undefined) minResolution = options.minResolution;\n        else if (options.maxZoom !== undefined) minResolution = this.getResolutionForZoom(options.maxZoom);\n        else minResolution = 0;\n        const rotatedExtent = this.rotatedExtentForGeometry(geometry);\n        // calculate resolution\n        let resolution = this.getResolutionForExtentInternal(rotatedExtent, [\n            size[0] - padding[1] - padding[3],\n            size[1] - padding[0] - padding[2]\n        ]);\n        resolution = isNaN(resolution) ? minResolution : Math.max(resolution, minResolution);\n        resolution = this.getConstrainedResolution(resolution, nearest ? 0 : 1);\n        // calculate center\n        const rotation = this.getRotation();\n        const sinAngle = Math.sin(rotation);\n        const cosAngle = Math.cos(rotation);\n        const centerRot = (0, $6da4c8ed3074c92b$export$c91255cadecfe081)(rotatedExtent);\n        centerRot[0] += (padding[1] - padding[3]) / 2 * resolution;\n        centerRot[1] += (padding[0] - padding[2]) / 2 * resolution;\n        const centerX = centerRot[0] * cosAngle - centerRot[1] * sinAngle;\n        const centerY = centerRot[1] * cosAngle + centerRot[0] * sinAngle;\n        const center = this.getConstrainedCenter([\n            centerX,\n            centerY\n        ], resolution);\n        const callback = options.callback ? options.callback : (0, $013a1733c226ec50$export$1cd1943b3a73bbe8);\n        if (options.duration !== undefined) this.animateInternal({\n            resolution: resolution,\n            center: center,\n            duration: options.duration,\n            easing: options.easing\n        }, callback);\n        else {\n            this.targetResolution_ = resolution;\n            this.targetCenter_ = center;\n            this.applyTargetState_(false, true);\n            $70364d0195659942$var$animationCallback(callback, true);\n        }\n    }\n    /**\r\n   * Center on coordinate and view position.\r\n   * @param {import(\"./coordinate.js\").Coordinate} coordinate Coordinate.\r\n   * @param {import(\"./size.js\").Size} size Box pixel size.\r\n   * @param {import(\"./pixel.js\").Pixel} position Position on the view to center on.\r\n   * @api\r\n   */ centerOn(coordinate, size, position) {\n        this.centerOnInternal((0, $9c4744460e43e41b$export$d4b8ec0b96db1ee2)(coordinate, this.getProjection()), size, position);\n    }\n    /**\r\n   * @param {import(\"./coordinate.js\").Coordinate} coordinate Coordinate.\r\n   * @param {import(\"./size.js\").Size} size Box pixel size.\r\n   * @param {import(\"./pixel.js\").Pixel} position Position on the view to center on.\r\n   */ centerOnInternal(coordinate, size, position) {\n        this.setCenterInternal($70364d0195659942$var$calculateCenterOn(coordinate, size, position, this.getResolution(), this.getRotation()));\n    }\n    /**\r\n   * Calculates the shift between map and viewport center.\r\n   * @param {import(\"./coordinate.js\").Coordinate} center Center.\r\n   * @param {number} resolution Resolution.\r\n   * @param {number} rotation Rotation.\r\n   * @param {import(\"./size.js\").Size} size Size.\r\n   * @return {Array<number>|undefined} Center shift.\r\n   */ calculateCenterShift(center, resolution, rotation, size) {\n        let centerShift;\n        const padding = this.padding_;\n        if (padding && center) {\n            const reducedSize = this.getViewportSizeMinusPadding_(-rotation);\n            const shiftedCenter = $70364d0195659942$var$calculateCenterOn(center, size, [\n                reducedSize[0] / 2 + padding[3],\n                reducedSize[1] / 2 + padding[0]\n            ], resolution, rotation);\n            centerShift = [\n                center[0] - shiftedCenter[0],\n                center[1] - shiftedCenter[1]\n            ];\n        }\n        return centerShift;\n    }\n    /**\r\n   * @return {boolean} Is defined.\r\n   */ isDef() {\n        return !!this.getCenterInternal() && this.getResolution() !== undefined;\n    }\n    /**\r\n   * Adds relative coordinates to the center of the view. Any extent constraint will apply.\r\n   * @param {import(\"./coordinate.js\").Coordinate} deltaCoordinates Relative value to add.\r\n   * @api\r\n   */ adjustCenter(deltaCoordinates) {\n        const center = (0, $9c4744460e43e41b$export$698f563af1ba02a5)(this.targetCenter_, this.getProjection());\n        this.setCenter([\n            center[0] + deltaCoordinates[0],\n            center[1] + deltaCoordinates[1]\n        ]);\n    }\n    /**\r\n   * Adds relative coordinates to the center of the view. Any extent constraint will apply.\r\n   * @param {import(\"./coordinate.js\").Coordinate} deltaCoordinates Relative value to add.\r\n   */ adjustCenterInternal(deltaCoordinates) {\n        const center = this.targetCenter_;\n        this.setCenterInternal([\n            center[0] + deltaCoordinates[0],\n            center[1] + deltaCoordinates[1]\n        ]);\n    }\n    /**\r\n   * Multiply the view resolution by a ratio, optionally using an anchor. Any resolution\r\n   * constraint will apply.\r\n   * @param {number} ratio The ratio to apply on the view resolution.\r\n   * @param {import(\"./coordinate.js\").Coordinate} [anchor] The origin of the transformation.\r\n   * @api\r\n   */ adjustResolution(ratio, anchor) {\n        anchor = anchor && (0, $9c4744460e43e41b$export$d4b8ec0b96db1ee2)(anchor, this.getProjection());\n        this.adjustResolutionInternal(ratio, anchor);\n    }\n    /**\r\n   * Multiply the view resolution by a ratio, optionally using an anchor. Any resolution\r\n   * constraint will apply.\r\n   * @param {number} ratio The ratio to apply on the view resolution.\r\n   * @param {import(\"./coordinate.js\").Coordinate} [anchor] The origin of the transformation.\r\n   */ adjustResolutionInternal(ratio, anchor) {\n        const isMoving = this.getAnimating() || this.getInteracting();\n        const size = this.getViewportSize_(this.getRotation());\n        const newResolution = this.constraints_.resolution(this.targetResolution_ * ratio, 0, size, isMoving);\n        if (anchor) this.targetCenter_ = this.calculateCenterZoom(newResolution, anchor);\n        this.targetResolution_ *= ratio;\n        this.applyTargetState_();\n    }\n    /**\r\n   * Adds a value to the view zoom level, optionally using an anchor. Any resolution\r\n   * constraint will apply.\r\n   * @param {number} delta Relative value to add to the zoom level.\r\n   * @param {import(\"./coordinate.js\").Coordinate} [anchor] The origin of the transformation.\r\n   * @api\r\n   */ adjustZoom(delta, anchor) {\n        this.adjustResolution(Math.pow(this.zoomFactor_, -delta), anchor);\n    }\n    /**\r\n   * Adds a value to the view rotation, optionally using an anchor. Any rotation\r\n   * constraint will apply.\r\n   * @param {number} delta Relative value to add to the zoom rotation, in radians.\r\n   * @param {import(\"./coordinate.js\").Coordinate} [anchor] The rotation center.\r\n   * @api\r\n   */ adjustRotation(delta, anchor) {\n        if (anchor) anchor = (0, $9c4744460e43e41b$export$d4b8ec0b96db1ee2)(anchor, this.getProjection());\n        this.adjustRotationInternal(delta, anchor);\n    }\n    /**\r\n   * @param {number} delta Relative value to add to the zoom rotation, in radians.\r\n   * @param {import(\"./coordinate.js\").Coordinate} [anchor] The rotation center.\r\n   */ adjustRotationInternal(delta, anchor) {\n        const isMoving = this.getAnimating() || this.getInteracting();\n        const newRotation = this.constraints_.rotation(this.targetRotation_ + delta, isMoving);\n        if (anchor) this.targetCenter_ = this.calculateCenterRotate(newRotation, anchor);\n        this.targetRotation_ += delta;\n        this.applyTargetState_();\n    }\n    /**\r\n   * Set the center of the current view. Any extent constraint will apply.\r\n   * @param {import(\"./coordinate.js\").Coordinate|undefined} center The center of the view.\r\n   * @observable\r\n   * @api\r\n   */ setCenter(center) {\n        this.setCenterInternal(center ? (0, $9c4744460e43e41b$export$d4b8ec0b96db1ee2)(center, this.getProjection()) : center);\n    }\n    /**\r\n   * Set the center using the view projection (not the user projection).\r\n   * @param {import(\"./coordinate.js\").Coordinate|undefined} center The center of the view.\r\n   */ setCenterInternal(center) {\n        this.targetCenter_ = center;\n        this.applyTargetState_();\n    }\n    /**\r\n   * @param {import(\"./ViewHint.js\").default} hint Hint.\r\n   * @param {number} delta Delta.\r\n   * @return {number} New value.\r\n   */ setHint(hint, delta) {\n        this.hints_[hint] += delta;\n        this.changed();\n        return this.hints_[hint];\n    }\n    /**\r\n   * Set the resolution for this view. Any resolution constraint will apply.\r\n   * @param {number|undefined} resolution The resolution of the view.\r\n   * @observable\r\n   * @api\r\n   */ setResolution(resolution) {\n        this.targetResolution_ = resolution;\n        this.applyTargetState_();\n    }\n    /**\r\n   * Set the rotation for this view. Any rotation constraint will apply.\r\n   * @param {number} rotation The rotation of the view in radians.\r\n   * @observable\r\n   * @api\r\n   */ setRotation(rotation) {\n        this.targetRotation_ = rotation;\n        this.applyTargetState_();\n    }\n    /**\r\n   * Zoom to a specific zoom level. Any resolution constrain will apply.\r\n   * @param {number} zoom Zoom level.\r\n   * @api\r\n   */ setZoom(zoom) {\n        this.setResolution(this.getResolutionForZoom(zoom));\n    }\n    /**\r\n   * Recompute rotation/resolution/center based on target values.\r\n   * Note: we have to compute rotation first, then resolution and center considering that\r\n   * parameters can influence one another in case a view extent constraint is present.\r\n   * @param {boolean} [doNotCancelAnims] Do not cancel animations.\r\n   * @param {boolean} [forceMoving] Apply constraints as if the view is moving.\r\n   * @private\r\n   */ applyTargetState_(doNotCancelAnims, forceMoving) {\n        const isMoving = this.getAnimating() || this.getInteracting() || forceMoving;\n        // compute rotation\n        const newRotation = this.constraints_.rotation(this.targetRotation_, isMoving);\n        const size = this.getViewportSize_(newRotation);\n        const newResolution = this.constraints_.resolution(this.targetResolution_, 0, size, isMoving);\n        const newCenter = this.constraints_.center(this.targetCenter_, newResolution, size, isMoving, this.calculateCenterShift(this.targetCenter_, newResolution, newRotation, size));\n        if (this.get((0, $d35baefbe89be4c5$export$2e2bcd8739ae039).ROTATION) !== newRotation) this.set((0, $d35baefbe89be4c5$export$2e2bcd8739ae039).ROTATION, newRotation);\n        if (this.get((0, $d35baefbe89be4c5$export$2e2bcd8739ae039).RESOLUTION) !== newResolution) {\n            this.set((0, $d35baefbe89be4c5$export$2e2bcd8739ae039).RESOLUTION, newResolution);\n            this.set('zoom', this.getZoom(), true);\n        }\n        if (!newCenter || !this.get((0, $d35baefbe89be4c5$export$2e2bcd8739ae039).CENTER) || !(0, $1bd0a226f9a16141$export$e9bab7fafb253603)(this.get((0, $d35baefbe89be4c5$export$2e2bcd8739ae039).CENTER), newCenter)) this.set((0, $d35baefbe89be4c5$export$2e2bcd8739ae039).CENTER, newCenter);\n        if (this.getAnimating() && !doNotCancelAnims) this.cancelAnimations();\n        this.cancelAnchor_ = undefined;\n    }\n    /**\r\n   * If any constraints need to be applied, an animation will be triggered.\r\n   * This is typically done on interaction end.\r\n   * Note: calling this with a duration of 0 will apply the constrained values straight away,\r\n   * without animation.\r\n   * @param {number} [duration] The animation duration in ms.\r\n   * @param {number} [resolutionDirection] Which direction to zoom.\r\n   * @param {import(\"./coordinate.js\").Coordinate} [anchor] The origin of the transformation.\r\n   */ resolveConstraints(duration, resolutionDirection, anchor) {\n        duration = duration !== undefined ? duration : 200;\n        const direction = resolutionDirection || 0;\n        const newRotation = this.constraints_.rotation(this.targetRotation_);\n        const size = this.getViewportSize_(newRotation);\n        const newResolution = this.constraints_.resolution(this.targetResolution_, direction, size);\n        const newCenter = this.constraints_.center(this.targetCenter_, newResolution, size, false, this.calculateCenterShift(this.targetCenter_, newResolution, newRotation, size));\n        if (duration === 0 && !this.cancelAnchor_) {\n            this.targetResolution_ = newResolution;\n            this.targetRotation_ = newRotation;\n            this.targetCenter_ = newCenter;\n            this.applyTargetState_();\n            return;\n        }\n        anchor = anchor || (duration === 0 ? this.cancelAnchor_ : undefined);\n        this.cancelAnchor_ = undefined;\n        if (this.getResolution() !== newResolution || this.getRotation() !== newRotation || !this.getCenterInternal() || !(0, $1bd0a226f9a16141$export$e9bab7fafb253603)(this.getCenterInternal(), newCenter)) {\n            if (this.getAnimating()) this.cancelAnimations();\n            this.animateInternal({\n                rotation: newRotation,\n                center: newCenter,\n                resolution: newResolution,\n                duration: duration,\n                easing: (0, $c7ccf7e681a9b333$export$57636bb43b1ccbb0),\n                anchor: anchor\n            });\n        }\n    }\n    /**\r\n   * Notify the View that an interaction has started.\r\n   * The view state will be resolved to a stable one if needed\r\n   * (depending on its constraints).\r\n   * @api\r\n   */ beginInteraction() {\n        this.resolveConstraints(0);\n        this.setHint((0, $7d362782b4ccb93d$export$2e2bcd8739ae039).INTERACTING, 1);\n    }\n    /**\r\n   * Notify the View that an interaction has ended. The view state will be resolved\r\n   * to a stable one if needed (depending on its constraints).\r\n   * @param {number} [duration] Animation duration in ms.\r\n   * @param {number} [resolutionDirection] Which direction to zoom.\r\n   * @param {import(\"./coordinate.js\").Coordinate} [anchor] The origin of the transformation.\r\n   * @api\r\n   */ endInteraction(duration, resolutionDirection, anchor) {\n        anchor = anchor && (0, $9c4744460e43e41b$export$d4b8ec0b96db1ee2)(anchor, this.getProjection());\n        this.endInteractionInternal(duration, resolutionDirection, anchor);\n    }\n    /**\r\n   * Notify the View that an interaction has ended. The view state will be resolved\r\n   * to a stable one if needed (depending on its constraints).\r\n   * @param {number} [duration] Animation duration in ms.\r\n   * @param {number} [resolutionDirection] Which direction to zoom.\r\n   * @param {import(\"./coordinate.js\").Coordinate} [anchor] The origin of the transformation.\r\n   */ endInteractionInternal(duration, resolutionDirection, anchor) {\n        if (!this.getInteracting()) return;\n        this.setHint((0, $7d362782b4ccb93d$export$2e2bcd8739ae039).INTERACTING, -1);\n        this.resolveConstraints(duration, resolutionDirection, anchor);\n    }\n    /**\r\n   * Get a valid position for the view center according to the current constraints.\r\n   * @param {import(\"./coordinate.js\").Coordinate|undefined} targetCenter Target center position.\r\n   * @param {number} [targetResolution] Target resolution. If not supplied, the current one will be used.\r\n   * This is useful to guess a valid center position at a different zoom level.\r\n   * @return {import(\"./coordinate.js\").Coordinate|undefined} Valid center position.\r\n   */ getConstrainedCenter(targetCenter, targetResolution) {\n        const size = this.getViewportSize_(this.getRotation());\n        return this.constraints_.center(targetCenter, targetResolution || this.getResolution(), size);\n    }\n    /**\r\n   * Get a valid zoom level according to the current view constraints.\r\n   * @param {number|undefined} targetZoom Target zoom.\r\n   * @param {number} [direction] Indicate which resolution should be used\r\n   * by a renderer if the view resolution does not match any resolution of the tile source.\r\n   * If 0, the nearest resolution will be used. If 1, the nearest lower resolution\r\n   * will be used. If -1, the nearest higher resolution will be used.\r\n   * @return {number|undefined} Valid zoom level.\r\n   */ getConstrainedZoom(targetZoom, direction) {\n        const targetRes = this.getResolutionForZoom(targetZoom);\n        return this.getZoomForResolution(this.getConstrainedResolution(targetRes, direction));\n    }\n    /**\r\n   * Get a valid resolution according to the current view constraints.\r\n   * @param {number|undefined} targetResolution Target resolution.\r\n   * @param {number} [direction] Indicate which resolution should be used\r\n   * by a renderer if the view resolution does not match any resolution of the tile source.\r\n   * If 0, the nearest resolution will be used. If 1, the nearest lower resolution\r\n   * will be used. If -1, the nearest higher resolution will be used.\r\n   * @return {number|undefined} Valid resolution.\r\n   */ getConstrainedResolution(targetResolution, direction) {\n        direction = direction || 0;\n        const size = this.getViewportSize_(this.getRotation());\n        return this.constraints_.resolution(targetResolution, direction, size);\n    }\n}\n/**\r\n * @param {Function} callback Callback.\r\n * @param {*} returnValue Return value.\r\n */ function $70364d0195659942$var$animationCallback(callback, returnValue) {\n    setTimeout(function() {\n        callback(returnValue);\n    }, 0);\n}\nfunction $70364d0195659942$export$964345001ee9ac52(options) {\n    if (options.extent !== undefined) {\n        const smooth = options.smoothExtentConstraint !== undefined ? options.smoothExtentConstraint : true;\n        return (0, $b21a6e049949bb31$export$c2f0af2c946f6897)(options.extent, options.constrainOnlyCenter, smooth);\n    }\n    const projection = (0, $9c4744460e43e41b$export$549167224996a0fb)(options.projection, 'EPSG:3857');\n    if (options.multiWorld !== true && projection.isGlobal()) {\n        const extent = projection.getExtent().slice();\n        extent[0] = -Infinity;\n        extent[2] = Infinity;\n        return (0, $b21a6e049949bb31$export$c2f0af2c946f6897)(extent, false, false);\n    }\n    return 0, $b21a6e049949bb31$export$f883a24d5edde77c;\n}\nfunction $70364d0195659942$export$c68d65f9148da196(options) {\n    let resolutionConstraint;\n    let maxResolution;\n    let minResolution;\n    // TODO: move these to be ol constants\n    // see https://github.com/openlayers/openlayers/issues/2076\n    const defaultMaxZoom = 28;\n    const defaultZoomFactor = 2;\n    let minZoom = options.minZoom !== undefined ? options.minZoom : $70364d0195659942$var$DEFAULT_MIN_ZOOM;\n    let maxZoom = options.maxZoom !== undefined ? options.maxZoom : defaultMaxZoom;\n    const zoomFactor = options.zoomFactor !== undefined ? options.zoomFactor : defaultZoomFactor;\n    const multiWorld = options.multiWorld !== undefined ? options.multiWorld : false;\n    const smooth = options.smoothResolutionConstraint !== undefined ? options.smoothResolutionConstraint : true;\n    const showFullExtent = options.showFullExtent !== undefined ? options.showFullExtent : false;\n    const projection = (0, $9c4744460e43e41b$export$549167224996a0fb)(options.projection, 'EPSG:3857');\n    const projExtent = projection.getExtent();\n    let constrainOnlyCenter = options.constrainOnlyCenter;\n    let extent = options.extent;\n    if (!multiWorld && !extent && projection.isGlobal()) {\n        constrainOnlyCenter = false;\n        extent = projExtent;\n    }\n    if (options.resolutions !== undefined) {\n        const resolutions = options.resolutions;\n        maxResolution = resolutions[minZoom];\n        minResolution = resolutions[maxZoom] !== undefined ? resolutions[maxZoom] : resolutions[resolutions.length - 1];\n        if (options.constrainResolution) resolutionConstraint = (0, $bac43a1f4a628548$export$d65a517690fc4385)(resolutions, smooth, !constrainOnlyCenter && extent, showFullExtent);\n        else resolutionConstraint = (0, $bac43a1f4a628548$export$1c4e6da9b4b066fe)(maxResolution, minResolution, smooth, !constrainOnlyCenter && extent, showFullExtent);\n    } else {\n        // calculate the default min and max resolution\n        const size = !projExtent ? 360 * (0, $03edbd434a9e6608$export$1482081eec883108).degrees / projection.getMetersPerUnit() : Math.max((0, $6da4c8ed3074c92b$export$3c49c185de0c2bfc)(projExtent), (0, $6da4c8ed3074c92b$export$c08559766941f856)(projExtent));\n        const defaultMaxResolution = size / (0, $57cd8651d88957a0$export$6b8cb5cd370bd90c) / Math.pow(defaultZoomFactor, $70364d0195659942$var$DEFAULT_MIN_ZOOM);\n        const defaultMinResolution = defaultMaxResolution / Math.pow(defaultZoomFactor, defaultMaxZoom - $70364d0195659942$var$DEFAULT_MIN_ZOOM);\n        // user provided maxResolution takes precedence\n        maxResolution = options.maxResolution;\n        if (maxResolution !== undefined) minZoom = 0;\n        else maxResolution = defaultMaxResolution / Math.pow(zoomFactor, minZoom);\n        // user provided minResolution takes precedence\n        minResolution = options.minResolution;\n        if (minResolution === undefined) {\n            if (options.maxZoom !== undefined) {\n                if (options.maxResolution !== undefined) minResolution = maxResolution / Math.pow(zoomFactor, maxZoom);\n                else minResolution = defaultMaxResolution / Math.pow(zoomFactor, maxZoom);\n            } else minResolution = defaultMinResolution;\n        }\n        // given discrete zoom levels, minResolution may be different than provided\n        maxZoom = minZoom + Math.floor(Math.log(maxResolution / minResolution) / Math.log(zoomFactor));\n        minResolution = maxResolution / Math.pow(zoomFactor, maxZoom - minZoom);\n        if (options.constrainResolution) resolutionConstraint = (0, $bac43a1f4a628548$export$22ac0f6b219de91a)(zoomFactor, maxResolution, minResolution, smooth, !constrainOnlyCenter && extent, showFullExtent);\n        else resolutionConstraint = (0, $bac43a1f4a628548$export$1c4e6da9b4b066fe)(maxResolution, minResolution, smooth, !constrainOnlyCenter && extent, showFullExtent);\n    }\n    return {\n        constraint: resolutionConstraint,\n        maxResolution: maxResolution,\n        minResolution: minResolution,\n        minZoom: minZoom,\n        zoomFactor: zoomFactor\n    };\n}\nfunction $70364d0195659942$export$4eeaa08dd550e3c0(options) {\n    const enableRotation = options.enableRotation !== undefined ? options.enableRotation : true;\n    if (enableRotation) {\n        const constrainRotation = options.constrainRotation;\n        if (constrainRotation === undefined || constrainRotation === true) return (0, $d65f0a322291d127$export$17a6e6f3448b17e8)();\n        if (constrainRotation === false) return 0, $d65f0a322291d127$export$f883a24d5edde77c;\n        if (typeof constrainRotation === 'number') return (0, $d65f0a322291d127$export$9ba78806de831083)(constrainRotation);\n        return 0, $d65f0a322291d127$export$f883a24d5edde77c;\n    }\n    return 0, $d65f0a322291d127$export$e20fbacbb41798b;\n}\nfunction $70364d0195659942$export$ee75376562060184(animation) {\n    if (animation.sourceCenter && animation.targetCenter) {\n        if (!(0, $1bd0a226f9a16141$export$e9bab7fafb253603)(animation.sourceCenter, animation.targetCenter)) return false;\n    }\n    if (animation.sourceResolution !== animation.targetResolution) return false;\n    if (animation.sourceRotation !== animation.targetRotation) return false;\n    return true;\n}\n/**\r\n * @param {import(\"./coordinate.js\").Coordinate} coordinate Coordinate.\r\n * @param {import(\"./size.js\").Size} size Box pixel size.\r\n * @param {import(\"./pixel.js\").Pixel} position Position on the view to center on.\r\n * @param {number} resolution Resolution.\r\n * @param {number} rotation Rotation.\r\n * @return {import(\"./coordinate.js\").Coordinate} Shifted center.\r\n */ function $70364d0195659942$var$calculateCenterOn(coordinate, size, position, resolution, rotation) {\n    // calculate rotated position\n    const cosAngle = Math.cos(-rotation);\n    let sinAngle = Math.sin(-rotation);\n    let rotX = coordinate[0] * cosAngle - coordinate[1] * sinAngle;\n    let rotY = coordinate[1] * cosAngle + coordinate[0] * sinAngle;\n    rotX += (size[0] / 2 - position[0]) * resolution;\n    rotY += (position[1] - size[1] / 2) * resolution;\n    // go back to original angle\n    sinAngle = -sinAngle; // go back to original rotation\n    const centerX = rotX * cosAngle - rotY * sinAngle;\n    const centerY = rotY * cosAngle + rotX * sinAngle;\n    return [\n        centerX,\n        centerY\n    ];\n}\nvar $70364d0195659942$export$2e2bcd8739ae039 = $70364d0195659942$var$View;\n\n\n\n\n\n\n/**\r\n * @module ol/control/defaults\r\n */ \n/**\r\n * @module ol/control/Attribution\r\n */ \n/**\r\n * @module ol/css\r\n */ /**\r\n * @typedef {Object} FontParameters\r\n * @property {string} style Style.\r\n * @property {string} variant Variant.\r\n * @property {string} weight Weight.\r\n * @property {string} size Size.\r\n * @property {string} lineHeight LineHeight.\r\n * @property {string} family Family.\r\n * @property {Array<string>} families Families.\r\n */ /**\r\n * The CSS class for hidden feature.\r\n *\r\n * @const\r\n * @type {string}\r\n */ const $ce07df6d5d4656f1$export$981241db82723ce2 = 'ol-hidden';\nconst $ce07df6d5d4656f1$export$99b49471b0394319 = 'ol-selectable';\nconst $ce07df6d5d4656f1$export$1afde3d6e16a7b29 = 'ol-unselectable';\nconst $ce07df6d5d4656f1$export$68eede0dd8c6c1da = 'ol-unsupported';\nconst $ce07df6d5d4656f1$export$4d4f8be70b656192 = 'ol-control';\nconst $ce07df6d5d4656f1$export$e16017ac68d14492 = 'ol-collapsed';\n/**\r\n * From https://stackoverflow.com/questions/10135697/regex-to-parse-any-css-font\r\n * @type {RegExp}\r\n */ const $ce07df6d5d4656f1$var$fontRegEx = new RegExp([\n    '^\\\\s*(?=(?:(?:[-a-z]+\\\\s*){0,2}(italic|oblique))?)',\n    '(?=(?:(?:[-a-z]+\\\\s*){0,2}(small-caps))?)',\n    '(?=(?:(?:[-a-z]+\\\\s*){0,2}(bold(?:er)?|lighter|[1-9]00 ))?)',\n    '(?:(?:normal|\\\\1|\\\\2|\\\\3)\\\\s*){0,3}((?:xx?-)?',\n    '(?:small|large)|medium|smaller|larger|[\\\\.\\\\d]+(?:\\\\%|in|[cem]m|ex|p[ctx]))',\n    '(?:\\\\s*\\\\/\\\\s*(normal|[\\\\.\\\\d]+(?:\\\\%|in|[cem]m|ex|p[ctx])?))',\n    '?\\\\s*([-,\\\\\"\\\\\\'\\\\sa-z0-9]+?)\\\\s*$'\n].join(''), 'i');\n/** @type {Array<'style'|'variant'|'weight'|'size'|'lineHeight'|'family'>} */ const $ce07df6d5d4656f1$var$fontRegExMatchIndex = [\n    'style',\n    'variant',\n    'weight',\n    'size',\n    'lineHeight',\n    'family'\n];\nconst $ce07df6d5d4656f1$export$5abde8a6aec4a131 = function(fontSpec) {\n    const match = fontSpec.match($ce07df6d5d4656f1$var$fontRegEx);\n    if (!match) return null;\n    const style = /** @type {FontParameters} */ {\n        lineHeight: 'normal',\n        size: '1.2em',\n        style: 'normal',\n        weight: 'normal',\n        variant: 'normal'\n    };\n    for(let i = 0, ii = $ce07df6d5d4656f1$var$fontRegExMatchIndex.length; i < ii; ++i){\n        const value = match[i + 1];\n        if (value !== undefined) style[$ce07df6d5d4656f1$var$fontRegExMatchIndex[i]] = value;\n    }\n    style.families = style.family.split(/,\\s?/);\n    return style;\n};\n\n\n\nfunction $075f937d7366f1a2$export$9e05d10eae75c464(width, height, canvasPool, settings) {\n    /** @type {HTMLCanvasElement|OffscreenCanvas} */ let canvas;\n    if (canvasPool && canvasPool.length) canvas = /** @type {HTMLCanvasElement} */ canvasPool.shift();\n    else if (0, $67c66761d21428d0$export$98fcef3dc9973292) canvas = new OffscreenCanvas(width || 300, height || 300);\n    else canvas = document.createElement('canvas');\n    if (width) canvas.width = width;\n    if (height) canvas.height = height;\n    //FIXME Allow OffscreenCanvasRenderingContext2D as return type\n    return /** @type {CanvasRenderingContext2D} */ canvas.getContext('2d', settings);\n}\n/** @type {CanvasRenderingContext2D} */ let $075f937d7366f1a2$var$sharedCanvasContext;\nfunction $075f937d7366f1a2$export$fcb72ce088a6632c() {\n    if (!$075f937d7366f1a2$var$sharedCanvasContext) $075f937d7366f1a2$var$sharedCanvasContext = $075f937d7366f1a2$export$9e05d10eae75c464(1, 1);\n    return $075f937d7366f1a2$var$sharedCanvasContext;\n}\nfunction $075f937d7366f1a2$export$e918ac6a1026a12a(context) {\n    const canvas = context.canvas;\n    canvas.width = 1;\n    canvas.height = 1;\n    context.clearRect(0, 0, 1, 1);\n}\nfunction $075f937d7366f1a2$export$e823f88e4111159a(element) {\n    let width = element.offsetWidth;\n    const style = getComputedStyle(element);\n    width += parseInt(style.marginLeft, 10) + parseInt(style.marginRight, 10);\n    return width;\n}\nfunction $075f937d7366f1a2$export$fc5b8aac72846d1e(element) {\n    let height = element.offsetHeight;\n    const style = getComputedStyle(element);\n    height += parseInt(style.marginTop, 10) + parseInt(style.marginBottom, 10);\n    return height;\n}\nfunction $075f937d7366f1a2$export$5542201de9311ab2(newNode, oldNode) {\n    const parent = oldNode.parentNode;\n    if (parent) parent.replaceChild(newNode, oldNode);\n}\nfunction $075f937d7366f1a2$export$1e1c9bf5a4ffe0d1(node) {\n    while(node.lastChild)node.lastChild.remove();\n}\nfunction $075f937d7366f1a2$export$caeacfe04f52533a(node, children) {\n    const oldChildren = node.childNodes;\n    for(let i = 0;; ++i){\n        const oldChild = oldChildren[i];\n        const newChild = children[i];\n        // check if our work is done\n        if (!oldChild && !newChild) break;\n        // check if children match\n        if (oldChild === newChild) continue;\n        // check if a new child needs to be added\n        if (!oldChild) {\n            node.appendChild(newChild);\n            continue;\n        }\n        // check if an old child needs to be removed\n        if (!newChild) {\n            node.removeChild(oldChild);\n            --i;\n            continue;\n        }\n        // reorder\n        node.insertBefore(newChild, oldChild);\n    }\n}\n\n\n\n\n/**\r\n * @module ol/control/Control\r\n */ \n\n\n\n/**\r\n * @typedef {Object} Options\r\n * @property {HTMLElement} [element] The element is the control's\r\n * container element. This only needs to be specified if you're developing\r\n * a custom control.\r\n * @property {function(import(\"../MapEvent.js\").default):void} [render] Function called when\r\n * the control should be re-rendered. This is called in a `requestAnimationFrame`\r\n * callback.\r\n * @property {HTMLElement|string} [target] Specify a target if you want\r\n * the control to be rendered outside of the map's viewport.\r\n */ /**\r\n * @classdesc\r\n * A control is a visible widget with a DOM element in a fixed position on the\r\n * screen. They can involve user input (buttons), or be informational only;\r\n * the position is determined using CSS. By default these are placed in the\r\n * container with CSS class name `ol-overlaycontainer-stopevent`, but can use\r\n * any outside DOM element.\r\n *\r\n * This is the base class for controls. You can use it for simple custom\r\n * controls by creating the element with listeners, creating an instance:\r\n * ```js\r\n * const myControl = new Control({element: myElement});\r\n * ```\r\n * and then adding this to the map.\r\n *\r\n * The main advantage of having this as a control rather than a simple separate\r\n * DOM element is that preventing propagation is handled for you. Controls\r\n * will also be objects in a {@link module:ol/Collection~Collection}, so you can use their methods.\r\n *\r\n * You can also extend this base for your own control class. See\r\n * examples/custom-controls for an example of how to do this.\r\n *\r\n * @api\r\n */ class $b978dafe8f7d27ff$var$Control extends (0, $b68b3d6e32e3074a$export$2e2bcd8739ae039) {\n    /**\r\n   * @param {Options} options Control options.\r\n   */ constructor(options){\n        super();\n        const element = options.element;\n        if (element && !options.target && !element.style.pointerEvents) element.style.pointerEvents = 'auto';\n        /**\r\n     * @protected\r\n     * @type {HTMLElement}\r\n     */ this.element = element ? element : null;\n        /**\r\n     * @private\r\n     * @type {HTMLElement}\r\n     */ this.target_ = null;\n        /**\r\n     * @private\r\n     * @type {import(\"../Map.js\").default|null}\r\n     */ this.map_ = null;\n        /**\r\n     * @protected\r\n     * @type {!Array<import(\"../events.js\").EventsKey>}\r\n     */ this.listenerKeys = [];\n        if (options.render) this.render = options.render;\n        if (options.target) this.setTarget(options.target);\n    }\n    /**\r\n   * Clean up.\r\n   * @override\r\n   */ disposeInternal() {\n        this.element?.remove();\n        super.disposeInternal();\n    }\n    /**\r\n   * Get the map associated with this control.\r\n   * @return {import(\"../Map.js\").default|null} Map.\r\n   * @api\r\n   */ getMap() {\n        return this.map_;\n    }\n    /**\r\n   * Remove the control from its current map and attach it to the new map.\r\n   * Pass `null` to just remove the control from the current map.\r\n   * Subclasses may set up event handlers to get notified about changes to\r\n   * the map here.\r\n   * @param {import(\"../Map.js\").default|null} map Map.\r\n   * @api\r\n   */ setMap(map) {\n        if (this.map_) this.element?.remove();\n        for(let i = 0, ii = this.listenerKeys.length; i < ii; ++i)(0, $d5bf8abd656a3cdc$export$b0a21c8b3c1c921)(this.listenerKeys[i]);\n        this.listenerKeys.length = 0;\n        this.map_ = map;\n        if (map) {\n            const target = this.target_ ?? map.getOverlayContainerStopEvent();\n            if (this.element) target.appendChild(this.element);\n            if (this.render !== (0, $013a1733c226ec50$export$1cd1943b3a73bbe8)) this.listenerKeys.push((0, $d5bf8abd656a3cdc$export$63174c828edd6ff8)(map, (0, $e4ad75f913b6f7ff$export$2e2bcd8739ae039).POSTRENDER, this.render, this));\n            map.render();\n        }\n    }\n    /**\r\n   * Renders the control.\r\n   * @param {import(\"../MapEvent.js\").default} mapEvent Map event.\r\n   * @api\r\n   */ render(mapEvent) {}\n    /**\r\n   * This function is used to set a target element for the control. It has no\r\n   * effect if it is called after the control has been added to the map (i.e.\r\n   * after `setMap` is called on the control). If no `target` is set in the\r\n   * options passed to the control constructor and if `setTarget` is not called\r\n   * then the control is added to the map's overlay container.\r\n   * @param {HTMLElement|string} target Target.\r\n   * @api\r\n   */ setTarget(target) {\n        this.target_ = typeof target === 'string' ? document.getElementById(target) : target;\n    }\n}\nvar $b978dafe8f7d27ff$export$2e2bcd8739ae039 = $b978dafe8f7d27ff$var$Control;\n\n\n/**\r\n * @typedef {Object} Options\r\n * @property {string} [className='ol-attribution'] CSS class name.\r\n * @property {HTMLElement|string} [target] Specify a target if you\r\n * want the control to be rendered outside of the map's\r\n * viewport.\r\n * @property {boolean} [collapsible] Specify if attributions can\r\n * be collapsed. If not specified, sources control this behavior with their\r\n * `attributionsCollapsible` setting.\r\n * @property {boolean} [collapsed=true] Specify if attributions should\r\n * be collapsed at startup.\r\n * @property {string} [tipLabel='Attributions'] Text label to use for the button tip.\r\n * @property {string|HTMLElement} [label='i'] Text label to use for the\r\n * collapsed attributions button.\r\n * Instead of text, also an element (e.g. a `span` element) can be used.\r\n * @property {string} [expandClassName=className + '-expand'] CSS class name for the\r\n * collapsed attributions button.\r\n * @property {string|HTMLElement} [collapseLabel='›'] Text label to use\r\n * for the expanded attributions button.\r\n * Instead of text, also an element (e.g. a `span` element) can be used.\r\n * @property {string} [collapseClassName=className + '-collapse'] CSS class name for the\r\n * expanded attributions button.\r\n * @property {function(import(\"../MapEvent.js\").default):void} [render] Function called when\r\n * the control should be re-rendered. This is called in a `requestAnimationFrame`\r\n * callback.\r\n * @property {string|Array<string>|undefined} [attributions] Optional attribution(s) that will always be\r\n * displayed regardless of the layers rendered\r\n */ /**\r\n * @classdesc\r\n * Control to show all the attributions associated with the layer sources\r\n * in the map. This control is one of the default controls included in maps.\r\n * By default it will show in the bottom right portion of the map, but this can\r\n * be changed by using a css selector for `.ol-attribution`.\r\n *\r\n * @api\r\n */ class $6a26ab11104d2c24$var$Attribution extends (0, $b978dafe8f7d27ff$export$2e2bcd8739ae039) {\n    /**\r\n   * @param {Options} [options] Attribution options.\r\n   */ constructor(options){\n        options = options ? options : {};\n        super({\n            element: document.createElement('div'),\n            render: options.render,\n            target: options.target\n        });\n        /**\r\n     * @private\r\n     * @type {HTMLElement}\r\n     */ this.ulElement_ = document.createElement('ul');\n        /**\r\n     * @private\r\n     * @type {boolean}\r\n     */ this.collapsed_ = options.collapsed !== undefined ? options.collapsed : true;\n        /**\r\n     * @private\r\n     * @type {boolean}\r\n     */ this.userCollapsed_ = this.collapsed_;\n        /**\r\n     * @private\r\n     * @type {boolean}\r\n     */ this.overrideCollapsible_ = options.collapsible !== undefined;\n        /**\r\n     * @private\r\n     * @type {boolean}\r\n     */ this.collapsible_ = options.collapsible !== undefined ? options.collapsible : true;\n        if (!this.collapsible_) this.collapsed_ = false;\n        /**\r\n     * @private\r\n     * @type {string | Array<string> | undefined}\r\n     */ this.attributions_ = options.attributions;\n        const className = options.className !== undefined ? options.className : 'ol-attribution';\n        const tipLabel = options.tipLabel !== undefined ? options.tipLabel : 'Attributions';\n        const expandClassName = options.expandClassName !== undefined ? options.expandClassName : className + '-expand';\n        const collapseLabel = options.collapseLabel !== undefined ? options.collapseLabel : '\\u203A';\n        const collapseClassName = options.collapseClassName !== undefined ? options.collapseClassName : className + '-collapse';\n        if (typeof collapseLabel === 'string') {\n            /**\r\n       * @private\r\n       * @type {HTMLElement}\r\n       */ this.collapseLabel_ = document.createElement('span');\n            this.collapseLabel_.textContent = collapseLabel;\n            this.collapseLabel_.className = collapseClassName;\n        } else this.collapseLabel_ = collapseLabel;\n        const label = options.label !== undefined ? options.label : 'i';\n        if (typeof label === 'string') {\n            /**\r\n       * @private\r\n       * @type {HTMLElement}\r\n       */ this.label_ = document.createElement('span');\n            this.label_.textContent = label;\n            this.label_.className = expandClassName;\n        } else this.label_ = label;\n        const activeLabel = this.collapsible_ && !this.collapsed_ ? this.collapseLabel_ : this.label_;\n        /**\r\n     * @private\r\n     * @type {HTMLElement}\r\n     */ this.toggleButton_ = document.createElement('button');\n        this.toggleButton_.setAttribute('type', 'button');\n        this.toggleButton_.setAttribute('aria-expanded', String(!this.collapsed_));\n        this.toggleButton_.title = tipLabel;\n        this.toggleButton_.appendChild(activeLabel);\n        this.toggleButton_.addEventListener((0, $294047c5e65f31a3$export$2e2bcd8739ae039).CLICK, this.handleClick_.bind(this), false);\n        const cssClasses = className + ' ' + (0, $ce07df6d5d4656f1$export$1afde3d6e16a7b29) + ' ' + (0, $ce07df6d5d4656f1$export$4d4f8be70b656192) + (this.collapsed_ && this.collapsible_ ? ' ' + (0, $ce07df6d5d4656f1$export$e16017ac68d14492) : '') + (this.collapsible_ ? '' : ' ol-uncollapsible');\n        const element = this.element;\n        element.className = cssClasses;\n        element.appendChild(this.toggleButton_);\n        element.appendChild(this.ulElement_);\n        /**\r\n     * A list of currently rendered resolutions.\r\n     * @type {Array<string>}\r\n     * @private\r\n     */ this.renderedAttributions_ = [];\n        /**\r\n     * @private\r\n     * @type {boolean}\r\n     */ this.renderedVisible_ = true;\n    }\n    /**\r\n   * Collect a list of visible attributions and set the collapsible state.\r\n   * @param {import(\"../Map.js\").FrameState} frameState Frame state.\r\n   * @return {Array<string>} Attributions.\r\n   * @private\r\n   */ collectSourceAttributions_(frameState) {\n        const layers = this.getMap().getAllLayers();\n        const visibleAttributions = new Set(layers.flatMap((layer)=>layer.getAttributions(frameState)));\n        if (this.attributions_ !== undefined) Array.isArray(this.attributions_) ? this.attributions_.forEach((item)=>visibleAttributions.add(item)) : visibleAttributions.add(this.attributions_);\n        if (!this.overrideCollapsible_) {\n            const collapsible = !layers.some((layer)=>layer.getSource()?.getAttributionsCollapsible() === false);\n            this.setCollapsible(collapsible);\n        }\n        return Array.from(visibleAttributions);\n    }\n    /**\r\n   * @private\r\n   * @param {?import(\"../Map.js\").FrameState} frameState Frame state.\r\n   */ async updateElement_(frameState) {\n        if (!frameState) {\n            if (this.renderedVisible_) {\n                this.element.style.display = 'none';\n                this.renderedVisible_ = false;\n            }\n            return;\n        }\n        const attributions = await Promise.all(this.collectSourceAttributions_(frameState).map((attribution)=>(0, $013a1733c226ec50$export$4dbaaf6c79705e6c)(()=>attribution)));\n        const visible = attributions.length > 0;\n        if (this.renderedVisible_ != visible) {\n            this.element.style.display = visible ? '' : 'none';\n            this.renderedVisible_ = visible;\n        }\n        if ((0, $b998d41b678ed5d1$export$e9bab7fafb253603)(attributions, this.renderedAttributions_)) return;\n        (0, $075f937d7366f1a2$export$1e1c9bf5a4ffe0d1)(this.ulElement_);\n        // append the attributions\n        for(let i = 0, ii = attributions.length; i < ii; ++i){\n            const element = document.createElement('li');\n            element.innerHTML = attributions[i];\n            this.ulElement_.appendChild(element);\n        }\n        this.renderedAttributions_ = attributions;\n    }\n    /**\r\n   * @param {MouseEvent} event The event to handle\r\n   * @private\r\n   */ handleClick_(event) {\n        event.preventDefault();\n        this.handleToggle_();\n        this.userCollapsed_ = this.collapsed_;\n    }\n    /**\r\n   * @private\r\n   */ handleToggle_() {\n        this.element.classList.toggle((0, $ce07df6d5d4656f1$export$e16017ac68d14492));\n        if (this.collapsed_) (0, $075f937d7366f1a2$export$5542201de9311ab2)(this.collapseLabel_, this.label_);\n        else (0, $075f937d7366f1a2$export$5542201de9311ab2)(this.label_, this.collapseLabel_);\n        this.collapsed_ = !this.collapsed_;\n        this.toggleButton_.setAttribute('aria-expanded', String(!this.collapsed_));\n    }\n    /**\r\n   * Return `true` if the attribution is collapsible, `false` otherwise.\r\n   * @return {boolean} True if the widget is collapsible.\r\n   * @api\r\n   */ getCollapsible() {\n        return this.collapsible_;\n    }\n    /**\r\n   * Set whether the attribution should be collapsible.\r\n   * @param {boolean} collapsible True if the widget is collapsible.\r\n   * @api\r\n   */ setCollapsible(collapsible) {\n        if (this.collapsible_ === collapsible) return;\n        this.collapsible_ = collapsible;\n        this.element.classList.toggle('ol-uncollapsible');\n        if (this.userCollapsed_) this.handleToggle_();\n    }\n    /**\r\n   * Collapse or expand the attribution according to the passed parameter. Will\r\n   * not do anything if the attribution isn't collapsible or if the current\r\n   * collapsed state is already the one requested.\r\n   * @param {boolean} collapsed True if the widget is collapsed.\r\n   * @api\r\n   */ setCollapsed(collapsed) {\n        this.userCollapsed_ = collapsed;\n        if (!this.collapsible_ || this.collapsed_ === collapsed) return;\n        this.handleToggle_();\n    }\n    /**\r\n   * Return `true` when the attribution is currently collapsed or `false`\r\n   * otherwise.\r\n   * @return {boolean} True if the widget is collapsed.\r\n   * @api\r\n   */ getCollapsed() {\n        return this.collapsed_;\n    }\n    /**\r\n   * Update the attribution element.\r\n   * @param {import(\"../MapEvent.js\").default} mapEvent Map event.\r\n   * @override\r\n   */ render(mapEvent) {\n        this.updateElement_(mapEvent.frameState);\n    }\n}\nvar $6a26ab11104d2c24$export$2e2bcd8739ae039 = $6a26ab11104d2c24$var$Attribution;\n\n\n/**\r\n * @module ol/control/Rotate\r\n */ \n\n\n\n/**\r\n * @typedef {Object} Options\r\n * @property {string} [className='ol-rotate'] CSS class name.\r\n * @property {string|HTMLElement} [label='⇧'] Text label to use for the rotate button.\r\n * Instead of text, also an element (e.g. a `span` element) can be used.\r\n * @property {string} [tipLabel='Reset rotation'] Text label to use for the rotate tip.\r\n * @property {string} [compassClassName='ol-compass'] CSS class name for the compass.\r\n * @property {number} [duration=250] Animation duration in milliseconds.\r\n * @property {boolean} [autoHide=true] Hide the control when rotation is 0.\r\n * @property {function(import(\"../MapEvent.js\").default):void} [render] Function called when the control should\r\n * be re-rendered. This is called in a `requestAnimationFrame` callback.\r\n * @property {function():void} [resetNorth] Function called when the control is clicked.\r\n * This will override the default `resetNorth`.\r\n * @property {HTMLElement|string} [target] Specify a target if you want the control to be\r\n * rendered outside of the map's viewport.\r\n */ /**\r\n * @classdesc\r\n * A button control to reset rotation to 0.\r\n * To style this control use css selector `.ol-rotate`. A `.ol-hidden` css\r\n * selector is added to the button when the rotation is 0.\r\n *\r\n * @api\r\n */ class $a305cff1f91b3b86$var$Rotate extends (0, $b978dafe8f7d27ff$export$2e2bcd8739ae039) {\n    /**\r\n   * @param {Options} [options] Rotate options.\r\n   */ constructor(options){\n        options = options ? options : {};\n        super({\n            element: document.createElement('div'),\n            render: options.render,\n            target: options.target\n        });\n        const className = options.className !== undefined ? options.className : 'ol-rotate';\n        const label = options.label !== undefined ? options.label : '\\u21E7';\n        const compassClassName = options.compassClassName !== undefined ? options.compassClassName : 'ol-compass';\n        /**\r\n     * @type {HTMLElement}\r\n     * @private\r\n     */ this.label_ = null;\n        if (typeof label === 'string') {\n            this.label_ = document.createElement('span');\n            this.label_.className = compassClassName;\n            this.label_.textContent = label;\n        } else {\n            this.label_ = label;\n            this.label_.classList.add(compassClassName);\n        }\n        const tipLabel = options.tipLabel ? options.tipLabel : 'Reset rotation';\n        const button = document.createElement('button');\n        button.className = className + '-reset';\n        button.setAttribute('type', 'button');\n        button.title = tipLabel;\n        button.appendChild(this.label_);\n        button.addEventListener((0, $294047c5e65f31a3$export$2e2bcd8739ae039).CLICK, this.handleClick_.bind(this), false);\n        const cssClasses = className + ' ' + (0, $ce07df6d5d4656f1$export$1afde3d6e16a7b29) + ' ' + (0, $ce07df6d5d4656f1$export$4d4f8be70b656192);\n        const element = this.element;\n        element.className = cssClasses;\n        element.appendChild(button);\n        /**\r\n     * @private\r\n     */ this.callResetNorth_ = options.resetNorth ? options.resetNorth : undefined;\n        /**\r\n     * @type {number}\r\n     * @private\r\n     */ this.duration_ = options.duration !== undefined ? options.duration : 250;\n        /**\r\n     * @type {boolean}\r\n     * @private\r\n     */ this.autoHide_ = options.autoHide !== undefined ? options.autoHide : true;\n        /**\r\n     * @private\r\n     * @type {number|undefined}\r\n     */ this.rotation_ = undefined;\n        if (this.autoHide_) this.element.classList.add((0, $ce07df6d5d4656f1$export$981241db82723ce2));\n    }\n    /**\r\n   * @param {MouseEvent} event The event to handle\r\n   * @private\r\n   */ handleClick_(event) {\n        event.preventDefault();\n        if (this.callResetNorth_ !== undefined) this.callResetNorth_();\n        else this.resetNorth_();\n    }\n    /**\r\n   * @private\r\n   */ resetNorth_() {\n        const map = this.getMap();\n        const view = map.getView();\n        if (!view) // the map does not have a view, so we can't act\n        // upon it\n        return;\n        const rotation = view.getRotation();\n        if (rotation !== undefined) {\n            if (this.duration_ > 0 && rotation % (2 * Math.PI) !== 0) view.animate({\n                rotation: 0,\n                duration: this.duration_,\n                easing: (0, $c7ccf7e681a9b333$export$57636bb43b1ccbb0)\n            });\n            else view.setRotation(0);\n        }\n    }\n    /**\r\n   * Update the rotate control element.\r\n   * @param {import(\"../MapEvent.js\").default} mapEvent Map event.\r\n   * @override\r\n   */ render(mapEvent) {\n        const frameState = mapEvent.frameState;\n        if (!frameState) return;\n        const rotation = frameState.viewState.rotation;\n        if (rotation != this.rotation_) {\n            const transform = 'rotate(' + rotation + 'rad)';\n            if (this.autoHide_) {\n                const contains = this.element.classList.contains((0, $ce07df6d5d4656f1$export$981241db82723ce2));\n                if (!contains && rotation === 0) this.element.classList.add((0, $ce07df6d5d4656f1$export$981241db82723ce2));\n                else if (contains && rotation !== 0) this.element.classList.remove((0, $ce07df6d5d4656f1$export$981241db82723ce2));\n            }\n            this.label_.style.transform = transform;\n        }\n        this.rotation_ = rotation;\n    }\n}\nvar $a305cff1f91b3b86$export$2e2bcd8739ae039 = $a305cff1f91b3b86$var$Rotate;\n\n\n/**\r\n * @module ol/control/Zoom\r\n */ \n\n\n\n/**\r\n * @typedef {Object} Options\r\n * @property {number} [duration=250] Animation duration in milliseconds.\r\n * @property {string} [className='ol-zoom'] CSS class name.\r\n * @property {string} [zoomInClassName=className + '-in'] CSS class name for the zoom-in button.\r\n * @property {string} [zoomOutClassName=className + '-out'] CSS class name for the zoom-out button.\r\n * @property {string|HTMLElement} [zoomInLabel='+'] Text label to use for the zoom-in\r\n * button. Instead of text, also an element (e.g. a `span` element) can be used.\r\n * @property {string|HTMLElement} [zoomOutLabel='–'] Text label to use for the zoom-out button.\r\n * Instead of text, also an element (e.g. a `span` element) can be used.\r\n * @property {string} [zoomInTipLabel='Zoom in'] Text label to use for the button tip.\r\n * @property {string} [zoomOutTipLabel='Zoom out'] Text label to use for the button tip.\r\n * @property {number} [delta=1] The zoom delta applied on each click.\r\n * @property {HTMLElement|string} [target] Specify a target if you want the control to be\r\n * rendered outside of the map's viewport.\r\n */ /**\r\n * @classdesc\r\n * A control with 2 buttons, one for zoom in and one for zoom out.\r\n * This control is one of the default controls of a map. To style this control\r\n * use css selectors `.ol-zoom-in` and `.ol-zoom-out`.\r\n *\r\n * @api\r\n */ class $4901e3e27e30416a$var$Zoom extends (0, $b978dafe8f7d27ff$export$2e2bcd8739ae039) {\n    /**\r\n   * @param {Options} [options] Zoom options.\r\n   */ constructor(options){\n        options = options ? options : {};\n        super({\n            element: document.createElement('div'),\n            target: options.target\n        });\n        const className = options.className !== undefined ? options.className : 'ol-zoom';\n        const delta = options.delta !== undefined ? options.delta : 1;\n        const zoomInClassName = options.zoomInClassName !== undefined ? options.zoomInClassName : className + '-in';\n        const zoomOutClassName = options.zoomOutClassName !== undefined ? options.zoomOutClassName : className + '-out';\n        const zoomInLabel = options.zoomInLabel !== undefined ? options.zoomInLabel : '+';\n        const zoomOutLabel = options.zoomOutLabel !== undefined ? options.zoomOutLabel : '\\u2013';\n        const zoomInTipLabel = options.zoomInTipLabel !== undefined ? options.zoomInTipLabel : 'Zoom in';\n        const zoomOutTipLabel = options.zoomOutTipLabel !== undefined ? options.zoomOutTipLabel : 'Zoom out';\n        const inElement = document.createElement('button');\n        inElement.className = zoomInClassName;\n        inElement.setAttribute('type', 'button');\n        inElement.title = zoomInTipLabel;\n        inElement.appendChild(typeof zoomInLabel === 'string' ? document.createTextNode(zoomInLabel) : zoomInLabel);\n        inElement.addEventListener((0, $294047c5e65f31a3$export$2e2bcd8739ae039).CLICK, this.handleClick_.bind(this, delta), false);\n        const outElement = document.createElement('button');\n        outElement.className = zoomOutClassName;\n        outElement.setAttribute('type', 'button');\n        outElement.title = zoomOutTipLabel;\n        outElement.appendChild(typeof zoomOutLabel === 'string' ? document.createTextNode(zoomOutLabel) : zoomOutLabel);\n        outElement.addEventListener((0, $294047c5e65f31a3$export$2e2bcd8739ae039).CLICK, this.handleClick_.bind(this, -delta), false);\n        const cssClasses = className + ' ' + (0, $ce07df6d5d4656f1$export$1afde3d6e16a7b29) + ' ' + (0, $ce07df6d5d4656f1$export$4d4f8be70b656192);\n        const element = this.element;\n        element.className = cssClasses;\n        element.appendChild(inElement);\n        element.appendChild(outElement);\n        /**\r\n     * @type {number}\r\n     * @private\r\n     */ this.duration_ = options.duration !== undefined ? options.duration : 250;\n    }\n    /**\r\n   * @param {number} delta Zoom delta.\r\n   * @param {MouseEvent} event The event to handle\r\n   * @private\r\n   */ handleClick_(delta, event) {\n        event.preventDefault();\n        this.zoomByDelta_(delta);\n    }\n    /**\r\n   * @param {number} delta Zoom delta.\r\n   * @private\r\n   */ zoomByDelta_(delta) {\n        const map = this.getMap();\n        const view = map.getView();\n        if (!view) // the map does not have a view, so we can't act\n        // upon it\n        return;\n        const currentZoom = view.getZoom();\n        if (currentZoom !== undefined) {\n            const newZoom = view.getConstrainedZoom(currentZoom + delta);\n            if (this.duration_ > 0) {\n                if (view.getAnimating()) view.cancelAnimations();\n                view.animate({\n                    zoom: newZoom,\n                    duration: this.duration_,\n                    easing: (0, $c7ccf7e681a9b333$export$57636bb43b1ccbb0)\n                });\n            } else view.setZoom(newZoom);\n        }\n    }\n}\nvar $4901e3e27e30416a$export$2e2bcd8739ae039 = $4901e3e27e30416a$var$Zoom;\n\n\nfunction $af7495b2f822d5e9$export$ebe90cb607ad99e(options) {\n    options = options ? options : {};\n    /** @type {Collection<import(\"./Control.js\").default>} */ const controls = new (0, $931ffc4e747c14db$export$2e2bcd8739ae039)();\n    const zoomControl = options.zoom !== undefined ? options.zoom : true;\n    if (zoomControl) controls.push(new (0, $4901e3e27e30416a$export$2e2bcd8739ae039)(options.zoomOptions));\n    const rotateControl = options.rotate !== undefined ? options.rotate : true;\n    if (rotateControl) controls.push(new (0, $a305cff1f91b3b86$export$2e2bcd8739ae039)(options.rotateOptions));\n    const attributionControl = options.attribution !== undefined ? options.attribution : true;\n    if (attributionControl) controls.push(new (0, $6a26ab11104d2c24$export$2e2bcd8739ae039)(options.attributionOptions));\n    return controls;\n}\n\n\n\n\n\n\n\n/**\r\n * @module ol/interaction/defaults\r\n */ \n/**\r\n * @module ol/Kinetic\r\n */ /**\r\n * @classdesc\r\n * Implementation of inertial deceleration for map movement.\r\n *\r\n * @api\r\n */ class $9a54ea8d5f7a49ee$var$Kinetic {\n    /**\r\n   * @param {number} decay Rate of decay (must be negative).\r\n   * @param {number} minVelocity Minimum velocity (pixels/millisecond).\r\n   * @param {number} delay Delay to consider to calculate the kinetic\r\n   *     initial values (milliseconds).\r\n   */ constructor(decay, minVelocity, delay){\n        /**\r\n     * @private\r\n     * @type {number}\r\n     */ this.decay_ = decay;\n        /**\r\n     * @private\r\n     * @type {number}\r\n     */ this.minVelocity_ = minVelocity;\n        /**\r\n     * @private\r\n     * @type {number}\r\n     */ this.delay_ = delay;\n        /**\r\n     * @private\r\n     * @type {Array<number>}\r\n     */ this.points_ = [];\n        /**\r\n     * @private\r\n     * @type {number}\r\n     */ this.angle_ = 0;\n        /**\r\n     * @private\r\n     * @type {number}\r\n     */ this.initialVelocity_ = 0;\n    }\n    /**\r\n   * FIXME empty description for jsdoc\r\n   */ begin() {\n        this.points_.length = 0;\n        this.angle_ = 0;\n        this.initialVelocity_ = 0;\n    }\n    /**\r\n   * @param {number} x X.\r\n   * @param {number} y Y.\r\n   */ update(x, y) {\n        this.points_.push(x, y, Date.now());\n    }\n    /**\r\n   * @return {boolean} Whether we should do kinetic animation.\r\n   */ end() {\n        if (this.points_.length < 6) // at least 2 points are required (i.e. there must be at least 6 elements\n        // in the array)\n        return false;\n        const delay = Date.now() - this.delay_;\n        const lastIndex = this.points_.length - 3;\n        if (this.points_[lastIndex + 2] < delay) // the last tracked point is too old, which means that the user stopped\n        // panning before releasing the map\n        return false;\n        // get the first point which still falls into the delay time\n        let firstIndex = lastIndex - 3;\n        while(firstIndex > 0 && this.points_[firstIndex + 2] > delay)firstIndex -= 3;\n        const duration = this.points_[lastIndex + 2] - this.points_[firstIndex + 2];\n        // we don't want a duration of 0 (divide by zero)\n        // we also make sure the user panned for a duration of at least one frame\n        // (1/60s) to compute sane displacement values\n        if (duration < 1000 / 60) return false;\n        const dx = this.points_[lastIndex] - this.points_[firstIndex];\n        const dy = this.points_[lastIndex + 1] - this.points_[firstIndex + 1];\n        this.angle_ = Math.atan2(dy, dx);\n        this.initialVelocity_ = Math.sqrt(dx * dx + dy * dy) / duration;\n        return this.initialVelocity_ > this.minVelocity_;\n    }\n    /**\r\n   * @return {number} Total distance travelled (pixels).\r\n   */ getDistance() {\n        return (this.minVelocity_ - this.initialVelocity_) / this.decay_;\n    }\n    /**\r\n   * @return {number} Angle of the kinetic panning animation (radians).\r\n   */ getAngle() {\n        return this.angle_;\n    }\n}\nvar $9a54ea8d5f7a49ee$export$2e2bcd8739ae039 = $9a54ea8d5f7a49ee$var$Kinetic;\n\n\n/**\r\n * @module ol/interaction/DoubleClickZoom\r\n */ \n/**\r\n * @module ol/interaction/Interaction\r\n */ \n\n/**\r\n * @module ol/interaction/Property\r\n */ /**\r\n * @enum {string}\r\n */ var $2c9e42723ccf2bfb$export$2e2bcd8739ae039 = {\n    ACTIVE: 'active'\n};\n\n\n/***\r\n * @template Return\r\n * @typedef {import(\"../Observable\").OnSignature<import(\"../Observable\").EventTypes, import(\"../events/Event.js\").default, Return> &\r\n *   import(\"../Observable\").OnSignature<import(\"../ObjectEventType\").Types|\r\n *     'change:active', import(\"../Object\").ObjectEvent, Return> &\r\n *   import(\"../Observable\").CombinedOnSignature<import(\"../Observable\").EventTypes|import(\"../ObjectEventType\").Types|\r\n *     'change:active', Return>} InteractionOnSignature\r\n */ /**\r\n * Object literal with config options for interactions.\r\n * @typedef {Object} InteractionOptions\r\n * @property {function(import(\"../MapBrowserEvent.js\").default):boolean} [handleEvent]\r\n * Method called by the map to notify the interaction that a browser event was\r\n * dispatched to the map. If the function returns a falsy value, propagation of\r\n * the event to other interactions in the map's interactions chain will be\r\n * prevented (this includes functions with no explicit return). The interactions\r\n * are traversed in reverse order of the interactions collection of the map.\r\n */ /**\r\n * @classdesc\r\n * Abstract base class; normally only used for creating subclasses and not\r\n * instantiated in apps.\r\n * User actions that change the state of the map. Some are similar to controls,\r\n * but are not associated with a DOM element.\r\n * For example, {@link module:ol/interaction/KeyboardZoom~KeyboardZoom} is\r\n * functionally the same as {@link module:ol/control/Zoom~Zoom}, but triggered\r\n * by a keyboard event not a button element event.\r\n * Although interactions do not have a DOM element, some of them do render\r\n * vectors and so are visible on the screen.\r\n * @api\r\n */ class $39210df8527e63e5$var$Interaction extends (0, $b68b3d6e32e3074a$export$2e2bcd8739ae039) {\n    /**\r\n   * @param {InteractionOptions} [options] Options.\r\n   */ constructor(options){\n        super();\n        /***\r\n     * @type {InteractionOnSignature<import(\"../events\").EventsKey>}\r\n     */ this.on;\n        /***\r\n     * @type {InteractionOnSignature<import(\"../events\").EventsKey>}\r\n     */ this.once;\n        /***\r\n     * @type {InteractionOnSignature<void>}\r\n     */ this.un;\n        if (options && options.handleEvent) this.handleEvent = options.handleEvent;\n        /**\r\n     * @private\r\n     * @type {import(\"../Map.js\").default|null}\r\n     */ this.map_ = null;\n        this.setActive(true);\n    }\n    /**\r\n   * Return whether the interaction is currently active.\r\n   * @return {boolean} `true` if the interaction is active, `false` otherwise.\r\n   * @observable\r\n   * @api\r\n   */ getActive() {\n        return /** @type {boolean} */ this.get((0, $2c9e42723ccf2bfb$export$2e2bcd8739ae039).ACTIVE);\n    }\n    /**\r\n   * Get the map associated with this interaction.\r\n   * @return {import(\"../Map.js\").default|null} Map.\r\n   * @api\r\n   */ getMap() {\n        return this.map_;\n    }\n    /**\r\n   * Handles the {@link module:ol/MapBrowserEvent~MapBrowserEvent map browser event}.\r\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\r\n   * @return {boolean} `false` to stop event propagation.\r\n   * @api\r\n   */ handleEvent(mapBrowserEvent) {\n        return true;\n    }\n    /**\r\n   * Activate or deactivate the interaction.\r\n   * @param {boolean} active Active.\r\n   * @observable\r\n   * @api\r\n   */ setActive(active) {\n        this.set((0, $2c9e42723ccf2bfb$export$2e2bcd8739ae039).ACTIVE, active);\n    }\n    /**\r\n   * Remove the interaction from its current map and attach it to the new map.\r\n   * Subclasses may set up event handlers to get notified about changes to\r\n   * the map here.\r\n   * @param {import(\"../Map.js\").default|null} map Map.\r\n   */ setMap(map) {\n        this.map_ = map;\n    }\n}\nfunction $39210df8527e63e5$export$4c486572e961a974(view, delta, duration) {\n    const currentCenter = view.getCenterInternal();\n    if (currentCenter) {\n        const center = [\n            currentCenter[0] + delta[0],\n            currentCenter[1] + delta[1]\n        ];\n        view.animateInternal({\n            duration: duration !== undefined ? duration : 250,\n            easing: (0, $c7ccf7e681a9b333$export$45db2fc2f15997e7),\n            center: view.getConstrainedCenter(center)\n        });\n    }\n}\nfunction $39210df8527e63e5$export$ace321ff2a8016ef(view, delta, anchor, duration) {\n    const currentZoom = view.getZoom();\n    if (currentZoom === undefined) return;\n    const newZoom = view.getConstrainedZoom(currentZoom + delta);\n    const newResolution = view.getResolutionForZoom(newZoom);\n    if (view.getAnimating()) view.cancelAnimations();\n    view.animate({\n        resolution: newResolution,\n        anchor: anchor,\n        duration: duration !== undefined ? duration : 250,\n        easing: (0, $c7ccf7e681a9b333$export$57636bb43b1ccbb0)\n    });\n}\nvar $39210df8527e63e5$export$2e2bcd8739ae039 = $39210df8527e63e5$var$Interaction;\n\n\n/**\r\n * @typedef {Object} Options\r\n * @property {number} [duration=250] Animation duration in milliseconds.\r\n * @property {number} [delta=1] The zoom delta applied on each double click.\r\n */ /**\r\n * @classdesc\r\n * Allows the user to zoom by double-clicking on the map.\r\n * @api\r\n */ class $b50403621294a654$var$DoubleClickZoom extends (0, $39210df8527e63e5$export$2e2bcd8739ae039) {\n    /**\r\n   * @param {Options} [options] Options.\r\n   */ constructor(options){\n        super();\n        options = options ? options : {};\n        /**\r\n     * @private\r\n     * @type {number}\r\n     */ this.delta_ = options.delta ? options.delta : 1;\n        /**\r\n     * @private\r\n     * @type {number}\r\n     */ this.duration_ = options.duration !== undefined ? options.duration : 250;\n    }\n    /**\r\n   * Handles the {@link module:ol/MapBrowserEvent~MapBrowserEvent map browser event} (if it was a\r\n   * doubleclick) and eventually zooms the map.\r\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\r\n   * @return {boolean} `false` to stop event propagation.\r\n   * @override\r\n   */ handleEvent(mapBrowserEvent) {\n        let stopEvent = false;\n        if (mapBrowserEvent.type == (0, $150f412a4a7fa263$export$2e2bcd8739ae039).DBLCLICK) {\n            const browserEvent = /** @type {MouseEvent} */ mapBrowserEvent.originalEvent;\n            const map = mapBrowserEvent.map;\n            const anchor = mapBrowserEvent.coordinate;\n            const delta = browserEvent.shiftKey ? -this.delta_ : this.delta_;\n            const view = map.getView();\n            (0, $39210df8527e63e5$export$ace321ff2a8016ef)(view, delta, anchor, this.duration_);\n            browserEvent.preventDefault();\n            stopEvent = true;\n        }\n        return !stopEvent;\n    }\n}\nvar $b50403621294a654$export$2e2bcd8739ae039 = $b50403621294a654$var$DoubleClickZoom;\n\n\n/**\r\n * @module ol/interaction/DragPan\r\n */ \n\n/**\r\n * @module ol/events/condition\r\n */ \n\n\nfunction $edf87b50170125f7$export$84bf76cd7afc7469(var_args) {\n    const conditions = arguments;\n    /**\r\n   * @param {import(\"../MapBrowserEvent.js\").default} event Event.\r\n   * @return {boolean} All conditions passed.\r\n   */ return function(event) {\n        let pass = true;\n        for(let i = 0, ii = conditions.length; i < ii; ++i){\n            pass = pass && conditions[i](event);\n            if (!pass) break;\n        }\n        return pass;\n    };\n}\nconst $edf87b50170125f7$export$573409992e89967e = function(mapBrowserEvent) {\n    const originalEvent = mapBrowserEvent.originalEvent;\n    return originalEvent.altKey && !(originalEvent.metaKey || originalEvent.ctrlKey) && !originalEvent.shiftKey;\n};\nconst $edf87b50170125f7$export$4e5f01653f9f1f82 = function(mapBrowserEvent) {\n    const originalEvent = mapBrowserEvent.originalEvent;\n    return originalEvent.altKey && !(originalEvent.metaKey || originalEvent.ctrlKey) && originalEvent.shiftKey;\n};\nconst $edf87b50170125f7$export$d7ddd398f22d79ef = function(event) {\n    const targetElement = event.map.getTargetElement();\n    const rootNode = targetElement.getRootNode();\n    const activeElement = event.map.getOwnerDocument().activeElement;\n    return rootNode instanceof ShadowRoot ? rootNode.host.contains(activeElement) : targetElement.contains(activeElement);\n};\nconst $edf87b50170125f7$export$ae2cdf064e3b0c55 = function(event) {\n    const targetElement = event.map.getTargetElement();\n    const rootNode = targetElement.getRootNode();\n    const tabIndexCandidate = rootNode instanceof ShadowRoot ? rootNode.host : targetElement;\n    return tabIndexCandidate.hasAttribute('tabindex') ? $edf87b50170125f7$export$d7ddd398f22d79ef(event) : true;\n};\nconst $edf87b50170125f7$export$ba9e5d519bc326ca = (0, $013a1733c226ec50$export$22e23a2304399231);\nconst $edf87b50170125f7$export$64ef1bee2b9504c1 = function(mapBrowserEvent) {\n    return mapBrowserEvent.type == (0, $150f412a4a7fa263$export$2e2bcd8739ae039).CLICK;\n};\nconst $edf87b50170125f7$export$1238ad6b5e7fff70 = function(mapBrowserEvent) {\n    const originalEvent = mapBrowserEvent.originalEvent;\n    return originalEvent instanceof PointerEvent && originalEvent.button == 0 && !((0, $67c66761d21428d0$export$39dfd62a25e0fe93) && (0, $67c66761d21428d0$export$76c0a3b101d93136) && originalEvent.ctrlKey);\n};\nconst $edf87b50170125f7$export$b3e22bcfd64c1022 = (0, $013a1733c226ec50$export$8f11cee4bdc7e668);\nconst $edf87b50170125f7$export$71eac0963f2c2f01 = function(mapBrowserEvent) {\n    return mapBrowserEvent.type == 'pointermove';\n};\nconst $edf87b50170125f7$export$194df8bad091b401 = function(mapBrowserEvent) {\n    return mapBrowserEvent.type == (0, $150f412a4a7fa263$export$2e2bcd8739ae039).SINGLECLICK;\n};\nconst $edf87b50170125f7$export$c59d944dd10b3dc7 = function(mapBrowserEvent) {\n    return mapBrowserEvent.type == (0, $150f412a4a7fa263$export$2e2bcd8739ae039).DBLCLICK;\n};\nconst $edf87b50170125f7$export$fdc892d0d8fe3bfb = function(mapBrowserEvent) {\n    const originalEvent = /** @type {KeyboardEvent|MouseEvent|TouchEvent} */ mapBrowserEvent.originalEvent;\n    return !originalEvent.altKey && !(originalEvent.metaKey || originalEvent.ctrlKey) && !originalEvent.shiftKey;\n};\nconst $edf87b50170125f7$export$f3100d8d6292d638 = function(mapBrowserEvent) {\n    const originalEvent = mapBrowserEvent.originalEvent;\n    return !originalEvent.altKey && ((0, $67c66761d21428d0$export$76c0a3b101d93136) ? originalEvent.metaKey : originalEvent.ctrlKey) && !originalEvent.shiftKey;\n};\nconst $edf87b50170125f7$export$32603ad571dd22b5 = function(mapBrowserEvent) {\n    const originalEvent = mapBrowserEvent.originalEvent;\n    return (0, $67c66761d21428d0$export$76c0a3b101d93136) ? originalEvent.metaKey : originalEvent.ctrlKey;\n};\nconst $edf87b50170125f7$export$5d31fe68a477cfbb = function(mapBrowserEvent) {\n    const originalEvent = mapBrowserEvent.originalEvent;\n    return !originalEvent.altKey && !(originalEvent.metaKey || originalEvent.ctrlKey) && originalEvent.shiftKey;\n};\nconst $edf87b50170125f7$export$e5570ca80cd8fd54 = function(mapBrowserEvent) {\n    const originalEvent = mapBrowserEvent.originalEvent;\n    const tagName = /** @type {Element} */ originalEvent.target.tagName;\n    return tagName !== 'INPUT' && tagName !== 'SELECT' && tagName !== 'TEXTAREA' && // `isContentEditable` is only available on `HTMLElement`, but it may also be a\n    // different type like `SVGElement`.\n    // @ts-ignore\n    !originalEvent.target.isContentEditable;\n};\nconst $edf87b50170125f7$export$abb7acbfa76bf3c4 = function(mapBrowserEvent) {\n    const pointerEvent = mapBrowserEvent.originalEvent;\n    // see https://www.w3.org/TR/pointerevents/#widl-PointerEvent-pointerType\n    return pointerEvent instanceof PointerEvent && pointerEvent.pointerType == 'mouse';\n};\nconst $edf87b50170125f7$export$e74de664a571d084 = function(mapBrowserEvent) {\n    const pointerEvt = mapBrowserEvent.originalEvent;\n    // see https://www.w3.org/TR/pointerevents/#widl-PointerEvent-pointerType\n    return pointerEvt instanceof PointerEvent && pointerEvt.pointerType === 'touch';\n};\nconst $edf87b50170125f7$export$cd1707283a23f059 = function(mapBrowserEvent) {\n    const pointerEvt = mapBrowserEvent.originalEvent;\n    // see https://www.w3.org/TR/pointerevents/#widl-PointerEvent-pointerType\n    return pointerEvt instanceof PointerEvent && pointerEvt.pointerType === 'pen';\n};\nconst $edf87b50170125f7$export$189f0d593022b199 = function(mapBrowserEvent) {\n    const pointerEvent = mapBrowserEvent.originalEvent;\n    return pointerEvent instanceof PointerEvent && pointerEvent.isPrimary && pointerEvent.button === 0;\n};\n\n\n\n/**\r\n * @module ol/interaction/Pointer\r\n */ \n\n/**\r\n * @typedef {Object} Options\r\n * @property {function(import(\"../MapBrowserEvent.js\").default):boolean} [handleDownEvent]\r\n * Function handling \"down\" events. If the function returns `true` then a drag\r\n * sequence is started.\r\n * @property {function(import(\"../MapBrowserEvent.js\").default):void} [handleDragEvent]\r\n * Function handling \"drag\" events. This function is called on \"move\" events\r\n * during a drag sequence.\r\n * @property {function(import(\"../MapBrowserEvent.js\").default):boolean} [handleEvent]\r\n * Method called by the map to notify the interaction that a browser event was\r\n * dispatched to the map. The function may return `false` to prevent the\r\n * propagation of the event to other interactions in the map's interactions\r\n * chain.\r\n * @property {function(import(\"../MapBrowserEvent.js\").default):void} [handleMoveEvent]\r\n * Function handling \"move\" events. This function is called on \"move\" events.\r\n * This functions is also called during a drag sequence, so during a drag\r\n * sequence both the `handleDragEvent` function and this function are called.\r\n * If `handleDownEvent` is defined and it returns true this function will not\r\n * be called during a drag sequence.\r\n * @property {function(import(\"../MapBrowserEvent.js\").default):boolean} [handleUpEvent]\r\n *  Function handling \"up\" events. If the function returns `false` then the\r\n * current drag sequence is stopped.\r\n * @property {function(boolean):boolean} [stopDown]\r\n * Should the down event be propagated to other interactions, or should be\r\n * stopped?\r\n */ /**\r\n * @classdesc\r\n * Base class that calls user-defined functions on `down`, `move` and `up`\r\n * events. This class also manages \"drag sequences\".\r\n *\r\n * When the `handleDownEvent` user function returns `true` a drag sequence is\r\n * started. During a drag sequence the `handleDragEvent` user function is\r\n * called on `move` events. The drag sequence ends when the `handleUpEvent`\r\n * user function is called and returns `false`.\r\n * @api\r\n */ class $cf1eb502962d87a8$var$PointerInteraction extends (0, $39210df8527e63e5$export$2e2bcd8739ae039) {\n    /**\r\n   * @param {Options} [options] Options.\r\n   */ constructor(options){\n        options = options ? options : {};\n        super(/** @type {import(\"./Interaction.js\").InteractionOptions} */ options);\n        if (options.handleDownEvent) this.handleDownEvent = options.handleDownEvent;\n        if (options.handleDragEvent) this.handleDragEvent = options.handleDragEvent;\n        if (options.handleMoveEvent) this.handleMoveEvent = options.handleMoveEvent;\n        if (options.handleUpEvent) this.handleUpEvent = options.handleUpEvent;\n        if (options.stopDown) this.stopDown = options.stopDown;\n        /**\r\n     * @type {boolean}\r\n     * @protected\r\n     */ this.handlingDownUpSequence = false;\n        /**\r\n     * @type {Array<PointerEvent>}\r\n     * @protected\r\n     */ this.targetPointers = [];\n    }\n    /**\r\n   * Returns the current number of pointers involved in the interaction,\r\n   * e.g. `2` when two fingers are used.\r\n   * @return {number} The number of pointers.\r\n   * @api\r\n   */ getPointerCount() {\n        return this.targetPointers.length;\n    }\n    /**\r\n   * Handle pointer down events.\r\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\r\n   * @return {boolean} If the event was consumed.\r\n   * @protected\r\n   */ handleDownEvent(mapBrowserEvent) {\n        return false;\n    }\n    /**\r\n   * Handle pointer drag events.\r\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\r\n   * @protected\r\n   */ handleDragEvent(mapBrowserEvent) {}\n    /**\r\n   * Handles the {@link module:ol/MapBrowserEvent~MapBrowserEvent map browser event} and may call into\r\n   * other functions, if event sequences like e.g. 'drag' or 'down-up' etc. are\r\n   * detected.\r\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\r\n   * @return {boolean} `false` to stop event propagation.\r\n   * @api\r\n   * @override\r\n   */ handleEvent(mapBrowserEvent) {\n        if (!mapBrowserEvent.originalEvent) return true;\n        let stopEvent = false;\n        this.updateTrackedPointers_(mapBrowserEvent);\n        if (this.handlingDownUpSequence) {\n            if (mapBrowserEvent.type == (0, $150f412a4a7fa263$export$2e2bcd8739ae039).POINTERDRAG) {\n                this.handleDragEvent(mapBrowserEvent);\n                // prevent page scrolling during dragging\n                mapBrowserEvent.originalEvent.preventDefault();\n            } else if (mapBrowserEvent.type == (0, $150f412a4a7fa263$export$2e2bcd8739ae039).POINTERUP) {\n                const handledUp = this.handleUpEvent(mapBrowserEvent);\n                this.handlingDownUpSequence = handledUp && this.targetPointers.length > 0;\n            }\n        } else {\n            if (mapBrowserEvent.type == (0, $150f412a4a7fa263$export$2e2bcd8739ae039).POINTERDOWN) {\n                const handled = this.handleDownEvent(mapBrowserEvent);\n                this.handlingDownUpSequence = handled;\n                stopEvent = this.stopDown(handled);\n            } else if (mapBrowserEvent.type == (0, $150f412a4a7fa263$export$2e2bcd8739ae039).POINTERMOVE) this.handleMoveEvent(mapBrowserEvent);\n        }\n        return !stopEvent;\n    }\n    /**\r\n   * Handle pointer move events.\r\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\r\n   * @protected\r\n   */ handleMoveEvent(mapBrowserEvent) {}\n    /**\r\n   * Handle pointer up events.\r\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\r\n   * @return {boolean} If the event was consumed.\r\n   * @protected\r\n   */ handleUpEvent(mapBrowserEvent) {\n        return false;\n    }\n    /**\r\n   * This function is used to determine if \"down\" events should be propagated\r\n   * to other interactions or should be stopped.\r\n   * @param {boolean} handled Was the event handled by the interaction?\r\n   * @return {boolean} Should the `down` event be stopped?\r\n   */ stopDown(handled) {\n        return handled;\n    }\n    /**\r\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\r\n   * @private\r\n   */ updateTrackedPointers_(mapBrowserEvent) {\n        if (mapBrowserEvent.activePointers) this.targetPointers = mapBrowserEvent.activePointers;\n    }\n}\nfunction $cf1eb502962d87a8$export$e2a20c553f6c85ce(pointerEvents) {\n    const length = pointerEvents.length;\n    let clientX = 0;\n    let clientY = 0;\n    for(let i = 0; i < length; i++){\n        clientX += pointerEvents[i].clientX;\n        clientY += pointerEvents[i].clientY;\n    }\n    return {\n        clientX: clientX / length,\n        clientY: clientY / length\n    };\n}\nvar $cf1eb502962d87a8$export$2e2bcd8739ae039 = $cf1eb502962d87a8$var$PointerInteraction;\n\n\n/**\r\n * @typedef {Object} Options\r\n * @property {import(\"../events/condition.js\").Condition} [condition] A function that takes a {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a boolean\r\n * to indicate whether that event should be handled.\r\n * Default is {@link module:ol/events/condition.noModifierKeys} and {@link module:ol/events/condition.primaryAction}.\r\n * @property {boolean} [onFocusOnly=false] When the map's target has a `tabindex` attribute set,\r\n * the interaction will only handle events when the map has the focus.\r\n * @property {import(\"../Kinetic.js\").default} [kinetic] Kinetic inertia to apply to the pan.\r\n */ /**\r\n * @classdesc\r\n * Allows the user to pan the map by dragging the map.\r\n * @api\r\n */ class $c11585da26a016db$var$DragPan extends (0, $cf1eb502962d87a8$export$2e2bcd8739ae039) {\n    /**\r\n   * @param {Options} [options] Options.\r\n   */ constructor(options){\n        super({\n            stopDown: (0, $013a1733c226ec50$export$8f11cee4bdc7e668)\n        });\n        options = options ? options : {};\n        /**\r\n     * @private\r\n     * @type {import(\"../Kinetic.js\").default|undefined}\r\n     */ this.kinetic_ = options.kinetic;\n        /**\r\n     * @type {import(\"../pixel.js\").Pixel}\r\n     */ this.lastCentroid = null;\n        /**\r\n     * @type {number}\r\n     * @private\r\n     */ this.lastPointersCount_;\n        /**\r\n     * @type {boolean}\r\n     * @private\r\n     */ this.panning_ = false;\n        const condition = options.condition ? options.condition : (0, $edf87b50170125f7$export$84bf76cd7afc7469)((0, $edf87b50170125f7$export$fdc892d0d8fe3bfb), (0, $edf87b50170125f7$export$189f0d593022b199));\n        /**\r\n     * @private\r\n     * @type {import(\"../events/condition.js\").Condition}\r\n     */ this.condition_ = options.onFocusOnly ? (0, $edf87b50170125f7$export$84bf76cd7afc7469)((0, $edf87b50170125f7$export$ae2cdf064e3b0c55), condition) : condition;\n        /**\r\n     * @private\r\n     * @type {boolean}\r\n     */ this.noKinetic_ = false;\n    }\n    /**\r\n   * Handle pointer drag events.\r\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\r\n   * @override\r\n   */ handleDragEvent(mapBrowserEvent) {\n        const map = mapBrowserEvent.map;\n        if (!this.panning_) {\n            this.panning_ = true;\n            map.getView().beginInteraction();\n        }\n        const targetPointers = this.targetPointers;\n        const centroid = map.getEventPixel((0, $cf1eb502962d87a8$export$e2a20c553f6c85ce)(targetPointers));\n        if (targetPointers.length == this.lastPointersCount_) {\n            if (this.kinetic_) this.kinetic_.update(centroid[0], centroid[1]);\n            if (this.lastCentroid) {\n                const delta = [\n                    this.lastCentroid[0] - centroid[0],\n                    centroid[1] - this.lastCentroid[1]\n                ];\n                const map = mapBrowserEvent.map;\n                const view = map.getView();\n                (0, $1bd0a226f9a16141$export$dcdf75081b88279d)(delta, view.getResolution());\n                (0, $1bd0a226f9a16141$export$bb628a54ab399bc9)(delta, view.getRotation());\n                view.adjustCenterInternal(delta);\n            }\n        } else if (this.kinetic_) // reset so we don't overestimate the kinetic energy after\n        // after one finger down, tiny drag, second finger down\n        this.kinetic_.begin();\n        this.lastCentroid = centroid;\n        this.lastPointersCount_ = targetPointers.length;\n        mapBrowserEvent.originalEvent.preventDefault();\n    }\n    /**\r\n   * Handle pointer up events.\r\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\r\n   * @return {boolean} If the event was consumed.\r\n   * @override\r\n   */ handleUpEvent(mapBrowserEvent) {\n        const map = mapBrowserEvent.map;\n        const view = map.getView();\n        if (this.targetPointers.length === 0) {\n            if (!this.noKinetic_ && this.kinetic_ && this.kinetic_.end()) {\n                const distance = this.kinetic_.getDistance();\n                const angle = this.kinetic_.getAngle();\n                const center = view.getCenterInternal();\n                const centerpx = map.getPixelFromCoordinateInternal(center);\n                const dest = map.getCoordinateFromPixelInternal([\n                    centerpx[0] - distance * Math.cos(angle),\n                    centerpx[1] - distance * Math.sin(angle)\n                ]);\n                view.animateInternal({\n                    center: view.getConstrainedCenter(dest),\n                    duration: 500,\n                    easing: (0, $c7ccf7e681a9b333$export$57636bb43b1ccbb0)\n                });\n            }\n            if (this.panning_) {\n                this.panning_ = false;\n                view.endInteraction();\n            }\n            return false;\n        }\n        if (this.kinetic_) // reset so we don't overestimate the kinetic energy after\n        // after one finger up, tiny drag, second finger up\n        this.kinetic_.begin();\n        this.lastCentroid = null;\n        return true;\n    }\n    /**\r\n   * Handle pointer down events.\r\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\r\n   * @return {boolean} If the event was consumed.\r\n   * @override\r\n   */ handleDownEvent(mapBrowserEvent) {\n        if (this.targetPointers.length > 0 && this.condition_(mapBrowserEvent)) {\n            const map = mapBrowserEvent.map;\n            const view = map.getView();\n            this.lastCentroid = null;\n            // stop any current animation\n            if (view.getAnimating()) view.cancelAnimations();\n            if (this.kinetic_) this.kinetic_.begin();\n            // No kinetic as soon as more than one pointer on the screen is\n            // detected. This is to prevent nasty pans after pinch.\n            this.noKinetic_ = this.targetPointers.length > 1;\n            return true;\n        }\n        return false;\n    }\n}\nvar $c11585da26a016db$export$2e2bcd8739ae039 = $c11585da26a016db$var$DragPan;\n\n\n/**\r\n * @module ol/interaction/DragRotate\r\n */ \n\n\n\n/**\r\n * @typedef {Object} Options\r\n * @property {import(\"../events/condition.js\").Condition} [condition] A function that takes a\r\n * {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a boolean\r\n * to indicate whether that event should be handled.\r\n * Default is {@link module:ol/events/condition.altShiftKeysOnly}.\r\n * @property {number} [duration=250] Animation duration in milliseconds.\r\n */ /**\r\n * @classdesc\r\n * Allows the user to rotate the map by clicking and dragging on the map,\r\n * normally combined with a {@link module:ol/events/condition} that limits\r\n * it to when the alt and shift keys are held down.\r\n *\r\n * This interaction is only supported for mouse devices.\r\n * @api\r\n */ class $197c7092261b2aa0$var$DragRotate extends (0, $cf1eb502962d87a8$export$2e2bcd8739ae039) {\n    /**\r\n   * @param {Options} [options] Options.\r\n   */ constructor(options){\n        options = options ? options : {};\n        super({\n            stopDown: (0, $013a1733c226ec50$export$8f11cee4bdc7e668)\n        });\n        /**\r\n     * @private\r\n     * @type {import(\"../events/condition.js\").Condition}\r\n     */ this.condition_ = options.condition ? options.condition : (0, $edf87b50170125f7$export$4e5f01653f9f1f82);\n        /**\r\n     * @private\r\n     * @type {number|undefined}\r\n     */ this.lastAngle_ = undefined;\n        /**\r\n     * @private\r\n     * @type {number}\r\n     */ this.duration_ = options.duration !== undefined ? options.duration : 250;\n    }\n    /**\r\n   * Handle pointer drag events.\r\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\r\n   * @override\r\n   */ handleDragEvent(mapBrowserEvent) {\n        if (!(0, $edf87b50170125f7$export$abb7acbfa76bf3c4)(mapBrowserEvent)) return;\n        const map = mapBrowserEvent.map;\n        const view = map.getView();\n        if (view.getConstraints().rotation === (0, $d65f0a322291d127$export$e20fbacbb41798b)) return;\n        const size = map.getSize();\n        const offset = mapBrowserEvent.pixel;\n        const theta = Math.atan2(size[1] / 2 - offset[1], offset[0] - size[0] / 2);\n        if (this.lastAngle_ !== undefined) {\n            const delta = theta - this.lastAngle_;\n            view.adjustRotationInternal(-delta);\n        }\n        this.lastAngle_ = theta;\n    }\n    /**\r\n   * Handle pointer up events.\r\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\r\n   * @return {boolean} If the event was consumed.\r\n   * @override\r\n   */ handleUpEvent(mapBrowserEvent) {\n        if (!(0, $edf87b50170125f7$export$abb7acbfa76bf3c4)(mapBrowserEvent)) return true;\n        const map = mapBrowserEvent.map;\n        const view = map.getView();\n        view.endInteraction(this.duration_);\n        return false;\n    }\n    /**\r\n   * Handle pointer down events.\r\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\r\n   * @return {boolean} If the event was consumed.\r\n   * @override\r\n   */ handleDownEvent(mapBrowserEvent) {\n        if (!(0, $edf87b50170125f7$export$abb7acbfa76bf3c4)(mapBrowserEvent)) return false;\n        if ((0, $edf87b50170125f7$export$1238ad6b5e7fff70)(mapBrowserEvent) && this.condition_(mapBrowserEvent)) {\n            const map = mapBrowserEvent.map;\n            map.getView().beginInteraction();\n            this.lastAngle_ = undefined;\n            return true;\n        }\n        return false;\n    }\n}\nvar $197c7092261b2aa0$export$2e2bcd8739ae039 = $197c7092261b2aa0$var$DragRotate;\n\n\n/**\r\n * @module ol/interaction/DragZoom\r\n */ \n\n/**\r\n * @module ol/interaction/DragBox\r\n */ // FIXME draw drag box\n\n\n/**\r\n * @module ol/render/Box\r\n */ \n\nclass $c47adf75308683a6$var$RenderBox extends (0, $3273ed08087da3da$export$2e2bcd8739ae039) {\n    /**\r\n   * @param {string} className CSS class name.\r\n   */ constructor(className){\n        super();\n        /**\r\n     * @type {import(\"../geom/Polygon.js\").default}\r\n     * @private\r\n     */ this.geometry_ = null;\n        /**\r\n     * @type {HTMLDivElement}\r\n     * @private\r\n     */ this.element_ = document.createElement('div');\n        this.element_.style.position = 'absolute';\n        this.element_.style.pointerEvents = 'auto';\n        this.element_.className = 'ol-box ' + className;\n        /**\r\n     * @private\r\n     * @type {import(\"../Map.js\").default|null}\r\n     */ this.map_ = null;\n        /**\r\n     * @private\r\n     * @type {import(\"../pixel.js\").Pixel}\r\n     */ this.startPixel_ = null;\n        /**\r\n     * @private\r\n     * @type {import(\"../pixel.js\").Pixel}\r\n     */ this.endPixel_ = null;\n    }\n    /**\r\n   * Clean up.\r\n   * @override\r\n   */ disposeInternal() {\n        this.setMap(null);\n    }\n    /**\r\n   * @private\r\n   */ render_() {\n        const startPixel = this.startPixel_;\n        const endPixel = this.endPixel_;\n        const px = 'px';\n        const style = this.element_.style;\n        style.left = Math.min(startPixel[0], endPixel[0]) + px;\n        style.top = Math.min(startPixel[1], endPixel[1]) + px;\n        style.width = Math.abs(endPixel[0] - startPixel[0]) + px;\n        style.height = Math.abs(endPixel[1] - startPixel[1]) + px;\n    }\n    /**\r\n   * @param {import(\"../Map.js\").default|null} map Map.\r\n   */ setMap(map) {\n        if (this.map_) {\n            this.map_.getOverlayContainer().removeChild(this.element_);\n            const style = this.element_.style;\n            style.left = 'inherit';\n            style.top = 'inherit';\n            style.width = 'inherit';\n            style.height = 'inherit';\n        }\n        this.map_ = map;\n        if (this.map_) this.map_.getOverlayContainer().appendChild(this.element_);\n    }\n    /**\r\n   * @param {import(\"../pixel.js\").Pixel} startPixel Start pixel.\r\n   * @param {import(\"../pixel.js\").Pixel} endPixel End pixel.\r\n   */ setPixels(startPixel, endPixel) {\n        this.startPixel_ = startPixel;\n        this.endPixel_ = endPixel;\n        this.createOrUpdateGeometry();\n        this.render_();\n    }\n    /**\r\n   * Creates or updates the cached geometry.\r\n   */ createOrUpdateGeometry() {\n        if (!this.map_) return;\n        const startPixel = this.startPixel_;\n        const endPixel = this.endPixel_;\n        const pixels = [\n            startPixel,\n            [\n                startPixel[0],\n                endPixel[1]\n            ],\n            endPixel,\n            [\n                endPixel[0],\n                startPixel[1]\n            ]\n        ];\n        const coordinates = pixels.map(this.map_.getCoordinateFromPixelInternal, this.map_);\n        // close the polygon\n        coordinates[4] = coordinates[0].slice();\n        if (!this.geometry_) this.geometry_ = new (0, $40aa8d43bbe572bf$export$2e2bcd8739ae039)([\n            coordinates\n        ]);\n        else this.geometry_.setCoordinates([\n            coordinates\n        ]);\n    }\n    /**\r\n   * @return {import(\"../geom/Polygon.js\").default} Geometry.\r\n   */ getGeometry() {\n        return this.geometry_;\n    }\n}\nvar $c47adf75308683a6$export$2e2bcd8739ae039 = $c47adf75308683a6$var$RenderBox;\n\n\n\n/**\r\n * A function that takes a {@link module:ol/MapBrowserEvent~MapBrowserEvent} and two\r\n * {@link module:ol/pixel~Pixel}s and returns a `{boolean}`. If the condition is met,\r\n * true should be returned.\r\n * @typedef {function(this: ?, import(\"../MapBrowserEvent.js\").default, import(\"../pixel.js\").Pixel, import(\"../pixel.js\").Pixel):boolean} EndCondition\r\n */ /**\r\n * @typedef {Object} Options\r\n * @property {string} [className='ol-dragbox'] CSS class name for styling the box.\r\n * @property {import(\"../events/condition.js\").Condition} [condition] A function that takes a {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a boolean\r\n * to indicate whether that event should be handled.\r\n * Default is {@link ol/events/condition~mouseActionButton}.\r\n * @property {number} [minArea=64] The minimum area of the box in pixel, this value is used by the default\r\n * `boxEndCondition` function.\r\n * @property {EndCondition} [boxEndCondition] A function that takes a {@link module:ol/MapBrowserEvent~MapBrowserEvent} and two\r\n * {@link module:ol/pixel~Pixel}s to indicate whether a `boxend` event should be fired.\r\n * Default is `true` if the area of the box is bigger than the `minArea` option.\r\n * @property {function(this:DragBox, import(\"../MapBrowserEvent.js\").default):void} [onBoxEnd] Code to execute just\r\n * before `boxend` is fired.\r\n */ /**\r\n * @enum {string}\r\n */ const $e05f414bc3918235$var$DragBoxEventType = {\n    /**\r\n   * Triggered upon drag box start.\r\n   * @event DragBoxEvent#boxstart\r\n   * @api\r\n   */ BOXSTART: 'boxstart',\n    /**\r\n   * Triggered on drag when box is active.\r\n   * @event DragBoxEvent#boxdrag\r\n   * @api\r\n   */ BOXDRAG: 'boxdrag',\n    /**\r\n   * Triggered upon drag box end.\r\n   * @event DragBoxEvent#boxend\r\n   * @api\r\n   */ BOXEND: 'boxend',\n    /**\r\n   * Triggered upon drag box canceled.\r\n   * @event DragBoxEvent#boxcancel\r\n   * @api\r\n   */ BOXCANCEL: 'boxcancel'\n};\nclass $e05f414bc3918235$export$7053c33c051365ea extends (0, $aeedce20e9577100$export$2e2bcd8739ae039) {\n    /**\r\n   * @param {string} type The event type.\r\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate The event coordinate.\r\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Originating event.\r\n   */ constructor(type, coordinate, mapBrowserEvent){\n        super(type);\n        /**\r\n     * The coordinate of the drag event.\r\n     * @const\r\n     * @type {import(\"../coordinate.js\").Coordinate}\r\n     * @api\r\n     */ this.coordinate = coordinate;\n        /**\r\n     * @const\r\n     * @type {import(\"../MapBrowserEvent.js\").default}\r\n     * @api\r\n     */ this.mapBrowserEvent = mapBrowserEvent;\n    }\n}\n/***\r\n * @template Return\r\n * @typedef {import(\"../Observable\").OnSignature<import(\"../Observable\").EventTypes, import(\"../events/Event.js\").default, Return> &\r\n *   import(\"../Observable\").OnSignature<import(\"../ObjectEventType\").Types|\r\n *     'change:active', import(\"../Object\").ObjectEvent, Return> &\r\n *   import(\"../Observable\").OnSignature<'boxcancel'|'boxdrag'|'boxend'|'boxstart', DragBoxEvent, Return> &\r\n *   import(\"../Observable\").CombinedOnSignature<import(\"../Observable\").EventTypes|import(\"../ObjectEventType\").Types|\r\n *     'change:active'|'boxcancel'|'boxdrag'|'boxend', Return>} DragBoxOnSignature\r\n */ /**\r\n * @classdesc\r\n * Allows the user to draw a vector box by clicking and dragging on the map,\r\n * normally combined with a {@link module:ol/events/condition} that limits\r\n * it to when the shift or other key is held down. This is used, for example,\r\n * for zooming to a specific area of the map\r\n * (see {@link module:ol/interaction/DragZoom~DragZoom} and\r\n * {@link module:ol/interaction/DragRotateAndZoom~DragRotateAndZoom}).\r\n *\r\n * @fires DragBoxEvent\r\n * @api\r\n */ class $e05f414bc3918235$var$DragBox extends (0, $cf1eb502962d87a8$export$2e2bcd8739ae039) {\n    /**\r\n   * @param {Options} [options] Options.\r\n   */ constructor(options){\n        super();\n        /***\r\n     * @type {DragBoxOnSignature<import(\"../events\").EventsKey>}\r\n     */ this.on;\n        /***\r\n     * @type {DragBoxOnSignature<import(\"../events\").EventsKey>}\r\n     */ this.once;\n        /***\r\n     * @type {DragBoxOnSignature<void>}\r\n     */ this.un;\n        options = options ?? {};\n        /**\r\n     * @type {import(\"../render/Box.js\").default}\r\n     * @private\r\n     */ this.box_ = new (0, $c47adf75308683a6$export$2e2bcd8739ae039)(options.className || 'ol-dragbox');\n        /**\r\n     * @type {number}\r\n     * @private\r\n     */ this.minArea_ = options.minArea ?? 64;\n        if (options.onBoxEnd) this.onBoxEnd = options.onBoxEnd;\n        /**\r\n     * @type {import(\"../pixel.js\").Pixel}\r\n     * @private\r\n     */ this.startPixel_ = null;\n        /**\r\n     * @private\r\n     * @type {import(\"../events/condition.js\").Condition}\r\n     */ this.condition_ = options.condition ?? (0, $edf87b50170125f7$export$1238ad6b5e7fff70);\n        /**\r\n     * @private\r\n     * @type {EndCondition}\r\n     */ this.boxEndCondition_ = options.boxEndCondition ?? this.defaultBoxEndCondition;\n    }\n    /**\r\n   * The default condition for determining whether the boxend event\r\n   * should fire.\r\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent The originating MapBrowserEvent\r\n   *     leading to the box end.\r\n   * @param {import(\"../pixel.js\").Pixel} startPixel The starting pixel of the box.\r\n   * @param {import(\"../pixel.js\").Pixel} endPixel The end pixel of the box.\r\n   * @return {boolean} Whether or not the boxend condition should be fired.\r\n   */ defaultBoxEndCondition(mapBrowserEvent, startPixel, endPixel) {\n        const width = endPixel[0] - startPixel[0];\n        const height = endPixel[1] - startPixel[1];\n        return width * width + height * height >= this.minArea_;\n    }\n    /**\r\n   * Returns geometry of last drawn box.\r\n   * @return {import(\"../geom/Polygon.js\").default} Geometry.\r\n   * @api\r\n   */ getGeometry() {\n        return this.box_.getGeometry();\n    }\n    /**\r\n   * Handle pointer drag events.\r\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\r\n   * @override\r\n   */ handleDragEvent(mapBrowserEvent) {\n        if (!this.startPixel_) return;\n        this.box_.setPixels(this.startPixel_, mapBrowserEvent.pixel);\n        this.dispatchEvent(new $e05f414bc3918235$export$7053c33c051365ea($e05f414bc3918235$var$DragBoxEventType.BOXDRAG, mapBrowserEvent.coordinate, mapBrowserEvent));\n    }\n    /**\r\n   * Handle pointer up events.\r\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\r\n   * @return {boolean} If the event was consumed.\r\n   * @override\r\n   */ handleUpEvent(mapBrowserEvent) {\n        if (!this.startPixel_) return false;\n        const completeBox = this.boxEndCondition_(mapBrowserEvent, this.startPixel_, mapBrowserEvent.pixel);\n        if (completeBox) this.onBoxEnd(mapBrowserEvent);\n        this.dispatchEvent(new $e05f414bc3918235$export$7053c33c051365ea(completeBox ? $e05f414bc3918235$var$DragBoxEventType.BOXEND : $e05f414bc3918235$var$DragBoxEventType.BOXCANCEL, mapBrowserEvent.coordinate, mapBrowserEvent));\n        this.box_.setMap(null);\n        this.startPixel_ = null;\n        return false;\n    }\n    /**\r\n   * Handle pointer down events.\r\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\r\n   * @return {boolean} If the event was consumed.\r\n   * @override\r\n   */ handleDownEvent(mapBrowserEvent) {\n        if (this.condition_(mapBrowserEvent)) {\n            this.startPixel_ = mapBrowserEvent.pixel;\n            this.box_.setMap(mapBrowserEvent.map);\n            this.box_.setPixels(this.startPixel_, this.startPixel_);\n            this.dispatchEvent(new $e05f414bc3918235$export$7053c33c051365ea($e05f414bc3918235$var$DragBoxEventType.BOXSTART, mapBrowserEvent.coordinate, mapBrowserEvent));\n            return true;\n        }\n        return false;\n    }\n    /**\r\n   * Function to execute just before `onboxend` is fired\r\n   * @param {import(\"../MapBrowserEvent.js\").default} event Event.\r\n   */ onBoxEnd(event) {}\n    /**\r\n   * Activate or deactivate the interaction.\r\n   * @param {boolean} active Active.\r\n   * @observable\r\n   * @api\r\n   * @override\r\n   */ setActive(active) {\n        if (!active) {\n            this.box_.setMap(null);\n            if (this.startPixel_) {\n                this.dispatchEvent(new $e05f414bc3918235$export$7053c33c051365ea($e05f414bc3918235$var$DragBoxEventType.BOXCANCEL, this.startPixel_, null));\n                this.startPixel_ = null;\n            }\n        }\n        super.setActive(active);\n    }\n    /**\r\n   * @param {import(\"../Map.js\").default|null} map Map.\r\n   * @override\r\n   */ setMap(map) {\n        const oldMap = this.getMap();\n        if (oldMap) {\n            this.box_.setMap(null);\n            if (this.startPixel_) {\n                this.dispatchEvent(new $e05f414bc3918235$export$7053c33c051365ea($e05f414bc3918235$var$DragBoxEventType.BOXCANCEL, this.startPixel_, null));\n                this.startPixel_ = null;\n            }\n        }\n        super.setMap(map);\n    }\n}\nvar $e05f414bc3918235$export$2e2bcd8739ae039 = $e05f414bc3918235$var$DragBox;\n\n\n/**\r\n * @typedef {Object} Options\r\n * @property {string} [className='ol-dragzoom'] CSS class name for styling the\r\n * box.\r\n * @property {import(\"../events/condition.js\").Condition} [condition] A function that\r\n * takes a {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a\r\n * boolean to indicate whether that event should be handled.\r\n * Default is {@link module:ol/events/condition.shiftKeyOnly}.\r\n * @property {number} [duration=200] Animation duration in milliseconds.\r\n * @property {boolean} [out=false] Use interaction for zooming out.\r\n * @property {number} [minArea=64] The minimum area of the box in pixel, this value is used by the parent default\r\n * `boxEndCondition` function.\r\n */ /**\r\n * @classdesc\r\n * Allows the user to zoom the map by clicking and dragging on the map,\r\n * normally combined with a {@link module:ol/events/condition} that limits\r\n * it to when a key, shift by default, is held down.\r\n *\r\n * To change the style of the box, use CSS and the `.ol-dragzoom` selector, or\r\n * your custom one configured with `className`.\r\n * @api\r\n */ class $afc7f51010a5b660$var$DragZoom extends (0, $e05f414bc3918235$export$2e2bcd8739ae039) {\n    /**\r\n   * @param {Options} [options] Options.\r\n   */ constructor(options){\n        options = options ? options : {};\n        const condition = options.condition ? options.condition : (0, $edf87b50170125f7$export$5d31fe68a477cfbb);\n        super({\n            condition: condition,\n            className: options.className || 'ol-dragzoom',\n            minArea: options.minArea\n        });\n        /**\r\n     * @private\r\n     * @type {number}\r\n     */ this.duration_ = options.duration !== undefined ? options.duration : 200;\n        /**\r\n     * @private\r\n     * @type {boolean}\r\n     */ this.out_ = options.out !== undefined ? options.out : false;\n    }\n    /**\r\n   * Function to execute just before `onboxend` is fired\r\n   * @param {import(\"../MapBrowserEvent.js\").default} event Event.\r\n   * @override\r\n   */ onBoxEnd(event) {\n        const map = this.getMap();\n        const view = /** @type {!import(\"../View.js\").default} */ map.getView();\n        let geometry = this.getGeometry();\n        if (this.out_) {\n            const rotatedExtent = view.rotatedExtentForGeometry(geometry);\n            const resolution = view.getResolutionForExtentInternal(rotatedExtent);\n            const factor = view.getResolution() / resolution;\n            geometry = geometry.clone();\n            geometry.scale(factor * factor);\n        }\n        view.fitInternal(geometry, {\n            duration: this.duration_,\n            easing: (0, $c7ccf7e681a9b333$export$57636bb43b1ccbb0)\n        });\n    }\n}\nvar $afc7f51010a5b660$export$2e2bcd8739ae039 = $afc7f51010a5b660$var$DragZoom;\n\n\n/**\r\n * @module ol/interaction/KeyboardPan\r\n */ \n\n/**\r\n * @module ol/events/Key\r\n */ /**\r\n * @enum {string}\r\n * @const\r\n */ var $368e06a3031941b5$export$2e2bcd8739ae039 = {\n    LEFT: 'ArrowLeft',\n    UP: 'ArrowUp',\n    RIGHT: 'ArrowRight',\n    DOWN: 'ArrowDown'\n};\n\n\n\n\n/**\r\n * @typedef {Object} Options\r\n * @property {import(\"../events/condition.js\").Condition} [condition] A function that\r\n * takes a {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a\r\n * boolean to indicate whether that event should be handled. Default is\r\n * {@link module:ol/events/condition.noModifierKeys} and\r\n * {@link module:ol/events/condition.targetNotEditable}.\r\n * @property {number} [duration=100] Animation duration in milliseconds.\r\n * @property {number} [pixelDelta=128] The amount of pixels to pan on each key\r\n * press.\r\n */ /**\r\n * @classdesc\r\n * Allows the user to pan the map using keyboard arrows.\r\n * Note that, although this interaction is by default included in maps,\r\n * the keys can only be used when browser focus is on the element to which\r\n * the keyboard events are attached. By default, this is the map div,\r\n * though you can change this with the `keyboardEventTarget` in\r\n * {@link module:ol/Map~Map}. `document` never loses focus but, for any other\r\n * element, focus will have to be on, and returned to, this element if the keys\r\n * are to function.\r\n * See also {@link module:ol/interaction/KeyboardZoom~KeyboardZoom}.\r\n * @api\r\n */ class $178bb1517d626802$var$KeyboardPan extends (0, $39210df8527e63e5$export$2e2bcd8739ae039) {\n    /**\r\n   * @param {Options} [options] Options.\r\n   */ constructor(options){\n        super();\n        options = options || {};\n        /**\r\n     * @private\r\n     * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Browser event.\r\n     * @return {boolean} Combined condition result.\r\n     */ this.defaultCondition_ = function(mapBrowserEvent) {\n            return (0, $edf87b50170125f7$export$fdc892d0d8fe3bfb)(mapBrowserEvent) && (0, $edf87b50170125f7$export$e5570ca80cd8fd54)(mapBrowserEvent);\n        };\n        /**\r\n     * @private\r\n     * @type {import(\"../events/condition.js\").Condition}\r\n     */ this.condition_ = options.condition !== undefined ? options.condition : this.defaultCondition_;\n        /**\r\n     * @private\r\n     * @type {number}\r\n     */ this.duration_ = options.duration !== undefined ? options.duration : 100;\n        /**\r\n     * @private\r\n     * @type {number}\r\n     */ this.pixelDelta_ = options.pixelDelta !== undefined ? options.pixelDelta : 128;\n    }\n    /**\r\n   * Handles the {@link module:ol/MapBrowserEvent~MapBrowserEvent map browser event} if it was a\r\n   * `KeyEvent`, and decides the direction to pan to (if an arrow key was\r\n   * pressed).\r\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\r\n   * @return {boolean} `false` to stop event propagation.\r\n   * @override\r\n   */ handleEvent(mapBrowserEvent) {\n        let stopEvent = false;\n        if (mapBrowserEvent.type == (0, $294047c5e65f31a3$export$2e2bcd8739ae039).KEYDOWN) {\n            const keyEvent = /** @type {KeyboardEvent} */ mapBrowserEvent.originalEvent;\n            const key = keyEvent.key;\n            if (this.condition_(mapBrowserEvent) && (key == (0, $368e06a3031941b5$export$2e2bcd8739ae039).DOWN || key == (0, $368e06a3031941b5$export$2e2bcd8739ae039).LEFT || key == (0, $368e06a3031941b5$export$2e2bcd8739ae039).RIGHT || key == (0, $368e06a3031941b5$export$2e2bcd8739ae039).UP)) {\n                const map = mapBrowserEvent.map;\n                const view = map.getView();\n                const mapUnitsDelta = view.getResolution() * this.pixelDelta_;\n                let deltaX = 0, deltaY = 0;\n                if (key == (0, $368e06a3031941b5$export$2e2bcd8739ae039).DOWN) deltaY = -mapUnitsDelta;\n                else if (key == (0, $368e06a3031941b5$export$2e2bcd8739ae039).LEFT) deltaX = -mapUnitsDelta;\n                else if (key == (0, $368e06a3031941b5$export$2e2bcd8739ae039).RIGHT) deltaX = mapUnitsDelta;\n                else deltaY = mapUnitsDelta;\n                const delta = [\n                    deltaX,\n                    deltaY\n                ];\n                (0, $1bd0a226f9a16141$export$bb628a54ab399bc9)(delta, view.getRotation());\n                (0, $39210df8527e63e5$export$4c486572e961a974)(view, delta, this.duration_);\n                keyEvent.preventDefault();\n                stopEvent = true;\n            }\n        }\n        return !stopEvent;\n    }\n}\nvar $178bb1517d626802$export$2e2bcd8739ae039 = $178bb1517d626802$var$KeyboardPan;\n\n\n/**\r\n * @module ol/interaction/KeyboardZoom\r\n */ \n\n\n/**\r\n * @typedef {Object} Options\r\n * @property {number} [duration=100] Animation duration in milliseconds.\r\n * @property {import(\"../events/condition.js\").Condition} [condition] A function that\r\n * takes a {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a\r\n * boolean to indicate whether that event should be handled. The default condition is\r\n * that {@link module:ol/events/condition.targetNotEditable} is fulfilled and that\r\n * the platform modifier key isn't pressed\r\n * (!{@link module:ol/events/condition.platformModifierKey}).\r\n * @property {number} [delta=1] The zoom level delta on each key press.\r\n */ /**\r\n * @classdesc\r\n * Allows the user to zoom the map using keyboard + and -.\r\n * Note that, although this interaction is by default included in maps,\r\n * the keys can only be used when browser focus is on the element to which\r\n * the keyboard events are attached. By default, this is the map div,\r\n * though you can change this with the `keyboardEventTarget` in\r\n * {@link module:ol/Map~Map}. `document` never loses focus but, for any other\r\n * element, focus will have to be on, and returned to, this element if the keys\r\n * are to function.\r\n * See also {@link module:ol/interaction/KeyboardPan~KeyboardPan}.\r\n * @api\r\n */ class $2237fabfa170eefc$var$KeyboardZoom extends (0, $39210df8527e63e5$export$2e2bcd8739ae039) {\n    /**\r\n   * @param {Options} [options] Options.\r\n   */ constructor(options){\n        super();\n        options = options ? options : {};\n        /**\r\n     * @private\r\n     * @type {import(\"../events/condition.js\").Condition}\r\n     */ this.condition_ = options.condition ? options.condition : function(mapBrowserEvent) {\n            return !(0, $edf87b50170125f7$export$32603ad571dd22b5)(mapBrowserEvent) && (0, $edf87b50170125f7$export$e5570ca80cd8fd54)(mapBrowserEvent);\n        };\n        /**\r\n     * @private\r\n     * @type {number}\r\n     */ this.delta_ = options.delta ? options.delta : 1;\n        /**\r\n     * @private\r\n     * @type {number}\r\n     */ this.duration_ = options.duration !== undefined ? options.duration : 100;\n    }\n    /**\r\n   * Handles the {@link module:ol/MapBrowserEvent~MapBrowserEvent map browser event} if it was a\r\n   * `KeyEvent`, and decides whether to zoom in or out (depending on whether the\r\n   * key pressed was '+' or '-').\r\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\r\n   * @return {boolean} `false` to stop event propagation.\r\n   * @override\r\n   */ handleEvent(mapBrowserEvent) {\n        let stopEvent = false;\n        if (mapBrowserEvent.type == (0, $294047c5e65f31a3$export$2e2bcd8739ae039).KEYDOWN || mapBrowserEvent.type == (0, $294047c5e65f31a3$export$2e2bcd8739ae039).KEYPRESS) {\n            const keyEvent = /** @type {KeyboardEvent} */ mapBrowserEvent.originalEvent;\n            const key = keyEvent.key;\n            if (this.condition_(mapBrowserEvent) && (key === '+' || key === '-')) {\n                const map = mapBrowserEvent.map;\n                const delta = key === '+' ? this.delta_ : -this.delta_;\n                const view = map.getView();\n                (0, $39210df8527e63e5$export$ace321ff2a8016ef)(view, delta, undefined, this.duration_);\n                keyEvent.preventDefault();\n                stopEvent = true;\n            }\n        }\n        return !stopEvent;\n    }\n}\nvar $2237fabfa170eefc$export$2e2bcd8739ae039 = $2237fabfa170eefc$var$KeyboardZoom;\n\n\n/**\r\n * @module ol/interaction/MouseWheelZoom\r\n */ \n\n\n\n/**\r\n * @typedef {'trackpad' | 'wheel'} Mode\r\n */ /**\r\n * @typedef {Object} Options\r\n * @property {import(\"../events/condition.js\").Condition} [condition] A function that\r\n * takes a {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a\r\n * boolean to indicate whether that event should be handled. Default is\r\n * {@link module:ol/events/condition.always}.\r\n * @property {boolean} [onFocusOnly=false] When the map's target has a `tabindex` attribute set,\r\n * the interaction will only handle events when the map has the focus.\r\n * @property {number} [maxDelta=1] Maximum mouse wheel delta.\r\n * @property {number} [duration=250] Animation duration in milliseconds.\r\n * @property {number} [timeout=80] Mouse wheel timeout duration in milliseconds.\r\n * @property {boolean} [useAnchor=true] Enable zooming using the mouse's\r\n * location as the anchor. When set to `false`, zooming in and out will zoom to\r\n * the center of the screen instead of zooming on the mouse's location.\r\n * @property {boolean} [constrainResolution=false] If true, the mouse wheel zoom\r\n * event will always animate to the closest zoom level after an interaction;\r\n * false means intermediary zoom levels are allowed.\r\n */ /**\r\n * @classdesc\r\n * Allows the user to zoom the map by scrolling the mouse wheel.\r\n * @api\r\n */ class $aaa378764710d71e$var$MouseWheelZoom extends (0, $39210df8527e63e5$export$2e2bcd8739ae039) {\n    /**\r\n   * @param {Options} [options] Options.\r\n   */ constructor(options){\n        options = options ? options : {};\n        super(/** @type {import(\"./Interaction.js\").InteractionOptions} */ options);\n        /**\r\n     * @private\r\n     * @type {number}\r\n     */ this.totalDelta_ = 0;\n        /**\r\n     * @private\r\n     * @type {number}\r\n     */ this.lastDelta_ = 0;\n        /**\r\n     * @private\r\n     * @type {number}\r\n     */ this.maxDelta_ = options.maxDelta !== undefined ? options.maxDelta : 1;\n        /**\r\n     * @private\r\n     * @type {number}\r\n     */ this.duration_ = options.duration !== undefined ? options.duration : 250;\n        /**\r\n     * @private\r\n     * @type {number}\r\n     */ this.timeout_ = options.timeout !== undefined ? options.timeout : 80;\n        /**\r\n     * @private\r\n     * @type {boolean}\r\n     */ this.useAnchor_ = options.useAnchor !== undefined ? options.useAnchor : true;\n        /**\r\n     * @private\r\n     * @type {boolean}\r\n     */ this.constrainResolution_ = options.constrainResolution !== undefined ? options.constrainResolution : false;\n        const condition = options.condition ? options.condition : (0, $edf87b50170125f7$export$ba9e5d519bc326ca);\n        /**\r\n     * @private\r\n     * @type {import(\"../events/condition.js\").Condition}\r\n     */ this.condition_ = options.onFocusOnly ? (0, $edf87b50170125f7$export$84bf76cd7afc7469)((0, $edf87b50170125f7$export$ae2cdf064e3b0c55), condition) : condition;\n        /**\r\n     * @private\r\n     * @type {?import(\"../pixel.js\").Pixel}\r\n     */ this.lastAnchor_ = null;\n        /**\r\n     * @private\r\n     * @type {number|undefined}\r\n     */ this.startTime_ = undefined;\n        /**\r\n     * @private\r\n     * @type {ReturnType<typeof setTimeout>}\r\n     */ this.timeoutId_;\n        /**\r\n     * @private\r\n     * @type {Mode|undefined}\r\n     */ this.mode_ = undefined;\n        /**\r\n     * Trackpad events separated by this delay will be considered separate\r\n     * interactions.\r\n     * @private\r\n     * @type {number}\r\n     */ this.trackpadEventGap_ = 400;\n        /**\r\n     * @private\r\n     * @type {ReturnType<typeof setTimeout>}\r\n     */ this.trackpadTimeoutId_;\n        /**\r\n     * The number of delta values per zoom level\r\n     * @private\r\n     * @type {number}\r\n     */ this.deltaPerZoom_ = 300;\n    }\n    /**\r\n   * @private\r\n   */ endInteraction_() {\n        this.trackpadTimeoutId_ = undefined;\n        const map = this.getMap();\n        if (!map) return;\n        const view = map.getView();\n        view.endInteraction(undefined, this.lastDelta_ ? this.lastDelta_ > 0 ? 1 : -1 : 0, this.lastAnchor_ ? map.getCoordinateFromPixel(this.lastAnchor_) : null);\n    }\n    /**\r\n   * Handles the {@link module:ol/MapBrowserEvent~MapBrowserEvent map browser event} (if it was a mousewheel-event) and eventually\r\n   * zooms the map.\r\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\r\n   * @return {boolean} `false` to stop event propagation.\r\n   * @override\r\n   */ handleEvent(mapBrowserEvent) {\n        if (!this.condition_(mapBrowserEvent)) return true;\n        const type = mapBrowserEvent.type;\n        if (type !== (0, $294047c5e65f31a3$export$2e2bcd8739ae039).WHEEL) return true;\n        const map = mapBrowserEvent.map;\n        const wheelEvent = /** @type {WheelEvent} */ mapBrowserEvent.originalEvent;\n        wheelEvent.preventDefault();\n        if (this.useAnchor_) this.lastAnchor_ = mapBrowserEvent.pixel;\n        // Delta normalisation inspired by\n        // https://github.com/mapbox/mapbox-gl-js/blob/001c7b9/js/ui/handler/scroll_zoom.js\n        let delta;\n        if (mapBrowserEvent.type == (0, $294047c5e65f31a3$export$2e2bcd8739ae039).WHEEL) {\n            delta = wheelEvent.deltaY;\n            if (wheelEvent.deltaMode === WheelEvent.DOM_DELTA_LINE) delta *= 40;\n        }\n        if (delta === 0) return false;\n        this.lastDelta_ = delta;\n        const now = Date.now();\n        if (this.startTime_ === undefined) this.startTime_ = now;\n        if (!this.mode_ || now - this.startTime_ > this.trackpadEventGap_) this.mode_ = Math.abs(delta) < 4 ? 'trackpad' : 'wheel';\n        const view = map.getView();\n        if (this.mode_ === 'trackpad' && !(view.getConstrainResolution() || this.constrainResolution_)) {\n            if (this.trackpadTimeoutId_) clearTimeout(this.trackpadTimeoutId_);\n            else {\n                if (view.getAnimating()) view.cancelAnimations();\n                view.beginInteraction();\n            }\n            this.trackpadTimeoutId_ = setTimeout(this.endInteraction_.bind(this), this.timeout_);\n            view.adjustZoom(-delta / this.deltaPerZoom_, this.lastAnchor_ ? map.getCoordinateFromPixel(this.lastAnchor_) : null);\n            this.startTime_ = now;\n            return false;\n        }\n        this.totalDelta_ += delta;\n        const timeLeft = Math.max(this.timeout_ - (now - this.startTime_), 0);\n        clearTimeout(this.timeoutId_);\n        this.timeoutId_ = setTimeout(this.handleWheelZoom_.bind(this, map), timeLeft);\n        return false;\n    }\n    /**\r\n   * @private\r\n   * @param {import(\"../Map.js\").default} map Map.\r\n   */ handleWheelZoom_(map) {\n        const view = map.getView();\n        if (view.getAnimating()) view.cancelAnimations();\n        let delta = -(0, $6b000a049d919fe5$export$7d15b64cf5a3a4c4)(this.totalDelta_, -this.maxDelta_ * this.deltaPerZoom_, this.maxDelta_ * this.deltaPerZoom_) / this.deltaPerZoom_;\n        if (view.getConstrainResolution() || this.constrainResolution_) // view has a zoom constraint, zoom by 1\n        delta = delta ? delta > 0 ? 1 : -1 : 0;\n        (0, $39210df8527e63e5$export$ace321ff2a8016ef)(view, delta, this.lastAnchor_ ? map.getCoordinateFromPixel(this.lastAnchor_) : null, this.duration_);\n        this.mode_ = undefined;\n        this.totalDelta_ = 0;\n        this.lastAnchor_ = null;\n        this.startTime_ = undefined;\n        this.timeoutId_ = undefined;\n    }\n    /**\r\n   * Enable or disable using the mouse's location as an anchor when zooming\r\n   * @param {boolean} useAnchor true to zoom to the mouse's location, false\r\n   * to zoom to the center of the map\r\n   * @api\r\n   */ setMouseAnchor(useAnchor) {\n        this.useAnchor_ = useAnchor;\n        if (!useAnchor) this.lastAnchor_ = null;\n    }\n}\nvar $aaa378764710d71e$export$2e2bcd8739ae039 = $aaa378764710d71e$var$MouseWheelZoom;\n\n\n/**\r\n * @module ol/interaction/PinchRotate\r\n */ \n\n\n/**\r\n * @typedef {Object} Options\r\n * @property {number} [duration=250] The duration of the animation in\r\n * milliseconds.\r\n * @property {number} [threshold=0.3] Minimal angle in radians to start a rotation.\r\n */ /**\r\n * @classdesc\r\n * Allows the user to rotate the map by twisting with two fingers\r\n * on a touch screen.\r\n * @api\r\n */ class $9727451f2459496c$var$PinchRotate extends (0, $cf1eb502962d87a8$export$2e2bcd8739ae039) {\n    /**\r\n   * @param {Options} [options] Options.\r\n   */ constructor(options){\n        options = options ? options : {};\n        const pointerOptions = /** @type {import(\"./Pointer.js\").Options} */ options;\n        if (!pointerOptions.stopDown) pointerOptions.stopDown = (0, $013a1733c226ec50$export$8f11cee4bdc7e668);\n        super(pointerOptions);\n        /**\r\n     * @private\r\n     * @type {import(\"../coordinate.js\").Coordinate}\r\n     */ this.anchor_ = null;\n        /**\r\n     * @private\r\n     * @type {number|undefined}\r\n     */ this.lastAngle_ = undefined;\n        /**\r\n     * @private\r\n     * @type {boolean}\r\n     */ this.rotating_ = false;\n        /**\r\n     * @private\r\n     * @type {number}\r\n     */ this.rotationDelta_ = 0.0;\n        /**\r\n     * @private\r\n     * @type {number}\r\n     */ this.threshold_ = options.threshold !== undefined ? options.threshold : 0.3;\n        /**\r\n     * @private\r\n     * @type {number}\r\n     */ this.duration_ = options.duration !== undefined ? options.duration : 250;\n    }\n    /**\r\n   * Handle pointer drag events.\r\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\r\n   * @override\r\n   */ handleDragEvent(mapBrowserEvent) {\n        let rotationDelta = 0.0;\n        const touch0 = this.targetPointers[0];\n        const touch1 = this.targetPointers[1];\n        // angle between touches\n        const angle = Math.atan2(touch1.clientY - touch0.clientY, touch1.clientX - touch0.clientX);\n        if (this.lastAngle_ !== undefined) {\n            const delta = angle - this.lastAngle_;\n            this.rotationDelta_ += delta;\n            if (!this.rotating_ && Math.abs(this.rotationDelta_) > this.threshold_) this.rotating_ = true;\n            rotationDelta = delta;\n        }\n        this.lastAngle_ = angle;\n        const map = mapBrowserEvent.map;\n        const view = map.getView();\n        if (view.getConstraints().rotation === (0, $d65f0a322291d127$export$e20fbacbb41798b)) return;\n        // rotate anchor point.\n        // FIXME: should be the intersection point between the lines:\n        //     touch0,touch1 and previousTouch0,previousTouch1\n        this.anchor_ = map.getCoordinateFromPixelInternal(map.getEventPixel((0, $cf1eb502962d87a8$export$e2a20c553f6c85ce)(this.targetPointers)));\n        // rotate\n        if (this.rotating_) {\n            map.render();\n            view.adjustRotationInternal(rotationDelta, this.anchor_);\n        }\n    }\n    /**\r\n   * Handle pointer up events.\r\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\r\n   * @return {boolean} If the event was consumed.\r\n   * @override\r\n   */ handleUpEvent(mapBrowserEvent) {\n        if (this.targetPointers.length < 2) {\n            const map = mapBrowserEvent.map;\n            const view = map.getView();\n            view.endInteraction(this.duration_);\n            return false;\n        }\n        return true;\n    }\n    /**\r\n   * Handle pointer down events.\r\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\r\n   * @return {boolean} If the event was consumed.\r\n   * @override\r\n   */ handleDownEvent(mapBrowserEvent) {\n        if (this.targetPointers.length >= 2) {\n            const map = mapBrowserEvent.map;\n            this.anchor_ = null;\n            this.lastAngle_ = undefined;\n            this.rotating_ = false;\n            this.rotationDelta_ = 0.0;\n            if (!this.handlingDownUpSequence) map.getView().beginInteraction();\n            return true;\n        }\n        return false;\n    }\n}\nvar $9727451f2459496c$export$2e2bcd8739ae039 = $9727451f2459496c$var$PinchRotate;\n\n\n/**\r\n * @module ol/interaction/PinchZoom\r\n */ \n\n/**\r\n * @typedef {Object} Options\r\n * @property {number} [duration=400] Animation duration in milliseconds.\r\n */ /**\r\n * @classdesc\r\n * Allows the user to zoom the map by pinching with two fingers\r\n * on a touch screen.\r\n * @api\r\n */ class $79c946b60b88d4a6$var$PinchZoom extends (0, $cf1eb502962d87a8$export$2e2bcd8739ae039) {\n    /**\r\n   * @param {Options} [options] Options.\r\n   */ constructor(options){\n        options = options ? options : {};\n        const pointerOptions = /** @type {import(\"./Pointer.js\").Options} */ options;\n        if (!pointerOptions.stopDown) pointerOptions.stopDown = (0, $013a1733c226ec50$export$8f11cee4bdc7e668);\n        super(pointerOptions);\n        /**\r\n     * @private\r\n     * @type {import(\"../coordinate.js\").Coordinate}\r\n     */ this.anchor_ = null;\n        /**\r\n     * @private\r\n     * @type {number}\r\n     */ this.duration_ = options.duration !== undefined ? options.duration : 400;\n        /**\r\n     * @private\r\n     * @type {number|undefined}\r\n     */ this.lastDistance_ = undefined;\n        /**\r\n     * @private\r\n     * @type {number}\r\n     */ this.lastScaleDelta_ = 1;\n    }\n    /**\r\n   * Handle pointer drag events.\r\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\r\n   * @override\r\n   */ handleDragEvent(mapBrowserEvent) {\n        let scaleDelta = 1.0;\n        const touch0 = this.targetPointers[0];\n        const touch1 = this.targetPointers[1];\n        const dx = touch0.clientX - touch1.clientX;\n        const dy = touch0.clientY - touch1.clientY;\n        // distance between touches\n        const distance = Math.sqrt(dx * dx + dy * dy);\n        if (this.lastDistance_ !== undefined) scaleDelta = this.lastDistance_ / distance;\n        this.lastDistance_ = distance;\n        const map = mapBrowserEvent.map;\n        const view = map.getView();\n        if (scaleDelta != 1.0) this.lastScaleDelta_ = scaleDelta;\n        // scale anchor point.\n        this.anchor_ = map.getCoordinateFromPixelInternal(map.getEventPixel((0, $cf1eb502962d87a8$export$e2a20c553f6c85ce)(this.targetPointers)));\n        // scale, bypass the resolution constraint\n        map.render();\n        view.adjustResolutionInternal(scaleDelta, this.anchor_);\n    }\n    /**\r\n   * Handle pointer up events.\r\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\r\n   * @return {boolean} If the event was consumed.\r\n   * @override\r\n   */ handleUpEvent(mapBrowserEvent) {\n        if (this.targetPointers.length < 2) {\n            const map = mapBrowserEvent.map;\n            const view = map.getView();\n            const direction = this.lastScaleDelta_ > 1 ? 1 : -1;\n            view.endInteraction(this.duration_, direction);\n            return false;\n        }\n        return true;\n    }\n    /**\r\n   * Handle pointer down events.\r\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\r\n   * @return {boolean} If the event was consumed.\r\n   * @override\r\n   */ handleDownEvent(mapBrowserEvent) {\n        if (this.targetPointers.length >= 2) {\n            const map = mapBrowserEvent.map;\n            this.anchor_ = null;\n            this.lastDistance_ = undefined;\n            this.lastScaleDelta_ = 1;\n            if (!this.handlingDownUpSequence) map.getView().beginInteraction();\n            return true;\n        }\n        return false;\n    }\n}\nvar $79c946b60b88d4a6$export$2e2bcd8739ae039 = $79c946b60b88d4a6$var$PinchZoom;\n\n\nfunction $e3fbd36d629ecc04$export$ebe90cb607ad99e(options) {\n    options = options ? options : {};\n    /** @type {Collection<import(\"./Interaction.js\").default>} */ const interactions = new (0, $931ffc4e747c14db$export$2e2bcd8739ae039)();\n    const kinetic = new (0, $9a54ea8d5f7a49ee$export$2e2bcd8739ae039)(-0.005, 0.05, 100);\n    const altShiftDragRotate = options.altShiftDragRotate !== undefined ? options.altShiftDragRotate : true;\n    if (altShiftDragRotate) interactions.push(new (0, $197c7092261b2aa0$export$2e2bcd8739ae039)());\n    const doubleClickZoom = options.doubleClickZoom !== undefined ? options.doubleClickZoom : true;\n    if (doubleClickZoom) interactions.push(new (0, $b50403621294a654$export$2e2bcd8739ae039)({\n        delta: options.zoomDelta,\n        duration: options.zoomDuration\n    }));\n    const dragPan = options.dragPan !== undefined ? options.dragPan : true;\n    if (dragPan) interactions.push(new (0, $c11585da26a016db$export$2e2bcd8739ae039)({\n        onFocusOnly: options.onFocusOnly,\n        kinetic: kinetic\n    }));\n    const pinchRotate = options.pinchRotate !== undefined ? options.pinchRotate : true;\n    if (pinchRotate) interactions.push(new (0, $9727451f2459496c$export$2e2bcd8739ae039)());\n    const pinchZoom = options.pinchZoom !== undefined ? options.pinchZoom : true;\n    if (pinchZoom) interactions.push(new (0, $79c946b60b88d4a6$export$2e2bcd8739ae039)({\n        duration: options.zoomDuration\n    }));\n    const keyboard = options.keyboard !== undefined ? options.keyboard : true;\n    if (keyboard) {\n        interactions.push(new (0, $178bb1517d626802$export$2e2bcd8739ae039)());\n        interactions.push(new (0, $2237fabfa170eefc$export$2e2bcd8739ae039)({\n            delta: options.zoomDelta,\n            duration: options.zoomDuration\n        }));\n    }\n    const mouseWheelZoom = options.mouseWheelZoom !== undefined ? options.mouseWheelZoom : true;\n    if (mouseWheelZoom) interactions.push(new (0, $aaa378764710d71e$export$2e2bcd8739ae039)({\n        onFocusOnly: options.onFocusOnly,\n        duration: options.zoomDuration\n    }));\n    const shiftDragZoom = options.shiftDragZoom !== undefined ? options.shiftDragZoom : true;\n    if (shiftDragZoom) interactions.push(new (0, $afc7f51010a5b660$export$2e2bcd8739ae039)({\n        duration: options.zoomDuration\n    }));\n    return interactions;\n}\n\n\n/**\r\n * @module ol/layer/Group\r\n */ \n\n\n\n\n\n\n\n\n\n/**\r\n * @module ol/layer/Base\r\n */ \n\n\n\n/**\r\n * @module ol/layer/Property\r\n */ /**\r\n * @enum {string}\r\n */ var $f6d1853b3fcae320$export$2e2bcd8739ae039 = {\n    OPACITY: 'opacity',\n    VISIBLE: 'visible',\n    EXTENT: 'extent',\n    Z_INDEX: 'zIndex',\n    MAX_RESOLUTION: 'maxResolution',\n    MIN_RESOLUTION: 'minResolution',\n    MAX_ZOOM: 'maxZoom',\n    MIN_ZOOM: 'minZoom',\n    SOURCE: 'source',\n    MAP: 'map'\n};\n\n\n/**\r\n * A css color, or a function called with a view resolution returning a css color.\r\n *\r\n * @typedef {string|function(number):string} BackgroundColor\r\n * @api\r\n */ /**\r\n * @typedef {import(\"../ObjectEventType\").Types|'change:extent'|'change:maxResolution'|'change:maxZoom'|\r\n *    'change:minResolution'|'change:minZoom'|'change:opacity'|'change:visible'|'change:zIndex'} BaseLayerObjectEventTypes\r\n */ /***\r\n * @template Return\r\n * @typedef {import(\"../Observable\").OnSignature<import(\"../Observable\").EventTypes, import(\"../events/Event.js\").default, Return> &\r\n *   import(\"../Observable\").OnSignature<BaseLayerObjectEventTypes, import(\"../Object\").ObjectEvent, Return> &\r\n *   import(\"../Observable\").CombinedOnSignature<import(\"../Observable\").EventTypes|BaseLayerObjectEventTypes, Return>} BaseLayerOnSignature\r\n */ /**\r\n * @typedef {Object} Options\r\n * @property {string} [className='ol-layer'] A CSS class name to set to the layer element.\r\n * @property {number} [opacity=1] Opacity (0, 1).\r\n * @property {boolean} [visible=true] Visibility.\r\n * @property {import(\"../extent.js\").Extent} [extent] The bounding extent for layer rendering.  The layer will not be\r\n * rendered outside of this extent.\r\n * @property {number | undefined} [zIndex] The z-index for layer rendering.  At rendering time, the layers\r\n * will be ordered, first by Z-index and then by position. When `undefined`, a `zIndex` of 0 is assumed\r\n * for layers that are added to the map's `layers` collection, or `Infinity` when the layer's `setMap()`\r\n * method was used.\r\n * @property {number} [minResolution] The minimum resolution (inclusive) at which this layer will be\r\n * visible.\r\n * @property {number} [maxResolution] The maximum resolution (exclusive) below which this layer will\r\n * be visible.\r\n * @property {number} [minZoom] The minimum view zoom level (exclusive) above which this layer will be\r\n * visible.\r\n * @property {number} [maxZoom] The maximum view zoom level (inclusive) at which this layer will\r\n * be visible.\r\n * @property {BackgroundColor} [background] Background color for the layer. If not specified, no background\r\n * will be rendered.\r\n * @property {Object<string, *>} [properties] Arbitrary observable properties. Can be accessed with `#get()` and `#set()`.\r\n */ /**\r\n * @classdesc\r\n * Abstract base class; normally only used for creating subclasses and not\r\n * instantiated in apps.\r\n * Note that with {@link module:ol/layer/Base~BaseLayer} and all its subclasses, any property set in\r\n * the options is set as a {@link module:ol/Object~BaseObject} property on the layer object, so\r\n * is observable, and has get/set accessors.\r\n *\r\n * @api\r\n */ class $57c5f0299cb9b82f$var$BaseLayer extends (0, $b68b3d6e32e3074a$export$2e2bcd8739ae039) {\n    /**\r\n   * @param {Options} options Layer options.\r\n   */ constructor(options){\n        super();\n        /***\r\n     * @type {BaseLayerOnSignature<import(\"../events\").EventsKey>}\r\n     */ this.on;\n        /***\r\n     * @type {BaseLayerOnSignature<import(\"../events\").EventsKey>}\r\n     */ this.once;\n        /***\r\n     * @type {BaseLayerOnSignature<void>}\r\n     */ this.un;\n        /**\r\n     * @type {BackgroundColor|false}\r\n     * @private\r\n     */ this.background_ = options.background;\n        /**\r\n     * @type {Object<string, *>}\r\n     */ const properties = Object.assign({}, options);\n        if (typeof options.properties === 'object') {\n            delete properties.properties;\n            Object.assign(properties, options.properties);\n        }\n        properties[(0, $f6d1853b3fcae320$export$2e2bcd8739ae039).OPACITY] = options.opacity !== undefined ? options.opacity : 1;\n        (0, $35d5ec884318008e$export$a7a9523472993e97)(typeof properties[(0, $f6d1853b3fcae320$export$2e2bcd8739ae039).OPACITY] === 'number', 'Layer opacity must be a number');\n        properties[(0, $f6d1853b3fcae320$export$2e2bcd8739ae039).VISIBLE] = options.visible !== undefined ? options.visible : true;\n        properties[(0, $f6d1853b3fcae320$export$2e2bcd8739ae039).Z_INDEX] = options.zIndex;\n        properties[(0, $f6d1853b3fcae320$export$2e2bcd8739ae039).MAX_RESOLUTION] = options.maxResolution !== undefined ? options.maxResolution : Infinity;\n        properties[(0, $f6d1853b3fcae320$export$2e2bcd8739ae039).MIN_RESOLUTION] = options.minResolution !== undefined ? options.minResolution : 0;\n        properties[(0, $f6d1853b3fcae320$export$2e2bcd8739ae039).MIN_ZOOM] = options.minZoom !== undefined ? options.minZoom : -Infinity;\n        properties[(0, $f6d1853b3fcae320$export$2e2bcd8739ae039).MAX_ZOOM] = options.maxZoom !== undefined ? options.maxZoom : Infinity;\n        /**\r\n     * @type {string}\r\n     * @private\r\n     */ this.className_ = properties.className !== undefined ? properties.className : 'ol-layer';\n        delete properties.className;\n        this.setProperties(properties);\n        /**\r\n     * @type {import(\"./Layer.js\").State}\r\n     * @private\r\n     */ this.state_ = null;\n    }\n    /**\r\n   * Get the background for this layer.\r\n   * @return {BackgroundColor|false} Layer background.\r\n   */ getBackground() {\n        return this.background_;\n    }\n    /**\r\n   * @return {string} CSS class name.\r\n   */ getClassName() {\n        return this.className_;\n    }\n    /**\r\n   * This method is not meant to be called by layers or layer renderers because the state\r\n   * is incorrect if the layer is included in a layer group.\r\n   *\r\n   * @param {boolean} [managed] Layer is managed.\r\n   * @return {import(\"./Layer.js\").State} Layer state.\r\n   */ getLayerState(managed) {\n        /** @type {import(\"./Layer.js\").State} */ const state = this.state_ || /** @type {?} */ {\n            layer: this,\n            managed: managed === undefined ? true : managed\n        };\n        const zIndex = this.getZIndex();\n        state.opacity = (0, $6b000a049d919fe5$export$7d15b64cf5a3a4c4)(Math.round(this.getOpacity() * 100) / 100, 0, 1);\n        state.visible = this.getVisible();\n        state.extent = this.getExtent();\n        state.zIndex = zIndex === undefined && !state.managed ? Infinity : zIndex;\n        state.maxResolution = this.getMaxResolution();\n        state.minResolution = Math.max(this.getMinResolution(), 0);\n        state.minZoom = this.getMinZoom();\n        state.maxZoom = this.getMaxZoom();\n        this.state_ = state;\n        return state;\n    }\n    /**\r\n   * @abstract\r\n   * @param {Array<import(\"./Layer.js\").default>} [array] Array of layers (to be\r\n   *     modified in place).\r\n   * @return {Array<import(\"./Layer.js\").default>} Array of layers.\r\n   */ getLayersArray(array) {\n        return (0, $6c5e11070e371322$export$817eb92a8194bab0)();\n    }\n    /**\r\n   * @abstract\r\n   * @param {Array<import(\"./Layer.js\").State>} [states] Optional list of layer\r\n   *     states (to be modified in place).\r\n   * @return {Array<import(\"./Layer.js\").State>} List of layer states.\r\n   */ getLayerStatesArray(states) {\n        return (0, $6c5e11070e371322$export$817eb92a8194bab0)();\n    }\n    /**\r\n   * Return the {@link module:ol/extent~Extent extent} of the layer or `undefined` if it\r\n   * will be visible regardless of extent.\r\n   * @return {import(\"../extent.js\").Extent|undefined} The layer extent.\r\n   * @observable\r\n   * @api\r\n   */ getExtent() {\n        return /** @type {import(\"../extent.js\").Extent|undefined} */ this.get((0, $f6d1853b3fcae320$export$2e2bcd8739ae039).EXTENT);\n    }\n    /**\r\n   * Return the maximum resolution of the layer. Returns Infinity if\r\n   * the layer has no maximum resolution set.\r\n   * @return {number} The maximum resolution of the layer.\r\n   * @observable\r\n   * @api\r\n   */ getMaxResolution() {\n        return /** @type {number} */ this.get((0, $f6d1853b3fcae320$export$2e2bcd8739ae039).MAX_RESOLUTION);\n    }\n    /**\r\n   * Return the minimum resolution of the layer. Returns 0 if\r\n   * the layer has no minimum resolution set.\r\n   * @return {number} The minimum resolution of the layer.\r\n   * @observable\r\n   * @api\r\n   */ getMinResolution() {\n        return /** @type {number} */ this.get((0, $f6d1853b3fcae320$export$2e2bcd8739ae039).MIN_RESOLUTION);\n    }\n    /**\r\n   * Return the minimum zoom level of the layer. Returns -Infinity if\r\n   * the layer has no minimum zoom set.\r\n   * @return {number} The minimum zoom level of the layer.\r\n   * @observable\r\n   * @api\r\n   */ getMinZoom() {\n        return /** @type {number} */ this.get((0, $f6d1853b3fcae320$export$2e2bcd8739ae039).MIN_ZOOM);\n    }\n    /**\r\n   * Return the maximum zoom level of the layer. Returns Infinity if\r\n   * the layer has no maximum zoom set.\r\n   * @return {number} The maximum zoom level of the layer.\r\n   * @observable\r\n   * @api\r\n   */ getMaxZoom() {\n        return /** @type {number} */ this.get((0, $f6d1853b3fcae320$export$2e2bcd8739ae039).MAX_ZOOM);\n    }\n    /**\r\n   * Return the opacity of the layer (between 0 and 1).\r\n   * @return {number} The opacity of the layer.\r\n   * @observable\r\n   * @api\r\n   */ getOpacity() {\n        return /** @type {number} */ this.get((0, $f6d1853b3fcae320$export$2e2bcd8739ae039).OPACITY);\n    }\n    /**\r\n   * @abstract\r\n   * @return {import(\"../source/Source.js\").State} Source state.\r\n   */ getSourceState() {\n        return (0, $6c5e11070e371322$export$817eb92a8194bab0)();\n    }\n    /**\r\n   * Return the value of this layer's `visible` property. To find out whether the layer\r\n   * is visible on a map, use `isVisible()` instead.\r\n   * @return {boolean} The value of the `visible` property of the layer.\r\n   * @observable\r\n   * @api\r\n   */ getVisible() {\n        return /** @type {boolean} */ this.get((0, $f6d1853b3fcae320$export$2e2bcd8739ae039).VISIBLE);\n    }\n    /**\r\n   * Return the Z-index of the layer, which is used to order layers before\r\n   * rendering. Returns undefined if the layer is unmanaged.\r\n   * @return {number|undefined} The Z-index of the layer.\r\n   * @observable\r\n   * @api\r\n   */ getZIndex() {\n        return /** @type {number|undefined} */ this.get((0, $f6d1853b3fcae320$export$2e2bcd8739ae039).Z_INDEX);\n    }\n    /**\r\n   * Sets the background color.\r\n   * @param {BackgroundColor} [background] Background color.\r\n   */ setBackground(background) {\n        this.background_ = background;\n        this.changed();\n    }\n    /**\r\n   * Set the extent at which the layer is visible.  If `undefined`, the layer\r\n   * will be visible at all extents.\r\n   * @param {import(\"../extent.js\").Extent|undefined} extent The extent of the layer.\r\n   * @observable\r\n   * @api\r\n   */ setExtent(extent) {\n        this.set((0, $f6d1853b3fcae320$export$2e2bcd8739ae039).EXTENT, extent);\n    }\n    /**\r\n   * Set the maximum resolution at which the layer is visible.\r\n   * @param {number} maxResolution The maximum resolution of the layer.\r\n   * @observable\r\n   * @api\r\n   */ setMaxResolution(maxResolution) {\n        this.set((0, $f6d1853b3fcae320$export$2e2bcd8739ae039).MAX_RESOLUTION, maxResolution);\n    }\n    /**\r\n   * Set the minimum resolution at which the layer is visible.\r\n   * @param {number} minResolution The minimum resolution of the layer.\r\n   * @observable\r\n   * @api\r\n   */ setMinResolution(minResolution) {\n        this.set((0, $f6d1853b3fcae320$export$2e2bcd8739ae039).MIN_RESOLUTION, minResolution);\n    }\n    /**\r\n   * Set the maximum zoom (exclusive) at which the layer is visible.\r\n   * Note that the zoom levels for layer visibility are based on the\r\n   * view zoom level, which may be different from a tile source zoom level.\r\n   * @param {number} maxZoom The maximum zoom of the layer.\r\n   * @observable\r\n   * @api\r\n   */ setMaxZoom(maxZoom) {\n        this.set((0, $f6d1853b3fcae320$export$2e2bcd8739ae039).MAX_ZOOM, maxZoom);\n    }\n    /**\r\n   * Set the minimum zoom (inclusive) at which the layer is visible.\r\n   * Note that the zoom levels for layer visibility are based on the\r\n   * view zoom level, which may be different from a tile source zoom level.\r\n   * @param {number} minZoom The minimum zoom of the layer.\r\n   * @observable\r\n   * @api\r\n   */ setMinZoom(minZoom) {\n        this.set((0, $f6d1853b3fcae320$export$2e2bcd8739ae039).MIN_ZOOM, minZoom);\n    }\n    /**\r\n   * Set the opacity of the layer, allowed values range from 0 to 1.\r\n   * @param {number} opacity The opacity of the layer.\r\n   * @observable\r\n   * @api\r\n   */ setOpacity(opacity) {\n        (0, $35d5ec884318008e$export$a7a9523472993e97)(typeof opacity === 'number', 'Layer opacity must be a number');\n        this.set((0, $f6d1853b3fcae320$export$2e2bcd8739ae039).OPACITY, opacity);\n    }\n    /**\r\n   * Set the visibility of the layer (`true` or `false`).\r\n   * @param {boolean} visible The visibility of the layer.\r\n   * @observable\r\n   * @api\r\n   */ setVisible(visible) {\n        this.set((0, $f6d1853b3fcae320$export$2e2bcd8739ae039).VISIBLE, visible);\n    }\n    /**\r\n   * Set Z-index of the layer, which is used to order layers before rendering.\r\n   * The default Z-index is 0.\r\n   * @param {number} zindex The z-index of the layer.\r\n   * @observable\r\n   * @api\r\n   */ setZIndex(zindex) {\n        this.set((0, $f6d1853b3fcae320$export$2e2bcd8739ae039).Z_INDEX, zindex);\n    }\n    /**\r\n   * Clean up.\r\n   * @override\r\n   */ disposeInternal() {\n        if (this.state_) {\n            this.state_.layer = null;\n            this.state_ = null;\n        }\n        super.disposeInternal();\n    }\n}\nvar $57c5f0299cb9b82f$export$2e2bcd8739ae039 = $57c5f0299cb9b82f$var$BaseLayer;\n\n\nclass $0b703156bb914e6f$export$2f5ff21d758d25a7 extends (0, $aeedce20e9577100$export$2e2bcd8739ae039) {\n    /**\r\n   * @param {GroupEventType} type The event type.\r\n   * @param {BaseLayer} layer The layer.\r\n   */ constructor(type, layer){\n        super(type);\n        /**\r\n     * The added or removed layer.\r\n     * @type {BaseLayer}\r\n     * @api\r\n     */ this.layer = layer;\n    }\n}\n/***\r\n * @template Return\r\n * @typedef {import(\"../Observable\").OnSignature<import(\"../Observable\").EventTypes, import(\"../events/Event.js\").default, Return> &\r\n *   import(\"../Observable\").OnSignature<import(\"./Base\").BaseLayerObjectEventTypes|\r\n *     'change:layers', import(\"../Object\").ObjectEvent, Return> &\r\n *   import(\"../Observable\").CombinedOnSignature<import(\"../Observable\").EventTypes|import(\"./Base\").BaseLayerObjectEventTypes|'change:layers', Return>} GroupOnSignature\r\n */ /**\r\n * @typedef {Object} Options\r\n * @property {number} [opacity=1] Opacity (0, 1).\r\n * @property {boolean} [visible=true] Visibility.\r\n * @property {import(\"../extent.js\").Extent} [extent] The bounding extent for layer rendering.  The layer will not be\r\n * rendered outside of this extent.\r\n * @property {number} [zIndex] The z-index for layer rendering.  At rendering time, the layers\r\n * will be ordered, first by Z-index and then by position. When `undefined`, a `zIndex` of 0 is assumed\r\n * for layers that are added to the map's `layers` collection, or `Infinity` when the layer's `setMap()`\r\n * method was used.\r\n * @property {number} [minResolution] The minimum resolution (inclusive) at which this layer will be\r\n * visible.\r\n * @property {number} [maxResolution] The maximum resolution (exclusive) below which this layer will\r\n * be visible.\r\n * @property {number} [minZoom] The minimum view zoom level (exclusive) above which this layer will be\r\n * visible.\r\n * @property {number} [maxZoom] The maximum view zoom level (inclusive) at which this layer will\r\n * be visible.\r\n * @property {Array<import(\"./Base.js\").default>|Collection<import(\"./Base.js\").default>} [layers] Child layers.\r\n * @property {Object<string, *>} [properties] Arbitrary observable properties. Can be accessed with `#get()` and `#set()`.\r\n */ /**\r\n * @enum {string}\r\n * @private\r\n */ const $0b703156bb914e6f$var$Property = {\n    LAYERS: 'layers'\n};\n/**\r\n * @classdesc\r\n * A {@link module:ol/Collection~Collection} of layers that are handled together.\r\n *\r\n * A generic `change` event is triggered when the group/Collection changes.\r\n *\r\n * @api\r\n */ class $0b703156bb914e6f$var$LayerGroup extends (0, $57c5f0299cb9b82f$export$2e2bcd8739ae039) {\n    /**\r\n   * @param {Options} [options] Layer options.\r\n   */ constructor(options){\n        options = options || {};\n        const baseOptions = /** @type {Options} */ Object.assign({}, options);\n        delete baseOptions.layers;\n        let layers = options.layers;\n        super(baseOptions);\n        /***\r\n     * @type {GroupOnSignature<import(\"../events\").EventsKey>}\r\n     */ this.on;\n        /***\r\n     * @type {GroupOnSignature<import(\"../events\").EventsKey>}\r\n     */ this.once;\n        /***\r\n     * @type {GroupOnSignature<void>}\r\n     */ this.un;\n        /**\r\n     * @private\r\n     * @type {Array<import(\"../events.js\").EventsKey>}\r\n     */ this.layersListenerKeys_ = [];\n        /**\r\n     * @private\r\n     * @type {Object<string, Array<import(\"../events.js\").EventsKey>>}\r\n     */ this.listenerKeys_ = {};\n        this.addChangeListener($0b703156bb914e6f$var$Property.LAYERS, this.handleLayersChanged_);\n        if (layers) {\n            if (Array.isArray(layers)) layers = new (0, $931ffc4e747c14db$export$2e2bcd8739ae039)(layers.slice(), {\n                unique: true\n            });\n            else (0, $35d5ec884318008e$export$a7a9523472993e97)(typeof /** @type {?} */ layers.getArray === 'function', 'Expected `layers` to be an array or a `Collection`');\n        } else layers = new (0, $931ffc4e747c14db$export$2e2bcd8739ae039)(undefined, {\n            unique: true\n        });\n        this.setLayers(layers);\n    }\n    /**\r\n   * @private\r\n   */ handleLayerChange_() {\n        this.changed();\n    }\n    /**\r\n   * @private\r\n   */ handleLayersChanged_() {\n        this.layersListenerKeys_.forEach((0, $d5bf8abd656a3cdc$export$b0a21c8b3c1c921));\n        this.layersListenerKeys_.length = 0;\n        const layers = this.getLayers();\n        this.layersListenerKeys_.push((0, $d5bf8abd656a3cdc$export$63174c828edd6ff8)(layers, (0, $161dd067fe2d672c$export$2e2bcd8739ae039).ADD, this.handleLayersAdd_, this), (0, $d5bf8abd656a3cdc$export$63174c828edd6ff8)(layers, (0, $161dd067fe2d672c$export$2e2bcd8739ae039).REMOVE, this.handleLayersRemove_, this));\n        for(const id in this.listenerKeys_)this.listenerKeys_[id].forEach((0, $d5bf8abd656a3cdc$export$b0a21c8b3c1c921));\n        (0, $beaefe87199bb537$export$42ffd38884aecdac)(this.listenerKeys_);\n        const layersArray = layers.getArray();\n        for(let i = 0, ii = layersArray.length; i < ii; i++){\n            const layer = layersArray[i];\n            this.registerLayerListeners_(layer);\n            this.dispatchEvent(new $0b703156bb914e6f$export$2f5ff21d758d25a7('addlayer', layer));\n        }\n        this.changed();\n    }\n    /**\r\n   * @param {BaseLayer} layer The layer.\r\n   */ registerLayerListeners_(layer) {\n        const listenerKeys = [\n            (0, $d5bf8abd656a3cdc$export$63174c828edd6ff8)(layer, (0, $e881b5dca21eb5d4$export$2e2bcd8739ae039).PROPERTYCHANGE, this.handleLayerChange_, this),\n            (0, $d5bf8abd656a3cdc$export$63174c828edd6ff8)(layer, (0, $294047c5e65f31a3$export$2e2bcd8739ae039).CHANGE, this.handleLayerChange_, this)\n        ];\n        if (layer instanceof $0b703156bb914e6f$var$LayerGroup) listenerKeys.push((0, $d5bf8abd656a3cdc$export$63174c828edd6ff8)(layer, 'addlayer', this.handleLayerGroupAdd_, this), (0, $d5bf8abd656a3cdc$export$63174c828edd6ff8)(layer, 'removelayer', this.handleLayerGroupRemove_, this));\n        this.listenerKeys_[(0, $6c5e11070e371322$export$5e82334337e0f204)(layer)] = listenerKeys;\n    }\n    /**\r\n   * @param {GroupEvent} event The layer group event.\r\n   */ handleLayerGroupAdd_(event) {\n        this.dispatchEvent(new $0b703156bb914e6f$export$2f5ff21d758d25a7('addlayer', event.layer));\n    }\n    /**\r\n   * @param {GroupEvent} event The layer group event.\r\n   */ handleLayerGroupRemove_(event) {\n        this.dispatchEvent(new $0b703156bb914e6f$export$2f5ff21d758d25a7('removelayer', event.layer));\n    }\n    /**\r\n   * @param {import(\"../Collection.js\").CollectionEvent<import(\"./Base.js\").default>} collectionEvent CollectionEvent.\r\n   * @private\r\n   */ handleLayersAdd_(collectionEvent) {\n        const layer = collectionEvent.element;\n        this.registerLayerListeners_(layer);\n        this.dispatchEvent(new $0b703156bb914e6f$export$2f5ff21d758d25a7('addlayer', layer));\n        this.changed();\n    }\n    /**\r\n   * @param {import(\"../Collection.js\").CollectionEvent<import(\"./Base.js\").default>} collectionEvent CollectionEvent.\r\n   * @private\r\n   */ handleLayersRemove_(collectionEvent) {\n        const layer = collectionEvent.element;\n        const key = (0, $6c5e11070e371322$export$5e82334337e0f204)(layer);\n        this.listenerKeys_[key].forEach((0, $d5bf8abd656a3cdc$export$b0a21c8b3c1c921));\n        delete this.listenerKeys_[key];\n        this.dispatchEvent(new $0b703156bb914e6f$export$2f5ff21d758d25a7('removelayer', layer));\n        this.changed();\n    }\n    /**\r\n   * Returns the {@link module:ol/Collection~Collection collection} of {@link module:ol/layer/Layer~Layer layers}\r\n   * in this group.\r\n   * @return {!Collection<import(\"./Base.js\").default>} Collection of\r\n   *   {@link module:ol/layer/Base~BaseLayer layers} that are part of this group.\r\n   * @observable\r\n   * @api\r\n   */ getLayers() {\n        return /** @type {!Collection<import(\"./Base.js\").default>} */ this.get($0b703156bb914e6f$var$Property.LAYERS);\n    }\n    /**\r\n   * Set the {@link module:ol/Collection~Collection collection} of {@link module:ol/layer/Layer~Layer layers}\r\n   * in this group.\r\n   * @param {!Collection<import(\"./Base.js\").default>} layers Collection of\r\n   *   {@link module:ol/layer/Base~BaseLayer layers} that are part of this group.\r\n   * @observable\r\n   * @api\r\n   */ setLayers(layers) {\n        const collection = this.getLayers();\n        if (collection) {\n            const currentLayers = collection.getArray();\n            for(let i = 0, ii = currentLayers.length; i < ii; ++i)this.dispatchEvent(new $0b703156bb914e6f$export$2f5ff21d758d25a7('removelayer', currentLayers[i]));\n        }\n        this.set($0b703156bb914e6f$var$Property.LAYERS, layers);\n    }\n    /**\r\n   * @param {Array<import(\"./Layer.js\").default>} [array] Array of layers (to be modified in place).\r\n   * @return {Array<import(\"./Layer.js\").default>} Array of layers.\r\n   * @override\r\n   */ getLayersArray(array) {\n        array = array !== undefined ? array : [];\n        this.getLayers().forEach(function(layer) {\n            layer.getLayersArray(array);\n        });\n        return array;\n    }\n    /**\r\n   * Get the layer states list and use this groups z-index as the default\r\n   * for all layers in this and nested groups, if it is unset at this point.\r\n   * If dest is not provided and this group's z-index is undefined\r\n   * 0 is used a the default z-index.\r\n   * @param {Array<import(\"./Layer.js\").State>} [dest] Optional list\r\n   * of layer states (to be modified in place).\r\n   * @return {Array<import(\"./Layer.js\").State>} List of layer states.\r\n   * @override\r\n   */ getLayerStatesArray(dest) {\n        const states = dest !== undefined ? dest : [];\n        const pos = states.length;\n        this.getLayers().forEach(function(layer) {\n            layer.getLayerStatesArray(states);\n        });\n        const ownLayerState = this.getLayerState();\n        let defaultZIndex = ownLayerState.zIndex;\n        if (!dest && ownLayerState.zIndex === undefined) defaultZIndex = 0;\n        for(let i = pos, ii = states.length; i < ii; i++){\n            const layerState = states[i];\n            layerState.opacity *= ownLayerState.opacity;\n            layerState.visible = layerState.visible && ownLayerState.visible;\n            layerState.maxResolution = Math.min(layerState.maxResolution, ownLayerState.maxResolution);\n            layerState.minResolution = Math.max(layerState.minResolution, ownLayerState.minResolution);\n            layerState.minZoom = Math.max(layerState.minZoom, ownLayerState.minZoom);\n            layerState.maxZoom = Math.min(layerState.maxZoom, ownLayerState.maxZoom);\n            if (ownLayerState.extent !== undefined) {\n                if (layerState.extent !== undefined) layerState.extent = (0, $6da4c8ed3074c92b$export$72209efa88586d42)(layerState.extent, ownLayerState.extent);\n                else layerState.extent = ownLayerState.extent;\n            }\n            if (layerState.zIndex === undefined) layerState.zIndex = defaultZIndex;\n        }\n        return states;\n    }\n    /**\r\n   * @return {import(\"../source/Source.js\").State} Source state.\r\n   * @override\r\n   */ getSourceState() {\n        return 'ready';\n    }\n}\nvar $0b703156bb914e6f$export$2e2bcd8739ae039 = $0b703156bb914e6f$var$LayerGroup;\n\n\n/**\r\n * @module ol/layer/Layer\r\n */ \n\n\n\n\n/**\r\n * @module ol/render/EventType\r\n */ /**\r\n * @enum {string}\r\n */ var $f5e92a4d985a2824$export$2e2bcd8739ae039 /**\r\n * @typedef {'postrender'|'precompose'|'postcompose'|'rendercomplete'} MapRenderEventTypes\r\n */  /**\r\n * @typedef {'postrender'|'prerender'} LayerRenderEventTypes\r\n */  = {\n    /**\r\n   * Triggered before a layer is rendered.\r\n   * @event module:ol/render/Event~RenderEvent#prerender\r\n   * @api\r\n   */ PRERENDER: 'prerender',\n    /**\r\n   * Triggered after a layer is rendered.\r\n   * @event module:ol/render/Event~RenderEvent#postrender\r\n   * @api\r\n   */ POSTRENDER: 'postrender',\n    /**\r\n   * Triggered before layers are composed.  When dispatched by the map, the event object will not have\r\n   * a `context` set.  When dispatched by a layer, the event object will have a `context` set.  Only\r\n   * WebGL layers currently dispatch this event.\r\n   * @event module:ol/render/Event~RenderEvent#precompose\r\n   * @api\r\n   */ PRECOMPOSE: 'precompose',\n    /**\r\n   * Triggered after layers are composed.  When dispatched by the map, the event object will not have\r\n   * a `context` set.  When dispatched by a layer, the event object will have a `context` set.  Only\r\n   * WebGL layers currently dispatch this event.\r\n   * @event module:ol/render/Event~RenderEvent#postcompose\r\n   * @api\r\n   */ POSTCOMPOSE: 'postcompose',\n    /**\r\n   * Triggered when rendering is complete, i.e. all sources and tiles have\r\n   * finished loading for the current viewport, and all tiles are faded in.\r\n   * The event object will not have a `context` set.\r\n   * @event module:ol/render/Event~RenderEvent#rendercomplete\r\n   * @api\r\n   */ RENDERCOMPLETE: 'rendercomplete'\n};\n\n\n\n\n/**\r\n * @typedef {function(import(\"../Map.js\").FrameState):HTMLElement} RenderFunction\r\n */ /**\r\n * @typedef {'sourceready'|'change:source'} LayerEventType\r\n */ /***\r\n * @template Return\r\n * @typedef {import(\"../Observable\").OnSignature<import(\"../Observable\").EventTypes, import(\"../events/Event.js\").default, Return> &\r\n *   import(\"../Observable\").OnSignature<import(\"./Base\").BaseLayerObjectEventTypes|\r\n *     LayerEventType, import(\"../Object\").ObjectEvent, Return> &\r\n *   import(\"../Observable\").OnSignature<import(\"../render/EventType\").LayerRenderEventTypes, import(\"../render/Event\").default, Return> &\r\n *   import(\"../Observable\").CombinedOnSignature<import(\"../Observable\").EventTypes|import(\"./Base\").BaseLayerObjectEventTypes|LayerEventType|\r\n *     import(\"../render/EventType\").LayerRenderEventTypes, Return>} LayerOnSignature\r\n */ /**\r\n * @template {import(\"../source/Source.js\").default} [SourceType=import(\"../source/Source.js\").default]\r\n * @typedef {Object} Options\r\n * @property {string} [className='ol-layer'] A CSS class name to set to the layer element.\r\n * @property {number} [opacity=1] Opacity (0, 1).\r\n * @property {boolean} [visible=true] Visibility.\r\n * @property {import(\"../extent.js\").Extent} [extent] The bounding extent for layer rendering.  The layer will not be\r\n * rendered outside of this extent.\r\n * @property {number} [zIndex] The z-index for layer rendering.  At rendering time, the layers\r\n * will be ordered, first by Z-index and then by position. When `undefined`, a `zIndex` of 0 is assumed\r\n * for layers that are added to the map's `layers` collection, or `Infinity` when the layer's `setMap()`\r\n * method was used.\r\n * @property {number} [minResolution] The minimum resolution (inclusive) at which this layer will be\r\n * visible.\r\n * @property {number} [maxResolution] The maximum resolution (exclusive) below which this layer will\r\n * be visible.\r\n * @property {number} [minZoom] The minimum view zoom level (exclusive) above which this layer will be\r\n * visible.\r\n * @property {number} [maxZoom] The maximum view zoom level (inclusive) at which this layer will\r\n * be visible.\r\n * @property {SourceType} [source] Source for this layer.  If not provided to the constructor,\r\n * the source can be set by calling {@link module:ol/layer/Layer~Layer#setSource layer.setSource(source)} after\r\n * construction.\r\n * @property {import(\"../Map.js\").default|null} [map] Map.\r\n * @property {RenderFunction} [render] Render function. Takes the frame state as input and is expected to return an\r\n * HTML element. Will overwrite the default rendering for the layer.\r\n * @property {Object<string, *>} [properties] Arbitrary observable properties. Can be accessed with `#get()` and `#set()`.\r\n */ /**\r\n * @typedef {Object} State\r\n * @property {import(\"./Layer.js\").default} layer Layer.\r\n * @property {number} opacity Opacity, the value is rounded to two digits to appear after the decimal point.\r\n * @property {boolean} visible Visible.\r\n * @property {boolean} managed Managed.\r\n * @property {import(\"../extent.js\").Extent} [extent] Extent.\r\n * @property {number} zIndex ZIndex.\r\n * @property {number} maxResolution Maximum resolution.\r\n * @property {number} minResolution Minimum resolution.\r\n * @property {number} minZoom Minimum zoom.\r\n * @property {number} maxZoom Maximum zoom.\r\n */ /**\r\n * @classdesc\r\n * Base class from which all layer types are derived. This should only be instantiated\r\n * in the case where a custom layer is added to the map with a custom `render` function.\r\n * Such a function can be specified in the `options` object, and is expected to return an HTML element.\r\n *\r\n * A visual representation of raster or vector map data.\r\n * Layers group together those properties that pertain to how the data is to be\r\n * displayed, irrespective of the source of that data.\r\n *\r\n * Layers are usually added to a map with [map.addLayer()]{@link import(\"../Map.js\").default#addLayer}.\r\n * Components like {@link module:ol/interaction/Draw~Draw} use unmanaged layers\r\n * internally. These unmanaged layers are associated with the map using\r\n * [layer.setMap()]{@link module:ol/layer/Layer~Layer#setMap} instead.\r\n *\r\n * A generic `change` event is fired when the state of the source changes.\r\n * A `sourceready` event is fired when the layer's source is ready.\r\n *\r\n * @fires import(\"../render/Event.js\").RenderEvent#prerender\r\n * @fires import(\"../render/Event.js\").RenderEvent#postrender\r\n * @fires import(\"../events/Event.js\").BaseEvent#sourceready\r\n *\r\n * @template {import(\"../source/Source.js\").default} [SourceType=import(\"../source/Source.js\").default]\r\n * @template {import(\"../renderer/Layer.js\").default} [RendererType=import(\"../renderer/Layer.js\").default]\r\n * @api\r\n */ class $534f30fce11effcd$var$Layer extends (0, $57c5f0299cb9b82f$export$2e2bcd8739ae039) {\n    /**\r\n   * @param {Options<SourceType>} options Layer options.\r\n   */ constructor(options){\n        const baseOptions = Object.assign({}, options);\n        delete baseOptions.source;\n        super(baseOptions);\n        /***\r\n     * @type {LayerOnSignature<import(\"../events\").EventsKey>}\r\n     */ this.on;\n        /***\r\n     * @type {LayerOnSignature<import(\"../events\").EventsKey>}\r\n     */ this.once;\n        /***\r\n     * @type {LayerOnSignature<void>}\r\n     */ this.un;\n        /**\r\n     * @private\r\n     * @type {?import(\"../events.js\").EventsKey}\r\n     */ this.mapPrecomposeKey_ = null;\n        /**\r\n     * @private\r\n     * @type {?import(\"../events.js\").EventsKey}\r\n     */ this.mapRenderKey_ = null;\n        /**\r\n     * @private\r\n     * @type {?import(\"../events.js\").EventsKey}\r\n     */ this.sourceChangeKey_ = null;\n        /**\r\n     * @private\r\n     * @type {RendererType}\r\n     */ this.renderer_ = null;\n        /**\r\n     * @private\r\n     * @type {boolean}\r\n     */ this.sourceReady_ = false;\n        /**\r\n     * @protected\r\n     * @type {boolean}\r\n     */ this.rendered = false;\n        // Overwrite default render method with a custom one\n        if (options.render) this.render = options.render;\n        if (options.map) this.setMap(options.map);\n        this.addChangeListener((0, $f6d1853b3fcae320$export$2e2bcd8739ae039).SOURCE, this.handleSourcePropertyChange_);\n        const source = options.source ? /** @type {SourceType} */ options.source : null;\n        this.setSource(source);\n    }\n    /**\r\n   * @param {Array<import(\"./Layer.js\").default>} [array] Array of layers (to be modified in place).\r\n   * @return {Array<import(\"./Layer.js\").default>} Array of layers.\r\n   * @override\r\n   */ getLayersArray(array) {\n        array = array ? array : [];\n        array.push(this);\n        return array;\n    }\n    /**\r\n   * @param {Array<import(\"./Layer.js\").State>} [states] Optional list of layer states (to be modified in place).\r\n   * @return {Array<import(\"./Layer.js\").State>} List of layer states.\r\n   * @override\r\n   */ getLayerStatesArray(states) {\n        states = states ? states : [];\n        states.push(this.getLayerState());\n        return states;\n    }\n    /**\r\n   * Get the layer source.\r\n   * @return {SourceType|null} The layer source (or `null` if not yet set).\r\n   * @observable\r\n   * @api\r\n   */ getSource() {\n        return /** @type {SourceType} */ this.get((0, $f6d1853b3fcae320$export$2e2bcd8739ae039).SOURCE) || null;\n    }\n    /**\r\n   * @return {SourceType|null} The source being rendered.\r\n   */ getRenderSource() {\n        return this.getSource();\n    }\n    /**\r\n   * @return {import(\"../source/Source.js\").State} Source state.\r\n   * @override\r\n   */ getSourceState() {\n        const source = this.getSource();\n        return !source ? 'undefined' : source.getState();\n    }\n    /**\r\n   * @private\r\n   */ handleSourceChange_() {\n        this.changed();\n        if (this.sourceReady_ || this.getSource().getState() !== 'ready') return;\n        this.sourceReady_ = true;\n        this.dispatchEvent('sourceready');\n    }\n    /**\r\n   * @private\r\n   */ handleSourcePropertyChange_() {\n        if (this.sourceChangeKey_) {\n            (0, $d5bf8abd656a3cdc$export$b0a21c8b3c1c921)(this.sourceChangeKey_);\n            this.sourceChangeKey_ = null;\n        }\n        this.sourceReady_ = false;\n        const source = this.getSource();\n        if (source) {\n            this.sourceChangeKey_ = (0, $d5bf8abd656a3cdc$export$63174c828edd6ff8)(source, (0, $294047c5e65f31a3$export$2e2bcd8739ae039).CHANGE, this.handleSourceChange_, this);\n            if (source.getState() === 'ready') {\n                this.sourceReady_ = true;\n                setTimeout(()=>{\n                    this.dispatchEvent('sourceready');\n                }, 0);\n            }\n            this.clearRenderer();\n        }\n        this.changed();\n    }\n    /**\r\n   * @param {import(\"../pixel\").Pixel} pixel Pixel.\r\n   * @return {Promise<Array<import(\"../Feature\").FeatureLike>>} Promise that resolves with\r\n   * an array of features.\r\n   */ getFeatures(pixel) {\n        if (!this.renderer_) return Promise.resolve([]);\n        return this.renderer_.getFeatures(pixel);\n    }\n    /**\r\n   * @param {import(\"../pixel\").Pixel} pixel Pixel.\r\n   * @return {Uint8ClampedArray|Uint8Array|Float32Array|DataView|null} Pixel data.\r\n   */ getData(pixel) {\n        if (!this.renderer_ || !this.rendered) return null;\n        return this.renderer_.getData(pixel);\n    }\n    /**\r\n   * The layer is visible on the map view, i.e. within its min/max resolution or zoom and\r\n   * extent, not set to `visible: false`, and not inside a layer group that is set\r\n   * to `visible: false`.\r\n   * @param {View|import(\"../View.js\").ViewStateLayerStateExtent} [view] View or {@link import(\"../Map.js\").FrameState}.\r\n   * Only required when the layer is not added to a map.\r\n   * @return {boolean} The layer is visible in the map view.\r\n   * @api\r\n   */ isVisible(view) {\n        let frameState;\n        const map = this.getMapInternal();\n        if (!view && map) view = map.getView();\n        if (view instanceof (0, $70364d0195659942$export$2e2bcd8739ae039)) frameState = {\n            viewState: view.getState(),\n            extent: view.calculateExtent()\n        };\n        else frameState = view;\n        if (!frameState.layerStatesArray && map) frameState.layerStatesArray = map.getLayerGroup().getLayerStatesArray();\n        let layerState;\n        if (frameState.layerStatesArray) {\n            layerState = frameState.layerStatesArray.find((layerState)=>layerState.layer === this);\n            if (!layerState) return false;\n        } else layerState = this.getLayerState();\n        const layerExtent = this.getExtent();\n        return $534f30fce11effcd$export$acb1e9cb9ce4ca56(layerState, frameState.viewState) && (!layerExtent || (0, $6da4c8ed3074c92b$export$7b0a31e10bbff018)(layerExtent, frameState.extent));\n    }\n    /**\r\n   * Get the attributions of the source of this layer for the given view.\r\n   * @param {View|import(\"../View.js\").ViewStateLayerStateExtent} [view] View or {@link import(\"../Map.js\").FrameState}.\r\n   * Only required when the layer is not added to a map.\r\n   * @return {Array<string>} Attributions for this layer at the given view.\r\n   * @api\r\n   */ getAttributions(view) {\n        if (!this.isVisible(view)) return [];\n        const getAttributions = this.getSource()?.getAttributions();\n        if (!getAttributions) return [];\n        const frameState = view instanceof (0, $70364d0195659942$export$2e2bcd8739ae039) ? view.getViewStateAndExtent() : view;\n        let attributions = getAttributions(frameState);\n        if (!Array.isArray(attributions)) attributions = [\n            attributions\n        ];\n        return attributions;\n    }\n    /**\r\n   * In charge to manage the rendering of the layer. One layer type is\r\n   * bounded with one layer renderer.\r\n   * @param {?import(\"../Map.js\").FrameState} frameState Frame state.\r\n   * @param {HTMLElement} target Target which the renderer may (but need not) use\r\n   * for rendering its content.\r\n   * @return {HTMLElement|null} The rendered element.\r\n   */ render(frameState, target) {\n        const layerRenderer = this.getRenderer();\n        if (layerRenderer.prepareFrame(frameState)) {\n            this.rendered = true;\n            return layerRenderer.renderFrame(frameState, target);\n        }\n        return null;\n    }\n    /**\r\n   * Called when a layer is not visible during a map render.\r\n   */ unrender() {\n        this.rendered = false;\n    }\n    /** @return {string} Declutter */ getDeclutter() {\n        return undefined;\n    }\n    /**\r\n   * @param {import(\"../Map.js\").FrameState} frameState Frame state.\r\n   * @param {import(\"../layer/Layer.js\").State} layerState Layer state.\r\n   */ renderDeclutter(frameState, layerState) {}\n    /**\r\n   * When the renderer follows a layout -> render approach, do the final rendering here.\r\n   * @param {import('../Map.js').FrameState} frameState Frame state\r\n   */ renderDeferred(frameState) {\n        const layerRenderer = this.getRenderer();\n        if (!layerRenderer) return;\n        layerRenderer.renderDeferred(frameState);\n    }\n    /**\r\n   * For use inside the library only.\r\n   * @param {import(\"../Map.js\").default|null} map Map.\r\n   */ setMapInternal(map) {\n        if (!map) this.unrender();\n        this.set((0, $f6d1853b3fcae320$export$2e2bcd8739ae039).MAP, map);\n    }\n    /**\r\n   * For use inside the library only.\r\n   * @return {import(\"../Map.js\").default|null} Map.\r\n   */ getMapInternal() {\n        return this.get((0, $f6d1853b3fcae320$export$2e2bcd8739ae039).MAP);\n    }\n    /**\r\n   * Sets the layer to be rendered on top of other layers on a map. The map will\r\n   * not manage this layer in its layers collection. This\r\n   * is useful for temporary layers. To remove an unmanaged layer from the map,\r\n   * use `#setMap(null)`.\r\n   *\r\n   * To add the layer to a map and have it managed by the map, use\r\n   * {@link module:ol/Map~Map#addLayer} instead.\r\n   * @param {import(\"../Map.js\").default|null} map Map.\r\n   * @api\r\n   */ setMap(map) {\n        if (this.mapPrecomposeKey_) {\n            (0, $d5bf8abd656a3cdc$export$b0a21c8b3c1c921)(this.mapPrecomposeKey_);\n            this.mapPrecomposeKey_ = null;\n        }\n        if (!map) this.changed();\n        if (this.mapRenderKey_) {\n            (0, $d5bf8abd656a3cdc$export$b0a21c8b3c1c921)(this.mapRenderKey_);\n            this.mapRenderKey_ = null;\n        }\n        if (map) {\n            this.mapPrecomposeKey_ = (0, $d5bf8abd656a3cdc$export$63174c828edd6ff8)(map, (0, $f5e92a4d985a2824$export$2e2bcd8739ae039).PRECOMPOSE, this.handlePrecompose_, this);\n            this.mapRenderKey_ = (0, $d5bf8abd656a3cdc$export$63174c828edd6ff8)(this, (0, $294047c5e65f31a3$export$2e2bcd8739ae039).CHANGE, map.render, map);\n            this.changed();\n        }\n    }\n    /**\r\n   * @param {import(\"../events/Event.js\").default} renderEvent Render event\r\n   * @private\r\n   */ handlePrecompose_(renderEvent) {\n        const layerStatesArray = /** @type {import(\"../render/Event.js\").default} */ renderEvent.frameState.layerStatesArray;\n        const layerState = this.getLayerState(false);\n        (0, $35d5ec884318008e$export$a7a9523472993e97)(!layerStatesArray.some((arrayLayerState)=>arrayLayerState.layer === layerState.layer), 'A layer can only be added to the map once. Use either `layer.setMap()` or `map.addLayer()`, not both.');\n        layerStatesArray.push(layerState);\n    }\n    /**\r\n   * Set the layer source.\r\n   * @param {SourceType|null} source The layer source.\r\n   * @observable\r\n   * @api\r\n   */ setSource(source) {\n        this.set((0, $f6d1853b3fcae320$export$2e2bcd8739ae039).SOURCE, source);\n    }\n    /**\r\n   * Get the renderer for this layer.\r\n   * @return {RendererType|null} The layer renderer.\r\n   */ getRenderer() {\n        if (!this.renderer_) this.renderer_ = this.createRenderer();\n        return this.renderer_;\n    }\n    /**\r\n   * @return {boolean} The layer has a renderer.\r\n   */ hasRenderer() {\n        return !!this.renderer_;\n    }\n    /**\r\n   * Create a renderer for this layer.\r\n   * @return {RendererType} A layer renderer.\r\n   * @protected\r\n   */ createRenderer() {\n        return null;\n    }\n    /**\r\n   * This will clear the renderer so that a new one can be created next time it is needed\r\n   */ clearRenderer() {\n        if (this.renderer_) {\n            this.renderer_.dispose();\n            delete this.renderer_;\n        }\n    }\n    /**\r\n   * Clean up.\r\n   * @override\r\n   */ disposeInternal() {\n        this.clearRenderer();\n        this.setSource(null);\n        super.disposeInternal();\n    }\n}\nfunction $534f30fce11effcd$export$acb1e9cb9ce4ca56(layerState, viewState) {\n    if (!layerState.visible) return false;\n    const resolution = viewState.resolution;\n    if (resolution < layerState.minResolution || resolution >= layerState.maxResolution) return false;\n    const zoom = viewState.zoom;\n    return zoom > layerState.minZoom && zoom <= layerState.maxZoom;\n}\nvar $534f30fce11effcd$export$2e2bcd8739ae039 = $534f30fce11effcd$var$Layer;\n\n\n\n\n\n/**\r\n * @module ol/renderer/Composite\r\n */ \n\n\n\n/**\r\n * @module ol/layer/BaseVector\r\n */ var $176ca75ee9f69668$exports = {};\n!function(t, i) {\n    $176ca75ee9f69668$exports = i();\n}($176ca75ee9f69668$exports, function() {\n    \"use strict\";\n    function t(e, h, r = 0, s = e.length - 1, a = n) {\n        for(; s > r;){\n            if (s - r > 600) {\n                const i = s - r + 1, n = h - r + 1, o = Math.log(i), l = .5 * Math.exp(2 * o / 3), c = .5 * Math.sqrt(o * l * (i - l) / i) * (n - i / 2 < 0 ? -1 : 1);\n                t(e, h, Math.max(r, Math.floor(h - n * l / i + c)), Math.min(s, Math.floor(h + (i - n) * l / i + c)), a);\n            }\n            const n = e[h];\n            let o = r, l = s;\n            for(i(e, r, h), a(e[s], n) > 0 && i(e, r, s); o < l;){\n                for(i(e, o, l), o++, l--; a(e[o], n) < 0;)o++;\n                for(; a(e[l], n) > 0;)l--;\n            }\n            0 === a(e[r], n) ? i(e, r, l) : (l++, i(e, l, s)), l <= h && (r = l + 1), h <= l && (s = l - 1);\n        }\n    }\n    function i(t, i, n) {\n        const e = t[i];\n        t[i] = t[n], t[n] = e;\n    }\n    function n(t, i) {\n        return t < i ? -1 : t > i ? 1 : 0;\n    }\n    function e(t, i, n) {\n        if (!n) return i.indexOf(t);\n        for(let e = 0; e < i.length; e++)if (n(t, i[e])) return e;\n        return -1;\n    }\n    function h(t, i) {\n        r(t, 0, t.children.length, i, t);\n    }\n    function r(t, i, n, e, h) {\n        h || (h = d(null)), h.minX = 1 / 0, h.minY = 1 / 0, h.maxX = -1 / 0, h.maxY = -1 / 0;\n        for(let r = i; r < n; r++){\n            const i = t.children[r];\n            s(h, t.leaf ? e(i) : i);\n        }\n        return h;\n    }\n    function s(t, i) {\n        return t.minX = Math.min(t.minX, i.minX), t.minY = Math.min(t.minY, i.minY), t.maxX = Math.max(t.maxX, i.maxX), t.maxY = Math.max(t.maxY, i.maxY), t;\n    }\n    function a(t, i) {\n        return t.minX - i.minX;\n    }\n    function o(t, i) {\n        return t.minY - i.minY;\n    }\n    function l(t) {\n        return (t.maxX - t.minX) * (t.maxY - t.minY);\n    }\n    function c(t) {\n        return t.maxX - t.minX + (t.maxY - t.minY);\n    }\n    function m(t, i) {\n        const n = Math.max(t.minX, i.minX), e = Math.max(t.minY, i.minY), h = Math.min(t.maxX, i.maxX), r = Math.min(t.maxY, i.maxY);\n        return Math.max(0, h - n) * Math.max(0, r - e);\n    }\n    function f(t, i) {\n        return t.minX <= i.minX && t.minY <= i.minY && i.maxX <= t.maxX && i.maxY <= t.maxY;\n    }\n    function u(t, i) {\n        return i.minX <= t.maxX && i.minY <= t.maxY && i.maxX >= t.minX && i.maxY >= t.minY;\n    }\n    function d(t) {\n        return {\n            children: t,\n            height: 1,\n            leaf: !0,\n            minX: 1 / 0,\n            minY: 1 / 0,\n            maxX: -1 / 0,\n            maxY: -1 / 0\n        };\n    }\n    function x(i, n, e, h, r) {\n        const s = [\n            n,\n            e\n        ];\n        for(; s.length;){\n            if ((e = s.pop()) - (n = s.pop()) <= h) continue;\n            const a = n + Math.ceil((e - n) / h / 2) * h;\n            t(i, a, n, e, r), s.push(n, a, a, e);\n        }\n    }\n    return class {\n        constructor(t = 9){\n            this._maxEntries = Math.max(4, t), this._minEntries = Math.max(2, Math.ceil(.4 * this._maxEntries)), this.clear();\n        }\n        all() {\n            return this._all(this.data, []);\n        }\n        search(t) {\n            let i = this.data;\n            const n = [];\n            if (!u(t, i)) return n;\n            const e = this.toBBox, h = [];\n            for(; i;){\n                for(let r = 0; r < i.children.length; r++){\n                    const s = i.children[r], a = i.leaf ? e(s) : s;\n                    u(t, a) && (i.leaf ? n.push(s) : f(t, a) ? this._all(s, n) : h.push(s));\n                }\n                i = h.pop();\n            }\n            return n;\n        }\n        collides(t) {\n            let i = this.data;\n            if (!u(t, i)) return !1;\n            const n = [];\n            for(; i;){\n                for(let e = 0; e < i.children.length; e++){\n                    const h = i.children[e], r = i.leaf ? this.toBBox(h) : h;\n                    if (u(t, r)) {\n                        if (i.leaf || f(t, r)) return !0;\n                        n.push(h);\n                    }\n                }\n                i = n.pop();\n            }\n            return !1;\n        }\n        load(t) {\n            if (!t || !t.length) return this;\n            if (t.length < this._minEntries) {\n                for(let i = 0; i < t.length; i++)this.insert(t[i]);\n                return this;\n            }\n            let i = this._build(t.slice(), 0, t.length - 1, 0);\n            if (this.data.children.length) {\n                if (this.data.height === i.height) this._splitRoot(this.data, i);\n                else {\n                    if (this.data.height < i.height) {\n                        const t = this.data;\n                        this.data = i, i = t;\n                    }\n                    this._insert(i, this.data.height - i.height - 1, !0);\n                }\n            } else this.data = i;\n            return this;\n        }\n        insert(t) {\n            return t && this._insert(t, this.data.height - 1), this;\n        }\n        clear() {\n            return this.data = d([]), this;\n        }\n        remove(t, i) {\n            if (!t) return this;\n            let n = this.data;\n            const h = this.toBBox(t), r = [], s = [];\n            let a, o, l;\n            for(; n || r.length;){\n                if (n || (n = r.pop(), o = r[r.length - 1], a = s.pop(), l = !0), n.leaf) {\n                    const h = e(t, n.children, i);\n                    if (-1 !== h) return n.children.splice(h, 1), r.push(n), this._condense(r), this;\n                }\n                l || n.leaf || !f(n, h) ? o ? (a++, n = o.children[a], l = !1) : n = null : (r.push(n), s.push(a), a = 0, o = n, n = n.children[0]);\n            }\n            return this;\n        }\n        toBBox(t) {\n            return t;\n        }\n        compareMinX(t, i) {\n            return t.minX - i.minX;\n        }\n        compareMinY(t, i) {\n            return t.minY - i.minY;\n        }\n        toJSON() {\n            return this.data;\n        }\n        fromJSON(t) {\n            return this.data = t, this;\n        }\n        _all(t, i) {\n            const n = [];\n            for(; t;)t.leaf ? i.push(...t.children) : n.push(...t.children), t = n.pop();\n            return i;\n        }\n        _build(t, i, n, e) {\n            const r = n - i + 1;\n            let s, a = this._maxEntries;\n            if (r <= a) return s = d(t.slice(i, n + 1)), h(s, this.toBBox), s;\n            e || (e = Math.ceil(Math.log(r) / Math.log(a)), a = Math.ceil(r / Math.pow(a, e - 1))), s = d([]), s.leaf = !1, s.height = e;\n            const o = Math.ceil(r / a), l = o * Math.ceil(Math.sqrt(a));\n            x(t, i, n, l, this.compareMinX);\n            for(let h = i; h <= n; h += l){\n                const i = Math.min(h + l - 1, n);\n                x(t, h, i, o, this.compareMinY);\n                for(let n = h; n <= i; n += o){\n                    const h = Math.min(n + o - 1, i);\n                    s.children.push(this._build(t, n, h, e - 1));\n                }\n            }\n            return h(s, this.toBBox), s;\n        }\n        _chooseSubtree(t, i, n, e) {\n            for(; e.push(i), !i.leaf && e.length - 1 !== n;){\n                let n, e = 1 / 0, s = 1 / 0;\n                for(let a = 0; a < i.children.length; a++){\n                    const o = i.children[a], c = l(o), m = (h = t, r = o, (Math.max(r.maxX, h.maxX) - Math.min(r.minX, h.minX)) * (Math.max(r.maxY, h.maxY) - Math.min(r.minY, h.minY)) - c);\n                    m < s ? (s = m, e = c < e ? c : e, n = o) : m === s && c < e && (e = c, n = o);\n                }\n                i = n || i.children[0];\n            }\n            var h, r;\n            return i;\n        }\n        _insert(t, i, n) {\n            const e = n ? t : this.toBBox(t), h = [], r = this._chooseSubtree(e, this.data, i, h);\n            for(r.children.push(t), s(r, e); i >= 0 && h[i].children.length > this._maxEntries;)this._split(h, i), i--;\n            this._adjustParentBBoxes(e, h, i);\n        }\n        _split(t, i) {\n            const n = t[i], e = n.children.length, r = this._minEntries;\n            this._chooseSplitAxis(n, r, e);\n            const s = this._chooseSplitIndex(n, r, e), a = d(n.children.splice(s, n.children.length - s));\n            a.height = n.height, a.leaf = n.leaf, h(n, this.toBBox), h(a, this.toBBox), i ? t[i - 1].children.push(a) : this._splitRoot(n, a);\n        }\n        _splitRoot(t, i) {\n            this.data = d([\n                t,\n                i\n            ]), this.data.height = t.height + 1, this.data.leaf = !1, h(this.data, this.toBBox);\n        }\n        _chooseSplitIndex(t, i, n) {\n            let e, h = 1 / 0, s = 1 / 0;\n            for(let a = i; a <= n - i; a++){\n                const i = r(t, 0, a, this.toBBox), o = r(t, a, n, this.toBBox), c = m(i, o), f = l(i) + l(o);\n                c < h ? (h = c, e = a, s = f < s ? f : s) : c === h && f < s && (s = f, e = a);\n            }\n            return e || n - i;\n        }\n        _chooseSplitAxis(t, i, n) {\n            const e = t.leaf ? this.compareMinX : a, h = t.leaf ? this.compareMinY : o;\n            this._allDistMargin(t, i, n, e) < this._allDistMargin(t, i, n, h) && t.children.sort(e);\n        }\n        _allDistMargin(t, i, n, e) {\n            t.children.sort(e);\n            const h = this.toBBox, a = r(t, 0, i, h), o = r(t, n - i, n, h);\n            let l = c(a) + c(o);\n            for(let e = i; e < n - i; e++){\n                const i = t.children[e];\n                s(a, t.leaf ? h(i) : i), l += c(a);\n            }\n            for(let e = n - i - 1; e >= i; e--){\n                const i = t.children[e];\n                s(o, t.leaf ? h(i) : i), l += c(o);\n            }\n            return l;\n        }\n        _adjustParentBBoxes(t, i, n) {\n            for(let e = n; e >= 0; e--)s(i[e], t);\n        }\n        _condense(t) {\n            for(let i, n = t.length - 1; n >= 0; n--)0 === t[n].children.length ? n > 0 ? (i = t[n - 1].children, i.splice(i.indexOf(t[n]), 1)) : this.clear() : h(t[n], this.toBBox);\n        }\n    };\n});\n\n\n/**\r\n * @module ol/render/canvas/style\r\n */ /**\r\n * @module ol/color\r\n */ \n\nconst $322346e1ff7894ca$export$6c844c64a5efe1ee = [\n    NaN,\n    NaN,\n    NaN,\n    0\n];\nlet $322346e1ff7894ca$var$colorParseContext;\n/**\r\n * @return {CanvasRenderingContext2D} The color parse context\r\n */ function $322346e1ff7894ca$var$getColorParseContext() {\n    if (!$322346e1ff7894ca$var$colorParseContext) $322346e1ff7894ca$var$colorParseContext = (0, $075f937d7366f1a2$export$9e05d10eae75c464)(1, 1, undefined, {\n        willReadFrequently: true,\n        desynchronized: true\n    });\n    return $322346e1ff7894ca$var$colorParseContext;\n}\nconst $322346e1ff7894ca$var$rgbModernRegEx = /^rgba?\\(\\s*(\\d+%?)\\s+(\\d+%?)\\s+(\\d+%?)(?:\\s*\\/\\s*(\\d+%|\\d*\\.\\d+|[01]))?\\s*\\)$/i;\nconst $322346e1ff7894ca$var$rgbLegacyAbsoluteRegEx = /^rgba?\\(\\s*(\\d+)\\s*,\\s*(\\d+)\\s*,\\s*(\\d+)(?:\\s*,\\s*(\\d+%|\\d*\\.\\d+|[01]))?\\s*\\)$/i;\nconst $322346e1ff7894ca$var$rgbLegacyPercentageRegEx = /^rgba?\\(\\s*(\\d+%)\\s*,\\s*(\\d+%)\\s*,\\s*(\\d+%)(?:\\s*,\\s*(\\d+%|\\d*\\.\\d+|[01]))?\\s*\\)$/i;\nconst $322346e1ff7894ca$var$hexRegEx = /^#([\\da-f]{3,4}|[\\da-f]{6}|[\\da-f]{8})$/i;\n/**\r\n * @param {string} s Color component as number or percentage.\r\n * @param {number} divider Divider for percentage.\r\n * @return {number} Color component.\r\n */ function $322346e1ff7894ca$var$toColorComponent(s, divider) {\n    return s.endsWith('%') ? Number(s.substring(0, s.length - 1)) / divider : Number(s);\n}\n/**\r\n * @param {string} color Color string.\r\n */ function $322346e1ff7894ca$var$throwInvalidColor(color) {\n    throw new Error('failed to parse \"' + color + '\" as color');\n}\n/**\r\n * @param {string} color Color string.\r\n * @return {Color} RGBa color array.\r\n */ function $322346e1ff7894ca$var$parseRgba(color) {\n    // Fast lane for rgb(a) colors\n    if (color.toLowerCase().startsWith('rgb')) {\n        const rgb = color.match($322346e1ff7894ca$var$rgbLegacyAbsoluteRegEx) || color.match($322346e1ff7894ca$var$rgbModernRegEx) || color.match($322346e1ff7894ca$var$rgbLegacyPercentageRegEx);\n        if (rgb) {\n            const alpha = rgb[4];\n            const rgbDivider = 100 / 255;\n            return [\n                (0, $6b000a049d919fe5$export$7d15b64cf5a3a4c4)($322346e1ff7894ca$var$toColorComponent(rgb[1], rgbDivider) + 0.5 | 0, 0, 255),\n                (0, $6b000a049d919fe5$export$7d15b64cf5a3a4c4)($322346e1ff7894ca$var$toColorComponent(rgb[2], rgbDivider) + 0.5 | 0, 0, 255),\n                (0, $6b000a049d919fe5$export$7d15b64cf5a3a4c4)($322346e1ff7894ca$var$toColorComponent(rgb[3], rgbDivider) + 0.5 | 0, 0, 255),\n                alpha !== undefined ? (0, $6b000a049d919fe5$export$7d15b64cf5a3a4c4)($322346e1ff7894ca$var$toColorComponent(alpha, 100), 0, 1) : 1\n            ];\n        }\n        $322346e1ff7894ca$var$throwInvalidColor(color);\n    }\n    // Fast lane for hex colors (also with alpha)\n    if (color.startsWith('#')) {\n        if ($322346e1ff7894ca$var$hexRegEx.test(color)) {\n            const hex = color.substring(1);\n            const step = hex.length <= 4 ? 1 : 2;\n            const colorFromHex = [\n                0,\n                0,\n                0,\n                255\n            ];\n            for(let i = 0, ii = hex.length; i < ii; i += step){\n                let colorComponent = parseInt(hex.substring(i, i + step), 16);\n                if (step === 1) colorComponent += colorComponent << 4;\n                colorFromHex[i / step] = colorComponent;\n            }\n            colorFromHex[3] = colorFromHex[3] / 255;\n            return colorFromHex;\n        }\n        $322346e1ff7894ca$var$throwInvalidColor(color);\n    }\n    // Use canvas color serialization to parse the color into hex or rgba\n    // See https://www.w3.org/TR/2021/SPSD-2dcontext-20210128/#serialization-of-a-color\n    const context = $322346e1ff7894ca$var$getColorParseContext();\n    context.fillStyle = '#abcdef';\n    let invalidCheckFillStyle = context.fillStyle;\n    context.fillStyle = color;\n    if (context.fillStyle === invalidCheckFillStyle) {\n        context.fillStyle = '#fedcba';\n        invalidCheckFillStyle = context.fillStyle;\n        context.fillStyle = color;\n        if (context.fillStyle === invalidCheckFillStyle) $322346e1ff7894ca$var$throwInvalidColor(color);\n    }\n    const colorString = context.fillStyle;\n    if (colorString.startsWith('#') || colorString.startsWith('rgba')) return $322346e1ff7894ca$var$parseRgba(colorString);\n    context.clearRect(0, 0, 1, 1);\n    context.fillRect(0, 0, 1, 1);\n    const colorFromImage = Array.from(context.getImageData(0, 0, 1, 1).data);\n    colorFromImage[3] = (0, $6b000a049d919fe5$export$a81f732198733497)(colorFromImage[3] / 255, 3);\n    return colorFromImage;\n}\nfunction $322346e1ff7894ca$export$590567be997858b6(color) {\n    if (typeof color === 'string') return color;\n    return $322346e1ff7894ca$export$f84e8e69fd4488a5(color);\n}\n/**\r\n * @type {number}\r\n */ const $322346e1ff7894ca$var$MAX_CACHE_SIZE = 1024;\n/**\r\n * We maintain a small cache of parsed strings.  Whenever the cache grows too large,\r\n * we delete an arbitrary set of the entries.\r\n *\r\n * @type {Object<string, Color>}\r\n */ const $322346e1ff7894ca$var$cache = {};\n/**\r\n * @type {number}\r\n */ let $322346e1ff7894ca$var$cacheSize = 0;\nfunction $322346e1ff7894ca$export$138c09bdd6bd797c(color) {\n    if (color.length === 4) return color;\n    const output = color.slice();\n    output[3] = 1;\n    return output;\n}\n// The functions b1, b2, a1, a2, rgbaToLcha and lchaToRgba below are adapted from\n// https://stackoverflow.com/a/67219995/2389327\n/**\r\n * @param {number} v Input value.\r\n * @return {number} Output value.\r\n */ function $322346e1ff7894ca$var$b1(v) {\n    return v > 0.0031308 ? Math.pow(v, 1 / 2.4) * 269.025 - 14.025 : v * 3294.6;\n}\n/**\r\n * @param {number} v Input value.\r\n * @return {number} Output value.\r\n */ function $322346e1ff7894ca$var$b2(v) {\n    return v > 0.2068965 ? Math.pow(v, 3) : (v - 4 / 29) * (108 / 841);\n}\n/**\r\n * @param {number} v Input value.\r\n * @return {number} Output value.\r\n */ function $322346e1ff7894ca$var$a1(v) {\n    return v > 10.314724 ? Math.pow((v + 14.025) / 269.025, 2.4) : v / 3294.6;\n}\n/**\r\n * @param {number} v Input value.\r\n * @return {number} Output value.\r\n */ function $322346e1ff7894ca$var$a2(v) {\n    return v > 0.0088564 ? Math.pow(v, 1 / 3) : v / (108 / 841) + 4 / 29;\n}\nfunction $322346e1ff7894ca$export$44fb54fa2e0c0d4(color) {\n    const r = $322346e1ff7894ca$var$a1(color[0]);\n    const g = $322346e1ff7894ca$var$a1(color[1]);\n    const b = $322346e1ff7894ca$var$a1(color[2]);\n    const y = $322346e1ff7894ca$var$a2(r * 0.222488403 + g * 0.716873169 + b * 0.06060791);\n    const l = 500 * ($322346e1ff7894ca$var$a2(r * 0.452247074 + g * 0.399439023 + b * 0.148375274) - y);\n    const q = 200 * (y - $322346e1ff7894ca$var$a2(r * 0.016863605 + g * 0.117638439 + b * 0.865350722));\n    const h = Math.atan2(q, l) * (180 / Math.PI);\n    return [\n        116 * y - 16,\n        Math.sqrt(l * l + q * q),\n        h < 0 ? h + 360 : h,\n        color[3]\n    ];\n}\nfunction $322346e1ff7894ca$export$27cc94530c050f00(color) {\n    const l = (color[0] + 16) / 116;\n    const c = color[1];\n    const h = color[2] * Math.PI / 180;\n    const y = $322346e1ff7894ca$var$b2(l);\n    const x = $322346e1ff7894ca$var$b2(l + c / 500 * Math.cos(h));\n    const z = $322346e1ff7894ca$var$b2(l - c / 200 * Math.sin(h));\n    const r = $322346e1ff7894ca$var$b1(x * 3.021973625 - y * 1.617392459 - z * 0.404875592);\n    const g = $322346e1ff7894ca$var$b1(x * -0.943766287 + y * 1.916279586 + z * 0.027607165);\n    const b = $322346e1ff7894ca$var$b1(x * 0.069407491 - y * 0.22898585 + z * 1.159737864);\n    return [\n        (0, $6b000a049d919fe5$export$7d15b64cf5a3a4c4)(r + 0.5 | 0, 0, 255),\n        (0, $6b000a049d919fe5$export$7d15b64cf5a3a4c4)(g + 0.5 | 0, 0, 255),\n        (0, $6b000a049d919fe5$export$7d15b64cf5a3a4c4)(b + 0.5 | 0, 0, 255),\n        color[3]\n    ];\n}\nfunction $322346e1ff7894ca$export$3004f64547af360e(s) {\n    if (s === 'none') return $322346e1ff7894ca$export$6c844c64a5efe1ee;\n    if ($322346e1ff7894ca$var$cache.hasOwnProperty(s)) return $322346e1ff7894ca$var$cache[s];\n    if ($322346e1ff7894ca$var$cacheSize >= $322346e1ff7894ca$var$MAX_CACHE_SIZE) {\n        let i = 0;\n        for(const key in $322346e1ff7894ca$var$cache)if ((i++ & 3) === 0) {\n            delete $322346e1ff7894ca$var$cache[key];\n            --$322346e1ff7894ca$var$cacheSize;\n        }\n    }\n    const color = $322346e1ff7894ca$var$parseRgba(s);\n    if (color.length !== 4) $322346e1ff7894ca$var$throwInvalidColor(s);\n    for (const c of color)if (isNaN(c)) $322346e1ff7894ca$var$throwInvalidColor(s);\n    $322346e1ff7894ca$var$cache[s] = color;\n    ++$322346e1ff7894ca$var$cacheSize;\n    return color;\n}\nfunction $322346e1ff7894ca$export$75093a47a9fa838d(color) {\n    if (Array.isArray(color)) return color;\n    return $322346e1ff7894ca$export$3004f64547af360e(color);\n}\nfunction $322346e1ff7894ca$export$f84e8e69fd4488a5(color) {\n    let r = color[0];\n    if (r != (r | 0)) r = r + 0.5 | 0;\n    let g = color[1];\n    if (g != (g | 0)) g = g + 0.5 | 0;\n    let b = color[2];\n    if (b != (b | 0)) b = b + 0.5 | 0;\n    const a = color[3] === undefined ? 1 : Math.round(color[3] * 1000) / 1000;\n    return 'rgba(' + r + ',' + g + ',' + b + ',' + a + ')';\n}\nfunction $322346e1ff7894ca$export$40dd713d7775a0b1(s) {\n    try {\n        $322346e1ff7894ca$export$3004f64547af360e(s);\n        return true;\n    } catch  {\n        return false;\n    }\n}\n\n\n/**\r\n * @module ol/expr/cpu\r\n */ \n/**\r\n * @module ol/expr/expression\r\n */ \n\n/**\r\n * @module ol/size\r\n */ /**\r\n * An array of numbers representing a size: `[width, height]`.\r\n * @typedef {Array<number>} Size\r\n * @api\r\n */ /**\r\n * Returns a buffered size.\r\n * @param {Size} size Size.\r\n * @param {number} num The amount by which to buffer.\r\n * @param {Size} [dest] Optional reusable size array.\r\n * @return {Size} The buffered size.\r\n */ function $cc435a5409103773$export$ab1029bcae9ddb4a(size, num, dest) {\n    if (dest === undefined) dest = [\n        0,\n        0\n    ];\n    dest[0] = size[0] + 2 * num;\n    dest[1] = size[1] + 2 * num;\n    return dest;\n}\nfunction $cc435a5409103773$export$622c471beb1693c7(size) {\n    return size[0] > 0 && size[1] > 0;\n}\nfunction $cc435a5409103773$export$dcdf75081b88279d(size, ratio, dest) {\n    if (dest === undefined) dest = [\n        0,\n        0\n    ];\n    dest[0] = size[0] * ratio + 0.5 | 0;\n    dest[1] = size[1] * ratio + 0.5 | 0;\n    return dest;\n}\nfunction $cc435a5409103773$export$a71a825ff42fb8e1(size, dest) {\n    if (Array.isArray(size)) return size;\n    if (dest === undefined) dest = [\n        size,\n        size\n    ];\n    else {\n        dest[0] = size;\n        dest[1] = size;\n    }\n    return dest;\n}\n\n\n/**\r\n * @fileoverview This module includes types and functions for parsing array encoded expressions.\r\n * The result of parsing an encoded expression is one of the specific expression classes.\r\n * During parsing, information is added to the parsing context about the data accessed by the\r\n * expression.\r\n */ /**\r\n * Base type used for literal style parameters; can be a number literal or the output of an operator,\r\n * which in turns takes {@link import(\"./expression.js\").ExpressionValue} arguments.\r\n *\r\n * See below for details on the available operators (with notes for those that are WebGL or Canvas only).\r\n *\r\n * Reading operators:\r\n *   `['band', bandIndex, xOffset, yOffset]` For tile layers only. Fetches pixel values from band\r\n *     `bandIndex` of the source's data. The first `bandIndex` of the source data is `1`. Fetched values\r\n *     are in the 0..1 range. {@link import(\"../source/TileImage.js\").default} sources have 4 bands: red,\r\n *     green, blue and alpha. {@link import(\"../source/DataTile.js\").default} sources can have any number\r\n *     of bands, depending on the underlying data source and\r\n *     {@link import(\"../source/GeoTIFF.js\").Options configuration}. `xOffset` and `yOffset` are optional\r\n *     and allow specifying pixel offsets for x and y. This is used for sampling data from neighboring pixels (WebGL only).\r\n *   `['get', attributeName]` fetches a feature property value, similar to `feature.get('attributeName')`.\r\n *   `['get', attributeName, keyOrArrayIndex, ...]` (Canvas only) Access nested properties and array items of a\r\n *     feature property. The result is `undefined` when there is nothing at the specified key or index.\r\n *   `['geometry-type']` returns a feature's geometry type as string, either: 'LineString', 'Point' or 'Polygon'\r\n *     `Multi*` values are returned as their singular equivalent\r\n *     `Circle` geometries are returned as 'Polygon'\r\n *     `GeometryCollection` geometries are returned as the type of the first geometry found in the collection (WebGL only).\r\n *   `['resolution']` returns the current resolution\r\n *   `['time']` The time in seconds since the creation of the layer (WebGL only).\r\n *   `['var', 'varName']` fetches a value from the style variables; will throw an error if that variable is undefined\r\n *   `['zoom']` The current zoom level (WebGL only).\r\n *   `['line-metric']` returns the M component of the current point on a line (WebGL only); in case where the geometry layout of the line\r\n *      does not contain an M component (e.g. XY or XYZ), 0 is returned; 0 is also returned for geometries other than lines.\r\n *      Please note that the M component will be linearly interpolated between the two points composing a segment.\r\n *\r\n * Math operators:\r\n *   `['*', value1, value2, ...]` multiplies the values (either numbers or colors)\r\n *   `['/', value1, value2]` divides `value1` by `value2`\r\n *   `['+', value1, value2, ...]` adds the values\r\n *   `['-', value1, value2]` subtracts `value2` from `value1`\r\n *   `['clamp', value, low, high]` clamps `value` between `low` and `high`\r\n *   `['%', value1, value2]` returns the result of `value1 % value2` (modulo)\r\n *   `['^', value1, value2]` returns the value of `value1` raised to the `value2` power\r\n *   `['abs', value1]` returns the absolute value of `value1`\r\n *   `['floor', value1]` returns the nearest integer less than or equal to `value1`\r\n *   * `['round', value1]` returns the nearest integer to `value1`\r\n *   * `['ceil', value1]` returns the nearest integer greater than or equal to `value1`\r\n *   * `['sin', value1]` returns the sine of `value1`\r\n *   * `['cos', value1]` returns the cosine of `value1`\r\n *   * `['atan', value1, value2]` returns `atan2(value1, value2)`. If `value2` is not provided, returns `atan(value1)`\r\n *   * `['sqrt', value1]` returns the square root of `value1`\r\n *\r\n * * Transform operators:\r\n *   * `['case', condition1, output1, ...conditionN, outputN, fallback]` selects the first output whose corresponding\r\n *     condition evaluates to `true`. If no match is found, returns the `fallback` value.\r\n *     All conditions should be `boolean`, output and fallback can be any kind.\r\n *   * `['match', input, match1, output1, ...matchN, outputN, fallback]` compares the `input` value against all\r\n *     provided `matchX` values, returning the output associated with the first valid match. If no match is found,\r\n *     returns the `fallback` value.\r\n *     `input` and `matchX` values must all be of the same type, and can be `number` or `string`. `outputX` and\r\n *     `fallback` values must be of the same type, and can be of any kind.\r\n *   * `['interpolate', interpolation, input, stop1, output1, ...stopN, outputN]` returns a value by interpolating between\r\n *     pairs of inputs and outputs; `interpolation` can either be `['linear']` or `['exponential', base]` where `base` is\r\n *     the rate of increase from stop A to stop B (i.e. power to which the interpolation ratio is raised); a value\r\n *     of 1 is equivalent to `['linear']`.\r\n *     `input` and `stopX` values must all be of type `number`. `outputX` values can be `number` or `color` values.\r\n *     Note: `input` will be clamped between `stop1` and `stopN`, meaning that all output values will be comprised\r\n *     between `output1` and `outputN`.\r\n *   * `['string', value1, value2, ...]` returns the first value in the list that evaluates to a string.\r\n *     An example would be to provide a default value for get: `['string', ['get', 'propertyname'], 'default value']]`\r\n *     (Canvas only).\r\n *   * `['number', value1, value2, ...]` returns the first value in the list that evaluates to a number.\r\n *     An example would be to provide a default value for get: `['string', ['get', 'propertyname'], 42]]`\r\n *     (Canvas only).\r\n *   * `['coalesce', value1, value2, ...]` returns the first value in the list which is not null or undefined.\r\n *     An example would be to provide a default value for get: `['coalesce', ['get','propertyname'], 'default value']]`\r\n *     (Canvas only).\r\n *\r\n * * Logical operators:\r\n *   * `['<', value1, value2]` returns `true` if `value1` is strictly lower than `value2`, or `false` otherwise.\r\n *   * `['<=', value1, value2]` returns `true` if `value1` is lower than or equals `value2`, or `false` otherwise.\r\n *   * `['>', value1, value2]` returns `true` if `value1` is strictly greater than `value2`, or `false` otherwise.\r\n *   * `['>=', value1, value2]` returns `true` if `value1` is greater than or equals `value2`, or `false` otherwise.\r\n *   * `['==', value1, value2]` returns `true` if `value1` equals `value2`, or `false` otherwise.\r\n *   * `['!=', value1, value2]` returns `true` if `value1` does not equal `value2`, or `false` otherwise.\r\n *   * `['!', value1]` returns `false` if `value1` is `true` or greater than `0`, or `true` otherwise.\r\n *   * `['all', value1, value2, ...]` returns `true` if all the inputs are `true`, `false` otherwise.\r\n *   * `['any', value1, value2, ...]` returns `true` if any of the inputs are `true`, `false` otherwise.\r\n *   * `['has', attributeName, keyOrArrayIndex, ...]` returns `true` if feature properties include the (nested) key `attributeName`,\r\n *     `false` otherwise.\r\n *     Note that for WebGL layers, the hardcoded value `-9999999` is used to distinguish when a property is not defined.\r\n *   * `['between', value1, value2, value3]` returns `true` if `value1` is contained between `value2` and `value3`\r\n *     (inclusively), or `false` otherwise.\r\n *   * `['in', needle, haystack]` returns `true` if `needle` is found in `haystack`, and\r\n *     `false` otherwise.\r\n *     This operator has the following limitations:\r\n *     * `haystack` has to be an array of numbers or strings (searching for a substring in a string is not supported yet)\r\n *     * Only literal arrays are supported as `haystack` for now; this means that `haystack` cannot be the result of an\r\n *     expression. If `haystack` is an array of strings, use the `literal` operator to disambiguate from an expression:\r\n *     `['literal', ['abc', 'def', 'ghi']]`\r\n *\r\n * * Conversion operators:\r\n *   * `['array', value1, ...valueN]` creates a numerical array from `number` values; please note that the amount of\r\n *     values can currently only be 2, 3 or 4 (WebGL only).\r\n *   * `['color', red, green, blue, alpha]` or `['color', shade, alpha]` creates a `color` value from `number` values;\r\n *     the `alpha` parameter is optional; if not specified, it will be set to 1 (WebGL only).\r\n *     Note: `red`, `green` and `blue` or `shade` components must be values between 0 and 255; `alpha` between 0 and 1.\r\n *   * `['palette', index, colors]` picks a `color` value from an array of colors using the given index; the `index`\r\n *     expression must evaluate to a number; the items in the `colors` array must be strings with hex colors\r\n *     (e.g. `'#86A136'`), colors using the rgba[a] functional notation (e.g. `'rgb(134, 161, 54)'` or `'rgba(134, 161, 54, 1)'`),\r\n *     named colors (e.g. `'red'`), or array literals with 3 ([r, g, b]) or 4 ([r, g, b, a]) values (with r, g, and b\r\n *     in the 0-255 range and a in the 0-1 range) (WebGL only).\r\n *   * `['to-string', value]` converts the input value to a string. If the input is a boolean, the result is \"true\" or \"false\".\r\n *     If the input is a number, it is converted to a string as specified by the \"NumberToString\" algorithm of the ECMAScript\r\n *     Language Specification. If the input is a color, it is converted to a string of the form \"rgba(r,g,b,a)\". (Canvas only)\r\n *\r\n * Values can either be literals or another operator, as they will be evaluated recursively.\r\n * Literal values can be of the following types:\r\n * * `boolean`\r\n * * `number`\r\n * * `number[]` (number arrays can only have a length of 2, 3 or 4)\r\n * * `string`\r\n * * {@link module:ol/color~Color}\r\n *\r\n * @typedef {Array<*>|import(\"../color.js\").Color|string|number|boolean} ExpressionValue\r\n * @api\r\n */ let $778943ec39690f8e$var$numTypes = 0;\nconst $778943ec39690f8e$export$267d7ad6fa96ffaf = 0;\nconst $778943ec39690f8e$export$240f7fffab1b25a0 = 1 << $778943ec39690f8e$var$numTypes++;\nconst $778943ec39690f8e$export$86a7aca748b1e260 = 1 << $778943ec39690f8e$var$numTypes++;\nconst $778943ec39690f8e$export$2b93044cbf134323 = 1 << $778943ec39690f8e$var$numTypes++;\nconst $778943ec39690f8e$export$2cd82751acc0e609 = 1 << $778943ec39690f8e$var$numTypes++;\nconst $778943ec39690f8e$export$d701d0e49f4bcb39 = 1 << $778943ec39690f8e$var$numTypes++;\nconst $778943ec39690f8e$export$52725c8a6d4c61d1 = 1 << $778943ec39690f8e$var$numTypes++;\nconst $778943ec39690f8e$export$ec4c9a150bae86cd = Math.pow(2, $778943ec39690f8e$var$numTypes) - 1;\nconst $778943ec39690f8e$var$typeNames = {\n    [$778943ec39690f8e$export$240f7fffab1b25a0]: 'boolean',\n    [$778943ec39690f8e$export$86a7aca748b1e260]: 'number',\n    [$778943ec39690f8e$export$2b93044cbf134323]: 'string',\n    [$778943ec39690f8e$export$2cd82751acc0e609]: 'color',\n    [$778943ec39690f8e$export$d701d0e49f4bcb39]: 'number[]',\n    [$778943ec39690f8e$export$52725c8a6d4c61d1]: 'size'\n};\nconst $778943ec39690f8e$var$namedTypes = Object.keys($778943ec39690f8e$var$typeNames).map(Number).sort((0, $b998d41b678ed5d1$export$fcb633242ef15540));\n/**\r\n * @param {number} type The type.\r\n * @return {boolean} The type is one of the specific types (not any or a union type).\r\n */ function $778943ec39690f8e$var$isSpecific(type) {\n    return type in $778943ec39690f8e$var$typeNames;\n}\nfunction $778943ec39690f8e$export$b2afc7c96b2b4a45(type) {\n    const names = [];\n    for (const namedType of $778943ec39690f8e$var$namedTypes)if ($778943ec39690f8e$export$9fdcb8b441c4f2b4(type, namedType)) names.push($778943ec39690f8e$var$typeNames[namedType]);\n    if (names.length === 0) return 'untyped';\n    if (names.length < 3) return names.join(' or ');\n    return names.slice(0, -1).join(', ') + ', or ' + names[names.length - 1];\n}\nfunction $778943ec39690f8e$export$9fdcb8b441c4f2b4(broad, specific) {\n    return (broad & specific) === specific;\n}\nfunction $778943ec39690f8e$export$3252d368d784c970(oneType, otherType) {\n    return !!(oneType & otherType);\n}\nfunction $778943ec39690f8e$export$26b9f946b448f23e(type, expected) {\n    return type === expected;\n}\nclass $778943ec39690f8e$export$eb63e96e0913dda4 {\n    /**\r\n   * @param {number} type The value type.\r\n   * @param {LiteralValue} value The literal value.\r\n   */ constructor(type, value){\n        if (!$778943ec39690f8e$var$isSpecific(type)) throw new Error(`literal expressions must have a specific type, got ${$778943ec39690f8e$export$b2afc7c96b2b4a45(type)}`);\n        this.type = type;\n        this.value = value;\n    }\n}\nclass $778943ec39690f8e$export$6f3d80189eb72cd4 {\n    /**\r\n   * @param {number} type The return type.\r\n   * @param {string} operator The operator.\r\n   * @param {...Expression} args The arguments.\r\n   */ constructor(type, operator, ...args){\n        this.type = type;\n        this.operator = operator;\n        this.args = args;\n    }\n}\nfunction $778943ec39690f8e$export$1c8b4c1584800354() {\n    return {\n        variables: new Set(),\n        properties: new Set(),\n        featureId: false,\n        geometryType: false,\n        mapState: false\n    };\n}\nfunction $778943ec39690f8e$export$98e6a39c04603d36(encoded, expectedType, context) {\n    switch(typeof encoded){\n        case 'boolean':\n            if ($778943ec39690f8e$export$26b9f946b448f23e(expectedType, $778943ec39690f8e$export$2b93044cbf134323)) return new $778943ec39690f8e$export$eb63e96e0913dda4($778943ec39690f8e$export$2b93044cbf134323, encoded ? 'true' : 'false');\n            if (!$778943ec39690f8e$export$9fdcb8b441c4f2b4(expectedType, $778943ec39690f8e$export$240f7fffab1b25a0)) throw new Error(`got a boolean, but expected ${$778943ec39690f8e$export$b2afc7c96b2b4a45(expectedType)}`);\n            return new $778943ec39690f8e$export$eb63e96e0913dda4($778943ec39690f8e$export$240f7fffab1b25a0, encoded);\n        case 'number':\n            if ($778943ec39690f8e$export$26b9f946b448f23e(expectedType, $778943ec39690f8e$export$52725c8a6d4c61d1)) return new $778943ec39690f8e$export$eb63e96e0913dda4($778943ec39690f8e$export$52725c8a6d4c61d1, (0, $cc435a5409103773$export$a71a825ff42fb8e1)(encoded));\n            if ($778943ec39690f8e$export$26b9f946b448f23e(expectedType, $778943ec39690f8e$export$240f7fffab1b25a0)) return new $778943ec39690f8e$export$eb63e96e0913dda4($778943ec39690f8e$export$240f7fffab1b25a0, !!encoded);\n            if ($778943ec39690f8e$export$26b9f946b448f23e(expectedType, $778943ec39690f8e$export$2b93044cbf134323)) return new $778943ec39690f8e$export$eb63e96e0913dda4($778943ec39690f8e$export$2b93044cbf134323, encoded.toString());\n            if (!$778943ec39690f8e$export$9fdcb8b441c4f2b4(expectedType, $778943ec39690f8e$export$86a7aca748b1e260)) throw new Error(`got a number, but expected ${$778943ec39690f8e$export$b2afc7c96b2b4a45(expectedType)}`);\n            return new $778943ec39690f8e$export$eb63e96e0913dda4($778943ec39690f8e$export$86a7aca748b1e260, encoded);\n        case 'string':\n            if ($778943ec39690f8e$export$26b9f946b448f23e(expectedType, $778943ec39690f8e$export$2cd82751acc0e609)) return new $778943ec39690f8e$export$eb63e96e0913dda4($778943ec39690f8e$export$2cd82751acc0e609, (0, $322346e1ff7894ca$export$3004f64547af360e)(encoded));\n            if ($778943ec39690f8e$export$26b9f946b448f23e(expectedType, $778943ec39690f8e$export$240f7fffab1b25a0)) return new $778943ec39690f8e$export$eb63e96e0913dda4($778943ec39690f8e$export$240f7fffab1b25a0, !!encoded);\n            if (!$778943ec39690f8e$export$9fdcb8b441c4f2b4(expectedType, $778943ec39690f8e$export$2b93044cbf134323)) throw new Error(`got a string, but expected ${$778943ec39690f8e$export$b2afc7c96b2b4a45(expectedType)}`);\n            return new $778943ec39690f8e$export$eb63e96e0913dda4($778943ec39690f8e$export$2b93044cbf134323, encoded);\n        default:\n    }\n    if (!Array.isArray(encoded)) throw new Error('expression must be an array or a primitive value');\n    if (encoded.length === 0) throw new Error('empty expression');\n    if (typeof encoded[0] === 'string') return $778943ec39690f8e$var$parseCallExpression(encoded, expectedType, context);\n    for (const item of encoded){\n        if (typeof item !== 'number') throw new Error('expected an array of numbers');\n    }\n    if ($778943ec39690f8e$export$26b9f946b448f23e(expectedType, $778943ec39690f8e$export$52725c8a6d4c61d1)) {\n        if (encoded.length !== 2) throw new Error(`expected an array of two values for a size, got ${encoded.length}`);\n        return new $778943ec39690f8e$export$eb63e96e0913dda4($778943ec39690f8e$export$52725c8a6d4c61d1, encoded);\n    }\n    if ($778943ec39690f8e$export$26b9f946b448f23e(expectedType, $778943ec39690f8e$export$2cd82751acc0e609)) {\n        if (encoded.length === 3) return new $778943ec39690f8e$export$eb63e96e0913dda4($778943ec39690f8e$export$2cd82751acc0e609, [\n            ...encoded,\n            1\n        ]);\n        if (encoded.length === 4) return new $778943ec39690f8e$export$eb63e96e0913dda4($778943ec39690f8e$export$2cd82751acc0e609, encoded);\n        throw new Error(`expected an array of 3 or 4 values for a color, got ${encoded.length}`);\n    }\n    if (!$778943ec39690f8e$export$9fdcb8b441c4f2b4(expectedType, $778943ec39690f8e$export$d701d0e49f4bcb39)) throw new Error(`got an array of numbers, but expected ${$778943ec39690f8e$export$b2afc7c96b2b4a45(expectedType)}`);\n    return new $778943ec39690f8e$export$eb63e96e0913dda4($778943ec39690f8e$export$d701d0e49f4bcb39, encoded);\n}\nconst $778943ec39690f8e$export$2655e45458bc48f3 = {\n    Get: 'get',\n    Var: 'var',\n    Concat: 'concat',\n    GeometryType: 'geometry-type',\n    LineMetric: 'line-metric',\n    Any: 'any',\n    All: 'all',\n    Not: '!',\n    Resolution: 'resolution',\n    Zoom: 'zoom',\n    Time: 'time',\n    Equal: '==',\n    NotEqual: '!=',\n    GreaterThan: '>',\n    GreaterThanOrEqualTo: '>=',\n    LessThan: '<',\n    LessThanOrEqualTo: '<=',\n    Multiply: '*',\n    Divide: '/',\n    Add: '+',\n    Subtract: '-',\n    Clamp: 'clamp',\n    Mod: '%',\n    Pow: '^',\n    Abs: 'abs',\n    Floor: 'floor',\n    Ceil: 'ceil',\n    Round: 'round',\n    Sin: 'sin',\n    Cos: 'cos',\n    Atan: 'atan',\n    Sqrt: 'sqrt',\n    Match: 'match',\n    Between: 'between',\n    Interpolate: 'interpolate',\n    Coalesce: 'coalesce',\n    Case: 'case',\n    In: 'in',\n    Number: 'number',\n    String: 'string',\n    Array: 'array',\n    Color: 'color',\n    Id: 'id',\n    Band: 'band',\n    Palette: 'palette',\n    ToString: 'to-string',\n    Has: 'has'\n};\n/**\r\n * @typedef {function(Array, number, ParsingContext):Expression} Parser\r\n *\r\n * Second argument is the expected type.\r\n */ /**\r\n * @type {Object<string, Parser>}\r\n */ const $778943ec39690f8e$var$parsers = {\n    [$778943ec39690f8e$export$2655e45458bc48f3.Get]: $778943ec39690f8e$var$createCallExpressionParser($778943ec39690f8e$var$hasArgsCount(1, Infinity), $778943ec39690f8e$var$withGetArgs),\n    [$778943ec39690f8e$export$2655e45458bc48f3.Var]: $778943ec39690f8e$var$createCallExpressionParser($778943ec39690f8e$var$hasArgsCount(1, 1), $778943ec39690f8e$var$withVarArgs),\n    [$778943ec39690f8e$export$2655e45458bc48f3.Has]: $778943ec39690f8e$var$createCallExpressionParser($778943ec39690f8e$var$hasArgsCount(1, Infinity), $778943ec39690f8e$var$withGetArgs),\n    [$778943ec39690f8e$export$2655e45458bc48f3.Id]: $778943ec39690f8e$var$createCallExpressionParser($778943ec39690f8e$var$usesFeatureId, $778943ec39690f8e$var$withNoArgs),\n    [$778943ec39690f8e$export$2655e45458bc48f3.Concat]: $778943ec39690f8e$var$createCallExpressionParser($778943ec39690f8e$var$hasArgsCount(2, Infinity), $778943ec39690f8e$var$withArgsOfType($778943ec39690f8e$export$2b93044cbf134323)),\n    [$778943ec39690f8e$export$2655e45458bc48f3.GeometryType]: $778943ec39690f8e$var$createCallExpressionParser($778943ec39690f8e$var$usesGeometryType, $778943ec39690f8e$var$withNoArgs),\n    [$778943ec39690f8e$export$2655e45458bc48f3.LineMetric]: $778943ec39690f8e$var$createCallExpressionParser($778943ec39690f8e$var$withNoArgs),\n    [$778943ec39690f8e$export$2655e45458bc48f3.Resolution]: $778943ec39690f8e$var$createCallExpressionParser($778943ec39690f8e$var$usesMapState, $778943ec39690f8e$var$withNoArgs),\n    [$778943ec39690f8e$export$2655e45458bc48f3.Zoom]: $778943ec39690f8e$var$createCallExpressionParser($778943ec39690f8e$var$usesMapState, $778943ec39690f8e$var$withNoArgs),\n    [$778943ec39690f8e$export$2655e45458bc48f3.Time]: $778943ec39690f8e$var$createCallExpressionParser($778943ec39690f8e$var$usesMapState, $778943ec39690f8e$var$withNoArgs),\n    [$778943ec39690f8e$export$2655e45458bc48f3.Any]: $778943ec39690f8e$var$createCallExpressionParser($778943ec39690f8e$var$hasArgsCount(2, Infinity), $778943ec39690f8e$var$withArgsOfType($778943ec39690f8e$export$240f7fffab1b25a0)),\n    [$778943ec39690f8e$export$2655e45458bc48f3.All]: $778943ec39690f8e$var$createCallExpressionParser($778943ec39690f8e$var$hasArgsCount(2, Infinity), $778943ec39690f8e$var$withArgsOfType($778943ec39690f8e$export$240f7fffab1b25a0)),\n    [$778943ec39690f8e$export$2655e45458bc48f3.Not]: $778943ec39690f8e$var$createCallExpressionParser($778943ec39690f8e$var$hasArgsCount(1, 1), $778943ec39690f8e$var$withArgsOfType($778943ec39690f8e$export$240f7fffab1b25a0)),\n    [$778943ec39690f8e$export$2655e45458bc48f3.Equal]: $778943ec39690f8e$var$createCallExpressionParser($778943ec39690f8e$var$hasArgsCount(2, 2), $778943ec39690f8e$var$withArgsOfType($778943ec39690f8e$export$ec4c9a150bae86cd)),\n    [$778943ec39690f8e$export$2655e45458bc48f3.NotEqual]: $778943ec39690f8e$var$createCallExpressionParser($778943ec39690f8e$var$hasArgsCount(2, 2), $778943ec39690f8e$var$withArgsOfType($778943ec39690f8e$export$ec4c9a150bae86cd)),\n    [$778943ec39690f8e$export$2655e45458bc48f3.GreaterThan]: $778943ec39690f8e$var$createCallExpressionParser($778943ec39690f8e$var$hasArgsCount(2, 2), $778943ec39690f8e$var$withArgsOfType($778943ec39690f8e$export$86a7aca748b1e260)),\n    [$778943ec39690f8e$export$2655e45458bc48f3.GreaterThanOrEqualTo]: $778943ec39690f8e$var$createCallExpressionParser($778943ec39690f8e$var$hasArgsCount(2, 2), $778943ec39690f8e$var$withArgsOfType($778943ec39690f8e$export$86a7aca748b1e260)),\n    [$778943ec39690f8e$export$2655e45458bc48f3.LessThan]: $778943ec39690f8e$var$createCallExpressionParser($778943ec39690f8e$var$hasArgsCount(2, 2), $778943ec39690f8e$var$withArgsOfType($778943ec39690f8e$export$86a7aca748b1e260)),\n    [$778943ec39690f8e$export$2655e45458bc48f3.LessThanOrEqualTo]: $778943ec39690f8e$var$createCallExpressionParser($778943ec39690f8e$var$hasArgsCount(2, 2), $778943ec39690f8e$var$withArgsOfType($778943ec39690f8e$export$86a7aca748b1e260)),\n    [$778943ec39690f8e$export$2655e45458bc48f3.Multiply]: $778943ec39690f8e$var$createCallExpressionParser($778943ec39690f8e$var$hasArgsCount(2, Infinity), $778943ec39690f8e$var$withArgsOfReturnType),\n    [$778943ec39690f8e$export$2655e45458bc48f3.Coalesce]: $778943ec39690f8e$var$createCallExpressionParser($778943ec39690f8e$var$hasArgsCount(2, Infinity), $778943ec39690f8e$var$withArgsOfReturnType),\n    [$778943ec39690f8e$export$2655e45458bc48f3.Divide]: $778943ec39690f8e$var$createCallExpressionParser($778943ec39690f8e$var$hasArgsCount(2, 2), $778943ec39690f8e$var$withArgsOfType($778943ec39690f8e$export$86a7aca748b1e260)),\n    [$778943ec39690f8e$export$2655e45458bc48f3.Add]: $778943ec39690f8e$var$createCallExpressionParser($778943ec39690f8e$var$hasArgsCount(2, Infinity), $778943ec39690f8e$var$withArgsOfType($778943ec39690f8e$export$86a7aca748b1e260)),\n    [$778943ec39690f8e$export$2655e45458bc48f3.Subtract]: $778943ec39690f8e$var$createCallExpressionParser($778943ec39690f8e$var$hasArgsCount(2, 2), $778943ec39690f8e$var$withArgsOfType($778943ec39690f8e$export$86a7aca748b1e260)),\n    [$778943ec39690f8e$export$2655e45458bc48f3.Clamp]: $778943ec39690f8e$var$createCallExpressionParser($778943ec39690f8e$var$hasArgsCount(3, 3), $778943ec39690f8e$var$withArgsOfType($778943ec39690f8e$export$86a7aca748b1e260)),\n    [$778943ec39690f8e$export$2655e45458bc48f3.Mod]: $778943ec39690f8e$var$createCallExpressionParser($778943ec39690f8e$var$hasArgsCount(2, 2), $778943ec39690f8e$var$withArgsOfType($778943ec39690f8e$export$86a7aca748b1e260)),\n    [$778943ec39690f8e$export$2655e45458bc48f3.Pow]: $778943ec39690f8e$var$createCallExpressionParser($778943ec39690f8e$var$hasArgsCount(2, 2), $778943ec39690f8e$var$withArgsOfType($778943ec39690f8e$export$86a7aca748b1e260)),\n    [$778943ec39690f8e$export$2655e45458bc48f3.Abs]: $778943ec39690f8e$var$createCallExpressionParser($778943ec39690f8e$var$hasArgsCount(1, 1), $778943ec39690f8e$var$withArgsOfType($778943ec39690f8e$export$86a7aca748b1e260)),\n    [$778943ec39690f8e$export$2655e45458bc48f3.Floor]: $778943ec39690f8e$var$createCallExpressionParser($778943ec39690f8e$var$hasArgsCount(1, 1), $778943ec39690f8e$var$withArgsOfType($778943ec39690f8e$export$86a7aca748b1e260)),\n    [$778943ec39690f8e$export$2655e45458bc48f3.Ceil]: $778943ec39690f8e$var$createCallExpressionParser($778943ec39690f8e$var$hasArgsCount(1, 1), $778943ec39690f8e$var$withArgsOfType($778943ec39690f8e$export$86a7aca748b1e260)),\n    [$778943ec39690f8e$export$2655e45458bc48f3.Round]: $778943ec39690f8e$var$createCallExpressionParser($778943ec39690f8e$var$hasArgsCount(1, 1), $778943ec39690f8e$var$withArgsOfType($778943ec39690f8e$export$86a7aca748b1e260)),\n    [$778943ec39690f8e$export$2655e45458bc48f3.Sin]: $778943ec39690f8e$var$createCallExpressionParser($778943ec39690f8e$var$hasArgsCount(1, 1), $778943ec39690f8e$var$withArgsOfType($778943ec39690f8e$export$86a7aca748b1e260)),\n    [$778943ec39690f8e$export$2655e45458bc48f3.Cos]: $778943ec39690f8e$var$createCallExpressionParser($778943ec39690f8e$var$hasArgsCount(1, 1), $778943ec39690f8e$var$withArgsOfType($778943ec39690f8e$export$86a7aca748b1e260)),\n    [$778943ec39690f8e$export$2655e45458bc48f3.Atan]: $778943ec39690f8e$var$createCallExpressionParser($778943ec39690f8e$var$hasArgsCount(1, 2), $778943ec39690f8e$var$withArgsOfType($778943ec39690f8e$export$86a7aca748b1e260)),\n    [$778943ec39690f8e$export$2655e45458bc48f3.Sqrt]: $778943ec39690f8e$var$createCallExpressionParser($778943ec39690f8e$var$hasArgsCount(1, 1), $778943ec39690f8e$var$withArgsOfType($778943ec39690f8e$export$86a7aca748b1e260)),\n    [$778943ec39690f8e$export$2655e45458bc48f3.Match]: $778943ec39690f8e$var$createCallExpressionParser($778943ec39690f8e$var$hasArgsCount(4, Infinity), $778943ec39690f8e$var$hasEvenArgs, $778943ec39690f8e$var$withMatchArgs),\n    [$778943ec39690f8e$export$2655e45458bc48f3.Between]: $778943ec39690f8e$var$createCallExpressionParser($778943ec39690f8e$var$hasArgsCount(3, 3), $778943ec39690f8e$var$withArgsOfType($778943ec39690f8e$export$86a7aca748b1e260)),\n    [$778943ec39690f8e$export$2655e45458bc48f3.Interpolate]: $778943ec39690f8e$var$createCallExpressionParser($778943ec39690f8e$var$hasArgsCount(6, Infinity), $778943ec39690f8e$var$hasEvenArgs, $778943ec39690f8e$var$withInterpolateArgs),\n    [$778943ec39690f8e$export$2655e45458bc48f3.Case]: $778943ec39690f8e$var$createCallExpressionParser($778943ec39690f8e$var$hasArgsCount(3, Infinity), $778943ec39690f8e$var$hasOddArgs, $778943ec39690f8e$var$withCaseArgs),\n    [$778943ec39690f8e$export$2655e45458bc48f3.In]: $778943ec39690f8e$var$createCallExpressionParser($778943ec39690f8e$var$hasArgsCount(2, 2), $778943ec39690f8e$var$withInArgs),\n    [$778943ec39690f8e$export$2655e45458bc48f3.Number]: $778943ec39690f8e$var$createCallExpressionParser($778943ec39690f8e$var$hasArgsCount(1, Infinity), $778943ec39690f8e$var$withArgsOfType($778943ec39690f8e$export$ec4c9a150bae86cd)),\n    [$778943ec39690f8e$export$2655e45458bc48f3.String]: $778943ec39690f8e$var$createCallExpressionParser($778943ec39690f8e$var$hasArgsCount(1, Infinity), $778943ec39690f8e$var$withArgsOfType($778943ec39690f8e$export$ec4c9a150bae86cd)),\n    [$778943ec39690f8e$export$2655e45458bc48f3.Array]: $778943ec39690f8e$var$createCallExpressionParser($778943ec39690f8e$var$hasArgsCount(1, Infinity), $778943ec39690f8e$var$withArgsOfType($778943ec39690f8e$export$86a7aca748b1e260)),\n    [$778943ec39690f8e$export$2655e45458bc48f3.Color]: $778943ec39690f8e$var$createCallExpressionParser($778943ec39690f8e$var$hasArgsCount(1, 4), $778943ec39690f8e$var$withArgsOfType($778943ec39690f8e$export$86a7aca748b1e260)),\n    [$778943ec39690f8e$export$2655e45458bc48f3.Band]: $778943ec39690f8e$var$createCallExpressionParser($778943ec39690f8e$var$hasArgsCount(1, 3), $778943ec39690f8e$var$withArgsOfType($778943ec39690f8e$export$86a7aca748b1e260)),\n    [$778943ec39690f8e$export$2655e45458bc48f3.Palette]: $778943ec39690f8e$var$createCallExpressionParser($778943ec39690f8e$var$hasArgsCount(2, 2), $778943ec39690f8e$var$withPaletteArgs),\n    [$778943ec39690f8e$export$2655e45458bc48f3.ToString]: $778943ec39690f8e$var$createCallExpressionParser($778943ec39690f8e$var$hasArgsCount(1, 1), $778943ec39690f8e$var$withArgsOfType($778943ec39690f8e$export$240f7fffab1b25a0 | $778943ec39690f8e$export$86a7aca748b1e260 | $778943ec39690f8e$export$2b93044cbf134323 | $778943ec39690f8e$export$2cd82751acc0e609))\n};\n/**\r\n * @typedef {function(Array<EncodedExpression>, number, ParsingContext):Array<Expression>|void} ArgValidator\r\n *\r\n * An argument validator applies various checks to an encoded expression arguments and\r\n * returns the parsed arguments if any.  The second argument is the return type of the call expression.\r\n */ /**\r\n * @type {ArgValidator}\r\n */ function $778943ec39690f8e$var$withGetArgs(encoded, returnType, context) {\n    const argsCount = encoded.length - 1;\n    const args = new Array(argsCount);\n    for(let i = 0; i < argsCount; ++i){\n        const key = encoded[i + 1];\n        switch(typeof key){\n            case 'number':\n                args[i] = new $778943ec39690f8e$export$eb63e96e0913dda4($778943ec39690f8e$export$86a7aca748b1e260, key);\n                break;\n            case 'string':\n                args[i] = new $778943ec39690f8e$export$eb63e96e0913dda4($778943ec39690f8e$export$2b93044cbf134323, key);\n                break;\n            default:\n                throw new Error(`expected a string key or numeric array index for a get operation, got ${key}`);\n        }\n        if (i === 0) context.properties.add(String(key));\n    }\n    return args;\n}\n/**\r\n * @type {ArgValidator}\r\n */ function $778943ec39690f8e$var$withVarArgs(encoded, returnType, context) {\n    const name = encoded[1];\n    if (typeof name !== 'string') throw new Error('expected a string argument for var operation');\n    context.variables.add(name);\n    return [\n        new $778943ec39690f8e$export$eb63e96e0913dda4($778943ec39690f8e$export$2b93044cbf134323, name)\n    ];\n}\n/**\r\n * @type {ArgValidator}\r\n */ function $778943ec39690f8e$var$usesFeatureId(encoded, returnType, context) {\n    context.featureId = true;\n}\n/**\r\n * @type {ArgValidator}\r\n */ function $778943ec39690f8e$var$usesGeometryType(encoded, returnType, context) {\n    context.geometryType = true;\n}\n/**\r\n * @type {ArgValidator}\r\n */ function $778943ec39690f8e$var$usesMapState(encoded, returnType, context) {\n    context.mapState = true;\n}\n/**\r\n * @type {ArgValidator}\r\n */ function $778943ec39690f8e$var$withNoArgs(encoded, returnType, context) {\n    const operation = encoded[0];\n    if (encoded.length !== 1) throw new Error(`expected no arguments for ${operation} operation`);\n    return [];\n}\n/**\r\n * @param {number} minArgs The minimum number of arguments.\r\n * @param {number} maxArgs The maximum number of arguments.\r\n * @return {ArgValidator} The argument validator\r\n */ function $778943ec39690f8e$var$hasArgsCount(minArgs, maxArgs) {\n    return function(encoded, returnType, context) {\n        const operation = encoded[0];\n        const argCount = encoded.length - 1;\n        if (minArgs === maxArgs) {\n            if (argCount !== minArgs) {\n                const plural = minArgs === 1 ? '' : 's';\n                throw new Error(`expected ${minArgs} argument${plural} for ${operation}, got ${argCount}`);\n            }\n        } else if (argCount < minArgs || argCount > maxArgs) {\n            const range = maxArgs === Infinity ? `${minArgs} or more` : `${minArgs} to ${maxArgs}`;\n            throw new Error(`expected ${range} arguments for ${operation}, got ${argCount}`);\n        }\n    };\n}\n/**\r\n * @type {ArgValidator}\r\n */ function $778943ec39690f8e$var$withArgsOfReturnType(encoded, returnType, context) {\n    const argCount = encoded.length - 1;\n    /**\r\n   * @type {Array<Expression>}\r\n   */ const args = new Array(argCount);\n    for(let i = 0; i < argCount; ++i){\n        const expression = $778943ec39690f8e$export$98e6a39c04603d36(encoded[i + 1], returnType, context);\n        args[i] = expression;\n    }\n    return args;\n}\n/**\r\n * @param {number} argType The argument type.\r\n * @return {ArgValidator} The argument validator\r\n */ function $778943ec39690f8e$var$withArgsOfType(argType) {\n    return function(encoded, returnType, context) {\n        const argCount = encoded.length - 1;\n        /**\r\n     * @type {Array<Expression>}\r\n     */ const args = new Array(argCount);\n        for(let i = 0; i < argCount; ++i){\n            const expression = $778943ec39690f8e$export$98e6a39c04603d36(encoded[i + 1], argType, context);\n            args[i] = expression;\n        }\n        return args;\n    };\n}\n/**\r\n * @type {ArgValidator}\r\n */ function $778943ec39690f8e$var$hasOddArgs(encoded, returnType, context) {\n    const operation = encoded[0];\n    const argCount = encoded.length - 1;\n    if (argCount % 2 === 0) throw new Error(`expected an odd number of arguments for ${operation}, got ${argCount} instead`);\n}\n/**\r\n * @type {ArgValidator}\r\n */ function $778943ec39690f8e$var$hasEvenArgs(encoded, returnType, context) {\n    const operation = encoded[0];\n    const argCount = encoded.length - 1;\n    if (argCount % 2 === 1) throw new Error(`expected an even number of arguments for operation ${operation}, got ${argCount} instead`);\n}\n/**\r\n * @type {ArgValidator}\r\n */ function $778943ec39690f8e$var$withMatchArgs(encoded, returnType, context) {\n    const argsCount = encoded.length - 1;\n    const inputType = $778943ec39690f8e$export$2b93044cbf134323 | $778943ec39690f8e$export$86a7aca748b1e260 | $778943ec39690f8e$export$240f7fffab1b25a0;\n    const input = $778943ec39690f8e$export$98e6a39c04603d36(encoded[1], inputType, context);\n    const fallback = $778943ec39690f8e$export$98e6a39c04603d36(encoded[encoded.length - 1], returnType, context);\n    const args = new Array(argsCount - 2);\n    for(let i = 0; i < argsCount - 2; i += 2){\n        try {\n            const match = $778943ec39690f8e$export$98e6a39c04603d36(encoded[i + 2], input.type, context);\n            args[i] = match;\n        } catch (err) {\n            throw new Error(`failed to parse argument ${i + 1} of match expression: ${err.message}`);\n        }\n        try {\n            const output = $778943ec39690f8e$export$98e6a39c04603d36(encoded[i + 3], fallback.type, context);\n            args[i + 1] = output;\n        } catch (err) {\n            throw new Error(`failed to parse argument ${i + 2} of match expression: ${err.message}`);\n        }\n    }\n    return [\n        input,\n        ...args,\n        fallback\n    ];\n}\n/**\r\n * @type {ArgValidator}\r\n */ function $778943ec39690f8e$var$withInterpolateArgs(encoded, returnType, context) {\n    const interpolationType = encoded[1];\n    /**\r\n   * @type {number}\r\n   */ let base;\n    switch(interpolationType[0]){\n        case 'linear':\n            base = 1;\n            break;\n        case 'exponential':\n            const b = interpolationType[1];\n            if (typeof b !== 'number' || b <= 0) throw new Error(`expected a number base for exponential interpolation` + `, got ${JSON.stringify(b)} instead`);\n            base = b;\n            break;\n        default:\n            throw new Error(`invalid interpolation type: ${JSON.stringify(interpolationType)}`);\n    }\n    const interpolation = new $778943ec39690f8e$export$eb63e96e0913dda4($778943ec39690f8e$export$86a7aca748b1e260, base);\n    let input;\n    try {\n        input = $778943ec39690f8e$export$98e6a39c04603d36(encoded[2], $778943ec39690f8e$export$86a7aca748b1e260, context);\n    } catch (err) {\n        throw new Error(`failed to parse argument 1 in interpolate expression: ${err.message}`);\n    }\n    const args = new Array(encoded.length - 3);\n    for(let i = 0; i < args.length; i += 2){\n        try {\n            const stop = $778943ec39690f8e$export$98e6a39c04603d36(encoded[i + 3], $778943ec39690f8e$export$86a7aca748b1e260, context);\n            args[i] = stop;\n        } catch (err) {\n            throw new Error(`failed to parse argument ${i + 2} for interpolate expression: ${err.message}`);\n        }\n        try {\n            const output = $778943ec39690f8e$export$98e6a39c04603d36(encoded[i + 4], returnType, context);\n            args[i + 1] = output;\n        } catch (err) {\n            throw new Error(`failed to parse argument ${i + 3} for interpolate expression: ${err.message}`);\n        }\n    }\n    return [\n        interpolation,\n        input,\n        ...args\n    ];\n}\n/**\r\n * @type {ArgValidator}\r\n */ function $778943ec39690f8e$var$withCaseArgs(encoded, returnType, context) {\n    const fallback = $778943ec39690f8e$export$98e6a39c04603d36(encoded[encoded.length - 1], returnType, context);\n    const args = new Array(encoded.length - 1);\n    for(let i = 0; i < args.length - 1; i += 2){\n        try {\n            const condition = $778943ec39690f8e$export$98e6a39c04603d36(encoded[i + 1], $778943ec39690f8e$export$240f7fffab1b25a0, context);\n            args[i] = condition;\n        } catch (err) {\n            throw new Error(`failed to parse argument ${i} of case expression: ${err.message}`);\n        }\n        try {\n            const output = $778943ec39690f8e$export$98e6a39c04603d36(encoded[i + 2], fallback.type, context);\n            args[i + 1] = output;\n        } catch (err) {\n            throw new Error(`failed to parse argument ${i + 1} of case expression: ${err.message}`);\n        }\n    }\n    args[args.length - 1] = fallback;\n    return args;\n}\n/**\r\n * @type {ArgValidator}\r\n */ function $778943ec39690f8e$var$withInArgs(encoded, returnType, context) {\n    let haystack = encoded[2];\n    if (!Array.isArray(haystack)) throw new Error(`the second argument for the \"in\" operator must be an array`);\n    /**\r\n   * @type {number}\r\n   */ let needleType;\n    if (typeof haystack[0] === 'string') {\n        if (haystack[0] !== 'literal') throw new Error(`for the \"in\" operator, a string array should be wrapped in a \"literal\" operator to disambiguate from expressions`);\n        if (!Array.isArray(haystack[1])) throw new Error(`failed to parse \"in\" expression: the literal operator must be followed by an array`);\n        haystack = haystack[1];\n        needleType = $778943ec39690f8e$export$2b93044cbf134323;\n    } else needleType = $778943ec39690f8e$export$86a7aca748b1e260;\n    const args = new Array(haystack.length);\n    for(let i = 0; i < args.length; i++)try {\n        const arg = $778943ec39690f8e$export$98e6a39c04603d36(haystack[i], needleType, context);\n        args[i] = arg;\n    } catch (err) {\n        throw new Error(`failed to parse haystack item ${i} for \"in\" expression: ${err.message}`);\n    }\n    const needle = $778943ec39690f8e$export$98e6a39c04603d36(encoded[1], needleType, context);\n    return [\n        needle,\n        ...args\n    ];\n}\n/**\r\n * @type {ArgValidator}\r\n */ function $778943ec39690f8e$var$withPaletteArgs(encoded, returnType, context) {\n    let index;\n    try {\n        index = $778943ec39690f8e$export$98e6a39c04603d36(encoded[1], $778943ec39690f8e$export$86a7aca748b1e260, context);\n    } catch (err) {\n        throw new Error(`failed to parse first argument in palette expression: ${err.message}`);\n    }\n    const colors = encoded[2];\n    if (!Array.isArray(colors)) throw new Error('the second argument of palette must be an array');\n    const parsedColors = new Array(colors.length);\n    for(let i = 0; i < parsedColors.length; i++){\n        let color;\n        try {\n            color = $778943ec39690f8e$export$98e6a39c04603d36(colors[i], $778943ec39690f8e$export$2cd82751acc0e609, context);\n        } catch (err) {\n            throw new Error(`failed to parse color at index ${i} in palette expression: ${err.message}`);\n        }\n        if (!(color instanceof $778943ec39690f8e$export$eb63e96e0913dda4)) throw new Error(`the palette color at index ${i} must be a literal value`);\n        parsedColors[i] = color;\n    }\n    return [\n        index,\n        ...parsedColors\n    ];\n}\n/**\r\n * @param {Array<ArgValidator>} validators A chain of argument validators.  The last validator is expected\r\n * to return the parsed arguments.\r\n * @return {Parser} The parser.\r\n */ function $778943ec39690f8e$var$createCallExpressionParser(...validators) {\n    return function(encoded, returnType, context) {\n        const operator = encoded[0];\n        /**\r\n     * @type {Array<Expression>}\r\n     */ let args;\n        for(let i = 0; i < validators.length; i++){\n            const parsed = validators[i](encoded, returnType, context);\n            if (i == validators.length - 1) {\n                if (!parsed) throw new Error('expected last argument validator to return the parsed args');\n                args = parsed;\n            }\n        }\n        return new $778943ec39690f8e$export$6f3d80189eb72cd4(returnType, operator, ...args);\n    };\n}\n/**\r\n * @param {Array} encoded The encoded expression.\r\n * @param {number} returnType The expected return type of the call expression.\r\n * @param {ParsingContext} context The parsing context.\r\n * @return {Expression} The parsed expression.\r\n */ function $778943ec39690f8e$var$parseCallExpression(encoded, returnType, context) {\n    const operator = encoded[0];\n    const parser = $778943ec39690f8e$var$parsers[operator];\n    if (!parser) throw new Error(`unknown operator: ${operator}`);\n    return parser(encoded, returnType, context);\n}\nfunction $778943ec39690f8e$export$8da88d86d10c1295(geometry) {\n    if (!geometry) return '';\n    const type = geometry.getType();\n    switch(type){\n        case 'Point':\n        case 'LineString':\n        case 'Polygon':\n            return type;\n        case 'MultiPoint':\n        case 'MultiLineString':\n        case 'MultiPolygon':\n            return /** @type {'Point'|'LineString'|'Polygon'} */ type.substring(5);\n        case 'Circle':\n            return 'Polygon';\n        case 'GeometryCollection':\n            return $778943ec39690f8e$export$8da88d86d10c1295(/** @type {import(\"../geom/GeometryCollection.js\").default} */ geometry.getGeometries()[0]);\n        default:\n            return '';\n    }\n}\n\n\nfunction $d597295b1f166e98$export$c18f39f0e136c26() {\n    return {\n        variables: {},\n        properties: {},\n        resolution: NaN,\n        featureId: null,\n        geometryType: ''\n    };\n}\nfunction $d597295b1f166e98$export$b5f535122a9211f0(encoded, type, context) {\n    const expression = (0, $778943ec39690f8e$export$98e6a39c04603d36)(encoded, type, context);\n    return $d597295b1f166e98$var$compileExpression(expression, context);\n}\n/**\r\n * @param {import(\"./expression.js\").Expression} expression The expression.\r\n * @param {import('./expression.js').ParsingContext} context The parsing context.\r\n * @return {ExpressionEvaluator} The evaluator function.\r\n */ function $d597295b1f166e98$var$compileExpression(expression, context) {\n    if (expression instanceof (0, $778943ec39690f8e$export$eb63e96e0913dda4)) {\n        // convert colors to array if possible\n        if (expression.type === (0, $778943ec39690f8e$export$2cd82751acc0e609) && typeof expression.value === 'string') {\n            const colorValue = (0, $322346e1ff7894ca$export$3004f64547af360e)(expression.value);\n            return function() {\n                return colorValue;\n            };\n        }\n        return function() {\n            return expression.value;\n        };\n    }\n    const operator = expression.operator;\n    switch(operator){\n        case (0, $778943ec39690f8e$export$2655e45458bc48f3).Number:\n        case (0, $778943ec39690f8e$export$2655e45458bc48f3).String:\n        case (0, $778943ec39690f8e$export$2655e45458bc48f3).Coalesce:\n            return $d597295b1f166e98$var$compileAssertionExpression(expression, context);\n        case (0, $778943ec39690f8e$export$2655e45458bc48f3).Get:\n        case (0, $778943ec39690f8e$export$2655e45458bc48f3).Var:\n        case (0, $778943ec39690f8e$export$2655e45458bc48f3).Has:\n            return $d597295b1f166e98$var$compileAccessorExpression(expression, context);\n        case (0, $778943ec39690f8e$export$2655e45458bc48f3).Id:\n            return (context)=>context.featureId;\n        case (0, $778943ec39690f8e$export$2655e45458bc48f3).GeometryType:\n            return (context)=>context.geometryType;\n        case (0, $778943ec39690f8e$export$2655e45458bc48f3).Concat:\n            {\n                const args = expression.args.map((e)=>$d597295b1f166e98$var$compileExpression(e, context));\n                return (context)=>''.concat(...args.map((arg)=>arg(context).toString()));\n            }\n        case (0, $778943ec39690f8e$export$2655e45458bc48f3).Resolution:\n            return (context)=>context.resolution;\n        case (0, $778943ec39690f8e$export$2655e45458bc48f3).Any:\n        case (0, $778943ec39690f8e$export$2655e45458bc48f3).All:\n        case (0, $778943ec39690f8e$export$2655e45458bc48f3).Between:\n        case (0, $778943ec39690f8e$export$2655e45458bc48f3).In:\n        case (0, $778943ec39690f8e$export$2655e45458bc48f3).Not:\n            return $d597295b1f166e98$var$compileLogicalExpression(expression, context);\n        case (0, $778943ec39690f8e$export$2655e45458bc48f3).Equal:\n        case (0, $778943ec39690f8e$export$2655e45458bc48f3).NotEqual:\n        case (0, $778943ec39690f8e$export$2655e45458bc48f3).LessThan:\n        case (0, $778943ec39690f8e$export$2655e45458bc48f3).LessThanOrEqualTo:\n        case (0, $778943ec39690f8e$export$2655e45458bc48f3).GreaterThan:\n        case (0, $778943ec39690f8e$export$2655e45458bc48f3).GreaterThanOrEqualTo:\n            return $d597295b1f166e98$var$compileComparisonExpression(expression, context);\n        case (0, $778943ec39690f8e$export$2655e45458bc48f3).Multiply:\n        case (0, $778943ec39690f8e$export$2655e45458bc48f3).Divide:\n        case (0, $778943ec39690f8e$export$2655e45458bc48f3).Add:\n        case (0, $778943ec39690f8e$export$2655e45458bc48f3).Subtract:\n        case (0, $778943ec39690f8e$export$2655e45458bc48f3).Clamp:\n        case (0, $778943ec39690f8e$export$2655e45458bc48f3).Mod:\n        case (0, $778943ec39690f8e$export$2655e45458bc48f3).Pow:\n        case (0, $778943ec39690f8e$export$2655e45458bc48f3).Abs:\n        case (0, $778943ec39690f8e$export$2655e45458bc48f3).Floor:\n        case (0, $778943ec39690f8e$export$2655e45458bc48f3).Ceil:\n        case (0, $778943ec39690f8e$export$2655e45458bc48f3).Round:\n        case (0, $778943ec39690f8e$export$2655e45458bc48f3).Sin:\n        case (0, $778943ec39690f8e$export$2655e45458bc48f3).Cos:\n        case (0, $778943ec39690f8e$export$2655e45458bc48f3).Atan:\n        case (0, $778943ec39690f8e$export$2655e45458bc48f3).Sqrt:\n            return $d597295b1f166e98$var$compileNumericExpression(expression, context);\n        case (0, $778943ec39690f8e$export$2655e45458bc48f3).Case:\n            return $d597295b1f166e98$var$compileCaseExpression(expression, context);\n        case (0, $778943ec39690f8e$export$2655e45458bc48f3).Match:\n            return $d597295b1f166e98$var$compileMatchExpression(expression, context);\n        case (0, $778943ec39690f8e$export$2655e45458bc48f3).Interpolate:\n            return $d597295b1f166e98$var$compileInterpolateExpression(expression, context);\n        case (0, $778943ec39690f8e$export$2655e45458bc48f3).ToString:\n            return $d597295b1f166e98$var$compileConvertExpression(expression, context);\n        default:\n            throw new Error(`Unsupported operator ${operator}`);\n    }\n}\n/**\r\n * @param {import('./expression.js').CallExpression} expression The call expression.\r\n * @param {import('./expression.js').ParsingContext} context The parsing context.\r\n * @return {ExpressionEvaluator} The evaluator function.\r\n */ function $d597295b1f166e98$var$compileAssertionExpression(expression, context) {\n    const type = expression.operator;\n    const length = expression.args.length;\n    const args = new Array(length);\n    for(let i = 0; i < length; ++i)args[i] = $d597295b1f166e98$var$compileExpression(expression.args[i], context);\n    switch(type){\n        case (0, $778943ec39690f8e$export$2655e45458bc48f3).Coalesce:\n            return (context)=>{\n                for(let i = 0; i < length; ++i){\n                    const value = args[i](context);\n                    if (typeof value !== 'undefined' && value !== null) return value;\n                }\n                throw new Error('Expected one of the values to be non-null');\n            };\n        case (0, $778943ec39690f8e$export$2655e45458bc48f3).Number:\n        case (0, $778943ec39690f8e$export$2655e45458bc48f3).String:\n            return (context)=>{\n                for(let i = 0; i < length; ++i){\n                    const value = args[i](context);\n                    if (typeof value === type) return value;\n                }\n                throw new Error(`Expected one of the values to be a ${type}`);\n            };\n        default:\n            throw new Error(`Unsupported assertion operator ${type}`);\n    }\n}\n/**\r\n * @param {import('./expression.js').CallExpression} expression The call expression.\r\n * @param {import('./expression.js').ParsingContext} context The parsing context.\r\n * @return {ExpressionEvaluator} The evaluator function.\r\n */ function $d597295b1f166e98$var$compileAccessorExpression(expression, context) {\n    const nameExpression = /** @type {LiteralExpression} */ expression.args[0];\n    const name = /** @type {string} */ nameExpression.value;\n    switch(expression.operator){\n        case (0, $778943ec39690f8e$export$2655e45458bc48f3).Get:\n            return (context)=>{\n                const args = expression.args;\n                let value = context.properties[name];\n                for(let i = 1, ii = args.length; i < ii; ++i){\n                    const keyExpression = /** @type {LiteralExpression} */ args[i];\n                    const key = /** @type {string|number} */ keyExpression.value;\n                    value = value[key];\n                }\n                return value;\n            };\n        case (0, $778943ec39690f8e$export$2655e45458bc48f3).Var:\n            return (context)=>context.variables[name];\n        case (0, $778943ec39690f8e$export$2655e45458bc48f3).Has:\n            return (context)=>{\n                const args = expression.args;\n                if (!(name in context.properties)) return false;\n                let value = context.properties[name];\n                for(let i = 1, ii = args.length; i < ii; ++i){\n                    const keyExpression = /** @type {LiteralExpression} */ args[i];\n                    const key = /** @type {string|number} */ keyExpression.value;\n                    if (!value || !Object.hasOwn(value, key)) return false;\n                    value = value[key];\n                }\n                return true;\n            };\n        default:\n            throw new Error(`Unsupported accessor operator ${expression.operator}`);\n    }\n}\n/**\r\n * @param {import('./expression.js').CallExpression} expression The call expression.\r\n * @param {import('./expression.js').ParsingContext} context The parsing context.\r\n * @return {BooleanEvaluator} The evaluator function.\r\n */ function $d597295b1f166e98$var$compileComparisonExpression(expression, context) {\n    const op = expression.operator;\n    const left = $d597295b1f166e98$var$compileExpression(expression.args[0], context);\n    const right = $d597295b1f166e98$var$compileExpression(expression.args[1], context);\n    switch(op){\n        case (0, $778943ec39690f8e$export$2655e45458bc48f3).Equal:\n            return (context)=>left(context) === right(context);\n        case (0, $778943ec39690f8e$export$2655e45458bc48f3).NotEqual:\n            return (context)=>left(context) !== right(context);\n        case (0, $778943ec39690f8e$export$2655e45458bc48f3).LessThan:\n            return (context)=>left(context) < right(context);\n        case (0, $778943ec39690f8e$export$2655e45458bc48f3).LessThanOrEqualTo:\n            return (context)=>left(context) <= right(context);\n        case (0, $778943ec39690f8e$export$2655e45458bc48f3).GreaterThan:\n            return (context)=>left(context) > right(context);\n        case (0, $778943ec39690f8e$export$2655e45458bc48f3).GreaterThanOrEqualTo:\n            return (context)=>left(context) >= right(context);\n        default:\n            throw new Error(`Unsupported comparison operator ${op}`);\n    }\n}\n/**\r\n * @param {import('./expression.js').CallExpression} expression The call expression.\r\n * @param {import('./expression.js').ParsingContext} context The parsing context.\r\n * @return {BooleanEvaluator} The evaluator function.\r\n */ function $d597295b1f166e98$var$compileLogicalExpression(expression, context) {\n    const op = expression.operator;\n    const length = expression.args.length;\n    const args = new Array(length);\n    for(let i = 0; i < length; ++i)args[i] = $d597295b1f166e98$var$compileExpression(expression.args[i], context);\n    switch(op){\n        case (0, $778943ec39690f8e$export$2655e45458bc48f3).Any:\n            return (context)=>{\n                for(let i = 0; i < length; ++i){\n                    if (args[i](context)) return true;\n                }\n                return false;\n            };\n        case (0, $778943ec39690f8e$export$2655e45458bc48f3).All:\n            return (context)=>{\n                for(let i = 0; i < length; ++i){\n                    if (!args[i](context)) return false;\n                }\n                return true;\n            };\n        case (0, $778943ec39690f8e$export$2655e45458bc48f3).Between:\n            return (context)=>{\n                const value = args[0](context);\n                const min = args[1](context);\n                const max = args[2](context);\n                return value >= min && value <= max;\n            };\n        case (0, $778943ec39690f8e$export$2655e45458bc48f3).In:\n            return (context)=>{\n                const value = args[0](context);\n                for(let i = 1; i < length; ++i){\n                    if (value === args[i](context)) return true;\n                }\n                return false;\n            };\n        case (0, $778943ec39690f8e$export$2655e45458bc48f3).Not:\n            return (context)=>!args[0](context);\n        default:\n            throw new Error(`Unsupported logical operator ${op}`);\n    }\n}\n/**\r\n * @param {import('./expression.js').CallExpression} expression The call expression.\r\n * @param {import('./expression.js').ParsingContext} context The parsing context.\r\n * @return {NumberEvaluator} The evaluator function.\r\n */ function $d597295b1f166e98$var$compileNumericExpression(expression, context) {\n    const op = expression.operator;\n    const length = expression.args.length;\n    const args = new Array(length);\n    for(let i = 0; i < length; ++i)args[i] = $d597295b1f166e98$var$compileExpression(expression.args[i], context);\n    switch(op){\n        case (0, $778943ec39690f8e$export$2655e45458bc48f3).Multiply:\n            return (context)=>{\n                let value = 1;\n                for(let i = 0; i < length; ++i)value *= args[i](context);\n                return value;\n            };\n        case (0, $778943ec39690f8e$export$2655e45458bc48f3).Divide:\n            return (context)=>args[0](context) / args[1](context);\n        case (0, $778943ec39690f8e$export$2655e45458bc48f3).Add:\n            return (context)=>{\n                let value = 0;\n                for(let i = 0; i < length; ++i)value += args[i](context);\n                return value;\n            };\n        case (0, $778943ec39690f8e$export$2655e45458bc48f3).Subtract:\n            return (context)=>args[0](context) - args[1](context);\n        case (0, $778943ec39690f8e$export$2655e45458bc48f3).Clamp:\n            return (context)=>{\n                const value = args[0](context);\n                const min = args[1](context);\n                if (value < min) return min;\n                const max = args[2](context);\n                if (value > max) return max;\n                return value;\n            };\n        case (0, $778943ec39690f8e$export$2655e45458bc48f3).Mod:\n            return (context)=>args[0](context) % args[1](context);\n        case (0, $778943ec39690f8e$export$2655e45458bc48f3).Pow:\n            return (context)=>Math.pow(args[0](context), args[1](context));\n        case (0, $778943ec39690f8e$export$2655e45458bc48f3).Abs:\n            return (context)=>Math.abs(args[0](context));\n        case (0, $778943ec39690f8e$export$2655e45458bc48f3).Floor:\n            return (context)=>Math.floor(args[0](context));\n        case (0, $778943ec39690f8e$export$2655e45458bc48f3).Ceil:\n            return (context)=>Math.ceil(args[0](context));\n        case (0, $778943ec39690f8e$export$2655e45458bc48f3).Round:\n            return (context)=>Math.round(args[0](context));\n        case (0, $778943ec39690f8e$export$2655e45458bc48f3).Sin:\n            return (context)=>Math.sin(args[0](context));\n        case (0, $778943ec39690f8e$export$2655e45458bc48f3).Cos:\n            return (context)=>Math.cos(args[0](context));\n        case (0, $778943ec39690f8e$export$2655e45458bc48f3).Atan:\n            if (length === 2) return (context)=>Math.atan2(args[0](context), args[1](context));\n            return (context)=>Math.atan(args[0](context));\n        case (0, $778943ec39690f8e$export$2655e45458bc48f3).Sqrt:\n            return (context)=>Math.sqrt(args[0](context));\n        default:\n            throw new Error(`Unsupported numeric operator ${op}`);\n    }\n}\n/**\r\n * @param {import('./expression.js').CallExpression} expression The call expression.\r\n * @param {import('./expression.js').ParsingContext} context The parsing context.\r\n * @return {ExpressionEvaluator} The evaluator function.\r\n */ function $d597295b1f166e98$var$compileCaseExpression(expression, context) {\n    const length = expression.args.length;\n    const args = new Array(length);\n    for(let i = 0; i < length; ++i)args[i] = $d597295b1f166e98$var$compileExpression(expression.args[i], context);\n    return (context)=>{\n        for(let i = 0; i < length - 1; i += 2){\n            const condition = args[i](context);\n            if (condition) return args[i + 1](context);\n        }\n        return args[length - 1](context);\n    };\n}\n/**\r\n * @param {import('./expression.js').CallExpression} expression The call expression.\r\n * @param {import('./expression.js').ParsingContext} context The parsing context.\r\n * @return {ExpressionEvaluator} The evaluator function.\r\n */ function $d597295b1f166e98$var$compileMatchExpression(expression, context) {\n    const length = expression.args.length;\n    const args = new Array(length);\n    for(let i = 0; i < length; ++i)args[i] = $d597295b1f166e98$var$compileExpression(expression.args[i], context);\n    return (context)=>{\n        const value = args[0](context);\n        for(let i = 1; i < length - 1; i += 2){\n            if (value === args[i](context)) return args[i + 1](context);\n        }\n        return args[length - 1](context);\n    };\n}\n/**\r\n * @param {import('./expression.js').CallExpression} expression The call expression.\r\n * @param {import('./expression.js').ParsingContext} context The parsing context.\r\n * @return {ExpressionEvaluator} The evaluator function.\r\n */ function $d597295b1f166e98$var$compileInterpolateExpression(expression, context) {\n    const length = expression.args.length;\n    const args = new Array(length);\n    for(let i = 0; i < length; ++i)args[i] = $d597295b1f166e98$var$compileExpression(expression.args[i], context);\n    return (context)=>{\n        const base = args[0](context);\n        const value = args[1](context);\n        let previousInput;\n        let previousOutput;\n        for(let i = 2; i < length; i += 2){\n            const input = args[i](context);\n            let output = args[i + 1](context);\n            const isColor = Array.isArray(output);\n            if (isColor) output = (0, $322346e1ff7894ca$export$138c09bdd6bd797c)(output);\n            if (input >= value) {\n                if (i === 2) return output;\n                if (isColor) return $d597295b1f166e98$var$interpolateColor(base, value, previousInput, previousOutput, input, output);\n                return $d597295b1f166e98$var$interpolateNumber(base, value, previousInput, previousOutput, input, output);\n            }\n            previousInput = input;\n            previousOutput = output;\n        }\n        return previousOutput;\n    };\n}\n/**\r\n * @param {import('./expression.js').CallExpression} expression The call expression.\r\n * @param {import('./expression.js').ParsingContext} context The parsing context.\r\n * @return {ExpressionEvaluator} The evaluator function.\r\n */ function $d597295b1f166e98$var$compileConvertExpression(expression, context) {\n    const op = expression.operator;\n    const length = expression.args.length;\n    const args = new Array(length);\n    for(let i = 0; i < length; ++i)args[i] = $d597295b1f166e98$var$compileExpression(expression.args[i], context);\n    switch(op){\n        case (0, $778943ec39690f8e$export$2655e45458bc48f3).ToString:\n            return (context)=>{\n                const value = args[0](context);\n                if (expression.args[0].type === (0, $778943ec39690f8e$export$2cd82751acc0e609)) return (0, $322346e1ff7894ca$export$f84e8e69fd4488a5)(value);\n                return value.toString();\n            };\n        default:\n            throw new Error(`Unsupported convert operator ${op}`);\n    }\n}\n/**\r\n * @param {number} base The base.\r\n * @param {number} value The value.\r\n * @param {number} input1 The first input value.\r\n * @param {number} output1 The first output value.\r\n * @param {number} input2 The second input value.\r\n * @param {number} output2 The second output value.\r\n * @return {number} The interpolated value.\r\n */ function $d597295b1f166e98$var$interpolateNumber(base, value, input1, output1, input2, output2) {\n    const delta = input2 - input1;\n    if (delta === 0) return output1;\n    const along = value - input1;\n    const factor = base === 1 ? along / delta : (Math.pow(base, along) - 1) / (Math.pow(base, delta) - 1);\n    return output1 + factor * (output2 - output1);\n}\n/**\r\n * @param {number} base The base.\r\n * @param {number} value The value.\r\n * @param {number} input1 The first input value.\r\n * @param {import('../color.js').Color} rgba1 The first output value.\r\n * @param {number} input2 The second input value.\r\n * @param {import('../color.js').Color} rgba2 The second output value.\r\n * @return {import('../color.js').Color} The interpolated color.\r\n */ function $d597295b1f166e98$var$interpolateColor(base, value, input1, rgba1, input2, rgba2) {\n    const delta = input2 - input1;\n    if (delta === 0) return rgba1;\n    const lcha1 = (0, $322346e1ff7894ca$export$44fb54fa2e0c0d4)(rgba1);\n    const lcha2 = (0, $322346e1ff7894ca$export$44fb54fa2e0c0d4)(rgba2);\n    let deltaHue = lcha2[2] - lcha1[2];\n    if (deltaHue > 180) deltaHue -= 360;\n    else if (deltaHue < -180) deltaHue += 360;\n    const lcha = [\n        $d597295b1f166e98$var$interpolateNumber(base, value, input1, lcha1[0], input2, lcha2[0]),\n        $d597295b1f166e98$var$interpolateNumber(base, value, input1, lcha1[1], input2, lcha2[1]),\n        lcha1[2] + $d597295b1f166e98$var$interpolateNumber(base, value, input1, 0, input2, deltaHue),\n        $d597295b1f166e98$var$interpolateNumber(base, value, input1, rgba1[3], input2, rgba2[3])\n    ];\n    return (0, $322346e1ff7894ca$export$27cc94530c050f00)(lcha);\n}\n\n\n\n\n\n/**\r\n * @module ol/style/Circle\r\n */ /**\r\n * @module ol/style/RegularShape\r\n */ /**\r\n * @module ol/ImageState\r\n */ /**\r\n * @enum {number}\r\n */ var $7eb75c96a6b6f2c6$export$2e2bcd8739ae039 = {\n    IDLE: 0,\n    LOADING: 1,\n    LOADED: 2,\n    ERROR: 3,\n    EMPTY: 4\n};\n\n\n\n/**\r\n * @module ol/colorlike\r\n */ \n\n\n/**\r\n * @module ol/style/IconImage\r\n */ /**\r\n * @module ol/Image\r\n */ \n\n\n\n\n\n/**\r\n * A function that takes an {@link module:ol/Image~ImageWrapper} for the image and a\r\n * `{string}` for the src as arguments. It is supposed to make it so the\r\n * underlying image {@link module:ol/Image~ImageWrapper#getImage} is assigned the\r\n * content specified by the src. If not specified, the default is\r\n *\r\n *     function(image, src) {\r\n *       image.getImage().src = src;\r\n *     }\r\n *\r\n * Providing a custom `imageLoadFunction` can be useful to load images with\r\n * post requests or - in general - through XHR requests, where the src of the\r\n * image element would be set to a data URI when the content is loaded.\r\n *\r\n * @typedef {function(import(\"./Image.js\").default, string): void} LoadFunction\r\n * @api\r\n */ /**\r\n * @typedef {Object} ImageObject\r\n * @property {import(\"./extent.js\").Extent} [extent] Extent, if different from the requested one.\r\n * @property {import(\"./resolution.js\").ResolutionLike} [resolution] Resolution, if different from the requested one.\r\n * When x and y resolution are different, use the array type (`[xResolution, yResolution]`).\r\n * @property {number} [pixelRatio] Pixel ratio, if different from the requested one.\r\n * @property {import('./DataTile.js').ImageLike} image Image.\r\n */ /**\r\n * Loader function used for image sources. Receives extent, resolution and pixel ratio as arguments.\r\n * For images that cover any extent and resolution (static images), the loader function should not accept\r\n * any arguments. The function returns an {@link import(\"./DataTile.js\").ImageLike image}, an\r\n * {@link import(\"./Image.js\").ImageObject image object}, or a promise for the same.\r\n * For loaders that generate images, the promise should not resolve until the image is loaded.\r\n * If the returned image does not match the extent, resolution or pixel ratio passed to the loader,\r\n * it has to return an {@link import(\"./Image.js\").ImageObject image object} with the `image` and the\r\n * correct `extent`, `resolution` and `pixelRatio`.\r\n *\r\n * @typedef {function(import(\"./extent.js\").Extent, number, number, (function(HTMLImageElement, string): void)=): import(\"./DataTile.js\").ImageLike|ImageObject|Promise<import(\"./DataTile.js\").ImageLike|ImageObject>} Loader\r\n * @api\r\n */ /**\r\n * Loader function used for image sources. Receives extent, resolution and pixel ratio as arguments.\r\n * The function returns a promise for an  {@link import(\"./Image.js\").ImageObject image object}.\r\n *\r\n * @typedef {function(import(\"./extent.js\").Extent, number, number, (function(HTMLImageElement, string): void)=): Promise<import(\"./DataTile.js\").ImageLike|ImageObject>} ImageObjectPromiseLoader\r\n */ class $b54439be79d4619a$var$ImageWrapper extends (0, $08c28d22c0cb5a39$export$2e2bcd8739ae039) {\n    /**\r\n   * @param {import(\"./extent.js\").Extent} extent Extent.\r\n   * @param {number|Array<number>|undefined} resolution Resolution. If provided as array, x and y\r\n   * resolution will be assumed.\r\n   * @param {number} pixelRatio Pixel ratio.\r\n   * @param {import(\"./ImageState.js\").default|Loader} stateOrLoader State.\r\n   */ constructor(extent, resolution, pixelRatio, stateOrLoader){\n        super();\n        /**\r\n     * @protected\r\n     * @type {import(\"./extent.js\").Extent}\r\n     */ this.extent = extent;\n        /**\r\n     * @private\r\n     * @type {number}\r\n     */ this.pixelRatio_ = pixelRatio;\n        /**\r\n     * @protected\r\n     * @type {number|Array<number>|undefined}\r\n     */ this.resolution = resolution;\n        /**\r\n     * @protected\r\n     * @type {import(\"./ImageState.js\").default}\r\n     */ this.state = typeof stateOrLoader === 'function' ? (0, $7eb75c96a6b6f2c6$export$2e2bcd8739ae039).IDLE : stateOrLoader;\n        /**\r\n     * @private\r\n     * @type {import('./DataTile.js').ImageLike|null}\r\n     */ this.image_ = null;\n        /**\r\n     * @protected\r\n     * @type {Loader|null}\r\n     */ this.loader = typeof stateOrLoader === 'function' ? stateOrLoader : null;\n    }\n    /**\r\n   * @protected\r\n   */ changed() {\n        this.dispatchEvent((0, $294047c5e65f31a3$export$2e2bcd8739ae039).CHANGE);\n    }\n    /**\r\n   * @return {import(\"./extent.js\").Extent} Extent.\r\n   */ getExtent() {\n        return this.extent;\n    }\n    /**\r\n   * @return {import('./DataTile.js').ImageLike} Image.\r\n   */ getImage() {\n        return this.image_;\n    }\n    /**\r\n   * @return {number} PixelRatio.\r\n   */ getPixelRatio() {\n        return this.pixelRatio_;\n    }\n    /**\r\n   * @return {number|Array<number>} Resolution.\r\n   */ getResolution() {\n        return /** @type {number} */ this.resolution;\n    }\n    /**\r\n   * @return {import(\"./ImageState.js\").default} State.\r\n   */ getState() {\n        return this.state;\n    }\n    /**\r\n   * Load not yet loaded URI.\r\n   */ load() {\n        if (this.state == (0, $7eb75c96a6b6f2c6$export$2e2bcd8739ae039).IDLE) {\n            if (this.loader) {\n                this.state = (0, $7eb75c96a6b6f2c6$export$2e2bcd8739ae039).LOADING;\n                this.changed();\n                const resolution = this.getResolution();\n                const requestResolution = Array.isArray(resolution) ? resolution[0] : resolution;\n                (0, $013a1733c226ec50$export$4dbaaf6c79705e6c)(()=>this.loader(this.getExtent(), requestResolution, this.getPixelRatio())).then((image)=>{\n                    if ('image' in image) this.image_ = image.image;\n                    if ('extent' in image) this.extent = image.extent;\n                    if ('resolution' in image) this.resolution = image.resolution;\n                    if ('pixelRatio' in image) this.pixelRatio_ = image.pixelRatio;\n                    if (image instanceof HTMLImageElement || (0, $67c66761d21428d0$export$7478563940788376) && image instanceof ImageBitmap || image instanceof HTMLCanvasElement || image instanceof HTMLVideoElement) this.image_ = image;\n                    this.state = (0, $7eb75c96a6b6f2c6$export$2e2bcd8739ae039).LOADED;\n                }).catch((error)=>{\n                    this.state = (0, $7eb75c96a6b6f2c6$export$2e2bcd8739ae039).ERROR;\n                    console.error(error); // eslint-disable-line no-console\n                }).finally(()=>this.changed());\n            }\n        }\n    }\n    /**\r\n   * @param {import('./DataTile.js').ImageLike} image The image.\r\n   */ setImage(image) {\n        this.image_ = image;\n    }\n    /**\r\n   * @param {number|Array<number>} resolution Resolution.\r\n   */ setResolution(resolution) {\n        this.resolution = resolution;\n    }\n}\nfunction $b54439be79d4619a$export$bc96ecc7c2a50764(image, loadHandler, errorHandler) {\n    const img = /** @type {HTMLImageElement} */ image;\n    let listening = true;\n    let decoding = false;\n    let loaded = false;\n    const listenerKeys = [\n        (0, $d5bf8abd656a3cdc$export$8d2a95bc11b44725)(img, (0, $294047c5e65f31a3$export$2e2bcd8739ae039).LOAD, function() {\n            loaded = true;\n            if (!decoding) loadHandler();\n        })\n    ];\n    if (img.src && (0, $67c66761d21428d0$export$716f8695eedb9bad)) {\n        decoding = true;\n        img.decode().then(function() {\n            if (listening) loadHandler();\n        }).catch(function(error) {\n            if (listening) {\n                if (loaded) loadHandler();\n                else errorHandler();\n            }\n        });\n    } else listenerKeys.push((0, $d5bf8abd656a3cdc$export$8d2a95bc11b44725)(img, (0, $294047c5e65f31a3$export$2e2bcd8739ae039).ERROR, errorHandler));\n    return function unlisten() {\n        listening = false;\n        listenerKeys.forEach((0, $d5bf8abd656a3cdc$export$b0a21c8b3c1c921));\n    };\n}\nfunction $b54439be79d4619a$export$11e63f7b0f3d9900(image, src) {\n    return new Promise((resolve, reject)=>{\n        function handleLoad() {\n            unlisten();\n            resolve(image);\n        }\n        function handleError() {\n            unlisten();\n            reject(new Error('Image load error'));\n        }\n        function unlisten() {\n            image.removeEventListener('load', handleLoad);\n            image.removeEventListener('error', handleError);\n        }\n        image.addEventListener('load', handleLoad);\n        image.addEventListener('error', handleError);\n        if (src) image.src = src;\n    });\n}\nfunction $b54439be79d4619a$export$a9e5af241c1bd389(image, src) {\n    if (src) image.src = src;\n    return image.src && (0, $67c66761d21428d0$export$716f8695eedb9bad) ? new Promise((resolve, reject)=>image.decode().then(()=>resolve(image)).catch((e)=>image.complete && image.width ? resolve(image) : reject(e))) : $b54439be79d4619a$export$11e63f7b0f3d9900(image);\n}\nfunction $b54439be79d4619a$export$2f872c0f2117be69(image, src) {\n    if (src) image.src = src;\n    return image.src && (0, $67c66761d21428d0$export$716f8695eedb9bad) && (0, $67c66761d21428d0$export$7478563940788376) ? image.decode().then(()=>createImageBitmap(image)).catch((e)=>{\n        if (image.complete && image.width) return image;\n        throw e;\n    }) : $b54439be79d4619a$export$a9e5af241c1bd389(image);\n}\nvar $b54439be79d4619a$export$2e2bcd8739ae039 = $b54439be79d4619a$var$ImageWrapper;\n\n\n\n\n\n\n\n/**\r\n * @module ol/style/IconImageCache\r\n */ \n\n\n/**\r\n * @classdesc\r\n * Singleton class. Available through {@link module:ol/style/IconImageCache.shared}.\r\n */ class $f351daabfe6e2d22$var$IconImageCache {\n    constructor(){\n        /**\r\n     * @type {!Object<string, import(\"./IconImage.js\").default>}\r\n     * @private\r\n     */ this.cache_ = {};\n        /**\r\n     * @type {!Object<string, CanvasPattern>}\r\n     * @private\r\n     */ this.patternCache_ = {};\n        /**\r\n     * @type {number}\r\n     * @private\r\n     */ this.cacheSize_ = 0;\n        /**\r\n     * @type {number}\r\n     * @private\r\n     */ this.maxCacheSize_ = 1024;\n    }\n    /**\r\n   * FIXME empty description for jsdoc\r\n   */ clear() {\n        this.cache_ = {};\n        this.patternCache_ = {};\n        this.cacheSize_ = 0;\n    }\n    /**\r\n   * @return {boolean} Can expire cache.\r\n   */ canExpireCache() {\n        return this.cacheSize_ > this.maxCacheSize_;\n    }\n    /**\r\n   * FIXME empty description for jsdoc\r\n   */ expire() {\n        if (this.canExpireCache()) {\n            let i = 0;\n            for(const key in this.cache_){\n                const iconImage = this.cache_[key];\n                if ((i++ & 3) === 0 && !iconImage.hasListener()) {\n                    delete this.cache_[key];\n                    delete this.patternCache_[key];\n                    --this.cacheSize_;\n                }\n            }\n        }\n    }\n    /**\r\n   * @param {string} src Src.\r\n   * @param {?string} crossOrigin Cross origin.\r\n   * @param {import(\"../color.js\").Color|string|null} color Color.\r\n   * @return {import(\"./IconImage.js\").default} Icon image.\r\n   */ get(src, crossOrigin, color) {\n        const key = $f351daabfe6e2d22$export$611736262b635f8d(src, crossOrigin, color);\n        return key in this.cache_ ? this.cache_[key] : null;\n    }\n    /**\r\n   * @param {string} src Src.\r\n   * @param {?string} crossOrigin Cross origin.\r\n   * @param {import(\"../color.js\").Color|string|null} color Color.\r\n   * @return {CanvasPattern} Icon image.\r\n   */ getPattern(src, crossOrigin, color) {\n        const key = $f351daabfe6e2d22$export$611736262b635f8d(src, crossOrigin, color);\n        return key in this.patternCache_ ? this.patternCache_[key] : null;\n    }\n    /**\r\n   * @param {string} src Src.\r\n   * @param {?string} crossOrigin Cross origin.\r\n   * @param {import(\"../color.js\").Color|string|null} color Color.\r\n   * @param {import(\"./IconImage.js\").default|null} iconImage Icon image.\r\n   * @param {boolean} [pattern] Also cache a `'repeat'` pattern with this `iconImage`.\r\n   */ set(src, crossOrigin, color, iconImage, pattern) {\n        const key = $f351daabfe6e2d22$export$611736262b635f8d(src, crossOrigin, color);\n        const update = key in this.cache_;\n        this.cache_[key] = iconImage;\n        if (pattern) {\n            if (iconImage.getImageState() === (0, $7eb75c96a6b6f2c6$export$2e2bcd8739ae039).IDLE) iconImage.load();\n            if (iconImage.getImageState() === (0, $7eb75c96a6b6f2c6$export$2e2bcd8739ae039).LOADING) iconImage.ready().then(()=>{\n                this.patternCache_[key] = (0, $075f937d7366f1a2$export$fcb72ce088a6632c)().createPattern(iconImage.getImage(1), 'repeat');\n            });\n            else this.patternCache_[key] = (0, $075f937d7366f1a2$export$fcb72ce088a6632c)().createPattern(iconImage.getImage(1), 'repeat');\n        }\n        if (!update) ++this.cacheSize_;\n    }\n    /**\r\n   * Set the cache size of the icon cache. Default is `1024`. Change this value when\r\n   * your map uses more than 1024 different icon images and you are not caching icon\r\n   * styles on the application level.\r\n   * @param {number} maxCacheSize Cache max size.\r\n   * @api\r\n   */ setSize(maxCacheSize) {\n        this.maxCacheSize_ = maxCacheSize;\n        this.expire();\n    }\n}\nfunction $f351daabfe6e2d22$export$611736262b635f8d(src, crossOrigin, color) {\n    const colorString = color ? (0, $322346e1ff7894ca$export$75093a47a9fa838d)(color) : 'null';\n    return crossOrigin + ':' + src + ':' + colorString;\n}\nvar $f351daabfe6e2d22$export$2e2bcd8739ae039 = $f351daabfe6e2d22$var$IconImageCache;\nconst $f351daabfe6e2d22$export$747ccdf771a87ab8 = new $f351daabfe6e2d22$var$IconImageCache();\n\n\n/**\r\n * @type {CanvasRenderingContext2D}\r\n */ let $0e5ad1d3b638689e$var$taintedTestContext = null;\nclass $0e5ad1d3b638689e$var$IconImage extends (0, $08c28d22c0cb5a39$export$2e2bcd8739ae039) {\n    /**\r\n   * @param {HTMLImageElement|HTMLCanvasElement|ImageBitmap|null} image Image.\r\n   * @param {string|undefined} src Src.\r\n   * @param {?string} crossOrigin Cross origin.\r\n   * @param {import(\"../ImageState.js\").default|undefined} imageState Image state.\r\n   * @param {import(\"../color.js\").Color|string|null} color Color.\r\n   */ constructor(image, src, crossOrigin, imageState, color){\n        super();\n        /**\r\n     * @private\r\n     * @type {HTMLImageElement|HTMLCanvasElement|ImageBitmap}\r\n     */ this.hitDetectionImage_ = null;\n        /**\r\n     * @private\r\n     * @type {HTMLImageElement|HTMLCanvasElement|ImageBitmap|null}\r\n     */ this.image_ = image;\n        /**\r\n     * @private\r\n     * @type {string|null}\r\n     */ this.crossOrigin_ = crossOrigin;\n        /**\r\n     * @private\r\n     * @type {Object<number, HTMLCanvasElement>}\r\n     */ this.canvas_ = {};\n        /**\r\n     * @private\r\n     * @type {import(\"../color.js\").Color|string|null}\r\n     */ this.color_ = color;\n        /**\r\n     * @private\r\n     * @type {import(\"../ImageState.js\").default}\r\n     */ this.imageState_ = imageState === undefined ? (0, $7eb75c96a6b6f2c6$export$2e2bcd8739ae039).IDLE : imageState;\n        /**\r\n     * @private\r\n     * @type {import(\"../size.js\").Size|null}\r\n     */ this.size_ = image && image.width && image.height ? [\n            image.width,\n            image.height\n        ] : null;\n        /**\r\n     * @private\r\n     * @type {string|undefined}\r\n     */ this.src_ = src;\n        /**\r\n     * @private\r\n     */ this.tainted_;\n        /**\r\n     * @private\r\n     * @type {Promise<void>|null}\r\n     */ this.ready_ = null;\n    }\n    /**\r\n   * @private\r\n   */ initializeImage_() {\n        this.image_ = new Image();\n        if (this.crossOrigin_ !== null) this.image_.crossOrigin = this.crossOrigin_;\n    }\n    /**\r\n   * @private\r\n   * @return {boolean} The image canvas is tainted.\r\n   */ isTainted_() {\n        if (this.tainted_ === undefined && this.imageState_ === (0, $7eb75c96a6b6f2c6$export$2e2bcd8739ae039).LOADED) {\n            if (!$0e5ad1d3b638689e$var$taintedTestContext) $0e5ad1d3b638689e$var$taintedTestContext = (0, $075f937d7366f1a2$export$9e05d10eae75c464)(1, 1, undefined, {\n                willReadFrequently: true\n            });\n            $0e5ad1d3b638689e$var$taintedTestContext.drawImage(this.image_, 0, 0);\n            try {\n                $0e5ad1d3b638689e$var$taintedTestContext.getImageData(0, 0, 1, 1);\n                this.tainted_ = false;\n            } catch  {\n                $0e5ad1d3b638689e$var$taintedTestContext = null;\n                this.tainted_ = true;\n            }\n        }\n        return this.tainted_ === true;\n    }\n    /**\r\n   * @private\r\n   */ dispatchChangeEvent_() {\n        this.dispatchEvent((0, $294047c5e65f31a3$export$2e2bcd8739ae039).CHANGE);\n    }\n    /**\r\n   * @private\r\n   */ handleImageError_() {\n        this.imageState_ = (0, $7eb75c96a6b6f2c6$export$2e2bcd8739ae039).ERROR;\n        this.dispatchChangeEvent_();\n    }\n    /**\r\n   * @private\r\n   */ handleImageLoad_() {\n        this.imageState_ = (0, $7eb75c96a6b6f2c6$export$2e2bcd8739ae039).LOADED;\n        this.size_ = [\n            this.image_.width,\n            this.image_.height\n        ];\n        this.dispatchChangeEvent_();\n    }\n    /**\r\n   * @param {number} pixelRatio Pixel ratio.\r\n   * @return {HTMLImageElement|HTMLCanvasElement|ImageBitmap} Image or Canvas element or image bitmap.\r\n   */ getImage(pixelRatio) {\n        if (!this.image_) this.initializeImage_();\n        this.replaceColor_(pixelRatio);\n        return this.canvas_[pixelRatio] ? this.canvas_[pixelRatio] : this.image_;\n    }\n    /**\r\n   * @param {number} pixelRatio Pixel ratio.\r\n   * @return {number} Image or Canvas element.\r\n   */ getPixelRatio(pixelRatio) {\n        this.replaceColor_(pixelRatio);\n        return this.canvas_[pixelRatio] ? pixelRatio : 1;\n    }\n    /**\r\n   * @return {import(\"../ImageState.js\").default} Image state.\r\n   */ getImageState() {\n        return this.imageState_;\n    }\n    /**\r\n   * @return {HTMLImageElement|HTMLCanvasElement|ImageBitmap} Image element.\r\n   */ getHitDetectionImage() {\n        if (!this.image_) this.initializeImage_();\n        if (!this.hitDetectionImage_) {\n            if (this.isTainted_()) {\n                const width = this.size_[0];\n                const height = this.size_[1];\n                const context = (0, $075f937d7366f1a2$export$9e05d10eae75c464)(width, height);\n                context.fillRect(0, 0, width, height);\n                this.hitDetectionImage_ = context.canvas;\n            } else this.hitDetectionImage_ = this.image_;\n        }\n        return this.hitDetectionImage_;\n    }\n    /**\r\n   * Get the size of the icon (in pixels).\r\n   * @return {import(\"../size.js\").Size} Image size.\r\n   */ getSize() {\n        return this.size_;\n    }\n    /**\r\n   * @return {string|undefined} Image src.\r\n   */ getSrc() {\n        return this.src_;\n    }\n    /**\r\n   * Load not yet loaded URI.\r\n   */ load() {\n        if (this.imageState_ !== (0, $7eb75c96a6b6f2c6$export$2e2bcd8739ae039).IDLE) return;\n        if (!this.image_) this.initializeImage_();\n        this.imageState_ = (0, $7eb75c96a6b6f2c6$export$2e2bcd8739ae039).LOADING;\n        try {\n            if (this.src_ !== undefined) /** @type {HTMLImageElement} */ this.image_.src = this.src_;\n        } catch  {\n            this.handleImageError_();\n        }\n        if (this.image_ instanceof HTMLImageElement) (0, $b54439be79d4619a$export$a9e5af241c1bd389)(this.image_, this.src_).then((image)=>{\n            this.image_ = image;\n            this.handleImageLoad_();\n        }).catch(this.handleImageError_.bind(this));\n    }\n    /**\r\n   * @param {number} pixelRatio Pixel ratio.\r\n   * @private\r\n   */ replaceColor_(pixelRatio) {\n        if (!this.color_ || this.canvas_[pixelRatio] || this.imageState_ !== (0, $7eb75c96a6b6f2c6$export$2e2bcd8739ae039).LOADED) return;\n        const image = this.image_;\n        const ctx = (0, $075f937d7366f1a2$export$9e05d10eae75c464)(Math.ceil(image.width * pixelRatio), Math.ceil(image.height * pixelRatio));\n        const canvas = ctx.canvas;\n        ctx.scale(pixelRatio, pixelRatio);\n        ctx.drawImage(image, 0, 0);\n        ctx.globalCompositeOperation = 'multiply';\n        ctx.fillStyle = (0, $322346e1ff7894ca$export$590567be997858b6)(this.color_);\n        ctx.fillRect(0, 0, canvas.width / pixelRatio, canvas.height / pixelRatio);\n        ctx.globalCompositeOperation = 'destination-in';\n        ctx.drawImage(image, 0, 0);\n        this.canvas_[pixelRatio] = canvas;\n    }\n    /**\r\n   * @return {Promise<void>} Promise that resolves when the image is loaded.\r\n   */ ready() {\n        if (!this.ready_) this.ready_ = new Promise((resolve)=>{\n            if (this.imageState_ === (0, $7eb75c96a6b6f2c6$export$2e2bcd8739ae039).LOADED || this.imageState_ === (0, $7eb75c96a6b6f2c6$export$2e2bcd8739ae039).ERROR) resolve();\n            else {\n                const onChange = ()=>{\n                    if (this.imageState_ === (0, $7eb75c96a6b6f2c6$export$2e2bcd8739ae039).LOADED || this.imageState_ === (0, $7eb75c96a6b6f2c6$export$2e2bcd8739ae039).ERROR) {\n                        this.removeEventListener((0, $294047c5e65f31a3$export$2e2bcd8739ae039).CHANGE, onChange);\n                        resolve();\n                    }\n                };\n                this.addEventListener((0, $294047c5e65f31a3$export$2e2bcd8739ae039).CHANGE, onChange);\n            }\n        });\n        return this.ready_;\n    }\n}\nfunction $0e5ad1d3b638689e$export$3988ae62b71be9a3(image, cacheKey, crossOrigin, imageState, color, pattern) {\n    let iconImage = cacheKey === undefined ? undefined : (0, $f351daabfe6e2d22$export$747ccdf771a87ab8).get(cacheKey, crossOrigin, color);\n    if (!iconImage) {\n        iconImage = new $0e5ad1d3b638689e$var$IconImage(image, image && 'src' in image ? image.src || undefined : cacheKey, crossOrigin, imageState, color);\n        (0, $f351daabfe6e2d22$export$747ccdf771a87ab8).set(cacheKey, crossOrigin, color, iconImage, pattern);\n    }\n    if (pattern && iconImage && !(0, $f351daabfe6e2d22$export$747ccdf771a87ab8).getPattern(cacheKey, crossOrigin, color)) (0, $f351daabfe6e2d22$export$747ccdf771a87ab8).set(cacheKey, crossOrigin, color, iconImage, pattern);\n    return iconImage;\n}\nvar $0e5ad1d3b638689e$export$2e2bcd8739ae039 = $0e5ad1d3b638689e$var$IconImage;\n\n\n\nfunction $e0807f400ec9a0a9$export$dc5b1400ac3a10a8(color) {\n    if (!color) return null;\n    if (Array.isArray(color)) return (0, $322346e1ff7894ca$export$f84e8e69fd4488a5)(color);\n    if (typeof color === 'object' && 'src' in color) return $e0807f400ec9a0a9$var$asCanvasPattern(color);\n    return color;\n}\n/**\r\n * @param {PatternDescriptor} pattern Pattern descriptor.\r\n * @return {CanvasPattern|null} Canvas pattern or null if the pattern referenced in the\r\n * PatternDescriptor was not found in the icon image cache.\r\n */ function $e0807f400ec9a0a9$var$asCanvasPattern(pattern) {\n    if (!pattern.offset || !pattern.size) return (0, $f351daabfe6e2d22$export$747ccdf771a87ab8).getPattern(pattern.src, 'anonymous', pattern.color);\n    const cacheKey = pattern.src + ':' + pattern.offset;\n    const canvasPattern = (0, $f351daabfe6e2d22$export$747ccdf771a87ab8).getPattern(cacheKey, undefined, pattern.color);\n    if (canvasPattern) return canvasPattern;\n    const iconImage = (0, $f351daabfe6e2d22$export$747ccdf771a87ab8).get(pattern.src, 'anonymous', null);\n    if (iconImage.getImageState() !== (0, $7eb75c96a6b6f2c6$export$2e2bcd8739ae039).LOADED) return null;\n    const patternCanvasContext = (0, $075f937d7366f1a2$export$9e05d10eae75c464)(pattern.size[0], pattern.size[1]);\n    patternCanvasContext.drawImage(iconImage.getImage(1), pattern.offset[0], pattern.offset[1], pattern.size[0], pattern.size[1], 0, 0, pattern.size[0], pattern.size[1]);\n    (0, $0e5ad1d3b638689e$export$3988ae62b71be9a3)(patternCanvasContext.canvas, cacheKey, undefined, (0, $7eb75c96a6b6f2c6$export$2e2bcd8739ae039).LOADED, pattern.color, true);\n    return (0, $f351daabfe6e2d22$export$747ccdf771a87ab8).getPattern(cacheKey, undefined, pattern.color);\n}\n\n\n\n/**\r\n * @module ol/render/canvas\r\n */ \n\n\n\n\nconst $d4aabc5c971073f1$export$3847dfea4f8d4dfa = '10px sans-serif';\nconst $d4aabc5c971073f1$export$c495d52ee3fd74b2 = '#000';\nconst $d4aabc5c971073f1$export$17bd0c38d6ae694e = 'round';\nconst $d4aabc5c971073f1$export$e21b4112fdc612fc = [];\nconst $d4aabc5c971073f1$export$e06efc2409049f76 = 0;\nconst $d4aabc5c971073f1$export$365eb9648cf19bd0 = 'round';\nconst $d4aabc5c971073f1$export$80c1c01844597b7b = 10;\nconst $d4aabc5c971073f1$export$1eb2eaecacf2031e = '#000';\nconst $d4aabc5c971073f1$export$94d53b95641b5766 = 'center';\nconst $d4aabc5c971073f1$export$cf2279a1bff62eb = 'middle';\nconst $d4aabc5c971073f1$export$40a9eeef55665a40 = [\n    0,\n    0,\n    0,\n    0\n];\nconst $d4aabc5c971073f1$export$79661f132c62010e = 1;\nconst $d4aabc5c971073f1$export$1d36981fcadac93b = new (0, $b68b3d6e32e3074a$export$2e2bcd8739ae039)();\n/**\r\n * @type {CanvasRenderingContext2D}\r\n */ let $d4aabc5c971073f1$var$measureContext = null;\n/**\r\n * @type {string}\r\n */ let $d4aabc5c971073f1$var$measureFont;\nconst $d4aabc5c971073f1$export$7fdcec604f0b1fa7 = {};\nconst $d4aabc5c971073f1$export$a534074a28fa87ff = function() {\n    const retries = 100;\n    const size = '32px ';\n    const referenceFonts = [\n        'monospace',\n        'serif'\n    ];\n    const len = referenceFonts.length;\n    const text = 'wmytzilWMYTZIL@#/&?$%10\\uF013';\n    let interval, referenceWidth;\n    /**\r\n   * @param {string} fontStyle Css font-style\r\n   * @param {string} fontWeight Css font-weight\r\n   * @param {*} fontFamily Css font-family\r\n   * @return {boolean} Font with style and weight is available\r\n   */ function isAvailable(fontStyle, fontWeight, fontFamily) {\n        let available = true;\n        for(let i = 0; i < len; ++i){\n            const referenceFont = referenceFonts[i];\n            referenceWidth = $d4aabc5c971073f1$export$4ea92329b673abd1(fontStyle + ' ' + fontWeight + ' ' + size + referenceFont, text);\n            if (fontFamily != referenceFont) {\n                const width = $d4aabc5c971073f1$export$4ea92329b673abd1(fontStyle + ' ' + fontWeight + ' ' + size + fontFamily + ',' + referenceFont, text);\n                // If width and referenceWidth are the same, then the fallback was used\n                // instead of the font we wanted, so the font is not available.\n                available = available && width != referenceWidth;\n            }\n        }\n        if (available) return true;\n        return false;\n    }\n    function check() {\n        let done = true;\n        const fonts = $d4aabc5c971073f1$export$1d36981fcadac93b.getKeys();\n        for(let i = 0, ii = fonts.length; i < ii; ++i){\n            const font = fonts[i];\n            if ($d4aabc5c971073f1$export$1d36981fcadac93b.get(font) < retries) {\n                const [style, weight, family] = font.split('\\n');\n                if (isAvailable(style, weight, family)) {\n                    (0, $beaefe87199bb537$export$42ffd38884aecdac)($d4aabc5c971073f1$export$7fdcec604f0b1fa7);\n                    // Make sure that loaded fonts are picked up by Safari\n                    $d4aabc5c971073f1$var$measureContext = null;\n                    $d4aabc5c971073f1$var$measureFont = undefined;\n                    $d4aabc5c971073f1$export$1d36981fcadac93b.set(font, retries);\n                } else {\n                    $d4aabc5c971073f1$export$1d36981fcadac93b.set(font, $d4aabc5c971073f1$export$1d36981fcadac93b.get(font) + 1, true);\n                    done = false;\n                }\n            }\n        }\n        if (done) {\n            clearInterval(interval);\n            interval = undefined;\n        }\n    }\n    return function(fontSpec) {\n        const font = (0, $ce07df6d5d4656f1$export$5abde8a6aec4a131)(fontSpec);\n        if (!font) return;\n        const families = font.families;\n        for(let i = 0, ii = families.length; i < ii; ++i){\n            const family = families[i];\n            const key = font.style + '\\n' + font.weight + '\\n' + family;\n            if ($d4aabc5c971073f1$export$1d36981fcadac93b.get(key) === undefined) {\n                $d4aabc5c971073f1$export$1d36981fcadac93b.set(key, retries, true);\n                if (!isAvailable(font.style, font.weight, family)) {\n                    $d4aabc5c971073f1$export$1d36981fcadac93b.set(key, 0, true);\n                    if (interval === undefined) interval = setInterval(check, 32);\n                }\n            }\n        }\n    };\n}();\nconst $d4aabc5c971073f1$export$4feaf6852ff92513 = function() {\n    /**\r\n   * @type {HTMLDivElement}\r\n   */ let measureElement;\n    return function(fontSpec) {\n        let height = $d4aabc5c971073f1$export$7fdcec604f0b1fa7[fontSpec];\n        if (height == undefined) {\n            if (0, $67c66761d21428d0$export$98fcef3dc9973292) {\n                const font = (0, $ce07df6d5d4656f1$export$5abde8a6aec4a131)(fontSpec);\n                const metrics = $d4aabc5c971073f1$var$measureText(fontSpec, \"\\u017Dg\");\n                const lineHeight = isNaN(Number(font.lineHeight)) ? 1.2 : Number(font.lineHeight);\n                height = lineHeight * (metrics.actualBoundingBoxAscent + metrics.actualBoundingBoxDescent);\n            } else {\n                if (!measureElement) {\n                    measureElement = document.createElement('div');\n                    measureElement.innerHTML = 'M';\n                    measureElement.style.minHeight = '0';\n                    measureElement.style.maxHeight = 'none';\n                    measureElement.style.height = 'auto';\n                    measureElement.style.padding = '0';\n                    measureElement.style.border = 'none';\n                    measureElement.style.position = 'absolute';\n                    measureElement.style.display = 'block';\n                    measureElement.style.left = '-99999px';\n                }\n                measureElement.style.font = fontSpec;\n                document.body.appendChild(measureElement);\n                height = measureElement.offsetHeight;\n                document.body.removeChild(measureElement);\n            }\n            $d4aabc5c971073f1$export$7fdcec604f0b1fa7[fontSpec] = height;\n        }\n        return height;\n    };\n}();\n/**\r\n * @param {string} font Font.\r\n * @param {string} text Text.\r\n * @return {TextMetrics} Text metrics.\r\n */ function $d4aabc5c971073f1$var$measureText(font, text) {\n    if (!$d4aabc5c971073f1$var$measureContext) $d4aabc5c971073f1$var$measureContext = (0, $075f937d7366f1a2$export$9e05d10eae75c464)(1, 1);\n    if (font != $d4aabc5c971073f1$var$measureFont) {\n        $d4aabc5c971073f1$var$measureContext.font = font;\n        $d4aabc5c971073f1$var$measureFont = $d4aabc5c971073f1$var$measureContext.font;\n    }\n    return $d4aabc5c971073f1$var$measureContext.measureText(text);\n}\nfunction $d4aabc5c971073f1$export$4ea92329b673abd1(font, text) {\n    return $d4aabc5c971073f1$var$measureText(font, text).width;\n}\nfunction $d4aabc5c971073f1$export$915c7ba51467308f(font, text, cache) {\n    if (text in cache) return cache[text];\n    const width = text.split('\\n').reduce((prev, curr)=>Math.max(prev, $d4aabc5c971073f1$export$4ea92329b673abd1(font, curr)), 0);\n    cache[text] = width;\n    return width;\n}\nfunction $d4aabc5c971073f1$export$7d7c13020df1e791(baseStyle, chunks) {\n    const widths = [];\n    const heights = [];\n    const lineWidths = [];\n    let width = 0;\n    let lineWidth = 0;\n    let height = 0;\n    let lineHeight = 0;\n    for(let i = 0, ii = chunks.length; i <= ii; i += 2){\n        const text = chunks[i];\n        if (text === '\\n' || i === ii) {\n            width = Math.max(width, lineWidth);\n            lineWidths.push(lineWidth);\n            lineWidth = 0;\n            height += lineHeight;\n            lineHeight = 0;\n            continue;\n        }\n        const font = chunks[i + 1] || baseStyle.font;\n        const currentWidth = $d4aabc5c971073f1$export$4ea92329b673abd1(font, text);\n        widths.push(currentWidth);\n        lineWidth += currentWidth;\n        const currentHeight = $d4aabc5c971073f1$export$4feaf6852ff92513(font);\n        heights.push(currentHeight);\n        lineHeight = Math.max(lineHeight, currentHeight);\n    }\n    return {\n        width: width,\n        height: height,\n        widths: widths,\n        heights: heights,\n        lineWidths: lineWidths\n    };\n}\nfunction $d4aabc5c971073f1$export$8ac4d72be78047e6(context, rotation, offsetX, offsetY) {\n    if (rotation !== 0) {\n        context.translate(offsetX, offsetY);\n        context.rotate(rotation);\n        context.translate(-offsetX, -offsetY);\n    }\n}\nfunction $d4aabc5c971073f1$export$3cb6f3a6e49cc0ee(context, transform, opacity, labelOrImage, originX, originY, w, h, x, y, scale) {\n    context.save();\n    if (opacity !== 1) {\n        if (context.globalAlpha === undefined) context.globalAlpha = (context)=>context.globalAlpha *= opacity;\n        else context.globalAlpha *= opacity;\n    }\n    if (transform) context.transform.apply(context, transform);\n    if (/** @type {*} */ labelOrImage.contextInstructions) {\n        // label\n        context.translate(x, y);\n        context.scale(scale[0], scale[1]);\n        $d4aabc5c971073f1$var$executeLabelInstructions(/** @type {Label} */ labelOrImage, context);\n    } else if (scale[0] < 0 || scale[1] < 0) {\n        // flipped image\n        context.translate(x, y);\n        context.scale(scale[0], scale[1]);\n        context.drawImage(/** @type {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement} */ labelOrImage, originX, originY, w, h, 0, 0, w, h);\n    } else // if image not flipped translate and scale can be avoided\n    context.drawImage(/** @type {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement} */ labelOrImage, originX, originY, w, h, x, y, w * scale[0], h * scale[1]);\n    context.restore();\n}\n/**\r\n * @param {Label} label Label.\r\n * @param {CanvasRenderingContext2D} context Context.\r\n */ function $d4aabc5c971073f1$var$executeLabelInstructions(label, context) {\n    const contextInstructions = label.contextInstructions;\n    for(let i = 0, ii = contextInstructions.length; i < ii; i += 2)if (Array.isArray(contextInstructions[i + 1])) context[contextInstructions[i]].apply(context, contextInstructions[i + 1]);\n    else context[contextInstructions[i]] = contextInstructions[i + 1];\n}\n\n\n\n\n/**\r\n * @module ol/style/Image\r\n */ \n\n/**\r\n * @typedef {Object} Options\r\n * @property {number} opacity Opacity.\r\n * @property {boolean} rotateWithView If the image should get rotated with the view.\r\n * @property {number} rotation Rotation.\r\n * @property {number|import(\"../size.js\").Size} scale Scale.\r\n * @property {Array<number>} displacement Displacement.\r\n * @property {import('../style/Style.js').DeclutterMode} declutterMode Declutter mode: `declutter`, `obstacle`, `none`.\r\n */ /**\r\n * @classdesc\r\n * A base class used for creating subclasses and not instantiated in\r\n * apps. Base class for {@link module:ol/style/Icon~Icon}, {@link module:ol/style/Circle~CircleStyle} and\r\n * {@link module:ol/style/RegularShape~RegularShape}.\r\n * @abstract\r\n * @api\r\n */ class $e60011aea38e6239$var$ImageStyle {\n    /**\r\n   * @param {Options} options Options.\r\n   */ constructor(options){\n        /**\r\n     * @private\r\n     * @type {number}\r\n     */ this.opacity_ = options.opacity;\n        /**\r\n     * @private\r\n     * @type {boolean}\r\n     */ this.rotateWithView_ = options.rotateWithView;\n        /**\r\n     * @private\r\n     * @type {number}\r\n     */ this.rotation_ = options.rotation;\n        /**\r\n     * @private\r\n     * @type {number|import(\"../size.js\").Size}\r\n     */ this.scale_ = options.scale;\n        /**\r\n     * @private\r\n     * @type {import(\"../size.js\").Size}\r\n     */ this.scaleArray_ = (0, $cc435a5409103773$export$a71a825ff42fb8e1)(options.scale);\n        /**\r\n     * @private\r\n     * @type {Array<number>}\r\n     */ this.displacement_ = options.displacement;\n        /**\r\n     * @private\r\n     * @type {import('../style/Style.js').DeclutterMode}\r\n     */ this.declutterMode_ = options.declutterMode;\n    }\n    /**\r\n   * Clones the style.\r\n   * @return {ImageStyle} The cloned style.\r\n   * @api\r\n   */ clone() {\n        const scale = this.getScale();\n        return new $e60011aea38e6239$var$ImageStyle({\n            opacity: this.getOpacity(),\n            scale: Array.isArray(scale) ? scale.slice() : scale,\n            rotation: this.getRotation(),\n            rotateWithView: this.getRotateWithView(),\n            displacement: this.getDisplacement().slice(),\n            declutterMode: this.getDeclutterMode()\n        });\n    }\n    /**\r\n   * Get the symbolizer opacity.\r\n   * @return {number} Opacity.\r\n   * @api\r\n   */ getOpacity() {\n        return this.opacity_;\n    }\n    /**\r\n   * Determine whether the symbolizer rotates with the map.\r\n   * @return {boolean} Rotate with map.\r\n   * @api\r\n   */ getRotateWithView() {\n        return this.rotateWithView_;\n    }\n    /**\r\n   * Get the symoblizer rotation.\r\n   * @return {number} Rotation.\r\n   * @api\r\n   */ getRotation() {\n        return this.rotation_;\n    }\n    /**\r\n   * Get the symbolizer scale.\r\n   * @return {number|import(\"../size.js\").Size} Scale.\r\n   * @api\r\n   */ getScale() {\n        return this.scale_;\n    }\n    /**\r\n   * Get the symbolizer scale array.\r\n   * @return {import(\"../size.js\").Size} Scale array.\r\n   */ getScaleArray() {\n        return this.scaleArray_;\n    }\n    /**\r\n   * Get the displacement of the shape\r\n   * @return {Array<number>} Shape's center displacement\r\n   * @api\r\n   */ getDisplacement() {\n        return this.displacement_;\n    }\n    /**\r\n   * Get the declutter mode of the shape\r\n   * @return {import(\"./Style.js\").DeclutterMode} Shape's declutter mode\r\n   * @api\r\n   */ getDeclutterMode() {\n        return this.declutterMode_;\n    }\n    /**\r\n   * Get the anchor point in pixels. The anchor determines the center point for the\r\n   * symbolizer.\r\n   * @abstract\r\n   * @return {Array<number>} Anchor.\r\n   */ getAnchor() {\n        return (0, $6c5e11070e371322$export$817eb92a8194bab0)();\n    }\n    /**\r\n   * Get the image element for the symbolizer.\r\n   * @abstract\r\n   * @param {number} pixelRatio Pixel ratio.\r\n   * @return {import('../DataTile.js').ImageLike} Image element.\r\n   */ getImage(pixelRatio) {\n        return (0, $6c5e11070e371322$export$817eb92a8194bab0)();\n    }\n    /**\r\n   * @abstract\r\n   * @return {import('../DataTile.js').ImageLike} Image element.\r\n   */ getHitDetectionImage() {\n        return (0, $6c5e11070e371322$export$817eb92a8194bab0)();\n    }\n    /**\r\n   * Get the image pixel ratio.\r\n   * @param {number} pixelRatio Pixel ratio.\r\n   * @return {number} Pixel ratio.\r\n   */ getPixelRatio(pixelRatio) {\n        return 1;\n    }\n    /**\r\n   * @abstract\r\n   * @return {import(\"../ImageState.js\").default} Image state.\r\n   */ getImageState() {\n        return (0, $6c5e11070e371322$export$817eb92a8194bab0)();\n    }\n    /**\r\n   * @abstract\r\n   * @return {import(\"../size.js\").Size} Image size.\r\n   */ getImageSize() {\n        return (0, $6c5e11070e371322$export$817eb92a8194bab0)();\n    }\n    /**\r\n   * Get the origin of the symbolizer.\r\n   * @abstract\r\n   * @return {Array<number>} Origin.\r\n   */ getOrigin() {\n        return (0, $6c5e11070e371322$export$817eb92a8194bab0)();\n    }\n    /**\r\n   * Get the size of the symbolizer (in pixels).\r\n   * @abstract\r\n   * @return {import(\"../size.js\").Size} Size.\r\n   */ getSize() {\n        return (0, $6c5e11070e371322$export$817eb92a8194bab0)();\n    }\n    /**\r\n   * Set the displacement.\r\n   *\r\n   * @param {Array<number>} displacement Displacement.\r\n   * @api\r\n   */ setDisplacement(displacement) {\n        this.displacement_ = displacement;\n    }\n    /**\r\n   * Set the opacity.\r\n   *\r\n   * @param {number} opacity Opacity.\r\n   * @api\r\n   */ setOpacity(opacity) {\n        this.opacity_ = opacity;\n    }\n    /**\r\n   * Set whether to rotate the style with the view.\r\n   *\r\n   * @param {boolean} rotateWithView Rotate with map.\r\n   * @api\r\n   */ setRotateWithView(rotateWithView) {\n        this.rotateWithView_ = rotateWithView;\n    }\n    /**\r\n   * Set the rotation.\r\n   *\r\n   * @param {number} rotation Rotation.\r\n   * @api\r\n   */ setRotation(rotation) {\n        this.rotation_ = rotation;\n    }\n    /**\r\n   * Set the scale.\r\n   *\r\n   * @param {number|import(\"../size.js\").Size} scale Scale.\r\n   * @api\r\n   */ setScale(scale) {\n        this.scale_ = scale;\n        this.scaleArray_ = (0, $cc435a5409103773$export$a71a825ff42fb8e1)(scale);\n    }\n    /**\r\n   * @abstract\r\n   * @param {function(import(\"../events/Event.js\").default): void} listener Listener function.\r\n   */ listenImageChange(listener) {\n        (0, $6c5e11070e371322$export$817eb92a8194bab0)();\n    }\n    /**\r\n   * Load not yet loaded URI.\r\n   * @abstract\r\n   */ load() {\n        (0, $6c5e11070e371322$export$817eb92a8194bab0)();\n    }\n    /**\r\n   * @abstract\r\n   * @param {function(import(\"../events/Event.js\").default): void} listener Listener function.\r\n   */ unlistenImageChange(listener) {\n        (0, $6c5e11070e371322$export$817eb92a8194bab0)();\n    }\n    /**\r\n   * @return {Promise<void>} `false` or Promise that resolves when the style is ready to use.\r\n   */ ready() {\n        return Promise.resolve();\n    }\n}\nvar $e60011aea38e6239$export$2e2bcd8739ae039 = $e60011aea38e6239$var$ImageStyle;\n\n\n/**\r\n * Specify radius for regular polygons, or both radius and radius2 for stars.\r\n * @typedef {Object} Options\r\n * @property {import(\"./Fill.js\").default} [fill] Fill style.\r\n * @property {number} points Number of points for stars and regular polygons. In case of a polygon, the number of points\r\n * is the number of sides.\r\n * @property {number} radius Radius of a regular polygon.\r\n * @property {number} [radius2] Second radius to make a star instead of a regular polygon.\r\n * @property {number} [angle=0] Shape's angle in radians. A value of 0 will have one of the shape's points facing up.\r\n * @property {Array<number>} [displacement=[0, 0]] Displacement of the shape in pixels.\r\n * Positive values will shift the shape right and up.\r\n * @property {import(\"./Stroke.js\").default} [stroke] Stroke style.\r\n * @property {number} [rotation=0] Rotation in radians (positive rotation clockwise).\r\n * @property {boolean} [rotateWithView=false] Whether to rotate the shape with the view.\r\n * @property {number|import(\"../size.js\").Size} [scale=1] Scale. Unless two dimensional scaling is required a better\r\n * result may be obtained with appropriate settings for `radius` and `radius2`.\r\n * @property {import('./Style.js').DeclutterMode} [declutterMode] Declutter mode.\r\n */ /**\r\n * @typedef {Object} RenderOptions\r\n * @property {import(\"../colorlike.js\").ColorLike|undefined} strokeStyle StrokeStyle.\r\n * @property {number} strokeWidth StrokeWidth.\r\n * @property {number} size Size.\r\n * @property {CanvasLineCap} lineCap LineCap.\r\n * @property {Array<number>|null} lineDash LineDash.\r\n * @property {number} lineDashOffset LineDashOffset.\r\n * @property {CanvasLineJoin} lineJoin LineJoin.\r\n * @property {number} miterLimit MiterLimit.\r\n */ /**\r\n * @classdesc\r\n * Set regular shape style for vector features. The resulting shape will be\r\n * a regular polygon when `radius` is provided, or a star when both `radius` and\r\n * `radius2` are provided.\r\n * @api\r\n */ class $3e99c452138b2224$var$RegularShape extends (0, $e60011aea38e6239$export$2e2bcd8739ae039) {\n    /**\r\n   * @param {Options} options Options.\r\n   */ constructor(options){\n        super({\n            opacity: 1,\n            rotateWithView: options.rotateWithView !== undefined ? options.rotateWithView : false,\n            rotation: options.rotation !== undefined ? options.rotation : 0,\n            scale: options.scale !== undefined ? options.scale : 1,\n            displacement: options.displacement !== undefined ? options.displacement : [\n                0,\n                0\n            ],\n            declutterMode: options.declutterMode\n        });\n        /**\r\n     * @private\r\n     * @type {HTMLCanvasElement|null}\r\n     */ this.hitDetectionCanvas_ = null;\n        /**\r\n     * @private\r\n     * @type {import(\"./Fill.js\").default|null}\r\n     */ this.fill_ = options.fill !== undefined ? options.fill : null;\n        /**\r\n     * @private\r\n     * @type {Array<number>}\r\n     */ this.origin_ = [\n            0,\n            0\n        ];\n        /**\r\n     * @private\r\n     * @type {number}\r\n     */ this.points_ = options.points;\n        /**\r\n     * @protected\r\n     * @type {number}\r\n     */ this.radius = options.radius;\n        /**\r\n     * @private\r\n     * @type {number|undefined}\r\n     */ this.radius2_ = options.radius2;\n        /**\r\n     * @private\r\n     * @type {number}\r\n     */ this.angle_ = options.angle !== undefined ? options.angle : 0;\n        /**\r\n     * @private\r\n     * @type {import(\"./Stroke.js\").default|null}\r\n     */ this.stroke_ = options.stroke !== undefined ? options.stroke : null;\n        /**\r\n     * @private\r\n     * @type {import(\"../size.js\").Size}\r\n     */ this.size_;\n        /**\r\n     * @private\r\n     * @type {RenderOptions}\r\n     */ this.renderOptions_;\n        /**\r\n     * @private\r\n     */ this.imageState_ = this.fill_ && this.fill_.loading() ? (0, $7eb75c96a6b6f2c6$export$2e2bcd8739ae039).LOADING : (0, $7eb75c96a6b6f2c6$export$2e2bcd8739ae039).LOADED;\n        if (this.imageState_ === (0, $7eb75c96a6b6f2c6$export$2e2bcd8739ae039).LOADING) this.ready().then(()=>this.imageState_ = (0, $7eb75c96a6b6f2c6$export$2e2bcd8739ae039).LOADED);\n        this.render();\n    }\n    /**\r\n   * Clones the style.\r\n   * @return {RegularShape} The cloned style.\r\n   * @api\r\n   * @override\r\n   */ clone() {\n        const scale = this.getScale();\n        const style = new $3e99c452138b2224$var$RegularShape({\n            fill: this.getFill() ? this.getFill().clone() : undefined,\n            points: this.getPoints(),\n            radius: this.getRadius(),\n            radius2: this.getRadius2(),\n            angle: this.getAngle(),\n            stroke: this.getStroke() ? this.getStroke().clone() : undefined,\n            rotation: this.getRotation(),\n            rotateWithView: this.getRotateWithView(),\n            scale: Array.isArray(scale) ? scale.slice() : scale,\n            displacement: this.getDisplacement().slice(),\n            declutterMode: this.getDeclutterMode()\n        });\n        style.setOpacity(this.getOpacity());\n        return style;\n    }\n    /**\r\n   * Get the anchor point in pixels. The anchor determines the center point for the\r\n   * symbolizer.\r\n   * @return {Array<number>} Anchor.\r\n   * @api\r\n   * @override\r\n   */ getAnchor() {\n        const size = this.size_;\n        const displacement = this.getDisplacement();\n        const scale = this.getScaleArray();\n        // anchor is scaled by renderer but displacement should not be scaled\n        // so divide by scale here\n        return [\n            size[0] / 2 - displacement[0] / scale[0],\n            size[1] / 2 + displacement[1] / scale[1]\n        ];\n    }\n    /**\r\n   * Get the angle used in generating the shape.\r\n   * @return {number} Shape's rotation in radians.\r\n   * @api\r\n   */ getAngle() {\n        return this.angle_;\n    }\n    /**\r\n   * Get the fill style for the shape.\r\n   * @return {import(\"./Fill.js\").default|null} Fill style.\r\n   * @api\r\n   */ getFill() {\n        return this.fill_;\n    }\n    /**\r\n   * Set the fill style.\r\n   * @param {import(\"./Fill.js\").default|null} fill Fill style.\r\n   * @api\r\n   */ setFill(fill) {\n        this.fill_ = fill;\n        this.render();\n    }\n    /**\r\n   * @return {HTMLCanvasElement} Image element.\r\n   * @override\r\n   */ getHitDetectionImage() {\n        if (!this.hitDetectionCanvas_) this.hitDetectionCanvas_ = this.createHitDetectionCanvas_(this.renderOptions_);\n        return this.hitDetectionCanvas_;\n    }\n    /**\r\n   * Get the image icon.\r\n   * @param {number} pixelRatio Pixel ratio.\r\n   * @return {HTMLCanvasElement} Image or Canvas element.\r\n   * @api\r\n   * @override\r\n   */ getImage(pixelRatio) {\n        const fillKey = this.fill_?.getKey();\n        const cacheKey = `${pixelRatio},${this.angle_},${this.radius},${this.radius2_},${this.points_},${fillKey}` + Object.values(this.renderOptions_).join(',');\n        let image = /** @type {HTMLCanvasElement} */ (0, $f351daabfe6e2d22$export$747ccdf771a87ab8).get(cacheKey, null, null)?.getImage(1);\n        if (!image) {\n            const renderOptions = this.renderOptions_;\n            const size = Math.ceil(renderOptions.size * pixelRatio);\n            const context = (0, $075f937d7366f1a2$export$9e05d10eae75c464)(size, size);\n            this.draw_(renderOptions, context, pixelRatio);\n            image = context.canvas;\n            (0, $f351daabfe6e2d22$export$747ccdf771a87ab8).set(cacheKey, null, null, new (0, $0e5ad1d3b638689e$export$2e2bcd8739ae039)(image, undefined, null, (0, $7eb75c96a6b6f2c6$export$2e2bcd8739ae039).LOADED, null));\n        }\n        return image;\n    }\n    /**\r\n   * Get the image pixel ratio.\r\n   * @param {number} pixelRatio Pixel ratio.\r\n   * @return {number} Pixel ratio.\r\n   * @override\r\n   */ getPixelRatio(pixelRatio) {\n        return pixelRatio;\n    }\n    /**\r\n   * @return {import(\"../size.js\").Size} Image size.\r\n   * @override\r\n   */ getImageSize() {\n        return this.size_;\n    }\n    /**\r\n   * @return {import(\"../ImageState.js\").default} Image state.\r\n   * @override\r\n   */ getImageState() {\n        return this.imageState_;\n    }\n    /**\r\n   * Get the origin of the symbolizer.\r\n   * @return {Array<number>} Origin.\r\n   * @api\r\n   * @override\r\n   */ getOrigin() {\n        return this.origin_;\n    }\n    /**\r\n   * Get the number of points for generating the shape.\r\n   * @return {number} Number of points for stars and regular polygons.\r\n   * @api\r\n   */ getPoints() {\n        return this.points_;\n    }\n    /**\r\n   * Get the (primary) radius for the shape.\r\n   * @return {number} Radius.\r\n   * @api\r\n   */ getRadius() {\n        return this.radius;\n    }\n    /**\r\n   * Get the secondary radius for the shape.\r\n   * @return {number|undefined} Radius2.\r\n   * @api\r\n   */ getRadius2() {\n        return this.radius2_;\n    }\n    /**\r\n   * Get the size of the symbolizer (in pixels).\r\n   * @return {import(\"../size.js\").Size} Size.\r\n   * @api\r\n   * @override\r\n   */ getSize() {\n        return this.size_;\n    }\n    /**\r\n   * Get the stroke style for the shape.\r\n   * @return {import(\"./Stroke.js\").default|null} Stroke style.\r\n   * @api\r\n   */ getStroke() {\n        return this.stroke_;\n    }\n    /**\r\n   * Set the stroke style.\r\n   * @param {import(\"./Stroke.js\").default|null} stroke Stroke style.\r\n   * @api\r\n   */ setStroke(stroke) {\n        this.stroke_ = stroke;\n        this.render();\n    }\n    /**\r\n   * @param {function(import(\"../events/Event.js\").default): void} listener Listener function.\r\n   * @override\r\n   */ listenImageChange(listener) {}\n    /**\r\n   * Load not yet loaded URI.\r\n   * @override\r\n   */ load() {}\n    /**\r\n   * @param {function(import(\"../events/Event.js\").default): void} listener Listener function.\r\n   * @override\r\n   */ unlistenImageChange(listener) {}\n    /**\r\n   * Calculate additional canvas size needed for the miter.\r\n   * @param {string} lineJoin Line join\r\n   * @param {number} strokeWidth Stroke width\r\n   * @param {number} miterLimit Miter limit\r\n   * @return {number} Additional canvas size needed\r\n   * @private\r\n   */ calculateLineJoinSize_(lineJoin, strokeWidth, miterLimit) {\n        if (strokeWidth === 0 || this.points_ === Infinity || lineJoin !== 'bevel' && lineJoin !== 'miter') return strokeWidth;\n        // m  | ^\n        // i  | |\\                  .\n        // t >|  #\\\n        // e  | |\\ \\              .\n        // r      \\s\\\n        //      |  \\t\\          .                 .\n        //          \\r\\                      .   .\n        //      |    \\o\\      .          .  . . .\n        //          e \\k\\            .  .    . .\n        //      |      \\e\\  .    .  .       . .\n        //       d      \\ \\  .  .          . .\n        //      | _ _a_ _\\#  .            . .\n        //   r1          / `             . .\n        //      |                       . .\n        //       b     /               . .\n        //      |                     . .\n        //           / r2            . .\n        //      |                        .   .\n        //         /                           .   .\n        //      |α                                   .   .\n        //       /                                         .   .\n        //      ° center\n        let r1 = this.radius;\n        let r2 = this.radius2_ === undefined ? r1 : this.radius2_;\n        if (r1 < r2) {\n            const tmp = r1;\n            r1 = r2;\n            r2 = tmp;\n        }\n        const points = this.radius2_ === undefined ? this.points_ : this.points_ * 2;\n        const alpha = 2 * Math.PI / points;\n        const a = r2 * Math.sin(alpha);\n        const b = Math.sqrt(r2 * r2 - a * a);\n        const d = r1 - b;\n        const e = Math.sqrt(a * a + d * d);\n        const miterRatio = e / a;\n        if (lineJoin === 'miter' && miterRatio <= miterLimit) return miterRatio * strokeWidth;\n        // Calculate the distance from center to the stroke corner where\n        // it was cut short because of the miter limit.\n        //              l\n        //        ----+---- <= distance from center to here is maxr\n        //       /####|k ##\\\n        //      /#####^#####\\\n        //     /#### /+\\# s #\\\n        //    /### h/+++\\# t #\\\n        //   /### t/+++++\\# r #\\\n        //  /### a/+++++++\\# o #\\\n        // /### p/++ fill +\\# k #\\\n        ///#### /+++++^+++++\\# e #\\\n        //#####/+++++/+\\+++++\\#####\\\n        const k = strokeWidth / 2 / miterRatio;\n        const l = strokeWidth / 2 * (d / e);\n        const maxr = Math.sqrt((r1 + k) * (r1 + k) + l * l);\n        const bevelAdd = maxr - r1;\n        if (this.radius2_ === undefined || lineJoin === 'bevel') return bevelAdd * 2;\n        // If outer miter is over the miter limit the inner miter may reach through the\n        // center and be longer than the bevel, same calculation as above but swap r1 / r2.\n        const aa = r1 * Math.sin(alpha);\n        const bb = Math.sqrt(r1 * r1 - aa * aa);\n        const dd = r2 - bb;\n        const ee = Math.sqrt(aa * aa + dd * dd);\n        const innerMiterRatio = ee / aa;\n        if (innerMiterRatio <= miterLimit) {\n            const innerLength = innerMiterRatio * strokeWidth / 2 - r2 - r1;\n            return 2 * Math.max(bevelAdd, innerLength);\n        }\n        return bevelAdd * 2;\n    }\n    /**\r\n   * @return {RenderOptions}  The render options\r\n   * @protected\r\n   */ createRenderOptions() {\n        let lineCap = (0, $d4aabc5c971073f1$export$17bd0c38d6ae694e);\n        let lineJoin = (0, $d4aabc5c971073f1$export$365eb9648cf19bd0);\n        let miterLimit = 0;\n        let lineDash = null;\n        let lineDashOffset = 0;\n        let strokeStyle;\n        let strokeWidth = 0;\n        if (this.stroke_) {\n            strokeStyle = (0, $e0807f400ec9a0a9$export$dc5b1400ac3a10a8)(this.stroke_.getColor() ?? (0, $d4aabc5c971073f1$export$1eb2eaecacf2031e));\n            strokeWidth = this.stroke_.getWidth() ?? (0, $d4aabc5c971073f1$export$79661f132c62010e);\n            lineDash = this.stroke_.getLineDash();\n            lineDashOffset = this.stroke_.getLineDashOffset() ?? 0;\n            lineJoin = this.stroke_.getLineJoin() ?? (0, $d4aabc5c971073f1$export$365eb9648cf19bd0);\n            lineCap = this.stroke_.getLineCap() ?? (0, $d4aabc5c971073f1$export$17bd0c38d6ae694e);\n            miterLimit = this.stroke_.getMiterLimit() ?? (0, $d4aabc5c971073f1$export$80c1c01844597b7b);\n        }\n        const add = this.calculateLineJoinSize_(lineJoin, strokeWidth, miterLimit);\n        const maxRadius = Math.max(this.radius, this.radius2_ || 0);\n        const size = Math.ceil(2 * maxRadius + add);\n        return {\n            strokeStyle: strokeStyle,\n            strokeWidth: strokeWidth,\n            size: size,\n            lineCap: lineCap,\n            lineDash: lineDash,\n            lineDashOffset: lineDashOffset,\n            lineJoin: lineJoin,\n            miterLimit: miterLimit\n        };\n    }\n    /**\r\n   * @protected\r\n   */ render() {\n        this.renderOptions_ = this.createRenderOptions();\n        const size = this.renderOptions_.size;\n        this.hitDetectionCanvas_ = null;\n        this.size_ = [\n            size,\n            size\n        ];\n    }\n    /**\r\n   * @private\r\n   * @param {RenderOptions} renderOptions Render options.\r\n   * @param {CanvasRenderingContext2D} context The rendering context.\r\n   * @param {number} pixelRatio The pixel ratio.\r\n   */ draw_(renderOptions, context, pixelRatio) {\n        context.scale(pixelRatio, pixelRatio);\n        // set origin to canvas center\n        context.translate(renderOptions.size / 2, renderOptions.size / 2);\n        this.createPath_(context);\n        if (this.fill_) {\n            let color = this.fill_.getColor();\n            if (color === null) color = (0, $d4aabc5c971073f1$export$c495d52ee3fd74b2);\n            context.fillStyle = (0, $e0807f400ec9a0a9$export$dc5b1400ac3a10a8)(color);\n            context.fill();\n        }\n        if (renderOptions.strokeStyle) {\n            context.strokeStyle = renderOptions.strokeStyle;\n            context.lineWidth = renderOptions.strokeWidth;\n            if (renderOptions.lineDash) {\n                context.setLineDash(renderOptions.lineDash);\n                context.lineDashOffset = renderOptions.lineDashOffset;\n            }\n            context.lineCap = renderOptions.lineCap;\n            context.lineJoin = renderOptions.lineJoin;\n            context.miterLimit = renderOptions.miterLimit;\n            context.stroke();\n        }\n    }\n    /**\r\n   * @private\r\n   * @param {RenderOptions} renderOptions Render options.\r\n   * @return {HTMLCanvasElement} Canvas containing the icon\r\n   */ createHitDetectionCanvas_(renderOptions) {\n        let context;\n        if (this.fill_) {\n            let color = this.fill_.getColor();\n            // determine if fill is transparent (or pattern or gradient)\n            let opacity = 0;\n            if (typeof color === 'string') color = (0, $322346e1ff7894ca$export$75093a47a9fa838d)(color);\n            if (color === null) opacity = 1;\n            else if (Array.isArray(color)) opacity = color.length === 4 ? color[3] : 1;\n            if (opacity === 0) {\n                // if a transparent fill style is set, create an extra hit-detection image\n                // with a default fill style\n                context = (0, $075f937d7366f1a2$export$9e05d10eae75c464)(renderOptions.size, renderOptions.size);\n                this.drawHitDetectionCanvas_(renderOptions, context);\n            }\n        }\n        return context ? context.canvas : this.getImage(1);\n    }\n    /**\r\n   * @private\r\n   * @param {CanvasRenderingContext2D} context The context to draw in.\r\n   */ createPath_(context) {\n        let points = this.points_;\n        const radius = this.radius;\n        if (points === Infinity) context.arc(0, 0, radius, 0, 2 * Math.PI);\n        else {\n            const radius2 = this.radius2_ === undefined ? radius : this.radius2_;\n            if (this.radius2_ !== undefined) points *= 2;\n            const startAngle = this.angle_ - Math.PI / 2;\n            const step = 2 * Math.PI / points;\n            for(let i = 0; i < points; i++){\n                const angle0 = startAngle + i * step;\n                const radiusC = i % 2 === 0 ? radius : radius2;\n                context.lineTo(radiusC * Math.cos(angle0), radiusC * Math.sin(angle0));\n            }\n            context.closePath();\n        }\n    }\n    /**\r\n   * @private\r\n   * @param {RenderOptions} renderOptions Render options.\r\n   * @param {CanvasRenderingContext2D} context The context.\r\n   */ drawHitDetectionCanvas_(renderOptions, context) {\n        // set origin to canvas center\n        context.translate(renderOptions.size / 2, renderOptions.size / 2);\n        this.createPath_(context);\n        context.fillStyle = (0, $d4aabc5c971073f1$export$c495d52ee3fd74b2);\n        context.fill();\n        if (renderOptions.strokeStyle) {\n            context.strokeStyle = renderOptions.strokeStyle;\n            context.lineWidth = renderOptions.strokeWidth;\n            if (renderOptions.lineDash) {\n                context.setLineDash(renderOptions.lineDash);\n                context.lineDashOffset = renderOptions.lineDashOffset;\n            }\n            context.lineJoin = renderOptions.lineJoin;\n            context.miterLimit = renderOptions.miterLimit;\n            context.stroke();\n        }\n    }\n    /**\r\n   * @override\r\n   */ ready() {\n        return this.fill_ ? this.fill_.ready() : Promise.resolve();\n    }\n}\nvar $3e99c452138b2224$export$2e2bcd8739ae039 = $3e99c452138b2224$var$RegularShape;\n\n\n/**\r\n * @typedef {Object} Options\r\n * @property {import(\"./Fill.js\").default} [fill] Fill style.\r\n * @property {number} radius Circle radius.\r\n * @property {import(\"./Stroke.js\").default} [stroke] Stroke style.\r\n * @property {Array<number>} [displacement=[0,0]] displacement\r\n * @property {number|import(\"../size.js\").Size} [scale=1] Scale. A two dimensional scale will produce an ellipse.\r\n * Unless two dimensional scaling is required a better result may be obtained with an appropriate setting for `radius`.\r\n * @property {number} [rotation=0] Rotation in radians\r\n * (positive rotation clockwise, meaningful only when used in conjunction with a two dimensional scale).\r\n * @property {boolean} [rotateWithView=false] Whether to rotate the shape with the view\r\n * (meaningful only when used in conjunction with a two dimensional scale).\r\n * @property {import('./Style.js').DeclutterMode} [declutterMode] Declutter mode\r\n */ /**\r\n * @classdesc\r\n * Set circle style for vector features.\r\n * @api\r\n */ class $06150d8570b7481b$var$CircleStyle extends (0, $3e99c452138b2224$export$2e2bcd8739ae039) {\n    /**\r\n   * @param {Options} [options] Options.\r\n   */ constructor(options){\n        options = options ? options : {\n            radius: 5\n        };\n        super({\n            points: Infinity,\n            fill: options.fill,\n            radius: options.radius,\n            stroke: options.stroke,\n            scale: options.scale !== undefined ? options.scale : 1,\n            rotation: options.rotation !== undefined ? options.rotation : 0,\n            rotateWithView: options.rotateWithView !== undefined ? options.rotateWithView : false,\n            displacement: options.displacement !== undefined ? options.displacement : [\n                0,\n                0\n            ],\n            declutterMode: options.declutterMode\n        });\n    }\n    /**\r\n   * Clones the style.\r\n   * @return {CircleStyle} The cloned style.\r\n   * @api\r\n   * @override\r\n   */ clone() {\n        const scale = this.getScale();\n        const style = new $06150d8570b7481b$var$CircleStyle({\n            fill: this.getFill() ? this.getFill().clone() : undefined,\n            stroke: this.getStroke() ? this.getStroke().clone() : undefined,\n            radius: this.getRadius(),\n            scale: Array.isArray(scale) ? scale.slice() : scale,\n            rotation: this.getRotation(),\n            rotateWithView: this.getRotateWithView(),\n            displacement: this.getDisplacement().slice(),\n            declutterMode: this.getDeclutterMode()\n        });\n        style.setOpacity(this.getOpacity());\n        return style;\n    }\n    /**\r\n   * Set the circle radius.\r\n   *\r\n   * @param {number} radius Circle radius.\r\n   * @api\r\n   */ setRadius(radius) {\n        this.radius = radius;\n        this.render();\n    }\n}\nvar $06150d8570b7481b$export$2e2bcd8739ae039 = $06150d8570b7481b$var$CircleStyle;\n\n\n/**\r\n * @module ol/style/Fill\r\n */ \n\n\n\n/**\r\n * @typedef {Object} Options\r\n * @property {import(\"../color.js\").Color|import(\"../colorlike.js\").ColorLike|import('../colorlike.js').PatternDescriptor|null} [color=null] A color,\r\n * gradient or pattern.\r\n * See {@link module:ol/color~Color} and {@link module:ol/colorlike~ColorLike} for possible formats. For polygon fills (not for {@link import(\"./RegularShape.js\").default} fills),\r\n * a pattern can also be provided as {@link module:ol/colorlike~PatternDescriptor}.\r\n * Default null; if null, the Canvas/renderer default black will be used.\r\n */ /**\r\n * @classdesc\r\n * Set fill style for vector features.\r\n * @api\r\n */ class $d61d1dcaf3c44610$var$Fill {\n    /**\r\n   * @param {Options} [options] Options.\r\n   */ constructor(options){\n        options = options || {};\n        /**\r\n     * @private\r\n     * @type {import(\"./IconImage.js\").default|null}\r\n     */ this.patternImage_ = null;\n        /**\r\n     * @private\r\n     * @type {import(\"../color.js\").Color|import(\"../colorlike.js\").ColorLike|import('../colorlike.js').PatternDescriptor|null}\r\n     */ this.color_ = null;\n        if (options.color !== undefined) this.setColor(options.color);\n    }\n    /**\r\n   * Clones the style. The color is not cloned if it is a {@link module:ol/colorlike~ColorLike}.\r\n   * @return {Fill} The cloned style.\r\n   * @api\r\n   */ clone() {\n        const color = this.getColor();\n        return new $d61d1dcaf3c44610$var$Fill({\n            color: Array.isArray(color) ? color.slice() : color || undefined\n        });\n    }\n    /**\r\n   * Get the fill color.\r\n   * @return {import(\"../color.js\").Color|import(\"../colorlike.js\").ColorLike|import('../colorlike.js').PatternDescriptor|null} Color.\r\n   * @api\r\n   */ getColor() {\n        return this.color_;\n    }\n    /**\r\n   * Set the color.\r\n   *\r\n   * @param {import(\"../color.js\").Color|import(\"../colorlike.js\").ColorLike|import('../colorlike.js').PatternDescriptor|null} color Color.\r\n   * @api\r\n   */ setColor(color) {\n        if (color !== null && typeof color === 'object' && 'src' in color) {\n            const patternImage = (0, $0e5ad1d3b638689e$export$3988ae62b71be9a3)(null, color.src, 'anonymous', undefined, color.offset ? null : color.color ? color.color : null, !(color.offset && color.size));\n            patternImage.ready().then(()=>{\n                this.patternImage_ = null;\n            });\n            if (patternImage.getImageState() === (0, $7eb75c96a6b6f2c6$export$2e2bcd8739ae039).IDLE) patternImage.load();\n            if (patternImage.getImageState() === (0, $7eb75c96a6b6f2c6$export$2e2bcd8739ae039).LOADING) this.patternImage_ = patternImage;\n        }\n        this.color_ = color;\n    }\n    /**\r\n   * @return {string} Key of the fill for cache lookup.\r\n   */ getKey() {\n        const fill = this.getColor();\n        if (!fill) return '';\n        return fill instanceof CanvasPattern || fill instanceof CanvasGradient ? (0, $6c5e11070e371322$export$5e82334337e0f204)(fill) : typeof fill === 'object' && 'src' in fill ? fill.src + ':' + fill.offset : (0, $322346e1ff7894ca$export$75093a47a9fa838d)(fill).toString();\n    }\n    /**\r\n   * @return {boolean} The fill style is loading an image pattern.\r\n   */ loading() {\n        return !!this.patternImage_;\n    }\n    /**\r\n   * @return {Promise<void>} `false` or a promise that resolves when the style is ready to use.\r\n   */ ready() {\n        return this.patternImage_ ? this.patternImage_.ready() : Promise.resolve();\n    }\n}\nvar $d61d1dcaf3c44610$export$2e2bcd8739ae039 = $d61d1dcaf3c44610$var$Fill;\n\n\n/**\r\n * @module ol/style/Icon\r\n */ \n\n\n\n\n\n\n/**\r\n * @typedef {'fraction' | 'pixels'} IconAnchorUnits\r\n * Anchor unit can be either a fraction of the icon size or in pixels.\r\n */ /**\r\n * @typedef {'bottom-left' | 'bottom-right' | 'top-left' | 'top-right'} IconOrigin\r\n * Icon origin. One of 'bottom-left', 'bottom-right', 'top-left', 'top-right'.\r\n */ /**\r\n * @typedef {Object} Options\r\n * @property {Array<number>} [anchor=[0.5, 0.5]] Anchor. Default value is the icon center.\r\n * @property {IconOrigin} [anchorOrigin='top-left'] Origin of the anchor: `bottom-left`, `bottom-right`,\r\n * `top-left` or `top-right`.\r\n * @property {IconAnchorUnits} [anchorXUnits='fraction'] Units in which the anchor x value is\r\n * specified. A value of `'fraction'` indicates the x value is a fraction of the icon. A value of `'pixels'` indicates\r\n * the x value in pixels.\r\n * @property {IconAnchorUnits} [anchorYUnits='fraction'] Units in which the anchor y value is\r\n * specified. A value of `'fraction'` indicates the y value is a fraction of the icon. A value of `'pixels'` indicates\r\n * the y value in pixels.\r\n * @property {import(\"../color.js\").Color|string} [color] Color to tint the icon. If not specified,\r\n * the icon will be left as is.\r\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images. Note that you must provide a\r\n * `crossOrigin` value if you want to access pixel data with the Canvas renderer.\r\n * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\r\n * @property {HTMLImageElement|HTMLCanvasElement|ImageBitmap} [img] Image object for the icon.\r\n * @property {Array<number>} [displacement=[0, 0]] Displacement of the icon in pixels.\r\n * Positive values will shift the icon right and up.\r\n * @property {number} [opacity=1] Opacity of the icon.\r\n * @property {number} [width] The width of the icon in pixels. This can't be used together with `scale`.\r\n * @property {number} [height] The height of the icon in pixels. This can't be used together with `scale`.\r\n * @property {number|import(\"../size.js\").Size} [scale=1] Scale.\r\n * @property {boolean} [rotateWithView=false] Whether to rotate the icon with the view.\r\n * @property {number} [rotation=0] Rotation in radians (positive rotation clockwise).\r\n * @property {Array<number>} [offset=[0, 0]] Offset which, together with `size` and `offsetOrigin`, defines the\r\n * sub-rectangle to use from the original (sprite) image.\r\n * @property {IconOrigin} [offsetOrigin='top-left'] Origin of the offset: `bottom-left`, `bottom-right`,\r\n * `top-left` or `top-right`.\r\n * @property {import(\"../size.js\").Size} [size] Icon size in pixels. Used together with `offset` to define the\r\n * sub-rectangle to use from the original (sprite) image.\r\n * @property {string} [src] Image source URI.\r\n * @property {import(\"./Style.js\").DeclutterMode} [declutterMode] Declutter mode.\r\n */ /**\r\n * @param {number} width The width.\r\n * @param {number} height The height.\r\n * @param {number|undefined} wantedWidth The wanted width.\r\n * @param {number|undefined} wantedHeight The wanted height.\r\n * @return {number|Array<number>} The scale.\r\n */ function $8463d325b53eeb0c$var$calculateScale(width, height, wantedWidth, wantedHeight) {\n    if (wantedWidth !== undefined && wantedHeight !== undefined) return [\n        wantedWidth / width,\n        wantedHeight / height\n    ];\n    if (wantedWidth !== undefined) return wantedWidth / width;\n    if (wantedHeight !== undefined) return wantedHeight / height;\n    return 1;\n}\n/**\r\n * @classdesc\r\n * Set icon style for vector features.\r\n * @api\r\n */ class $8463d325b53eeb0c$var$Icon extends (0, $e60011aea38e6239$export$2e2bcd8739ae039) {\n    /**\r\n   * @param {Options} [options] Options.\r\n   */ constructor(options){\n        options = options || {};\n        /**\r\n     * @type {number}\r\n     */ const opacity = options.opacity !== undefined ? options.opacity : 1;\n        /**\r\n     * @type {number}\r\n     */ const rotation = options.rotation !== undefined ? options.rotation : 0;\n        /**\r\n     * @type {number|import(\"../size.js\").Size}\r\n     */ const scale = options.scale !== undefined ? options.scale : 1;\n        /**\r\n     * @type {boolean}\r\n     */ const rotateWithView = options.rotateWithView !== undefined ? options.rotateWithView : false;\n        super({\n            opacity: opacity,\n            rotation: rotation,\n            scale: scale,\n            displacement: options.displacement !== undefined ? options.displacement : [\n                0,\n                0\n            ],\n            rotateWithView: rotateWithView,\n            declutterMode: options.declutterMode\n        });\n        /**\r\n     * @private\r\n     * @type {Array<number>}\r\n     */ this.anchor_ = options.anchor !== undefined ? options.anchor : [\n            0.5,\n            0.5\n        ];\n        /**\r\n     * @private\r\n     * @type {Array<number>}\r\n     */ this.normalizedAnchor_ = null;\n        /**\r\n     * @private\r\n     * @type {IconOrigin}\r\n     */ this.anchorOrigin_ = options.anchorOrigin !== undefined ? options.anchorOrigin : 'top-left';\n        /**\r\n     * @private\r\n     * @type {IconAnchorUnits}\r\n     */ this.anchorXUnits_ = options.anchorXUnits !== undefined ? options.anchorXUnits : 'fraction';\n        /**\r\n     * @private\r\n     * @type {IconAnchorUnits}\r\n     */ this.anchorYUnits_ = options.anchorYUnits !== undefined ? options.anchorYUnits : 'fraction';\n        /**\r\n     * @private\r\n     * @type {?string}\r\n     */ this.crossOrigin_ = options.crossOrigin !== undefined ? options.crossOrigin : null;\n        const image = options.img !== undefined ? options.img : null;\n        let cacheKey = options.src;\n        (0, $35d5ec884318008e$export$a7a9523472993e97)(!(cacheKey !== undefined && image), '`image` and `src` cannot be provided at the same time');\n        if ((cacheKey === undefined || cacheKey.length === 0) && image) cacheKey = /** @type {HTMLImageElement} */ image.src || (0, $6c5e11070e371322$export$5e82334337e0f204)(image);\n        (0, $35d5ec884318008e$export$a7a9523472993e97)(cacheKey !== undefined && cacheKey.length > 0, 'A defined and non-empty `src` or `image` must be provided');\n        (0, $35d5ec884318008e$export$a7a9523472993e97)(!((options.width !== undefined || options.height !== undefined) && options.scale !== undefined), '`width` or `height` cannot be provided together with `scale`');\n        let imageState;\n        if (options.src !== undefined) imageState = (0, $7eb75c96a6b6f2c6$export$2e2bcd8739ae039).IDLE;\n        else if (image !== undefined) {\n            if ('complete' in image) {\n                if (image.complete) imageState = image.src ? (0, $7eb75c96a6b6f2c6$export$2e2bcd8739ae039).LOADED : (0, $7eb75c96a6b6f2c6$export$2e2bcd8739ae039).IDLE;\n                else imageState = (0, $7eb75c96a6b6f2c6$export$2e2bcd8739ae039).LOADING;\n            } else imageState = (0, $7eb75c96a6b6f2c6$export$2e2bcd8739ae039).LOADED;\n        }\n        /**\r\n     * @private\r\n     * @type {import(\"../color.js\").Color}\r\n     */ this.color_ = options.color !== undefined ? (0, $322346e1ff7894ca$export$75093a47a9fa838d)(options.color) : null;\n        /**\r\n     * @private\r\n     * @type {import(\"./IconImage.js\").default}\r\n     */ this.iconImage_ = (0, $0e5ad1d3b638689e$export$3988ae62b71be9a3)(image, /** @type {string} */ cacheKey, this.crossOrigin_, imageState, this.color_);\n        /**\r\n     * @private\r\n     * @type {Array<number>}\r\n     */ this.offset_ = options.offset !== undefined ? options.offset : [\n            0,\n            0\n        ];\n        /**\r\n     * @private\r\n     * @type {IconOrigin}\r\n     */ this.offsetOrigin_ = options.offsetOrigin !== undefined ? options.offsetOrigin : 'top-left';\n        /**\r\n     * @private\r\n     * @type {Array<number>}\r\n     */ this.origin_ = null;\n        /**\r\n     * @private\r\n     * @type {import(\"../size.js\").Size}\r\n     */ this.size_ = options.size !== undefined ? options.size : null;\n        /**\r\n     * @private\r\n     */ this.initialOptions_;\n        /**\r\n     * Calculate the scale if width or height were given.\r\n     */ if (options.width !== undefined || options.height !== undefined) {\n            let width, height;\n            if (options.size) [width, height] = options.size;\n            else {\n                const image = this.getImage(1);\n                if (image.width && image.height) {\n                    width = image.width;\n                    height = image.height;\n                } else if (image instanceof HTMLImageElement) {\n                    this.initialOptions_ = options;\n                    const onload = ()=>{\n                        this.unlistenImageChange(onload);\n                        if (!this.initialOptions_) return;\n                        const imageSize = this.iconImage_.getSize();\n                        this.setScale($8463d325b53eeb0c$var$calculateScale(imageSize[0], imageSize[1], options.width, options.height));\n                    };\n                    this.listenImageChange(onload);\n                    return;\n                }\n            }\n            if (width !== undefined) this.setScale($8463d325b53eeb0c$var$calculateScale(width, height, options.width, options.height));\n        }\n    }\n    /**\r\n   * Clones the style. The underlying Image/HTMLCanvasElement is not cloned.\r\n   * @return {Icon} The cloned style.\r\n   * @api\r\n   * @override\r\n   */ clone() {\n        let scale, width, height;\n        if (this.initialOptions_) {\n            width = this.initialOptions_.width;\n            height = this.initialOptions_.height;\n        } else {\n            scale = this.getScale();\n            scale = Array.isArray(scale) ? scale.slice() : scale;\n        }\n        return new $8463d325b53eeb0c$var$Icon({\n            anchor: this.anchor_.slice(),\n            anchorOrigin: this.anchorOrigin_,\n            anchorXUnits: this.anchorXUnits_,\n            anchorYUnits: this.anchorYUnits_,\n            color: this.color_ && this.color_.slice ? this.color_.slice() : this.color_ || undefined,\n            crossOrigin: this.crossOrigin_,\n            offset: this.offset_.slice(),\n            offsetOrigin: this.offsetOrigin_,\n            opacity: this.getOpacity(),\n            rotateWithView: this.getRotateWithView(),\n            rotation: this.getRotation(),\n            scale: scale,\n            width: width,\n            height: height,\n            size: this.size_ !== null ? this.size_.slice() : undefined,\n            src: this.getSrc(),\n            displacement: this.getDisplacement().slice(),\n            declutterMode: this.getDeclutterMode()\n        });\n    }\n    /**\r\n   * Get the anchor point in pixels. The anchor determines the center point for the\r\n   * symbolizer.\r\n   * @return {Array<number>} Anchor.\r\n   * @api\r\n   * @override\r\n   */ getAnchor() {\n        let anchor = this.normalizedAnchor_;\n        if (!anchor) {\n            anchor = this.anchor_;\n            const size = this.getSize();\n            if (this.anchorXUnits_ == 'fraction' || this.anchorYUnits_ == 'fraction') {\n                if (!size) return null;\n                anchor = this.anchor_.slice();\n                if (this.anchorXUnits_ == 'fraction') anchor[0] *= size[0];\n                if (this.anchorYUnits_ == 'fraction') anchor[1] *= size[1];\n            }\n            if (this.anchorOrigin_ != 'top-left') {\n                if (!size) return null;\n                if (anchor === this.anchor_) anchor = this.anchor_.slice();\n                if (this.anchorOrigin_ == 'top-right' || this.anchorOrigin_ == 'bottom-right') anchor[0] = -anchor[0] + size[0];\n                if (this.anchorOrigin_ == 'bottom-left' || this.anchorOrigin_ == 'bottom-right') anchor[1] = -anchor[1] + size[1];\n            }\n            this.normalizedAnchor_ = anchor;\n        }\n        const displacement = this.getDisplacement();\n        const scale = this.getScaleArray();\n        // anchor is scaled by renderer but displacement should not be scaled\n        // so divide by scale here\n        return [\n            anchor[0] - displacement[0] / scale[0],\n            anchor[1] + displacement[1] / scale[1]\n        ];\n    }\n    /**\r\n   * Set the anchor point. The anchor determines the center point for the\r\n   * symbolizer.\r\n   *\r\n   * @param {Array<number>} anchor Anchor.\r\n   * @api\r\n   */ setAnchor(anchor) {\n        this.anchor_ = anchor;\n        this.normalizedAnchor_ = null;\n    }\n    /**\r\n   * Get the icon color.\r\n   * @return {import(\"../color.js\").Color} Color.\r\n   * @api\r\n   */ getColor() {\n        return this.color_;\n    }\n    /**\r\n   * Get the image icon.\r\n   * @param {number} pixelRatio Pixel ratio.\r\n   * @return {HTMLImageElement|HTMLCanvasElement|ImageBitmap} Image or Canvas element. If the Icon\r\n   * style was configured with `src` or with a not let loaded `img`, an `ImageBitmap` will be returned.\r\n   * @api\r\n   * @override\r\n   */ getImage(pixelRatio) {\n        return this.iconImage_.getImage(pixelRatio);\n    }\n    /**\r\n   * Get the pixel ratio.\r\n   * @param {number} pixelRatio Pixel ratio.\r\n   * @return {number} The pixel ratio of the image.\r\n   * @api\r\n   * @override\r\n   */ getPixelRatio(pixelRatio) {\n        return this.iconImage_.getPixelRatio(pixelRatio);\n    }\n    /**\r\n   * @return {import(\"../size.js\").Size} Image size.\r\n   * @override\r\n   */ getImageSize() {\n        return this.iconImage_.getSize();\n    }\n    /**\r\n   * @return {import(\"../ImageState.js\").default} Image state.\r\n   * @override\r\n   */ getImageState() {\n        return this.iconImage_.getImageState();\n    }\n    /**\r\n   * @return {HTMLImageElement|HTMLCanvasElement|ImageBitmap} Image element.\r\n   * @override\r\n   */ getHitDetectionImage() {\n        return this.iconImage_.getHitDetectionImage();\n    }\n    /**\r\n   * Get the origin of the symbolizer.\r\n   * @return {Array<number>} Origin.\r\n   * @api\r\n   * @override\r\n   */ getOrigin() {\n        if (this.origin_) return this.origin_;\n        let offset = this.offset_;\n        if (this.offsetOrigin_ != 'top-left') {\n            const size = this.getSize();\n            const iconImageSize = this.iconImage_.getSize();\n            if (!size || !iconImageSize) return null;\n            offset = offset.slice();\n            if (this.offsetOrigin_ == 'top-right' || this.offsetOrigin_ == 'bottom-right') offset[0] = iconImageSize[0] - size[0] - offset[0];\n            if (this.offsetOrigin_ == 'bottom-left' || this.offsetOrigin_ == 'bottom-right') offset[1] = iconImageSize[1] - size[1] - offset[1];\n        }\n        this.origin_ = offset;\n        return this.origin_;\n    }\n    /**\r\n   * Get the image URL.\r\n   * @return {string|undefined} Image src.\r\n   * @api\r\n   */ getSrc() {\n        return this.iconImage_.getSrc();\n    }\n    /**\r\n   * Get the size of the icon (in pixels).\r\n   * @return {import(\"../size.js\").Size} Image size.\r\n   * @api\r\n   * @override\r\n   */ getSize() {\n        return !this.size_ ? this.iconImage_.getSize() : this.size_;\n    }\n    /**\r\n   * Get the width of the icon (in pixels). Will return undefined when the icon image is not yet loaded.\r\n   * @return {number} Icon width (in pixels).\r\n   * @api\r\n   */ getWidth() {\n        const scale = this.getScaleArray();\n        if (this.size_) return this.size_[0] * scale[0];\n        if (this.iconImage_.getImageState() == (0, $7eb75c96a6b6f2c6$export$2e2bcd8739ae039).LOADED) return this.iconImage_.getSize()[0] * scale[0];\n        return undefined;\n    }\n    /**\r\n   * Get the height of the icon (in pixels). Will return undefined when the icon image is not yet loaded.\r\n   * @return {number} Icon height (in pixels).\r\n   * @api\r\n   */ getHeight() {\n        const scale = this.getScaleArray();\n        if (this.size_) return this.size_[1] * scale[1];\n        if (this.iconImage_.getImageState() == (0, $7eb75c96a6b6f2c6$export$2e2bcd8739ae039).LOADED) return this.iconImage_.getSize()[1] * scale[1];\n        return undefined;\n    }\n    /**\r\n   * Set the scale.\r\n   *\r\n   * @param {number|import(\"../size.js\").Size} scale Scale.\r\n   * @api\r\n   * @override\r\n   */ setScale(scale) {\n        delete this.initialOptions_;\n        super.setScale(scale);\n    }\n    /**\r\n   * @param {function(import(\"../events/Event.js\").default): void} listener Listener function.\r\n   * @override\r\n   */ listenImageChange(listener) {\n        this.iconImage_.addEventListener((0, $294047c5e65f31a3$export$2e2bcd8739ae039).CHANGE, listener);\n    }\n    /**\r\n   * Load not yet loaded URI.\r\n   * When rendering a feature with an icon style, the vector renderer will\r\n   * automatically call this method. However, you might want to call this\r\n   * method yourself for preloading or other purposes.\r\n   * @api\r\n   * @override\r\n   */ load() {\n        this.iconImage_.load();\n    }\n    /**\r\n   * @param {function(import(\"../events/Event.js\").default): void} listener Listener function.\r\n   * @override\r\n   */ unlistenImageChange(listener) {\n        this.iconImage_.removeEventListener((0, $294047c5e65f31a3$export$2e2bcd8739ae039).CHANGE, listener);\n    }\n    /**\r\n   * @override\r\n   */ ready() {\n        return this.iconImage_.ready();\n    }\n}\nvar $8463d325b53eeb0c$export$2e2bcd8739ae039 = $8463d325b53eeb0c$var$Icon;\n\n\n\n/**\r\n * @module ol/style/Stroke\r\n */ /**\r\n * @typedef {Object} Options\r\n * @property {import(\"../color.js\").Color|import(\"../colorlike.js\").ColorLike} [color] A color, gradient or pattern.\r\n * See {@link module:ol/color~Color} and {@link module:ol/colorlike~ColorLike} for possible formats.\r\n * Default null; if null, the Canvas/renderer default black will be used.\r\n * @property {CanvasLineCap} [lineCap='round'] Line cap style: `butt`, `round`, or `square`.\r\n * @property {CanvasLineJoin} [lineJoin='round'] Line join style: `bevel`, `round`, or `miter`.\r\n * @property {Array<number>} [lineDash] Line dash pattern. Default is `null` (no dash).\r\n * @property {number} [lineDashOffset=0] Line dash offset.\r\n * @property {number} [miterLimit=10] Miter limit.\r\n * @property {number} [width] Width.\r\n */ /**\r\n * @classdesc\r\n * Set stroke style for vector features.\r\n * Note that the defaults given are the Canvas defaults, which will be used if\r\n * option is not defined. The `get` functions return whatever was entered in\r\n * the options; they will not return the default.\r\n * @api\r\n */ class $f9d0329c5c745263$var$Stroke {\n    /**\r\n   * @param {Options} [options] Options.\r\n   */ constructor(options){\n        options = options || {};\n        /**\r\n     * @private\r\n     * @type {import(\"../color.js\").Color|import(\"../colorlike.js\").ColorLike}\r\n     */ this.color_ = options.color !== undefined ? options.color : null;\n        /**\r\n     * @private\r\n     * @type {CanvasLineCap|undefined}\r\n     */ this.lineCap_ = options.lineCap;\n        /**\r\n     * @private\r\n     * @type {Array<number>|null}\r\n     */ this.lineDash_ = options.lineDash !== undefined ? options.lineDash : null;\n        /**\r\n     * @private\r\n     * @type {number|undefined}\r\n     */ this.lineDashOffset_ = options.lineDashOffset;\n        /**\r\n     * @private\r\n     * @type {CanvasLineJoin|undefined}\r\n     */ this.lineJoin_ = options.lineJoin;\n        /**\r\n     * @private\r\n     * @type {number|undefined}\r\n     */ this.miterLimit_ = options.miterLimit;\n        /**\r\n     * @private\r\n     * @type {number|undefined}\r\n     */ this.width_ = options.width;\n    }\n    /**\r\n   * Clones the style.\r\n   * @return {Stroke} The cloned style.\r\n   * @api\r\n   */ clone() {\n        const color = this.getColor();\n        return new $f9d0329c5c745263$var$Stroke({\n            color: Array.isArray(color) ? color.slice() : color || undefined,\n            lineCap: this.getLineCap(),\n            lineDash: this.getLineDash() ? this.getLineDash().slice() : undefined,\n            lineDashOffset: this.getLineDashOffset(),\n            lineJoin: this.getLineJoin(),\n            miterLimit: this.getMiterLimit(),\n            width: this.getWidth()\n        });\n    }\n    /**\r\n   * Get the stroke color.\r\n   * @return {import(\"../color.js\").Color|import(\"../colorlike.js\").ColorLike} Color.\r\n   * @api\r\n   */ getColor() {\n        return this.color_;\n    }\n    /**\r\n   * Get the line cap type for the stroke.\r\n   * @return {CanvasLineCap|undefined} Line cap.\r\n   * @api\r\n   */ getLineCap() {\n        return this.lineCap_;\n    }\n    /**\r\n   * Get the line dash style for the stroke.\r\n   * @return {Array<number>|null} Line dash.\r\n   * @api\r\n   */ getLineDash() {\n        return this.lineDash_;\n    }\n    /**\r\n   * Get the line dash offset for the stroke.\r\n   * @return {number|undefined} Line dash offset.\r\n   * @api\r\n   */ getLineDashOffset() {\n        return this.lineDashOffset_;\n    }\n    /**\r\n   * Get the line join type for the stroke.\r\n   * @return {CanvasLineJoin|undefined} Line join.\r\n   * @api\r\n   */ getLineJoin() {\n        return this.lineJoin_;\n    }\n    /**\r\n   * Get the miter limit for the stroke.\r\n   * @return {number|undefined} Miter limit.\r\n   * @api\r\n   */ getMiterLimit() {\n        return this.miterLimit_;\n    }\n    /**\r\n   * Get the stroke width.\r\n   * @return {number|undefined} Width.\r\n   * @api\r\n   */ getWidth() {\n        return this.width_;\n    }\n    /**\r\n   * Set the color.\r\n   *\r\n   * @param {import(\"../color.js\").Color|import(\"../colorlike.js\").ColorLike} color Color.\r\n   * @api\r\n   */ setColor(color) {\n        this.color_ = color;\n    }\n    /**\r\n   * Set the line cap.\r\n   *\r\n   * @param {CanvasLineCap|undefined} lineCap Line cap.\r\n   * @api\r\n   */ setLineCap(lineCap) {\n        this.lineCap_ = lineCap;\n    }\n    /**\r\n   * Set the line dash.\r\n   *\r\n   * @param {Array<number>|null} lineDash Line dash.\r\n   * @api\r\n   */ setLineDash(lineDash) {\n        this.lineDash_ = lineDash;\n    }\n    /**\r\n   * Set the line dash offset.\r\n   *\r\n   * @param {number|undefined} lineDashOffset Line dash offset.\r\n   * @api\r\n   */ setLineDashOffset(lineDashOffset) {\n        this.lineDashOffset_ = lineDashOffset;\n    }\n    /**\r\n   * Set the line join.\r\n   *\r\n   * @param {CanvasLineJoin|undefined} lineJoin Line join.\r\n   * @api\r\n   */ setLineJoin(lineJoin) {\n        this.lineJoin_ = lineJoin;\n    }\n    /**\r\n   * Set the miter limit.\r\n   *\r\n   * @param {number|undefined} miterLimit Miter limit.\r\n   * @api\r\n   */ setMiterLimit(miterLimit) {\n        this.miterLimit_ = miterLimit;\n    }\n    /**\r\n   * Set the width.\r\n   *\r\n   * @param {number|undefined} width Width.\r\n   * @api\r\n   */ setWidth(width) {\n        this.width_ = width;\n    }\n}\nvar $f9d0329c5c745263$export$2e2bcd8739ae039 = $f9d0329c5c745263$var$Stroke;\n\n\n/**\r\n * @module ol/style/Style\r\n */ \n\n\n\n/**\r\n * Defines how symbols and text are decluttered on layers ith `declutter` set to `true`\r\n * **declutter**: Overlapping symbols and text are decluttered.\r\n * **obstacle**: Symbols and text are rendered, but serve as obstacle for subsequent attempts\r\n *   to place a symbol or text at the same location.\r\n * **none**: No decluttering is done.\r\n *\r\n * @typedef {\"declutter\"|\"obstacle\"|\"none\"} DeclutterMode\r\n */ /**\r\n * A function that takes a {@link module:ol/Feature~Feature} and a `{number}`\r\n * representing the view's resolution. The function should return a\r\n * {@link module:ol/style/Style~Style} or an array of them. This way e.g. a\r\n * vector layer can be styled. If the function returns `undefined`, the\r\n * feature will not be rendered.\r\n *\r\n * @typedef {function(import(\"../Feature.js\").FeatureLike, number):(Style|Array<Style>|void)} StyleFunction\r\n */ /**\r\n * A {@link Style}, an array of {@link Style}, or a {@link StyleFunction}.\r\n * @typedef {Style|Array<Style>|StyleFunction} StyleLike\r\n */ /**\r\n * A function that takes a {@link module:ol/Feature~Feature} as argument and returns an\r\n * {@link module:ol/geom/Geometry~Geometry} that will be rendered and styled for the feature.\r\n *\r\n * @typedef {function(import(\"../Feature.js\").FeatureLike):\r\n *     (import(\"../geom/Geometry.js\").default|import(\"../render/Feature.js\").default|undefined)} GeometryFunction\r\n */ /**\r\n * Custom renderer function. Takes two arguments:\r\n *\r\n * 1. The pixel coordinates of the geometry in GeoJSON notation.\r\n * 2. The {@link module:ol/render~State} of the layer renderer.\r\n *\r\n * @typedef {function((import(\"../coordinate.js\").Coordinate|Array<import(\"../coordinate.js\").Coordinate>|Array<Array<import(\"../coordinate.js\").Coordinate>>|Array<Array<Array<import(\"../coordinate.js\").Coordinate>>>),import(\"../render.js\").State): void} RenderFunction\r\n */ /**\r\n * @typedef {Object} Options\r\n * @property {string|import(\"../geom/Geometry.js\").default|GeometryFunction} [geometry] Feature property or geometry\r\n * or function returning a geometry to render for this style.\r\n * @property {import(\"./Fill.js\").default} [fill] Fill style.\r\n * @property {import(\"./Image.js\").default} [image] Image style.\r\n * @property {RenderFunction} [renderer] Custom renderer. When configured, `fill`, `stroke` and `image` will be\r\n * ignored, and the provided function will be called with each render frame for each geometry.\r\n * @property {RenderFunction} [hitDetectionRenderer] Custom renderer for hit detection. If provided will be used\r\n * in hit detection rendering.\r\n * @property {import(\"./Stroke.js\").default} [stroke] Stroke style.\r\n * @property {import(\"./Text.js\").default} [text] Text style.\r\n * @property {number} [zIndex] Z index.\r\n */ /**\r\n * @classdesc\r\n * Container for vector feature rendering styles. Any changes made to the style\r\n * or its children through `set*()` methods will not take effect until the\r\n * feature or layer that uses the style is re-rendered.\r\n *\r\n * ## Feature styles\r\n *\r\n * If no style is defined, the following default style is used:\r\n * ```js\r\n *  import {Circle, Fill, Stroke, Style} from 'ol/style.js';\r\n *\r\n *  const fill = new Fill({\r\n *    color: 'rgba(255,255,255,0.4)',\r\n *  });\r\n *  const stroke = new Stroke({\r\n *    color: '#3399CC',\r\n *    width: 1.25,\r\n *  });\r\n *  const styles = [\r\n *    new Style({\r\n *      image: new Circle({\r\n *        fill: fill,\r\n *        stroke: stroke,\r\n *        radius: 5,\r\n *      }),\r\n *      fill: fill,\r\n *      stroke: stroke,\r\n *    }),\r\n *  ];\r\n * ```\r\n *\r\n * A separate editing style has the following defaults:\r\n * ```js\r\n *  import {Circle, Fill, Stroke, Style} from 'ol/style.js';\r\n *\r\n *  const styles = {};\r\n *  const white = [255, 255, 255, 1];\r\n *  const blue = [0, 153, 255, 1];\r\n *  const width = 3;\r\n *  styles['Polygon'] = [\r\n *    new Style({\r\n *      fill: new Fill({\r\n *        color: [255, 255, 255, 0.5],\r\n *      }),\r\n *    }),\r\n *  ];\r\n *  styles['MultiPolygon'] =\r\n *      styles['Polygon'];\r\n *  styles['LineString'] = [\r\n *    new Style({\r\n *      stroke: new Stroke({\r\n *        color: white,\r\n *        width: width + 2,\r\n *      }),\r\n *    }),\r\n *    new Style({\r\n *      stroke: new Stroke({\r\n *        color: blue,\r\n *        width: width,\r\n *      }),\r\n *    }),\r\n *  ];\r\n *  styles['MultiLineString'] = styles['LineString'];\r\n *\r\n *  styles['Circle'] = styles['Polygon'].concat(\r\n *    styles['LineString']\r\n *  );\r\n *\r\n *  styles['Point'] = [\r\n *    new Style({\r\n *      image: new Circle({\r\n *        radius: width * 2,\r\n *        fill: new Fill({\r\n *          color: blue,\r\n *        }),\r\n *        stroke: new Stroke({\r\n *          color: white,\r\n *          width: width / 2,\r\n *        }),\r\n *      }),\r\n *      zIndex: Infinity,\r\n *    }),\r\n *  ];\r\n *  styles['MultiPoint'] =\r\n *      styles['Point'];\r\n *  styles['GeometryCollection'] =\r\n *      styles['Polygon'].concat(\r\n *          styles['LineString'],\r\n *          styles['Point']\r\n *      );\r\n * ```\r\n *\r\n * @api\r\n */ class $8c7f6dda98e8cb9c$var$Style {\n    /**\r\n   * @param {Options} [options] Style options.\r\n   */ constructor(options){\n        options = options || {};\n        /**\r\n     * @private\r\n     * @type {string|import(\"../geom/Geometry.js\").default|GeometryFunction|null}\r\n     */ this.geometry_ = null;\n        /**\r\n     * @private\r\n     * @type {!GeometryFunction}\r\n     */ this.geometryFunction_ = $8c7f6dda98e8cb9c$var$defaultGeometryFunction;\n        if (options.geometry !== undefined) this.setGeometry(options.geometry);\n        /**\r\n     * @private\r\n     * @type {import(\"./Fill.js\").default|null}\r\n     */ this.fill_ = options.fill !== undefined ? options.fill : null;\n        /**\r\n     * @private\r\n     * @type {import(\"./Image.js\").default|null}\r\n     */ this.image_ = options.image !== undefined ? options.image : null;\n        /**\r\n     * @private\r\n     * @type {RenderFunction|null}\r\n     */ this.renderer_ = options.renderer !== undefined ? options.renderer : null;\n        /**\r\n     * @private\r\n     * @type {RenderFunction|null}\r\n     */ this.hitDetectionRenderer_ = options.hitDetectionRenderer !== undefined ? options.hitDetectionRenderer : null;\n        /**\r\n     * @private\r\n     * @type {import(\"./Stroke.js\").default|null}\r\n     */ this.stroke_ = options.stroke !== undefined ? options.stroke : null;\n        /**\r\n     * @private\r\n     * @type {import(\"./Text.js\").default|null}\r\n     */ this.text_ = options.text !== undefined ? options.text : null;\n        /**\r\n     * @private\r\n     * @type {number|undefined}\r\n     */ this.zIndex_ = options.zIndex;\n    }\n    /**\r\n   * Clones the style.\r\n   * @return {Style} The cloned style.\r\n   * @api\r\n   */ clone() {\n        let geometry = this.getGeometry();\n        if (geometry && typeof geometry === 'object') geometry = /** @type {import(\"../geom/Geometry.js\").default} */ geometry.clone();\n        return new $8c7f6dda98e8cb9c$var$Style({\n            geometry: geometry ?? undefined,\n            fill: this.getFill() ? this.getFill().clone() : undefined,\n            image: this.getImage() ? this.getImage().clone() : undefined,\n            renderer: this.getRenderer() ?? undefined,\n            stroke: this.getStroke() ? this.getStroke().clone() : undefined,\n            text: this.getText() ? this.getText().clone() : undefined,\n            zIndex: this.getZIndex()\n        });\n    }\n    /**\r\n   * Get the custom renderer function that was configured with\r\n   * {@link #setRenderer} or the `renderer` constructor option.\r\n   * @return {RenderFunction|null} Custom renderer function.\r\n   * @api\r\n   */ getRenderer() {\n        return this.renderer_;\n    }\n    /**\r\n   * Sets a custom renderer function for this style. When set, `fill`, `stroke`\r\n   * and `image` options of the style will be ignored.\r\n   * @param {RenderFunction|null} renderer Custom renderer function.\r\n   * @api\r\n   */ setRenderer(renderer) {\n        this.renderer_ = renderer;\n    }\n    /**\r\n   * Sets a custom renderer function for this style used\r\n   * in hit detection.\r\n   * @param {RenderFunction|null} renderer Custom renderer function.\r\n   * @api\r\n   */ setHitDetectionRenderer(renderer) {\n        this.hitDetectionRenderer_ = renderer;\n    }\n    /**\r\n   * Get the custom renderer function that was configured with\r\n   * {@link #setHitDetectionRenderer} or the `hitDetectionRenderer` constructor option.\r\n   * @return {RenderFunction|null} Custom renderer function.\r\n   * @api\r\n   */ getHitDetectionRenderer() {\n        return this.hitDetectionRenderer_;\n    }\n    /**\r\n   * Get the geometry to be rendered.\r\n   * @return {string|import(\"../geom/Geometry.js\").default|GeometryFunction|null}\r\n   * Feature property or geometry or function that returns the geometry that will\r\n   * be rendered with this style.\r\n   * @api\r\n   */ getGeometry() {\n        return this.geometry_;\n    }\n    /**\r\n   * Get the function used to generate a geometry for rendering.\r\n   * @return {!GeometryFunction} Function that is called with a feature\r\n   * and returns the geometry to render instead of the feature's geometry.\r\n   * @api\r\n   */ getGeometryFunction() {\n        return this.geometryFunction_;\n    }\n    /**\r\n   * Get the fill style.\r\n   * @return {import(\"./Fill.js\").default|null} Fill style.\r\n   * @api\r\n   */ getFill() {\n        return this.fill_;\n    }\n    /**\r\n   * Set the fill style.\r\n   * @param {import(\"./Fill.js\").default|null} fill Fill style.\r\n   * @api\r\n   */ setFill(fill) {\n        this.fill_ = fill;\n    }\n    /**\r\n   * Get the image style.\r\n   * @return {import(\"./Image.js\").default|null} Image style.\r\n   * @api\r\n   */ getImage() {\n        return this.image_;\n    }\n    /**\r\n   * Set the image style.\r\n   * @param {import(\"./Image.js\").default} image Image style.\r\n   * @api\r\n   */ setImage(image) {\n        this.image_ = image;\n    }\n    /**\r\n   * Get the stroke style.\r\n   * @return {import(\"./Stroke.js\").default|null} Stroke style.\r\n   * @api\r\n   */ getStroke() {\n        return this.stroke_;\n    }\n    /**\r\n   * Set the stroke style.\r\n   * @param {import(\"./Stroke.js\").default|null} stroke Stroke style.\r\n   * @api\r\n   */ setStroke(stroke) {\n        this.stroke_ = stroke;\n    }\n    /**\r\n   * Get the text style.\r\n   * @return {import(\"./Text.js\").default|null} Text style.\r\n   * @api\r\n   */ getText() {\n        return this.text_;\n    }\n    /**\r\n   * Set the text style.\r\n   * @param {import(\"./Text.js\").default} text Text style.\r\n   * @api\r\n   */ setText(text) {\n        this.text_ = text;\n    }\n    /**\r\n   * Get the z-index for the style.\r\n   * @return {number|undefined} ZIndex.\r\n   * @api\r\n   */ getZIndex() {\n        return this.zIndex_;\n    }\n    /**\r\n   * Set a geometry that is rendered instead of the feature's geometry.\r\n   *\r\n   * @param {string|import(\"../geom/Geometry.js\").default|GeometryFunction|null} geometry\r\n   *     Feature property or geometry or function returning a geometry to render\r\n   *     for this style.\r\n   * @api\r\n   */ setGeometry(geometry) {\n        if (typeof geometry === 'function') this.geometryFunction_ = geometry;\n        else if (typeof geometry === 'string') this.geometryFunction_ = function(feature) {\n            return /** @type {import(\"../geom/Geometry.js\").default} */ feature.get(geometry);\n        };\n        else if (!geometry) this.geometryFunction_ = $8c7f6dda98e8cb9c$var$defaultGeometryFunction;\n        else if (geometry !== undefined) this.geometryFunction_ = function() {\n            return /** @type {import(\"../geom/Geometry.js\").default} */ geometry;\n        };\n        this.geometry_ = geometry;\n    }\n    /**\r\n   * Set the z-index.\r\n   *\r\n   * @param {number|undefined} zIndex ZIndex.\r\n   * @api\r\n   */ setZIndex(zIndex) {\n        this.zIndex_ = zIndex;\n    }\n}\nfunction $8c7f6dda98e8cb9c$export$c314ea3f6b164147(obj) {\n    let styleFunction;\n    if (typeof obj === 'function') styleFunction = obj;\n    else {\n        /**\r\n     * @type {Array<Style>}\r\n     */ let styles;\n        if (Array.isArray(obj)) styles = obj;\n        else {\n            (0, $35d5ec884318008e$export$a7a9523472993e97)(typeof /** @type {?} */ obj.getZIndex === 'function', 'Expected an `Style` or an array of `Style`');\n            const style = /** @type {Style} */ obj;\n            styles = [\n                style\n            ];\n        }\n        styleFunction = function() {\n            return styles;\n        };\n    }\n    return styleFunction;\n}\n/**\r\n * @type {Array<Style>|null}\r\n */ let $8c7f6dda98e8cb9c$var$defaultStyles = null;\nfunction $8c7f6dda98e8cb9c$export$6865c5ac2f5ce8b6(feature, resolution) {\n    // We don't use an immediately-invoked function\n    // and a closure so we don't get an error at script evaluation time in\n    // browsers that do not support Canvas. (import(\"./Circle.js\").CircleStyle does\n    // canvas.getContext('2d') at construction time, which will cause an.error\n    // in such browsers.)\n    if (!$8c7f6dda98e8cb9c$var$defaultStyles) {\n        const fill = new (0, $d61d1dcaf3c44610$export$2e2bcd8739ae039)({\n            color: 'rgba(255,255,255,0.4)'\n        });\n        const stroke = new (0, $f9d0329c5c745263$export$2e2bcd8739ae039)({\n            color: '#3399CC',\n            width: 1.25\n        });\n        $8c7f6dda98e8cb9c$var$defaultStyles = [\n            new $8c7f6dda98e8cb9c$var$Style({\n                image: new (0, $06150d8570b7481b$export$2e2bcd8739ae039)({\n                    fill: fill,\n                    stroke: stroke,\n                    radius: 5\n                }),\n                fill: fill,\n                stroke: stroke\n            })\n        ];\n    }\n    return $8c7f6dda98e8cb9c$var$defaultStyles;\n}\nfunction $8c7f6dda98e8cb9c$export$ed1eaede5d0e77ac() {\n    /** @type {Object<import(\"../geom/Geometry.js\").Type, Array<Style>>} */ const styles = {};\n    const white = [\n        255,\n        255,\n        255,\n        1\n    ];\n    const blue = [\n        0,\n        153,\n        255,\n        1\n    ];\n    const width = 3;\n    styles['Polygon'] = [\n        new $8c7f6dda98e8cb9c$var$Style({\n            fill: new (0, $d61d1dcaf3c44610$export$2e2bcd8739ae039)({\n                color: [\n                    255,\n                    255,\n                    255,\n                    0.5\n                ]\n            })\n        })\n    ];\n    styles['MultiPolygon'] = styles['Polygon'];\n    styles['LineString'] = [\n        new $8c7f6dda98e8cb9c$var$Style({\n            stroke: new (0, $f9d0329c5c745263$export$2e2bcd8739ae039)({\n                color: white,\n                width: width + 2\n            })\n        }),\n        new $8c7f6dda98e8cb9c$var$Style({\n            stroke: new (0, $f9d0329c5c745263$export$2e2bcd8739ae039)({\n                color: blue,\n                width: width\n            })\n        })\n    ];\n    styles['MultiLineString'] = styles['LineString'];\n    styles['Circle'] = styles['Polygon'].concat(styles['LineString']);\n    styles['Point'] = [\n        new $8c7f6dda98e8cb9c$var$Style({\n            image: new (0, $06150d8570b7481b$export$2e2bcd8739ae039)({\n                radius: width * 2,\n                fill: new (0, $d61d1dcaf3c44610$export$2e2bcd8739ae039)({\n                    color: blue\n                }),\n                stroke: new (0, $f9d0329c5c745263$export$2e2bcd8739ae039)({\n                    color: white,\n                    width: width / 2\n                })\n            }),\n            zIndex: Infinity\n        })\n    ];\n    styles['MultiPoint'] = styles['Point'];\n    styles['GeometryCollection'] = styles['Polygon'].concat(styles['LineString'], styles['Point']);\n    return styles;\n}\n/**\r\n * Function that is called with a feature and returns its default geometry.\r\n * @param {import(\"../Feature.js\").FeatureLike} feature Feature to get the geometry for.\r\n * @return {import(\"../geom/Geometry.js\").default|import(\"../render/Feature.js\").default|undefined} Geometry to render.\r\n */ function $8c7f6dda98e8cb9c$var$defaultGeometryFunction(feature) {\n    return feature.getGeometry();\n}\nvar $8c7f6dda98e8cb9c$export$2e2bcd8739ae039 = $8c7f6dda98e8cb9c$var$Style;\n\n\n/**\r\n * @module ol/style/Text\r\n */ \n\n/**\r\n * @typedef {'point' | 'line'} TextPlacement\r\n * Default text placement is `'point'`. Note that\r\n * `'line'` requires the underlying geometry to be a {@link module:ol/geom/LineString~LineString},\r\n * {@link module:ol/geom/Polygon~Polygon}, {@link module:ol/geom/MultiLineString~MultiLineString} or\r\n * {@link module:ol/geom/MultiPolygon~MultiPolygon}.\r\n */ /**\r\n * @typedef {'left' | 'center' | 'right'} TextJustify\r\n */ /**\r\n * The default fill color to use if no fill was set at construction time; a\r\n * blackish `#333`.\r\n *\r\n * @const {string}\r\n */ const $944be50faeff5321$var$DEFAULT_FILL_COLOR = '#333';\n/**\r\n * @typedef {Object} Options\r\n * @property {string} [font] Font style as CSS `font` value, see:\r\n * https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/font. Default is `'10px sans-serif'`\r\n * @property {number} [maxAngle=Math.PI/4] When `placement` is set to `'line'`, allow a maximum angle between adjacent characters.\r\n * The expected value is in radians, and the default is 45° (`Math.PI / 4`).\r\n * @property {number} [offsetX=0] Horizontal text offset in pixels. A positive will shift the text right.\r\n * @property {number} [offsetY=0] Vertical text offset in pixels. A positive will shift the text down.\r\n * @property {boolean} [overflow=false] For polygon labels or when `placement` is set to `'line'`, allow text to exceed\r\n * the width of the polygon at the label position or the length of the path that it follows.\r\n * @property {TextPlacement} [placement='point'] Text placement.\r\n * @property {number} [repeat] Repeat interval. When set, the text will be repeated at this interval, which specifies\r\n * the distance between two text anchors in pixels. Only available when `placement` is set to `'line'`. Overrides 'textAlign'.\r\n * @property {number|import(\"../size.js\").Size} [scale] Scale.\r\n * @property {boolean} [rotateWithView=false] Whether to rotate the text with the view.\r\n * @property {boolean} [keepUpright=true] Whether the text can be rotated 180° to prevent being rendered upside down.\r\n * @property {number} [rotation=0] Rotation in radians (positive rotation clockwise).\r\n * @property {string|Array<string>} [text] Text content or rich text content. For plain text provide a string, which can\r\n * contain line breaks (`\\n`). For rich text provide an array of text/font tuples. A tuple consists of the text to\r\n * render and the font to use (or `''` to use the text style's font). A line break has to be a separate tuple (i.e. `'\\n', ''`).\r\n * **Example:** `['foo', 'bold 10px sans-serif', ' bar', 'italic 10px sans-serif', ' baz', '']` will yield \"**foo** *bar* baz\".\r\n * **Note:** Rich text is not supported for `placement: 'line'` or the immediate rendering API.\r\n * @property {CanvasTextAlign} [textAlign] Text alignment. Possible values: `'left'`, `'right'`, `'center'`, `'end'` or `'start'`.\r\n * Default is `'center'` for `placement: 'point'`. For `placement: 'line'`, the default is to let the renderer choose a\r\n * placement where `maxAngle` is not exceeded.\r\n * @property {TextJustify} [justify] Text justification within the text box.\r\n * If not set, text is justified towards the `textAlign` anchor.\r\n * Otherwise, use options `'left'`, `'center'`, or `'right'` to justify the text within the text box.\r\n * **Note:** `justify` is ignored for immediate rendering and also for `placement: 'line'`.\r\n * @property {CanvasTextBaseline} [textBaseline='middle'] Text base line. Possible values: `'bottom'`, `'top'`, `'middle'`, `'alphabetic'`,\r\n * `'hanging'`, `'ideographic'`.\r\n * @property {import(\"./Fill.js\").default|null} [fill] Fill style. If none is provided, we'll use a dark fill-style (#333). Specify `null` for no fill.\r\n * @property {import(\"./Stroke.js\").default} [stroke] Stroke style.\r\n * @property {import(\"./Fill.js\").default} [backgroundFill] Fill style for the text background when `placement` is\r\n * `'point'`. Default is no fill.\r\n * @property {import(\"./Stroke.js\").default} [backgroundStroke] Stroke style for the text background  when `placement`\r\n * is `'point'`. Default is no stroke.\r\n * @property {Array<number>} [padding=[0, 0, 0, 0]] Padding in pixels around the text for decluttering and background. The order of\r\n * values in the array is `[top, right, bottom, left]`.\r\n * @property {import('../style/Style.js').DeclutterMode} [declutterMode] Declutter mode: `declutter`, `obstacle`, `none`\r\n */ /**\r\n * @classdesc\r\n * Set text style for vector features.\r\n * @api\r\n */ class $944be50faeff5321$var$Text {\n    /**\r\n   * @param {Options} [options] Options.\r\n   */ constructor(options){\n        options = options || {};\n        /**\r\n     * @private\r\n     * @type {string|undefined}\r\n     */ this.font_ = options.font;\n        /**\r\n     * @private\r\n     * @type {number|undefined}\r\n     */ this.rotation_ = options.rotation;\n        /**\r\n     * @private\r\n     * @type {boolean|undefined}\r\n     */ this.rotateWithView_ = options.rotateWithView;\n        /**\r\n     * @private\r\n     * @type {boolean|undefined}\r\n     */ this.keepUpright_ = options.keepUpright;\n        /**\r\n     * @private\r\n     * @type {number|import(\"../size.js\").Size|undefined}\r\n     */ this.scale_ = options.scale;\n        /**\r\n     * @private\r\n     * @type {import(\"../size.js\").Size}\r\n     */ this.scaleArray_ = (0, $cc435a5409103773$export$a71a825ff42fb8e1)(options.scale !== undefined ? options.scale : 1);\n        /**\r\n     * @private\r\n     * @type {string|Array<string>|undefined}\r\n     */ this.text_ = options.text;\n        /**\r\n     * @private\r\n     * @type {CanvasTextAlign|undefined}\r\n     */ this.textAlign_ = options.textAlign;\n        /**\r\n     * @private\r\n     * @type {TextJustify|undefined}\r\n     */ this.justify_ = options.justify;\n        /**\r\n     * @private\r\n     * @type {number|undefined}\r\n     */ this.repeat_ = options.repeat;\n        /**\r\n     * @private\r\n     * @type {CanvasTextBaseline|undefined}\r\n     */ this.textBaseline_ = options.textBaseline;\n        /**\r\n     * @private\r\n     * @type {import(\"./Fill.js\").default|null}\r\n     */ this.fill_ = options.fill !== undefined ? options.fill : new (0, $d61d1dcaf3c44610$export$2e2bcd8739ae039)({\n            color: $944be50faeff5321$var$DEFAULT_FILL_COLOR\n        });\n        /**\r\n     * @private\r\n     * @type {number}\r\n     */ this.maxAngle_ = options.maxAngle !== undefined ? options.maxAngle : Math.PI / 4;\n        /**\r\n     * @private\r\n     * @type {TextPlacement}\r\n     */ this.placement_ = options.placement !== undefined ? options.placement : 'point';\n        /**\r\n     * @private\r\n     * @type {boolean}\r\n     */ this.overflow_ = !!options.overflow;\n        /**\r\n     * @private\r\n     * @type {import(\"./Stroke.js\").default|null}\r\n     */ this.stroke_ = options.stroke !== undefined ? options.stroke : null;\n        /**\r\n     * @private\r\n     * @type {number}\r\n     */ this.offsetX_ = options.offsetX !== undefined ? options.offsetX : 0;\n        /**\r\n     * @private\r\n     * @type {number}\r\n     */ this.offsetY_ = options.offsetY !== undefined ? options.offsetY : 0;\n        /**\r\n     * @private\r\n     * @type {import(\"./Fill.js\").default|null}\r\n     */ this.backgroundFill_ = options.backgroundFill ? options.backgroundFill : null;\n        /**\r\n     * @private\r\n     * @type {import(\"./Stroke.js\").default|null}\r\n     */ this.backgroundStroke_ = options.backgroundStroke ? options.backgroundStroke : null;\n        /**\r\n     * @private\r\n     * @type {Array<number>|null}\r\n     */ this.padding_ = options.padding === undefined ? null : options.padding;\n        /**\r\n     * @private\r\n     * @type {import('../style/Style.js').DeclutterMode}\r\n     */ this.declutterMode_ = options.declutterMode;\n    }\n    /**\r\n   * Clones the style.\r\n   * @return {Text} The cloned style.\r\n   * @api\r\n   */ clone() {\n        const scale = this.getScale();\n        return new $944be50faeff5321$var$Text({\n            font: this.getFont(),\n            placement: this.getPlacement(),\n            repeat: this.getRepeat(),\n            maxAngle: this.getMaxAngle(),\n            overflow: this.getOverflow(),\n            rotation: this.getRotation(),\n            rotateWithView: this.getRotateWithView(),\n            keepUpright: this.getKeepUpright(),\n            scale: Array.isArray(scale) ? scale.slice() : scale,\n            text: this.getText(),\n            textAlign: this.getTextAlign(),\n            justify: this.getJustify(),\n            textBaseline: this.getTextBaseline(),\n            fill: this.getFill() ? this.getFill().clone() : undefined,\n            stroke: this.getStroke() ? this.getStroke().clone() : undefined,\n            offsetX: this.getOffsetX(),\n            offsetY: this.getOffsetY(),\n            backgroundFill: this.getBackgroundFill() ? this.getBackgroundFill().clone() : undefined,\n            backgroundStroke: this.getBackgroundStroke() ? this.getBackgroundStroke().clone() : undefined,\n            padding: this.getPadding() || undefined,\n            declutterMode: this.getDeclutterMode()\n        });\n    }\n    /**\r\n   * Get the `overflow` configuration.\r\n   * @return {boolean} Let text overflow the length of the path they follow.\r\n   * @api\r\n   */ getOverflow() {\n        return this.overflow_;\n    }\n    /**\r\n   * Get the font name.\r\n   * @return {string|undefined} Font.\r\n   * @api\r\n   */ getFont() {\n        return this.font_;\n    }\n    /**\r\n   * Get the maximum angle between adjacent characters.\r\n   * @return {number} Angle in radians.\r\n   * @api\r\n   */ getMaxAngle() {\n        return this.maxAngle_;\n    }\n    /**\r\n   * Get the label placement.\r\n   * @return {TextPlacement} Text placement.\r\n   * @api\r\n   */ getPlacement() {\n        return this.placement_;\n    }\n    /**\r\n   * Get the repeat interval of the text.\r\n   * @return {number|undefined} Repeat interval in pixels.\r\n   * @api\r\n   */ getRepeat() {\n        return this.repeat_;\n    }\n    /**\r\n   * Get the x-offset for the text.\r\n   * @return {number} Horizontal text offset.\r\n   * @api\r\n   */ getOffsetX() {\n        return this.offsetX_;\n    }\n    /**\r\n   * Get the y-offset for the text.\r\n   * @return {number} Vertical text offset.\r\n   * @api\r\n   */ getOffsetY() {\n        return this.offsetY_;\n    }\n    /**\r\n   * Get the fill style for the text.\r\n   * @return {import(\"./Fill.js\").default|null} Fill style.\r\n   * @api\r\n   */ getFill() {\n        return this.fill_;\n    }\n    /**\r\n   * Determine whether the text rotates with the map.\r\n   * @return {boolean|undefined} Rotate with map.\r\n   * @api\r\n   */ getRotateWithView() {\n        return this.rotateWithView_;\n    }\n    /**\r\n   * Determine whether the text can be rendered upside down.\r\n   * @return {boolean|undefined} Keep text upright.\r\n   * @api\r\n   */ getKeepUpright() {\n        return this.keepUpright_;\n    }\n    /**\r\n   * Get the text rotation.\r\n   * @return {number|undefined} Rotation.\r\n   * @api\r\n   */ getRotation() {\n        return this.rotation_;\n    }\n    /**\r\n   * Get the text scale.\r\n   * @return {number|import(\"../size.js\").Size|undefined} Scale.\r\n   * @api\r\n   */ getScale() {\n        return this.scale_;\n    }\n    /**\r\n   * Get the symbolizer scale array.\r\n   * @return {import(\"../size.js\").Size} Scale array.\r\n   */ getScaleArray() {\n        return this.scaleArray_;\n    }\n    /**\r\n   * Get the stroke style for the text.\r\n   * @return {import(\"./Stroke.js\").default|null} Stroke style.\r\n   * @api\r\n   */ getStroke() {\n        return this.stroke_;\n    }\n    /**\r\n   * Get the text to be rendered.\r\n   * @return {string|Array<string>|undefined} Text.\r\n   * @api\r\n   */ getText() {\n        return this.text_;\n    }\n    /**\r\n   * Get the text alignment.\r\n   * @return {CanvasTextAlign|undefined} Text align.\r\n   * @api\r\n   */ getTextAlign() {\n        return this.textAlign_;\n    }\n    /**\r\n   * Get the justification.\r\n   * @return {TextJustify|undefined} Justification.\r\n   * @api\r\n   */ getJustify() {\n        return this.justify_;\n    }\n    /**\r\n   * Get the text baseline.\r\n   * @return {CanvasTextBaseline|undefined} Text baseline.\r\n   * @api\r\n   */ getTextBaseline() {\n        return this.textBaseline_;\n    }\n    /**\r\n   * Get the background fill style for the text.\r\n   * @return {import(\"./Fill.js\").default|null} Fill style.\r\n   * @api\r\n   */ getBackgroundFill() {\n        return this.backgroundFill_;\n    }\n    /**\r\n   * Get the background stroke style for the text.\r\n   * @return {import(\"./Stroke.js\").default|null} Stroke style.\r\n   * @api\r\n   */ getBackgroundStroke() {\n        return this.backgroundStroke_;\n    }\n    /**\r\n   * Get the padding for the text.\r\n   * @return {Array<number>|null} Padding.\r\n   * @api\r\n   */ getPadding() {\n        return this.padding_;\n    }\n    /**\r\n   * Get the declutter mode of the shape\r\n   * @return {import(\"./Style.js\").DeclutterMode} Shape's declutter mode\r\n   * @api\r\n   */ getDeclutterMode() {\n        return this.declutterMode_;\n    }\n    /**\r\n   * Set the `overflow` property.\r\n   *\r\n   * @param {boolean} overflow Let text overflow the path that it follows.\r\n   * @api\r\n   */ setOverflow(overflow) {\n        this.overflow_ = overflow;\n    }\n    /**\r\n   * Set the font.\r\n   *\r\n   * @param {string|undefined} font Font.\r\n   * @api\r\n   */ setFont(font) {\n        this.font_ = font;\n    }\n    /**\r\n   * Set the maximum angle between adjacent characters.\r\n   *\r\n   * @param {number} maxAngle Angle in radians.\r\n   * @api\r\n   */ setMaxAngle(maxAngle) {\n        this.maxAngle_ = maxAngle;\n    }\n    /**\r\n   * Set the x offset.\r\n   *\r\n   * @param {number} offsetX Horizontal text offset.\r\n   * @api\r\n   */ setOffsetX(offsetX) {\n        this.offsetX_ = offsetX;\n    }\n    /**\r\n   * Set the y offset.\r\n   *\r\n   * @param {number} offsetY Vertical text offset.\r\n   * @api\r\n   */ setOffsetY(offsetY) {\n        this.offsetY_ = offsetY;\n    }\n    /**\r\n   * Set the text placement.\r\n   *\r\n   * @param {TextPlacement} placement Placement.\r\n   * @api\r\n   */ setPlacement(placement) {\n        this.placement_ = placement;\n    }\n    /**\r\n   * Set the repeat interval of the text.\r\n   * @param {number|undefined} [repeat] Repeat interval in pixels.\r\n   * @api\r\n   */ setRepeat(repeat) {\n        this.repeat_ = repeat;\n    }\n    /**\r\n   * Set whether to rotate the text with the view.\r\n   *\r\n   * @param {boolean} rotateWithView Rotate with map.\r\n   * @api\r\n   */ setRotateWithView(rotateWithView) {\n        this.rotateWithView_ = rotateWithView;\n    }\n    /**\r\n   * Set whether the text can be rendered upside down.\r\n   *\r\n   * @param {boolean} keepUpright Keep text upright.\r\n   * @api\r\n   */ setKeepUpright(keepUpright) {\n        this.keepUpright_ = keepUpright;\n    }\n    /**\r\n   * Set the fill.\r\n   *\r\n   * @param {import(\"./Fill.js\").default|null} fill Fill style.\r\n   * @api\r\n   */ setFill(fill) {\n        this.fill_ = fill;\n    }\n    /**\r\n   * Set the rotation.\r\n   *\r\n   * @param {number|undefined} rotation Rotation.\r\n   * @api\r\n   */ setRotation(rotation) {\n        this.rotation_ = rotation;\n    }\n    /**\r\n   * Set the scale.\r\n   *\r\n   * @param {number|import(\"../size.js\").Size|undefined} scale Scale.\r\n   * @api\r\n   */ setScale(scale) {\n        this.scale_ = scale;\n        this.scaleArray_ = (0, $cc435a5409103773$export$a71a825ff42fb8e1)(scale !== undefined ? scale : 1);\n    }\n    /**\r\n   * Set the stroke.\r\n   *\r\n   * @param {import(\"./Stroke.js\").default|null} stroke Stroke style.\r\n   * @api\r\n   */ setStroke(stroke) {\n        this.stroke_ = stroke;\n    }\n    /**\r\n   * Set the text.\r\n   *\r\n   * @param {string|Array<string>|undefined} text Text.\r\n   * @api\r\n   */ setText(text) {\n        this.text_ = text;\n    }\n    /**\r\n   * Set the text alignment.\r\n   *\r\n   * @param {CanvasTextAlign|undefined} textAlign Text align.\r\n   * @api\r\n   */ setTextAlign(textAlign) {\n        this.textAlign_ = textAlign;\n    }\n    /**\r\n   * Set the justification.\r\n   *\r\n   * @param {TextJustify|undefined} justify Justification.\r\n   * @api\r\n   */ setJustify(justify) {\n        this.justify_ = justify;\n    }\n    /**\r\n   * Set the text baseline.\r\n   *\r\n   * @param {CanvasTextBaseline|undefined} textBaseline Text baseline.\r\n   * @api\r\n   */ setTextBaseline(textBaseline) {\n        this.textBaseline_ = textBaseline;\n    }\n    /**\r\n   * Set the background fill.\r\n   *\r\n   * @param {import(\"./Fill.js\").default|null} fill Fill style.\r\n   * @api\r\n   */ setBackgroundFill(fill) {\n        this.backgroundFill_ = fill;\n    }\n    /**\r\n   * Set the background stroke.\r\n   *\r\n   * @param {import(\"./Stroke.js\").default|null} stroke Stroke style.\r\n   * @api\r\n   */ setBackgroundStroke(stroke) {\n        this.backgroundStroke_ = stroke;\n    }\n    /**\r\n   * Set the padding (`[top, right, bottom, left]`).\r\n   *\r\n   * @param {Array<number>|null} padding Padding.\r\n   * @api\r\n   */ setPadding(padding) {\n        this.padding_ = padding;\n    }\n}\nvar $944be50faeff5321$export$2e2bcd8739ae039 = $944be50faeff5321$var$Text;\n\n\n/**\r\n * @fileoverview This module includes functions to build styles for the canvas renderer.  Building\r\n * is composed of two steps: parsing and compiling.  The parsing step takes an encoded expression\r\n * and returns an instance of one of the expression classes.  The compiling step takes the\r\n * expression instance and returns a function that can be evaluated to return a literal value.  The\r\n * evaluator function should do as little allocation and work as possible.\r\n */ /**\r\n * @typedef {import(\"../../style/flat.js\").FlatStyle} FlatStyle\r\n */ /**\r\n * @typedef {import(\"../../expr/expression.js\").EncodedExpression} EncodedExpression\r\n */ /**\r\n * @typedef {import(\"../../expr/expression.js\").ParsingContext} ParsingContext\r\n */ /**\r\n * @typedef {import(\"../../expr/expression.js\").CallExpression} CallExpression\r\n */ /**\r\n * @typedef {import(\"../../expr/cpu.js\").EvaluationContext} EvaluationContext\r\n */ /**\r\n * @typedef {import(\"../../expr/cpu.js\").ExpressionEvaluator} ExpressionEvaluator\r\n */ /**\r\n * @param {EvaluationContext} context The evaluation context.\r\n * @return {boolean} Always true.\r\n */ function $6000539d86fde80c$var$always(context) {\n    return true;\n}\nfunction $6000539d86fde80c$export$fc6a94152b1b05a8(rules) {\n    const parsingContext = (0, $778943ec39690f8e$export$1c8b4c1584800354)();\n    const evaluator = $6000539d86fde80c$export$d6ae6a4799989976(rules, parsingContext);\n    const evaluationContext = (0, $d597295b1f166e98$export$c18f39f0e136c26)();\n    return function(feature, resolution) {\n        evaluationContext.properties = feature.getPropertiesInternal();\n        evaluationContext.resolution = resolution;\n        if (parsingContext.featureId) {\n            const id = feature.getId();\n            if (id !== undefined) evaluationContext.featureId = id;\n            else evaluationContext.featureId = null;\n        }\n        if (parsingContext.geometryType) evaluationContext.geometryType = (0, $778943ec39690f8e$export$8da88d86d10c1295)(feature.getGeometry());\n        return evaluator(evaluationContext);\n    };\n}\nfunction $6000539d86fde80c$export$5a130bc4f0a0420b(flatStyles) {\n    const parsingContext = (0, $778943ec39690f8e$export$1c8b4c1584800354)();\n    const length = flatStyles.length;\n    /**\r\n   * @type {Array<StyleEvaluator>}\r\n   */ const evaluators = new Array(length);\n    for(let i = 0; i < length; ++i)evaluators[i] = $6000539d86fde80c$export$a6e5f510497b7388(flatStyles[i], parsingContext);\n    const evaluationContext = (0, $d597295b1f166e98$export$c18f39f0e136c26)();\n    /**\r\n   * @type {Array<Style>}\r\n   */ const styles = new Array(length);\n    return function(feature, resolution) {\n        evaluationContext.properties = feature.getPropertiesInternal();\n        evaluationContext.resolution = resolution;\n        if (parsingContext.featureId) {\n            const id = feature.getId();\n            if (id !== undefined) evaluationContext.featureId = id;\n            else evaluationContext.featureId = null;\n        }\n        let nonNullCount = 0;\n        for(let i = 0; i < length; ++i){\n            const style = evaluators[i](evaluationContext);\n            if (style) {\n                styles[nonNullCount] = style;\n                nonNullCount += 1;\n            }\n        }\n        styles.length = nonNullCount;\n        return styles;\n    };\n}\nfunction $6000539d86fde80c$export$d6ae6a4799989976(rules, context) {\n    const length = rules.length;\n    /**\r\n   * @type {Array<CompiledRule>}\r\n   */ const compiledRules = new Array(length);\n    for(let i = 0; i < length; ++i){\n        const rule = rules[i];\n        const filter = 'filter' in rule ? (0, $d597295b1f166e98$export$b5f535122a9211f0)(rule.filter, (0, $778943ec39690f8e$export$240f7fffab1b25a0), context) : $6000539d86fde80c$var$always;\n        /**\r\n     * @type {Array<StyleEvaluator>}\r\n     */ let styles;\n        if (Array.isArray(rule.style)) {\n            const styleLength = rule.style.length;\n            styles = new Array(styleLength);\n            for(let j = 0; j < styleLength; ++j)styles[j] = $6000539d86fde80c$export$a6e5f510497b7388(rule.style[j], context);\n        } else styles = [\n            $6000539d86fde80c$export$a6e5f510497b7388(rule.style, context)\n        ];\n        compiledRules[i] = {\n            filter: filter,\n            styles: styles\n        };\n    }\n    return function(context) {\n        /**\r\n     * @type {Array<Style>}\r\n     */ const styles = [];\n        let someMatched = false;\n        for(let i = 0; i < length; ++i){\n            const filterEvaluator = compiledRules[i].filter;\n            if (!filterEvaluator(context)) continue;\n            if (rules[i].else && someMatched) continue;\n            someMatched = true;\n            for (const styleEvaluator of compiledRules[i].styles){\n                const style = styleEvaluator(context);\n                if (!style) continue;\n                styles.push(style);\n            }\n        }\n        return styles;\n    };\n}\nfunction $6000539d86fde80c$export$a6e5f510497b7388(flatStyle, context) {\n    const evaluateFill = $6000539d86fde80c$var$buildFill(flatStyle, '', context);\n    const evaluateStroke = $6000539d86fde80c$var$buildStroke(flatStyle, '', context);\n    const evaluateText = $6000539d86fde80c$var$buildText(flatStyle, context);\n    const evaluateImage = $6000539d86fde80c$var$buildImage(flatStyle, context);\n    const evaluateZIndex = $6000539d86fde80c$var$numberEvaluator(flatStyle, 'z-index', context);\n    if (!evaluateFill && !evaluateStroke && !evaluateText && !evaluateImage && !(0, $beaefe87199bb537$export$dd1bc94b04021eeb)(flatStyle)) // assume this is a user error\n    // would be nice to check the properties and suggest \"did you mean...\"\n    throw new Error('No fill, stroke, point, or text symbolizer properties in style: ' + JSON.stringify(flatStyle));\n    const style = new (0, $8c7f6dda98e8cb9c$export$2e2bcd8739ae039)();\n    return function(context) {\n        let empty = true;\n        if (evaluateFill) {\n            const fill = evaluateFill(context);\n            if (fill) empty = false;\n            style.setFill(fill);\n        }\n        if (evaluateStroke) {\n            const stroke = evaluateStroke(context);\n            if (stroke) empty = false;\n            style.setStroke(stroke);\n        }\n        if (evaluateText) {\n            const text = evaluateText(context);\n            if (text) empty = false;\n            style.setText(text);\n        }\n        if (evaluateImage) {\n            const image = evaluateImage(context);\n            if (image) empty = false;\n            style.setImage(image);\n        }\n        if (evaluateZIndex) style.setZIndex(evaluateZIndex(context));\n        if (empty) return null;\n        return style;\n    };\n}\n/**\r\n * @typedef {function(EvaluationContext):Fill|null} FillEvaluator\r\n */ /**\r\n * @param {FlatStyle} flatStyle The flat style.\r\n * @param {string} prefix The property prefix.\r\n * @param {ParsingContext} context The parsing context.\r\n * @return {FillEvaluator?} A function that evaluates to a fill.\r\n */ function $6000539d86fde80c$var$buildFill(flatStyle, prefix, context) {\n    let evaluateColor;\n    if (prefix + 'fill-pattern-src' in flatStyle) evaluateColor = $6000539d86fde80c$var$patternEvaluator(flatStyle, prefix + 'fill-', context);\n    else {\n        if (flatStyle[prefix + 'fill-color'] === 'none') // avoids hit detection\n        return (context)=>null;\n        evaluateColor = $6000539d86fde80c$var$colorLikeEvaluator(flatStyle, prefix + 'fill-color', context);\n    }\n    if (!evaluateColor) return null;\n    const fill = new (0, $d61d1dcaf3c44610$export$2e2bcd8739ae039)();\n    return function(context) {\n        const color = evaluateColor(context);\n        if (color === (0, $322346e1ff7894ca$export$6c844c64a5efe1ee)) return null;\n        fill.setColor(color);\n        return fill;\n    };\n}\n/**\r\n * @typedef {function(EvaluationContext):Stroke|null} StrokeEvaluator\r\n */ /**\r\n * @param {FlatStyle} flatStyle The flat style.\r\n * @param {string} prefix The property prefix.\r\n * @param {ParsingContext} context The parsing context.\r\n * @return {StrokeEvaluator?} A function the evaluates to a stroke.\r\n */ function $6000539d86fde80c$var$buildStroke(flatStyle, prefix, context) {\n    const evaluateWidth = $6000539d86fde80c$var$numberEvaluator(flatStyle, prefix + 'stroke-width', context);\n    const evaluateColor = $6000539d86fde80c$var$colorLikeEvaluator(flatStyle, prefix + 'stroke-color', context);\n    if (!evaluateWidth && !evaluateColor) return null;\n    const evaluateLineCap = $6000539d86fde80c$var$stringEvaluator(flatStyle, prefix + 'stroke-line-cap', context);\n    const evaluateLineJoin = $6000539d86fde80c$var$stringEvaluator(flatStyle, prefix + 'stroke-line-join', context);\n    const evaluateLineDash = $6000539d86fde80c$var$numberArrayEvaluator(flatStyle, prefix + 'stroke-line-dash', context);\n    const evaluateLineDashOffset = $6000539d86fde80c$var$numberEvaluator(flatStyle, prefix + 'stroke-line-dash-offset', context);\n    const evaluateMiterLimit = $6000539d86fde80c$var$numberEvaluator(flatStyle, prefix + 'stroke-miter-limit', context);\n    const stroke = new (0, $f9d0329c5c745263$export$2e2bcd8739ae039)();\n    return function(context) {\n        if (evaluateColor) {\n            const color = evaluateColor(context);\n            if (color === (0, $322346e1ff7894ca$export$6c844c64a5efe1ee)) return null;\n            stroke.setColor(color);\n        }\n        if (evaluateWidth) stroke.setWidth(evaluateWidth(context));\n        if (evaluateLineCap) {\n            const lineCap = evaluateLineCap(context);\n            if (lineCap !== 'butt' && lineCap !== 'round' && lineCap !== 'square') throw new Error('Expected butt, round, or square line cap');\n            stroke.setLineCap(lineCap);\n        }\n        if (evaluateLineJoin) {\n            const lineJoin = evaluateLineJoin(context);\n            if (lineJoin !== 'bevel' && lineJoin !== 'round' && lineJoin !== 'miter') throw new Error('Expected bevel, round, or miter line join');\n            stroke.setLineJoin(lineJoin);\n        }\n        if (evaluateLineDash) stroke.setLineDash(evaluateLineDash(context));\n        if (evaluateLineDashOffset) stroke.setLineDashOffset(evaluateLineDashOffset(context));\n        if (evaluateMiterLimit) stroke.setMiterLimit(evaluateMiterLimit(context));\n        return stroke;\n    };\n}\n/**\r\n * @typedef {function(EvaluationContext):Text} TextEvaluator\r\n */ /**\r\n * @param {FlatStyle} flatStyle The flat style.\r\n * @param {ParsingContext} context The parsing context.\r\n * @return {TextEvaluator?} A function that evaluates to a text symbolizer.\r\n */ function $6000539d86fde80c$var$buildText(flatStyle, context) {\n    const prefix = 'text-';\n    // Currently, an Array<string> may be used for rich text support.  This doesn't\n    // work with our expression syntax where arrays of strings are interpreted as\n    // call expressions.  To support rich text, we could add a 'strings' operator\n    // where all the following arguments would be string values.\n    const evaluateValue = $6000539d86fde80c$var$stringEvaluator(flatStyle, prefix + 'value', context);\n    if (!evaluateValue) return null;\n    const evaluateFill = $6000539d86fde80c$var$buildFill(flatStyle, prefix, context);\n    const evaluateBackgroundFill = $6000539d86fde80c$var$buildFill(flatStyle, prefix + 'background-', context);\n    const evaluateStroke = $6000539d86fde80c$var$buildStroke(flatStyle, prefix, context);\n    const evaluateBackgroundStroke = $6000539d86fde80c$var$buildStroke(flatStyle, prefix + 'background-', context);\n    const evaluateFont = $6000539d86fde80c$var$stringEvaluator(flatStyle, prefix + 'font', context);\n    const evaluateMaxAngle = $6000539d86fde80c$var$numberEvaluator(flatStyle, prefix + 'max-angle', context);\n    const evaluateOffsetX = $6000539d86fde80c$var$numberEvaluator(flatStyle, prefix + 'offset-x', context);\n    const evaluateOffsetY = $6000539d86fde80c$var$numberEvaluator(flatStyle, prefix + 'offset-y', context);\n    const evaluateOverflow = $6000539d86fde80c$var$booleanEvaluator(flatStyle, prefix + 'overflow', context);\n    const evaluatePlacement = $6000539d86fde80c$var$stringEvaluator(flatStyle, prefix + 'placement', context);\n    const evaluateRepeat = $6000539d86fde80c$var$numberEvaluator(flatStyle, prefix + 'repeat', context);\n    const evaluateScale = $6000539d86fde80c$var$sizeLikeEvaluator(flatStyle, prefix + 'scale', context);\n    const evaluateRotateWithView = $6000539d86fde80c$var$booleanEvaluator(flatStyle, prefix + 'rotate-with-view', context);\n    const evaluateRotation = $6000539d86fde80c$var$numberEvaluator(flatStyle, prefix + 'rotation', context);\n    const evaluateAlign = $6000539d86fde80c$var$stringEvaluator(flatStyle, prefix + 'align', context);\n    const evaluateJustify = $6000539d86fde80c$var$stringEvaluator(flatStyle, prefix + 'justify', context);\n    const evaluateBaseline = $6000539d86fde80c$var$stringEvaluator(flatStyle, prefix + 'baseline', context);\n    const evaluateKeepUpright = $6000539d86fde80c$var$booleanEvaluator(flatStyle, prefix + 'keep-upright', context);\n    const evaluatePadding = $6000539d86fde80c$var$numberArrayEvaluator(flatStyle, prefix + 'padding', context);\n    // The following properties are not currently settable\n    const declutterMode = $6000539d86fde80c$var$optionalDeclutterMode(flatStyle, prefix + 'declutter-mode');\n    const text = new (0, $944be50faeff5321$export$2e2bcd8739ae039)({\n        declutterMode: declutterMode\n    });\n    return function(context) {\n        text.setText(evaluateValue(context));\n        if (evaluateFill) text.setFill(evaluateFill(context));\n        if (evaluateBackgroundFill) text.setBackgroundFill(evaluateBackgroundFill(context));\n        if (evaluateStroke) text.setStroke(evaluateStroke(context));\n        if (evaluateBackgroundStroke) text.setBackgroundStroke(evaluateBackgroundStroke(context));\n        if (evaluateFont) text.setFont(evaluateFont(context));\n        if (evaluateMaxAngle) text.setMaxAngle(evaluateMaxAngle(context));\n        if (evaluateOffsetX) text.setOffsetX(evaluateOffsetX(context));\n        if (evaluateOffsetY) text.setOffsetY(evaluateOffsetY(context));\n        if (evaluateOverflow) text.setOverflow(evaluateOverflow(context));\n        if (evaluatePlacement) {\n            const placement = evaluatePlacement(context);\n            if (placement !== 'point' && placement !== 'line') throw new Error('Expected point or line for text-placement');\n            text.setPlacement(placement);\n        }\n        if (evaluateRepeat) text.setRepeat(evaluateRepeat(context));\n        if (evaluateScale) text.setScale(evaluateScale(context));\n        if (evaluateRotateWithView) text.setRotateWithView(evaluateRotateWithView(context));\n        if (evaluateRotation) text.setRotation(evaluateRotation(context));\n        if (evaluateAlign) {\n            const textAlign = evaluateAlign(context);\n            if (textAlign !== 'left' && textAlign !== 'center' && textAlign !== 'right' && textAlign !== 'end' && textAlign !== 'start') throw new Error('Expected left, right, center, start, or end for text-align');\n            text.setTextAlign(textAlign);\n        }\n        if (evaluateJustify) {\n            const justify = evaluateJustify(context);\n            if (justify !== 'left' && justify !== 'right' && justify !== 'center') throw new Error('Expected left, right, or center for text-justify');\n            text.setJustify(justify);\n        }\n        if (evaluateBaseline) {\n            const textBaseline = evaluateBaseline(context);\n            if (textBaseline !== 'bottom' && textBaseline !== 'top' && textBaseline !== 'middle' && textBaseline !== 'alphabetic' && textBaseline !== 'hanging') throw new Error('Expected bottom, top, middle, alphabetic, or hanging for text-baseline');\n            text.setTextBaseline(textBaseline);\n        }\n        if (evaluatePadding) text.setPadding(evaluatePadding(context));\n        if (evaluateKeepUpright) text.setKeepUpright(evaluateKeepUpright(context));\n        return text;\n    };\n}\n/**\r\n * @typedef {function(EvaluationContext):import(\"../../style/Image.js\").default} ImageEvaluator\r\n */ /**\r\n * @param {FlatStyle} flatStyle The flat style.\r\n * @param {ParsingContext} context The parsing context.\r\n * @return {ImageEvaluator?} A function that evaluates to an image symbolizer.\r\n */ function $6000539d86fde80c$var$buildImage(flatStyle, context) {\n    if ('icon-src' in flatStyle) return $6000539d86fde80c$var$buildIcon(flatStyle, context);\n    if ('shape-points' in flatStyle) return $6000539d86fde80c$var$buildShape(flatStyle, context);\n    if ('circle-radius' in flatStyle) return $6000539d86fde80c$var$buildCircle(flatStyle, context);\n    return null;\n}\n/**\r\n * @param {FlatStyle} flatStyle The flat style.\r\n * @param {ParsingContext} context The parsing context.\r\n * @return {ImageEvaluator} A function that evaluates to an image symbolizer.\r\n */ function $6000539d86fde80c$var$buildIcon(flatStyle, context) {\n    const prefix = 'icon-';\n    // required property\n    const srcName = prefix + 'src';\n    const src = $6000539d86fde80c$var$requireString(flatStyle[srcName], srcName);\n    // settable properties\n    const evaluateAnchor = $6000539d86fde80c$var$coordinateEvaluator(flatStyle, prefix + 'anchor', context);\n    const evaluateScale = $6000539d86fde80c$var$sizeLikeEvaluator(flatStyle, prefix + 'scale', context);\n    const evaluateOpacity = $6000539d86fde80c$var$numberEvaluator(flatStyle, prefix + 'opacity', context);\n    const evaluateDisplacement = $6000539d86fde80c$var$coordinateEvaluator(flatStyle, prefix + 'displacement', context);\n    const evaluateRotation = $6000539d86fde80c$var$numberEvaluator(flatStyle, prefix + 'rotation', context);\n    const evaluateRotateWithView = $6000539d86fde80c$var$booleanEvaluator(flatStyle, prefix + 'rotate-with-view', context);\n    // the remaining symbolizer properties are not currently settable\n    const anchorOrigin = $6000539d86fde80c$var$optionalIconOrigin(flatStyle, prefix + 'anchor-origin');\n    const anchorXUnits = $6000539d86fde80c$var$optionalIconAnchorUnits(flatStyle, prefix + 'anchor-x-units');\n    const anchorYUnits = $6000539d86fde80c$var$optionalIconAnchorUnits(flatStyle, prefix + 'anchor-y-units');\n    const color = $6000539d86fde80c$var$optionalColorLike(flatStyle, prefix + 'color');\n    const crossOrigin = $6000539d86fde80c$var$optionalString(flatStyle, prefix + 'cross-origin');\n    const offset = $6000539d86fde80c$var$optionalNumberArray(flatStyle, prefix + 'offset');\n    const offsetOrigin = $6000539d86fde80c$var$optionalIconOrigin(flatStyle, prefix + 'offset-origin');\n    const width = $6000539d86fde80c$var$optionalNumber(flatStyle, prefix + 'width');\n    const height = $6000539d86fde80c$var$optionalNumber(flatStyle, prefix + 'height');\n    const size = $6000539d86fde80c$var$optionalSize(flatStyle, prefix + 'size');\n    const declutterMode = $6000539d86fde80c$var$optionalDeclutterMode(flatStyle, prefix + 'declutter-mode');\n    const icon = new (0, $8463d325b53eeb0c$export$2e2bcd8739ae039)({\n        src: src,\n        anchorOrigin: anchorOrigin,\n        anchorXUnits: anchorXUnits,\n        anchorYUnits: anchorYUnits,\n        color: color,\n        crossOrigin: crossOrigin,\n        offset: offset,\n        offsetOrigin: offsetOrigin,\n        height: height,\n        width: width,\n        size: size,\n        declutterMode: declutterMode\n    });\n    return function(context) {\n        if (evaluateOpacity) icon.setOpacity(evaluateOpacity(context));\n        if (evaluateDisplacement) icon.setDisplacement(evaluateDisplacement(context));\n        if (evaluateRotation) icon.setRotation(evaluateRotation(context));\n        if (evaluateRotateWithView) icon.setRotateWithView(evaluateRotateWithView(context));\n        if (evaluateScale) icon.setScale(evaluateScale(context));\n        if (evaluateAnchor) icon.setAnchor(evaluateAnchor(context));\n        return icon;\n    };\n}\n/**\r\n * @param {FlatStyle} flatStyle The flat style.\r\n * @param {ParsingContext} context The parsing context.\r\n * @return {ImageEvaluator} A function that evaluates to an icon symbolizer.\r\n */ function $6000539d86fde80c$var$buildShape(flatStyle, context) {\n    const prefix = 'shape-';\n    // required property\n    const pointsName = prefix + 'points';\n    const radiusName = prefix + 'radius';\n    const points = $6000539d86fde80c$var$requireNumber(flatStyle[pointsName], pointsName);\n    const radius = $6000539d86fde80c$var$requireNumber(flatStyle[radiusName], radiusName);\n    // settable properties\n    const evaluateFill = $6000539d86fde80c$var$buildFill(flatStyle, prefix, context);\n    const evaluateStroke = $6000539d86fde80c$var$buildStroke(flatStyle, prefix, context);\n    const evaluateScale = $6000539d86fde80c$var$sizeLikeEvaluator(flatStyle, prefix + 'scale', context);\n    const evaluateDisplacement = $6000539d86fde80c$var$coordinateEvaluator(flatStyle, prefix + 'displacement', context);\n    const evaluateRotation = $6000539d86fde80c$var$numberEvaluator(flatStyle, prefix + 'rotation', context);\n    const evaluateRotateWithView = $6000539d86fde80c$var$booleanEvaluator(flatStyle, prefix + 'rotate-with-view', context);\n    // the remaining properties are not currently settable\n    const radius2 = $6000539d86fde80c$var$optionalNumber(flatStyle, prefix + 'radius2');\n    const angle = $6000539d86fde80c$var$optionalNumber(flatStyle, prefix + 'angle');\n    const declutterMode = $6000539d86fde80c$var$optionalDeclutterMode(flatStyle, prefix + 'declutter-mode');\n    const shape = new (0, $3e99c452138b2224$export$2e2bcd8739ae039)({\n        points: points,\n        radius: radius,\n        radius2: radius2,\n        angle: angle,\n        declutterMode: declutterMode\n    });\n    return function(context) {\n        if (evaluateFill) shape.setFill(evaluateFill(context));\n        if (evaluateStroke) shape.setStroke(evaluateStroke(context));\n        if (evaluateDisplacement) shape.setDisplacement(evaluateDisplacement(context));\n        if (evaluateRotation) shape.setRotation(evaluateRotation(context));\n        if (evaluateRotateWithView) shape.setRotateWithView(evaluateRotateWithView(context));\n        if (evaluateScale) shape.setScale(evaluateScale(context));\n        return shape;\n    };\n}\n/**\r\n * @param {FlatStyle} flatStyle The flat style.\r\n * @param {ParsingContext} context The parsing context.\r\n * @return {ImageEvaluator} A function that evaluates to a circle symbolizer.\r\n */ function $6000539d86fde80c$var$buildCircle(flatStyle, context) {\n    const prefix = 'circle-';\n    // settable properties\n    const evaluateFill = $6000539d86fde80c$var$buildFill(flatStyle, prefix, context);\n    const evaluateStroke = $6000539d86fde80c$var$buildStroke(flatStyle, prefix, context);\n    const evaluateRadius = $6000539d86fde80c$var$numberEvaluator(flatStyle, prefix + 'radius', context);\n    const evaluateScale = $6000539d86fde80c$var$sizeLikeEvaluator(flatStyle, prefix + 'scale', context);\n    const evaluateDisplacement = $6000539d86fde80c$var$coordinateEvaluator(flatStyle, prefix + 'displacement', context);\n    const evaluateRotation = $6000539d86fde80c$var$numberEvaluator(flatStyle, prefix + 'rotation', context);\n    const evaluateRotateWithView = $6000539d86fde80c$var$booleanEvaluator(flatStyle, prefix + 'rotate-with-view', context);\n    // the remaining properties are not currently settable\n    const declutterMode = $6000539d86fde80c$var$optionalDeclutterMode(flatStyle, prefix + 'declutter-mode');\n    const circle = new (0, $06150d8570b7481b$export$2e2bcd8739ae039)({\n        radius: 5,\n        declutterMode: declutterMode\n    });\n    return function(context) {\n        if (evaluateRadius) circle.setRadius(evaluateRadius(context));\n        if (evaluateFill) circle.setFill(evaluateFill(context));\n        if (evaluateStroke) circle.setStroke(evaluateStroke(context));\n        if (evaluateDisplacement) circle.setDisplacement(evaluateDisplacement(context));\n        if (evaluateRotation) circle.setRotation(evaluateRotation(context));\n        if (evaluateRotateWithView) circle.setRotateWithView(evaluateRotateWithView(context));\n        if (evaluateScale) circle.setScale(evaluateScale(context));\n        return circle;\n    };\n}\n/**\r\n * @param {FlatStyle} flatStyle The flat style.\r\n * @param {string} name The property name.\r\n * @param {ParsingContext} context The parsing context.\r\n * @return {import('../../expr/cpu.js').NumberEvaluator|undefined} The expression evaluator or undefined.\r\n */ function $6000539d86fde80c$var$numberEvaluator(flatStyle, name, context) {\n    if (!(name in flatStyle)) return undefined;\n    const evaluator = (0, $d597295b1f166e98$export$b5f535122a9211f0)(flatStyle[name], (0, $778943ec39690f8e$export$86a7aca748b1e260), context);\n    return function(context) {\n        return $6000539d86fde80c$var$requireNumber(evaluator(context), name);\n    };\n}\n/**\r\n * @param {FlatStyle} flatStyle The flat style.\r\n * @param {string} name The property name.\r\n * @param {ParsingContext} context The parsing context.\r\n * @return {import('../../expr/cpu.js').StringEvaluator?} The expression evaluator.\r\n */ function $6000539d86fde80c$var$stringEvaluator(flatStyle, name, context) {\n    if (!(name in flatStyle)) return null;\n    const evaluator = (0, $d597295b1f166e98$export$b5f535122a9211f0)(flatStyle[name], (0, $778943ec39690f8e$export$2b93044cbf134323), context);\n    return function(context) {\n        return $6000539d86fde80c$var$requireString(evaluator(context), name);\n    };\n}\nfunction $6000539d86fde80c$var$patternEvaluator(flatStyle, prefix, context) {\n    const srcEvaluator = $6000539d86fde80c$var$stringEvaluator(flatStyle, prefix + 'pattern-src', context);\n    const offsetEvaluator = $6000539d86fde80c$var$sizeEvaluator(flatStyle, prefix + 'pattern-offset', context);\n    const patternSizeEvaluator = $6000539d86fde80c$var$sizeEvaluator(flatStyle, prefix + 'pattern-size', context);\n    const colorEvaluator = $6000539d86fde80c$var$colorLikeEvaluator(flatStyle, prefix + 'color', context);\n    return function(context) {\n        return {\n            src: srcEvaluator(context),\n            offset: offsetEvaluator && offsetEvaluator(context),\n            size: patternSizeEvaluator && patternSizeEvaluator(context),\n            color: colorEvaluator && colorEvaluator(context)\n        };\n    };\n}\n/**\r\n * @param {FlatStyle} flatStyle The flat style.\r\n * @param {string} name The property name.\r\n * @param {ParsingContext} context The parsing context.\r\n * @return {import('../../expr/cpu.js').BooleanEvaluator?} The expression evaluator.\r\n */ function $6000539d86fde80c$var$booleanEvaluator(flatStyle, name, context) {\n    if (!(name in flatStyle)) return null;\n    const evaluator = (0, $d597295b1f166e98$export$b5f535122a9211f0)(flatStyle[name], (0, $778943ec39690f8e$export$240f7fffab1b25a0), context);\n    return function(context) {\n        const value = evaluator(context);\n        if (typeof value !== 'boolean') throw new Error(`Expected a boolean for ${name}`);\n        return value;\n    };\n}\n/**\r\n * @param {FlatStyle} flatStyle The flat style.\r\n * @param {string} name The property name.\r\n * @param {ParsingContext} context The parsing context.\r\n * @return {import('../../expr/cpu.js').ColorLikeEvaluator?} The expression evaluator.\r\n */ function $6000539d86fde80c$var$colorLikeEvaluator(flatStyle, name, context) {\n    if (!(name in flatStyle)) return null;\n    const evaluator = (0, $d597295b1f166e98$export$b5f535122a9211f0)(flatStyle[name], (0, $778943ec39690f8e$export$2cd82751acc0e609), context);\n    return function(context) {\n        return $6000539d86fde80c$var$requireColorLike(evaluator(context), name);\n    };\n}\n/**\r\n * @param {FlatStyle} flatStyle The flat style.\r\n * @param {string} name The property name.\r\n * @param {ParsingContext} context The parsing context.\r\n * @return {import('../../expr/cpu.js').NumberArrayEvaluator?} The expression evaluator.\r\n */ function $6000539d86fde80c$var$numberArrayEvaluator(flatStyle, name, context) {\n    if (!(name in flatStyle)) return null;\n    const evaluator = (0, $d597295b1f166e98$export$b5f535122a9211f0)(flatStyle[name], (0, $778943ec39690f8e$export$d701d0e49f4bcb39), context);\n    return function(context) {\n        return $6000539d86fde80c$var$requireNumberArray(evaluator(context), name);\n    };\n}\n/**\r\n * @param {FlatStyle} flatStyle The flat style.\r\n * @param {string} name The property name.\r\n * @param {ParsingContext} context The parsing context.\r\n * @return {import('../../expr/cpu.js').CoordinateEvaluator?} The expression evaluator.\r\n */ function $6000539d86fde80c$var$coordinateEvaluator(flatStyle, name, context) {\n    if (!(name in flatStyle)) return null;\n    const evaluator = (0, $d597295b1f166e98$export$b5f535122a9211f0)(flatStyle[name], (0, $778943ec39690f8e$export$d701d0e49f4bcb39), context);\n    return function(context) {\n        const array = $6000539d86fde80c$var$requireNumberArray(evaluator(context), name);\n        if (array.length !== 2) throw new Error(`Expected two numbers for ${name}`);\n        return array;\n    };\n}\n/**\r\n * @param {FlatStyle} flatStyle The flat style.\r\n * @param {string} name The property name.\r\n * @param {ParsingContext} context The parsing context.\r\n * @return {import('../../expr/cpu.js').SizeEvaluator?} The expression evaluator.\r\n */ function $6000539d86fde80c$var$sizeEvaluator(flatStyle, name, context) {\n    if (!(name in flatStyle)) return null;\n    const evaluator = (0, $d597295b1f166e98$export$b5f535122a9211f0)(flatStyle[name], (0, $778943ec39690f8e$export$d701d0e49f4bcb39), context);\n    return function(context) {\n        return $6000539d86fde80c$var$requireSize(evaluator(context), name);\n    };\n}\n/**\r\n * @param {FlatStyle} flatStyle The flat style.\r\n * @param {string} name The property name.\r\n * @param {ParsingContext} context The parsing context.\r\n * @return {import('../../expr/cpu.js').SizeLikeEvaluator?} The expression evaluator.\r\n */ function $6000539d86fde80c$var$sizeLikeEvaluator(flatStyle, name, context) {\n    if (!(name in flatStyle)) return null;\n    const evaluator = (0, $d597295b1f166e98$export$b5f535122a9211f0)(flatStyle[name], (0, $778943ec39690f8e$export$d701d0e49f4bcb39) | (0, $778943ec39690f8e$export$86a7aca748b1e260), context);\n    return function(context) {\n        return $6000539d86fde80c$var$requireSizeLike(evaluator(context), name);\n    };\n}\n/**\r\n * @param {FlatStyle} flatStyle The flat style.\r\n * @param {string} property The symbolizer property.\r\n * @return {number|undefined} A number or undefined.\r\n */ function $6000539d86fde80c$var$optionalNumber(flatStyle, property) {\n    const value = flatStyle[property];\n    if (value === undefined) return undefined;\n    if (typeof value !== 'number') throw new Error(`Expected a number for ${property}`);\n    return value;\n}\n/**\r\n * @param {FlatStyle} flatStyle The flat style.\r\n * @param {string} property The symbolizer property.\r\n * @return {import(\"../../size.js\").Size|undefined} A size or undefined.\r\n */ function $6000539d86fde80c$var$optionalSize(flatStyle, property) {\n    const encoded = flatStyle[property];\n    if (encoded === undefined) return undefined;\n    if (typeof encoded === 'number') return (0, $cc435a5409103773$export$a71a825ff42fb8e1)(encoded);\n    if (!Array.isArray(encoded)) throw new Error(`Expected a number or size array for ${property}`);\n    if (encoded.length !== 2 || typeof encoded[0] !== 'number' || typeof encoded[1] !== 'number') throw new Error(`Expected a number or size array for ${property}`);\n    return encoded;\n}\n/**\r\n * @param {FlatStyle} flatStyle The flat style.\r\n * @param {string} property The symbolizer property.\r\n * @return {string|undefined} A string or undefined.\r\n */ function $6000539d86fde80c$var$optionalString(flatStyle, property) {\n    const encoded = flatStyle[property];\n    if (encoded === undefined) return undefined;\n    if (typeof encoded !== 'string') throw new Error(`Expected a string for ${property}`);\n    return encoded;\n}\n/**\r\n * @param {FlatStyle} flatStyle The flat style.\r\n * @param {string} property The symbolizer property.\r\n * @return {import(\"../../style/Icon.js\").IconOrigin|undefined} An icon origin or undefined.\r\n */ function $6000539d86fde80c$var$optionalIconOrigin(flatStyle, property) {\n    const encoded = flatStyle[property];\n    if (encoded === undefined) return undefined;\n    if (encoded !== 'bottom-left' && encoded !== 'bottom-right' && encoded !== 'top-left' && encoded !== 'top-right') throw new Error(`Expected bottom-left, bottom-right, top-left, or top-right for ${property}`);\n    return encoded;\n}\n/**\r\n * @param {FlatStyle} flatStyle The flat style.\r\n * @param {string} property The symbolizer property.\r\n * @return {import(\"../../style/Icon.js\").IconAnchorUnits|undefined} Icon anchor units or undefined.\r\n */ function $6000539d86fde80c$var$optionalIconAnchorUnits(flatStyle, property) {\n    const encoded = flatStyle[property];\n    if (encoded === undefined) return undefined;\n    if (encoded !== 'pixels' && encoded !== 'fraction') throw new Error(`Expected pixels or fraction for ${property}`);\n    return encoded;\n}\n/**\r\n * @param {FlatStyle} flatStyle The flat style.\r\n * @param {string} property The symbolizer property.\r\n * @return {Array<number>|undefined} An array of numbers or undefined.\r\n */ function $6000539d86fde80c$var$optionalNumberArray(flatStyle, property) {\n    const encoded = flatStyle[property];\n    if (encoded === undefined) return undefined;\n    return $6000539d86fde80c$var$requireNumberArray(encoded, property);\n}\n/**\r\n * @param {FlatStyle} flatStyle The flat style.\r\n * @param {string} property The symbolizer property.\r\n * @return {import('../../style/Style.js').DeclutterMode} Icon declutter mode.\r\n */ function $6000539d86fde80c$var$optionalDeclutterMode(flatStyle, property) {\n    const encoded = flatStyle[property];\n    if (encoded === undefined) return undefined;\n    if (typeof encoded !== 'string') throw new Error(`Expected a string for ${property}`);\n    if (encoded !== 'declutter' && encoded !== 'obstacle' && encoded !== 'none') throw new Error(`Expected declutter, obstacle, or none for ${property}`);\n    return encoded;\n}\n/**\r\n * @param {FlatStyle} flatStyle The flat style.\r\n * @param {string} property The symbolizer property.\r\n * @return {string|Array<number>|undefined} A string or an array of color values or undefined.\r\n */ function $6000539d86fde80c$var$optionalColorLike(flatStyle, property) {\n    const encoded = flatStyle[property];\n    if (encoded === undefined) return undefined;\n    return $6000539d86fde80c$var$requireColorLike(encoded, property);\n}\n/**\r\n * @param {any} value The value.\r\n * @param {string} property The property.\r\n * @return {Array<number>} An array of numbers.\r\n */ function $6000539d86fde80c$var$requireNumberArray(value, property) {\n    if (!Array.isArray(value)) throw new Error(`Expected an array for ${property}`);\n    const length = value.length;\n    for(let i = 0; i < length; ++i){\n        if (typeof value[i] !== 'number') throw new Error(`Expected an array of numbers for ${property}`);\n    }\n    return value;\n}\n/**\r\n * @param {any} value The value.\r\n * @param {string} property The property.\r\n * @return {string} A string.\r\n */ function $6000539d86fde80c$var$requireString(value, property) {\n    if (typeof value !== 'string') throw new Error(`Expected a string for ${property}`);\n    return value;\n}\n/**\r\n * @param {any} value The value.\r\n * @param {string} property The property.\r\n * @return {number} A number.\r\n */ function $6000539d86fde80c$var$requireNumber(value, property) {\n    if (typeof value !== 'number') throw new Error(`Expected a number for ${property}`);\n    return value;\n}\n/**\r\n * @param {any} value The value.\r\n * @param {string} property The property.\r\n * @return {Array<number>|string} A color.\r\n */ function $6000539d86fde80c$var$requireColorLike(value, property) {\n    if (typeof value === 'string') return value;\n    const array = $6000539d86fde80c$var$requireNumberArray(value, property);\n    const length = array.length;\n    if (length < 3 || length > 4) throw new Error(`Expected a color with 3 or 4 values for ${property}`);\n    return array;\n}\n/**\r\n * @param {any} value The value.\r\n * @param {string} property The property.\r\n * @return {Array<number>} A number or an array of two numbers.\r\n */ function $6000539d86fde80c$var$requireSize(value, property) {\n    const size = $6000539d86fde80c$var$requireNumberArray(value, property);\n    if (size.length !== 2) throw new Error(`Expected an array of two numbers for ${property}`);\n    return size;\n}\n/**\r\n * @param {any} value The value.\r\n * @param {string} property The property.\r\n * @return {number|Array<number>} A number or an array of two numbers.\r\n */ function $6000539d86fde80c$var$requireSizeLike(value, property) {\n    if (typeof value === 'number') return value;\n    return $6000539d86fde80c$var$requireSize(value, property);\n}\n\n\n\n\n/***\r\n * @template T\r\n * @typedef {T extends import(\"../source/Vector.js\").default<infer U extends import(\"../Feature.js\").FeatureLike> ? U : never} ExtractedFeatureType\r\n */ /**\r\n * @template {import('../Feature').FeatureLike} FeatureType\r\n * @template {import(\"../source/Vector.js\").default<FeatureType>|import(\"../source/VectorTile.js\").default<FeatureType>} VectorSourceType<FeatureType>\r\n * @typedef {Object} Options\r\n * @property {string} [className='ol-layer'] A CSS class name to set to the layer element.\r\n * @property {number} [opacity=1] Opacity (0, 1).\r\n * @property {boolean} [visible=true] Visibility.\r\n * @property {import(\"../extent.js\").Extent} [extent] The bounding extent for layer rendering.  The layer will not be\r\n * rendered outside of this extent.\r\n * @property {number} [zIndex] The z-index for layer rendering.  At rendering time, the layers\r\n * will be ordered, first by Z-index and then by position. When `undefined`, a `zIndex` of 0 is assumed\r\n * for layers that are added to the map's `layers` collection, or `Infinity` when the layer's `setMap()`\r\n * method was used.\r\n * @property {number} [minResolution] The minimum resolution (inclusive) at which this layer will be\r\n * visible.\r\n * @property {number} [maxResolution] The maximum resolution (exclusive) below which this layer will\r\n * be visible.\r\n * @property {number} [minZoom] The minimum view zoom level (exclusive) above which this layer will be\r\n * visible.\r\n * @property {number} [maxZoom] The maximum view zoom level (inclusive) at which this layer will\r\n * be visible.\r\n * @property {import(\"../render.js\").OrderFunction} [renderOrder] Render order. Function to be used when sorting\r\n * features before rendering. By default features are drawn in the order that they are created. Use\r\n * `null` to avoid the sort, but get an undefined draw order.\r\n * @property {number} [renderBuffer=100] The buffer in pixels around the viewport extent used by the\r\n * renderer when getting features from the vector source for the rendering or hit-detection.\r\n * Recommended value: the size of the largest symbol, line width or label.\r\n * @property {VectorSourceType} [source] Source.\r\n * @property {import(\"../Map.js\").default} [map] Sets the layer as overlay on a map. The map will not manage\r\n * this layer in its layers collection, and the layer will be rendered on top. This is useful for\r\n * temporary layers. The standard way to add a layer to a map and have it managed by the map is to\r\n * use [map.addLayer()]{@link import(\"../Map.js\").default#addLayer}.\r\n * @property {boolean|string|number} [declutter=false] Declutter images and text. Any truthy value will enable\r\n * decluttering. Within a layer, a feature rendered before another has higher priority. All layers with the\r\n * same `declutter` value will be decluttered together. The priority is determined by the drawing order of the\r\n * layers with the same `declutter` value. Higher in the layer stack means higher priority. To declutter distinct\r\n * layers or groups of layers separately, use different truthy values for `declutter`.\r\n * @property {import(\"../style/Style.js\").StyleLike|import(\"../style/flat.js\").FlatStyleLike|null} [style] Layer style. When set to `null`, only\r\n * features that have their own style will be rendered. See {@link module:ol/style/Style~Style} for the default style\r\n * which will be used if this is not set.\r\n * @property {import(\"./Base.js\").BackgroundColor} [background] Background color for the layer. If not specified, no background\r\n * will be rendered.\r\n * @property {boolean} [updateWhileAnimating=false] When set to `true`, feature batches will\r\n * be recreated during animations. This means that no vectors will be shown clipped, but the\r\n * setting will have a performance impact for large amounts of vector data. When set to `false`,\r\n * batches will be recreated when no animation is active.\r\n * @property {boolean} [updateWhileInteracting=false] When set to `true`, feature batches will\r\n * be recreated during interactions. See also `updateWhileAnimating`.\r\n * @property {Object<string, *>} [properties] Arbitrary observable properties. Can be accessed with `#get()` and `#set()`.\r\n */ /**\r\n * @enum {string}\r\n * @private\r\n */ const $c8d6dc4c09ed9916$var$Property = {\n    RENDER_ORDER: 'renderOrder'\n};\n/**\r\n * @classdesc\r\n * Vector data that is rendered client-side.\r\n * Note that any property set in the options is set as a {@link module:ol/Object~BaseObject}\r\n * property on the layer object; for example, setting `title: 'My Title'` in the\r\n * options means that `title` is observable, and has get/set accessors.\r\n *\r\n * @template {import('../Feature').FeatureLike} FeatureType\r\n * @template {import(\"../source/Vector.js\").default<FeatureType>|import(\"../source/VectorTile.js\").default<FeatureType>} VectorSourceType<FeatureType>\r\n * @extends {Layer<VectorSourceType, RendererType>}\r\n * @template {import(\"../renderer/canvas/VectorLayer.js\").default|import(\"../renderer/canvas/VectorTileLayer.js\").default|import(\"../renderer/canvas/VectorImageLayer.js\").default|import(\"../renderer/webgl/VectorLayer.js\").default|import(\"../renderer/webgl/PointsLayer.js\").default} RendererType\r\n * @api\r\n */ class $c8d6dc4c09ed9916$var$BaseVectorLayer extends (0, $534f30fce11effcd$export$2e2bcd8739ae039) {\n    /**\r\n   * @param {Options<FeatureType, VectorSourceType>} [options] Options.\r\n   */ constructor(options){\n        options = options ? options : {};\n        const baseOptions = Object.assign({}, options);\n        delete baseOptions.style;\n        delete baseOptions.renderBuffer;\n        delete baseOptions.updateWhileAnimating;\n        delete baseOptions.updateWhileInteracting;\n        super(baseOptions);\n        /**\r\n     * @private\r\n     * @type {string}\r\n     */ this.declutter_ = options.declutter ? String(options.declutter) : undefined;\n        /**\r\n     * @type {number}\r\n     * @private\r\n     */ this.renderBuffer_ = options.renderBuffer !== undefined ? options.renderBuffer : 100;\n        /**\r\n     * User provided style.\r\n     * @type {import(\"../style/Style.js\").StyleLike|import(\"../style/flat.js\").FlatStyleLike}\r\n     * @private\r\n     */ this.style_ = null;\n        /**\r\n     * Style function for use within the library.\r\n     * @type {import(\"../style/Style.js\").StyleFunction|undefined}\r\n     * @private\r\n     */ this.styleFunction_ = undefined;\n        this.setStyle(options.style);\n        /**\r\n     * @type {boolean}\r\n     * @private\r\n     */ this.updateWhileAnimating_ = options.updateWhileAnimating !== undefined ? options.updateWhileAnimating : false;\n        /**\r\n     * @type {boolean}\r\n     * @private\r\n     */ this.updateWhileInteracting_ = options.updateWhileInteracting !== undefined ? options.updateWhileInteracting : false;\n    }\n    /**\r\n   * @return {string} Declutter group.\r\n   * @override\r\n   */ getDeclutter() {\n        return this.declutter_;\n    }\n    /**\r\n   * Get the topmost feature that intersects the given pixel on the viewport. Returns a promise\r\n   * that resolves with an array of features. The array will either contain the topmost feature\r\n   * when a hit was detected, or it will be empty.\r\n   *\r\n   * The hit detection algorithm used for this method is optimized for performance, but is less\r\n   * accurate than the one used in [map.getFeaturesAtPixel()]{@link import(\"../Map.js\").default#getFeaturesAtPixel}.\r\n   * Text is not considered, and icons are only represented by their bounding box instead of the exact\r\n   * image.\r\n   *\r\n   * @param {import(\"../pixel.js\").Pixel} pixel Pixel.\r\n   * @return {Promise<Array<import(\"../Feature\").FeatureLike>>} Promise that resolves with an array of features.\r\n   * @api\r\n   * @override\r\n   */ getFeatures(pixel) {\n        return super.getFeatures(pixel);\n    }\n    /**\r\n   * @return {number|undefined} Render buffer.\r\n   */ getRenderBuffer() {\n        return this.renderBuffer_;\n    }\n    /**\r\n   * @return {import(\"../render.js\").OrderFunction|null|undefined} Render order.\r\n   */ getRenderOrder() {\n        return /** @type {import(\"../render.js\").OrderFunction|null|undefined} */ this.get($c8d6dc4c09ed9916$var$Property.RENDER_ORDER);\n    }\n    /**\r\n   * Get the style for features.  This returns whatever was passed to the `style`\r\n   * option at construction or to the `setStyle` method.\r\n   * @return {import(\"../style/Style.js\").StyleLike|import(\"../style/flat.js\").FlatStyleLike|null|undefined} Layer style.\r\n   * @api\r\n   */ getStyle() {\n        return this.style_;\n    }\n    /**\r\n   * Get the style function.\r\n   * @return {import(\"../style/Style.js\").StyleFunction|undefined} Layer style function.\r\n   * @api\r\n   */ getStyleFunction() {\n        return this.styleFunction_;\n    }\n    /**\r\n   * @return {boolean} Whether the rendered layer should be updated while\r\n   *     animating.\r\n   */ getUpdateWhileAnimating() {\n        return this.updateWhileAnimating_;\n    }\n    /**\r\n   * @return {boolean} Whether the rendered layer should be updated while\r\n   *     interacting.\r\n   */ getUpdateWhileInteracting() {\n        return this.updateWhileInteracting_;\n    }\n    /**\r\n   * Render declutter items for this layer\r\n   * @param {import(\"../Map.js\").FrameState} frameState Frame state.\r\n   * @param {import(\"../layer/Layer.js\").State} layerState Layer state.\r\n   * @override\r\n   */ renderDeclutter(frameState, layerState) {\n        const declutterGroup = this.getDeclutter();\n        if (declutterGroup in frameState.declutter === false) frameState.declutter[declutterGroup] = new (0, (/*@__PURE__*/$parcel$interopDefault($176ca75ee9f69668$exports)))(9);\n        this.getRenderer().renderDeclutter(frameState, layerState);\n    }\n    /**\r\n   * @param {import(\"../render.js\").OrderFunction|null|undefined} renderOrder\r\n   *     Render order.\r\n   */ setRenderOrder(renderOrder) {\n        this.set($c8d6dc4c09ed9916$var$Property.RENDER_ORDER, renderOrder);\n    }\n    /**\r\n   * Set the style for features.  This can be a single style object, an array\r\n   * of styles, or a function that takes a feature and resolution and returns\r\n   * an array of styles. If set to `null`, the layer has no style (a `null` style),\r\n   * so only features that have their own styles will be rendered in the layer. Call\r\n   * `setStyle()` without arguments to reset to the default style. See\r\n   * [the ol/style/Style module]{@link module:ol/style/Style~Style} for information on the default style.\r\n   *\r\n   * If your layer has a static style, you can use [flat style]{@link module:ol/style/flat~FlatStyle} object\r\n   * literals instead of using the `Style` and symbolizer constructors (`Fill`, `Stroke`, etc.):\r\n   * ```js\r\n   * vectorLayer.setStyle({\r\n   *   \"fill-color\": \"yellow\",\r\n   *   \"stroke-color\": \"black\",\r\n   *   \"stroke-width\": 4\r\n   * })\r\n   * ```\r\n   *\r\n   * @param {import(\"../style/Style.js\").StyleLike|import(\"../style/flat.js\").FlatStyleLike|null} [style] Layer style.\r\n   * @api\r\n   */ setStyle(style) {\n        this.style_ = style === undefined ? (0, $8c7f6dda98e8cb9c$export$6865c5ac2f5ce8b6) : style;\n        const styleLike = $c8d6dc4c09ed9916$var$toStyleLike(style);\n        this.styleFunction_ = style === null ? undefined : (0, $8c7f6dda98e8cb9c$export$c314ea3f6b164147)(styleLike);\n        this.changed();\n    }\n    /**\r\n   * @param {boolean|string|number} declutter Declutter images and text.\r\n   * @api\r\n   */ setDeclutter(declutter) {\n        this.declutter_ = declutter ? String(declutter) : undefined;\n        this.changed();\n    }\n}\n/**\r\n * Coerce the allowed style types into a shorter list of types.  Flat styles, arrays of flat\r\n * styles, and arrays of rules are converted into style functions.\r\n *\r\n * @param {import(\"../style/Style.js\").StyleLike|import(\"../style/flat.js\").FlatStyleLike|null} [style] Layer style.\r\n * @return {import(\"../style/Style.js\").StyleLike|null} The style.\r\n */ function $c8d6dc4c09ed9916$var$toStyleLike(style) {\n    if (style === undefined) return 0, $8c7f6dda98e8cb9c$export$6865c5ac2f5ce8b6;\n    if (!style) return null;\n    if (typeof style === 'function') return style;\n    if (style instanceof (0, $8c7f6dda98e8cb9c$export$2e2bcd8739ae039)) return style;\n    if (!Array.isArray(style)) return (0, $6000539d86fde80c$export$5a130bc4f0a0420b)([\n        style\n    ]);\n    if (style.length === 0) return [];\n    const length = style.length;\n    const first = style[0];\n    if (first instanceof (0, $8c7f6dda98e8cb9c$export$2e2bcd8739ae039)) {\n        /**\r\n     * @type {Array<Style>}\r\n     */ const styles = new Array(length);\n        for(let i = 0; i < length; ++i){\n            const candidate = style[i];\n            if (!(candidate instanceof (0, $8c7f6dda98e8cb9c$export$2e2bcd8739ae039))) throw new Error('Expected a list of style instances');\n            styles[i] = candidate;\n        }\n        return styles;\n    }\n    if ('style' in first) {\n        /**\r\n     * @type {Array<import(\"../style/flat.js\").Rule>}\r\n     */ const rules = new Array(length);\n        for(let i = 0; i < length; ++i){\n            const candidate = style[i];\n            if (!('style' in candidate)) throw new Error('Expected a list of rules with a style property');\n            rules[i] = candidate;\n        }\n        return (0, $6000539d86fde80c$export$fc6a94152b1b05a8)(rules);\n    }\n    const flatStyles = /** @type {Array<import(\"../style/flat.js\").FlatStyle>} */ style;\n    return (0, $6000539d86fde80c$export$5a130bc4f0a0420b)(flatStyles);\n}\nvar $c8d6dc4c09ed9916$export$2e2bcd8739ae039 = $c8d6dc4c09ed9916$var$BaseVectorLayer;\n\n\n\n/**\r\n * @module ol/render/Event\r\n */ \nclass $b80dddceb0c42ad4$var$RenderEvent extends (0, $aeedce20e9577100$export$2e2bcd8739ae039) {\n    /**\r\n   * @param {import(\"./EventType.js\").default} type Type.\r\n   * @param {import(\"../transform.js\").Transform} [inversePixelTransform] Transform for\r\n   *     CSS pixels to rendered pixels.\r\n   * @param {import(\"../Map.js\").FrameState} [frameState] Frame state.\r\n   * @param {?(CanvasRenderingContext2D|WebGLRenderingContext)} [context] Context.\r\n   */ constructor(type, inversePixelTransform, frameState, context){\n        super(type);\n        /**\r\n     * Transform from CSS pixels (relative to the top-left corner of the map viewport)\r\n     * to rendered pixels on this event's `context`. Only available when a Canvas renderer is used, null otherwise.\r\n     * @type {import(\"../transform.js\").Transform|undefined}\r\n     * @api\r\n     */ this.inversePixelTransform = inversePixelTransform;\n        /**\r\n     * An object representing the current render frame state.\r\n     * @type {import(\"../Map.js\").FrameState|undefined}\r\n     * @api\r\n     */ this.frameState = frameState;\n        /**\r\n     * Canvas context. Not available when the event is dispatched by the map. For Canvas 2D layers,\r\n     * the context will be the 2D rendering context.  For WebGL layers, the context will be the WebGL\r\n     * context.\r\n     * @type {CanvasRenderingContext2D|WebGLRenderingContext|undefined}\r\n     * @api\r\n     */ this.context = context;\n    }\n}\nvar $b80dddceb0c42ad4$export$2e2bcd8739ae039 = $b80dddceb0c42ad4$var$RenderEvent;\n\n\n\n\n/**\r\n * @module ol/renderer/Map\r\n */ \n\n\n\n\n\n\n\n/**\r\n * @template T\r\n * @typedef HitMatch\r\n * @property {import(\"../Feature.js\").FeatureLike} feature Feature.\r\n * @property {import(\"../layer/Layer.js\").default} layer Layer.\r\n * @property {import(\"../geom/SimpleGeometry.js\").default} geometry Geometry.\r\n * @property {number} distanceSq Squared distance.\r\n * @property {import(\"./vector.js\").FeatureCallback<T>} callback Callback.\r\n */ /**\r\n * @abstract\r\n */ class $b370ab32454a96fd$var$MapRenderer extends (0, $3273ed08087da3da$export$2e2bcd8739ae039) {\n    /**\r\n   * @param {import(\"../Map.js\").default} map Map.\r\n   */ constructor(map){\n        super();\n        /**\r\n     * @private\r\n     * @type {import(\"../Map.js\").default}\r\n     */ this.map_ = map;\n    }\n    /**\r\n   * @abstract\r\n   * @param {import(\"../render/EventType.js\").default} type Event type.\r\n   * @param {import(\"../Map.js\").FrameState} frameState Frame state.\r\n   */ dispatchRenderEvent(type, frameState) {\n        (0, $6c5e11070e371322$export$817eb92a8194bab0)();\n    }\n    /**\r\n   * @param {import(\"../Map.js\").FrameState} frameState FrameState.\r\n   * @protected\r\n   */ calculateMatrices2D(frameState) {\n        const viewState = frameState.viewState;\n        const coordinateToPixelTransform = frameState.coordinateToPixelTransform;\n        const pixelToCoordinateTransform = frameState.pixelToCoordinateTransform;\n        (0, $e22e7611e69f42a9$export$f672e0b6f7222cd7)(coordinateToPixelTransform, frameState.size[0] / 2, frameState.size[1] / 2, 1 / viewState.resolution, -1 / viewState.resolution, -viewState.rotation, -viewState.center[0], -viewState.center[1]);\n        (0, $e22e7611e69f42a9$export$bd70ea2a93c0fa4)(pixelToCoordinateTransform, coordinateToPixelTransform);\n    }\n    /**\r\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\r\n   * @param {import(\"../Map.js\").FrameState} frameState FrameState.\r\n   * @param {number} hitTolerance Hit tolerance in pixels.\r\n   * @param {boolean} checkWrapped Check for wrapped geometries.\r\n   * @param {import(\"./vector.js\").FeatureCallback<T>} callback Feature callback.\r\n   * @param {S} thisArg Value to use as `this` when executing `callback`.\r\n   * @param {function(this: U, import(\"../layer/Layer.js\").default): boolean} layerFilter Layer filter\r\n   *     function, only layers which are visible and for which this function\r\n   *     returns `true` will be tested for features.  By default, all visible\r\n   *     layers will be tested.\r\n   * @param {U} thisArg2 Value to use as `this` when executing `layerFilter`.\r\n   * @return {T|undefined} Callback result.\r\n   * @template S,T,U\r\n   */ forEachFeatureAtCoordinate(coordinate, frameState, hitTolerance, checkWrapped, callback, thisArg, layerFilter, thisArg2) {\n        let result;\n        const viewState = frameState.viewState;\n        /**\r\n     * @param {boolean} managed Managed layer.\r\n     * @param {import(\"../Feature.js\").FeatureLike} feature Feature.\r\n     * @param {import(\"../layer/Layer.js\").default} layer Layer.\r\n     * @param {import(\"../geom/Geometry.js\").default} geometry Geometry.\r\n     * @return {T|undefined} Callback result.\r\n     */ function forEachFeatureAtCoordinate(managed, feature, layer, geometry) {\n            return callback.call(thisArg, feature, managed ? layer : null, geometry);\n        }\n        const projection = viewState.projection;\n        const translatedCoordinate = (0, $1bd0a226f9a16141$export$39a9ce3624977b84)(coordinate.slice(), projection);\n        const offsets = [\n            [\n                0,\n                0\n            ]\n        ];\n        if (projection.canWrapX() && checkWrapped) {\n            const projectionExtent = projection.getExtent();\n            const worldWidth = (0, $6da4c8ed3074c92b$export$3c49c185de0c2bfc)(projectionExtent);\n            offsets.push([\n                -worldWidth,\n                0\n            ], [\n                worldWidth,\n                0\n            ]);\n        }\n        const layerStates = frameState.layerStatesArray;\n        const numLayers = layerStates.length;\n        const matches = /** @type {Array<HitMatch<T>>} */ [];\n        const tmpCoord = [];\n        for(let i = 0; i < offsets.length; i++)for(let j = numLayers - 1; j >= 0; --j){\n            const layerState = layerStates[j];\n            const layer = layerState.layer;\n            if (layer.hasRenderer() && (0, $534f30fce11effcd$export$acb1e9cb9ce4ca56)(layerState, viewState) && layerFilter.call(thisArg2, layer)) {\n                const layerRenderer = layer.getRenderer();\n                const source = layer.getSource();\n                if (layerRenderer && source) {\n                    const coordinates = source.getWrapX() ? translatedCoordinate : coordinate;\n                    const callback = forEachFeatureAtCoordinate.bind(null, layerState.managed);\n                    tmpCoord[0] = coordinates[0] + offsets[i][0];\n                    tmpCoord[1] = coordinates[1] + offsets[i][1];\n                    result = layerRenderer.forEachFeatureAtCoordinate(tmpCoord, frameState, hitTolerance, callback, matches);\n                }\n                if (result) return result;\n            }\n        }\n        if (matches.length === 0) return undefined;\n        const order = 1 / matches.length;\n        matches.forEach((m, i)=>m.distanceSq += i * order);\n        matches.sort((a, b)=>a.distanceSq - b.distanceSq);\n        matches.some((m)=>{\n            return result = m.callback(m.feature, m.layer, m.geometry);\n        });\n        return result;\n    }\n    /**\r\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\r\n   * @param {import(\"../Map.js\").FrameState} frameState FrameState.\r\n   * @param {number} hitTolerance Hit tolerance in pixels.\r\n   * @param {boolean} checkWrapped Check for wrapped geometries.\r\n   * @param {function(this: U, import(\"../layer/Layer.js\").default): boolean} layerFilter Layer filter\r\n   *     function, only layers which are visible and for which this function\r\n   *     returns `true` will be tested for features.  By default, all visible\r\n   *     layers will be tested.\r\n   * @param {U} thisArg Value to use as `this` when executing `layerFilter`.\r\n   * @return {boolean} Is there a feature at the given coordinate?\r\n   * @template U\r\n   */ hasFeatureAtCoordinate(coordinate, frameState, hitTolerance, checkWrapped, layerFilter, thisArg) {\n        const hasFeature = this.forEachFeatureAtCoordinate(coordinate, frameState, hitTolerance, checkWrapped, (0, $013a1733c226ec50$export$22e23a2304399231), this, layerFilter, thisArg);\n        return hasFeature !== undefined;\n    }\n    /**\r\n   * @return {import(\"../Map.js\").default} Map.\r\n   */ getMap() {\n        return this.map_;\n    }\n    /**\r\n   * Render.\r\n   * @abstract\r\n   * @param {?import(\"../Map.js\").FrameState} frameState Frame state.\r\n   */ renderFrame(frameState) {\n        (0, $6c5e11070e371322$export$817eb92a8194bab0)();\n    }\n    /**\r\n   * @param {import(\"../Map.js\").FrameState} frameState Frame state.\r\n   * @protected\r\n   */ scheduleExpireIconCache(frameState) {\n        if ((0, $f351daabfe6e2d22$export$747ccdf771a87ab8).canExpireCache()) frameState.postRenderFunctions.push($b370ab32454a96fd$var$expireIconCache);\n    }\n}\n/**\r\n * @param {import(\"../Map.js\").default} map Map.\r\n * @param {import(\"../Map.js\").FrameState} frameState Frame state.\r\n */ function $b370ab32454a96fd$var$expireIconCache(map, frameState) {\n    (0, $f351daabfe6e2d22$export$747ccdf771a87ab8).expire();\n}\nvar $b370ab32454a96fd$export$2e2bcd8739ae039 = $b370ab32454a96fd$var$MapRenderer;\n\n\n/**\r\n * @classdesc\r\n * Canvas map renderer.\r\n * @api\r\n */ class $fa78c97693b12120$var$CompositeMapRenderer extends (0, $b370ab32454a96fd$export$2e2bcd8739ae039) {\n    /**\r\n   * @param {import(\"../Map.js\").default} map Map.\r\n   */ constructor(map){\n        super(map);\n        /**\r\n     * @private\r\n     * @type {import(\"../events.js\").EventsKey}\r\n     */ this.fontChangeListenerKey_ = (0, $d5bf8abd656a3cdc$export$63174c828edd6ff8)((0, $d4aabc5c971073f1$export$1d36981fcadac93b), (0, $e881b5dca21eb5d4$export$2e2bcd8739ae039).PROPERTYCHANGE, map.redrawText, map);\n        /**\r\n     * @private\r\n     * @type {HTMLDivElement}\r\n     */ this.element_ = document.createElement('div');\n        const style = this.element_.style;\n        style.position = 'absolute';\n        style.width = '100%';\n        style.height = '100%';\n        style.zIndex = '0';\n        this.element_.className = (0, $ce07df6d5d4656f1$export$1afde3d6e16a7b29) + ' ol-layers';\n        const container = map.getViewport();\n        container.insertBefore(this.element_, container.firstChild || null);\n        /**\r\n     * @private\r\n     * @type {Array<HTMLElement>}\r\n     */ this.children_ = [];\n        /**\r\n     * @private\r\n     * @type {boolean}\r\n     */ this.renderedVisible_ = true;\n    }\n    /**\r\n   * @param {import(\"../render/EventType.js\").default} type Event type.\r\n   * @param {import(\"../Map.js\").FrameState} frameState Frame state.\r\n   * @override\r\n   */ dispatchRenderEvent(type, frameState) {\n        const map = this.getMap();\n        if (map.hasListener(type)) {\n            const event = new (0, $b80dddceb0c42ad4$export$2e2bcd8739ae039)(type, undefined, frameState);\n            map.dispatchEvent(event);\n        }\n    }\n    /**\r\n   * @override\r\n   */ disposeInternal() {\n        (0, $d5bf8abd656a3cdc$export$b0a21c8b3c1c921)(this.fontChangeListenerKey_);\n        this.element_.remove();\n        super.disposeInternal();\n    }\n    /**\r\n   * Render.\r\n   * @param {?import(\"../Map.js\").FrameState} frameState Frame state.\r\n   * @override\r\n   */ renderFrame(frameState) {\n        if (!frameState) {\n            if (this.renderedVisible_) {\n                this.element_.style.display = 'none';\n                this.renderedVisible_ = false;\n            }\n            return;\n        }\n        this.calculateMatrices2D(frameState);\n        this.dispatchRenderEvent((0, $f5e92a4d985a2824$export$2e2bcd8739ae039).PRECOMPOSE, frameState);\n        const layerStatesArray = frameState.layerStatesArray.sort((a, b)=>a.zIndex - b.zIndex);\n        const declutter = layerStatesArray.some((layerState)=>layerState.layer instanceof (0, $c8d6dc4c09ed9916$export$2e2bcd8739ae039) && layerState.layer.getDeclutter());\n        if (declutter) // Some layers need decluttering, turn on deferred rendering hint\n        frameState.declutter = {};\n        const viewState = frameState.viewState;\n        this.children_.length = 0;\n        const renderedLayerStates = [];\n        let previousElement = null;\n        for(let i = 0, ii = layerStatesArray.length; i < ii; ++i){\n            const layerState = layerStatesArray[i];\n            frameState.layerIndex = i;\n            const layer = layerState.layer;\n            const sourceState = layer.getSourceState();\n            if (!(0, $534f30fce11effcd$export$acb1e9cb9ce4ca56)(layerState, viewState) || sourceState != 'ready' && sourceState != 'undefined') {\n                layer.unrender();\n                continue;\n            }\n            const element = layer.render(frameState, previousElement);\n            if (!element) continue;\n            if (element !== previousElement) {\n                this.children_.push(element);\n                previousElement = element;\n            }\n            renderedLayerStates.push(layerState);\n        }\n        this.declutter(frameState, renderedLayerStates);\n        (0, $075f937d7366f1a2$export$caeacfe04f52533a)(this.element_, this.children_);\n        this.dispatchRenderEvent((0, $f5e92a4d985a2824$export$2e2bcd8739ae039).POSTCOMPOSE, frameState);\n        if (!this.renderedVisible_) {\n            this.element_.style.display = '';\n            this.renderedVisible_ = true;\n        }\n        this.scheduleExpireIconCache(frameState);\n    }\n    /**\r\n   * @param {import(\"../Map.js\").FrameState} frameState Frame state.\r\n   * @param {Array<import('../layer/Layer.js').State>} layerStates Layers.\r\n   */ declutter(frameState, layerStates) {\n        if (!frameState.declutter) return;\n        for(let i = layerStates.length - 1; i >= 0; --i){\n            const layerState = layerStates[i];\n            const layer = layerState.layer;\n            if (layer.getDeclutter()) layer.renderDeclutter(frameState, layerState);\n        }\n        layerStates.forEach((layerState)=>layerState.layer.renderDeferred(frameState));\n    }\n}\nvar $fa78c97693b12120$export$2e2bcd8739ae039 = $fa78c97693b12120$var$CompositeMapRenderer;\n\n\n\n\n\n/**\r\n * State of the current frame. Only `pixelRatio`, `time` and `viewState` should\r\n * be used in applications.\r\n * @typedef {Object} FrameState\r\n * @property {number} pixelRatio The pixel ratio of the frame.\r\n * @property {number} time The time when rendering of the frame was requested.\r\n * @property {import(\"./View.js\").State} viewState The state of the current view.\r\n * @property {boolean} animate Animate.\r\n * @property {import(\"./transform.js\").Transform} coordinateToPixelTransform CoordinateToPixelTransform.\r\n * @property {Object<string, import(\"rbush\").default<import('./render/canvas/Executor.js').DeclutterEntry>>|null} declutter\r\n * Declutter trees by declutter group.\r\n * When null, no decluttering is needed because no layers have decluttering enabled.\r\n * @property {null|import(\"./extent.js\").Extent} extent Extent (in view projection coordinates).\r\n * @property {import(\"./extent.js\").Extent} [nextExtent] Next extent during an animation series.\r\n * @property {number} index Index.\r\n * @property {Array<import(\"./layer/Layer.js\").State>} layerStatesArray LayerStatesArray.\r\n * @property {number} layerIndex LayerIndex.\r\n * @property {import(\"./transform.js\").Transform} pixelToCoordinateTransform PixelToCoordinateTransform.\r\n * @property {Array<PostRenderFunction>} postRenderFunctions PostRenderFunctions.\r\n * @property {import(\"./size.js\").Size} size Size.\r\n * @property {TileQueue} tileQueue TileQueue.\r\n * @property {!Object<string, Object<string, boolean>>} usedTiles UsedTiles.\r\n * @property {Array<number>} viewHints ViewHints.\r\n * @property {!Object<string, Object<string, boolean>>} wantedTiles WantedTiles.\r\n * @property {string} mapId The id of the map.\r\n * @property {Object<string, boolean>} renderTargets Identifiers of previously rendered elements.\r\n */ /**\r\n * @typedef {function(Map, FrameState): any} PostRenderFunction\r\n */ /**\r\n * @typedef {Object} AtPixelOptions\r\n * @property {undefined|function(import(\"./layer/Layer.js\").default<import(\"./source/Source\").default>): boolean} [layerFilter] Layer filter\r\n * function. The filter function will receive one argument, the\r\n * {@link module:ol/layer/Layer~Layer layer-candidate} and it should return a boolean value.\r\n * Only layers which are visible and for which this function returns `true`\r\n * will be tested for features. By default, all visible layers will be tested.\r\n * @property {number} [hitTolerance=0] Hit-detection tolerance in css pixels. Pixels\r\n * inside the radius around the given position will be checked for features.\r\n * @property {boolean} [checkWrapped=true] Check-Wrapped Will check for wrapped geometries inside the range of\r\n *   +/- 1 world width. Works only if a projection is used that can be wrapped.\r\n */ /**\r\n * @typedef {Object} MapOptionsInternal\r\n * @property {Collection<import(\"./control/Control.js\").default>} [controls] Controls.\r\n * @property {Collection<import(\"./interaction/Interaction.js\").default>} [interactions] Interactions.\r\n * @property {HTMLElement|Document} keyboardEventTarget KeyboardEventTarget.\r\n * @property {Collection<import(\"./Overlay.js\").default>} overlays Overlays.\r\n * @property {Object<string, *>} values Values.\r\n */ /**\r\n * @typedef {import(\"./ObjectEventType\").Types|'change:layergroup'|'change:size'|'change:target'|'change:view'} MapObjectEventTypes\r\n */ /***\r\n * @template Return\r\n * @typedef {import(\"./Observable\").OnSignature<import(\"./Observable\").EventTypes, import(\"./events/Event.js\").default, Return> &\r\n *    import(\"./Observable\").OnSignature<MapObjectEventTypes, import(\"./Object\").ObjectEvent, Return> &\r\n *    import(\"./Observable\").OnSignature<import(\"./MapBrowserEventType\").Types, import(\"./MapBrowserEvent\").default, Return> &\r\n *    import(\"./Observable\").OnSignature<import(\"./MapEventType\").Types, import(\"./MapEvent\").default, Return> &\r\n *    import(\"./Observable\").OnSignature<import(\"./render/EventType\").MapRenderEventTypes, import(\"./render/Event\").default, Return> &\r\n *    import(\"./Observable\").CombinedOnSignature<import(\"./Observable\").EventTypes|MapObjectEventTypes|\r\n *      import(\"./MapBrowserEventType\").Types|import(\"./MapEventType\").Types|\r\n *      import(\"./render/EventType\").MapRenderEventTypes, Return>} MapEventHandler\r\n */ /**\r\n * Object literal with config options for the map.\r\n * @typedef {Object} MapOptions\r\n * @property {Collection<import(\"./control/Control.js\").default>|Array<import(\"./control/Control.js\").default>} [controls]\r\n * Controls initially added to the map. If not specified,\r\n * {@link module:ol/control/defaults.defaults} is used.\r\n * @property {number} [pixelRatio=window.devicePixelRatio] The ratio between\r\n * physical pixels and device-independent pixels (dips) on the device.\r\n * @property {Collection<import(\"./interaction/Interaction.js\").default>|Array<import(\"./interaction/Interaction.js\").default>} [interactions]\r\n * Interactions that are initially added to the map. If not specified,\r\n * {@link module:ol/interaction/defaults.defaults} is used.\r\n * @property {HTMLElement|Document|string} [keyboardEventTarget] The element to\r\n * listen to keyboard events on. This determines when the `KeyboardPan` and\r\n * `KeyboardZoom` interactions trigger. For example, if this option is set to\r\n * `document` the keyboard interactions will always trigger. If this option is\r\n * not specified, the element the library listens to keyboard events on is the\r\n * map target (i.e. the user-provided div for the map). If this is not\r\n * `document`, the target element needs to be focused for key events to be\r\n * emitted, requiring that the target element has a `tabindex` attribute.\r\n * @property {Array<import(\"./layer/Base.js\").default>|Collection<import(\"./layer/Base.js\").default>|LayerGroup} [layers]\r\n * Layers. If this is not defined, a map with no layers will be rendered. Note\r\n * that layers are rendered in the order supplied, so if you want, for example,\r\n * a vector layer to appear on top of a tile layer, it must come after the tile\r\n * layer.\r\n * @property {number} [maxTilesLoading=16] Maximum number tiles to load\r\n * simultaneously.\r\n * @property {number} [moveTolerance=1] The minimum distance in pixels the\r\n * cursor must move to be detected as a map move event instead of a click.\r\n * Increasing this value can make it easier to click on the map.\r\n * @property {Collection<import(\"./Overlay.js\").default>|Array<import(\"./Overlay.js\").default>} [overlays]\r\n * Overlays initially added to the map. By default, no overlays are added.\r\n * @property {HTMLElement|string} [target] The container for the map, either the\r\n * element itself or the `id` of the element. If not specified at construction\r\n * time, {@link module:ol/Map~Map#setTarget} must be called for the map to be\r\n * rendered. If passed by element, the container can be in a secondary document.\r\n * For accessibility (focus and keyboard events for map navigation), the `target` element must have a\r\n *  properly configured `tabindex` attribute. If the `target` element is inside a Shadow DOM, the\r\n *  `tabindex` atribute must be set on the custom element's host element.\r\n * **Note:** CSS `transform` support for the target element is limited to `scale`.\r\n * @property {View|Promise<import(\"./View.js\").ViewOptions>} [view] The map's view.  No layer sources will be\r\n * fetched unless this is specified at construction time or through\r\n * {@link module:ol/Map~Map#setView}.\r\n */ /**\r\n * @param {import(\"./layer/Base.js\").default} layer Layer.\r\n */ function $41aa29ae0c4b607a$var$removeLayerMapProperty(layer) {\n    if (layer instanceof (0, $534f30fce11effcd$export$2e2bcd8739ae039)) {\n        layer.setMapInternal(null);\n        return;\n    }\n    if (layer instanceof (0, $0b703156bb914e6f$export$2e2bcd8739ae039)) layer.getLayers().forEach($41aa29ae0c4b607a$var$removeLayerMapProperty);\n}\n/**\r\n * @param {import(\"./layer/Base.js\").default} layer Layer.\r\n * @param {Map} map Map.\r\n */ function $41aa29ae0c4b607a$var$setLayerMapProperty(layer, map) {\n    if (layer instanceof (0, $534f30fce11effcd$export$2e2bcd8739ae039)) {\n        layer.setMapInternal(map);\n        return;\n    }\n    if (layer instanceof (0, $0b703156bb914e6f$export$2e2bcd8739ae039)) {\n        const layers = layer.getLayers().getArray();\n        for(let i = 0, ii = layers.length; i < ii; ++i)$41aa29ae0c4b607a$var$setLayerMapProperty(layers[i], map);\n    }\n}\n/**\r\n * @classdesc\r\n * The map is the core component of OpenLayers. For a map to render, a view,\r\n * one or more layers, and a target container are needed:\r\n *\r\n *     import Map from 'ol/Map.js';\r\n *     import View from 'ol/View.js';\r\n *     import TileLayer from 'ol/layer/Tile.js';\r\n *     import OSM from 'ol/source/OSM.js';\r\n *\r\n *     const map = new Map({\r\n *       view: new View({\r\n *         center: [0, 0],\r\n *         zoom: 1,\r\n *       }),\r\n *       layers: [\r\n *         new TileLayer({\r\n *           source: new OSM(),\r\n *         }),\r\n *       ],\r\n *       target: 'map',\r\n *     });\r\n *\r\n * The above snippet creates a map using a {@link module:ol/layer/Tile~TileLayer} to\r\n * display {@link module:ol/source/OSM~OSM} OSM data and render it to a DOM\r\n * element with the id `map`.\r\n *\r\n * The constructor places a viewport container (with CSS class name\r\n * `ol-viewport`) in the target element (see `getViewport()`), and then two\r\n * further elements within the viewport: one with CSS class name\r\n * `ol-overlaycontainer-stopevent` for controls and some overlays, and one with\r\n * CSS class name `ol-overlaycontainer` for other overlays (see the `stopEvent`\r\n * option of {@link module:ol/Overlay~Overlay} for the difference). The map\r\n * itself is placed in a further element within the viewport.\r\n *\r\n * Layers are stored as a {@link module:ol/Collection~Collection} in\r\n * layerGroups. A top-level group is provided by the library. This is what is\r\n * accessed by `getLayerGroup` and `setLayerGroup`. Layers entered in the\r\n * options are added to this group, and `addLayer` and `removeLayer` change the\r\n * layer collection in the group. `getLayers` is a convenience function for\r\n * `getLayerGroup().getLayers()`. Note that {@link module:ol/layer/Group~LayerGroup}\r\n * is a subclass of {@link module:ol/layer/Base~BaseLayer}, so layers entered in the\r\n * options or added with `addLayer` can be groups, which can contain further\r\n * groups, and so on.\r\n *\r\n * @fires import(\"./MapBrowserEvent.js\").MapBrowserEvent\r\n * @fires import(\"./MapEvent.js\").MapEvent\r\n * @fires import(\"./render/Event.js\").default#precompose\r\n * @fires import(\"./render/Event.js\").default#postcompose\r\n * @fires import(\"./render/Event.js\").default#rendercomplete\r\n * @api\r\n */ class $41aa29ae0c4b607a$var$Map extends (0, $b68b3d6e32e3074a$export$2e2bcd8739ae039) {\n    /**\r\n   * @param {MapOptions} [options] Map options.\r\n   */ constructor(options){\n        super();\n        options = options || {};\n        /***\r\n     * @type {MapEventHandler<import(\"./events\").EventsKey>}\r\n     */ this.on;\n        /***\r\n     * @type {MapEventHandler<import(\"./events\").EventsKey>}\r\n     */ this.once;\n        /***\r\n     * @type {MapEventHandler<void>}\r\n     */ this.un;\n        const optionsInternal = $41aa29ae0c4b607a$var$createOptionsInternal(options);\n        /**\r\n     * @private\r\n     * @type {boolean}\r\n     */ this.renderComplete_ = false;\n        /**\r\n     * @private\r\n     * @type {boolean}\r\n     */ this.loaded_ = true;\n        /** @private */ this.boundHandleBrowserEvent_ = this.handleBrowserEvent.bind(this);\n        /**\r\n     * @type {number}\r\n     * @private\r\n     */ this.maxTilesLoading_ = options.maxTilesLoading !== undefined ? options.maxTilesLoading : 16;\n        /**\r\n     * @private\r\n     * @type {number}\r\n     */ this.pixelRatio_ = options.pixelRatio !== undefined ? options.pixelRatio : (0, $67c66761d21428d0$export$6b83a0446fc26f94);\n        /**\r\n     * @private\r\n     * @type {ReturnType<typeof setTimeout>}\r\n     */ this.postRenderTimeoutHandle_;\n        /**\r\n     * @private\r\n     * @type {number|undefined}\r\n     */ this.animationDelayKey_;\n        /**\r\n     * @private\r\n     */ this.animationDelay_ = this.animationDelay_.bind(this);\n        /**\r\n     * @private\r\n     * @type {import(\"./transform.js\").Transform}\r\n     */ this.coordinateToPixelTransform_ = (0, $e22e7611e69f42a9$export$185802fd694ee1f5)();\n        /**\r\n     * @private\r\n     * @type {import(\"./transform.js\").Transform}\r\n     */ this.pixelToCoordinateTransform_ = (0, $e22e7611e69f42a9$export$185802fd694ee1f5)();\n        /**\r\n     * @private\r\n     * @type {number}\r\n     */ this.frameIndex_ = 0;\n        /**\r\n     * @private\r\n     * @type {?FrameState}\r\n     */ this.frameState_ = null;\n        /**\r\n     * The extent at the previous 'moveend' event.\r\n     * @private\r\n     * @type {import(\"./extent.js\").Extent}\r\n     */ this.previousExtent_ = null;\n        /**\r\n     * @private\r\n     * @type {?import(\"./events.js\").EventsKey}\r\n     */ this.viewPropertyListenerKey_ = null;\n        /**\r\n     * @private\r\n     * @type {?import(\"./events.js\").EventsKey}\r\n     */ this.viewChangeListenerKey_ = null;\n        /**\r\n     * @private\r\n     * @type {?Array<import(\"./events.js\").EventsKey>}\r\n     */ this.layerGroupPropertyListenerKeys_ = null;\n        /**\r\n     * @private\r\n     * @type {!HTMLElement}\r\n     */ this.viewport_ = document.createElement('div');\n        this.viewport_.className = 'ol-viewport' + ('ontouchstart' in window ? ' ol-touch' : '');\n        this.viewport_.style.position = 'relative';\n        this.viewport_.style.overflow = 'hidden';\n        this.viewport_.style.width = '100%';\n        this.viewport_.style.height = '100%';\n        /**\r\n     * @private\r\n     * @type {!HTMLElement}\r\n     */ this.overlayContainer_ = document.createElement('div');\n        this.overlayContainer_.style.position = 'absolute';\n        this.overlayContainer_.style.zIndex = '0';\n        this.overlayContainer_.style.width = '100%';\n        this.overlayContainer_.style.height = '100%';\n        this.overlayContainer_.style.pointerEvents = 'none';\n        this.overlayContainer_.className = 'ol-overlaycontainer';\n        this.viewport_.appendChild(this.overlayContainer_);\n        /**\r\n     * @private\r\n     * @type {!HTMLElement}\r\n     */ this.overlayContainerStopEvent_ = document.createElement('div');\n        this.overlayContainerStopEvent_.style.position = 'absolute';\n        this.overlayContainerStopEvent_.style.zIndex = '0';\n        this.overlayContainerStopEvent_.style.width = '100%';\n        this.overlayContainerStopEvent_.style.height = '100%';\n        this.overlayContainerStopEvent_.style.pointerEvents = 'none';\n        this.overlayContainerStopEvent_.className = 'ol-overlaycontainer-stopevent';\n        this.viewport_.appendChild(this.overlayContainerStopEvent_);\n        /**\r\n     * @private\r\n     * @type {MapBrowserEventHandler}\r\n     */ this.mapBrowserEventHandler_ = null;\n        /**\r\n     * @private\r\n     * @type {number}\r\n     */ this.moveTolerance_ = options.moveTolerance;\n        /**\r\n     * @private\r\n     * @type {HTMLElement|Document}\r\n     */ this.keyboardEventTarget_ = optionsInternal.keyboardEventTarget;\n        /**\r\n     * @private\r\n     * @type {?Array<import(\"./events.js\").EventsKey>}\r\n     */ this.targetChangeHandlerKeys_ = null;\n        /**\r\n     * @private\r\n     * @type {HTMLElement|null}\r\n     */ this.targetElement_ = null;\n        /**\r\n     * @private\r\n     * @type {ResizeObserver}\r\n     */ this.resizeObserver_ = new ResizeObserver(()=>this.updateSize());\n        /**\r\n     * @type {Collection<import(\"./control/Control.js\").default>}\r\n     * @protected\r\n     */ this.controls = optionsInternal.controls || (0, $af7495b2f822d5e9$export$ebe90cb607ad99e)();\n        /**\r\n     * @type {Collection<import(\"./interaction/Interaction.js\").default>}\r\n     * @protected\r\n     */ this.interactions = optionsInternal.interactions || (0, $e3fbd36d629ecc04$export$ebe90cb607ad99e)({\n            onFocusOnly: true\n        });\n        /**\r\n     * @type {Collection<import(\"./Overlay.js\").default>}\r\n     * @private\r\n     */ this.overlays_ = optionsInternal.overlays;\n        /**\r\n     * A lookup of overlays by id.\r\n     * @private\r\n     * @type {Object<string, import(\"./Overlay.js\").default>}\r\n     */ this.overlayIdIndex_ = {};\n        /**\r\n     * @type {import(\"./renderer/Map.js\").default|null}\r\n     * @private\r\n     */ this.renderer_ = null;\n        /**\r\n     * @private\r\n     * @type {!Array<PostRenderFunction>}\r\n     */ this.postRenderFunctions_ = [];\n        /**\r\n     * @private\r\n     * @type {TileQueue}\r\n     */ this.tileQueue_ = new (0, $4c51fd53052a6bbc$export$2e2bcd8739ae039)(this.getTilePriority.bind(this), this.handleTileChange_.bind(this));\n        this.addChangeListener((0, $07fa325567004bb7$export$2e2bcd8739ae039).LAYERGROUP, this.handleLayerGroupChanged_);\n        this.addChangeListener((0, $07fa325567004bb7$export$2e2bcd8739ae039).VIEW, this.handleViewChanged_);\n        this.addChangeListener((0, $07fa325567004bb7$export$2e2bcd8739ae039).SIZE, this.handleSizeChanged_);\n        this.addChangeListener((0, $07fa325567004bb7$export$2e2bcd8739ae039).TARGET, this.handleTargetChanged_);\n        // setProperties will trigger the rendering of the map if the map\n        // is \"defined\" already.\n        this.setProperties(optionsInternal.values);\n        const map = this;\n        if (options.view && !(options.view instanceof (0, $70364d0195659942$export$2e2bcd8739ae039))) options.view.then(function(viewOptions) {\n            map.setView(new (0, $70364d0195659942$export$2e2bcd8739ae039)(viewOptions));\n        });\n        this.controls.addEventListener((0, $161dd067fe2d672c$export$2e2bcd8739ae039).ADD, /**\r\n       * @param {import(\"./Collection.js\").CollectionEvent<import(\"./control/Control.js\").default>} event CollectionEvent\r\n       */ (event)=>{\n            event.element.setMap(this);\n        });\n        this.controls.addEventListener((0, $161dd067fe2d672c$export$2e2bcd8739ae039).REMOVE, /**\r\n       * @param {import(\"./Collection.js\").CollectionEvent<import(\"./control/Control.js\").default>} event CollectionEvent.\r\n       */ (event)=>{\n            event.element.setMap(null);\n        });\n        this.interactions.addEventListener((0, $161dd067fe2d672c$export$2e2bcd8739ae039).ADD, /**\r\n       * @param {import(\"./Collection.js\").CollectionEvent<import(\"./interaction/Interaction.js\").default>} event CollectionEvent.\r\n       */ (event)=>{\n            event.element.setMap(this);\n        });\n        this.interactions.addEventListener((0, $161dd067fe2d672c$export$2e2bcd8739ae039).REMOVE, /**\r\n       * @param {import(\"./Collection.js\").CollectionEvent<import(\"./interaction/Interaction.js\").default>} event CollectionEvent.\r\n       */ (event)=>{\n            event.element.setMap(null);\n        });\n        this.overlays_.addEventListener((0, $161dd067fe2d672c$export$2e2bcd8739ae039).ADD, /**\r\n       * @param {import(\"./Collection.js\").CollectionEvent<import(\"./Overlay.js\").default>} event CollectionEvent.\r\n       */ (event)=>{\n            this.addOverlayInternal_(event.element);\n        });\n        this.overlays_.addEventListener((0, $161dd067fe2d672c$export$2e2bcd8739ae039).REMOVE, /**\r\n       * @param {import(\"./Collection.js\").CollectionEvent<import(\"./Overlay.js\").default>} event CollectionEvent.\r\n       */ (event)=>{\n            const id = event.element.getId();\n            if (id !== undefined) delete this.overlayIdIndex_[id.toString()];\n            event.element.setMap(null);\n        });\n        this.controls.forEach(/**\r\n       * @param {import(\"./control/Control.js\").default} control Control.\r\n       */ (control)=>{\n            control.setMap(this);\n        });\n        this.interactions.forEach(/**\r\n       * @param {import(\"./interaction/Interaction.js\").default} interaction Interaction.\r\n       */ (interaction)=>{\n            interaction.setMap(this);\n        });\n        this.overlays_.forEach(this.addOverlayInternal_.bind(this));\n    }\n    /**\r\n   * Add the given control to the map.\r\n   * @param {import(\"./control/Control.js\").default} control Control.\r\n   * @api\r\n   */ addControl(control) {\n        this.getControls().push(control);\n    }\n    /**\r\n   * Add the given interaction to the map. If you want to add an interaction\r\n   * at another point of the collection use `getInteractions()` and the methods\r\n   * available on {@link module:ol/Collection~Collection}. This can be used to\r\n   * stop the event propagation from the handleEvent function. The interactions\r\n   * get to handle the events in the reverse order of this collection.\r\n   * @param {import(\"./interaction/Interaction.js\").default} interaction Interaction to add.\r\n   * @api\r\n   */ addInteraction(interaction) {\n        this.getInteractions().push(interaction);\n    }\n    /**\r\n   * Adds the given layer to the top of this map. If you want to add a layer\r\n   * elsewhere in the stack, use `getLayers()` and the methods available on\r\n   * {@link module:ol/Collection~Collection}.\r\n   * @param {import(\"./layer/Base.js\").default} layer Layer.\r\n   * @api\r\n   */ addLayer(layer) {\n        const layers = this.getLayerGroup().getLayers();\n        layers.push(layer);\n    }\n    /**\r\n   * @param {import(\"./layer/Group.js\").GroupEvent} event The layer add event.\r\n   * @private\r\n   */ handleLayerAdd_(event) {\n        $41aa29ae0c4b607a$var$setLayerMapProperty(event.layer, this);\n    }\n    /**\r\n   * Add the given overlay to the map.\r\n   * @param {import(\"./Overlay.js\").default} overlay Overlay.\r\n   * @api\r\n   */ addOverlay(overlay) {\n        this.getOverlays().push(overlay);\n    }\n    /**\r\n   * This deals with map's overlay collection changes.\r\n   * @param {import(\"./Overlay.js\").default} overlay Overlay.\r\n   * @private\r\n   */ addOverlayInternal_(overlay) {\n        const id = overlay.getId();\n        if (id !== undefined) this.overlayIdIndex_[id.toString()] = overlay;\n        overlay.setMap(this);\n    }\n    /**\r\n   *\r\n   * Clean up.\r\n   * @override\r\n   */ disposeInternal() {\n        this.controls.clear();\n        this.interactions.clear();\n        this.overlays_.clear();\n        this.resizeObserver_.disconnect();\n        this.setTarget(null);\n        super.disposeInternal();\n    }\n    /**\r\n   * Detect features that intersect a pixel on the viewport, and execute a\r\n   * callback with each intersecting feature. Layers included in the detection can\r\n   * be configured through the `layerFilter` option in `options`.\r\n   * For polygons without a fill, only the stroke will be used for hit detection.\r\n   * Polygons must have a fill style applied to ensure that pixels inside a polygon are detected.\r\n   * The fill can be transparent.\r\n   * @param {import(\"./pixel.js\").Pixel} pixel Pixel.\r\n   * @param {function(import(\"./Feature.js\").FeatureLike, import(\"./layer/Layer.js\").default<import(\"./source/Source\").default>, import(\"./geom/SimpleGeometry.js\").default): T} callback Feature callback. The callback will be\r\n   *     called with two arguments. The first argument is one\r\n   *     {@link module:ol/Feature~Feature feature} or\r\n   *     {@link module:ol/render/Feature~RenderFeature render feature} at the pixel, the second is\r\n   *     the {@link module:ol/layer/Layer~Layer layer} of the feature and will be null for\r\n   *     unmanaged layers. To stop detection, callback functions can return a\r\n   *     truthy value.\r\n   * @param {AtPixelOptions} [options] Optional options.\r\n   * @return {T|undefined} Callback result, i.e. the return value of last\r\n   * callback execution, or the first truthy callback return value.\r\n   * @template T\r\n   * @api\r\n   */ forEachFeatureAtPixel(pixel, callback, options) {\n        if (!this.frameState_ || !this.renderer_) return;\n        const coordinate = this.getCoordinateFromPixelInternal(pixel);\n        options = options !== undefined ? options : {};\n        const hitTolerance = options.hitTolerance !== undefined ? options.hitTolerance : 0;\n        const layerFilter = options.layerFilter !== undefined ? options.layerFilter : (0, $013a1733c226ec50$export$22e23a2304399231);\n        const checkWrapped = options.checkWrapped !== false;\n        return this.renderer_.forEachFeatureAtCoordinate(coordinate, this.frameState_, hitTolerance, checkWrapped, callback, null, layerFilter, null);\n    }\n    /**\r\n   * Get all features that intersect a pixel on the viewport.\r\n   * For polygons without a fill, only the stroke will be used for hit detection.\r\n   * Polygons must have a fill style applied to ensure that pixels inside a polygon are detected.\r\n   * The fill can be transparent.\r\n   * @param {import(\"./pixel.js\").Pixel} pixel Pixel.\r\n   * @param {AtPixelOptions} [options] Optional options.\r\n   * @return {Array<import(\"./Feature.js\").FeatureLike>} The detected features or\r\n   * an empty array if none were found.\r\n   * @api\r\n   */ getFeaturesAtPixel(pixel, options) {\n        const features = [];\n        this.forEachFeatureAtPixel(pixel, function(feature) {\n            features.push(feature);\n        }, options);\n        return features;\n    }\n    /**\r\n   * Get all layers from all layer groups.\r\n   * @return {Array<import(\"./layer/Layer.js\").default>} Layers.\r\n   * @api\r\n   */ getAllLayers() {\n        const layers = [];\n        function addLayersFrom(layerGroup) {\n            layerGroup.forEach(function(layer) {\n                if (layer instanceof (0, $0b703156bb914e6f$export$2e2bcd8739ae039)) addLayersFrom(layer.getLayers());\n                else layers.push(layer);\n            });\n        }\n        addLayersFrom(this.getLayers());\n        return layers;\n    }\n    /**\r\n   * Detect if features intersect a pixel on the viewport. Layers included in the\r\n   * detection can be configured through the `layerFilter` option.\r\n   * For polygons without a fill, only the stroke will be used for hit detection.\r\n   * Polygons must have a fill style applied to ensure that pixels inside a polygon are detected.\r\n   * The fill can be transparent.\r\n   * @param {import(\"./pixel.js\").Pixel} pixel Pixel.\r\n   * @param {AtPixelOptions} [options] Optional options.\r\n   * @return {boolean} Is there a feature at the given pixel?\r\n   * @api\r\n   */ hasFeatureAtPixel(pixel, options) {\n        if (!this.frameState_ || !this.renderer_) return false;\n        const coordinate = this.getCoordinateFromPixelInternal(pixel);\n        options = options !== undefined ? options : {};\n        const layerFilter = options.layerFilter !== undefined ? options.layerFilter : (0, $013a1733c226ec50$export$22e23a2304399231);\n        const hitTolerance = options.hitTolerance !== undefined ? options.hitTolerance : 0;\n        const checkWrapped = options.checkWrapped !== false;\n        return this.renderer_.hasFeatureAtCoordinate(coordinate, this.frameState_, hitTolerance, checkWrapped, layerFilter, null);\n    }\n    /**\r\n   * Returns the coordinate in user projection for a browser event.\r\n   * @param {MouseEvent} event Event.\r\n   * @return {import(\"./coordinate.js\").Coordinate} Coordinate.\r\n   * @api\r\n   */ getEventCoordinate(event) {\n        return this.getCoordinateFromPixel(this.getEventPixel(event));\n    }\n    /**\r\n   * Returns the coordinate in view projection for a browser event.\r\n   * @param {MouseEvent} event Event.\r\n   * @return {import(\"./coordinate.js\").Coordinate} Coordinate.\r\n   */ getEventCoordinateInternal(event) {\n        return this.getCoordinateFromPixelInternal(this.getEventPixel(event));\n    }\n    /**\r\n   * Returns the map pixel position for a browser event relative to the viewport.\r\n   * @param {UIEvent|{clientX: number, clientY: number}} event Event.\r\n   * @return {import(\"./pixel.js\").Pixel} Pixel.\r\n   * @api\r\n   */ getEventPixel(event) {\n        const viewport = this.viewport_;\n        const viewportPosition = viewport.getBoundingClientRect();\n        const viewportSize = this.getSize();\n        const scaleX = viewportPosition.width / viewportSize[0];\n        const scaleY = viewportPosition.height / viewportSize[1];\n        const eventPosition = //FIXME Are we really calling this with a TouchEvent anywhere?\n        'changedTouches' in event ? /** @type {TouchEvent} */ event.changedTouches[0] : /** @type {MouseEvent} */ event;\n        return [\n            (eventPosition.clientX - viewportPosition.left) / scaleX,\n            (eventPosition.clientY - viewportPosition.top) / scaleY\n        ];\n    }\n    /**\r\n   * Get the target in which this map is rendered.\r\n   * Note that this returns what is entered as an option or in setTarget:\r\n   * if that was an element, it returns an element; if a string, it returns that.\r\n   * @return {HTMLElement|string|undefined} The Element or id of the Element that the\r\n   *     map is rendered in.\r\n   * @observable\r\n   * @api\r\n   */ getTarget() {\n        return /** @type {HTMLElement|string|undefined} */ this.get((0, $07fa325567004bb7$export$2e2bcd8739ae039).TARGET);\n    }\n    /**\r\n   * Get the DOM element into which this map is rendered. In contrast to\r\n   * `getTarget` this method always return an `Element`, or `null` if the\r\n   * map has no target.\r\n   * @return {HTMLElement} The element that the map is rendered in.\r\n   * @api\r\n   */ getTargetElement() {\n        return this.targetElement_;\n    }\n    /**\r\n   * Get the coordinate for a given pixel.  This returns a coordinate in the\r\n   * user projection.\r\n   * @param {import(\"./pixel.js\").Pixel} pixel Pixel position in the map viewport.\r\n   * @return {import(\"./coordinate.js\").Coordinate} The coordinate for the pixel position.\r\n   * @api\r\n   */ getCoordinateFromPixel(pixel) {\n        return (0, $9c4744460e43e41b$export$698f563af1ba02a5)(this.getCoordinateFromPixelInternal(pixel), this.getView().getProjection());\n    }\n    /**\r\n   * Get the coordinate for a given pixel.  This returns a coordinate in the\r\n   * map view projection.\r\n   * @param {import(\"./pixel.js\").Pixel} pixel Pixel position in the map viewport.\r\n   * @return {import(\"./coordinate.js\").Coordinate} The coordinate for the pixel position.\r\n   */ getCoordinateFromPixelInternal(pixel) {\n        const frameState = this.frameState_;\n        if (!frameState) return null;\n        return (0, $e22e7611e69f42a9$export$5635d7ef4b8fee1c)(frameState.pixelToCoordinateTransform, pixel.slice());\n    }\n    /**\r\n   * Get the map controls. Modifying this collection changes the controls\r\n   * associated with the map.\r\n   * @return {Collection<import(\"./control/Control.js\").default>} Controls.\r\n   * @api\r\n   */ getControls() {\n        return this.controls;\n    }\n    /**\r\n   * Get the map overlays. Modifying this collection changes the overlays\r\n   * associated with the map.\r\n   * @return {Collection<import(\"./Overlay.js\").default>} Overlays.\r\n   * @api\r\n   */ getOverlays() {\n        return this.overlays_;\n    }\n    /**\r\n   * Get an overlay by its identifier (the value returned by overlay.getId()).\r\n   * Note that the index treats string and numeric identifiers as the same. So\r\n   * `map.getOverlayById(2)` will return an overlay with id `'2'` or `2`.\r\n   * @param {string|number} id Overlay identifier.\r\n   * @return {import(\"./Overlay.js\").default|null} Overlay.\r\n   * @api\r\n   */ getOverlayById(id) {\n        const overlay = this.overlayIdIndex_[id.toString()];\n        return overlay !== undefined ? overlay : null;\n    }\n    /**\r\n   * Get the map interactions. Modifying this collection changes the interactions\r\n   * associated with the map.\r\n   *\r\n   * Interactions are used for e.g. pan, zoom and rotate.\r\n   * @return {Collection<import(\"./interaction/Interaction.js\").default>} Interactions.\r\n   * @api\r\n   */ getInteractions() {\n        return this.interactions;\n    }\n    /**\r\n   * Get the layergroup associated with this map.\r\n   * @return {LayerGroup} A layer group containing the layers in this map.\r\n   * @observable\r\n   * @api\r\n   */ getLayerGroup() {\n        return /** @type {LayerGroup} */ this.get((0, $07fa325567004bb7$export$2e2bcd8739ae039).LAYERGROUP);\n    }\n    /**\r\n   * Clear any existing layers and add layers to the map.\r\n   * @param {Array<import(\"./layer/Base.js\").default>|Collection<import(\"./layer/Base.js\").default>} layers The layers to be added to the map.\r\n   * @api\r\n   */ setLayers(layers) {\n        const group = this.getLayerGroup();\n        if (layers instanceof (0, $931ffc4e747c14db$export$2e2bcd8739ae039)) {\n            group.setLayers(layers);\n            return;\n        }\n        const collection = group.getLayers();\n        collection.clear();\n        collection.extend(layers);\n    }\n    /**\r\n   * Get the collection of layers associated with this map.\r\n   * @return {!Collection<import(\"./layer/Base.js\").default>} Layers.\r\n   * @api\r\n   */ getLayers() {\n        const layers = this.getLayerGroup().getLayers();\n        return layers;\n    }\n    /**\r\n   * @return {boolean} Layers have sources that are still loading.\r\n   */ getLoadingOrNotReady() {\n        const layerStatesArray = this.getLayerGroup().getLayerStatesArray();\n        for(let i = 0, ii = layerStatesArray.length; i < ii; ++i){\n            const state = layerStatesArray[i];\n            if (!state.visible) continue;\n            const renderer = state.layer.getRenderer();\n            if (renderer && !renderer.ready) return true;\n            const source = state.layer.getSource();\n            if (source && source.loading) return true;\n        }\n        return false;\n    }\n    /**\r\n   * Get the pixel for a coordinate.  This takes a coordinate in the user\r\n   * projection and returns the corresponding pixel.\r\n   * @param {import(\"./coordinate.js\").Coordinate} coordinate A map coordinate.\r\n   * @return {import(\"./pixel.js\").Pixel} A pixel position in the map viewport.\r\n   * @api\r\n   */ getPixelFromCoordinate(coordinate) {\n        const viewCoordinate = (0, $9c4744460e43e41b$export$d4b8ec0b96db1ee2)(coordinate, this.getView().getProjection());\n        return this.getPixelFromCoordinateInternal(viewCoordinate);\n    }\n    /**\r\n   * Get the pixel for a coordinate.  This takes a coordinate in the map view\r\n   * projection and returns the corresponding pixel.\r\n   * @param {import(\"./coordinate.js\").Coordinate} coordinate A map coordinate.\r\n   * @return {import(\"./pixel.js\").Pixel} A pixel position in the map viewport.\r\n   */ getPixelFromCoordinateInternal(coordinate) {\n        const frameState = this.frameState_;\n        if (!frameState) return null;\n        return (0, $e22e7611e69f42a9$export$5635d7ef4b8fee1c)(frameState.coordinateToPixelTransform, coordinate.slice(0, 2));\n    }\n    /**\r\n   * Get the map renderer.\r\n   * @return {import(\"./renderer/Map.js\").default|null} Renderer\r\n   */ getRenderer() {\n        return this.renderer_;\n    }\n    /**\r\n   * Get the size of this map.\r\n   * @return {import(\"./size.js\").Size|undefined} The size in pixels of the map in the DOM.\r\n   * @observable\r\n   * @api\r\n   */ getSize() {\n        return /** @type {import(\"./size.js\").Size|undefined} */ this.get((0, $07fa325567004bb7$export$2e2bcd8739ae039).SIZE);\n    }\n    /**\r\n   * Get the view associated with this map. A view manages properties such as\r\n   * center and resolution.\r\n   * @return {View} The view that controls this map.\r\n   * @observable\r\n   * @api\r\n   */ getView() {\n        return /** @type {View} */ this.get((0, $07fa325567004bb7$export$2e2bcd8739ae039).VIEW);\n    }\n    /**\r\n   * Get the element that serves as the map viewport.\r\n   * @return {HTMLElement} Viewport.\r\n   * @api\r\n   */ getViewport() {\n        return this.viewport_;\n    }\n    /**\r\n   * Get the element that serves as the container for overlays.  Elements added to\r\n   * this container will let mousedown and touchstart events through to the map,\r\n   * so clicks and gestures on an overlay will trigger {@link module:ol/MapBrowserEvent~MapBrowserEvent}\r\n   * events.\r\n   * @return {!HTMLElement} The map's overlay container.\r\n   */ getOverlayContainer() {\n        return this.overlayContainer_;\n    }\n    /**\r\n   * Get the element that serves as a container for overlays that don't allow\r\n   * event propagation. Elements added to this container won't let mousedown and\r\n   * touchstart events through to the map, so clicks and gestures on an overlay\r\n   * don't trigger any {@link module:ol/MapBrowserEvent~MapBrowserEvent}.\r\n   * @return {!HTMLElement} The map's overlay container that stops events.\r\n   */ getOverlayContainerStopEvent() {\n        return this.overlayContainerStopEvent_;\n    }\n    /**\r\n   * @return {!Document} The document where the map is displayed.\r\n   */ getOwnerDocument() {\n        const targetElement = this.getTargetElement();\n        return targetElement ? targetElement.ownerDocument : document;\n    }\n    /**\r\n   * @param {import(\"./Tile.js\").default} tile Tile.\r\n   * @param {string} tileSourceKey Tile source key.\r\n   * @param {import(\"./coordinate.js\").Coordinate} tileCenter Tile center.\r\n   * @param {number} tileResolution Tile resolution.\r\n   * @return {number} Tile priority.\r\n   */ getTilePriority(tile, tileSourceKey, tileCenter, tileResolution) {\n        return (0, $4c51fd53052a6bbc$export$f08ad5eceeff5d45)(this.frameState_, tile, tileSourceKey, tileCenter, tileResolution);\n    }\n    /**\r\n   * @param {PointerEvent|KeyboardEvent|WheelEvent} browserEvent Browser event.\r\n   * @param {string} [type] Type.\r\n   */ handleBrowserEvent(browserEvent, type) {\n        type = type || browserEvent.type;\n        const mapBrowserEvent = new (0, $a1b91f073c6a6c43$export$2e2bcd8739ae039)(type, this, browserEvent);\n        this.handleMapBrowserEvent(mapBrowserEvent);\n    }\n    /**\r\n   * @param {MapBrowserEvent} mapBrowserEvent The event to handle.\r\n   */ handleMapBrowserEvent(mapBrowserEvent) {\n        if (!this.frameState_) // With no view defined, we cannot translate pixels into geographical\n        // coordinates so interactions cannot be used.\n        return;\n        const originalEvent = mapBrowserEvent.originalEvent;\n        const eventType = originalEvent.type;\n        if (eventType === (0, $d564567e31203d44$export$2e2bcd8739ae039).POINTERDOWN || eventType === (0, $294047c5e65f31a3$export$2e2bcd8739ae039).WHEEL || eventType === (0, $294047c5e65f31a3$export$2e2bcd8739ae039).KEYDOWN) {\n            const doc = this.getOwnerDocument();\n            const rootNode = this.viewport_.getRootNode ? this.viewport_.getRootNode() : doc;\n            const target = /** @type {Node} */ originalEvent.target;\n            const currentDoc = rootNode instanceof ShadowRoot ? rootNode.host === target ? rootNode.host.ownerDocument : rootNode : rootNode === doc ? doc.documentElement : rootNode;\n            if (// Abort if the target is a child of the container for elements whose events are not meant\n            // to be handled by map interactions.\n            this.overlayContainerStopEvent_.contains(target) || // Abort if the event target is a child of the container that is no longer in the page.\n            // It's possible for the target to no longer be in the page if it has been removed in an\n            // event listener, this might happen in a Control that recreates it's content based on\n            // user interaction either manually or via a render in something like https://reactjs.org/\n            !currentDoc.contains(target)) return;\n        }\n        mapBrowserEvent.frameState = this.frameState_;\n        if (this.dispatchEvent(mapBrowserEvent) !== false) {\n            const interactionsArray = this.getInteractions().getArray().slice();\n            for(let i = interactionsArray.length - 1; i >= 0; i--){\n                const interaction = interactionsArray[i];\n                if (interaction.getMap() !== this || !interaction.getActive() || !this.getTargetElement()) continue;\n                const cont = interaction.handleEvent(mapBrowserEvent);\n                if (!cont || mapBrowserEvent.propagationStopped) break;\n            }\n        }\n    }\n    /**\r\n   * @protected\r\n   */ handlePostRender() {\n        const frameState = this.frameState_;\n        // Manage the tile queue\n        // Image loads are expensive and a limited resource, so try to use them\n        // efficiently:\n        // * When the view is static we allow a large number of parallel tile loads\n        //   to complete the frame as quickly as possible.\n        // * When animating or interacting, image loads can cause janks, so we reduce\n        //   the maximum number of loads per frame and limit the number of parallel\n        //   tile loads to remain reactive to view changes and to reduce the chance of\n        //   loading tiles that will quickly disappear from view.\n        const tileQueue = this.tileQueue_;\n        if (!tileQueue.isEmpty()) {\n            let maxTotalLoading = this.maxTilesLoading_;\n            let maxNewLoads = maxTotalLoading;\n            if (frameState) {\n                const hints = frameState.viewHints;\n                if (hints[(0, $7d362782b4ccb93d$export$2e2bcd8739ae039).ANIMATING] || hints[(0, $7d362782b4ccb93d$export$2e2bcd8739ae039).INTERACTING]) {\n                    const lowOnFrameBudget = Date.now() - frameState.time > 8;\n                    maxTotalLoading = lowOnFrameBudget ? 0 : 8;\n                    maxNewLoads = lowOnFrameBudget ? 0 : 2;\n                }\n            }\n            if (tileQueue.getTilesLoading() < maxTotalLoading) {\n                tileQueue.reprioritize(); // FIXME only call if view has changed\n                tileQueue.loadMoreTiles(maxTotalLoading, maxNewLoads);\n            }\n        }\n        if (frameState && this.renderer_ && !frameState.animate) {\n            if (this.renderComplete_) {\n                if (this.hasListener((0, $f5e92a4d985a2824$export$2e2bcd8739ae039).RENDERCOMPLETE)) this.renderer_.dispatchRenderEvent((0, $f5e92a4d985a2824$export$2e2bcd8739ae039).RENDERCOMPLETE, frameState);\n                if (this.loaded_ === false) {\n                    this.loaded_ = true;\n                    this.dispatchEvent(new (0, $3a171922c3a0c5ed$export$2e2bcd8739ae039)((0, $e4ad75f913b6f7ff$export$2e2bcd8739ae039).LOADEND, this, frameState));\n                }\n            } else if (this.loaded_ === true) {\n                this.loaded_ = false;\n                this.dispatchEvent(new (0, $3a171922c3a0c5ed$export$2e2bcd8739ae039)((0, $e4ad75f913b6f7ff$export$2e2bcd8739ae039).LOADSTART, this, frameState));\n            }\n        }\n        const postRenderFunctions = this.postRenderFunctions_;\n        if (frameState) for(let i = 0, ii = postRenderFunctions.length; i < ii; ++i)postRenderFunctions[i](this, frameState);\n        postRenderFunctions.length = 0;\n    }\n    /**\r\n   * @private\r\n   */ handleSizeChanged_() {\n        if (this.getView() && !this.getView().getAnimating()) this.getView().resolveConstraints(0);\n        this.render();\n    }\n    /**\r\n   * @private\r\n   */ handleTargetChanged_() {\n        if (this.mapBrowserEventHandler_) {\n            for(let i = 0, ii = this.targetChangeHandlerKeys_.length; i < ii; ++i)(0, $d5bf8abd656a3cdc$export$b0a21c8b3c1c921)(this.targetChangeHandlerKeys_[i]);\n            this.targetChangeHandlerKeys_ = null;\n            this.viewport_.removeEventListener((0, $294047c5e65f31a3$export$2e2bcd8739ae039).CONTEXTMENU, this.boundHandleBrowserEvent_);\n            this.viewport_.removeEventListener((0, $294047c5e65f31a3$export$2e2bcd8739ae039).WHEEL, this.boundHandleBrowserEvent_);\n            this.mapBrowserEventHandler_.dispose();\n            this.mapBrowserEventHandler_ = null;\n            this.viewport_.remove();\n        }\n        if (this.targetElement_) {\n            this.resizeObserver_.unobserve(this.targetElement_);\n            const rootNode = this.targetElement_.getRootNode();\n            if (rootNode instanceof ShadowRoot) this.resizeObserver_.unobserve(rootNode.host);\n            this.setSize(undefined);\n        }\n        // target may be undefined, null, a string or an Element.\n        // If it's a string we convert it to an Element before proceeding.\n        // If it's not now an Element we remove the viewport from the DOM.\n        // If it's an Element we append the viewport element to it.\n        const target = this.getTarget();\n        const targetElement = typeof target === 'string' ? document.getElementById(target) : target;\n        this.targetElement_ = targetElement;\n        if (!targetElement) {\n            if (this.renderer_) {\n                clearTimeout(this.postRenderTimeoutHandle_);\n                this.postRenderTimeoutHandle_ = undefined;\n                this.postRenderFunctions_.length = 0;\n                this.renderer_.dispose();\n                this.renderer_ = null;\n            }\n            if (this.animationDelayKey_) {\n                cancelAnimationFrame(this.animationDelayKey_);\n                this.animationDelayKey_ = undefined;\n            }\n        } else {\n            targetElement.appendChild(this.viewport_);\n            if (!this.renderer_) this.renderer_ = new (0, $fa78c97693b12120$export$2e2bcd8739ae039)(this);\n            this.mapBrowserEventHandler_ = new (0, $6085d006f9d0efe2$export$2e2bcd8739ae039)(this, this.moveTolerance_);\n            for(const key in 0, $150f412a4a7fa263$export$2e2bcd8739ae039)this.mapBrowserEventHandler_.addEventListener((0, $150f412a4a7fa263$export$2e2bcd8739ae039)[key], this.handleMapBrowserEvent.bind(this));\n            this.viewport_.addEventListener((0, $294047c5e65f31a3$export$2e2bcd8739ae039).CONTEXTMENU, this.boundHandleBrowserEvent_, false);\n            this.viewport_.addEventListener((0, $294047c5e65f31a3$export$2e2bcd8739ae039).WHEEL, this.boundHandleBrowserEvent_, (0, $67c66761d21428d0$export$f751ce96c6c4e4fc) ? {\n                passive: false\n            } : false);\n            let keyboardEventTarget;\n            if (!this.keyboardEventTarget_) {\n                // check if map target is in shadowDOM, if yes use host element as target\n                const targetRoot = targetElement.getRootNode();\n                const targetCandidate = targetRoot instanceof ShadowRoot ? targetRoot.host : targetElement;\n                keyboardEventTarget = targetCandidate;\n            } else keyboardEventTarget = this.keyboardEventTarget_;\n            this.targetChangeHandlerKeys_ = [\n                (0, $d5bf8abd656a3cdc$export$63174c828edd6ff8)(keyboardEventTarget, (0, $294047c5e65f31a3$export$2e2bcd8739ae039).KEYDOWN, this.handleBrowserEvent, this),\n                (0, $d5bf8abd656a3cdc$export$63174c828edd6ff8)(keyboardEventTarget, (0, $294047c5e65f31a3$export$2e2bcd8739ae039).KEYPRESS, this.handleBrowserEvent, this)\n            ];\n            const rootNode = targetElement.getRootNode();\n            if (rootNode instanceof ShadowRoot) this.resizeObserver_.observe(rootNode.host);\n            this.resizeObserver_.observe(targetElement);\n        }\n        this.updateSize();\n    // updateSize calls setSize, so no need to call this.render\n    // ourselves here.\n    }\n    /**\r\n   * @private\r\n   */ handleTileChange_() {\n        this.render();\n    }\n    /**\r\n   * @private\r\n   */ handleViewPropertyChanged_() {\n        this.render();\n    }\n    /**\r\n   * @private\r\n   */ handleViewChanged_() {\n        if (this.viewPropertyListenerKey_) {\n            (0, $d5bf8abd656a3cdc$export$b0a21c8b3c1c921)(this.viewPropertyListenerKey_);\n            this.viewPropertyListenerKey_ = null;\n        }\n        if (this.viewChangeListenerKey_) {\n            (0, $d5bf8abd656a3cdc$export$b0a21c8b3c1c921)(this.viewChangeListenerKey_);\n            this.viewChangeListenerKey_ = null;\n        }\n        const view = this.getView();\n        if (view) {\n            this.updateViewportSize_(this.getSize());\n            this.viewPropertyListenerKey_ = (0, $d5bf8abd656a3cdc$export$63174c828edd6ff8)(view, (0, $e881b5dca21eb5d4$export$2e2bcd8739ae039).PROPERTYCHANGE, this.handleViewPropertyChanged_, this);\n            this.viewChangeListenerKey_ = (0, $d5bf8abd656a3cdc$export$63174c828edd6ff8)(view, (0, $294047c5e65f31a3$export$2e2bcd8739ae039).CHANGE, this.handleViewPropertyChanged_, this);\n            view.resolveConstraints(0);\n        }\n        this.render();\n    }\n    /**\r\n   * @private\r\n   */ handleLayerGroupChanged_() {\n        if (this.layerGroupPropertyListenerKeys_) {\n            this.layerGroupPropertyListenerKeys_.forEach((0, $d5bf8abd656a3cdc$export$b0a21c8b3c1c921));\n            this.layerGroupPropertyListenerKeys_ = null;\n        }\n        const layerGroup = this.getLayerGroup();\n        if (layerGroup) {\n            this.handleLayerAdd_(new (0, $0b703156bb914e6f$export$2f5ff21d758d25a7)('addlayer', layerGroup));\n            this.layerGroupPropertyListenerKeys_ = [\n                (0, $d5bf8abd656a3cdc$export$63174c828edd6ff8)(layerGroup, (0, $e881b5dca21eb5d4$export$2e2bcd8739ae039).PROPERTYCHANGE, this.render, this),\n                (0, $d5bf8abd656a3cdc$export$63174c828edd6ff8)(layerGroup, (0, $294047c5e65f31a3$export$2e2bcd8739ae039).CHANGE, this.render, this),\n                (0, $d5bf8abd656a3cdc$export$63174c828edd6ff8)(layerGroup, 'addlayer', this.handleLayerAdd_, this),\n                (0, $d5bf8abd656a3cdc$export$63174c828edd6ff8)(layerGroup, 'removelayer', this.handleLayerRemove_, this)\n            ];\n        }\n        this.render();\n    }\n    /**\r\n   * @return {boolean} Is rendered.\r\n   */ isRendered() {\n        return !!this.frameState_;\n    }\n    /**\r\n   * @private\r\n   */ animationDelay_() {\n        this.animationDelayKey_ = undefined;\n        this.renderFrame_(Date.now());\n    }\n    /**\r\n   * Requests an immediate render in a synchronous manner.\r\n   * @api\r\n   */ renderSync() {\n        if (this.animationDelayKey_) cancelAnimationFrame(this.animationDelayKey_);\n        this.animationDelay_();\n    }\n    /**\r\n   * Redraws all text after new fonts have loaded\r\n   */ redrawText() {\n        const layerStates = this.getLayerGroup().getLayerStatesArray();\n        for(let i = 0, ii = layerStates.length; i < ii; ++i){\n            const layer = layerStates[i].layer;\n            if (layer.hasRenderer()) layer.getRenderer().handleFontsChanged();\n        }\n    }\n    /**\r\n   * Request a map rendering (at the next animation frame).\r\n   * @api\r\n   */ render() {\n        if (this.renderer_ && this.animationDelayKey_ === undefined) this.animationDelayKey_ = requestAnimationFrame(this.animationDelay_);\n    }\n    /**\r\n   * Remove the given control from the map.\r\n   * @param {import(\"./control/Control.js\").default} control Control.\r\n   * @return {import(\"./control/Control.js\").default|undefined} The removed control (or undefined\r\n   *     if the control was not found).\r\n   * @api\r\n   */ removeControl(control) {\n        return this.getControls().remove(control);\n    }\n    /**\r\n   * Remove the given interaction from the map.\r\n   * @param {import(\"./interaction/Interaction.js\").default} interaction Interaction to remove.\r\n   * @return {import(\"./interaction/Interaction.js\").default|undefined} The removed interaction (or\r\n   *     undefined if the interaction was not found).\r\n   * @api\r\n   */ removeInteraction(interaction) {\n        return this.getInteractions().remove(interaction);\n    }\n    /**\r\n   * Removes the given layer from the map.\r\n   * @param {import(\"./layer/Base.js\").default} layer Layer.\r\n   * @return {import(\"./layer/Base.js\").default|undefined} The removed layer (or undefined if the\r\n   *     layer was not found).\r\n   * @api\r\n   */ removeLayer(layer) {\n        const layers = this.getLayerGroup().getLayers();\n        return layers.remove(layer);\n    }\n    /**\r\n   * @param {import(\"./layer/Group.js\").GroupEvent} event The layer remove event.\r\n   * @private\r\n   */ handleLayerRemove_(event) {\n        $41aa29ae0c4b607a$var$removeLayerMapProperty(event.layer);\n    }\n    /**\r\n   * Remove the given overlay from the map.\r\n   * @param {import(\"./Overlay.js\").default} overlay Overlay.\r\n   * @return {import(\"./Overlay.js\").default|undefined} The removed overlay (or undefined\r\n   *     if the overlay was not found).\r\n   * @api\r\n   */ removeOverlay(overlay) {\n        return this.getOverlays().remove(overlay);\n    }\n    /**\r\n   * @param {number} time Time.\r\n   * @private\r\n   */ renderFrame_(time) {\n        const size = this.getSize();\n        const view = this.getView();\n        const previousFrameState = this.frameState_;\n        /** @type {?FrameState} */ let frameState = null;\n        if (size !== undefined && (0, $cc435a5409103773$export$622c471beb1693c7)(size) && view && view.isDef()) {\n            const viewHints = view.getHints(this.frameState_ ? this.frameState_.viewHints : undefined);\n            const viewState = view.getState();\n            frameState = {\n                animate: false,\n                coordinateToPixelTransform: this.coordinateToPixelTransform_,\n                declutter: null,\n                extent: (0, $6da4c8ed3074c92b$export$13ba650faf8308)(viewState.center, viewState.resolution, viewState.rotation, size),\n                index: this.frameIndex_++,\n                layerIndex: 0,\n                layerStatesArray: this.getLayerGroup().getLayerStatesArray(),\n                pixelRatio: this.pixelRatio_,\n                pixelToCoordinateTransform: this.pixelToCoordinateTransform_,\n                postRenderFunctions: [],\n                size: size,\n                tileQueue: this.tileQueue_,\n                time: time,\n                usedTiles: {},\n                viewState: viewState,\n                viewHints: viewHints,\n                wantedTiles: {},\n                mapId: (0, $6c5e11070e371322$export$5e82334337e0f204)(this),\n                renderTargets: {}\n            };\n            if (viewState.nextCenter && viewState.nextResolution) {\n                const rotation = isNaN(viewState.nextRotation) ? viewState.rotation : viewState.nextRotation;\n                frameState.nextExtent = (0, $6da4c8ed3074c92b$export$13ba650faf8308)(viewState.nextCenter, viewState.nextResolution, rotation, size);\n            }\n        }\n        this.frameState_ = frameState;\n        this.renderer_.renderFrame(frameState);\n        if (frameState) {\n            if (frameState.animate) this.render();\n            Array.prototype.push.apply(this.postRenderFunctions_, frameState.postRenderFunctions);\n            if (previousFrameState) {\n                const moveStart = !this.previousExtent_ || !(0, $6da4c8ed3074c92b$export$dd1bc94b04021eeb)(this.previousExtent_) && !(0, $6da4c8ed3074c92b$export$e9bab7fafb253603)(frameState.extent, this.previousExtent_);\n                if (moveStart) {\n                    this.dispatchEvent(new (0, $3a171922c3a0c5ed$export$2e2bcd8739ae039)((0, $e4ad75f913b6f7ff$export$2e2bcd8739ae039).MOVESTART, this, previousFrameState));\n                    this.previousExtent_ = (0, $6da4c8ed3074c92b$export$3e2152b047719fa1)(this.previousExtent_);\n                }\n            }\n            const idle = this.previousExtent_ && !frameState.viewHints[(0, $7d362782b4ccb93d$export$2e2bcd8739ae039).ANIMATING] && !frameState.viewHints[(0, $7d362782b4ccb93d$export$2e2bcd8739ae039).INTERACTING] && !(0, $6da4c8ed3074c92b$export$e9bab7fafb253603)(frameState.extent, this.previousExtent_);\n            if (idle) {\n                this.dispatchEvent(new (0, $3a171922c3a0c5ed$export$2e2bcd8739ae039)((0, $e4ad75f913b6f7ff$export$2e2bcd8739ae039).MOVEEND, this, frameState));\n                (0, $6da4c8ed3074c92b$export$9cd59f9826255e47)(frameState.extent, this.previousExtent_);\n            }\n        }\n        this.dispatchEvent(new (0, $3a171922c3a0c5ed$export$2e2bcd8739ae039)((0, $e4ad75f913b6f7ff$export$2e2bcd8739ae039).POSTRENDER, this, frameState));\n        this.renderComplete_ = (this.hasListener((0, $e4ad75f913b6f7ff$export$2e2bcd8739ae039).LOADSTART) || this.hasListener((0, $e4ad75f913b6f7ff$export$2e2bcd8739ae039).LOADEND) || this.hasListener((0, $f5e92a4d985a2824$export$2e2bcd8739ae039).RENDERCOMPLETE)) && !this.tileQueue_.getTilesLoading() && !this.tileQueue_.getCount() && !this.getLoadingOrNotReady();\n        if (!this.postRenderTimeoutHandle_) this.postRenderTimeoutHandle_ = setTimeout(()=>{\n            this.postRenderTimeoutHandle_ = undefined;\n            this.handlePostRender();\n        }, 0);\n    }\n    /**\r\n   * Sets the layergroup of this map.\r\n   * @param {LayerGroup} layerGroup A layer group containing the layers in this map.\r\n   * @observable\r\n   * @api\r\n   */ setLayerGroup(layerGroup) {\n        const oldLayerGroup = this.getLayerGroup();\n        if (oldLayerGroup) this.handleLayerRemove_(new (0, $0b703156bb914e6f$export$2f5ff21d758d25a7)('removelayer', oldLayerGroup));\n        this.set((0, $07fa325567004bb7$export$2e2bcd8739ae039).LAYERGROUP, layerGroup);\n    }\n    /**\r\n   * Set the size of this map.\r\n   * @param {import(\"./size.js\").Size|undefined} size The size in pixels of the map in the DOM.\r\n   * @observable\r\n   * @api\r\n   */ setSize(size) {\n        this.set((0, $07fa325567004bb7$export$2e2bcd8739ae039).SIZE, size);\n    }\n    /**\r\n   * Set the target element to render this map into.\r\n   * For accessibility (focus and keyboard events for map navigation), the `target` element must have a\r\n   *  properly configured `tabindex` attribute. If the `target` element is inside a Shadow DOM, the\r\n   *  `tabindex` atribute must be set on the custom element's host element.\r\n   * @param {HTMLElement|string} [target] The Element or id of the Element\r\n   *     that the map is rendered in.\r\n   * @observable\r\n   * @api\r\n   */ setTarget(target) {\n        this.set((0, $07fa325567004bb7$export$2e2bcd8739ae039).TARGET, target);\n    }\n    /**\r\n   * Set the view for this map.\r\n   * @param {View|Promise<import(\"./View.js\").ViewOptions>|null} view The view that controls this map.\r\n   * It is also possible to pass a promise that resolves to options for constructing a view.  This\r\n   * alternative allows view properties to be resolved by sources or other components that load\r\n   * view-related metadata.\r\n   * @observable\r\n   * @api\r\n   */ setView(view) {\n        if (!view || view instanceof (0, $70364d0195659942$export$2e2bcd8739ae039)) {\n            this.set((0, $07fa325567004bb7$export$2e2bcd8739ae039).VIEW, view);\n            return;\n        }\n        this.set((0, $07fa325567004bb7$export$2e2bcd8739ae039).VIEW, new (0, $70364d0195659942$export$2e2bcd8739ae039)());\n        const map = this;\n        view.then(function(viewOptions) {\n            map.setView(new (0, $70364d0195659942$export$2e2bcd8739ae039)(viewOptions));\n        });\n    }\n    /**\r\n   * Force a recalculation of the map viewport size.  This should be called when\r\n   * third-party code changes the size of the map viewport.\r\n   * @api\r\n   */ updateSize() {\n        const targetElement = this.getTargetElement();\n        let size = undefined;\n        if (targetElement) {\n            const computedStyle = getComputedStyle(targetElement);\n            const width = targetElement.offsetWidth - parseFloat(computedStyle['borderLeftWidth']) - parseFloat(computedStyle['paddingLeft']) - parseFloat(computedStyle['paddingRight']) - parseFloat(computedStyle['borderRightWidth']);\n            const height = targetElement.offsetHeight - parseFloat(computedStyle['borderTopWidth']) - parseFloat(computedStyle['paddingTop']) - parseFloat(computedStyle['paddingBottom']) - parseFloat(computedStyle['borderBottomWidth']);\n            if (!isNaN(width) && !isNaN(height)) {\n                size = [\n                    Math.max(0, width),\n                    Math.max(0, height)\n                ];\n                if (!(0, $cc435a5409103773$export$622c471beb1693c7)(size) && !!(targetElement.offsetWidth || targetElement.offsetHeight || targetElement.getClientRects().length)) (0, $8c65b0699f3f3f8e$export$c106dd0671a0fc2d)(\"No map visible because the map container's width or height are 0.\");\n            }\n        }\n        const oldSize = this.getSize();\n        if (size && (!oldSize || !(0, $b998d41b678ed5d1$export$e9bab7fafb253603)(size, oldSize))) {\n            this.setSize(size);\n            this.updateViewportSize_(size);\n        }\n    }\n    /**\r\n   * Recomputes the viewport size and save it on the view object (if any)\r\n   * @param {import(\"./size.js\").Size|undefined} size The size.\r\n   * @private\r\n   */ updateViewportSize_(size) {\n        const view = this.getView();\n        if (view) view.setViewportSize(size);\n    }\n}\n/**\r\n * @param {MapOptions} options Map options.\r\n * @return {MapOptionsInternal} Internal map options.\r\n */ function $41aa29ae0c4b607a$var$createOptionsInternal(options) {\n    /**\r\n   * @type {HTMLElement|Document}\r\n   */ let keyboardEventTarget = null;\n    if (options.keyboardEventTarget !== undefined) keyboardEventTarget = typeof options.keyboardEventTarget === 'string' ? document.getElementById(options.keyboardEventTarget) : options.keyboardEventTarget;\n    /**\r\n   * @type {Object<string, *>}\r\n   */ const values = {};\n    const layerGroup = options.layers && typeof /** @type {?} */ options.layers.getLayers === 'function' ? /** @type {LayerGroup} */ options.layers : new (0, $0b703156bb914e6f$export$2e2bcd8739ae039)({\n        layers: /** @type {Collection<import(\"./layer/Base.js\").default>|Array<import(\"./layer/Base.js\").default>} */ options.layers\n    });\n    values[(0, $07fa325567004bb7$export$2e2bcd8739ae039).LAYERGROUP] = layerGroup;\n    values[(0, $07fa325567004bb7$export$2e2bcd8739ae039).TARGET] = options.target;\n    values[(0, $07fa325567004bb7$export$2e2bcd8739ae039).VIEW] = options.view instanceof (0, $70364d0195659942$export$2e2bcd8739ae039) ? options.view : new (0, $70364d0195659942$export$2e2bcd8739ae039)();\n    /** @type {Collection<import(\"./control/Control.js\").default>} */ let controls;\n    if (options.controls !== undefined) {\n        if (Array.isArray(options.controls)) controls = new (0, $931ffc4e747c14db$export$2e2bcd8739ae039)(options.controls.slice());\n        else {\n            (0, $35d5ec884318008e$export$a7a9523472993e97)(typeof /** @type {?} */ options.controls.getArray === 'function', 'Expected `controls` to be an array or an `ol/Collection.js`');\n            controls = options.controls;\n        }\n    }\n    /** @type {Collection<import(\"./interaction/Interaction\").default>} */ let interactions;\n    if (options.interactions !== undefined) {\n        if (Array.isArray(options.interactions)) interactions = new (0, $931ffc4e747c14db$export$2e2bcd8739ae039)(options.interactions.slice());\n        else {\n            (0, $35d5ec884318008e$export$a7a9523472993e97)(typeof /** @type {?} */ options.interactions.getArray === 'function', 'Expected `interactions` to be an array or an `ol/Collection.js`');\n            interactions = options.interactions;\n        }\n    }\n    /** @type {Collection<import(\"./Overlay.js\").default>} */ let overlays;\n    if (options.overlays !== undefined) {\n        if (Array.isArray(options.overlays)) overlays = new (0, $931ffc4e747c14db$export$2e2bcd8739ae039)(options.overlays.slice());\n        else {\n            (0, $35d5ec884318008e$export$a7a9523472993e97)(typeof /** @type {?} */ options.overlays.getArray === 'function', 'Expected `overlays` to be an array or an `ol/Collection.js`');\n            overlays = options.overlays;\n        }\n    } else overlays = new (0, $931ffc4e747c14db$export$2e2bcd8739ae039)();\n    return {\n        controls: controls,\n        interactions: interactions,\n        keyboardEventTarget: keyboardEventTarget,\n        overlays: overlays,\n        values: values\n    };\n}\nvar $41aa29ae0c4b607a$export$2e2bcd8739ae039 = $41aa29ae0c4b607a$var$Map;\n\n\n/**\r\n * @module ol/format/GeoJSON\r\n */ \n\n\n\n\n/**\r\n * @module ol/render/Feature\r\n */ \n\n\n\n/**\r\n * @module ol/geom/flat/center\r\n */ \nfunction $9825fadaf3b68c4e$export$78e139679ca7205(flatCoordinates, offset, endss, stride) {\n    const flatCenters = [];\n    let extent = (0, $6da4c8ed3074c92b$export$fe201bb3bbe031e9)();\n    for(let i = 0, ii = endss.length; i < ii; ++i){\n        const ends = endss[i];\n        extent = (0, $6da4c8ed3074c92b$export$be0ab0bf96ca59ca)(flatCoordinates, offset, ends[0], stride);\n        flatCenters.push((extent[0] + extent[2]) / 2, (extent[1] + extent[3]) / 2);\n        offset = ends[ends.length - 1];\n    }\n    return flatCenters;\n}\n\n\n\n/**\r\n * @module ol/geom/flat/interpolate\r\n */ \n\nfunction $43ed5485a1d0c509$export$687ff82efd78795b(flatCoordinates, offset, end, stride, fraction, dest, dimension) {\n    let o, t;\n    const n = (end - offset) / stride;\n    if (n === 1) o = offset;\n    else if (n === 2) {\n        o = offset;\n        t = fraction;\n    } else if (n !== 0) {\n        let x1 = flatCoordinates[offset];\n        let y1 = flatCoordinates[offset + 1];\n        let length = 0;\n        const cumulativeLengths = [\n            0\n        ];\n        for(let i = offset + stride; i < end; i += stride){\n            const x2 = flatCoordinates[i];\n            const y2 = flatCoordinates[i + 1];\n            length += Math.sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1));\n            cumulativeLengths.push(length);\n            x1 = x2;\n            y1 = y2;\n        }\n        const target = fraction * length;\n        const index = (0, $b998d41b678ed5d1$export$2e0ae67339d5f1ac)(cumulativeLengths, target);\n        if (index < 0) {\n            t = (target - cumulativeLengths[-index - 2]) / (cumulativeLengths[-index - 1] - cumulativeLengths[-index - 2]);\n            o = offset + (-index - 2) * stride;\n        } else o = offset + index * stride;\n    }\n    dimension = dimension > 1 ? dimension : 2;\n    dest = dest ? dest : new Array(dimension);\n    for(let i = 0; i < dimension; ++i)dest[i] = o === undefined ? NaN : t === undefined ? flatCoordinates[o + i] : (0, $6b000a049d919fe5$export$3a89f8d6f6bf6c9f)(flatCoordinates[o + i], flatCoordinates[o + stride + i], t);\n    return dest;\n}\nfunction $43ed5485a1d0c509$export$8f44c3c220ef6f09(flatCoordinates, offset, end, stride, m, extrapolate) {\n    if (end == offset) return null;\n    let coordinate;\n    if (m < flatCoordinates[offset + stride - 1]) {\n        if (extrapolate) {\n            coordinate = flatCoordinates.slice(offset, offset + stride);\n            coordinate[stride - 1] = m;\n            return coordinate;\n        }\n        return null;\n    }\n    if (flatCoordinates[end - 1] < m) {\n        if (extrapolate) {\n            coordinate = flatCoordinates.slice(end - stride, end);\n            coordinate[stride - 1] = m;\n            return coordinate;\n        }\n        return null;\n    }\n    // FIXME use O(1) search\n    if (m == flatCoordinates[offset + stride - 1]) return flatCoordinates.slice(offset, offset + stride);\n    let lo = offset / stride;\n    let hi = end / stride;\n    while(lo < hi){\n        const mid = lo + hi >> 1;\n        if (m < flatCoordinates[(mid + 1) * stride - 1]) hi = mid;\n        else lo = mid + 1;\n    }\n    const m0 = flatCoordinates[lo * stride - 1];\n    if (m == m0) return flatCoordinates.slice((lo - 1) * stride, (lo - 1) * stride + stride);\n    const m1 = flatCoordinates[(lo + 1) * stride - 1];\n    const t = (m - m0) / (m1 - m0);\n    coordinate = [];\n    for(let i = 0; i < stride - 1; ++i)coordinate.push((0, $6b000a049d919fe5$export$3a89f8d6f6bf6c9f)(flatCoordinates[(lo - 1) * stride + i], flatCoordinates[lo * stride + i], t));\n    coordinate.push(m);\n    return coordinate;\n}\nfunction $43ed5485a1d0c509$export$6a3300857e9ef453(flatCoordinates, offset, ends, stride, m, extrapolate, interpolate) {\n    if (interpolate) return $43ed5485a1d0c509$export$8f44c3c220ef6f09(flatCoordinates, offset, ends[ends.length - 1], stride, m, extrapolate);\n    let coordinate;\n    if (m < flatCoordinates[stride - 1]) {\n        if (extrapolate) {\n            coordinate = flatCoordinates.slice(0, stride);\n            coordinate[stride - 1] = m;\n            return coordinate;\n        }\n        return null;\n    }\n    if (flatCoordinates[flatCoordinates.length - 1] < m) {\n        if (extrapolate) {\n            coordinate = flatCoordinates.slice(flatCoordinates.length - stride);\n            coordinate[stride - 1] = m;\n            return coordinate;\n        }\n        return null;\n    }\n    for(let i = 0, ii = ends.length; i < ii; ++i){\n        const end = ends[i];\n        if (offset == end) continue;\n        if (m < flatCoordinates[offset + stride - 1]) return null;\n        if (m <= flatCoordinates[end - 1]) return $43ed5485a1d0c509$export$8f44c3c220ef6f09(flatCoordinates, offset, end, stride, m, false);\n        offset = end;\n    }\n    return null;\n}\n\n\n\n\n\n/**\r\n * @module ol/geom/LineString\r\n */ \n\n\n\n\n\n\n\n/**\r\n * @module ol/geom/flat/length\r\n */ /**\r\n * @param {Array<number>} flatCoordinates Flat coordinates.\r\n * @param {number} offset Offset.\r\n * @param {number} end End.\r\n * @param {number} stride Stride.\r\n * @return {number} Length.\r\n */ function $bf04349d827c1d16$export$153f8c6b4d8caebc(flatCoordinates, offset, end, stride) {\n    let x1 = flatCoordinates[offset];\n    let y1 = flatCoordinates[offset + 1];\n    let length = 0;\n    for(let i = offset + stride; i < end; i += stride){\n        const x2 = flatCoordinates[i];\n        const y2 = flatCoordinates[i + 1];\n        length += Math.sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1));\n        x1 = x2;\n        y1 = y2;\n    }\n    return length;\n}\nfunction $bf04349d827c1d16$export$2bbb4f6f727a75c2(flatCoordinates, offset, end, stride) {\n    let perimeter = $bf04349d827c1d16$export$153f8c6b4d8caebc(flatCoordinates, offset, end, stride);\n    const dx = flatCoordinates[end - stride] - flatCoordinates[offset];\n    const dy = flatCoordinates[end - stride + 1] - flatCoordinates[offset + 1];\n    perimeter += Math.sqrt(dx * dx + dy * dy);\n    return perimeter;\n}\n\n\n\n\n/**\r\n * @classdesc\r\n * Linestring geometry.\r\n *\r\n * @api\r\n */ class $292e4002746c8223$var$LineString extends (0, $c76e993e57efc8c4$export$2e2bcd8739ae039) {\n    /**\r\n   * @param {Array<import(\"../coordinate.js\").Coordinate>|Array<number>} coordinates Coordinates.\r\n   *     For internal use, flat coordinates in combination with `layout` are also accepted.\r\n   * @param {import(\"./Geometry.js\").GeometryLayout} [layout] Layout.\r\n   */ constructor(coordinates, layout){\n        super();\n        /**\r\n     * @private\r\n     * @type {import(\"../coordinate.js\").Coordinate|null}\r\n     */ this.flatMidpoint_ = null;\n        /**\r\n     * @private\r\n     * @type {number}\r\n     */ this.flatMidpointRevision_ = -1;\n        /**\r\n     * @private\r\n     * @type {number}\r\n     */ this.maxDelta_ = -1;\n        /**\r\n     * @private\r\n     * @type {number}\r\n     */ this.maxDeltaRevision_ = -1;\n        if (layout !== undefined && !Array.isArray(coordinates[0])) this.setFlatCoordinates(layout, /** @type {Array<number>} */ coordinates);\n        else this.setCoordinates(/** @type {Array<import(\"../coordinate.js\").Coordinate>} */ coordinates, layout);\n    }\n    /**\r\n   * Append the passed coordinate to the coordinates of the linestring.\r\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\r\n   * @api\r\n   */ appendCoordinate(coordinate) {\n        (0, $b998d41b678ed5d1$export$8b58be045bf06082)(this.flatCoordinates, coordinate);\n        this.changed();\n    }\n    /**\r\n   * Make a complete copy of the geometry.\r\n   * @return {!LineString} Clone.\r\n   * @api\r\n   * @override\r\n   */ clone() {\n        const lineString = new $292e4002746c8223$var$LineString(this.flatCoordinates.slice(), this.layout);\n        lineString.applyProperties(this);\n        return lineString;\n    }\n    /**\r\n   * @param {number} x X.\r\n   * @param {number} y Y.\r\n   * @param {import(\"../coordinate.js\").Coordinate} closestPoint Closest point.\r\n   * @param {number} minSquaredDistance Minimum squared distance.\r\n   * @return {number} Minimum squared distance.\r\n   * @override\r\n   */ closestPointXY(x, y, closestPoint, minSquaredDistance) {\n        if (minSquaredDistance < (0, $6da4c8ed3074c92b$export$cbe64c389534206f)(this.getExtent(), x, y)) return minSquaredDistance;\n        if (this.maxDeltaRevision_ != this.getRevision()) {\n            this.maxDelta_ = Math.sqrt((0, $bf5604c1b8258b71$export$bc2eb611ddf80103)(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride, 0));\n            this.maxDeltaRevision_ = this.getRevision();\n        }\n        return (0, $bf5604c1b8258b71$export$4adc8e5135fb44c)(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride, this.maxDelta_, false, x, y, closestPoint, minSquaredDistance);\n    }\n    /**\r\n   * Iterate over each segment, calling the provided callback.\r\n   * If the callback returns a truthy value the function returns that\r\n   * value immediately. Otherwise the function returns `false`.\r\n   *\r\n   * @param {function(this: S, import(\"../coordinate.js\").Coordinate, import(\"../coordinate.js\").Coordinate): T} callback Function\r\n   *     called for each segment. The function will receive two arguments, the start and end coordinates of the segment.\r\n   * @return {T|boolean} Value.\r\n   * @template T,S\r\n   * @api\r\n   */ forEachSegment(callback) {\n        return (0, $3e64078bffae1cbd$export$4b80e395e36b5a56)(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride, callback);\n    }\n    /**\r\n   * Returns the coordinate at `m` using linear interpolation, or `null` if no\r\n   * such coordinate exists.\r\n   *\r\n   * `extrapolate` controls extrapolation beyond the range of Ms in the\r\n   * MultiLineString. If `extrapolate` is `true` then Ms less than the first\r\n   * M will return the first coordinate and Ms greater than the last M will\r\n   * return the last coordinate.\r\n   *\r\n   * @param {number} m M.\r\n   * @param {boolean} [extrapolate] Extrapolate. Default is `false`.\r\n   * @return {import(\"../coordinate.js\").Coordinate|null} Coordinate.\r\n   * @api\r\n   */ getCoordinateAtM(m, extrapolate) {\n        if (this.layout != 'XYM' && this.layout != 'XYZM') return null;\n        extrapolate = extrapolate !== undefined ? extrapolate : false;\n        return (0, $43ed5485a1d0c509$export$8f44c3c220ef6f09)(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride, m, extrapolate);\n    }\n    /**\r\n   * Return the coordinates of the linestring.\r\n   * @return {Array<import(\"../coordinate.js\").Coordinate>} Coordinates.\r\n   * @api\r\n   * @override\r\n   */ getCoordinates() {\n        return (0, $5454470599558ddd$export$9c0934e4e9c3f61e)(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride);\n    }\n    /**\r\n   * Return the coordinate at the provided fraction along the linestring.\r\n   * The `fraction` is a number between 0 and 1, where 0 is the start of the\r\n   * linestring and 1 is the end.\r\n   * @param {number} fraction Fraction.\r\n   * @param {import(\"../coordinate.js\").Coordinate} [dest] Optional coordinate whose values will\r\n   *     be modified. If not provided, a new coordinate will be returned.\r\n   * @return {import(\"../coordinate.js\").Coordinate} Coordinate of the interpolated point.\r\n   * @api\r\n   */ getCoordinateAt(fraction, dest) {\n        return (0, $43ed5485a1d0c509$export$687ff82efd78795b)(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride, fraction, dest, this.stride);\n    }\n    /**\r\n   * Return the length of the linestring on projected plane.\r\n   * @return {number} Length (on projected plane).\r\n   * @api\r\n   */ getLength() {\n        return (0, $bf04349d827c1d16$export$153f8c6b4d8caebc)(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride);\n    }\n    /**\r\n   * @return {Array<number>} Flat midpoint.\r\n   */ getFlatMidpoint() {\n        if (this.flatMidpointRevision_ != this.getRevision()) {\n            this.flatMidpoint_ = this.getCoordinateAt(0.5, this.flatMidpoint_ ?? undefined);\n            this.flatMidpointRevision_ = this.getRevision();\n        }\n        return /** @type {Array<number>} */ this.flatMidpoint_;\n    }\n    /**\r\n   * @param {number} squaredTolerance Squared tolerance.\r\n   * @return {LineString} Simplified LineString.\r\n   * @protected\r\n   * @override\r\n   */ getSimplifiedGeometryInternal(squaredTolerance) {\n        /** @type {Array<number>} */ const simplifiedFlatCoordinates = [];\n        simplifiedFlatCoordinates.length = (0, $8780aae6970f5f65$export$ef693d1572e64fb8)(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride, squaredTolerance, simplifiedFlatCoordinates, 0);\n        return new $292e4002746c8223$var$LineString(simplifiedFlatCoordinates, 'XY');\n    }\n    /**\r\n   * Get the type of this geometry.\r\n   * @return {import(\"./Geometry.js\").Type} Geometry type.\r\n   * @api\r\n   * @override\r\n   */ getType() {\n        return 'LineString';\n    }\n    /**\r\n   * Test if the geometry and the passed extent intersect.\r\n   * @param {import(\"../extent.js\").Extent} extent Extent.\r\n   * @return {boolean} `true` if the geometry and the extent intersect.\r\n   * @api\r\n   * @override\r\n   */ intersectsExtent(extent) {\n        return (0, $acee589e5b390c5c$export$40d8d71841a3d779)(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride, extent, this.getExtent());\n    }\n    /**\r\n   * Set the coordinates of the linestring.\r\n   * @param {!Array<import(\"../coordinate.js\").Coordinate>} coordinates Coordinates.\r\n   * @param {import(\"./Geometry.js\").GeometryLayout} [layout] Layout.\r\n   * @api\r\n   * @override\r\n   */ setCoordinates(coordinates, layout) {\n        this.setLayout(layout, coordinates, 1);\n        if (!this.flatCoordinates) this.flatCoordinates = [];\n        this.flatCoordinates.length = (0, $6b086aa46281540d$export$5c4daf67e03c190f)(this.flatCoordinates, 0, coordinates, this.stride);\n        this.changed();\n    }\n}\nvar $292e4002746c8223$export$2e2bcd8739ae039 = $292e4002746c8223$var$LineString;\n\n/**\r\n * @module ol/geom/MultiLineString\r\n */ \n\n\n\n\n\n\n\n\n\n\n/**\r\n * @classdesc\r\n * Multi-linestring geometry.\r\n *\r\n * @api\r\n */ class $b4c0e2e13beea46e$var$MultiLineString extends (0, $c76e993e57efc8c4$export$2e2bcd8739ae039) {\n    /**\r\n   * @param {Array<Array<import(\"../coordinate.js\").Coordinate>|LineString>|Array<number>} coordinates\r\n   *     Coordinates or LineString geometries. (For internal use, flat coordinates in\r\n   *     combination with `layout` and `ends` are also accepted.)\r\n   * @param {import(\"./Geometry.js\").GeometryLayout} [layout] Layout.\r\n   * @param {Array<number>} [ends] Flat coordinate ends for internal use.\r\n   */ constructor(coordinates, layout, ends){\n        super();\n        /**\r\n     * @type {Array<number>}\r\n     * @private\r\n     */ this.ends_ = [];\n        /**\r\n     * @private\r\n     * @type {number}\r\n     */ this.maxDelta_ = -1;\n        /**\r\n     * @private\r\n     * @type {number}\r\n     */ this.maxDeltaRevision_ = -1;\n        if (Array.isArray(coordinates[0])) this.setCoordinates(/** @type {Array<Array<import(\"../coordinate.js\").Coordinate>>} */ coordinates, layout);\n        else if (layout !== undefined && ends) {\n            this.setFlatCoordinates(layout, /** @type {Array<number>} */ coordinates);\n            this.ends_ = ends;\n        } else {\n            const lineStrings = /** @type {Array<LineString>} */ coordinates;\n            /** @type {Array<number>} */ const flatCoordinates = [];\n            const ends = [];\n            for(let i = 0, ii = lineStrings.length; i < ii; ++i){\n                const lineString = lineStrings[i];\n                (0, $b998d41b678ed5d1$export$8b58be045bf06082)(flatCoordinates, lineString.getFlatCoordinates());\n                ends.push(flatCoordinates.length);\n            }\n            const layout = lineStrings.length === 0 ? this.getLayout() : lineStrings[0].getLayout();\n            this.setFlatCoordinates(layout, flatCoordinates);\n            this.ends_ = ends;\n        }\n    }\n    /**\r\n   * Append the passed linestring to the multilinestring.\r\n   * @param {LineString} lineString LineString.\r\n   * @api\r\n   */ appendLineString(lineString) {\n        (0, $b998d41b678ed5d1$export$8b58be045bf06082)(this.flatCoordinates, lineString.getFlatCoordinates().slice());\n        this.ends_.push(this.flatCoordinates.length);\n        this.changed();\n    }\n    /**\r\n   * Make a complete copy of the geometry.\r\n   * @return {!MultiLineString} Clone.\r\n   * @api\r\n   * @override\r\n   */ clone() {\n        const multiLineString = new $b4c0e2e13beea46e$var$MultiLineString(this.flatCoordinates.slice(), this.layout, this.ends_.slice());\n        multiLineString.applyProperties(this);\n        return multiLineString;\n    }\n    /**\r\n   * @param {number} x X.\r\n   * @param {number} y Y.\r\n   * @param {import(\"../coordinate.js\").Coordinate} closestPoint Closest point.\r\n   * @param {number} minSquaredDistance Minimum squared distance.\r\n   * @return {number} Minimum squared distance.\r\n   * @override\r\n   */ closestPointXY(x, y, closestPoint, minSquaredDistance) {\n        if (minSquaredDistance < (0, $6da4c8ed3074c92b$export$cbe64c389534206f)(this.getExtent(), x, y)) return minSquaredDistance;\n        if (this.maxDeltaRevision_ != this.getRevision()) {\n            this.maxDelta_ = Math.sqrt((0, $bf5604c1b8258b71$export$fbf31c8f2668ed5a)(this.flatCoordinates, 0, this.ends_, this.stride, 0));\n            this.maxDeltaRevision_ = this.getRevision();\n        }\n        return (0, $bf5604c1b8258b71$export$5a48a0eefcf14992)(this.flatCoordinates, 0, this.ends_, this.stride, this.maxDelta_, false, x, y, closestPoint, minSquaredDistance);\n    }\n    /**\r\n   * Returns the coordinate at `m` using linear interpolation, or `null` if no\r\n   * such coordinate exists.\r\n   *\r\n   * `extrapolate` controls extrapolation beyond the range of Ms in the\r\n   * MultiLineString. If `extrapolate` is `true` then Ms less than the first\r\n   * M will return the first coordinate and Ms greater than the last M will\r\n   * return the last coordinate.\r\n   *\r\n   * `interpolate` controls interpolation between consecutive LineStrings\r\n   * within the MultiLineString. If `interpolate` is `true` the coordinates\r\n   * will be linearly interpolated between the last coordinate of one LineString\r\n   * and the first coordinate of the next LineString.  If `interpolate` is\r\n   * `false` then the function will return `null` for Ms falling between\r\n   * LineStrings.\r\n   *\r\n   * @param {number} m M.\r\n   * @param {boolean} [extrapolate] Extrapolate. Default is `false`.\r\n   * @param {boolean} [interpolate] Interpolate. Default is `false`.\r\n   * @return {import(\"../coordinate.js\").Coordinate|null} Coordinate.\r\n   * @api\r\n   */ getCoordinateAtM(m, extrapolate, interpolate) {\n        if (this.layout != 'XYM' && this.layout != 'XYZM' || this.flatCoordinates.length === 0) return null;\n        extrapolate = extrapolate !== undefined ? extrapolate : false;\n        interpolate = interpolate !== undefined ? interpolate : false;\n        return (0, $43ed5485a1d0c509$export$6a3300857e9ef453)(this.flatCoordinates, 0, this.ends_, this.stride, m, extrapolate, interpolate);\n    }\n    /**\r\n   * Return the coordinates of the multilinestring.\r\n   * @return {Array<Array<import(\"../coordinate.js\").Coordinate>>} Coordinates.\r\n   * @api\r\n   * @override\r\n   */ getCoordinates() {\n        return (0, $5454470599558ddd$export$cbb9596fc0f40db2)(this.flatCoordinates, 0, this.ends_, this.stride);\n    }\n    /**\r\n   * @return {Array<number>} Ends.\r\n   */ getEnds() {\n        return this.ends_;\n    }\n    /**\r\n   * Return the linestring at the specified index.\r\n   * @param {number} index Index.\r\n   * @return {LineString} LineString.\r\n   * @api\r\n   */ getLineString(index) {\n        if (index < 0 || this.ends_.length <= index) return null;\n        return new (0, $292e4002746c8223$export$2e2bcd8739ae039)(this.flatCoordinates.slice(index === 0 ? 0 : this.ends_[index - 1], this.ends_[index]), this.layout);\n    }\n    /**\r\n   * Return the linestrings of this multilinestring.\r\n   * @return {Array<LineString>} LineStrings.\r\n   * @api\r\n   */ getLineStrings() {\n        const flatCoordinates = this.flatCoordinates;\n        const ends = this.ends_;\n        const layout = this.layout;\n        /** @type {Array<LineString>} */ const lineStrings = [];\n        let offset = 0;\n        for(let i = 0, ii = ends.length; i < ii; ++i){\n            const end = ends[i];\n            const lineString = new (0, $292e4002746c8223$export$2e2bcd8739ae039)(flatCoordinates.slice(offset, end), layout);\n            lineStrings.push(lineString);\n            offset = end;\n        }\n        return lineStrings;\n    }\n    /**\r\n   * Return the sum of all line string lengths\r\n   * @return {number} Length (on projected plane).\r\n   * @api\r\n   */ getLength() {\n        const ends = this.ends_;\n        let start = 0;\n        let length = 0;\n        for(let i = 0, ii = ends.length; i < ii; ++i){\n            length += (0, $bf04349d827c1d16$export$153f8c6b4d8caebc)(this.flatCoordinates, start, ends[i], this.stride);\n            start = ends[i];\n        }\n        return length;\n    }\n    /**\r\n   * @return {Array<number>} Flat midpoints.\r\n   */ getFlatMidpoints() {\n        /** @type {Array<number>} */ const midpoints = [];\n        const flatCoordinates = this.flatCoordinates;\n        let offset = 0;\n        const ends = this.ends_;\n        const stride = this.stride;\n        for(let i = 0, ii = ends.length; i < ii; ++i){\n            const end = ends[i];\n            const midpoint = (0, $43ed5485a1d0c509$export$687ff82efd78795b)(flatCoordinates, offset, end, stride, 0.5);\n            (0, $b998d41b678ed5d1$export$8b58be045bf06082)(midpoints, midpoint);\n            offset = end;\n        }\n        return midpoints;\n    }\n    /**\r\n   * @param {number} squaredTolerance Squared tolerance.\r\n   * @return {MultiLineString} Simplified MultiLineString.\r\n   * @protected\r\n   * @override\r\n   */ getSimplifiedGeometryInternal(squaredTolerance) {\n        /** @type {Array<number>} */ const simplifiedFlatCoordinates = [];\n        /** @type {Array<number>} */ const simplifiedEnds = [];\n        simplifiedFlatCoordinates.length = (0, $8780aae6970f5f65$export$cedb9900c0b225c2)(this.flatCoordinates, 0, this.ends_, this.stride, squaredTolerance, simplifiedFlatCoordinates, 0, simplifiedEnds);\n        return new $b4c0e2e13beea46e$var$MultiLineString(simplifiedFlatCoordinates, 'XY', simplifiedEnds);\n    }\n    /**\r\n   * Get the type of this geometry.\r\n   * @return {import(\"./Geometry.js\").Type} Geometry type.\r\n   * @api\r\n   * @override\r\n   */ getType() {\n        return 'MultiLineString';\n    }\n    /**\r\n   * Test if the geometry and the passed extent intersect.\r\n   * @param {import(\"../extent.js\").Extent} extent Extent.\r\n   * @return {boolean} `true` if the geometry and the extent intersect.\r\n   * @api\r\n   * @override\r\n   */ intersectsExtent(extent) {\n        return (0, $acee589e5b390c5c$export$fdb1d8e850bf7937)(this.flatCoordinates, 0, this.ends_, this.stride, extent);\n    }\n    /**\r\n   * Set the coordinates of the multilinestring.\r\n   * @param {!Array<Array<import(\"../coordinate.js\").Coordinate>>} coordinates Coordinates.\r\n   * @param {import(\"./Geometry.js\").GeometryLayout} [layout] Layout.\r\n   * @api\r\n   * @override\r\n   */ setCoordinates(coordinates, layout) {\n        this.setLayout(layout, coordinates, 2);\n        if (!this.flatCoordinates) this.flatCoordinates = [];\n        const ends = (0, $6b086aa46281540d$export$47c3746a74384d45)(this.flatCoordinates, 0, coordinates, this.stride, this.ends_);\n        this.flatCoordinates.length = ends.length === 0 ? 0 : ends[ends.length - 1];\n        this.changed();\n    }\n}\nvar $b4c0e2e13beea46e$export$2e2bcd8739ae039 = $b4c0e2e13beea46e$var$MultiLineString;\n\n/**\r\n * @module ol/geom/MultiPoint\r\n */ \n\n\n\n\n\n\n/**\r\n * @classdesc\r\n * Multi-point geometry.\r\n *\r\n * @api\r\n */ class $e6080c63a9451eda$var$MultiPoint extends (0, $c76e993e57efc8c4$export$2e2bcd8739ae039) {\n    /**\r\n   * @param {Array<import(\"../coordinate.js\").Coordinate>|Array<number>} coordinates Coordinates.\r\n   *     For internal use, flat coordinates in combination with `layout` are also accepted.\r\n   * @param {import(\"./Geometry.js\").GeometryLayout} [layout] Layout.\r\n   */ constructor(coordinates, layout){\n        super();\n        if (layout && !Array.isArray(coordinates[0])) this.setFlatCoordinates(layout, /** @type {Array<number>} */ coordinates);\n        else this.setCoordinates(/** @type {Array<import(\"../coordinate.js\").Coordinate>} */ coordinates, layout);\n    }\n    /**\r\n   * Append the passed point to this multipoint.\r\n   * @param {Point} point Point.\r\n   * @api\r\n   */ appendPoint(point) {\n        (0, $b998d41b678ed5d1$export$8b58be045bf06082)(this.flatCoordinates, point.getFlatCoordinates());\n        this.changed();\n    }\n    /**\r\n   * Make a complete copy of the geometry.\r\n   * @return {!MultiPoint} Clone.\r\n   * @api\r\n   * @override\r\n   */ clone() {\n        const multiPoint = new $e6080c63a9451eda$var$MultiPoint(this.flatCoordinates.slice(), this.layout);\n        multiPoint.applyProperties(this);\n        return multiPoint;\n    }\n    /**\r\n   * @param {number} x X.\r\n   * @param {number} y Y.\r\n   * @param {import(\"../coordinate.js\").Coordinate} closestPoint Closest point.\r\n   * @param {number} minSquaredDistance Minimum squared distance.\r\n   * @return {number} Minimum squared distance.\r\n   * @override\r\n   */ closestPointXY(x, y, closestPoint, minSquaredDistance) {\n        if (minSquaredDistance < (0, $6da4c8ed3074c92b$export$cbe64c389534206f)(this.getExtent(), x, y)) return minSquaredDistance;\n        const flatCoordinates = this.flatCoordinates;\n        const stride = this.stride;\n        for(let i = 0, ii = flatCoordinates.length; i < ii; i += stride){\n            const squaredDistance = (0, $6b000a049d919fe5$export$88e6ebb4fe54f538)(x, y, flatCoordinates[i], flatCoordinates[i + 1]);\n            if (squaredDistance < minSquaredDistance) {\n                minSquaredDistance = squaredDistance;\n                for(let j = 0; j < stride; ++j)closestPoint[j] = flatCoordinates[i + j];\n                closestPoint.length = stride;\n            }\n        }\n        return minSquaredDistance;\n    }\n    /**\r\n   * Return the coordinates of the multipoint.\r\n   * @return {Array<import(\"../coordinate.js\").Coordinate>} Coordinates.\r\n   * @api\r\n   * @override\r\n   */ getCoordinates() {\n        return (0, $5454470599558ddd$export$9c0934e4e9c3f61e)(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride);\n    }\n    /**\r\n   * Return the point at the specified index.\r\n   * @param {number} index Index.\r\n   * @return {Point} Point.\r\n   * @api\r\n   */ getPoint(index) {\n        const n = this.flatCoordinates.length / this.stride;\n        if (index < 0 || n <= index) return null;\n        return new (0, $6eced4c969949f6b$export$2e2bcd8739ae039)(this.flatCoordinates.slice(index * this.stride, (index + 1) * this.stride), this.layout);\n    }\n    /**\r\n   * Return the points of this multipoint.\r\n   * @return {Array<Point>} Points.\r\n   * @api\r\n   */ getPoints() {\n        const flatCoordinates = this.flatCoordinates;\n        const layout = this.layout;\n        const stride = this.stride;\n        /** @type {Array<Point>} */ const points = [];\n        for(let i = 0, ii = flatCoordinates.length; i < ii; i += stride){\n            const point = new (0, $6eced4c969949f6b$export$2e2bcd8739ae039)(flatCoordinates.slice(i, i + stride), layout);\n            points.push(point);\n        }\n        return points;\n    }\n    /**\r\n   * Get the type of this geometry.\r\n   * @return {import(\"./Geometry.js\").Type} Geometry type.\r\n   * @api\r\n   * @override\r\n   */ getType() {\n        return 'MultiPoint';\n    }\n    /**\r\n   * Test if the geometry and the passed extent intersect.\r\n   * @param {import(\"../extent.js\").Extent} extent Extent.\r\n   * @return {boolean} `true` if the geometry and the extent intersect.\r\n   * @api\r\n   * @override\r\n   */ intersectsExtent(extent) {\n        const flatCoordinates = this.flatCoordinates;\n        const stride = this.stride;\n        for(let i = 0, ii = flatCoordinates.length; i < ii; i += stride){\n            const x = flatCoordinates[i];\n            const y = flatCoordinates[i + 1];\n            if ((0, $6da4c8ed3074c92b$export$805bdfd6d6690e97)(extent, x, y)) return true;\n        }\n        return false;\n    }\n    /**\r\n   * Set the coordinates of the multipoint.\r\n   * @param {!Array<import(\"../coordinate.js\").Coordinate>} coordinates Coordinates.\r\n   * @param {import(\"./Geometry.js\").GeometryLayout} [layout] Layout.\r\n   * @api\r\n   * @override\r\n   */ setCoordinates(coordinates, layout) {\n        this.setLayout(layout, coordinates, 1);\n        if (!this.flatCoordinates) this.flatCoordinates = [];\n        this.flatCoordinates.length = (0, $6b086aa46281540d$export$5c4daf67e03c190f)(this.flatCoordinates, 0, coordinates, this.stride);\n        this.changed();\n    }\n}\nvar $e6080c63a9451eda$export$2e2bcd8739ae039 = $e6080c63a9451eda$var$MultiPoint;\n\n/**\r\n * @module ol/geom/MultiPolygon\r\n */ \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/**\r\n * @classdesc\r\n * Multi-polygon geometry.\r\n *\r\n * @api\r\n */ class $f73f35eb6af8b987$var$MultiPolygon extends (0, $c76e993e57efc8c4$export$2e2bcd8739ae039) {\n    /**\r\n   * @param {Array<Array<Array<import(\"../coordinate.js\").Coordinate>>|Polygon>|Array<number>} coordinates Coordinates.\r\n   *     For internal use, flat coordinates in combination with `layout` and `endss` are also accepted.\r\n   * @param {import(\"./Geometry.js\").GeometryLayout} [layout] Layout.\r\n   * @param {Array<Array<number>>} [endss] Array of ends for internal use with flat coordinates.\r\n   */ constructor(coordinates, layout, endss){\n        super();\n        /**\r\n     * @type {Array<Array<number>>}\r\n     * @private\r\n     */ this.endss_ = [];\n        /**\r\n     * @private\r\n     * @type {number}\r\n     */ this.flatInteriorPointsRevision_ = -1;\n        /**\r\n     * @private\r\n     * @type {Array<number>|null}\r\n     */ this.flatInteriorPoints_ = null;\n        /**\r\n     * @private\r\n     * @type {number}\r\n     */ this.maxDelta_ = -1;\n        /**\r\n     * @private\r\n     * @type {number}\r\n     */ this.maxDeltaRevision_ = -1;\n        /**\r\n     * @private\r\n     * @type {number}\r\n     */ this.orientedRevision_ = -1;\n        /**\r\n     * @private\r\n     * @type {Array<number>|null}\r\n     */ this.orientedFlatCoordinates_ = null;\n        if (!endss && !Array.isArray(coordinates[0])) {\n            const polygons = /** @type {Array<Polygon>} */ coordinates;\n            /** @type {Array<number>} */ const flatCoordinates = [];\n            const thisEndss = [];\n            for(let i = 0, ii = polygons.length; i < ii; ++i){\n                const polygon = polygons[i];\n                const offset = flatCoordinates.length;\n                const ends = polygon.getEnds();\n                for(let j = 0, jj = ends.length; j < jj; ++j)ends[j] += offset;\n                (0, $b998d41b678ed5d1$export$8b58be045bf06082)(flatCoordinates, polygon.getFlatCoordinates());\n                thisEndss.push(ends);\n            }\n            layout = polygons.length === 0 ? this.getLayout() : polygons[0].getLayout();\n            coordinates = flatCoordinates;\n            endss = thisEndss;\n        }\n        if (layout !== undefined && endss) {\n            this.setFlatCoordinates(layout, /** @type {Array<number>} */ coordinates);\n            this.endss_ = endss;\n        } else this.setCoordinates(/** @type {Array<Array<Array<import(\"../coordinate.js\").Coordinate>>>} */ coordinates, layout);\n    }\n    /**\r\n   * Append the passed polygon to this multipolygon.\r\n   * @param {Polygon} polygon Polygon.\r\n   * @api\r\n   */ appendPolygon(polygon) {\n        /** @type {Array<number>} */ let ends;\n        if (!this.flatCoordinates) {\n            this.flatCoordinates = polygon.getFlatCoordinates().slice();\n            ends = polygon.getEnds().slice();\n            this.endss_.push();\n        } else {\n            const offset = this.flatCoordinates.length;\n            (0, $b998d41b678ed5d1$export$8b58be045bf06082)(this.flatCoordinates, polygon.getFlatCoordinates());\n            ends = polygon.getEnds().slice();\n            for(let i = 0, ii = ends.length; i < ii; ++i)ends[i] += offset;\n        }\n        this.endss_.push(ends);\n        this.changed();\n    }\n    /**\r\n   * Make a complete copy of the geometry.\r\n   * @return {!MultiPolygon} Clone.\r\n   * @api\r\n   * @override\r\n   */ clone() {\n        const len = this.endss_.length;\n        const newEndss = new Array(len);\n        for(let i = 0; i < len; ++i)newEndss[i] = this.endss_[i].slice();\n        const multiPolygon = new $f73f35eb6af8b987$var$MultiPolygon(this.flatCoordinates.slice(), this.layout, newEndss);\n        multiPolygon.applyProperties(this);\n        return multiPolygon;\n    }\n    /**\r\n   * @param {number} x X.\r\n   * @param {number} y Y.\r\n   * @param {import(\"../coordinate.js\").Coordinate} closestPoint Closest point.\r\n   * @param {number} minSquaredDistance Minimum squared distance.\r\n   * @return {number} Minimum squared distance.\r\n   * @override\r\n   */ closestPointXY(x, y, closestPoint, minSquaredDistance) {\n        if (minSquaredDistance < (0, $6da4c8ed3074c92b$export$cbe64c389534206f)(this.getExtent(), x, y)) return minSquaredDistance;\n        if (this.maxDeltaRevision_ != this.getRevision()) {\n            this.maxDelta_ = Math.sqrt((0, $bf5604c1b8258b71$export$37c18e6e7d50501a)(this.flatCoordinates, 0, this.endss_, this.stride, 0));\n            this.maxDeltaRevision_ = this.getRevision();\n        }\n        return (0, $bf5604c1b8258b71$export$60e067685eb8f9c4)(this.getOrientedFlatCoordinates(), 0, this.endss_, this.stride, this.maxDelta_, true, x, y, closestPoint, minSquaredDistance);\n    }\n    /**\r\n   * @param {number} x X.\r\n   * @param {number} y Y.\r\n   * @return {boolean} Contains (x, y).\r\n   * @override\r\n   */ containsXY(x, y) {\n        return (0, $239aa88e7a573859$export$c760d9d16cf92043)(this.getOrientedFlatCoordinates(), 0, this.endss_, this.stride, x, y);\n    }\n    /**\r\n   * Return the area of the multipolygon on projected plane.\r\n   * @return {number} Area (on projected plane).\r\n   * @api\r\n   */ getArea() {\n        return (0, $01ff26a2f986a1d0$export$78e139679ca7205)(this.getOrientedFlatCoordinates(), 0, this.endss_, this.stride);\n    }\n    /**\r\n   * Get the coordinate array for this geometry.  This array has the structure\r\n   * of a GeoJSON coordinate array for multi-polygons.\r\n   *\r\n   * @param {boolean} [right] Orient coordinates according to the right-hand\r\n   *     rule (counter-clockwise for exterior and clockwise for interior rings).\r\n   *     If `false`, coordinates will be oriented according to the left-hand rule\r\n   *     (clockwise for exterior and counter-clockwise for interior rings).\r\n   *     By default, coordinate orientation will depend on how the geometry was\r\n   *     constructed.\r\n   * @return {Array<Array<Array<import(\"../coordinate.js\").Coordinate>>>} Coordinates.\r\n   * @api\r\n   * @override\r\n   */ getCoordinates(right) {\n        let flatCoordinates;\n        if (right !== undefined) {\n            flatCoordinates = this.getOrientedFlatCoordinates().slice();\n            (0, $7892dc06ffd23218$export$ea9ed55fc2a85010)(flatCoordinates, 0, this.endss_, this.stride, right);\n        } else flatCoordinates = this.flatCoordinates;\n        return (0, $5454470599558ddd$export$915c7058aeb4dfeb)(flatCoordinates, 0, this.endss_, this.stride);\n    }\n    /**\r\n   * @return {Array<Array<number>>} Endss.\r\n   */ getEndss() {\n        return this.endss_;\n    }\n    /**\r\n   * @return {Array<number>} Flat interior points.\r\n   */ getFlatInteriorPoints() {\n        if (this.flatInteriorPointsRevision_ != this.getRevision()) {\n            const flatCenters = (0, $9825fadaf3b68c4e$export$78e139679ca7205)(this.flatCoordinates, 0, this.endss_, this.stride);\n            this.flatInteriorPoints_ = (0, $2166f19777f69377$export$11463803eda8a372)(this.getOrientedFlatCoordinates(), 0, this.endss_, this.stride, flatCenters);\n            this.flatInteriorPointsRevision_ = this.getRevision();\n        }\n        return /** @type {Array<number>} */ this.flatInteriorPoints_;\n    }\n    /**\r\n   * Return the interior points as {@link module:ol/geom/MultiPoint~MultiPoint multipoint}.\r\n   * @return {MultiPoint} Interior points as XYM coordinates, where M is\r\n   * the length of the horizontal intersection that the point belongs to.\r\n   * @api\r\n   */ getInteriorPoints() {\n        return new (0, $e6080c63a9451eda$export$2e2bcd8739ae039)(this.getFlatInteriorPoints().slice(), 'XYM');\n    }\n    /**\r\n   * @return {Array<number>} Oriented flat coordinates.\r\n   */ getOrientedFlatCoordinates() {\n        if (this.orientedRevision_ != this.getRevision()) {\n            const flatCoordinates = this.flatCoordinates;\n            if ((0, $7892dc06ffd23218$export$a1d138f4bd85f4b4)(flatCoordinates, 0, this.endss_, this.stride)) this.orientedFlatCoordinates_ = flatCoordinates;\n            else {\n                this.orientedFlatCoordinates_ = flatCoordinates.slice();\n                this.orientedFlatCoordinates_.length = (0, $7892dc06ffd23218$export$ea9ed55fc2a85010)(this.orientedFlatCoordinates_, 0, this.endss_, this.stride);\n            }\n            this.orientedRevision_ = this.getRevision();\n        }\n        return /** @type {Array<number>} */ this.orientedFlatCoordinates_;\n    }\n    /**\r\n   * @param {number} squaredTolerance Squared tolerance.\r\n   * @return {MultiPolygon} Simplified MultiPolygon.\r\n   * @protected\r\n   * @override\r\n   */ getSimplifiedGeometryInternal(squaredTolerance) {\n        /** @type {Array<number>} */ const simplifiedFlatCoordinates = [];\n        /** @type {Array<Array<number>>} */ const simplifiedEndss = [];\n        simplifiedFlatCoordinates.length = (0, $8780aae6970f5f65$export$b9acf67ef05cd17c)(this.flatCoordinates, 0, this.endss_, this.stride, Math.sqrt(squaredTolerance), simplifiedFlatCoordinates, 0, simplifiedEndss);\n        return new $f73f35eb6af8b987$var$MultiPolygon(simplifiedFlatCoordinates, 'XY', simplifiedEndss);\n    }\n    /**\r\n   * Return the polygon at the specified index.\r\n   * @param {number} index Index.\r\n   * @return {Polygon} Polygon.\r\n   * @api\r\n   */ getPolygon(index) {\n        if (index < 0 || this.endss_.length <= index) return null;\n        let offset;\n        if (index === 0) offset = 0;\n        else {\n            const prevEnds = this.endss_[index - 1];\n            offset = prevEnds[prevEnds.length - 1];\n        }\n        const ends = this.endss_[index].slice();\n        const end = ends[ends.length - 1];\n        if (offset !== 0) for(let i = 0, ii = ends.length; i < ii; ++i)ends[i] -= offset;\n        return new (0, $40aa8d43bbe572bf$export$2e2bcd8739ae039)(this.flatCoordinates.slice(offset, end), this.layout, ends);\n    }\n    /**\r\n   * Return the polygons of this multipolygon.\r\n   * @return {Array<Polygon>} Polygons.\r\n   * @api\r\n   */ getPolygons() {\n        const layout = this.layout;\n        const flatCoordinates = this.flatCoordinates;\n        const endss = this.endss_;\n        const polygons = [];\n        let offset = 0;\n        for(let i = 0, ii = endss.length; i < ii; ++i){\n            const ends = endss[i].slice();\n            const end = ends[ends.length - 1];\n            if (offset !== 0) for(let j = 0, jj = ends.length; j < jj; ++j)ends[j] -= offset;\n            const polygon = new (0, $40aa8d43bbe572bf$export$2e2bcd8739ae039)(flatCoordinates.slice(offset, end), layout, ends);\n            polygons.push(polygon);\n            offset = end;\n        }\n        return polygons;\n    }\n    /**\r\n   * Get the type of this geometry.\r\n   * @return {import(\"./Geometry.js\").Type} Geometry type.\r\n   * @api\r\n   * @override\r\n   */ getType() {\n        return 'MultiPolygon';\n    }\n    /**\r\n   * Test if the geometry and the passed extent intersect.\r\n   * @param {import(\"../extent.js\").Extent} extent Extent.\r\n   * @return {boolean} `true` if the geometry and the extent intersect.\r\n   * @api\r\n   * @override\r\n   */ intersectsExtent(extent) {\n        return (0, $acee589e5b390c5c$export$77b72fa3792f5bf0)(this.getOrientedFlatCoordinates(), 0, this.endss_, this.stride, extent);\n    }\n    /**\r\n   * Set the coordinates of the multipolygon.\r\n   * @param {!Array<Array<Array<import(\"../coordinate.js\").Coordinate>>>} coordinates Coordinates.\r\n   * @param {import(\"./Geometry.js\").GeometryLayout} [layout] Layout.\r\n   * @api\r\n   * @override\r\n   */ setCoordinates(coordinates, layout) {\n        this.setLayout(layout, coordinates, 3);\n        if (!this.flatCoordinates) this.flatCoordinates = [];\n        const endss = (0, $6b086aa46281540d$export$f9f2bb59da4accd3)(this.flatCoordinates, 0, coordinates, this.stride, this.endss_);\n        if (endss.length === 0) this.flatCoordinates.length = 0;\n        else {\n            const lastEnds = endss[endss.length - 1];\n            this.flatCoordinates.length = lastEnds.length === 0 ? 0 : lastEnds[lastEnds.length - 1];\n        }\n        this.changed();\n    }\n}\nvar $f73f35eb6af8b987$export$2e2bcd8739ae039 = $f73f35eb6af8b987$var$MultiPolygon;\n\n\n\n\n/**\r\n * @typedef {'Point' | 'LineString' | 'LinearRing' | 'Polygon' | 'MultiPoint' | 'MultiLineString'} Type\r\n * The geometry type.  One of `'Point'`, `'LineString'`, `'LinearRing'`,\r\n * `'Polygon'`, `'MultiPoint'` or 'MultiLineString'`.\r\n */ /**\r\n * @type {import(\"../transform.js\").Transform}\r\n */ const $36d6c36c1f9ad5d9$var$tmpTransform = (0, $e22e7611e69f42a9$export$185802fd694ee1f5)();\n/**\r\n * Lightweight, read-only, {@link module:ol/Feature~Feature} and {@link module:ol/geom/Geometry~Geometry} like\r\n * structure, optimized for vector tile rendering and styling. Geometry access\r\n * through the API is limited to getting the type and extent of the geometry.\r\n */ class $36d6c36c1f9ad5d9$var$RenderFeature {\n    /**\r\n   * @param {Type} type Geometry type.\r\n   * @param {Array<number>} flatCoordinates Flat coordinates. These always need\r\n   *     to be right-handed for polygons.\r\n   * @param {Array<number>} ends Ends.\r\n   * @param {number} stride Stride.\r\n   * @param {Object<string, *>} properties Properties.\r\n   * @param {number|string|undefined} id Feature id.\r\n   */ constructor(type, flatCoordinates, ends, stride, properties, id){\n        /**\r\n     * @type {import(\"../style/Style.js\").StyleFunction|undefined}\r\n     */ this.styleFunction;\n        /**\r\n     * @private\r\n     * @type {import(\"../extent.js\").Extent|undefined}\r\n     */ this.extent_;\n        /**\r\n     * @private\r\n     * @type {number|string|undefined}\r\n     */ this.id_ = id;\n        /**\r\n     * @private\r\n     * @type {Type}\r\n     */ this.type_ = type;\n        /**\r\n     * @private\r\n     * @type {Array<number>}\r\n     */ this.flatCoordinates_ = flatCoordinates;\n        /**\r\n     * @private\r\n     * @type {Array<number>}\r\n     */ this.flatInteriorPoints_ = null;\n        /**\r\n     * @private\r\n     * @type {Array<number>}\r\n     */ this.flatMidpoints_ = null;\n        /**\r\n     * @private\r\n     * @type {Array<number>|null}\r\n     */ this.ends_ = ends || null;\n        /**\r\n     * @private\r\n     * @type {Object<string, *>}\r\n     */ this.properties_ = properties;\n        /**\r\n     * @private\r\n     * @type {number}\r\n     */ this.squaredTolerance_;\n        /**\r\n     * @private\r\n     * @type {number}\r\n     */ this.stride_ = stride;\n        /**\r\n     * @private\r\n     * @type {RenderFeature}\r\n     */ this.simplifiedGeometry_;\n    }\n    /**\r\n   * Get a feature property by its key.\r\n   * @param {string} key Key\r\n   * @return {*} Value for the requested key.\r\n   * @api\r\n   */ get(key) {\n        return this.properties_[key];\n    }\n    /**\r\n   * Get the extent of this feature's geometry.\r\n   * @return {import(\"../extent.js\").Extent} Extent.\r\n   * @api\r\n   */ getExtent() {\n        if (!this.extent_) this.extent_ = this.type_ === 'Point' ? (0, $6da4c8ed3074c92b$export$4838bf78d04a9440)(this.flatCoordinates_) : (0, $6da4c8ed3074c92b$export$be0ab0bf96ca59ca)(this.flatCoordinates_, 0, this.flatCoordinates_.length, 2);\n        return this.extent_;\n    }\n    /**\r\n   * @return {Array<number>} Flat interior points.\r\n   */ getFlatInteriorPoint() {\n        if (!this.flatInteriorPoints_) {\n            const flatCenter = (0, $6da4c8ed3074c92b$export$c91255cadecfe081)(this.getExtent());\n            this.flatInteriorPoints_ = (0, $2166f19777f69377$export$50e3b25928a5e892)(this.flatCoordinates_, 0, this.ends_, 2, flatCenter, 0);\n        }\n        return this.flatInteriorPoints_;\n    }\n    /**\r\n   * @return {Array<number>} Flat interior points.\r\n   */ getFlatInteriorPoints() {\n        if (!this.flatInteriorPoints_) {\n            const ends = (0, $7892dc06ffd23218$export$cb72ae403d6e78e6)(this.flatCoordinates_, this.ends_);\n            const flatCenters = (0, $9825fadaf3b68c4e$export$78e139679ca7205)(this.flatCoordinates_, 0, ends, 2);\n            this.flatInteriorPoints_ = (0, $2166f19777f69377$export$11463803eda8a372)(this.flatCoordinates_, 0, ends, 2, flatCenters);\n        }\n        return this.flatInteriorPoints_;\n    }\n    /**\r\n   * @return {Array<number>} Flat midpoint.\r\n   */ getFlatMidpoint() {\n        if (!this.flatMidpoints_) this.flatMidpoints_ = (0, $43ed5485a1d0c509$export$687ff82efd78795b)(this.flatCoordinates_, 0, this.flatCoordinates_.length, 2, 0.5);\n        return this.flatMidpoints_;\n    }\n    /**\r\n   * @return {Array<number>} Flat midpoints.\r\n   */ getFlatMidpoints() {\n        if (!this.flatMidpoints_) {\n            this.flatMidpoints_ = [];\n            const flatCoordinates = this.flatCoordinates_;\n            let offset = 0;\n            const ends = /** @type {Array<number>} */ this.ends_;\n            for(let i = 0, ii = ends.length; i < ii; ++i){\n                const end = ends[i];\n                const midpoint = (0, $43ed5485a1d0c509$export$687ff82efd78795b)(flatCoordinates, offset, end, 2, 0.5);\n                (0, $b998d41b678ed5d1$export$8b58be045bf06082)(this.flatMidpoints_, midpoint);\n                offset = end;\n            }\n        }\n        return this.flatMidpoints_;\n    }\n    /**\r\n   * Get the feature identifier.  This is a stable identifier for the feature and\r\n   * is set when reading data from a remote source.\r\n   * @return {number|string|undefined} Id.\r\n   * @api\r\n   */ getId() {\n        return this.id_;\n    }\n    /**\r\n   * @return {Array<number>} Flat coordinates.\r\n   */ getOrientedFlatCoordinates() {\n        return this.flatCoordinates_;\n    }\n    /**\r\n   * For API compatibility with {@link module:ol/Feature~Feature}, this method is useful when\r\n   * determining the geometry type in style function (see {@link #getType}).\r\n   * @return {RenderFeature} Feature.\r\n   * @api\r\n   */ getGeometry() {\n        return this;\n    }\n    /**\r\n   * @param {number} squaredTolerance Squared tolerance.\r\n   * @return {RenderFeature} Simplified geometry.\r\n   */ getSimplifiedGeometry(squaredTolerance) {\n        return this;\n    }\n    /**\r\n   * Get a transformed and simplified version of the geometry.\r\n   * @param {number} squaredTolerance Squared tolerance.\r\n   * @param {import(\"../proj.js\").TransformFunction} [transform] Optional transform function.\r\n   * @return {RenderFeature} Simplified geometry.\r\n   */ simplifyTransformed(squaredTolerance, transform) {\n        return this;\n    }\n    /**\r\n   * Get the feature properties.\r\n   * @return {Object<string, *>} Feature properties.\r\n   * @api\r\n   */ getProperties() {\n        return this.properties_;\n    }\n    /**\r\n   * Get an object of all property names and values.  This has the same behavior as getProperties,\r\n   * but is here to conform with the {@link module:ol/Feature~Feature} interface.\r\n   * @return {Object<string, *>?} Object.\r\n   */ getPropertiesInternal() {\n        return this.properties_;\n    }\n    /**\r\n   * @return {number} Stride.\r\n   */ getStride() {\n        return this.stride_;\n    }\n    /**\r\n   * @return {import('../style/Style.js').StyleFunction|undefined} Style\r\n   */ getStyleFunction() {\n        return this.styleFunction;\n    }\n    /**\r\n   * Get the type of this feature's geometry.\r\n   * @return {Type} Geometry type.\r\n   * @api\r\n   */ getType() {\n        return this.type_;\n    }\n    /**\r\n   * Transform geometry coordinates from tile pixel space to projected.\r\n   *\r\n   * @param {import(\"../proj.js\").ProjectionLike} projection The data projection\r\n   */ transform(projection) {\n        projection = (0, $9c4744460e43e41b$export$3988ae62b71be9a3)(projection);\n        const pixelExtent = projection.getExtent();\n        const projectedExtent = projection.getWorldExtent();\n        if (pixelExtent && projectedExtent) {\n            const scale = (0, $6da4c8ed3074c92b$export$c08559766941f856)(projectedExtent) / (0, $6da4c8ed3074c92b$export$c08559766941f856)(pixelExtent);\n            (0, $e22e7611e69f42a9$export$f672e0b6f7222cd7)($36d6c36c1f9ad5d9$var$tmpTransform, projectedExtent[0], projectedExtent[3], scale, -scale, 0, 0, 0);\n            (0, $14c6e714516e527b$export$b92b2dedcfff79de)(this.flatCoordinates_, 0, this.flatCoordinates_.length, 2, $36d6c36c1f9ad5d9$var$tmpTransform, this.flatCoordinates_);\n        }\n    }\n    /**\r\n   * Apply a transform function to the coordinates of the geometry.\r\n   * The geometry is modified in place.\r\n   * If you do not want the geometry modified in place, first `clone()` it and\r\n   * then use this function on the clone.\r\n   * @param {import(\"../proj.js\").TransformFunction} transformFn Transform function.\r\n   */ applyTransform(transformFn) {\n        transformFn(this.flatCoordinates_, this.flatCoordinates_, this.stride_);\n    }\n    /**\r\n   * @return {RenderFeature} A cloned render feature.\r\n   */ clone() {\n        return new $36d6c36c1f9ad5d9$var$RenderFeature(this.type_, this.flatCoordinates_.slice(), this.ends_?.slice(), this.stride_, Object.assign({}, this.properties_), this.id_);\n    }\n    /**\r\n   * @return {Array<number>|null} Ends.\r\n   */ getEnds() {\n        return this.ends_;\n    }\n    /**\r\n   * Add transform and resolution based geometry simplification to this instance.\r\n   * @return {RenderFeature} This render feature.\r\n   */ enableSimplifyTransformed() {\n        this.simplifyTransformed = (0, $013a1733c226ec50$export$ff83df6f9971435f)((squaredTolerance, transform)=>{\n            if (squaredTolerance === this.squaredTolerance_) return this.simplifiedGeometry_;\n            this.simplifiedGeometry_ = this.clone();\n            if (transform) this.simplifiedGeometry_.applyTransform(transform);\n            const simplifiedFlatCoordinates = this.simplifiedGeometry_.getFlatCoordinates();\n            let simplifiedEnds;\n            switch(this.type_){\n                case 'LineString':\n                    simplifiedFlatCoordinates.length = (0, $8780aae6970f5f65$export$ef693d1572e64fb8)(simplifiedFlatCoordinates, 0, this.simplifiedGeometry_.flatCoordinates_.length, this.simplifiedGeometry_.stride_, squaredTolerance, simplifiedFlatCoordinates, 0);\n                    simplifiedEnds = [\n                        simplifiedFlatCoordinates.length\n                    ];\n                    break;\n                case 'MultiLineString':\n                    simplifiedEnds = [];\n                    simplifiedFlatCoordinates.length = (0, $8780aae6970f5f65$export$cedb9900c0b225c2)(simplifiedFlatCoordinates, 0, this.simplifiedGeometry_.ends_, this.simplifiedGeometry_.stride_, squaredTolerance, simplifiedFlatCoordinates, 0, simplifiedEnds);\n                    break;\n                case 'Polygon':\n                    simplifiedEnds = [];\n                    simplifiedFlatCoordinates.length = (0, $8780aae6970f5f65$export$60a9904b67f8d51b)(simplifiedFlatCoordinates, 0, this.simplifiedGeometry_.ends_, this.simplifiedGeometry_.stride_, Math.sqrt(squaredTolerance), simplifiedFlatCoordinates, 0, simplifiedEnds);\n                    break;\n                default:\n            }\n            if (simplifiedEnds) this.simplifiedGeometry_ = new $36d6c36c1f9ad5d9$var$RenderFeature(this.type_, simplifiedFlatCoordinates, simplifiedEnds, 2, this.properties_, this.id_);\n            this.squaredTolerance_ = squaredTolerance;\n            return this.simplifiedGeometry_;\n        });\n        return this;\n    }\n}\n/**\r\n * @return {Array<number>} Flat coordinates.\r\n */ $36d6c36c1f9ad5d9$var$RenderFeature.prototype.getFlatCoordinates = $36d6c36c1f9ad5d9$var$RenderFeature.prototype.getOrientedFlatCoordinates;\nfunction $36d6c36c1f9ad5d9$export$b89ab3d1d30dec84(renderFeature) {\n    const geometryType = renderFeature.getType();\n    switch(geometryType){\n        case 'Point':\n            return new (0, $6eced4c969949f6b$export$2e2bcd8739ae039)(renderFeature.getFlatCoordinates());\n        case 'MultiPoint':\n            return new (0, $e6080c63a9451eda$export$2e2bcd8739ae039)(renderFeature.getFlatCoordinates(), 'XY');\n        case 'LineString':\n            return new (0, $292e4002746c8223$export$2e2bcd8739ae039)(renderFeature.getFlatCoordinates(), 'XY');\n        case 'MultiLineString':\n            return new (0, $b4c0e2e13beea46e$export$2e2bcd8739ae039)(renderFeature.getFlatCoordinates(), 'XY', /** @type {Array<number>} */ renderFeature.getEnds());\n        case 'Polygon':\n            const flatCoordinates = renderFeature.getFlatCoordinates();\n            const ends = renderFeature.getEnds();\n            const endss = (0, $7892dc06ffd23218$export$cb72ae403d6e78e6)(flatCoordinates, ends);\n            return endss.length > 1 ? new (0, $f73f35eb6af8b987$export$2e2bcd8739ae039)(flatCoordinates, 'XY', endss) : new (0, $40aa8d43bbe572bf$export$2e2bcd8739ae039)(flatCoordinates, 'XY', ends);\n        default:\n            throw new Error('Invalid geometry type:' + geometryType);\n    }\n}\nfunction $36d6c36c1f9ad5d9$export$ab19ba60efd1c4b5(renderFeature, geometryName) {\n    const id = renderFeature.getId();\n    const geometry = $36d6c36c1f9ad5d9$export$b89ab3d1d30dec84(renderFeature);\n    const properties = renderFeature.getProperties();\n    const feature = new (0, $9fd014ab6df63665$export$2e2bcd8739ae039)();\n    if (geometryName !== undefined) feature.setGeometryName(geometryName);\n    feature.setGeometry(geometry);\n    if (id !== undefined) feature.setId(id);\n    feature.setProperties(properties, true);\n    return feature;\n}\nvar $36d6c36c1f9ad5d9$export$2e2bcd8739ae039 = $36d6c36c1f9ad5d9$var$RenderFeature;\n\n\n/**\r\n * @module ol/format/Feature\r\n */ \n\n/**\r\n * @module ol/geom/GeometryCollection\r\n */ \n\n\n\n/**\r\n * @classdesc\r\n * An array of {@link module:ol/geom/Geometry~Geometry} objects.\r\n *\r\n * @api\r\n */ class $0e4f3959219eede5$var$GeometryCollection extends (0, $50db89a00eb954f6$export$2e2bcd8739ae039) {\n    /**\r\n   * @param {Array<Geometry>} geometries Geometries.\r\n   */ constructor(geometries){\n        super();\n        /**\r\n     * @private\r\n     * @type {Array<Geometry>}\r\n     */ this.geometries_ = geometries;\n        /**\r\n     * @private\r\n     * @type {Array<import(\"../events.js\").EventsKey>}\r\n     */ this.changeEventsKeys_ = [];\n        this.listenGeometriesChange_();\n    }\n    /**\r\n   * @private\r\n   */ unlistenGeometriesChange_() {\n        this.changeEventsKeys_.forEach((0, $d5bf8abd656a3cdc$export$b0a21c8b3c1c921));\n        this.changeEventsKeys_.length = 0;\n    }\n    /**\r\n   * @private\r\n   */ listenGeometriesChange_() {\n        const geometries = this.geometries_;\n        for(let i = 0, ii = geometries.length; i < ii; ++i)this.changeEventsKeys_.push((0, $d5bf8abd656a3cdc$export$63174c828edd6ff8)(geometries[i], (0, $294047c5e65f31a3$export$2e2bcd8739ae039).CHANGE, this.changed, this));\n    }\n    /**\r\n   * Make a complete copy of the geometry.\r\n   * @return {!GeometryCollection} Clone.\r\n   * @api\r\n   * @override\r\n   */ clone() {\n        const geometryCollection = new $0e4f3959219eede5$var$GeometryCollection($0e4f3959219eede5$var$cloneGeometries(this.geometries_));\n        geometryCollection.applyProperties(this);\n        return geometryCollection;\n    }\n    /**\r\n   * @param {number} x X.\r\n   * @param {number} y Y.\r\n   * @param {import(\"../coordinate.js\").Coordinate} closestPoint Closest point.\r\n   * @param {number} minSquaredDistance Minimum squared distance.\r\n   * @return {number} Minimum squared distance.\r\n   * @override\r\n   */ closestPointXY(x, y, closestPoint, minSquaredDistance) {\n        if (minSquaredDistance < (0, $6da4c8ed3074c92b$export$cbe64c389534206f)(this.getExtent(), x, y)) return minSquaredDistance;\n        const geometries = this.geometries_;\n        for(let i = 0, ii = geometries.length; i < ii; ++i)minSquaredDistance = geometries[i].closestPointXY(x, y, closestPoint, minSquaredDistance);\n        return minSquaredDistance;\n    }\n    /**\r\n   * @param {number} x X.\r\n   * @param {number} y Y.\r\n   * @return {boolean} Contains (x, y).\r\n   * @override\r\n   */ containsXY(x, y) {\n        const geometries = this.geometries_;\n        for(let i = 0, ii = geometries.length; i < ii; ++i){\n            if (geometries[i].containsXY(x, y)) return true;\n        }\n        return false;\n    }\n    /**\r\n   * @param {import(\"../extent.js\").Extent} extent Extent.\r\n   * @protected\r\n   * @return {import(\"../extent.js\").Extent} extent Extent.\r\n   * @override\r\n   */ computeExtent(extent) {\n        (0, $6da4c8ed3074c92b$export$3e2152b047719fa1)(extent);\n        const geometries = this.geometries_;\n        for(let i = 0, ii = geometries.length; i < ii; ++i)(0, $6da4c8ed3074c92b$export$8b58be045bf06082)(extent, geometries[i].getExtent());\n        return extent;\n    }\n    /**\r\n   * Return the geometries that make up this geometry collection.\r\n   * @return {Array<Geometry>} Geometries.\r\n   * @api\r\n   */ getGeometries() {\n        return $0e4f3959219eede5$var$cloneGeometries(this.geometries_);\n    }\n    /**\r\n   * @return {Array<Geometry>} Geometries.\r\n   */ getGeometriesArray() {\n        return this.geometries_;\n    }\n    /**\r\n   * @return {Array<Geometry>} Geometries.\r\n   */ getGeometriesArrayRecursive() {\n        /** @type {Array<Geometry>} */ let geometriesArray = [];\n        const geometries = this.geometries_;\n        for(let i = 0, ii = geometries.length; i < ii; ++i)if (geometries[i].getType() === this.getType()) geometriesArray = geometriesArray.concat(/** @type {GeometryCollection} */ geometries[i].getGeometriesArrayRecursive());\n        else geometriesArray.push(geometries[i]);\n        return geometriesArray;\n    }\n    /**\r\n   * Create a simplified version of this geometry using the Douglas Peucker algorithm.\r\n   * @param {number} squaredTolerance Squared tolerance.\r\n   * @return {GeometryCollection} Simplified GeometryCollection.\r\n   * @override\r\n   */ getSimplifiedGeometry(squaredTolerance) {\n        if (this.simplifiedGeometryRevision !== this.getRevision()) {\n            this.simplifiedGeometryMaxMinSquaredTolerance = 0;\n            this.simplifiedGeometryRevision = this.getRevision();\n        }\n        if (squaredTolerance < 0 || this.simplifiedGeometryMaxMinSquaredTolerance !== 0 && squaredTolerance < this.simplifiedGeometryMaxMinSquaredTolerance) return this;\n        const simplifiedGeometries = [];\n        const geometries = this.geometries_;\n        let simplified = false;\n        for(let i = 0, ii = geometries.length; i < ii; ++i){\n            const geometry = geometries[i];\n            const simplifiedGeometry = geometry.getSimplifiedGeometry(squaredTolerance);\n            simplifiedGeometries.push(simplifiedGeometry);\n            if (simplifiedGeometry !== geometry) simplified = true;\n        }\n        if (simplified) {\n            const simplifiedGeometryCollection = new $0e4f3959219eede5$var$GeometryCollection(simplifiedGeometries);\n            return simplifiedGeometryCollection;\n        }\n        this.simplifiedGeometryMaxMinSquaredTolerance = squaredTolerance;\n        return this;\n    }\n    /**\r\n   * Get the type of this geometry.\r\n   * @return {import(\"./Geometry.js\").Type} Geometry type.\r\n   * @api\r\n   * @override\r\n   */ getType() {\n        return 'GeometryCollection';\n    }\n    /**\r\n   * Test if the geometry and the passed extent intersect.\r\n   * @param {import(\"../extent.js\").Extent} extent Extent.\r\n   * @return {boolean} `true` if the geometry and the extent intersect.\r\n   * @api\r\n   * @override\r\n   */ intersectsExtent(extent) {\n        const geometries = this.geometries_;\n        for(let i = 0, ii = geometries.length; i < ii; ++i){\n            if (geometries[i].intersectsExtent(extent)) return true;\n        }\n        return false;\n    }\n    /**\r\n   * @return {boolean} Is empty.\r\n   */ isEmpty() {\n        return this.geometries_.length === 0;\n    }\n    /**\r\n   * Rotate the geometry around a given coordinate. This modifies the geometry\r\n   * coordinates in place.\r\n   * @param {number} angle Rotation angle in radians.\r\n   * @param {import(\"../coordinate.js\").Coordinate} anchor The rotation center.\r\n   * @api\r\n   * @override\r\n   */ rotate(angle, anchor) {\n        const geometries = this.geometries_;\n        for(let i = 0, ii = geometries.length; i < ii; ++i)geometries[i].rotate(angle, anchor);\n        this.changed();\n    }\n    /**\r\n   * Scale the geometry (with an optional origin).  This modifies the geometry\r\n   * coordinates in place.\r\n   * @abstract\r\n   * @param {number} sx The scaling factor in the x-direction.\r\n   * @param {number} [sy] The scaling factor in the y-direction (defaults to sx).\r\n   * @param {import(\"../coordinate.js\").Coordinate} [anchor] The scale origin (defaults to the center\r\n   *     of the geometry extent).\r\n   * @api\r\n   * @override\r\n   */ scale(sx, sy, anchor) {\n        if (!anchor) anchor = (0, $6da4c8ed3074c92b$export$c91255cadecfe081)(this.getExtent());\n        const geometries = this.geometries_;\n        for(let i = 0, ii = geometries.length; i < ii; ++i)geometries[i].scale(sx, sy, anchor);\n        this.changed();\n    }\n    /**\r\n   * Set the geometries that make up this geometry collection.\r\n   * @param {Array<Geometry>} geometries Geometries.\r\n   * @api\r\n   */ setGeometries(geometries) {\n        this.setGeometriesArray($0e4f3959219eede5$var$cloneGeometries(geometries));\n    }\n    /**\r\n   * @param {Array<Geometry>} geometries Geometries.\r\n   */ setGeometriesArray(geometries) {\n        this.unlistenGeometriesChange_();\n        this.geometries_ = geometries;\n        this.listenGeometriesChange_();\n        this.changed();\n    }\n    /**\r\n   * Apply a transform function to the coordinates of the geometry.\r\n   * The geometry is modified in place.\r\n   * If you do not want the geometry modified in place, first `clone()` it and\r\n   * then use this function on the clone.\r\n   * @param {import(\"../proj.js\").TransformFunction} transformFn Transform function.\r\n   * Called with a flat array of geometry coordinates.\r\n   * @api\r\n   * @override\r\n   */ applyTransform(transformFn) {\n        const geometries = this.geometries_;\n        for(let i = 0, ii = geometries.length; i < ii; ++i)geometries[i].applyTransform(transformFn);\n        this.changed();\n    }\n    /**\r\n   * Translate the geometry.  This modifies the geometry coordinates in place.  If\r\n   * instead you want a new geometry, first `clone()` this geometry.\r\n   * @param {number} deltaX Delta X.\r\n   * @param {number} deltaY Delta Y.\r\n   * @api\r\n   * @override\r\n   */ translate(deltaX, deltaY) {\n        const geometries = this.geometries_;\n        for(let i = 0, ii = geometries.length; i < ii; ++i)geometries[i].translate(deltaX, deltaY);\n        this.changed();\n    }\n    /**\r\n   * Clean up.\r\n   * @override\r\n   */ disposeInternal() {\n        this.unlistenGeometriesChange_();\n        super.disposeInternal();\n    }\n}\n/**\r\n * @param {Array<Geometry>} geometries Geometries.\r\n * @return {Array<Geometry>} Cloned geometries.\r\n */ function $0e4f3959219eede5$var$cloneGeometries(geometries) {\n    return geometries.map((geometry)=>geometry.clone());\n}\nvar $0e4f3959219eede5$export$2e2bcd8739ae039 = $0e4f3959219eede5$var$GeometryCollection;\n\n\n\n\n\n/**\r\n * @typedef {Object} ReadOptions\r\n * @property {import(\"../proj.js\").ProjectionLike} [dataProjection] Projection of the data we are reading.\r\n * If not provided, the projection will be derived from the data (where possible) or\r\n * the `dataProjection` of the format is assigned (where set). If the projection\r\n * can not be derived from the data and if no `dataProjection` is set for a format,\r\n * the features will not be reprojected.\r\n * @property {import(\"../extent.js\").Extent} [extent] Tile extent in map units of the tile being read.\r\n * This is only required when reading data with tile pixels as geometry units. When configured,\r\n * a `dataProjection` with `TILE_PIXELS` as `units` and the tile's pixel extent as `extent` needs to be\r\n * provided.\r\n * @property {import(\"../proj.js\").ProjectionLike} [featureProjection] Projection of the feature geometries\r\n * created by the format reader. If not provided, features will be returned in the\r\n * `dataProjection`.\r\n */ /**\r\n * @typedef {Object} WriteOptions\r\n * @property {import(\"../proj.js\").ProjectionLike} [dataProjection] Projection of the data we are writing.\r\n * If not provided, the `dataProjection` of the format is assigned (where set).\r\n * If no `dataProjection` is set for a format, the features will be returned\r\n * in the `featureProjection`.\r\n * @property {import(\"../proj.js\").ProjectionLike} [featureProjection] Projection of the feature geometries\r\n * that will be serialized by the format writer. If not provided, geometries are assumed\r\n * to be in the `dataProjection` if that is set; in other words, they are not transformed.\r\n * @property {boolean} [rightHanded] When writing geometries, follow the right-hand\r\n * rule for linear ring orientation.  This means that polygons will have counter-clockwise\r\n * exterior rings and clockwise interior rings.  By default, coordinates are serialized\r\n * as they are provided at construction.  If `true`, the right-hand rule will\r\n * be applied.  If `false`, the left-hand rule will be applied (clockwise for\r\n * exterior and counter-clockwise for interior rings).  Note that not all\r\n * formats support this.  The GeoJSON format does use this property when writing\r\n * geometries.\r\n * @property {number} [decimals] Maximum number of decimal places for coordinates.\r\n * Coordinates are stored internally as floats, but floating-point arithmetic can create\r\n * coordinates with a large number of decimal places, not generally wanted on output.\r\n * Set a number here to round coordinates. Can also be used to ensure that\r\n * coordinates read in can be written back out with the same number of decimals.\r\n * Default is no rounding.\r\n */ /**\r\n * @typedef {'arraybuffer' | 'json' | 'text' | 'xml'} Type\r\n */ /**\r\n * @typedef {Object} SimpleGeometryObject\r\n * @property {import('../geom/Geometry.js').Type} type Type.\r\n * @property {Array<number>} flatCoordinates Flat coordinates.\r\n * @property {Array<number>|Array<Array<number>>} [ends] Ends or endss.\r\n * @property {import('../geom/Geometry.js').GeometryLayout} [layout] Layout.\r\n */ /**\r\n * @typedef {Array<GeometryObject>} GeometryCollectionObject\r\n */ /**\r\n * @typedef {SimpleGeometryObject|GeometryCollectionObject} GeometryObject\r\n */ /**\r\n * @typedef {Object} FeatureObject\r\n * @property {string|number} [id] Id.\r\n * @property {GeometryObject} [geometry] Geometry.\r\n * @property {Object<string, *>} [properties] Properties.\r\n */ /***\r\n * @template {import('../Feature.js').FeatureLike} T\r\n * @typedef {T extends RenderFeature ? typeof RenderFeature : typeof Feature} FeatureToFeatureClass\r\n */ /***\r\n * @template {import(\"../Feature.js\").FeatureClass} T\r\n * @typedef {T[keyof T] extends RenderFeature ? RenderFeature : Feature} FeatureClassToFeature\r\n */ /**\r\n * @classdesc\r\n * Abstract base class; normally only used for creating subclasses and not\r\n * instantiated in apps.\r\n * Base class for feature formats.\r\n * {@link module:ol/format/Feature~FeatureFormat} subclasses provide the ability to decode and encode\r\n * {@link module:ol/Feature~Feature} objects from a variety of commonly used geospatial\r\n * file formats.  See the documentation for each format for more details.\r\n *\r\n * @template {import('../Feature.js').FeatureLike} [FeatureType=import(\"../Feature.js\").default]\r\n * @abstract\r\n * @api\r\n */ class $ec084d0ff9c13a22$var$FeatureFormat {\n    constructor(){\n        /**\r\n     * @protected\r\n     * @type {import(\"../proj/Projection.js\").default|undefined}\r\n     */ this.dataProjection = undefined;\n        /**\r\n     * @protected\r\n     * @type {import(\"../proj/Projection.js\").default|undefined}\r\n     */ this.defaultFeatureProjection = undefined;\n        /**\r\n     * @protected\r\n     * @type {FeatureToFeatureClass<FeatureType>}\r\n     */ this.featureClass = /** @type {FeatureToFeatureClass<FeatureType>} */ (0, $9fd014ab6df63665$export$2e2bcd8739ae039);\n        /**\r\n     * A list media types supported by the format in descending order of preference.\r\n     * @type {Array<string>}\r\n     */ this.supportedMediaTypes = null;\n    }\n    /**\r\n   * Adds the data projection to the read options.\r\n   * @param {Document|Element|Object|string} source Source.\r\n   * @param {ReadOptions} [options] Options.\r\n   * @return {ReadOptions|undefined} Options.\r\n   * @protected\r\n   */ getReadOptions(source, options) {\n        if (options) {\n            let dataProjection = options.dataProjection ? (0, $9c4744460e43e41b$export$3988ae62b71be9a3)(options.dataProjection) : this.readProjection(source);\n            if (options.extent && dataProjection && dataProjection.getUnits() === 'tile-pixels') {\n                dataProjection = (0, $9c4744460e43e41b$export$3988ae62b71be9a3)(dataProjection);\n                dataProjection.setWorldExtent(options.extent);\n            }\n            options = {\n                dataProjection: dataProjection,\n                featureProjection: options.featureProjection\n            };\n        }\n        return this.adaptOptions(options);\n    }\n    /**\r\n   * Sets the `dataProjection` on the options, if no `dataProjection`\r\n   * is set.\r\n   * @param {WriteOptions|ReadOptions|undefined} options\r\n   *     Options.\r\n   * @protected\r\n   * @return {WriteOptions|ReadOptions|undefined}\r\n   *     Updated options.\r\n   */ adaptOptions(options) {\n        return Object.assign({\n            dataProjection: this.dataProjection,\n            featureProjection: this.defaultFeatureProjection,\n            featureClass: this.featureClass\n        }, options);\n    }\n    /**\r\n   * @abstract\r\n   * @return {Type} The format type.\r\n   */ getType() {\n        return (0, $6c5e11070e371322$export$817eb92a8194bab0)();\n    }\n    /**\r\n   * Read a single feature from a source.\r\n   *\r\n   * @abstract\r\n   * @param {Document|Element|Object|string} source Source.\r\n   * @param {ReadOptions} [options] Read options.\r\n   * @return {FeatureType|Array<FeatureType>} Feature.\r\n   */ readFeature(source, options) {\n        return (0, $6c5e11070e371322$export$817eb92a8194bab0)();\n    }\n    /**\r\n   * Read all features from a source.\r\n   *\r\n   * @abstract\r\n   * @param {Document|Element|ArrayBuffer|Object|string} source Source.\r\n   * @param {ReadOptions} [options] Read options.\r\n   * @return {Array<FeatureType>} Features.\r\n   */ readFeatures(source, options) {\n        return (0, $6c5e11070e371322$export$817eb92a8194bab0)();\n    }\n    /**\r\n   * Read a single geometry from a source.\r\n   *\r\n   * @abstract\r\n   * @param {Document|Element|Object|string} source Source.\r\n   * @param {ReadOptions} [options] Read options.\r\n   * @return {import(\"../geom/Geometry.js\").default} Geometry.\r\n   */ readGeometry(source, options) {\n        return (0, $6c5e11070e371322$export$817eb92a8194bab0)();\n    }\n    /**\r\n   * Read the projection from a source.\r\n   *\r\n   * @abstract\r\n   * @param {Document|Element|Object|string} source Source.\r\n   * @return {import(\"../proj/Projection.js\").default|undefined} Projection.\r\n   */ readProjection(source) {\n        return (0, $6c5e11070e371322$export$817eb92a8194bab0)();\n    }\n    /**\r\n   * Encode a feature in this format.\r\n   *\r\n   * @abstract\r\n   * @param {Feature} feature Feature.\r\n   * @param {WriteOptions} [options] Write options.\r\n   * @return {string|ArrayBuffer} Result.\r\n   */ writeFeature(feature, options) {\n        return (0, $6c5e11070e371322$export$817eb92a8194bab0)();\n    }\n    /**\r\n   * Encode an array of features in this format.\r\n   *\r\n   * @abstract\r\n   * @param {Array<Feature>} features Features.\r\n   * @param {WriteOptions} [options] Write options.\r\n   * @return {string|ArrayBuffer} Result.\r\n   */ writeFeatures(features, options) {\n        return (0, $6c5e11070e371322$export$817eb92a8194bab0)();\n    }\n    /**\r\n   * Write a single geometry in this format.\r\n   *\r\n   * @abstract\r\n   * @param {import(\"../geom/Geometry.js\").default} geometry Geometry.\r\n   * @param {WriteOptions} [options] Write options.\r\n   * @return {string|ArrayBuffer} Result.\r\n   */ writeGeometry(geometry, options) {\n        return (0, $6c5e11070e371322$export$817eb92a8194bab0)();\n    }\n}\nvar $ec084d0ff9c13a22$export$2e2bcd8739ae039 = $ec084d0ff9c13a22$var$FeatureFormat;\nfunction $ec084d0ff9c13a22$export$7beeea566b560d4(geometry, write, options) {\n    const featureProjection = options ? (0, $9c4744460e43e41b$export$3988ae62b71be9a3)(options.featureProjection) : null;\n    const dataProjection = options ? (0, $9c4744460e43e41b$export$3988ae62b71be9a3)(options.dataProjection) : null;\n    let transformed = geometry;\n    if (featureProjection && dataProjection && !(0, $9c4744460e43e41b$export$fe091d73a555748b)(featureProjection, dataProjection)) {\n        if (write) transformed = /** @type {T} */ geometry.clone();\n        const fromProjection = write ? featureProjection : dataProjection;\n        const toProjection = write ? dataProjection : featureProjection;\n        if (fromProjection.getUnits() === 'tile-pixels') transformed.transform(fromProjection, toProjection);\n        else transformed.applyTransform((0, $9c4744460e43e41b$export$fce0c6cfca85ed96)(fromProjection, toProjection));\n    }\n    if (write && options && /** @type {WriteOptions} */ options.decimals !== undefined) {\n        const power = Math.pow(10, /** @type {WriteOptions} */ options.decimals);\n        // if decimals option on write, round each coordinate appropriately\n        /**\r\n     * @param {Array<number>} coordinates Coordinates.\r\n     * @return {Array<number>} Transformed coordinates.\r\n     */ const transform = function(coordinates) {\n            for(let i = 0, ii = coordinates.length; i < ii; ++i)coordinates[i] = Math.round(coordinates[i] * power) / power;\n            return coordinates;\n        };\n        if (transformed === geometry) transformed = /** @type {T} */ geometry.clone();\n        transformed.applyTransform(transform);\n    }\n    return transformed;\n}\nfunction $ec084d0ff9c13a22$export$d3e9e4b1c7f2405c(extent, options) {\n    const featureProjection = options ? (0, $9c4744460e43e41b$export$3988ae62b71be9a3)(options.featureProjection) : null;\n    const dataProjection = options ? (0, $9c4744460e43e41b$export$3988ae62b71be9a3)(options.dataProjection) : null;\n    if (featureProjection && dataProjection && !(0, $9c4744460e43e41b$export$fe091d73a555748b)(featureProjection, dataProjection)) return (0, $9c4744460e43e41b$export$751c68e0e0efff79)(extent, dataProjection, featureProjection);\n    return extent;\n}\nconst $ec084d0ff9c13a22$var$GeometryConstructor = {\n    Point: (0, $6eced4c969949f6b$export$2e2bcd8739ae039),\n    LineString: (0, $292e4002746c8223$export$2e2bcd8739ae039),\n    Polygon: (0, $40aa8d43bbe572bf$export$2e2bcd8739ae039),\n    MultiPoint: (0, $e6080c63a9451eda$export$2e2bcd8739ae039),\n    MultiLineString: (0, $b4c0e2e13beea46e$export$2e2bcd8739ae039),\n    MultiPolygon: (0, $f73f35eb6af8b987$export$2e2bcd8739ae039)\n};\nfunction $ec084d0ff9c13a22$var$orientFlatCoordinates(flatCoordinates, ends, stride) {\n    if (Array.isArray(ends[0])) {\n        // MultiPolagon\n        if (!(0, $7892dc06ffd23218$export$a1d138f4bd85f4b4)(flatCoordinates, 0, ends, stride)) {\n            flatCoordinates = flatCoordinates.slice();\n            (0, $7892dc06ffd23218$export$ea9ed55fc2a85010)(flatCoordinates, 0, ends, stride);\n        }\n        return flatCoordinates;\n    }\n    if (!(0, $7892dc06ffd23218$export$f27cd06e85f4ba28)(flatCoordinates, 0, ends, stride)) {\n        flatCoordinates = flatCoordinates.slice();\n        (0, $7892dc06ffd23218$export$b71b604ddfc778c7)(flatCoordinates, 0, ends, stride);\n    }\n    return flatCoordinates;\n}\nfunction $ec084d0ff9c13a22$export$f935e77582b330a(object, options) {\n    const geometry = object.geometry;\n    if (!geometry) return [];\n    if (Array.isArray(geometry)) return geometry.map((geometry)=>$ec084d0ff9c13a22$export$f935e77582b330a({\n            ...object,\n            geometry: geometry\n        })).flat();\n    const geometryType = geometry.type === 'MultiPolygon' ? 'Polygon' : geometry.type;\n    if (geometryType === 'GeometryCollection' || geometryType === 'Circle') throw new Error('Unsupported geometry type: ' + geometryType);\n    const stride = geometry.layout.length;\n    return $ec084d0ff9c13a22$export$7beeea566b560d4(new (0, $36d6c36c1f9ad5d9$export$2e2bcd8739ae039)(geometryType, geometryType === 'Polygon' ? $ec084d0ff9c13a22$var$orientFlatCoordinates(geometry.flatCoordinates, geometry.ends, stride) : geometry.flatCoordinates, geometry.ends?.flat(), stride, object.properties || {}, object.id).enableSimplifyTransformed(), false, options);\n}\nfunction $ec084d0ff9c13a22$export$322c9678d8c47bf(object, options) {\n    if (!object) return null;\n    if (Array.isArray(object)) {\n        const geometries = object.map((geometry)=>$ec084d0ff9c13a22$export$322c9678d8c47bf(geometry, options));\n        return new (0, $0e4f3959219eede5$export$2e2bcd8739ae039)(geometries);\n    }\n    const Geometry = $ec084d0ff9c13a22$var$GeometryConstructor[object.type];\n    return $ec084d0ff9c13a22$export$7beeea566b560d4(new Geometry(object.flatCoordinates, object.layout || 'XY', object.ends), false, options);\n}\n\n\n/**\r\n * @module ol/format/JSONFeature\r\n */ \n\n/**\r\n * @classdesc\r\n * Abstract base class; normally only used for creating subclasses and not\r\n * instantiated in apps.\r\n * Base class for JSON feature formats.\r\n *\r\n * @template {import('../Feature.js').FeatureLike} [FeatureType=import(\"../Feature.js\").default]\r\n * @extends {FeatureFormat<FeatureType>}\r\n * @abstract\r\n */ class $2f9f6f6b6e1ba437$var$JSONFeature extends (0, $ec084d0ff9c13a22$export$2e2bcd8739ae039) {\n    constructor(){\n        super();\n    }\n    /**\r\n   * @return {import(\"./Feature.js\").Type} Format.\r\n   * @override\r\n   */ getType() {\n        return 'json';\n    }\n    /**\r\n   * Read a feature.  Only works for a single feature. Use `readFeatures` to\r\n   * read a feature collection.\r\n   *\r\n   * @param {ArrayBuffer|Document|Element|Object|string} source Source.\r\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\r\n   * @return {FeatureType|Array<FeatureType>} Feature.\r\n   * @api\r\n   * @override\r\n   */ readFeature(source, options) {\n        return this.readFeatureFromObject($2f9f6f6b6e1ba437$var$getObject(source), this.getReadOptions(source, options));\n    }\n    /**\r\n   * Read all features.  Works with both a single feature and a feature\r\n   * collection.\r\n   *\r\n   * @param {ArrayBuffer|Document|Element|Object|string} source Source.\r\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\r\n   * @return {Array<FeatureType>} Features.\r\n   * @api\r\n   * @override\r\n   */ readFeatures(source, options) {\n        return this.readFeaturesFromObject($2f9f6f6b6e1ba437$var$getObject(source), this.getReadOptions(source, options));\n    }\n    /**\r\n   * @abstract\r\n   * @param {Object} object Object.\r\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\r\n   * @protected\r\n   * @return {FeatureType|Array<FeatureType>} Feature.\r\n   */ readFeatureFromObject(object, options) {\n        return (0, $6c5e11070e371322$export$817eb92a8194bab0)();\n    }\n    /**\r\n   * @abstract\r\n   * @param {Object} object Object.\r\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\r\n   * @protected\r\n   * @return {Array<FeatureType>} Features.\r\n   */ readFeaturesFromObject(object, options) {\n        return (0, $6c5e11070e371322$export$817eb92a8194bab0)();\n    }\n    /**\r\n   * Read a geometry.\r\n   *\r\n   * @param {ArrayBuffer|Document|Element|Object|string} source Source.\r\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\r\n   * @return {import(\"../geom/Geometry.js\").default} Geometry.\r\n   * @api\r\n   * @override\r\n   */ readGeometry(source, options) {\n        return this.readGeometryFromObject($2f9f6f6b6e1ba437$var$getObject(source), this.getReadOptions(source, options));\n    }\n    /**\r\n   * @abstract\r\n   * @param {Object} object Object.\r\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\r\n   * @protected\r\n   * @return {import(\"../geom/Geometry.js\").default} Geometry.\r\n   */ readGeometryFromObject(object, options) {\n        return (0, $6c5e11070e371322$export$817eb92a8194bab0)();\n    }\n    /**\r\n   * Read the projection.\r\n   *\r\n   * @param {ArrayBuffer|Document|Element|Object|string} source Source.\r\n   * @return {import(\"../proj/Projection.js\").default} Projection.\r\n   * @api\r\n   * @override\r\n   */ readProjection(source) {\n        return this.readProjectionFromObject($2f9f6f6b6e1ba437$var$getObject(source));\n    }\n    /**\r\n   * @abstract\r\n   * @param {Object} object Object.\r\n   * @protected\r\n   * @return {import(\"../proj/Projection.js\").default} Projection.\r\n   */ readProjectionFromObject(object) {\n        return (0, $6c5e11070e371322$export$817eb92a8194bab0)();\n    }\n    /**\r\n   * Encode a feature as string.\r\n   *\r\n   * @param {import(\"../Feature.js\").default} feature Feature.\r\n   * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\r\n   * @return {string} Encoded feature.\r\n   * @api\r\n   * @override\r\n   */ writeFeature(feature, options) {\n        return JSON.stringify(this.writeFeatureObject(feature, options));\n    }\n    /**\r\n   * @abstract\r\n   * @param {import(\"../Feature.js\").default} feature Feature.\r\n   * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\r\n   * @return {Object} Object.\r\n   */ writeFeatureObject(feature, options) {\n        return (0, $6c5e11070e371322$export$817eb92a8194bab0)();\n    }\n    /**\r\n   * Encode an array of features as string.\r\n   *\r\n   * @param {Array<import(\"../Feature.js\").default>} features Features.\r\n   * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\r\n   * @return {string} Encoded features.\r\n   * @api\r\n   * @override\r\n   */ writeFeatures(features, options) {\n        return JSON.stringify(this.writeFeaturesObject(features, options));\n    }\n    /**\r\n   * @abstract\r\n   * @param {Array<import(\"../Feature.js\").default>} features Features.\r\n   * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\r\n   * @return {Object} Object.\r\n   */ writeFeaturesObject(features, options) {\n        return (0, $6c5e11070e371322$export$817eb92a8194bab0)();\n    }\n    /**\r\n   * Encode a geometry as string.\r\n   *\r\n   * @param {import(\"../geom/Geometry.js\").default} geometry Geometry.\r\n   * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\r\n   * @return {string} Encoded geometry.\r\n   * @api\r\n   * @override\r\n   */ writeGeometry(geometry, options) {\n        return JSON.stringify(this.writeGeometryObject(geometry, options));\n    }\n    /**\r\n   * @abstract\r\n   * @param {import(\"../geom/Geometry.js\").default} geometry Geometry.\r\n   * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\r\n   * @return {Object} Object.\r\n   */ writeGeometryObject(geometry, options) {\n        return (0, $6c5e11070e371322$export$817eb92a8194bab0)();\n    }\n}\n/**\r\n * @param {Document|Element|Object|string} source Source.\r\n * @return {Object} Object.\r\n */ function $2f9f6f6b6e1ba437$var$getObject(source) {\n    if (typeof source === 'string') {\n        const object = JSON.parse(source);\n        return object ? /** @type {Object} */ object : null;\n    }\n    if (source !== null) return source;\n    return null;\n}\nvar $2f9f6f6b6e1ba437$export$2e2bcd8739ae039 = $2f9f6f6b6e1ba437$var$JSONFeature;\n\n\n/**\r\n * @typedef {import(\"geojson\").GeoJSON} GeoJSONObject\r\n * @typedef {import(\"geojson\").Feature} GeoJSONFeature\r\n * @typedef {import(\"geojson\").FeatureCollection} GeoJSONFeatureCollection\r\n * @typedef {import(\"geojson\").Geometry} GeoJSONGeometry\r\n * @typedef {import(\"geojson\").Point} GeoJSONPoint\r\n * @typedef {import(\"geojson\").LineString} GeoJSONLineString\r\n * @typedef {import(\"geojson\").Polygon} GeoJSONPolygon\r\n * @typedef {import(\"geojson\").MultiPoint} GeoJSONMultiPoint\r\n * @typedef {import(\"geojson\").MultiLineString} GeoJSONMultiLineString\r\n * @typedef {import(\"geojson\").MultiPolygon} GeoJSONMultiPolygon\r\n * @typedef {import(\"geojson\").GeometryCollection} GeoJSONGeometryCollection\r\n */ /**\r\n * @template {import(\"../Feature.js\").FeatureLike} [FeatureType=import(\"../Feature.js\").default]\r\n * @typedef {Object} Options\r\n *\r\n * @property {import(\"../proj.js\").ProjectionLike} [dataProjection='EPSG:4326'] Default data projection.\r\n * @property {import(\"../proj.js\").ProjectionLike} [featureProjection] Projection for features read or\r\n * written by the format.  Options passed to read or write methods will take precedence.\r\n * @property {string} [geometryName] Geometry name to use when creating features.\r\n * @property {boolean} [extractGeometryName=false] Certain GeoJSON providers include\r\n * the geometry_name field in the feature GeoJSON. If set to `true` the GeoJSON reader\r\n * will look for that field to set the geometry name. If both this field is set to `true`\r\n * and a `geometryName` is provided, the `geometryName` will take precedence.\r\n * @property {import('./Feature.js').FeatureToFeatureClass<FeatureType>} [featureClass] Feature class\r\n * to be used when reading features. The default is {@link module:ol/Feature~Feature}. If performance is\r\n * the primary concern, and features are not going to be modified or round-tripped through the format,\r\n * consider using {@link module:ol/render/Feature~RenderFeature}\r\n */ /**\r\n * @classdesc\r\n * Feature format for reading and writing data in the GeoJSON format.\r\n *\r\n * @template {import('../Feature.js').FeatureLike} [FeatureType=import(\"../Feature.js\").default]\r\n * @extends {JSONFeature<FeatureType>}\r\n * @api\r\n */ class $f602cef51a2e6950$var$GeoJSON extends (0, $2f9f6f6b6e1ba437$export$2e2bcd8739ae039) {\n    /**\r\n   * @param {Options<FeatureType>} [options] Options.\r\n   */ constructor(options){\n        options = options ? options : {};\n        super();\n        /**\r\n     * @type {import(\"../proj/Projection.js\").default}\r\n     */ this.dataProjection = (0, $9c4744460e43e41b$export$3988ae62b71be9a3)(options.dataProjection ? options.dataProjection : 'EPSG:4326');\n        if (options.featureProjection) /**\r\n       * @type {import(\"../proj/Projection.js\").default}\r\n       */ this.defaultFeatureProjection = (0, $9c4744460e43e41b$export$3988ae62b71be9a3)(options.featureProjection);\n        if (options.featureClass) this.featureClass = options.featureClass;\n        /**\r\n     * Name of the geometry attribute for features.\r\n     * @type {string|undefined}\r\n     * @private\r\n     */ this.geometryName_ = options.geometryName;\n        /**\r\n     * Look for the `geometry_name` in the feature GeoJSON\r\n     * @type {boolean|undefined}\r\n     * @private\r\n     */ this.extractGeometryName_ = options.extractGeometryName;\n        this.supportedMediaTypes = [\n            'application/geo+json',\n            'application/vnd.geo+json'\n        ];\n    }\n    /**\r\n   * @param {Object} object Object.\r\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\r\n   * @protected\r\n   * @return {FeatureType|Array<FeatureType>} Feature.\r\n   * @override\r\n   */ readFeatureFromObject(object, options) {\n        /**\r\n     * @type {GeoJSONFeature}\r\n     */ let geoJSONFeature = null;\n        if (object['type'] === 'Feature') geoJSONFeature = /** @type {GeoJSONFeature} */ object;\n        else geoJSONFeature = {\n            'type': 'Feature',\n            'geometry': /** @type {GeoJSONGeometry} */ object,\n            'properties': null\n        };\n        const geometry = $f602cef51a2e6950$var$readGeometryInternal(geoJSONFeature['geometry'], options);\n        if (this.featureClass === (0, $36d6c36c1f9ad5d9$export$2e2bcd8739ae039)) return /** @type {FeatureType|Array<FeatureType>} */ (0, $ec084d0ff9c13a22$export$f935e77582b330a)({\n            geometry: geometry,\n            id: geoJSONFeature['id'],\n            properties: geoJSONFeature['properties']\n        }, options);\n        const feature = new (0, $9fd014ab6df63665$export$2e2bcd8739ae039)();\n        if (this.geometryName_) feature.setGeometryName(this.geometryName_);\n        else if (this.extractGeometryName_ && geoJSONFeature['geometry_name']) feature.setGeometryName(geoJSONFeature['geometry_name']);\n        feature.setGeometry((0, $ec084d0ff9c13a22$export$322c9678d8c47bf)(geometry, options));\n        if ('id' in geoJSONFeature) feature.setId(geoJSONFeature['id']);\n        if (geoJSONFeature['properties']) feature.setProperties(geoJSONFeature['properties'], true);\n        return /** @type {FeatureType|Array<FeatureType>} */ feature;\n    }\n    /**\r\n   * @param {Object} object Object.\r\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\r\n   * @protected\r\n   * @return {Array<FeatureType>} Features.\r\n   * @override\r\n   */ readFeaturesFromObject(object, options) {\n        const geoJSONObject = /** @type {GeoJSONObject} */ object;\n        let features = null;\n        if (geoJSONObject['type'] === 'FeatureCollection') {\n            const geoJSONFeatureCollection = /** @type {GeoJSONFeatureCollection} */ object;\n            features = [];\n            const geoJSONFeatures = geoJSONFeatureCollection['features'];\n            for(let i = 0, ii = geoJSONFeatures.length; i < ii; ++i){\n                const featureObject = this.readFeatureFromObject(geoJSONFeatures[i], options);\n                if (!featureObject) continue;\n                features.push(featureObject);\n            }\n        } else features = [\n            this.readFeatureFromObject(object, options)\n        ];\n        return /** @type {Array<FeatureType>} */ features.flat();\n    }\n    /**\r\n   * @param {GeoJSONGeometry} object Object.\r\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\r\n   * @protected\r\n   * @return {import(\"../geom/Geometry.js\").default} Geometry.\r\n   * @override\r\n   */ readGeometryFromObject(object, options) {\n        return $f602cef51a2e6950$var$readGeometry(object, options);\n    }\n    /**\r\n   * @param {Object} object Object.\r\n   * @protected\r\n   * @return {import(\"../proj/Projection.js\").default} Projection.\r\n   * @override\r\n   */ readProjectionFromObject(object) {\n        const crs = object['crs'];\n        let projection;\n        if (crs) {\n            if (crs['type'] == 'name') projection = (0, $9c4744460e43e41b$export$3988ae62b71be9a3)(crs['properties']['name']);\n            else if (crs['type'] === 'EPSG') projection = (0, $9c4744460e43e41b$export$3988ae62b71be9a3)('EPSG:' + crs['properties']['code']);\n            else throw new Error('Unknown SRS type');\n        } else projection = this.dataProjection;\n        return /** @type {import(\"../proj/Projection.js\").default} */ projection;\n    }\n    /**\r\n   * Encode a feature as a GeoJSON Feature object.\r\n   *\r\n   * @param {import(\"../Feature.js\").default} feature Feature.\r\n   * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\r\n   * @return {GeoJSONFeature} Object.\r\n   * @api\r\n   * @override\r\n   */ writeFeatureObject(feature, options) {\n        options = this.adaptOptions(options);\n        /** @type {GeoJSONFeature} */ const object = {\n            'type': 'Feature',\n            geometry: null,\n            properties: null\n        };\n        const id = feature.getId();\n        if (id !== undefined) object.id = id;\n        if (!feature.hasProperties()) return object;\n        const properties = feature.getProperties();\n        const geometry = feature.getGeometry();\n        if (geometry) {\n            object.geometry = $f602cef51a2e6950$var$writeGeometry(geometry, options);\n            delete properties[feature.getGeometryName()];\n        }\n        if (!(0, $beaefe87199bb537$export$dd1bc94b04021eeb)(properties)) object.properties = properties;\n        return object;\n    }\n    /**\r\n   * Encode an array of features as a GeoJSON object.\r\n   *\r\n   * @param {Array<import(\"../Feature.js\").default>} features Features.\r\n   * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\r\n   * @return {GeoJSONFeatureCollection} GeoJSON Object.\r\n   * @api\r\n   * @override\r\n   */ writeFeaturesObject(features, options) {\n        options = this.adaptOptions(options);\n        const objects = [];\n        for(let i = 0, ii = features.length; i < ii; ++i)objects.push(this.writeFeatureObject(features[i], options));\n        return {\n            type: 'FeatureCollection',\n            features: objects\n        };\n    }\n    /**\r\n   * Encode a geometry as a GeoJSON object.\r\n   *\r\n   * @param {import(\"../geom/Geometry.js\").default} geometry Geometry.\r\n   * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\r\n   * @return {GeoJSONGeometry|GeoJSONGeometryCollection} Object.\r\n   * @api\r\n   * @override\r\n   */ writeGeometryObject(geometry, options) {\n        return $f602cef51a2e6950$var$writeGeometry(geometry, this.adaptOptions(options));\n    }\n}\n/**\r\n * @param {GeoJSONGeometry|GeoJSONGeometryCollection} object Object.\r\n * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\r\n * @return {import(\"./Feature.js\").GeometryObject} Geometry.\r\n */ function $f602cef51a2e6950$var$readGeometryInternal(object, options) {\n    if (!object) return null;\n    /** @type {import(\"./Feature.js\").GeometryObject} */ let geometry;\n    switch(object['type']){\n        case 'Point':\n            geometry = $f602cef51a2e6950$var$readPointGeometry(/** @type {GeoJSONPoint} */ object);\n            break;\n        case 'LineString':\n            geometry = $f602cef51a2e6950$var$readLineStringGeometry(/** @type {GeoJSONLineString} */ object);\n            break;\n        case 'Polygon':\n            geometry = $f602cef51a2e6950$var$readPolygonGeometry(/** @type {GeoJSONPolygon} */ object);\n            break;\n        case 'MultiPoint':\n            geometry = $f602cef51a2e6950$var$readMultiPointGeometry(/** @type {GeoJSONMultiPoint} */ object);\n            break;\n        case 'MultiLineString':\n            geometry = $f602cef51a2e6950$var$readMultiLineStringGeometry(/** @type {GeoJSONMultiLineString} */ object);\n            break;\n        case 'MultiPolygon':\n            geometry = $f602cef51a2e6950$var$readMultiPolygonGeometry(/** @type {GeoJSONMultiPolygon} */ object);\n            break;\n        case 'GeometryCollection':\n            geometry = $f602cef51a2e6950$var$readGeometryCollectionGeometry(/** @type {GeoJSONGeometryCollection} */ object);\n            break;\n        default:\n            throw new Error('Unsupported GeoJSON type: ' + object['type']);\n    }\n    return geometry;\n}\n/**\r\n * @param {GeoJSONGeometry|GeoJSONGeometryCollection} object Object.\r\n * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\r\n * @return {import(\"../geom/Geometry.js\").default} Geometry.\r\n */ function $f602cef51a2e6950$var$readGeometry(object, options) {\n    const geometryObject = $f602cef51a2e6950$var$readGeometryInternal(object, options);\n    return (0, $ec084d0ff9c13a22$export$322c9678d8c47bf)(geometryObject, options);\n}\n/**\r\n * @param {GeoJSONGeometryCollection} object Object.\r\n * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\r\n * @return {import(\"./Feature.js\").GeometryCollectionObject} Geometry collection.\r\n */ function $f602cef51a2e6950$var$readGeometryCollectionGeometry(object, options) {\n    const geometries = object['geometries'].map(/**\r\n     * @param {GeoJSONGeometry} geometry Geometry.\r\n     * @return {import(\"./Feature.js\").GeometryObject} geometry Geometry.\r\n     */ function(geometry) {\n        return $f602cef51a2e6950$var$readGeometryInternal(geometry, options);\n    });\n    return geometries;\n}\n/**\r\n * @param {GeoJSONPoint} object Input object.\r\n * @return {import(\"./Feature.js\").GeometryObject} Point geometry.\r\n */ function $f602cef51a2e6950$var$readPointGeometry(object) {\n    const flatCoordinates = object['coordinates'];\n    return {\n        type: 'Point',\n        flatCoordinates: flatCoordinates,\n        layout: (0, $c76e993e57efc8c4$export$61bb6938093db2c8)(flatCoordinates.length)\n    };\n}\n/**\r\n * @param {GeoJSONLineString} object Object.\r\n * @return {import(\"./Feature.js\").GeometryObject} LineString geometry.\r\n */ function $f602cef51a2e6950$var$readLineStringGeometry(object) {\n    const coordinates = object['coordinates'];\n    const flatCoordinates = coordinates.flat();\n    return {\n        type: 'LineString',\n        flatCoordinates: flatCoordinates,\n        ends: [\n            flatCoordinates.length\n        ],\n        layout: (0, $c76e993e57efc8c4$export$61bb6938093db2c8)(coordinates[0]?.length || 2)\n    };\n}\n/**\r\n * @param {GeoJSONMultiLineString} object Object.\r\n * @return {import(\"./Feature.js\").GeometryObject} MultiLineString geometry.\r\n */ function $f602cef51a2e6950$var$readMultiLineStringGeometry(object) {\n    const coordinates = object['coordinates'];\n    const stride = coordinates[0]?.[0]?.length || 2;\n    const flatCoordinates = [];\n    const ends = (0, $6b086aa46281540d$export$47c3746a74384d45)(flatCoordinates, 0, coordinates, stride);\n    return {\n        type: 'MultiLineString',\n        flatCoordinates: flatCoordinates,\n        ends: ends,\n        layout: (0, $c76e993e57efc8c4$export$61bb6938093db2c8)(stride)\n    };\n}\n/**\r\n * @param {GeoJSONMultiPoint} object Object.\r\n * @return {import(\"./Feature.js\").GeometryObject} MultiPoint geometry.\r\n */ function $f602cef51a2e6950$var$readMultiPointGeometry(object) {\n    const coordinates = object['coordinates'];\n    return {\n        type: 'MultiPoint',\n        flatCoordinates: coordinates.flat(),\n        layout: (0, $c76e993e57efc8c4$export$61bb6938093db2c8)(coordinates[0]?.length || 2)\n    };\n}\n/**\r\n * @param {GeoJSONMultiPolygon} object Object.\r\n * @return {import(\"./Feature.js\").GeometryObject} MultiPolygon geometry.\r\n */ function $f602cef51a2e6950$var$readMultiPolygonGeometry(object) {\n    const coordinates = object['coordinates'];\n    const flatCoordinates = [];\n    const stride = coordinates[0]?.[0]?.[0].length || 2;\n    const endss = (0, $6b086aa46281540d$export$f9f2bb59da4accd3)(flatCoordinates, 0, coordinates, stride);\n    return {\n        type: 'MultiPolygon',\n        flatCoordinates: flatCoordinates,\n        ends: endss,\n        layout: (0, $c76e993e57efc8c4$export$61bb6938093db2c8)(stride)\n    };\n}\n/**\r\n * @param {GeoJSONPolygon} object Object.\r\n * @return {import(\"./Feature.js\").GeometryObject} Polygon.\r\n */ function $f602cef51a2e6950$var$readPolygonGeometry(object) {\n    const coordinates = object['coordinates'];\n    const flatCoordinates = [];\n    const stride = coordinates[0]?.[0]?.length;\n    const ends = (0, $6b086aa46281540d$export$47c3746a74384d45)(flatCoordinates, 0, coordinates, stride);\n    return {\n        type: 'Polygon',\n        flatCoordinates: flatCoordinates,\n        ends: ends,\n        layout: (0, $c76e993e57efc8c4$export$61bb6938093db2c8)(stride)\n    };\n}\n/**\r\n * @param {import(\"../geom/Geometry.js\").default} geometry Geometry.\r\n * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\r\n * @return {GeoJSONGeometry} GeoJSON geometry.\r\n */ function $f602cef51a2e6950$var$writeGeometry(geometry, options) {\n    geometry = (0, $ec084d0ff9c13a22$export$7beeea566b560d4)(geometry, true, options);\n    const type = geometry.getType();\n    /** @type {GeoJSONGeometry} */ let geoJSON;\n    switch(type){\n        case 'Point':\n            geoJSON = $f602cef51a2e6950$var$writePointGeometry(/** @type {import(\"../geom/Point.js\").default} */ geometry, options);\n            break;\n        case 'LineString':\n            geoJSON = $f602cef51a2e6950$var$writeLineStringGeometry(/** @type {import(\"../geom/LineString.js\").default} */ geometry, options);\n            break;\n        case 'Polygon':\n            geoJSON = $f602cef51a2e6950$var$writePolygonGeometry(/** @type {import(\"../geom/Polygon.js\").default} */ geometry, options);\n            break;\n        case 'MultiPoint':\n            geoJSON = $f602cef51a2e6950$var$writeMultiPointGeometry(/** @type {import(\"../geom/MultiPoint.js\").default} */ geometry, options);\n            break;\n        case 'MultiLineString':\n            geoJSON = $f602cef51a2e6950$var$writeMultiLineStringGeometry(/** @type {import(\"../geom/MultiLineString.js\").default} */ geometry, options);\n            break;\n        case 'MultiPolygon':\n            geoJSON = $f602cef51a2e6950$var$writeMultiPolygonGeometry(/** @type {import(\"../geom/MultiPolygon.js\").default} */ geometry, options);\n            break;\n        case 'GeometryCollection':\n            geoJSON = $f602cef51a2e6950$var$writeGeometryCollectionGeometry(/** @type {import(\"../geom/GeometryCollection.js\").default} */ geometry, options);\n            break;\n        case 'Circle':\n            geoJSON = {\n                type: 'GeometryCollection',\n                geometries: []\n            };\n            break;\n        default:\n            throw new Error('Unsupported geometry type: ' + type);\n    }\n    return geoJSON;\n}\n/**\r\n * @param {import(\"../geom/GeometryCollection.js\").default} geometry Geometry.\r\n * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\r\n * @return {GeoJSONGeometryCollection} GeoJSON geometry collection.\r\n */ function $f602cef51a2e6950$var$writeGeometryCollectionGeometry(geometry, options) {\n    options = Object.assign({}, options);\n    delete options.featureProjection;\n    const geometries = geometry.getGeometriesArray().map(function(geometry) {\n        return $f602cef51a2e6950$var$writeGeometry(geometry, options);\n    });\n    return {\n        type: 'GeometryCollection',\n        geometries: geometries\n    };\n}\n/**\r\n * @param {import(\"../geom/LineString.js\").default} geometry Geometry.\r\n * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\r\n * @return {GeoJSONGeometry} GeoJSON geometry.\r\n */ function $f602cef51a2e6950$var$writeLineStringGeometry(geometry, options) {\n    return {\n        type: 'LineString',\n        coordinates: geometry.getCoordinates()\n    };\n}\n/**\r\n * @param {import(\"../geom/MultiLineString.js\").default} geometry Geometry.\r\n * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\r\n * @return {GeoJSONGeometry} GeoJSON geometry.\r\n */ function $f602cef51a2e6950$var$writeMultiLineStringGeometry(geometry, options) {\n    return {\n        type: 'MultiLineString',\n        coordinates: geometry.getCoordinates()\n    };\n}\n/**\r\n * @param {import(\"../geom/MultiPoint.js\").default} geometry Geometry.\r\n * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\r\n * @return {GeoJSONGeometry} GeoJSON geometry.\r\n */ function $f602cef51a2e6950$var$writeMultiPointGeometry(geometry, options) {\n    return {\n        type: 'MultiPoint',\n        coordinates: geometry.getCoordinates()\n    };\n}\n/**\r\n * @param {import(\"../geom/MultiPolygon.js\").default} geometry Geometry.\r\n * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\r\n * @return {GeoJSONGeometry} GeoJSON geometry.\r\n */ function $f602cef51a2e6950$var$writeMultiPolygonGeometry(geometry, options) {\n    let right;\n    if (options) right = options.rightHanded;\n    return {\n        type: 'MultiPolygon',\n        coordinates: geometry.getCoordinates(right)\n    };\n}\n/**\r\n * @param {import(\"../geom/Point.js\").default} geometry Geometry.\r\n * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\r\n * @return {GeoJSONGeometry} GeoJSON geometry.\r\n */ function $f602cef51a2e6950$var$writePointGeometry(geometry, options) {\n    return {\n        type: 'Point',\n        coordinates: geometry.getCoordinates()\n    };\n}\n/**\r\n * @param {import(\"../geom/Polygon.js\").default} geometry Geometry.\r\n * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\r\n * @return {GeoJSONGeometry} GeoJSON geometry.\r\n */ function $f602cef51a2e6950$var$writePolygonGeometry(geometry, options) {\n    let right;\n    if (options) right = options.rightHanded;\n    return {\n        type: 'Polygon',\n        coordinates: geometry.getCoordinates(right)\n    };\n}\nvar $f602cef51a2e6950$export$2e2bcd8739ae039 = $f602cef51a2e6950$var$GeoJSON;\n\n\n/**\r\n * @module ol/source/OSM\r\n */ /**\r\n * @module ol/source/XYZ\r\n */ /**\r\n * @module ol/tilegrid\r\n */ \n\n\n/**\r\n * @module ol/tilegrid/TileGrid\r\n */ /**\r\n * @module ol/TileRange\r\n */ /**\r\n * A representation of a contiguous block of tiles.  A tile range is specified\r\n * by its min/max tile coordinates and is inclusive of coordinates.\r\n */ class $550e524b0d1b61d4$var$TileRange {\n    /**\r\n   * @param {number} minX Minimum X.\r\n   * @param {number} maxX Maximum X.\r\n   * @param {number} minY Minimum Y.\r\n   * @param {number} maxY Maximum Y.\r\n   */ constructor(minX, maxX, minY, maxY){\n        /**\r\n     * @type {number}\r\n     */ this.minX = minX;\n        /**\r\n     * @type {number}\r\n     */ this.maxX = maxX;\n        /**\r\n     * @type {number}\r\n     */ this.minY = minY;\n        /**\r\n     * @type {number}\r\n     */ this.maxY = maxY;\n    }\n    /**\r\n   * @param {import(\"./tilecoord.js\").TileCoord} tileCoord Tile coordinate.\r\n   * @return {boolean} Contains tile coordinate.\r\n   */ contains(tileCoord) {\n        return this.containsXY(tileCoord[1], tileCoord[2]);\n    }\n    /**\r\n   * @param {TileRange} tileRange Tile range.\r\n   * @return {boolean} Contains.\r\n   */ containsTileRange(tileRange) {\n        return this.minX <= tileRange.minX && tileRange.maxX <= this.maxX && this.minY <= tileRange.minY && tileRange.maxY <= this.maxY;\n    }\n    /**\r\n   * @param {number} x Tile coordinate x.\r\n   * @param {number} y Tile coordinate y.\r\n   * @return {boolean} Contains coordinate.\r\n   */ containsXY(x, y) {\n        return this.minX <= x && x <= this.maxX && this.minY <= y && y <= this.maxY;\n    }\n    /**\r\n   * @param {TileRange} tileRange Tile range.\r\n   * @return {boolean} Equals.\r\n   */ equals(tileRange) {\n        return this.minX == tileRange.minX && this.minY == tileRange.minY && this.maxX == tileRange.maxX && this.maxY == tileRange.maxY;\n    }\n    /**\r\n   * @param {TileRange} tileRange Tile range.\r\n   */ extend(tileRange) {\n        if (tileRange.minX < this.minX) this.minX = tileRange.minX;\n        if (tileRange.maxX > this.maxX) this.maxX = tileRange.maxX;\n        if (tileRange.minY < this.minY) this.minY = tileRange.minY;\n        if (tileRange.maxY > this.maxY) this.maxY = tileRange.maxY;\n    }\n    /**\r\n   * @return {number} Height.\r\n   */ getHeight() {\n        return this.maxY - this.minY + 1;\n    }\n    /**\r\n   * @return {import(\"./size.js\").Size} Size.\r\n   */ getSize() {\n        return [\n            this.getWidth(),\n            this.getHeight()\n        ];\n    }\n    /**\r\n   * @return {number} Width.\r\n   */ getWidth() {\n        return this.maxX - this.minX + 1;\n    }\n    /**\r\n   * @param {TileRange} tileRange Tile range.\r\n   * @return {boolean} Intersects.\r\n   */ intersects(tileRange) {\n        return this.minX <= tileRange.maxX && this.maxX >= tileRange.minX && this.minY <= tileRange.maxY && this.maxY >= tileRange.minY;\n    }\n}\nfunction $550e524b0d1b61d4$export$958e3e1a02eac4b6(minX, maxX, minY, maxY, tileRange) {\n    if (tileRange !== undefined) {\n        tileRange.minX = minX;\n        tileRange.maxX = maxX;\n        tileRange.minY = minY;\n        tileRange.maxY = maxY;\n        return tileRange;\n    }\n    return new $550e524b0d1b61d4$var$TileRange(minX, maxX, minY, maxY);\n}\nvar $550e524b0d1b61d4$export$2e2bcd8739ae039 = $550e524b0d1b61d4$var$TileRange;\n\n\n\n\n\n\n\n\n/**\r\n * @module ol/tilecoord\r\n */ /**\r\n * An array of three numbers representing the location of a tile in a tile\r\n * grid. The order is `z` (zoom level), `x` (column), and `y` (row).\r\n * @typedef {Array<number>} TileCoord\r\n * @api\r\n */ /**\r\n * @param {number} z Z.\r\n * @param {number} x X.\r\n * @param {number} y Y.\r\n * @param {TileCoord} [tileCoord] Tile coordinate.\r\n * @return {TileCoord} Tile coordinate.\r\n */ function $bf2a04496fadabc6$export$958e3e1a02eac4b6(z, x, y, tileCoord) {\n    if (tileCoord !== undefined) {\n        tileCoord[0] = z;\n        tileCoord[1] = x;\n        tileCoord[2] = y;\n        return tileCoord;\n    }\n    return [\n        z,\n        x,\n        y\n    ];\n}\nfunction $bf2a04496fadabc6$export$92d0df0f1d25c63c(z, x, y) {\n    return z + '/' + x + '/' + y;\n}\nfunction $bf2a04496fadabc6$export$a47fb462a08de82f(tileCoord) {\n    return $bf2a04496fadabc6$export$92d0df0f1d25c63c(tileCoord[0], tileCoord[1], tileCoord[2]);\n}\nfunction $bf2a04496fadabc6$export$7f760414a8e3d2b5(tileKey) {\n    const [z, x, y] = tileKey.substring(tileKey.lastIndexOf('/') + 1, tileKey.length).split(',').map(Number);\n    return $bf2a04496fadabc6$export$92d0df0f1d25c63c(z, x, y);\n}\nfunction $bf2a04496fadabc6$export$a807b7874eb66454(key) {\n    return key.split('/').map(Number);\n}\nfunction $bf2a04496fadabc6$export$d6af199866bfb566(tileCoord) {\n    return $bf2a04496fadabc6$export$731f79419750ccf7(tileCoord[0], tileCoord[1], tileCoord[2]);\n}\nfunction $bf2a04496fadabc6$export$731f79419750ccf7(z, x, y) {\n    return (x << z) + y;\n}\nfunction $bf2a04496fadabc6$export$60bedf8e3e3c3dbe(tileCoord, tileGrid) {\n    const z = tileCoord[0];\n    const x = tileCoord[1];\n    const y = tileCoord[2];\n    if (tileGrid.getMinZoom() > z || z > tileGrid.getMaxZoom()) return false;\n    const tileRange = tileGrid.getFullTileRange(z);\n    if (!tileRange) return true;\n    return tileRange.containsXY(x, y);\n}\n\n\n\n/**\r\n * @private\r\n * @type {import(\"../tilecoord.js\").TileCoord}\r\n */ const $bb602a307ef98bb5$var$tmpTileCoord = [\n    0,\n    0,\n    0\n];\n/**\r\n * Number of decimal digits to consider in integer values when rounding.\r\n * @type {number}\r\n */ const $bb602a307ef98bb5$var$DECIMALS = 5;\n/**\r\n * @typedef {Object} Options\r\n * @property {import(\"../extent.js\").Extent} [extent] Extent for the tile grid. No tiles outside this\r\n * extent will be requested by {@link module:ol/source/Tile~TileSource} sources. When no `origin` or\r\n * `origins` are configured, the `origin` will be set to the top-left corner of the extent.\r\n * @property {number} [minZoom=0] Minimum zoom.\r\n * @property {import(\"../coordinate.js\").Coordinate} [origin] The tile grid origin, i.e. where the `x`\r\n * and `y` axes meet (`[z, 0, 0]`). Tile coordinates increase left to right and downwards. If not\r\n * specified, `extent` or `origins` must be provided.\r\n * @property {Array<import(\"../coordinate.js\").Coordinate>} [origins] Tile grid origins, i.e. where\r\n * the `x` and `y` axes meet (`[z, 0, 0]`), for each zoom level. If given, the array length\r\n * should match the length of the `resolutions` array, i.e. each resolution can have a different\r\n * origin. Tile coordinates increase left to right and downwards. If not specified, `extent` or\r\n * `origin` must be provided.\r\n * @property {!Array<number>} resolutions Resolutions. The array index of each resolution needs\r\n * to match the zoom level. This means that even if a `minZoom` is configured, the resolutions\r\n * array will have a length of `maxZoom + 1`.\r\n * @property {Array<import(\"../size.js\").Size>} [sizes] Number of tile rows and columns\r\n * of the grid for each zoom level. If specified the values\r\n * define each zoom level's extent together with the `origin` or `origins`.\r\n * A grid `extent` can be configured in addition, and will further limit the extent\r\n * for which tile requests are made by sources. If the bottom-left corner of\r\n * an extent is used as `origin` or `origins`, then the `y` value must be\r\n * negative because OpenLayers tile coordinates use the top left as the origin.\r\n * @property {number|import(\"../size.js\").Size} [tileSize] Tile size.\r\n * Default is `[256, 256]`.\r\n * @property {Array<number|import(\"../size.js\").Size>} [tileSizes] Tile sizes. If given, the array length\r\n * should match the length of the `resolutions` array, i.e. each resolution can have a different\r\n * tile size.\r\n */ /**\r\n * @classdesc\r\n * Base class for setting the grid pattern for sources accessing tiled-image\r\n * servers.\r\n * @api\r\n */ class $bb602a307ef98bb5$var$TileGrid {\n    /**\r\n   * @param {Options} options Tile grid options.\r\n   */ constructor(options){\n        /**\r\n     * @protected\r\n     * @type {number}\r\n     */ this.minZoom = options.minZoom !== undefined ? options.minZoom : 0;\n        /**\r\n     * @private\r\n     * @type {!Array<number>}\r\n     */ this.resolutions_ = options.resolutions;\n        (0, $35d5ec884318008e$export$a7a9523472993e97)((0, $b998d41b678ed5d1$export$efa610630f9e181)(this.resolutions_, /**\r\n         * @param {number} a First resolution\r\n         * @param {number} b Second resolution\r\n         * @return {number} Comparison result\r\n         */ (a, b)=>b - a, true), '`resolutions` must be sorted in descending order');\n        // check if we've got a consistent zoom factor and origin\n        let zoomFactor;\n        if (!options.origins) for(let i = 0, ii = this.resolutions_.length - 1; i < ii; ++i){\n            if (!zoomFactor) zoomFactor = this.resolutions_[i] / this.resolutions_[i + 1];\n            else if (this.resolutions_[i] / this.resolutions_[i + 1] !== zoomFactor) {\n                zoomFactor = undefined;\n                break;\n            }\n        }\n        /**\r\n     * @private\r\n     * @type {number|undefined}\r\n     */ this.zoomFactor_ = zoomFactor;\n        /**\r\n     * @protected\r\n     * @type {number}\r\n     */ this.maxZoom = this.resolutions_.length - 1;\n        /**\r\n     * @private\r\n     * @type {import(\"../coordinate.js\").Coordinate|null}\r\n     */ this.origin_ = options.origin !== undefined ? options.origin : null;\n        /**\r\n     * @private\r\n     * @type {Array<import(\"../coordinate.js\").Coordinate>}\r\n     */ this.origins_ = null;\n        if (options.origins !== undefined) {\n            this.origins_ = options.origins;\n            (0, $35d5ec884318008e$export$a7a9523472993e97)(this.origins_.length == this.resolutions_.length, 'Number of `origins` and `resolutions` must be equal');\n        }\n        const extent = options.extent;\n        if (extent !== undefined && !this.origin_ && !this.origins_) this.origin_ = (0, $6da4c8ed3074c92b$export$cb1538b07e6964ff)(extent);\n        (0, $35d5ec884318008e$export$a7a9523472993e97)(!this.origin_ && this.origins_ || this.origin_ && !this.origins_, 'Either `origin` or `origins` must be configured, never both');\n        /**\r\n     * @private\r\n     * @type {Array<number|import(\"../size.js\").Size>}\r\n     */ this.tileSizes_ = null;\n        if (options.tileSizes !== undefined) {\n            this.tileSizes_ = options.tileSizes;\n            (0, $35d5ec884318008e$export$a7a9523472993e97)(this.tileSizes_.length == this.resolutions_.length, 'Number of `tileSizes` and `resolutions` must be equal');\n        }\n        /**\r\n     * @private\r\n     * @type {number|import(\"../size.js\").Size}\r\n     */ this.tileSize_ = options.tileSize !== undefined ? options.tileSize : !this.tileSizes_ ? (0, $57cd8651d88957a0$export$6b8cb5cd370bd90c) : null;\n        (0, $35d5ec884318008e$export$a7a9523472993e97)(!this.tileSize_ && this.tileSizes_ || this.tileSize_ && !this.tileSizes_, 'Either `tileSize` or `tileSizes` must be configured, never both');\n        /**\r\n     * @private\r\n     * @type {import(\"../extent.js\").Extent}\r\n     */ this.extent_ = extent !== undefined ? extent : null;\n        /**\r\n     * @private\r\n     * @type {Array<import(\"../TileRange.js\").default>}\r\n     */ this.fullTileRanges_ = null;\n        /**\r\n     * @private\r\n     * @type {import(\"../size.js\").Size}\r\n     */ this.tmpSize_ = [\n            0,\n            0\n        ];\n        /**\r\n     * @private\r\n     * @type {import(\"../extent.js\").Extent}\r\n     */ this.tmpExtent_ = [\n            0,\n            0,\n            0,\n            0\n        ];\n        if (options.sizes !== undefined) this.fullTileRanges_ = options.sizes.map((size, z)=>{\n            const tileRange = new (0, $550e524b0d1b61d4$export$2e2bcd8739ae039)(Math.min(0, size[0]), Math.max(size[0] - 1, -1), Math.min(0, size[1]), Math.max(size[1] - 1, -1));\n            if (extent) {\n                const restrictedTileRange = this.getTileRangeForExtentAndZ(extent, z);\n                tileRange.minX = Math.max(restrictedTileRange.minX, tileRange.minX);\n                tileRange.maxX = Math.min(restrictedTileRange.maxX, tileRange.maxX);\n                tileRange.minY = Math.max(restrictedTileRange.minY, tileRange.minY);\n                tileRange.maxY = Math.min(restrictedTileRange.maxY, tileRange.maxY);\n            }\n            return tileRange;\n        });\n        else if (extent) this.calculateTileRanges_(extent);\n    }\n    /**\r\n   * Call a function with each tile coordinate for a given extent and zoom level.\r\n   *\r\n   * @param {import(\"../extent.js\").Extent} extent Extent.\r\n   * @param {number} zoom Integer zoom level.\r\n   * @param {function(import(\"../tilecoord.js\").TileCoord): void} callback Function called with each tile coordinate.\r\n   * @api\r\n   */ forEachTileCoord(extent, zoom, callback) {\n        const tileRange = this.getTileRangeForExtentAndZ(extent, zoom);\n        for(let i = tileRange.minX, ii = tileRange.maxX; i <= ii; ++i)for(let j = tileRange.minY, jj = tileRange.maxY; j <= jj; ++j)callback([\n            zoom,\n            i,\n            j\n        ]);\n    }\n    /**\r\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\r\n   * @param {function(number, import(\"../TileRange.js\").default): boolean} callback Callback.\r\n   * @param {import(\"../TileRange.js\").default} [tempTileRange] Temporary import(\"../TileRange.js\").default object.\r\n   * @param {import(\"../extent.js\").Extent} [tempExtent] Temporary import(\"../extent.js\").Extent object.\r\n   * @return {boolean} Callback succeeded.\r\n   */ forEachTileCoordParentTileRange(tileCoord, callback, tempTileRange, tempExtent) {\n        let tileRange, x, y;\n        let tileCoordExtent = null;\n        let z = tileCoord[0] - 1;\n        if (this.zoomFactor_ === 2) {\n            x = tileCoord[1];\n            y = tileCoord[2];\n        } else tileCoordExtent = this.getTileCoordExtent(tileCoord, tempExtent);\n        while(z >= this.minZoom){\n            if (x !== undefined && y !== undefined) {\n                x = Math.floor(x / 2);\n                y = Math.floor(y / 2);\n                tileRange = (0, $550e524b0d1b61d4$export$958e3e1a02eac4b6)(x, x, y, y, tempTileRange);\n            } else tileRange = this.getTileRangeForExtentAndZ(tileCoordExtent, z, tempTileRange);\n            if (callback(z, tileRange)) return true;\n            --z;\n        }\n        return false;\n    }\n    /**\r\n   * Get the extent for this tile grid, if it was configured.\r\n   * @return {import(\"../extent.js\").Extent} Extent.\r\n   * @api\r\n   */ getExtent() {\n        return this.extent_;\n    }\n    /**\r\n   * Get the maximum zoom level for the grid.\r\n   * @return {number} Max zoom.\r\n   * @api\r\n   */ getMaxZoom() {\n        return this.maxZoom;\n    }\n    /**\r\n   * Get the minimum zoom level for the grid.\r\n   * @return {number} Min zoom.\r\n   * @api\r\n   */ getMinZoom() {\n        return this.minZoom;\n    }\n    /**\r\n   * Get the origin for the grid at the given zoom level.\r\n   * @param {number} z Integer zoom level.\r\n   * @return {import(\"../coordinate.js\").Coordinate} Origin.\r\n   * @api\r\n   */ getOrigin(z) {\n        if (this.origin_) return this.origin_;\n        return this.origins_[z];\n    }\n    /**\r\n   * Get the resolution for the given zoom level.\r\n   * @param {number} z Integer zoom level.\r\n   * @return {number} Resolution.\r\n   * @api\r\n   */ getResolution(z) {\n        return this.resolutions_[z];\n    }\n    /**\r\n   * Get the list of resolutions for the tile grid.\r\n   * @return {Array<number>} Resolutions.\r\n   * @api\r\n   */ getResolutions() {\n        return this.resolutions_;\n    }\n    /**\r\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\r\n   * @param {import(\"../TileRange.js\").default} [tempTileRange] Temporary import(\"../TileRange.js\").default object.\r\n   * @param {import(\"../extent.js\").Extent} [tempExtent] Temporary import(\"../extent.js\").Extent object.\r\n   * @return {import(\"../TileRange.js\").default|null} Tile range.\r\n   */ getTileCoordChildTileRange(tileCoord, tempTileRange, tempExtent) {\n        if (tileCoord[0] < this.maxZoom) {\n            if (this.zoomFactor_ === 2) {\n                const minX = tileCoord[1] * 2;\n                const minY = tileCoord[2] * 2;\n                return (0, $550e524b0d1b61d4$export$958e3e1a02eac4b6)(minX, minX + 1, minY, minY + 1, tempTileRange);\n            }\n            const tileCoordExtent = this.getTileCoordExtent(tileCoord, tempExtent || this.tmpExtent_);\n            return this.getTileRangeForExtentAndZ(tileCoordExtent, tileCoord[0] + 1, tempTileRange);\n        }\n        return null;\n    }\n    /**\r\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\r\n   * @param {number} z Integer zoom level.\r\n   * @param {import(\"../TileRange.js\").default} [tempTileRange] Temporary import(\"../TileRange.js\").default object.\r\n   * @return {import(\"../TileRange.js\").default|null} Tile range.\r\n   */ getTileRangeForTileCoordAndZ(tileCoord, z, tempTileRange) {\n        if (z > this.maxZoom || z < this.minZoom) return null;\n        const tileCoordZ = tileCoord[0];\n        const tileCoordX = tileCoord[1];\n        const tileCoordY = tileCoord[2];\n        if (z === tileCoordZ) return (0, $550e524b0d1b61d4$export$958e3e1a02eac4b6)(tileCoordX, tileCoordY, tileCoordX, tileCoordY, tempTileRange);\n        if (this.zoomFactor_) {\n            const factor = Math.pow(this.zoomFactor_, z - tileCoordZ);\n            const minX = Math.floor(tileCoordX * factor);\n            const minY = Math.floor(tileCoordY * factor);\n            if (z < tileCoordZ) return (0, $550e524b0d1b61d4$export$958e3e1a02eac4b6)(minX, minX, minY, minY, tempTileRange);\n            const maxX = Math.floor(factor * (tileCoordX + 1)) - 1;\n            const maxY = Math.floor(factor * (tileCoordY + 1)) - 1;\n            return (0, $550e524b0d1b61d4$export$958e3e1a02eac4b6)(minX, maxX, minY, maxY, tempTileRange);\n        }\n        const tileCoordExtent = this.getTileCoordExtent(tileCoord, this.tmpExtent_);\n        return this.getTileRangeForExtentAndZ(tileCoordExtent, z, tempTileRange);\n    }\n    /**\r\n   * Get a tile range for the given extent and integer zoom level.\r\n   * @param {import(\"../extent.js\").Extent} extent Extent.\r\n   * @param {number} z Integer zoom level.\r\n   * @param {import(\"../TileRange.js\").default} [tempTileRange] Temporary tile range object.\r\n   * @return {import(\"../TileRange.js\").default} Tile range.\r\n   */ getTileRangeForExtentAndZ(extent, z, tempTileRange) {\n        this.getTileCoordForXYAndZ_(extent[0], extent[3], z, false, $bb602a307ef98bb5$var$tmpTileCoord);\n        const minX = $bb602a307ef98bb5$var$tmpTileCoord[1];\n        const minY = $bb602a307ef98bb5$var$tmpTileCoord[2];\n        this.getTileCoordForXYAndZ_(extent[2], extent[1], z, true, $bb602a307ef98bb5$var$tmpTileCoord);\n        const maxX = $bb602a307ef98bb5$var$tmpTileCoord[1];\n        const maxY = $bb602a307ef98bb5$var$tmpTileCoord[2];\n        return (0, $550e524b0d1b61d4$export$958e3e1a02eac4b6)(minX, maxX, minY, maxY, tempTileRange);\n    }\n    /**\r\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\r\n   * @return {import(\"../coordinate.js\").Coordinate} Tile center.\r\n   */ getTileCoordCenter(tileCoord) {\n        const origin = this.getOrigin(tileCoord[0]);\n        const resolution = this.getResolution(tileCoord[0]);\n        const tileSize = (0, $cc435a5409103773$export$a71a825ff42fb8e1)(this.getTileSize(tileCoord[0]), this.tmpSize_);\n        return [\n            origin[0] + (tileCoord[1] + 0.5) * tileSize[0] * resolution,\n            origin[1] - (tileCoord[2] + 0.5) * tileSize[1] * resolution\n        ];\n    }\n    /**\r\n   * Get the extent of a tile coordinate.\r\n   *\r\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\r\n   * @param {import(\"../extent.js\").Extent} [tempExtent] Temporary extent object.\r\n   * @return {import(\"../extent.js\").Extent} Extent.\r\n   * @api\r\n   */ getTileCoordExtent(tileCoord, tempExtent) {\n        const origin = this.getOrigin(tileCoord[0]);\n        const resolution = this.getResolution(tileCoord[0]);\n        const tileSize = (0, $cc435a5409103773$export$a71a825ff42fb8e1)(this.getTileSize(tileCoord[0]), this.tmpSize_);\n        const minX = origin[0] + tileCoord[1] * tileSize[0] * resolution;\n        const minY = origin[1] - (tileCoord[2] + 1) * tileSize[1] * resolution;\n        const maxX = minX + tileSize[0] * resolution;\n        const maxY = minY + tileSize[1] * resolution;\n        return (0, $6da4c8ed3074c92b$export$958e3e1a02eac4b6)(minX, minY, maxX, maxY, tempExtent);\n    }\n    /**\r\n   * Get the tile coordinate for the given map coordinate and resolution.  This\r\n   * method considers that coordinates that intersect tile boundaries should be\r\n   * assigned the higher tile coordinate.\r\n   *\r\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\r\n   * @param {number} resolution Resolution.\r\n   * @param {import(\"../tilecoord.js\").TileCoord} [opt_tileCoord] Destination import(\"../tilecoord.js\").TileCoord object.\r\n   * @return {import(\"../tilecoord.js\").TileCoord} Tile coordinate.\r\n   * @api\r\n   */ getTileCoordForCoordAndResolution(coordinate, resolution, opt_tileCoord) {\n        return this.getTileCoordForXYAndResolution_(coordinate[0], coordinate[1], resolution, false, opt_tileCoord);\n    }\n    /**\r\n   * Note that this method should not be called for resolutions that correspond\r\n   * to an integer zoom level.  Instead call the `getTileCoordForXYAndZ_` method.\r\n   * @param {number} x X.\r\n   * @param {number} y Y.\r\n   * @param {number} resolution Resolution (for a non-integer zoom level).\r\n   * @param {boolean} reverseIntersectionPolicy Instead of letting edge\r\n   *     intersections go to the higher tile coordinate, let edge intersections\r\n   *     go to the lower tile coordinate.\r\n   * @param {import(\"../tilecoord.js\").TileCoord} [opt_tileCoord] Temporary import(\"../tilecoord.js\").TileCoord object.\r\n   * @return {import(\"../tilecoord.js\").TileCoord} Tile coordinate.\r\n   * @private\r\n   */ getTileCoordForXYAndResolution_(x, y, resolution, reverseIntersectionPolicy, opt_tileCoord) {\n        const z = this.getZForResolution(resolution);\n        const scale = resolution / this.getResolution(z);\n        const origin = this.getOrigin(z);\n        const tileSize = (0, $cc435a5409103773$export$a71a825ff42fb8e1)(this.getTileSize(z), this.tmpSize_);\n        let tileCoordX = scale * (x - origin[0]) / resolution / tileSize[0];\n        let tileCoordY = scale * (origin[1] - y) / resolution / tileSize[1];\n        if (reverseIntersectionPolicy) {\n            tileCoordX = (0, $6b000a049d919fe5$export$803ce6b71a0a94b2)(tileCoordX, $bb602a307ef98bb5$var$DECIMALS) - 1;\n            tileCoordY = (0, $6b000a049d919fe5$export$803ce6b71a0a94b2)(tileCoordY, $bb602a307ef98bb5$var$DECIMALS) - 1;\n        } else {\n            tileCoordX = (0, $6b000a049d919fe5$export$a3fe094919f356fd)(tileCoordX, $bb602a307ef98bb5$var$DECIMALS);\n            tileCoordY = (0, $6b000a049d919fe5$export$a3fe094919f356fd)(tileCoordY, $bb602a307ef98bb5$var$DECIMALS);\n        }\n        return (0, $bf2a04496fadabc6$export$958e3e1a02eac4b6)(z, tileCoordX, tileCoordY, opt_tileCoord);\n    }\n    /**\r\n   * Although there is repetition between this method and `getTileCoordForXYAndResolution_`,\r\n   * they should have separate implementations.  This method is for integer zoom\r\n   * levels.  The other method should only be called for resolutions corresponding\r\n   * to non-integer zoom levels.\r\n   * @param {number} x Map x coordinate.\r\n   * @param {number} y Map y coordinate.\r\n   * @param {number} z Integer zoom level.\r\n   * @param {boolean} reverseIntersectionPolicy Instead of letting edge\r\n   *     intersections go to the higher tile coordinate, let edge intersections\r\n   *     go to the lower tile coordinate.\r\n   * @param {import(\"../tilecoord.js\").TileCoord} [opt_tileCoord] Temporary import(\"../tilecoord.js\").TileCoord object.\r\n   * @return {import(\"../tilecoord.js\").TileCoord} Tile coordinate.\r\n   * @private\r\n   */ getTileCoordForXYAndZ_(x, y, z, reverseIntersectionPolicy, opt_tileCoord) {\n        const origin = this.getOrigin(z);\n        const resolution = this.getResolution(z);\n        const tileSize = (0, $cc435a5409103773$export$a71a825ff42fb8e1)(this.getTileSize(z), this.tmpSize_);\n        let tileCoordX = (x - origin[0]) / resolution / tileSize[0];\n        let tileCoordY = (origin[1] - y) / resolution / tileSize[1];\n        if (reverseIntersectionPolicy) {\n            tileCoordX = (0, $6b000a049d919fe5$export$803ce6b71a0a94b2)(tileCoordX, $bb602a307ef98bb5$var$DECIMALS) - 1;\n            tileCoordY = (0, $6b000a049d919fe5$export$803ce6b71a0a94b2)(tileCoordY, $bb602a307ef98bb5$var$DECIMALS) - 1;\n        } else {\n            tileCoordX = (0, $6b000a049d919fe5$export$a3fe094919f356fd)(tileCoordX, $bb602a307ef98bb5$var$DECIMALS);\n            tileCoordY = (0, $6b000a049d919fe5$export$a3fe094919f356fd)(tileCoordY, $bb602a307ef98bb5$var$DECIMALS);\n        }\n        return (0, $bf2a04496fadabc6$export$958e3e1a02eac4b6)(z, tileCoordX, tileCoordY, opt_tileCoord);\n    }\n    /**\r\n   * Get a tile coordinate given a map coordinate and zoom level.\r\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\r\n   * @param {number} z Integer zoom level, e.g. the result of a `getZForResolution()` method call\r\n   * @param {import(\"../tilecoord.js\").TileCoord} [opt_tileCoord] Destination import(\"../tilecoord.js\").TileCoord object.\r\n   * @return {import(\"../tilecoord.js\").TileCoord} Tile coordinate.\r\n   * @api\r\n   */ getTileCoordForCoordAndZ(coordinate, z, opt_tileCoord) {\n        return this.getTileCoordForXYAndZ_(coordinate[0], coordinate[1], z, false, opt_tileCoord);\n    }\n    /**\r\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\r\n   * @return {number} Tile resolution.\r\n   */ getTileCoordResolution(tileCoord) {\n        return this.resolutions_[tileCoord[0]];\n    }\n    /**\r\n   * Get the tile size for a zoom level. The type of the return value matches the\r\n   * `tileSize` or `tileSizes` that the tile grid was configured with. To always\r\n   * get an {@link import(\"../size.js\").Size}, run the result through {@link module:ol/size.toSize}.\r\n   * @param {number} z Z.\r\n   * @return {number|import(\"../size.js\").Size} Tile size.\r\n   * @api\r\n   */ getTileSize(z) {\n        if (this.tileSize_) return this.tileSize_;\n        return this.tileSizes_[z];\n    }\n    /**\r\n   * @param {number} z Zoom level.\r\n   * @return {import(\"../TileRange.js\").default|null} Extent tile range for the specified zoom level.\r\n   */ getFullTileRange(z) {\n        if (!this.fullTileRanges_) return this.extent_ ? this.getTileRangeForExtentAndZ(this.extent_, z) : null;\n        return this.fullTileRanges_[z];\n    }\n    /**\r\n   * @param {number} resolution Resolution.\r\n   * @param {number|import(\"../array.js\").NearestDirectionFunction} [opt_direction]\r\n   *     If 0, the nearest resolution will be used.\r\n   *     If 1, the nearest higher resolution (lower Z) will be used. If -1, the\r\n   *     nearest lower resolution (higher Z) will be used. Default is 0.\r\n   *     Use a {@link module:ol/array~NearestDirectionFunction} for more precise control.\r\n   *\r\n   * For example to change tile Z at the midpoint of zoom levels\r\n   * ```js\r\n   * function(value, high, low) {\r\n   *   return value - low * Math.sqrt(high / low);\r\n   * }\r\n   * ```\r\n   * @return {number} Z.\r\n   * @api\r\n   */ getZForResolution(resolution, opt_direction) {\n        const z = (0, $b998d41b678ed5d1$export$8a3786cc03fdb777)(this.resolutions_, resolution, opt_direction || 0);\n        return (0, $6b000a049d919fe5$export$7d15b64cf5a3a4c4)(z, this.minZoom, this.maxZoom);\n    }\n    /**\r\n   * The tile with the provided tile coordinate intersects the given viewport.\r\n   * @param {import('../tilecoord.js').TileCoord} tileCoord Tile coordinate.\r\n   * @param {Array<number>} viewport Viewport as returned from {@link module:ol/extent.getRotatedViewport}.\r\n   * @return {boolean} The tile with the provided tile coordinate intersects the given viewport.\r\n   */ tileCoordIntersectsViewport(tileCoord, viewport) {\n        return (0, $acee589e5b390c5c$export$830a0dafbb2ef1c5)(viewport, 0, viewport.length, 2, this.getTileCoordExtent(tileCoord));\n    }\n    /**\r\n   * @param {!import(\"../extent.js\").Extent} extent Extent for this tile grid.\r\n   * @private\r\n   */ calculateTileRanges_(extent) {\n        const length = this.resolutions_.length;\n        const fullTileRanges = new Array(length);\n        for(let z = this.minZoom; z < length; ++z)fullTileRanges[z] = this.getTileRangeForExtentAndZ(extent, z);\n        this.fullTileRanges_ = fullTileRanges;\n    }\n}\nvar $bb602a307ef98bb5$export$2e2bcd8739ae039 = $bb602a307ef98bb5$var$TileGrid;\n\n\n\n\nfunction $5779655d81caea04$export$1f4812384df8a9c5(projection) {\n    let tileGrid = projection.getDefaultTileGrid();\n    if (!tileGrid) {\n        tileGrid = $5779655d81caea04$export$a251b12f5601c16f(projection);\n        projection.setDefaultTileGrid(tileGrid);\n    }\n    return tileGrid;\n}\nfunction $5779655d81caea04$export$39a9ce3624977b84(tileGrid, tileCoord, projection) {\n    const z = tileCoord[0];\n    const center = tileGrid.getTileCoordCenter(tileCoord);\n    const projectionExtent = $5779655d81caea04$export$7b5b6ef8fd55fac4(projection);\n    if (!(0, $6da4c8ed3074c92b$export$ac68c24d37ca240f)(projectionExtent, center)) {\n        const worldWidth = (0, $6da4c8ed3074c92b$export$3c49c185de0c2bfc)(projectionExtent);\n        const worldsAway = Math.ceil((projectionExtent[0] - center[0]) / worldWidth);\n        center[0] += worldWidth * worldsAway;\n        return tileGrid.getTileCoordForCoordAndZ(center, z);\n    }\n    return tileCoord;\n}\nfunction $5779655d81caea04$export$ce88871416242df8(extent, maxZoom, tileSize, corner) {\n    corner = corner !== undefined ? corner : 'top-left';\n    const resolutions = $5779655d81caea04$var$resolutionsFromExtent(extent, maxZoom, tileSize);\n    return new (0, $bb602a307ef98bb5$export$2e2bcd8739ae039)({\n        extent: extent,\n        origin: (0, $6da4c8ed3074c92b$export$a1cfd206661d0801)(extent, corner),\n        resolutions: resolutions,\n        tileSize: tileSize\n    });\n}\nfunction $5779655d81caea04$export$38500bbeccc864ff(options) {\n    const xyzOptions = options || {};\n    const extent = xyzOptions.extent || (0, $9c4744460e43e41b$export$3988ae62b71be9a3)('EPSG:3857').getExtent();\n    const gridOptions = {\n        extent: extent,\n        minZoom: xyzOptions.minZoom,\n        tileSize: xyzOptions.tileSize,\n        resolutions: $5779655d81caea04$var$resolutionsFromExtent(extent, xyzOptions.maxZoom, xyzOptions.tileSize, xyzOptions.maxResolution)\n    };\n    return new (0, $bb602a307ef98bb5$export$2e2bcd8739ae039)(gridOptions);\n}\n/**\r\n * Create a resolutions array from an extent.  A zoom factor of 2 is assumed.\r\n * @param {import(\"./extent.js\").Extent} extent Extent.\r\n * @param {number} [maxZoom] Maximum zoom level (default is\r\n *     DEFAULT_MAX_ZOOM).\r\n * @param {number|import(\"./size.js\").Size} [tileSize] Tile size (default uses\r\n *     DEFAULT_TILE_SIZE).\r\n * @param {number} [maxResolution] Resolution at level zero.\r\n * @return {!Array<number>} Resolutions array.\r\n */ function $5779655d81caea04$var$resolutionsFromExtent(extent, maxZoom, tileSize, maxResolution) {\n    maxZoom = maxZoom !== undefined ? maxZoom : (0, $57cd8651d88957a0$export$e98a216cdcc847dc);\n    tileSize = (0, $cc435a5409103773$export$a71a825ff42fb8e1)(tileSize !== undefined ? tileSize : (0, $57cd8651d88957a0$export$6b8cb5cd370bd90c));\n    const height = (0, $6da4c8ed3074c92b$export$c08559766941f856)(extent);\n    const width = (0, $6da4c8ed3074c92b$export$3c49c185de0c2bfc)(extent);\n    maxResolution = maxResolution > 0 ? maxResolution : Math.max(width / tileSize[0], height / tileSize[1]);\n    const length = maxZoom + 1;\n    const resolutions = new Array(length);\n    for(let z = 0; z < length; ++z)resolutions[z] = maxResolution / Math.pow(2, z);\n    return resolutions;\n}\nfunction $5779655d81caea04$export$a251b12f5601c16f(projection, maxZoom, tileSize, corner) {\n    const extent = $5779655d81caea04$export$7b5b6ef8fd55fac4(projection);\n    return $5779655d81caea04$export$ce88871416242df8(extent, maxZoom, tileSize, corner);\n}\nfunction $5779655d81caea04$export$7b5b6ef8fd55fac4(projection) {\n    projection = (0, $9c4744460e43e41b$export$3988ae62b71be9a3)(projection);\n    let extent = projection.getExtent();\n    if (!extent) {\n        const half = 180 * (0, $03edbd434a9e6608$export$1482081eec883108).degrees / projection.getMetersPerUnit();\n        extent = (0, $6da4c8ed3074c92b$export$958e3e1a02eac4b6)(-half, -half, half, half);\n    }\n    return extent;\n}\n\n\n/**\r\n * @module ol/source/TileImage\r\n */ /**\r\n * @module ol/ImageTile\r\n */ \n/**\r\n * @module ol/Tile\r\n */ \n\n\n\n\n/**\r\n * A function that takes a {@link module:ol/Tile~Tile} for the tile and a\r\n * `{string}` for the url as arguments. The default is\r\n * ```js\r\n * source.setTileLoadFunction(function(tile, src) {\r\n *   tile.getImage().src = src;\r\n * });\r\n * ```\r\n * For more fine grained control, the load function can use fetch or XMLHttpRequest and involve\r\n * error handling:\r\n *\r\n * ```js\r\n * import TileState from 'ol/TileState.js';\r\n *\r\n * source.setTileLoadFunction(function(tile, src) {\r\n *   const xhr = new XMLHttpRequest();\r\n *   xhr.responseType = 'blob';\r\n *   xhr.addEventListener('loadend', function (evt) {\r\n *     const data = this.response;\r\n *     if (data !== undefined) {\r\n *       tile.getImage().src = URL.createObjectURL(data);\r\n *     } else {\r\n *       tile.setState(TileState.ERROR);\r\n *     }\r\n *   });\r\n *   xhr.addEventListener('error', function () {\r\n *     tile.setState(TileState.ERROR);\r\n *   });\r\n *   xhr.open('GET', src);\r\n *   xhr.send();\r\n * });\r\n * ```\r\n *\r\n * @typedef {function(Tile, string): void} LoadFunction\r\n * @api\r\n */ /**\r\n * {@link module:ol/source/Tile~TileSource} sources use a function of this type to get\r\n * the url that provides a tile for a given tile coordinate.\r\n *\r\n * This function takes a {@link module:ol/tilecoord~TileCoord} for the tile\r\n * coordinate, a `{number}` representing the pixel ratio and a\r\n * {@link module:ol/proj/Projection~Projection} for the projection  as arguments\r\n * and returns a `{string}` representing the tile URL, or undefined if no tile\r\n * should be requested for the passed tile coordinate.\r\n *\r\n * @typedef {function(import(\"./tilecoord.js\").TileCoord, number,\r\n *           import(\"./proj/Projection.js\").default): (string|undefined)} UrlFunction\r\n * @api\r\n */ /**\r\n * @typedef {Object} Options\r\n * @property {number} [transition=250] A duration for tile opacity\r\n * transitions in milliseconds. A duration of 0 disables the opacity transition.\r\n * @property {boolean} [interpolate=false] Use interpolated values when resampling.  By default,\r\n * the nearest neighbor is used when resampling.\r\n * @api\r\n */ /**\r\n * @classdesc\r\n * Base class for tiles.\r\n *\r\n * @abstract\r\n */ class $0f235d2d04095c6e$var$Tile extends (0, $08c28d22c0cb5a39$export$2e2bcd8739ae039) {\n    /**\r\n   * @param {import(\"./tilecoord.js\").TileCoord} tileCoord Tile coordinate.\r\n   * @param {import(\"./TileState.js\").default} state State.\r\n   * @param {Options} [options] Tile options.\r\n   */ constructor(tileCoord, state, options){\n        super();\n        options = options ? options : {};\n        /**\r\n     * @type {import(\"./tilecoord.js\").TileCoord}\r\n     */ this.tileCoord = tileCoord;\n        /**\r\n     * @protected\r\n     * @type {import(\"./TileState.js\").default}\r\n     */ this.state = state;\n        /**\r\n     * A key assigned to the tile. This is used in conjunction with a source key\r\n     * to determine if a cached version of this tile may be used by the renderer.\r\n     * @type {string}\r\n     */ this.key = '';\n        /**\r\n     * The duration for the opacity transition.\r\n     * @private\r\n     * @type {number}\r\n     */ this.transition_ = options.transition === undefined ? 250 : options.transition;\n        /**\r\n     * Lookup of start times for rendering transitions.  If the start time is\r\n     * equal to -1, the transition is complete.\r\n     * @private\r\n     * @type {Object<string, number>}\r\n     */ this.transitionStarts_ = {};\n        /**\r\n     * @type {boolean}\r\n     */ this.interpolate = !!options.interpolate;\n    }\n    /**\r\n   * @protected\r\n   */ changed() {\n        this.dispatchEvent((0, $294047c5e65f31a3$export$2e2bcd8739ae039).CHANGE);\n    }\n    /**\r\n   * Called by the tile cache when the tile is removed from the cache due to expiry\r\n   */ release() {\n        // to remove the `change` listener on this tile in `ol/TileQueue#handleTileChange`\n        this.setState((0, $b8291d9739c3c64e$export$2e2bcd8739ae039).EMPTY);\n    }\n    /**\r\n   * @return {string} Key.\r\n   */ getKey() {\n        return this.key + '/' + this.tileCoord;\n    }\n    /**\r\n   * Get the tile coordinate for this tile.\r\n   * @return {import(\"./tilecoord.js\").TileCoord} The tile coordinate.\r\n   * @api\r\n   */ getTileCoord() {\n        return this.tileCoord;\n    }\n    /**\r\n   * @return {import(\"./TileState.js\").default} State.\r\n   */ getState() {\n        return this.state;\n    }\n    /**\r\n   * Sets the state of this tile. If you write your own {@link module:ol/Tile~LoadFunction tileLoadFunction} ,\r\n   * it is important to set the state correctly to {@link module:ol/TileState~ERROR}\r\n   * when the tile cannot be loaded. Otherwise the tile cannot be removed from\r\n   * the tile queue and will block other requests.\r\n   * @param {import(\"./TileState.js\").default} state State.\r\n   * @api\r\n   */ setState(state) {\n        if (this.state === (0, $b8291d9739c3c64e$export$2e2bcd8739ae039).EMPTY) // no more state changes\n        return;\n        if (this.state !== (0, $b8291d9739c3c64e$export$2e2bcd8739ae039).ERROR && this.state > state) throw new Error('Tile load sequence violation');\n        this.state = state;\n        this.changed();\n    }\n    /**\r\n   * Load the image or retry if loading previously failed.\r\n   * Loading is taken care of by the tile queue, and calling this method is\r\n   * only needed for preloading or for reloading in case of an error.\r\n   * @abstract\r\n   * @api\r\n   */ load() {\n        (0, $6c5e11070e371322$export$817eb92a8194bab0)();\n    }\n    /**\r\n   * Get the alpha value for rendering.\r\n   * @param {string} id An id for the renderer.\r\n   * @param {number} time The render frame time.\r\n   * @return {number} A number between 0 and 1.\r\n   */ getAlpha(id, time) {\n        if (!this.transition_) return 1;\n        let start = this.transitionStarts_[id];\n        if (!start) {\n            start = time;\n            this.transitionStarts_[id] = start;\n        } else if (start === -1) return 1;\n        const delta = time - start + 1000 / 60; // avoid rendering at 0\n        if (delta >= this.transition_) return 1;\n        return (0, $c7ccf7e681a9b333$export$929e5a82286172a6)(delta / this.transition_);\n    }\n    /**\r\n   * Determine if a tile is in an alpha transition.  A tile is considered in\r\n   * transition if tile.getAlpha() has not yet been called or has been called\r\n   * and returned 1.\r\n   * @param {string} id An id for the renderer.\r\n   * @return {boolean} The tile is in transition.\r\n   */ inTransition(id) {\n        if (!this.transition_) return false;\n        return this.transitionStarts_[id] !== -1;\n    }\n    /**\r\n   * Mark a transition as complete.\r\n   * @param {string} id An id for the renderer.\r\n   */ endTransition(id) {\n        if (this.transition_) this.transitionStarts_[id] = -1;\n    }\n    /**\r\n   * @override\r\n   */ disposeInternal() {\n        this.release();\n        super.disposeInternal();\n    }\n}\nvar $0f235d2d04095c6e$export$2e2bcd8739ae039 = $0f235d2d04095c6e$var$Tile;\n\n\n\n\nclass $cd3bc8d185522361$var$ImageTile extends (0, $0f235d2d04095c6e$export$2e2bcd8739ae039) {\n    /**\r\n   * @param {import(\"./tilecoord.js\").TileCoord} tileCoord Tile coordinate.\r\n   * @param {import(\"./TileState.js\").default} state State.\r\n   * @param {string} src Image source URI.\r\n   * @param {?string} crossOrigin Cross origin.\r\n   * @param {import(\"./Tile.js\").LoadFunction} tileLoadFunction Tile load function.\r\n   * @param {import(\"./Tile.js\").Options} [options] Tile options.\r\n   */ constructor(tileCoord, state, src, crossOrigin, tileLoadFunction, options){\n        super(tileCoord, state, options);\n        /**\r\n     * @private\r\n     * @type {?string}\r\n     */ this.crossOrigin_ = crossOrigin;\n        /**\r\n     * Image URI\r\n     *\r\n     * @private\r\n     * @type {string}\r\n     */ this.src_ = src;\n        this.key = src;\n        /**\r\n     * @private\r\n     * @type {HTMLImageElement|HTMLCanvasElement}\r\n     */ this.image_ = new Image();\n        if (crossOrigin !== null) this.image_.crossOrigin = crossOrigin;\n        /**\r\n     * @private\r\n     * @type {?function():void}\r\n     */ this.unlisten_ = null;\n        /**\r\n     * @private\r\n     * @type {import(\"./Tile.js\").LoadFunction}\r\n     */ this.tileLoadFunction_ = tileLoadFunction;\n    }\n    /**\r\n   * Get the HTML image element for this tile (may be a Canvas, Image, or Video).\r\n   * @return {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement} Image.\r\n   * @api\r\n   */ getImage() {\n        return this.image_;\n    }\n    /**\r\n   * Sets an HTML image element for this tile (may be a Canvas or preloaded Image).\r\n   * @param {HTMLCanvasElement|HTMLImageElement} element Element.\r\n   */ setImage(element) {\n        this.image_ = element;\n        this.state = (0, $b8291d9739c3c64e$export$2e2bcd8739ae039).LOADED;\n        this.unlistenImage_();\n        this.changed();\n    }\n    /**\r\n   * Tracks loading or read errors.\r\n   *\r\n   * @private\r\n   */ handleImageError_() {\n        this.state = (0, $b8291d9739c3c64e$export$2e2bcd8739ae039).ERROR;\n        this.unlistenImage_();\n        this.image_ = $cd3bc8d185522361$var$getBlankImage();\n        this.changed();\n    }\n    /**\r\n   * Tracks successful image load.\r\n   *\r\n   * @private\r\n   */ handleImageLoad_() {\n        const image = /** @type {HTMLImageElement} */ this.image_;\n        if (image.naturalWidth && image.naturalHeight) this.state = (0, $b8291d9739c3c64e$export$2e2bcd8739ae039).LOADED;\n        else this.state = (0, $b8291d9739c3c64e$export$2e2bcd8739ae039).EMPTY;\n        this.unlistenImage_();\n        this.changed();\n    }\n    /**\r\n   * Load the image or retry if loading previously failed.\r\n   * Loading is taken care of by the tile queue, and calling this method is\r\n   * only needed for preloading or for reloading in case of an error.\r\n   *\r\n   * To retry loading tiles on failed requests, use a custom `tileLoadFunction`\r\n   * that checks for error status codes and reloads only when the status code is\r\n   * 408, 429, 500, 502, 503 and 504, and only when not too many retries have been\r\n   * made already:\r\n   *\r\n   * ```js\r\n   * const retryCodes = [408, 429, 500, 502, 503, 504];\r\n   * const retries = {};\r\n   * source.setTileLoadFunction((tile, src) => {\r\n   *   const image = tile.getImage();\r\n   *   fetch(src)\r\n   *     .then((response) => {\r\n   *       if (retryCodes.includes(response.status)) {\r\n   *         retries[src] = (retries[src] || 0) + 1;\r\n   *         if (retries[src] <= 3) {\r\n   *           setTimeout(() => tile.load(), retries[src] * 1000);\r\n   *         }\r\n   *         return Promise.reject();\r\n   *       }\r\n   *       return response.blob();\r\n   *     })\r\n   *     .then((blob) => {\r\n   *       const imageUrl = URL.createObjectURL(blob);\r\n   *       image.src = imageUrl;\r\n   *       setTimeout(() => URL.revokeObjectURL(imageUrl), 5000);\r\n   *     })\r\n   *     .catch(() => tile.setState(3)); // error\r\n   * });\r\n   * ```\r\n   * @api\r\n   * @override\r\n   */ load() {\n        if (this.state == (0, $b8291d9739c3c64e$export$2e2bcd8739ae039).ERROR) {\n            this.state = (0, $b8291d9739c3c64e$export$2e2bcd8739ae039).IDLE;\n            this.image_ = new Image();\n            if (this.crossOrigin_ !== null) this.image_.crossOrigin = this.crossOrigin_;\n        }\n        if (this.state == (0, $b8291d9739c3c64e$export$2e2bcd8739ae039).IDLE) {\n            this.state = (0, $b8291d9739c3c64e$export$2e2bcd8739ae039).LOADING;\n            this.changed();\n            this.tileLoadFunction_(this, this.src_);\n            this.unlisten_ = (0, $b54439be79d4619a$export$bc96ecc7c2a50764)(this.image_, this.handleImageLoad_.bind(this), this.handleImageError_.bind(this));\n        }\n    }\n    /**\r\n   * Discards event handlers which listen for load completion or errors.\r\n   *\r\n   * @private\r\n   */ unlistenImage_() {\n        if (this.unlisten_) {\n            this.unlisten_();\n            this.unlisten_ = null;\n        }\n    }\n    /**\r\n   * @override\r\n   */ disposeInternal() {\n        this.unlistenImage_();\n        this.image_ = null;\n        super.disposeInternal();\n    }\n}\n/**\r\n * Get a 1-pixel blank image.\r\n * @return {HTMLCanvasElement} Blank image.\r\n */ function $cd3bc8d185522361$var$getBlankImage() {\n    const ctx = (0, $075f937d7366f1a2$export$9e05d10eae75c464)(1, 1);\n    ctx.fillStyle = 'rgba(0,0,0,0)';\n    ctx.fillRect(0, 0, 1, 1);\n    return ctx.canvas;\n}\nvar $cd3bc8d185522361$export$2e2bcd8739ae039 = $cd3bc8d185522361$var$ImageTile;\n\n\n\n\n\n/**\r\n * @module ol/reproj/Tile\r\n */ \n\n\n\n\n\n\n/**\r\n * @module ol/reproj\r\n */ \n\n\n\nlet $2b0a118af78fb031$var$brokenDiagonalRendering_;\nconst $2b0a118af78fb031$export$a166f0857c555517 = [];\n/**\r\n * This draws a small triangle into a canvas by setting the triangle as the clip region\r\n * and then drawing a (too large) rectangle\r\n *\r\n * @param {CanvasRenderingContext2D} ctx The context in which to draw the triangle\r\n * @param {number} u1 The x-coordinate of the second point. The first point is 0,0.\r\n * @param {number} v1 The y-coordinate of the second point.\r\n * @param {number} u2 The x-coordinate of the third point.\r\n * @param {number} v2 The y-coordinate of the third point.\r\n */ function $2b0a118af78fb031$var$drawTestTriangle(ctx, u1, v1, u2, v2) {\n    ctx.beginPath();\n    ctx.moveTo(0, 0);\n    ctx.lineTo(u1, v1);\n    ctx.lineTo(u2, v2);\n    ctx.closePath();\n    ctx.save();\n    ctx.clip();\n    ctx.fillRect(0, 0, Math.max(u1, u2) + 1, Math.max(v1, v2));\n    ctx.restore();\n}\n/**\r\n * Given the data from getImageData, see if the right values appear at the provided offset.\r\n * Returns true if either the color or transparency is off\r\n *\r\n * @param {Uint8ClampedArray} data The data returned from getImageData\r\n * @param {number} offset The pixel offset from the start of data.\r\n * @return {boolean} true if the diagonal rendering is broken\r\n */ function $2b0a118af78fb031$var$verifyBrokenDiagonalRendering(data, offset) {\n    // the values ought to be close to the rgba(210, 0, 0, 0.75)\n    return Math.abs(data[offset * 4] - 210) > 2 || Math.abs(data[offset * 4 + 3] - 191.25) > 2;\n}\n/**\r\n * Determines if the current browser configuration can render triangular clip regions correctly.\r\n * This value is cached so the function is only expensive the first time called.\r\n * Firefox on Windows (as of now) does not if HWA is enabled. See https://bugzilla.mozilla.org/show_bug.cgi?id=1606976\r\n * Chrome works, and everything seems to work on OSX and Android. This function caches the\r\n * result. I suppose that it is conceivably possible that a browser might flip modes while the app is\r\n * running, but lets hope not.\r\n *\r\n * @return {boolean} true if the Diagonal Rendering is broken.\r\n */ function $2b0a118af78fb031$var$isBrokenDiagonalRendering() {\n    if ($2b0a118af78fb031$var$brokenDiagonalRendering_ === undefined) {\n        const ctx = (0, $075f937d7366f1a2$export$9e05d10eae75c464)(6, 6, $2b0a118af78fb031$export$a166f0857c555517);\n        ctx.globalCompositeOperation = 'lighter';\n        ctx.fillStyle = 'rgba(210, 0, 0, 0.75)';\n        $2b0a118af78fb031$var$drawTestTriangle(ctx, 4, 5, 4, 0);\n        $2b0a118af78fb031$var$drawTestTriangle(ctx, 4, 5, 0, 5);\n        const data = ctx.getImageData(0, 0, 3, 3).data;\n        $2b0a118af78fb031$var$brokenDiagonalRendering_ = $2b0a118af78fb031$var$verifyBrokenDiagonalRendering(data, 0) || $2b0a118af78fb031$var$verifyBrokenDiagonalRendering(data, 4) || $2b0a118af78fb031$var$verifyBrokenDiagonalRendering(data, 8);\n        (0, $075f937d7366f1a2$export$e918ac6a1026a12a)(ctx);\n        $2b0a118af78fb031$export$a166f0857c555517.push(ctx.canvas);\n    }\n    return $2b0a118af78fb031$var$brokenDiagonalRendering_;\n}\nfunction $2b0a118af78fb031$export$5fbb958059b7e71f(sourceProj, targetProj, targetCenter, targetResolution) {\n    const sourceCenter = (0, $9c4744460e43e41b$export$51186ad6e864892a)(targetCenter, targetProj, sourceProj);\n    // calculate the ideal resolution of the source data\n    let sourceResolution = (0, $9c4744460e43e41b$export$2d8f7b4eec383d44)(targetProj, targetResolution, targetCenter);\n    const targetMetersPerUnit = targetProj.getMetersPerUnit();\n    if (targetMetersPerUnit !== undefined) sourceResolution *= targetMetersPerUnit;\n    const sourceMetersPerUnit = sourceProj.getMetersPerUnit();\n    if (sourceMetersPerUnit !== undefined) sourceResolution /= sourceMetersPerUnit;\n    // Based on the projection properties, the point resolution at the specified\n    // coordinates may be slightly different. We need to reverse-compensate this\n    // in order to achieve optimal results.\n    const sourceExtent = sourceProj.getExtent();\n    if (!sourceExtent || (0, $6da4c8ed3074c92b$export$ac68c24d37ca240f)(sourceExtent, sourceCenter)) {\n        const compensationFactor = (0, $9c4744460e43e41b$export$2d8f7b4eec383d44)(sourceProj, sourceResolution, sourceCenter) / sourceResolution;\n        if (isFinite(compensationFactor) && compensationFactor > 0) sourceResolution /= compensationFactor;\n    }\n    return sourceResolution;\n}\nfunction $2b0a118af78fb031$export$16d356211d01f1cc(sourceProj, targetProj, targetExtent, targetResolution) {\n    const targetCenter = (0, $6da4c8ed3074c92b$export$c91255cadecfe081)(targetExtent);\n    let sourceResolution = $2b0a118af78fb031$export$5fbb958059b7e71f(sourceProj, targetProj, targetCenter, targetResolution);\n    if (!isFinite(sourceResolution) || sourceResolution <= 0) (0, $6da4c8ed3074c92b$export$f9ed8a3d123a08e2)(targetExtent, function(corner) {\n        sourceResolution = $2b0a118af78fb031$export$5fbb958059b7e71f(sourceProj, targetProj, corner, targetResolution);\n        return isFinite(sourceResolution) && sourceResolution > 0;\n    });\n    return sourceResolution;\n}\nfunction $2b0a118af78fb031$export$b3890eb0ae9dca99(width, height, pixelRatio, sourceResolution, sourceExtent, targetResolution, targetExtent, triangulation, sources, gutter, renderEdges, interpolate, drawSingle, clipExtent) {\n    const context = (0, $075f937d7366f1a2$export$9e05d10eae75c464)(Math.round(pixelRatio * width), Math.round(pixelRatio * height), $2b0a118af78fb031$export$a166f0857c555517);\n    if (!interpolate) context.imageSmoothingEnabled = false;\n    if (sources.length === 0) return context.canvas;\n    context.scale(pixelRatio, pixelRatio);\n    function pixelRound(value) {\n        return Math.round(value * pixelRatio) / pixelRatio;\n    }\n    context.globalCompositeOperation = 'lighter';\n    const sourceDataExtent = (0, $6da4c8ed3074c92b$export$fe201bb3bbe031e9)();\n    sources.forEach(function(src, i, arr) {\n        (0, $6da4c8ed3074c92b$export$8b58be045bf06082)(sourceDataExtent, src.extent);\n    });\n    let stitchContext;\n    const stitchScale = pixelRatio / sourceResolution;\n    // Round up Float32 scale values to prevent interpolation in Firefox.\n    const inverseScale = (interpolate ? 1 : 1 + Math.pow(2, -24)) / stitchScale;\n    if (!drawSingle || sources.length !== 1 || gutter !== 0) {\n        stitchContext = (0, $075f937d7366f1a2$export$9e05d10eae75c464)(Math.round((0, $6da4c8ed3074c92b$export$3c49c185de0c2bfc)(sourceDataExtent) * stitchScale), Math.round((0, $6da4c8ed3074c92b$export$c08559766941f856)(sourceDataExtent) * stitchScale), $2b0a118af78fb031$export$a166f0857c555517);\n        if (!interpolate) stitchContext.imageSmoothingEnabled = false;\n        if (sourceExtent && clipExtent) {\n            const xPos = (sourceExtent[0] - sourceDataExtent[0]) * stitchScale;\n            const yPos = -(sourceExtent[3] - sourceDataExtent[3]) * stitchScale;\n            const width = (0, $6da4c8ed3074c92b$export$3c49c185de0c2bfc)(sourceExtent) * stitchScale;\n            const height = (0, $6da4c8ed3074c92b$export$c08559766941f856)(sourceExtent) * stitchScale;\n            stitchContext.rect(xPos, yPos, width, height);\n            stitchContext.clip();\n        }\n        sources.forEach(function(src, i, arr) {\n            // This test should never fail -- but it does. Need to find a fix the upstream condition\n            if (src.image.width > 0 && src.image.height > 0) {\n                if (src.clipExtent) {\n                    stitchContext.save();\n                    const xPos = (src.clipExtent[0] - sourceDataExtent[0]) * stitchScale;\n                    const yPos = -(src.clipExtent[3] - sourceDataExtent[3]) * stitchScale;\n                    const width = (0, $6da4c8ed3074c92b$export$3c49c185de0c2bfc)(src.clipExtent) * stitchScale;\n                    const height = (0, $6da4c8ed3074c92b$export$c08559766941f856)(src.clipExtent) * stitchScale;\n                    stitchContext.rect(interpolate ? xPos : Math.round(xPos), interpolate ? yPos : Math.round(yPos), interpolate ? width : Math.round(xPos + width) - Math.round(xPos), interpolate ? height : Math.round(yPos + height) - Math.round(yPos));\n                    stitchContext.clip();\n                }\n                const xPos = (src.extent[0] - sourceDataExtent[0]) * stitchScale;\n                const yPos = -(src.extent[3] - sourceDataExtent[3]) * stitchScale;\n                const srcWidth = (0, $6da4c8ed3074c92b$export$3c49c185de0c2bfc)(src.extent) * stitchScale;\n                const srcHeight = (0, $6da4c8ed3074c92b$export$c08559766941f856)(src.extent) * stitchScale;\n                stitchContext.drawImage(src.image, gutter, gutter, src.image.width - 2 * gutter, src.image.height - 2 * gutter, interpolate ? xPos : Math.round(xPos), interpolate ? yPos : Math.round(yPos), interpolate ? srcWidth : Math.round(xPos + srcWidth) - Math.round(xPos), interpolate ? srcHeight : Math.round(yPos + srcHeight) - Math.round(yPos));\n                if (src.clipExtent) stitchContext.restore();\n            }\n        });\n    }\n    const targetTopLeft = (0, $6da4c8ed3074c92b$export$cb1538b07e6964ff)(targetExtent);\n    triangulation.getTriangles().forEach(function(triangle, i, arr) {\n        /* Calculate affine transform (src -> dst)\r\n     * Resulting matrix can be used to transform coordinate\r\n     * from `sourceProjection` to destination pixels.\r\n     *\r\n     * To optimize number of context calls and increase numerical stability,\r\n     * we also do the following operations:\r\n     * trans(-topLeftExtentCorner), scale(1 / targetResolution), scale(1, -1)\r\n     * here before solving the linear system so [ui, vi] are pixel coordinates.\r\n     *\r\n     * Src points: xi, yi\r\n     * Dst points: ui, vi\r\n     * Affine coefficients: aij\r\n     *\r\n     * | x0 y0 1  0  0 0 |   |a00|   |u0|\r\n     * | x1 y1 1  0  0 0 |   |a01|   |u1|\r\n     * | x2 y2 1  0  0 0 | x |a02| = |u2|\r\n     * |  0  0 0 x0 y0 1 |   |a10|   |v0|\r\n     * |  0  0 0 x1 y1 1 |   |a11|   |v1|\r\n     * |  0  0 0 x2 y2 1 |   |a12|   |v2|\r\n     */ const source = triangle.source;\n        const target = triangle.target;\n        let x0 = source[0][0], y0 = source[0][1];\n        let x1 = source[1][0], y1 = source[1][1];\n        let x2 = source[2][0], y2 = source[2][1];\n        // Make sure that everything is on pixel boundaries\n        const u0 = pixelRound((target[0][0] - targetTopLeft[0]) / targetResolution);\n        const v0 = pixelRound(-(target[0][1] - targetTopLeft[1]) / targetResolution);\n        const u1 = pixelRound((target[1][0] - targetTopLeft[0]) / targetResolution);\n        const v1 = pixelRound(-(target[1][1] - targetTopLeft[1]) / targetResolution);\n        const u2 = pixelRound((target[2][0] - targetTopLeft[0]) / targetResolution);\n        const v2 = pixelRound(-(target[2][1] - targetTopLeft[1]) / targetResolution);\n        // Shift all the source points to improve numerical stability\n        // of all the subsequent calculations. The [x0, y0] is used here.\n        // This is also used to simplify the linear system.\n        const sourceNumericalShiftX = x0;\n        const sourceNumericalShiftY = y0;\n        x0 = 0;\n        y0 = 0;\n        x1 -= sourceNumericalShiftX;\n        y1 -= sourceNumericalShiftY;\n        x2 -= sourceNumericalShiftX;\n        y2 -= sourceNumericalShiftY;\n        const augmentedMatrix = [\n            [\n                x1,\n                y1,\n                0,\n                0,\n                u1 - u0\n            ],\n            [\n                x2,\n                y2,\n                0,\n                0,\n                u2 - u0\n            ],\n            [\n                0,\n                0,\n                x1,\n                y1,\n                v1 - v0\n            ],\n            [\n                0,\n                0,\n                x2,\n                y2,\n                v2 - v0\n            ]\n        ];\n        const affineCoefs = (0, $6b000a049d919fe5$export$8240f01c446270e6)(augmentedMatrix);\n        if (!affineCoefs) return;\n        context.save();\n        context.beginPath();\n        if ($2b0a118af78fb031$var$isBrokenDiagonalRendering() || !interpolate) {\n            // Make sure that all lines are horizontal or vertical\n            context.moveTo(u1, v1);\n            // This is the diagonal line. Do it in 4 steps\n            const steps = 4;\n            const ud = u0 - u1;\n            const vd = v0 - v1;\n            for(let step = 0; step < steps; step++){\n                // Go horizontally\n                context.lineTo(u1 + pixelRound((step + 1) * ud / steps), v1 + pixelRound(step * vd / (steps - 1)));\n                // Go vertically\n                if (step != steps - 1) context.lineTo(u1 + pixelRound((step + 1) * ud / steps), v1 + pixelRound((step + 1) * vd / (steps - 1)));\n            }\n            // We are almost at u0r, v0r\n            context.lineTo(u2, v2);\n        } else {\n            context.moveTo(u1, v1);\n            context.lineTo(u0, v0);\n            context.lineTo(u2, v2);\n        }\n        context.clip();\n        context.transform(affineCoefs[0], affineCoefs[2], affineCoefs[1], affineCoefs[3], u0, v0);\n        context.translate(sourceDataExtent[0] - sourceNumericalShiftX, sourceDataExtent[3] - sourceNumericalShiftY);\n        let image;\n        if (stitchContext) {\n            image = stitchContext.canvas;\n            context.scale(inverseScale, -inverseScale);\n        } else {\n            const source = sources[0];\n            const extent = source.extent;\n            image = source.image;\n            context.scale((0, $6da4c8ed3074c92b$export$3c49c185de0c2bfc)(extent) / image.width, -(0, $6da4c8ed3074c92b$export$c08559766941f856)(extent) / image.height);\n        }\n        context.drawImage(image, 0, 0);\n        context.restore();\n    });\n    if (stitchContext) {\n        (0, $075f937d7366f1a2$export$e918ac6a1026a12a)(stitchContext);\n        $2b0a118af78fb031$export$a166f0857c555517.push(stitchContext.canvas);\n    }\n    if (renderEdges) {\n        context.save();\n        context.globalCompositeOperation = 'source-over';\n        context.strokeStyle = 'black';\n        context.lineWidth = 1;\n        triangulation.getTriangles().forEach(function(triangle, i, arr) {\n            const target = triangle.target;\n            const u0 = (target[0][0] - targetTopLeft[0]) / targetResolution;\n            const v0 = -(target[0][1] - targetTopLeft[1]) / targetResolution;\n            const u1 = (target[1][0] - targetTopLeft[0]) / targetResolution;\n            const v1 = -(target[1][1] - targetTopLeft[1]) / targetResolution;\n            const u2 = (target[2][0] - targetTopLeft[0]) / targetResolution;\n            const v2 = -(target[2][1] - targetTopLeft[1]) / targetResolution;\n            context.beginPath();\n            context.moveTo(u1, v1);\n            context.lineTo(u0, v0);\n            context.lineTo(u2, v2);\n            context.closePath();\n            context.stroke();\n        });\n        context.restore();\n    }\n    return context.canvas;\n}\n\n\n/**\r\n * @module ol/reproj/Triangulation\r\n */ \n\n\n\n/**\r\n * Single triangle; consists of 3 source points and 3 target points.\r\n * @typedef {Object} Triangle\r\n * @property {Array<import(\"../coordinate.js\").Coordinate>} source Source.\r\n * @property {Array<import(\"../coordinate.js\").Coordinate>} target Target.\r\n */ /**\r\n * Maximum number of subdivision steps during raster reprojection triangulation.\r\n * Prevents high memory usage and large number of proj4 calls (for certain\r\n * transformations and areas). At most `2*(2^this)` triangles are created for\r\n * each triangulated extent (tile/image).\r\n * @type {number}\r\n */ const $6be53f6edfbf1854$var$MAX_SUBDIVISION = 10;\n/**\r\n * Maximum allowed size of triangle relative to world width. When transforming\r\n * corners of world extent between certain projections, the resulting\r\n * triangulation seems to have zero error and no subdivision is performed. If\r\n * the triangle width is more than this (relative to world width; 0-1),\r\n * subdivison is forced (up to `MAX_SUBDIVISION`). Default is `0.25`.\r\n * @type {number}\r\n */ const $6be53f6edfbf1854$var$MAX_TRIANGLE_WIDTH = 0.25;\n/**\r\n * @classdesc\r\n * Class containing triangulation of the given target extent.\r\n * Used for determining source data and the reprojection itself.\r\n */ class $6be53f6edfbf1854$var$Triangulation {\n    /**\r\n   * @param {import(\"../proj/Projection.js\").default} sourceProj Source projection.\r\n   * @param {import(\"../proj/Projection.js\").default} targetProj Target projection.\r\n   * @param {import(\"../extent.js\").Extent} targetExtent Target extent to triangulate.\r\n   * @param {import(\"../extent.js\").Extent} maxSourceExtent Maximal source extent that can be used.\r\n   * @param {number} errorThreshold Acceptable error (in source units).\r\n   * @param {?number} destinationResolution The (optional) resolution of the destination.\r\n   * @param {import(\"../transform.js\").Transform} [sourceMatrix] Source transform matrix.\r\n   */ constructor(sourceProj, targetProj, targetExtent, maxSourceExtent, errorThreshold, destinationResolution, sourceMatrix){\n        /**\r\n     * @type {import(\"../proj/Projection.js\").default}\r\n     * @private\r\n     */ this.sourceProj_ = sourceProj;\n        /**\r\n     * @type {import(\"../proj/Projection.js\").default}\r\n     * @private\r\n     */ this.targetProj_ = targetProj;\n        /** @type {!Object<string, import(\"../coordinate.js\").Coordinate>} */ let transformInvCache = {};\n        const transformInv = sourceMatrix ? (0, $9c4744460e43e41b$export$6b4aafd331159e0d)((input)=>(0, $e22e7611e69f42a9$export$5635d7ef4b8fee1c)(sourceMatrix, (0, $9c4744460e43e41b$export$51186ad6e864892a)(input, this.targetProj_, this.sourceProj_))) : (0, $9c4744460e43e41b$export$fce0c6cfca85ed96)(this.targetProj_, this.sourceProj_);\n        /**\r\n     * @param {import(\"../coordinate.js\").Coordinate} c A coordinate.\r\n     * @return {import(\"../coordinate.js\").Coordinate} Transformed coordinate.\r\n     * @private\r\n     */ this.transformInv_ = function(c) {\n            const key = c[0] + '/' + c[1];\n            if (!transformInvCache[key]) transformInvCache[key] = transformInv(c);\n            return transformInvCache[key];\n        };\n        /**\r\n     * @type {import(\"../extent.js\").Extent}\r\n     * @private\r\n     */ this.maxSourceExtent_ = maxSourceExtent;\n        /**\r\n     * @type {number}\r\n     * @private\r\n     */ this.errorThresholdSquared_ = errorThreshold * errorThreshold;\n        /**\r\n     * @type {Array<Triangle>}\r\n     * @private\r\n     */ this.triangles_ = [];\n        /**\r\n     * Indicates that the triangulation crosses edge of the source projection.\r\n     * @type {boolean}\r\n     * @private\r\n     */ this.wrapsXInSource_ = false;\n        /**\r\n     * @type {boolean}\r\n     * @private\r\n     */ this.canWrapXInSource_ = this.sourceProj_.canWrapX() && !!maxSourceExtent && !!this.sourceProj_.getExtent() && (0, $6da4c8ed3074c92b$export$3c49c185de0c2bfc)(maxSourceExtent) >= (0, $6da4c8ed3074c92b$export$3c49c185de0c2bfc)(this.sourceProj_.getExtent());\n        /**\r\n     * @type {?number}\r\n     * @private\r\n     */ this.sourceWorldWidth_ = this.sourceProj_.getExtent() ? (0, $6da4c8ed3074c92b$export$3c49c185de0c2bfc)(this.sourceProj_.getExtent()) : null;\n        /**\r\n     * @type {?number}\r\n     * @private\r\n     */ this.targetWorldWidth_ = this.targetProj_.getExtent() ? (0, $6da4c8ed3074c92b$export$3c49c185de0c2bfc)(this.targetProj_.getExtent()) : null;\n        const destinationTopLeft = (0, $6da4c8ed3074c92b$export$cb1538b07e6964ff)(targetExtent);\n        const destinationTopRight = (0, $6da4c8ed3074c92b$export$b84fa077c8b05295)(targetExtent);\n        const destinationBottomRight = (0, $6da4c8ed3074c92b$export$e77c1cf70445e168)(targetExtent);\n        const destinationBottomLeft = (0, $6da4c8ed3074c92b$export$8d09f5e2e1bf560d)(targetExtent);\n        const sourceTopLeft = this.transformInv_(destinationTopLeft);\n        const sourceTopRight = this.transformInv_(destinationTopRight);\n        const sourceBottomRight = this.transformInv_(destinationBottomRight);\n        const sourceBottomLeft = this.transformInv_(destinationBottomLeft);\n        /*\r\n     * The maxSubdivision controls how many splittings of the target area can\r\n     * be done. The idea here is to do a linear mapping of the target areas\r\n     * but the actual overall reprojection (can be) extremely non-linear. The\r\n     * default value of MAX_SUBDIVISION was chosen based on mapping a 256x256\r\n     * tile size. However this function is also called to remap canvas rendered\r\n     * layers which can be much larger. This calculation increases the maxSubdivision\r\n     * value by the right factor so that each 256x256 pixel area has\r\n     * MAX_SUBDIVISION divisions.\r\n     */ const maxSubdivision = $6be53f6edfbf1854$var$MAX_SUBDIVISION + (destinationResolution ? Math.max(0, Math.ceil(Math.log2((0, $6da4c8ed3074c92b$export$520c40045967cb15)(targetExtent) / (destinationResolution * destinationResolution * 65536)))) : 0);\n        this.addQuad_(destinationTopLeft, destinationTopRight, destinationBottomRight, destinationBottomLeft, sourceTopLeft, sourceTopRight, sourceBottomRight, sourceBottomLeft, maxSubdivision);\n        if (this.wrapsXInSource_) {\n            let leftBound = Infinity;\n            this.triangles_.forEach(function(triangle, i, arr) {\n                leftBound = Math.min(leftBound, triangle.source[0][0], triangle.source[1][0], triangle.source[2][0]);\n            });\n            // Shift triangles to be as close to `leftBound` as possible\n            // (if the distance is more than `worldWidth / 2` it can be closer.\n            this.triangles_.forEach((triangle)=>{\n                if (Math.max(triangle.source[0][0], triangle.source[1][0], triangle.source[2][0]) - leftBound > this.sourceWorldWidth_ / 2) {\n                    const newTriangle = [\n                        [\n                            triangle.source[0][0],\n                            triangle.source[0][1]\n                        ],\n                        [\n                            triangle.source[1][0],\n                            triangle.source[1][1]\n                        ],\n                        [\n                            triangle.source[2][0],\n                            triangle.source[2][1]\n                        ]\n                    ];\n                    if (newTriangle[0][0] - leftBound > this.sourceWorldWidth_ / 2) newTriangle[0][0] -= this.sourceWorldWidth_;\n                    if (newTriangle[1][0] - leftBound > this.sourceWorldWidth_ / 2) newTriangle[1][0] -= this.sourceWorldWidth_;\n                    if (newTriangle[2][0] - leftBound > this.sourceWorldWidth_ / 2) newTriangle[2][0] -= this.sourceWorldWidth_;\n                    // Rarely (if the extent contains both the dateline and prime meridian)\n                    // the shift can in turn break some triangles.\n                    // Detect this here and don't shift in such cases.\n                    const minX = Math.min(newTriangle[0][0], newTriangle[1][0], newTriangle[2][0]);\n                    const maxX = Math.max(newTriangle[0][0], newTriangle[1][0], newTriangle[2][0]);\n                    if (maxX - minX < this.sourceWorldWidth_ / 2) triangle.source = newTriangle;\n                }\n            });\n        }\n        transformInvCache = {};\n    }\n    /**\r\n   * Adds triangle to the triangulation.\r\n   * @param {import(\"../coordinate.js\").Coordinate} a The target a coordinate.\r\n   * @param {import(\"../coordinate.js\").Coordinate} b The target b coordinate.\r\n   * @param {import(\"../coordinate.js\").Coordinate} c The target c coordinate.\r\n   * @param {import(\"../coordinate.js\").Coordinate} aSrc The source a coordinate.\r\n   * @param {import(\"../coordinate.js\").Coordinate} bSrc The source b coordinate.\r\n   * @param {import(\"../coordinate.js\").Coordinate} cSrc The source c coordinate.\r\n   * @private\r\n   */ addTriangle_(a, b, c, aSrc, bSrc, cSrc) {\n        this.triangles_.push({\n            source: [\n                aSrc,\n                bSrc,\n                cSrc\n            ],\n            target: [\n                a,\n                b,\n                c\n            ]\n        });\n    }\n    /**\r\n   * Adds quad (points in clock-wise order) to the triangulation\r\n   * (and reprojects the vertices) if valid.\r\n   * Performs quad subdivision if needed to increase precision.\r\n   *\r\n   * @param {import(\"../coordinate.js\").Coordinate} a The target a coordinate.\r\n   * @param {import(\"../coordinate.js\").Coordinate} b The target b coordinate.\r\n   * @param {import(\"../coordinate.js\").Coordinate} c The target c coordinate.\r\n   * @param {import(\"../coordinate.js\").Coordinate} d The target d coordinate.\r\n   * @param {import(\"../coordinate.js\").Coordinate} aSrc The source a coordinate.\r\n   * @param {import(\"../coordinate.js\").Coordinate} bSrc The source b coordinate.\r\n   * @param {import(\"../coordinate.js\").Coordinate} cSrc The source c coordinate.\r\n   * @param {import(\"../coordinate.js\").Coordinate} dSrc The source d coordinate.\r\n   * @param {number} maxSubdivision Maximal allowed subdivision of the quad.\r\n   * @private\r\n   */ addQuad_(a, b, c, d, aSrc, bSrc, cSrc, dSrc, maxSubdivision) {\n        const sourceQuadExtent = (0, $6da4c8ed3074c92b$export$8aceca7c77505534)([\n            aSrc,\n            bSrc,\n            cSrc,\n            dSrc\n        ]);\n        const sourceCoverageX = this.sourceWorldWidth_ ? (0, $6da4c8ed3074c92b$export$3c49c185de0c2bfc)(sourceQuadExtent) / this.sourceWorldWidth_ : null;\n        const sourceWorldWidth = /** @type {number} */ this.sourceWorldWidth_;\n        // when the quad is wrapped in the source projection\n        // it covers most of the projection extent, but not fully\n        const wrapsX = this.sourceProj_.canWrapX() && sourceCoverageX > 0.5 && sourceCoverageX < 1;\n        let needsSubdivision = false;\n        if (maxSubdivision > 0) {\n            if (this.targetProj_.isGlobal() && this.targetWorldWidth_) {\n                const targetQuadExtent = (0, $6da4c8ed3074c92b$export$8aceca7c77505534)([\n                    a,\n                    b,\n                    c,\n                    d\n                ]);\n                const targetCoverageX = (0, $6da4c8ed3074c92b$export$3c49c185de0c2bfc)(targetQuadExtent) / this.targetWorldWidth_;\n                needsSubdivision = targetCoverageX > $6be53f6edfbf1854$var$MAX_TRIANGLE_WIDTH || needsSubdivision;\n            }\n            if (!wrapsX && this.sourceProj_.isGlobal() && sourceCoverageX) needsSubdivision = sourceCoverageX > $6be53f6edfbf1854$var$MAX_TRIANGLE_WIDTH || needsSubdivision;\n        }\n        if (!needsSubdivision && this.maxSourceExtent_) {\n            if (isFinite(sourceQuadExtent[0]) && isFinite(sourceQuadExtent[1]) && isFinite(sourceQuadExtent[2]) && isFinite(sourceQuadExtent[3])) {\n                if (!(0, $6da4c8ed3074c92b$export$7b0a31e10bbff018)(sourceQuadExtent, this.maxSourceExtent_)) // whole quad outside source projection extent -> ignore\n                return;\n            }\n        }\n        let isNotFinite = 0;\n        if (!needsSubdivision) {\n            if (!isFinite(aSrc[0]) || !isFinite(aSrc[1]) || !isFinite(bSrc[0]) || !isFinite(bSrc[1]) || !isFinite(cSrc[0]) || !isFinite(cSrc[1]) || !isFinite(dSrc[0]) || !isFinite(dSrc[1])) {\n                if (maxSubdivision > 0) needsSubdivision = true;\n                else {\n                    // It might be the case that only 1 of the points is infinite. In this case\n                    // we can draw a single triangle with the other three points\n                    isNotFinite = (!isFinite(aSrc[0]) || !isFinite(aSrc[1]) ? 8 : 0) + (!isFinite(bSrc[0]) || !isFinite(bSrc[1]) ? 4 : 0) + (!isFinite(cSrc[0]) || !isFinite(cSrc[1]) ? 2 : 0) + (!isFinite(dSrc[0]) || !isFinite(dSrc[1]) ? 1 : 0);\n                    if (isNotFinite != 1 && isNotFinite != 2 && isNotFinite != 4 && isNotFinite != 8) return;\n                }\n            }\n        }\n        if (maxSubdivision > 0) {\n            if (!needsSubdivision) {\n                const center = [\n                    (a[0] + c[0]) / 2,\n                    (a[1] + c[1]) / 2\n                ];\n                const centerSrc = this.transformInv_(center);\n                let dx;\n                if (wrapsX) {\n                    const centerSrcEstimX = ((0, $6b000a049d919fe5$export$ba467bec01d66def)(aSrc[0], sourceWorldWidth) + (0, $6b000a049d919fe5$export$ba467bec01d66def)(cSrc[0], sourceWorldWidth)) / 2;\n                    dx = centerSrcEstimX - (0, $6b000a049d919fe5$export$ba467bec01d66def)(centerSrc[0], sourceWorldWidth);\n                } else dx = (aSrc[0] + cSrc[0]) / 2 - centerSrc[0];\n                const dy = (aSrc[1] + cSrc[1]) / 2 - centerSrc[1];\n                const centerSrcErrorSquared = dx * dx + dy * dy;\n                needsSubdivision = centerSrcErrorSquared > this.errorThresholdSquared_;\n            }\n            if (needsSubdivision) {\n                if (Math.abs(a[0] - c[0]) <= Math.abs(a[1] - c[1])) {\n                    // split horizontally (top & bottom)\n                    const bc = [\n                        (b[0] + c[0]) / 2,\n                        (b[1] + c[1]) / 2\n                    ];\n                    const bcSrc = this.transformInv_(bc);\n                    const da = [\n                        (d[0] + a[0]) / 2,\n                        (d[1] + a[1]) / 2\n                    ];\n                    const daSrc = this.transformInv_(da);\n                    this.addQuad_(a, b, bc, da, aSrc, bSrc, bcSrc, daSrc, maxSubdivision - 1);\n                    this.addQuad_(da, bc, c, d, daSrc, bcSrc, cSrc, dSrc, maxSubdivision - 1);\n                } else {\n                    // split vertically (left & right)\n                    const ab = [\n                        (a[0] + b[0]) / 2,\n                        (a[1] + b[1]) / 2\n                    ];\n                    const abSrc = this.transformInv_(ab);\n                    const cd = [\n                        (c[0] + d[0]) / 2,\n                        (c[1] + d[1]) / 2\n                    ];\n                    const cdSrc = this.transformInv_(cd);\n                    this.addQuad_(a, ab, cd, d, aSrc, abSrc, cdSrc, dSrc, maxSubdivision - 1);\n                    this.addQuad_(ab, b, c, cd, abSrc, bSrc, cSrc, cdSrc, maxSubdivision - 1);\n                }\n                return;\n            }\n        }\n        if (wrapsX) {\n            if (!this.canWrapXInSource_) return;\n            this.wrapsXInSource_ = true;\n        }\n        // Exactly zero or one of *Src is not finite\n        // The triangles must have the diagonal line as the first side\n        // This is to allow easy code in reproj.s to make it straight for broken\n        // browsers that can't handle diagonal clipping\n        if ((isNotFinite & 0xb) == 0) this.addTriangle_(a, c, d, aSrc, cSrc, dSrc);\n        if ((isNotFinite & 0xe) == 0) this.addTriangle_(a, c, b, aSrc, cSrc, bSrc);\n        if (isNotFinite) {\n            // Try the other two triangles\n            if ((isNotFinite & 0xd) == 0) this.addTriangle_(b, d, a, bSrc, dSrc, aSrc);\n            if ((isNotFinite & 0x7) == 0) this.addTriangle_(b, d, c, bSrc, dSrc, cSrc);\n        }\n    }\n    /**\r\n   * Calculates extent of the `source` coordinates from all the triangles.\r\n   *\r\n   * @return {import(\"../extent.js\").Extent} Calculated extent.\r\n   */ calculateSourceExtent() {\n        const extent = (0, $6da4c8ed3074c92b$export$fe201bb3bbe031e9)();\n        this.triangles_.forEach(function(triangle, i, arr) {\n            const src = triangle.source;\n            (0, $6da4c8ed3074c92b$export$1f820e3920fa5715)(extent, src[0]);\n            (0, $6da4c8ed3074c92b$export$1f820e3920fa5715)(extent, src[1]);\n            (0, $6da4c8ed3074c92b$export$1f820e3920fa5715)(extent, src[2]);\n        });\n        return extent;\n    }\n    /**\r\n   * @return {Array<Triangle>} Array of the calculated triangles.\r\n   */ getTriangles() {\n        return this.triangles_;\n    }\n}\nvar $6be53f6edfbf1854$export$2e2bcd8739ae039 = $6be53f6edfbf1854$var$Triangulation;\n\n\n/**\r\n * @module ol/reproj/common\r\n */ /**\r\n * Default maximum allowed threshold  (in pixels) for reprojection\r\n * triangulation.\r\n * @type {number}\r\n */ const $8ea51dd7be3ba5e2$export$3ecb4bcfa5aae855 = 0.5;\n\n\n/**\r\n * @typedef {function(number, number, number, number) : (import(\"../ImageTile.js\").default)} FunctionType\r\n */ /**\r\n * @typedef {Object} TileOffset\r\n * @property {import(\"../ImageTile.js\").default} tile Tile.\r\n * @property {number} offset Offset.\r\n */ /**\r\n * @classdesc\r\n * Class encapsulating single reprojected tile.\r\n * See {@link module:ol/source/TileImage~TileImage}.\r\n *\r\n */ class $398e350e33050c07$var$ReprojTile extends (0, $0f235d2d04095c6e$export$2e2bcd8739ae039) {\n    /**\r\n   * @param {import(\"../proj/Projection.js\").default} sourceProj Source projection.\r\n   * @param {import(\"../tilegrid/TileGrid.js\").default} sourceTileGrid Source tile grid.\r\n   * @param {import(\"../proj/Projection.js\").default} targetProj Target projection.\r\n   * @param {import(\"../tilegrid/TileGrid.js\").default} targetTileGrid Target tile grid.\r\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Coordinate of the tile.\r\n   * @param {import(\"../tilecoord.js\").TileCoord} wrappedTileCoord Coordinate of the tile wrapped in X.\r\n   * @param {number} pixelRatio Pixel ratio.\r\n   * @param {number} gutter Gutter of the source tiles.\r\n   * @param {FunctionType} getTileFunction\r\n   *     Function returning source tiles (z, x, y, pixelRatio).\r\n   * @param {number} [errorThreshold] Acceptable reprojection error (in px).\r\n   * @param {boolean} [renderEdges] Render reprojection edges.\r\n   * @param {import(\"../Tile.js\").Options} [options] Tile options.\r\n   */ constructor(sourceProj, sourceTileGrid, targetProj, targetTileGrid, tileCoord, wrappedTileCoord, pixelRatio, gutter, getTileFunction, errorThreshold, renderEdges, options){\n        super(tileCoord, (0, $b8291d9739c3c64e$export$2e2bcd8739ae039).IDLE, options);\n        /**\r\n     * @private\r\n     * @type {boolean}\r\n     */ this.renderEdges_ = renderEdges !== undefined ? renderEdges : false;\n        /**\r\n     * @private\r\n     * @type {number}\r\n     */ this.pixelRatio_ = pixelRatio;\n        /**\r\n     * @private\r\n     * @type {number}\r\n     */ this.gutter_ = gutter;\n        /**\r\n     * @private\r\n     * @type {HTMLCanvasElement}\r\n     */ this.canvas_ = null;\n        /**\r\n     * @private\r\n     * @type {import(\"../tilegrid/TileGrid.js\").default}\r\n     */ this.sourceTileGrid_ = sourceTileGrid;\n        /**\r\n     * @private\r\n     * @type {import(\"../tilegrid/TileGrid.js\").default}\r\n     */ this.targetTileGrid_ = targetTileGrid;\n        /**\r\n     * @private\r\n     * @type {import(\"../tilecoord.js\").TileCoord}\r\n     */ this.wrappedTileCoord_ = wrappedTileCoord ? wrappedTileCoord : tileCoord;\n        /**\r\n     * @private\r\n     * @type {!Array<TileOffset>}\r\n     */ this.sourceTiles_ = [];\n        /**\r\n     * @private\r\n     * @type {?Array<import(\"../events.js\").EventsKey>}\r\n     */ this.sourcesListenerKeys_ = null;\n        /**\r\n     * @private\r\n     * @type {number}\r\n     */ this.sourceZ_ = 0;\n        /**\r\n     * @private\r\n     * @type {import(\"../extent.js\").Extent}\r\n     */ this.clipExtent_ = sourceProj.canWrapX() ? sourceProj.getExtent() : undefined;\n        const targetExtent = targetTileGrid.getTileCoordExtent(this.wrappedTileCoord_);\n        const maxTargetExtent = this.targetTileGrid_.getExtent();\n        let maxSourceExtent = this.sourceTileGrid_.getExtent();\n        const limitedTargetExtent = maxTargetExtent ? (0, $6da4c8ed3074c92b$export$72209efa88586d42)(targetExtent, maxTargetExtent) : targetExtent;\n        if ((0, $6da4c8ed3074c92b$export$520c40045967cb15)(limitedTargetExtent) === 0) {\n            // Tile is completely outside range -> EMPTY\n            // TODO: is it actually correct that the source even creates the tile ?\n            this.state = (0, $b8291d9739c3c64e$export$2e2bcd8739ae039).EMPTY;\n            return;\n        }\n        const sourceProjExtent = sourceProj.getExtent();\n        if (sourceProjExtent) {\n            if (!maxSourceExtent) maxSourceExtent = sourceProjExtent;\n            else maxSourceExtent = (0, $6da4c8ed3074c92b$export$72209efa88586d42)(maxSourceExtent, sourceProjExtent);\n        }\n        const targetResolution = targetTileGrid.getResolution(this.wrappedTileCoord_[0]);\n        const sourceResolution = (0, $2b0a118af78fb031$export$16d356211d01f1cc)(sourceProj, targetProj, limitedTargetExtent, targetResolution);\n        if (!isFinite(sourceResolution) || sourceResolution <= 0) {\n            // invalid sourceResolution -> EMPTY\n            // probably edges of the projections when no extent is defined\n            this.state = (0, $b8291d9739c3c64e$export$2e2bcd8739ae039).EMPTY;\n            return;\n        }\n        const errorThresholdInPixels = errorThreshold !== undefined ? errorThreshold : (0, $8ea51dd7be3ba5e2$export$3ecb4bcfa5aae855);\n        /**\r\n     * @private\r\n     * @type {!import(\"./Triangulation.js\").default}\r\n     */ this.triangulation_ = new (0, $6be53f6edfbf1854$export$2e2bcd8739ae039)(sourceProj, targetProj, limitedTargetExtent, maxSourceExtent, sourceResolution * errorThresholdInPixels, targetResolution);\n        if (this.triangulation_.getTriangles().length === 0) {\n            // no valid triangles -> EMPTY\n            this.state = (0, $b8291d9739c3c64e$export$2e2bcd8739ae039).EMPTY;\n            return;\n        }\n        this.sourceZ_ = sourceTileGrid.getZForResolution(sourceResolution);\n        let sourceExtent = this.triangulation_.calculateSourceExtent();\n        if (maxSourceExtent) {\n            if (sourceProj.canWrapX()) {\n                sourceExtent[1] = (0, $6b000a049d919fe5$export$7d15b64cf5a3a4c4)(sourceExtent[1], maxSourceExtent[1], maxSourceExtent[3]);\n                sourceExtent[3] = (0, $6b000a049d919fe5$export$7d15b64cf5a3a4c4)(sourceExtent[3], maxSourceExtent[1], maxSourceExtent[3]);\n            } else sourceExtent = (0, $6da4c8ed3074c92b$export$72209efa88586d42)(sourceExtent, maxSourceExtent);\n        }\n        if (!(0, $6da4c8ed3074c92b$export$520c40045967cb15)(sourceExtent)) this.state = (0, $b8291d9739c3c64e$export$2e2bcd8739ae039).EMPTY;\n        else {\n            let worldWidth = 0;\n            let worldsAway = 0;\n            if (sourceProj.canWrapX()) {\n                worldWidth = (0, $6da4c8ed3074c92b$export$3c49c185de0c2bfc)(sourceProjExtent);\n                worldsAway = Math.floor((sourceExtent[0] - sourceProjExtent[0]) / worldWidth);\n            }\n            const sourceExtents = (0, $6da4c8ed3074c92b$export$9031237f01de0947)(sourceExtent.slice(), sourceProj, true);\n            sourceExtents.forEach((extent)=>{\n                const sourceRange = sourceTileGrid.getTileRangeForExtentAndZ(extent, this.sourceZ_);\n                for(let srcX = sourceRange.minX; srcX <= sourceRange.maxX; srcX++)for(let srcY = sourceRange.minY; srcY <= sourceRange.maxY; srcY++){\n                    const tile = getTileFunction(this.sourceZ_, srcX, srcY, pixelRatio);\n                    if (tile) {\n                        const offset = worldsAway * worldWidth;\n                        this.sourceTiles_.push({\n                            tile: tile,\n                            offset: offset\n                        });\n                    }\n                }\n                ++worldsAway;\n            });\n            if (this.sourceTiles_.length === 0) this.state = (0, $b8291d9739c3c64e$export$2e2bcd8739ae039).EMPTY;\n        }\n    }\n    /**\r\n   * Get the HTML Canvas element for this tile.\r\n   * @return {HTMLCanvasElement} Canvas.\r\n   */ getImage() {\n        return this.canvas_;\n    }\n    /**\r\n   * @private\r\n   */ reproject_() {\n        const sources = [];\n        this.sourceTiles_.forEach((source)=>{\n            const tile = source.tile;\n            if (tile && tile.getState() == (0, $b8291d9739c3c64e$export$2e2bcd8739ae039).LOADED) {\n                const extent = this.sourceTileGrid_.getTileCoordExtent(tile.tileCoord);\n                extent[0] += source.offset;\n                extent[2] += source.offset;\n                const clipExtent = this.clipExtent_?.slice();\n                if (clipExtent) {\n                    clipExtent[0] += source.offset;\n                    clipExtent[2] += source.offset;\n                }\n                sources.push({\n                    extent: extent,\n                    clipExtent: clipExtent,\n                    image: tile.getImage()\n                });\n            }\n        });\n        this.sourceTiles_.length = 0;\n        if (sources.length === 0) this.state = (0, $b8291d9739c3c64e$export$2e2bcd8739ae039).ERROR;\n        else {\n            const z = this.wrappedTileCoord_[0];\n            const size = this.targetTileGrid_.getTileSize(z);\n            const width = typeof size === 'number' ? size : size[0];\n            const height = typeof size === 'number' ? size : size[1];\n            const targetResolution = this.targetTileGrid_.getResolution(z);\n            const sourceResolution = this.sourceTileGrid_.getResolution(this.sourceZ_);\n            const targetExtent = this.targetTileGrid_.getTileCoordExtent(this.wrappedTileCoord_);\n            this.canvas_ = (0, $2b0a118af78fb031$export$b3890eb0ae9dca99)(width, height, this.pixelRatio_, sourceResolution, this.sourceTileGrid_.getExtent(), targetResolution, targetExtent, this.triangulation_, sources, this.gutter_, this.renderEdges_, this.interpolate);\n            this.state = (0, $b8291d9739c3c64e$export$2e2bcd8739ae039).LOADED;\n        }\n        this.changed();\n    }\n    /**\r\n   * Load not yet loaded URI.\r\n   * @override\r\n   */ load() {\n        if (this.state == (0, $b8291d9739c3c64e$export$2e2bcd8739ae039).IDLE) {\n            this.state = (0, $b8291d9739c3c64e$export$2e2bcd8739ae039).LOADING;\n            this.changed();\n            let leftToLoad = 0;\n            this.sourcesListenerKeys_ = [];\n            this.sourceTiles_.forEach(({ tile: tile })=>{\n                const state = tile.getState();\n                if (state == (0, $b8291d9739c3c64e$export$2e2bcd8739ae039).IDLE || state == (0, $b8291d9739c3c64e$export$2e2bcd8739ae039).LOADING) {\n                    leftToLoad++;\n                    const sourceListenKey = (0, $d5bf8abd656a3cdc$export$63174c828edd6ff8)(tile, (0, $294047c5e65f31a3$export$2e2bcd8739ae039).CHANGE, (e)=>{\n                        const state = tile.getState();\n                        if (state == (0, $b8291d9739c3c64e$export$2e2bcd8739ae039).LOADED || state == (0, $b8291d9739c3c64e$export$2e2bcd8739ae039).ERROR || state == (0, $b8291d9739c3c64e$export$2e2bcd8739ae039).EMPTY) {\n                            (0, $d5bf8abd656a3cdc$export$b0a21c8b3c1c921)(sourceListenKey);\n                            leftToLoad--;\n                            if (leftToLoad === 0) {\n                                this.unlistenSources_();\n                                this.reproject_();\n                            }\n                        }\n                    });\n                    this.sourcesListenerKeys_.push(sourceListenKey);\n                }\n            });\n            if (leftToLoad === 0) setTimeout(this.reproject_.bind(this), 0);\n            else this.sourceTiles_.forEach(function({ tile: tile }, i, arr) {\n                const state = tile.getState();\n                if (state == (0, $b8291d9739c3c64e$export$2e2bcd8739ae039).IDLE) tile.load();\n            });\n        }\n    }\n    /**\r\n   * @private\r\n   */ unlistenSources_() {\n        this.sourcesListenerKeys_.forEach((0, $d5bf8abd656a3cdc$export$b0a21c8b3c1c921));\n        this.sourcesListenerKeys_ = null;\n    }\n    /**\r\n   * Remove from the cache due to expiry\r\n   * @override\r\n   */ release() {\n        if (this.canvas_) {\n            (0, $075f937d7366f1a2$export$e918ac6a1026a12a)(this.canvas_.getContext('2d'));\n            (0, $2b0a118af78fb031$export$a166f0857c555517).push(this.canvas_);\n            this.canvas_ = null;\n        }\n        super.release();\n    }\n}\nvar $398e350e33050c07$export$2e2bcd8739ae039 = $398e350e33050c07$var$ReprojTile;\n\n\n\n\n/**\r\n * @module ol/source/UrlTile\r\n */ \n/**\r\n * @module ol/tileurlfunction\r\n */ \n\n/**\r\n * @module ol/uri\r\n */ \n\nfunction $60db182c0252e220$export$c202e3cb8db99a95(uri, params) {\n    /** @type {Array<string>} */ const keyParams = [];\n    // Skip any null or undefined parameter values\n    Object.keys(params).forEach(function(k) {\n        if (params[k] !== null && params[k] !== undefined) keyParams.push(k + '=' + encodeURIComponent(params[k]));\n    });\n    const qs = keyParams.join('&');\n    // remove any trailing ? or &\n    uri = uri.replace(/[?&]$/, '');\n    // append ? or & depending on whether uri has existing parameters\n    uri += uri.includes('?') ? '&' : '?';\n    return uri + qs;\n}\nconst $60db182c0252e220$var$zRegEx = /\\{z\\}/g;\nconst $60db182c0252e220$var$xRegEx = /\\{x\\}/g;\nconst $60db182c0252e220$var$yRegEx = /\\{y\\}/g;\nconst $60db182c0252e220$var$dashYRegEx = /\\{-y\\}/g;\nfunction $60db182c0252e220$export$df1e52f1b5b1c86f(template, z, x, y, maxY) {\n    return template.replace($60db182c0252e220$var$zRegEx, z.toString()).replace($60db182c0252e220$var$xRegEx, x.toString()).replace($60db182c0252e220$var$yRegEx, y.toString()).replace($60db182c0252e220$var$dashYRegEx, function() {\n        if (maxY === undefined) throw new Error('If the URL template has a {-y} placeholder, the grid extent must be known');\n        return (maxY - y).toString();\n    });\n}\nfunction $60db182c0252e220$export$83e87e683240b2e8(urls, z, x, y) {\n    const hash = (0, $bf2a04496fadabc6$export$731f79419750ccf7)(z, x, y);\n    const index = (0, $6b000a049d919fe5$export$ba467bec01d66def)(hash, urls.length);\n    return urls[index];\n}\nfunction $60db182c0252e220$export$2a1fa079bfd73dde(url) {\n    const urls = [];\n    let match = /\\{([a-z])-([a-z])\\}/.exec(url);\n    if (match) {\n        // char range\n        const startCharCode = match[1].charCodeAt(0);\n        const stopCharCode = match[2].charCodeAt(0);\n        let charCode;\n        for(charCode = startCharCode; charCode <= stopCharCode; ++charCode)urls.push(url.replace(match[0], String.fromCharCode(charCode)));\n        return urls;\n    }\n    match = /\\{(\\d+)-(\\d+)\\}/.exec(url);\n    if (match) {\n        // number range\n        const stop = parseInt(match[2], 10);\n        for(let i = parseInt(match[1], 10); i <= stop; i++)urls.push(url.replace(match[0], i.toString()));\n        return urls;\n    }\n    urls.push(url);\n    return urls;\n}\n\n\nfunction $91dd08a0f5859882$export$f0ecb46e90798741(template, tileGrid) {\n    return(/**\r\n     * @param {import(\"./tilecoord.js\").TileCoord} tileCoord Tile Coordinate.\r\n     * @param {number} pixelRatio Pixel ratio.\r\n     * @param {import(\"./proj/Projection.js\").default} projection Projection.\r\n     * @return {string|undefined} Tile URL.\r\n     */ function(tileCoord, pixelRatio, projection) {\n        if (!tileCoord) return undefined;\n        let maxY;\n        const z = tileCoord[0];\n        if (tileGrid) {\n            // The `{-y}` placeholder only works for sources that have a tile grid at construction\n            const range = tileGrid.getFullTileRange(z);\n            if (range) maxY = range.getHeight() - 1;\n        }\n        return (0, $60db182c0252e220$export$df1e52f1b5b1c86f)(template, z, tileCoord[1], tileCoord[2], maxY);\n    });\n}\nfunction $91dd08a0f5859882$export$436f44dbcc31fea3(templates, tileGrid) {\n    const len = templates.length;\n    const tileUrlFunctions = new Array(len);\n    for(let i = 0; i < len; ++i)tileUrlFunctions[i] = $91dd08a0f5859882$export$f0ecb46e90798741(templates[i], tileGrid);\n    return $91dd08a0f5859882$export$4229b1d9af69b3be(tileUrlFunctions);\n}\nfunction $91dd08a0f5859882$export$4229b1d9af69b3be(tileUrlFunctions) {\n    if (tileUrlFunctions.length === 1) return tileUrlFunctions[0];\n    return(/**\r\n     * @param {import(\"./tilecoord.js\").TileCoord} tileCoord Tile Coordinate.\r\n     * @param {number} pixelRatio Pixel ratio.\r\n     * @param {import(\"./proj/Projection.js\").default} projection Projection.\r\n     * @return {string|undefined} Tile URL.\r\n     */ function(tileCoord, pixelRatio, projection) {\n        if (!tileCoord) return undefined;\n        const h = (0, $bf2a04496fadabc6$export$d6af199866bfb566)(tileCoord);\n        const index = (0, $6b000a049d919fe5$export$ba467bec01d66def)(h, tileUrlFunctions.length);\n        return tileUrlFunctions[index](tileCoord, pixelRatio, projection);\n    });\n}\nfunction $91dd08a0f5859882$export$fab585f002f634a1(tileCoord, pixelRatio, projection) {\n    return undefined;\n}\n\n\n\n\n/**\r\n * @module ol/source/Tile\r\n */ \n\n\n\n\n/**\r\n * @module ol/source/Source\r\n */ \n\n/**\r\n * @typedef {'undefined' | 'loading' | 'ready' | 'error'} State\r\n * State of the source, one of 'undefined', 'loading', 'ready' or 'error'.\r\n */ /**\r\n * A function that takes a {@link import(\"../View.js\").ViewStateLayerStateExtent} and returns a string or\r\n * an array of strings representing source attributions.\r\n *\r\n * @typedef {function(import(\"../View.js\").ViewStateLayerStateExtent): (string|Array<string>)} Attribution\r\n */ /**\r\n * A type that can be used to provide attribution information for data sources.\r\n *\r\n * It represents either\r\n * a simple string (e.g. `'© Acme Inc.'`)\r\n * an array of simple strings (e.g. `['© Acme Inc.', '© Bacme Inc.']`)\r\n * a function that returns a string or array of strings ({@link module:ol/source/Source~Attribution})\r\n *\r\n * @typedef {string|Array<string>|Attribution} AttributionLike\r\n */ /**\r\n * @typedef {Object} Options\r\n * @property {AttributionLike} [attributions] Attributions.\r\n * @property {boolean} [attributionsCollapsible=true] Attributions are collapsible.\r\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection. Default is the view projection.\r\n * @property {import(\"./Source.js\").State} [state='ready'] State.\r\n * @property {boolean} [wrapX=false] WrapX.\r\n * @property {boolean} [interpolate=false] Use interpolated values when resampling.  By default,\r\n * the nearest neighbor is used when resampling.\r\n */ /**\r\n * @classdesc\r\n * Abstract base class; normally only used for creating subclasses and not\r\n * instantiated in apps.\r\n * Base class for {@link module:ol/layer/Layer~Layer} sources.\r\n *\r\n * A generic `change` event is triggered when the state of the source changes.\r\n * @abstract\r\n * @api\r\n */ class $ed6dc99f268f3882$var$Source extends (0, $b68b3d6e32e3074a$export$2e2bcd8739ae039) {\n    /**\r\n   * @param {Options} options Source options.\r\n   */ constructor(options){\n        super();\n        /**\r\n     * @protected\r\n     * @type {import(\"../proj/Projection.js\").default|null}\r\n     */ this.projection = (0, $9c4744460e43e41b$export$3988ae62b71be9a3)(options.projection);\n        /**\r\n     * @private\r\n     * @type {?Attribution}\r\n     */ this.attributions_ = $ed6dc99f268f3882$var$adaptAttributions(options.attributions);\n        /**\r\n     * @private\r\n     * @type {boolean}\r\n     */ this.attributionsCollapsible_ = options.attributionsCollapsible ?? true;\n        /**\r\n     * This source is currently loading data. Sources that defer loading to the\r\n     * map's tile queue never set this to `true`.\r\n     * @type {boolean}\r\n     */ this.loading = false;\n        /**\r\n     * @private\r\n     * @type {import(\"./Source.js\").State}\r\n     */ this.state_ = options.state !== undefined ? options.state : 'ready';\n        /**\r\n     * @private\r\n     * @type {boolean}\r\n     */ this.wrapX_ = options.wrapX !== undefined ? options.wrapX : false;\n        /**\r\n     * @private\r\n     * @type {boolean}\r\n     */ this.interpolate_ = !!options.interpolate;\n        /**\r\n     * @protected\r\n     * @type {function(import(\"../View.js\").ViewOptions):void}\r\n     */ this.viewResolver = null;\n        /**\r\n     * @protected\r\n     * @type {function(Error):void}\r\n     */ this.viewRejector = null;\n        const self = this;\n        /**\r\n     * @private\r\n     * @type {Promise<import(\"../View.js\").ViewOptions>}\r\n     */ this.viewPromise_ = new Promise(function(resolve, reject) {\n            self.viewResolver = resolve;\n            self.viewRejector = reject;\n        });\n    }\n    /**\r\n   * Get the attribution function for the source.\r\n   * @return {?Attribution} Attribution function.\r\n   * @api\r\n   */ getAttributions() {\n        return this.attributions_;\n    }\n    /**\r\n   * @return {boolean} Attributions are collapsible.\r\n   * @api\r\n   */ getAttributionsCollapsible() {\n        return this.attributionsCollapsible_;\n    }\n    /**\r\n   * Get the projection of the source.\r\n   * @return {import(\"../proj/Projection.js\").default|null} Projection.\r\n   * @api\r\n   */ getProjection() {\n        return this.projection;\n    }\n    /**\r\n   * @param {import(\"../proj/Projection\").default} [projection] Projection.\r\n   * @return {Array<number>|null} Resolutions.\r\n   */ getResolutions(projection) {\n        return null;\n    }\n    /**\r\n   * @return {Promise<import(\"../View.js\").ViewOptions>} A promise for view-related properties.\r\n   */ getView() {\n        return this.viewPromise_;\n    }\n    /**\r\n   * Get the state of the source, see {@link import(\"./Source.js\").State} for possible states.\r\n   * @return {import(\"./Source.js\").State} State.\r\n   * @api\r\n   */ getState() {\n        return this.state_;\n    }\n    /**\r\n   * @return {boolean|undefined} Wrap X.\r\n   */ getWrapX() {\n        return this.wrapX_;\n    }\n    /**\r\n   * @return {boolean} Use linear interpolation when resampling.\r\n   */ getInterpolate() {\n        return this.interpolate_;\n    }\n    /**\r\n   * Refreshes the source. The source will be cleared, and data from the server will be reloaded.\r\n   * @api\r\n   */ refresh() {\n        this.changed();\n    }\n    /**\r\n   * Set the attributions of the source.\r\n   * @param {AttributionLike|undefined} attributions Attributions.\r\n   *     Can be passed as `string`, `Array<string>`, {@link module:ol/source/Source~Attribution},\r\n   *     or `undefined`.\r\n   * @api\r\n   */ setAttributions(attributions) {\n        this.attributions_ = $ed6dc99f268f3882$var$adaptAttributions(attributions);\n        this.changed();\n    }\n    /**\r\n   * Set the state of the source.\r\n   * @param {import(\"./Source.js\").State} state State.\r\n   */ setState(state) {\n        this.state_ = state;\n        this.changed();\n    }\n}\n/**\r\n * Turns the attributions option into an attributions function.\r\n * @param {AttributionLike|undefined} attributionLike The attribution option.\r\n * @return {Attribution|null} An attribution function (or null).\r\n */ function $ed6dc99f268f3882$var$adaptAttributions(attributionLike) {\n    if (!attributionLike) return null;\n    if (typeof attributionLike === 'function') return attributionLike;\n    if (!Array.isArray(attributionLike)) attributionLike = [\n        attributionLike\n    ];\n    return (frameState)=>attributionLike;\n}\nvar $ed6dc99f268f3882$export$2e2bcd8739ae039 = $ed6dc99f268f3882$var$Source;\n\n\n/***\r\n * @template Return\r\n * @typedef {import(\"../Observable\").OnSignature<import(\"../Observable\").EventTypes, import(\"../events/Event.js\").default, Return> &\r\n *   import(\"../Observable\").OnSignature<import(\"../ObjectEventType\").Types, import(\"../Object\").ObjectEvent, Return> &\r\n *   import(\"../Observable\").OnSignature<import(\"./TileEventType\").TileSourceEventTypes, TileSourceEvent, Return> &\r\n *   import(\"../Observable\").CombinedOnSignature<import(\"../Observable\").EventTypes|import(\"../ObjectEventType\").Types|\r\n *     import(\"./TileEventType\").TileSourceEventTypes, Return>} TileSourceOnSignature\r\n */ /**\r\n * @typedef {Object} Options\r\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\r\n * @property {boolean} [attributionsCollapsible=true] Attributions are collapsible.\r\n * @property {number} [cacheSize] Deprecated.  Use the cacheSize option on the layer instead.\r\n * @property {number} [tilePixelRatio] TilePixelRatio.\r\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection.\r\n * @property {import(\"./Source.js\").State} [state] State.\r\n * @property {import(\"../tilegrid/TileGrid.js\").default} [tileGrid] TileGrid.\r\n * @property {boolean} [wrapX=false] WrapX.\r\n * @property {number} [transition] Transition.\r\n * @property {string} [key] Key.\r\n * @property {number|import(\"../array.js\").NearestDirectionFunction} [zDirection=0] ZDirection.\r\n * @property {boolean} [interpolate=false] Use interpolated values when resampling.  By default,\r\n * the nearest neighbor is used when resampling.\r\n */ /**\r\n * @classdesc\r\n * Abstract base class; normally only used for creating subclasses and not\r\n * instantiated in apps.\r\n * Base class for sources providing images divided into a tile grid.\r\n *\r\n * @template {import(\"../Tile.js\").default} [TileType=import(\"../Tile.js\").default]\r\n * @abstract\r\n * @api\r\n */ class $988a11d09320f6a8$var$TileSource extends (0, $ed6dc99f268f3882$export$2e2bcd8739ae039) {\n    /**\r\n   * @param {Options} options SourceTile source options.\r\n   */ constructor(options){\n        super({\n            attributions: options.attributions,\n            attributionsCollapsible: options.attributionsCollapsible,\n            projection: options.projection,\n            state: options.state,\n            wrapX: options.wrapX,\n            interpolate: options.interpolate\n        });\n        /***\r\n     * @type {TileSourceOnSignature<import(\"../events\").EventsKey>}\r\n     */ this.on;\n        /***\r\n     * @type {TileSourceOnSignature<import(\"../events\").EventsKey>}\r\n     */ this.once;\n        /***\r\n     * @type {TileSourceOnSignature<void>}\r\n     */ this.un;\n        /**\r\n     * @private\r\n     * @type {number}\r\n     */ this.tilePixelRatio_ = options.tilePixelRatio !== undefined ? options.tilePixelRatio : 1;\n        /**\r\n     * @type {import(\"../tilegrid/TileGrid.js\").default|null}\r\n     * @protected\r\n     */ this.tileGrid = options.tileGrid !== undefined ? options.tileGrid : null;\n        const tileSize = [\n            256,\n            256\n        ];\n        if (this.tileGrid) (0, $cc435a5409103773$export$a71a825ff42fb8e1)(this.tileGrid.getTileSize(this.tileGrid.getMinZoom()), tileSize);\n        /**\r\n     * @protected\r\n     * @type {import(\"../size.js\").Size}\r\n     */ this.tmpSize = [\n            0,\n            0\n        ];\n        /**\r\n     * @private\r\n     * @type {string}\r\n     */ this.key_ = options.key || (0, $6c5e11070e371322$export$5e82334337e0f204)(this);\n        /**\r\n     * @protected\r\n     * @type {import(\"../Tile.js\").Options}\r\n     */ this.tileOptions = {\n            transition: options.transition,\n            interpolate: options.interpolate\n        };\n        /**\r\n     * zDirection hint, read by the renderer. Indicates which resolution should be used\r\n     * by a renderer if the views resolution does not match any resolution of the tile source.\r\n     * If 0, the nearest resolution will be used. If 1, the nearest lower resolution\r\n     * will be used. If -1, the nearest higher resolution will be used.\r\n     * @type {number|import(\"../array.js\").NearestDirectionFunction}\r\n     */ this.zDirection = options.zDirection ? options.zDirection : 0;\n    }\n    /**\r\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\r\n   * @return {number} Gutter.\r\n   */ getGutterForProjection(projection) {\n        return 0;\n    }\n    /**\r\n   * Return the key to be used for all tiles in the source.\r\n   * @return {string} The key for all tiles.\r\n   */ getKey() {\n        return this.key_;\n    }\n    /**\r\n   * Set the value to be used as the key for all tiles in the source.\r\n   * @param {string} key The key for tiles.\r\n   * @protected\r\n   */ setKey(key) {\n        if (this.key_ !== key) {\n            this.key_ = key;\n            this.changed();\n        }\n    }\n    /**\r\n   * @param {import(\"../proj/Projection\").default} [projection] Projection.\r\n   * @return {Array<number>|null} Resolutions.\r\n   * @override\r\n   */ getResolutions(projection) {\n        const tileGrid = projection ? this.getTileGridForProjection(projection) : this.tileGrid;\n        if (!tileGrid) return null;\n        return tileGrid.getResolutions();\n    }\n    /**\r\n   * @abstract\r\n   * @param {number} z Tile coordinate z.\r\n   * @param {number} x Tile coordinate x.\r\n   * @param {number} y Tile coordinate y.\r\n   * @param {number} pixelRatio Pixel ratio.\r\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\r\n   * @return {TileType|null} Tile.\r\n   */ getTile(z, x, y, pixelRatio, projection) {\n        return (0, $6c5e11070e371322$export$817eb92a8194bab0)();\n    }\n    /**\r\n   * Return the tile grid of the tile source.\r\n   * @return {import(\"../tilegrid/TileGrid.js\").default|null} Tile grid.\r\n   * @api\r\n   */ getTileGrid() {\n        return this.tileGrid;\n    }\n    /**\r\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\r\n   * @return {!import(\"../tilegrid/TileGrid.js\").default} Tile grid.\r\n   */ getTileGridForProjection(projection) {\n        if (!this.tileGrid) return (0, $5779655d81caea04$export$1f4812384df8a9c5)(projection);\n        return this.tileGrid;\n    }\n    /**\r\n   * Get the tile pixel ratio for this source. Subclasses may override this\r\n   * method, which is meant to return a supported pixel ratio that matches the\r\n   * provided `pixelRatio` as close as possible.\r\n   * @param {number} pixelRatio Pixel ratio.\r\n   * @return {number} Tile pixel ratio.\r\n   */ getTilePixelRatio(pixelRatio) {\n        return this.tilePixelRatio_;\n    }\n    /**\r\n   * @param {number} z Z.\r\n   * @param {number} pixelRatio Pixel ratio.\r\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\r\n   * @return {import(\"../size.js\").Size} Tile size.\r\n   */ getTilePixelSize(z, pixelRatio, projection) {\n        const tileGrid = this.getTileGridForProjection(projection);\n        const tilePixelRatio = this.getTilePixelRatio(pixelRatio);\n        const tileSize = (0, $cc435a5409103773$export$a71a825ff42fb8e1)(tileGrid.getTileSize(z), this.tmpSize);\n        if (tilePixelRatio == 1) return tileSize;\n        return (0, $cc435a5409103773$export$dcdf75081b88279d)(tileSize, tilePixelRatio, this.tmpSize);\n    }\n    /**\r\n   * Returns a tile coordinate wrapped around the x-axis. When the tile coordinate\r\n   * is outside the resolution and extent range of the tile grid, `null` will be\r\n   * returned.\r\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\r\n   * @param {import(\"../proj/Projection.js\").default} [projection] Projection.\r\n   * @return {import(\"../tilecoord.js\").TileCoord} Tile coordinate to be passed to the tileUrlFunction or\r\n   *     null if no tile URL should be created for the passed `tileCoord`.\r\n   */ getTileCoordForTileUrlFunction(tileCoord, projection) {\n        const gridProjection = projection !== undefined ? projection : this.getProjection();\n        const tileGrid = projection !== undefined ? this.getTileGridForProjection(gridProjection) : this.tileGrid || this.getTileGridForProjection(gridProjection);\n        if (this.getWrapX() && gridProjection.isGlobal()) tileCoord = (0, $5779655d81caea04$export$39a9ce3624977b84)(tileGrid, tileCoord, gridProjection);\n        return (0, $bf2a04496fadabc6$export$60bedf8e3e3c3dbe)(tileCoord, tileGrid) ? tileCoord : null;\n    }\n    /**\r\n   * Remove all cached reprojected tiles from the source. The next render cycle will create new tiles.\r\n   * @api\r\n   */ clear() {}\n    /**\r\n   * @override\r\n   */ refresh() {\n        this.clear();\n        super.refresh();\n    }\n}\nclass $988a11d09320f6a8$export$c571855c51e6c4b6 extends (0, $aeedce20e9577100$export$2e2bcd8739ae039) {\n    /**\r\n   * @param {string} type Type.\r\n   * @param {import(\"../Tile.js\").default} tile The tile.\r\n   */ constructor(type, tile){\n        super(type);\n        /**\r\n     * The tile related to the event.\r\n     * @type {import(\"../Tile.js\").default}\r\n     * @api\r\n     */ this.tile = tile;\n    }\n}\nvar $988a11d09320f6a8$export$2e2bcd8739ae039 = $988a11d09320f6a8$var$TileSource;\n\n\n/**\r\n * @module ol/source/TileEventType\r\n */ /**\r\n * @enum {string}\r\n */ var $7e3d7a0f8b272861$export$2e2bcd8739ae039 /**\r\n * @typedef {'tileloadstart'|'tileloadend'|'tileloaderror'} TileSourceEventTypes\r\n */  = {\n    /**\r\n   * Triggered when a tile starts loading.\r\n   * @event module:ol/source/Tile.TileSourceEvent#tileloadstart\r\n   * @api\r\n   */ TILELOADSTART: 'tileloadstart',\n    /**\r\n   * Triggered when a tile finishes loading, either when its data is loaded,\r\n   * or when loading was aborted because the tile is no longer needed.\r\n   * @event module:ol/source/Tile.TileSourceEvent#tileloadend\r\n   * @api\r\n   */ TILELOADEND: 'tileloadend',\n    /**\r\n   * Triggered if tile loading results in an error. Note that this is not the\r\n   * right place to re-fetch tiles. See {@link module:ol/ImageTile~ImageTile#load}\r\n   * for details.\r\n   * @event module:ol/source/Tile.TileSourceEvent#tileloaderror\r\n   * @api\r\n   */ TILELOADERROR: 'tileloaderror'\n};\n\n\n/**\r\n * @typedef {Object} Options\r\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\r\n * @property {boolean} [attributionsCollapsible=true] Attributions are collapsible.\r\n * @property {number} [cacheSize] Deprecated.  Use the cacheSize option on the layer instead.\r\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection.\r\n * @property {import(\"./Source.js\").State} [state] State.\r\n * @property {import(\"../tilegrid/TileGrid.js\").default} [tileGrid] TileGrid.\r\n * @property {import(\"../Tile.js\").LoadFunction} tileLoadFunction TileLoadFunction.\r\n * @property {number} [tilePixelRatio] TilePixelRatio.\r\n * @property {import(\"../Tile.js\").UrlFunction} [tileUrlFunction] Deprecated.  Use an ImageTile source and provide a function\r\n * for the url option instead.\r\n * @property {string} [url] Url.\r\n * @property {Array<string>} [urls] Urls.\r\n * @property {boolean} [wrapX=true] WrapX.\r\n * @property {number} [transition] Transition.\r\n * @property {string} [key] Key.\r\n * @property {number|import(\"../array.js\").NearestDirectionFunction} [zDirection=0] ZDirection.\r\n * @property {boolean} [interpolate=false] Use interpolated values when resampling.  By default,\r\n * the nearest neighbor is used when resampling.\r\n */ /**\r\n * @deprecated Use the ol/source/ImageTile.js instead.\r\n *\r\n * @fires import(\"./Tile.js\").TileSourceEvent\r\n */ class $e6408236331c2614$var$UrlTile extends (0, $988a11d09320f6a8$export$2e2bcd8739ae039) {\n    /**\r\n   * @param {Options} options Image tile options.\r\n   */ constructor(options){\n        super({\n            attributions: options.attributions,\n            cacheSize: options.cacheSize,\n            projection: options.projection,\n            state: options.state,\n            tileGrid: options.tileGrid,\n            tilePixelRatio: options.tilePixelRatio,\n            wrapX: options.wrapX,\n            transition: options.transition,\n            interpolate: options.interpolate,\n            key: options.key,\n            attributionsCollapsible: options.attributionsCollapsible,\n            zDirection: options.zDirection\n        });\n        /**\r\n     * @private\r\n     * @type {boolean}\r\n     */ this.generateTileUrlFunction_ = this.tileUrlFunction === $e6408236331c2614$var$UrlTile.prototype.tileUrlFunction;\n        /**\r\n     * @protected\r\n     * @type {import(\"../Tile.js\").LoadFunction}\r\n     */ this.tileLoadFunction = options.tileLoadFunction;\n        if (options.tileUrlFunction) this.tileUrlFunction = options.tileUrlFunction;\n        /**\r\n     * @protected\r\n     * @type {!Array<string>|null}\r\n     */ this.urls = null;\n        if (options.urls) this.setUrls(options.urls);\n        else if (options.url) this.setUrl(options.url);\n        /**\r\n     * @private\r\n     * @type {!Object<string, boolean>}\r\n     */ this.tileLoadingKeys_ = {};\n    }\n    /**\r\n   * Deprecated.  Use an ImageTile source instead.\r\n   * Return the tile load function of the source.\r\n   * @return {import(\"../Tile.js\").LoadFunction} TileLoadFunction\r\n   * @api\r\n   */ getTileLoadFunction() {\n        return this.tileLoadFunction;\n    }\n    /**\r\n   * Deprecated.  Use an ImageTile source instead.\r\n   * Return the tile URL function of the source.\r\n   * @return {import(\"../Tile.js\").UrlFunction} TileUrlFunction\r\n   * @api\r\n   */ getTileUrlFunction() {\n        return Object.getPrototypeOf(this).tileUrlFunction === this.tileUrlFunction ? this.tileUrlFunction.bind(this) : this.tileUrlFunction;\n    }\n    /**\r\n   * Deprecated.  Use an ImageTile source instead.\r\n   * Return the URLs used for this source.\r\n   * When a tileUrlFunction is used instead of url or urls,\r\n   * null will be returned.\r\n   * @return {!Array<string>|null} URLs.\r\n   * @api\r\n   */ getUrls() {\n        return this.urls;\n    }\n    /**\r\n   * Handle tile change events.\r\n   * @param {import(\"../events/Event.js\").default} event Event.\r\n   * @protected\r\n   */ handleTileChange(event) {\n        const tile = /** @type {import(\"../Tile.js\").default} */ event.target;\n        const uid = (0, $6c5e11070e371322$export$5e82334337e0f204)(tile);\n        const tileState = tile.getState();\n        let type;\n        if (tileState == (0, $b8291d9739c3c64e$export$2e2bcd8739ae039).LOADING) {\n            this.tileLoadingKeys_[uid] = true;\n            type = (0, $7e3d7a0f8b272861$export$2e2bcd8739ae039).TILELOADSTART;\n        } else if (uid in this.tileLoadingKeys_) {\n            delete this.tileLoadingKeys_[uid];\n            type = tileState == (0, $b8291d9739c3c64e$export$2e2bcd8739ae039).ERROR ? (0, $7e3d7a0f8b272861$export$2e2bcd8739ae039).TILELOADERROR : tileState == (0, $b8291d9739c3c64e$export$2e2bcd8739ae039).LOADED ? (0, $7e3d7a0f8b272861$export$2e2bcd8739ae039).TILELOADEND : undefined;\n        }\n        if (type != undefined) this.dispatchEvent(new (0, $988a11d09320f6a8$export$c571855c51e6c4b6)(type, tile));\n    }\n    /**\r\n   * Deprecated.  Use an ImageTile source instead.\r\n   * Set the tile load function of the source.\r\n   * @param {import(\"../Tile.js\").LoadFunction} tileLoadFunction Tile load function.\r\n   * @api\r\n   */ setTileLoadFunction(tileLoadFunction) {\n        this.tileLoadFunction = tileLoadFunction;\n        this.changed();\n    }\n    /**\r\n   * Deprecated.  Use an ImageTile source instead.\r\n   * Set the tile URL function of the source.\r\n   * @param {import(\"../Tile.js\").UrlFunction} tileUrlFunction Tile URL function.\r\n   * @param {string} [key] Optional new tile key for the source.\r\n   * @api\r\n   */ setTileUrlFunction(tileUrlFunction, key) {\n        this.tileUrlFunction = tileUrlFunction;\n        if (typeof key !== 'undefined') this.setKey(key);\n        else this.changed();\n    }\n    /**\r\n   * Set the URL to use for requests.\r\n   * @param {string} url URL.\r\n   * @api\r\n   */ setUrl(url) {\n        const urls = (0, $60db182c0252e220$export$2a1fa079bfd73dde)(url);\n        this.urls = urls;\n        this.setUrls(urls);\n    }\n    /**\r\n   * Deprecated.  Use an ImageTile source instead.\r\n   * Set the URLs to use for requests.\r\n   * @param {Array<string>} urls URLs.\r\n   * @api\r\n   */ setUrls(urls) {\n        this.urls = urls;\n        const key = urls.join('\\n');\n        if (this.generateTileUrlFunction_) this.setTileUrlFunction((0, $91dd08a0f5859882$export$436f44dbcc31fea3)(urls, this.tileGrid), key);\n        else this.setKey(key);\n    }\n    /**\r\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\r\n   * @param {number} pixelRatio Pixel ratio.\r\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\r\n   * @return {string|undefined} Tile URL.\r\n   */ tileUrlFunction(tileCoord, pixelRatio, projection) {\n        return undefined;\n    }\n}\nvar $e6408236331c2614$export$2e2bcd8739ae039 = $e6408236331c2614$var$UrlTile;\n\n\n/**\r\n * @typedef {Object} Options\r\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\r\n * @property {boolean} [attributionsCollapsible=true] Attributions are collapsible.\r\n * @property {number} [cacheSize] Deprecated.  Use the cacheSize option on the layer instead.\r\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that\r\n * you must provide a `crossOrigin` value if you want to access pixel data with the Canvas renderer.\r\n * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\r\n * @property {boolean} [interpolate=true] Use interpolated values when resampling.  By default,\r\n * linear interpolation is used when resampling.  Set to false to use the nearest neighbor instead.\r\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection. Default is the view projection.\r\n * @property {number} [reprojectionErrorThreshold=0.5] Maximum allowed reprojection error (in pixels).\r\n * Higher values can increase reprojection performance, but decrease precision.\r\n * @property {import(\"./Source.js\").State} [state] Source state.\r\n * @property {typeof import(\"../ImageTile.js\").default} [tileClass] Class used to instantiate image tiles.\r\n * Default is {@link module:ol/ImageTile~ImageTile}.\r\n * @property {import(\"../tilegrid/TileGrid.js\").default} [tileGrid] Tile grid.\r\n * @property {import(\"../Tile.js\").LoadFunction} [tileLoadFunction] Optional function to load a tile given a URL. The default is\r\n * ```js\r\n * function(imageTile, src) {\r\n *   imageTile.getImage().src = src;\r\n * };\r\n * ```\r\n * @property {number} [tilePixelRatio=1] The pixel ratio used by the tile service. For example, if the tile\r\n * service advertizes 256px by 256px tiles but actually sends 512px\r\n * by 512px images (for retina/hidpi devices) then `tilePixelRatio`\r\n * should be set to `2`.\r\n * @property {import(\"../Tile.js\").UrlFunction} [tileUrlFunction] Deprecated.  Use an ImageTile source and provide a function\r\n * for the url option instead.\r\n * @property {string} [url] URL template. Must include `{x}`, `{y}` or `{-y}`, and `{z}` placeholders.\r\n * A `{?-?}` template pattern, for example `subdomain{a-f}.domain.com`, may be\r\n * used instead of defining each one separately in the `urls` option.\r\n * @property {Array<string>} [urls] An array of URL templates.\r\n * @property {boolean} [wrapX] Whether to wrap the world horizontally. The default, is to\r\n * request out-of-bounds tiles from the server. When set to `false`, only one\r\n * world will be rendered. When set to `true`, tiles will be requested for one\r\n * world only, but they will be wrapped horizontally to render multiple worlds.\r\n * @property {number} [transition] Duration of the opacity transition for rendering.\r\n * To disable the opacity transition, pass `transition: 0`.\r\n * @property {string} [key] Optional tile key for proper cache fetching\r\n * @property {number|import(\"../array.js\").NearestDirectionFunction} [zDirection=0]\r\n * Choose whether to use tiles with a higher or lower zoom level when between integer\r\n * zoom levels. See {@link module:ol/tilegrid/TileGrid~TileGrid#getZForResolution}.\r\n */ /**\r\n * @deprecated Use the ol/source/ImageTile.js instead.\r\n *\r\n * @fires import(\"./Tile.js\").TileSourceEvent\r\n * @api\r\n */ class $51d055913ca55b5e$var$TileImage extends (0, $e6408236331c2614$export$2e2bcd8739ae039) {\n    /**\r\n   * @param {!Options} options Image tile options.\r\n   */ constructor(options){\n        super({\n            attributions: options.attributions,\n            cacheSize: options.cacheSize,\n            projection: options.projection,\n            state: options.state,\n            tileGrid: options.tileGrid,\n            tileLoadFunction: options.tileLoadFunction ? options.tileLoadFunction : $51d055913ca55b5e$var$defaultTileLoadFunction,\n            tilePixelRatio: options.tilePixelRatio,\n            tileUrlFunction: options.tileUrlFunction,\n            url: options.url,\n            urls: options.urls,\n            wrapX: options.wrapX,\n            transition: options.transition,\n            interpolate: options.interpolate !== undefined ? options.interpolate : true,\n            key: options.key,\n            attributionsCollapsible: options.attributionsCollapsible,\n            zDirection: options.zDirection\n        });\n        /**\r\n     * @protected\r\n     * @type {?string}\r\n     */ this.crossOrigin = options.crossOrigin !== undefined ? options.crossOrigin : null;\n        /**\r\n     * @protected\r\n     * @type {typeof ImageTile}\r\n     */ this.tileClass = options.tileClass !== undefined ? options.tileClass : (0, $cd3bc8d185522361$export$2e2bcd8739ae039);\n        /**\r\n     * @protected\r\n     * @type {!Object<string, import(\"../tilegrid/TileGrid.js\").default>}\r\n     */ this.tileGridForProjection = {};\n        /**\r\n     * @private\r\n     * @type {number|undefined}\r\n     */ this.reprojectionErrorThreshold_ = options.reprojectionErrorThreshold;\n        /**\r\n     * @private\r\n     * @type {boolean}\r\n     */ this.renderReprojectionEdges_ = false;\n    }\n    /**\r\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\r\n   * @return {number} Gutter.\r\n   * @override\r\n   */ getGutterForProjection(projection) {\n        if (this.getProjection() && projection && !(0, $9c4744460e43e41b$export$fe091d73a555748b)(this.getProjection(), projection)) return 0;\n        return this.getGutter();\n    }\n    /**\r\n   * @return {number} Gutter.\r\n   */ getGutter() {\n        return 0;\n    }\n    /**\r\n   * Return the key to be used for all tiles in the source.\r\n   * @return {string} The key for all tiles.\r\n   * @override\r\n   */ getKey() {\n        let key = super.getKey();\n        if (!this.getInterpolate()) key += ':disable-interpolation';\n        return key;\n    }\n    /**\r\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\r\n   * @return {!import(\"../tilegrid/TileGrid.js\").default} Tile grid.\r\n   * @override\r\n   */ getTileGridForProjection(projection) {\n        const thisProj = this.getProjection();\n        if (this.tileGrid && (!thisProj || (0, $9c4744460e43e41b$export$fe091d73a555748b)(thisProj, projection))) return this.tileGrid;\n        const projKey = (0, $6c5e11070e371322$export$5e82334337e0f204)(projection);\n        if (!(projKey in this.tileGridForProjection)) this.tileGridForProjection[projKey] = (0, $5779655d81caea04$export$1f4812384df8a9c5)(projection);\n        return this.tileGridForProjection[projKey];\n    }\n    /**\r\n   * @param {number} z Tile coordinate z.\r\n   * @param {number} x Tile coordinate x.\r\n   * @param {number} y Tile coordinate y.\r\n   * @param {number} pixelRatio Pixel ratio.\r\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\r\n   * @param {string} key The key set on the tile.\r\n   * @return {!ImageTile} Tile.\r\n   * @private\r\n   */ createTile_(z, x, y, pixelRatio, projection, key) {\n        const tileCoord = [\n            z,\n            x,\n            y\n        ];\n        const urlTileCoord = this.getTileCoordForTileUrlFunction(tileCoord, projection);\n        const tileUrl = urlTileCoord ? this.tileUrlFunction(urlTileCoord, pixelRatio, projection) : undefined;\n        const tile = new this.tileClass(tileCoord, tileUrl !== undefined ? (0, $b8291d9739c3c64e$export$2e2bcd8739ae039).IDLE : (0, $b8291d9739c3c64e$export$2e2bcd8739ae039).EMPTY, tileUrl !== undefined ? tileUrl : '', this.crossOrigin, this.tileLoadFunction, this.tileOptions);\n        tile.key = key;\n        tile.addEventListener((0, $294047c5e65f31a3$export$2e2bcd8739ae039).CHANGE, this.handleTileChange.bind(this));\n        return tile;\n    }\n    /**\r\n   * @param {number} z Tile coordinate z.\r\n   * @param {number} x Tile coordinate x.\r\n   * @param {number} y Tile coordinate y.\r\n   * @param {number} pixelRatio Pixel ratio.\r\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\r\n   * @return {!(ImageTile|ReprojTile)} Tile.\r\n   * @override\r\n   */ getTile(z, x, y, pixelRatio, projection) {\n        const sourceProjection = this.getProjection();\n        if (!sourceProjection || !projection || (0, $9c4744460e43e41b$export$fe091d73a555748b)(sourceProjection, projection)) return this.getTileInternal(z, x, y, pixelRatio, sourceProjection || projection);\n        const tileCoord = [\n            z,\n            x,\n            y\n        ];\n        const key = this.getKey();\n        const sourceTileGrid = this.getTileGridForProjection(sourceProjection);\n        const targetTileGrid = this.getTileGridForProjection(projection);\n        const wrappedTileCoord = this.getTileCoordForTileUrlFunction(tileCoord, projection);\n        const tile = new (0, $398e350e33050c07$export$2e2bcd8739ae039)(sourceProjection, sourceTileGrid, projection, targetTileGrid, tileCoord, wrappedTileCoord, this.getTilePixelRatio(pixelRatio), this.getGutter(), (z, x, y, pixelRatio)=>this.getTileInternal(z, x, y, pixelRatio, sourceProjection), this.reprojectionErrorThreshold_, this.renderReprojectionEdges_, this.tileOptions);\n        tile.key = key;\n        return tile;\n    }\n    /**\r\n   * @param {number} z Tile coordinate z.\r\n   * @param {number} x Tile coordinate x.\r\n   * @param {number} y Tile coordinate y.\r\n   * @param {number} pixelRatio Pixel ratio.\r\n   * @param {!import(\"../proj/Projection.js\").default} projection Projection.\r\n   * @return {!ImageTile} Tile.\r\n   * @protected\r\n   */ getTileInternal(z, x, y, pixelRatio, projection) {\n        const key = this.getKey();\n        return this.createTile_(z, x, y, pixelRatio, projection, key);\n    }\n    /**\r\n   * Sets whether to render reprojection edges or not (usually for debugging).\r\n   * @param {boolean} render Render the edges.\r\n   * @api\r\n   */ setRenderReprojectionEdges(render) {\n        if (this.renderReprojectionEdges_ == render) return;\n        this.renderReprojectionEdges_ = render;\n        this.changed();\n    }\n    /**\r\n   * Sets the tile grid to use when reprojecting the tiles to the given\r\n   * projection instead of the default tile grid for the projection.\r\n   *\r\n   * This can be useful when the default tile grid cannot be created\r\n   * (e.g. projection has no extent defined) or\r\n   * for optimization reasons (custom tile size, resolutions, ...).\r\n   *\r\n   * @param {import(\"../proj.js\").ProjectionLike} projection Projection.\r\n   * @param {import(\"../tilegrid/TileGrid.js\").default} tilegrid Tile grid to use for the projection.\r\n   * @api\r\n   */ setTileGridForProjection(projection, tilegrid) {\n        const proj = (0, $9c4744460e43e41b$export$3988ae62b71be9a3)(projection);\n        if (proj) {\n            const projKey = (0, $6c5e11070e371322$export$5e82334337e0f204)(proj);\n            if (!(projKey in this.tileGridForProjection)) this.tileGridForProjection[projKey] = tilegrid;\n        }\n    }\n}\n/**\r\n * @param {ImageTile} imageTile Image tile.\r\n * @param {string} src Source.\r\n */ function $51d055913ca55b5e$var$defaultTileLoadFunction(imageTile, src) {\n    /** @type {HTMLImageElement|HTMLVideoElement} */ imageTile.getImage().src = src;\n}\nvar $51d055913ca55b5e$export$2e2bcd8739ae039 = $51d055913ca55b5e$var$TileImage;\n\n\n/**\r\n * @typedef {Object} Options\r\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\r\n * @property {boolean} [attributionsCollapsible=true] Attributions are collapsible.\r\n * @property {number} [cacheSize] Deprecated.  Use the cacheSize option on the layer instead.\r\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that\r\n * you must provide a `crossOrigin` value if you want to access pixel data with the Canvas renderer.\r\n * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\r\n * @property {boolean} [interpolate=true] Use interpolated values when resampling.  By default,\r\n * linear interpolation is used when resampling.  Set to false to use the nearest neighbor instead.\r\n * @property {import(\"../proj.js\").ProjectionLike} [projection='EPSG:3857'] Projection.\r\n * @property {number} [reprojectionErrorThreshold=0.5] Maximum allowed reprojection error (in pixels).\r\n * Higher values can increase reprojection performance, but decrease precision.\r\n * @property {number} [maxZoom=42] Optional max zoom level. Not used if `tileGrid` is provided.\r\n * @property {number} [minZoom=0] Optional min zoom level. Not used if `tileGrid` is provided.\r\n * @property {number} [maxResolution] Optional tile grid resolution at level zero. Not used if `tileGrid` is provided.\r\n * @property {import(\"../tilegrid/TileGrid.js\").default} [tileGrid] Tile grid.\r\n * @property {import(\"../Tile.js\").LoadFunction} [tileLoadFunction] Deprecated.  Use an ImageTile source with a loader\r\n * instead.  Optional function to load a tile given a URL. The default is\r\n * ```js\r\n * function(imageTile, src) {\r\n *   imageTile.getImage().src = src;\r\n * };\r\n * ```\r\n * @property {number} [tilePixelRatio=1] The pixel ratio used by the tile service.\r\n * For example, if the tile service advertizes 256px by 256px tiles but actually sends 512px\r\n * by 512px images (for retina/hidpi devices) then `tilePixelRatio`\r\n * should be set to `2`.\r\n * @property {number|import(\"../size.js\").Size} [tileSize=[256, 256]] The tile size used by the tile service.\r\n * Not used if `tileGrid` is provided.\r\n * @property {number} [gutter=0] The size in pixels of the gutter around image tiles to ignore.\r\n * This allows artifacts of rendering at tile edges to be ignored.\r\n * Supported images should be wider and taller than the tile size by a value of `2 x gutter`.\r\n * @property {import(\"../Tile.js\").UrlFunction} [tileUrlFunction] Deprecated.  Use an ImageTile source and provide a function\r\n * for the url option instead.\r\n * @property {string} [url] URL template. Must include `{x}`, `{y}` or `{-y}`,\r\n * and `{z}` placeholders. A `{?-?}` template pattern, for example `subdomain{a-f}.domain.com`,\r\n * may be used instead of defining each one separately in the `urls` option.\r\n * @property {Array<string>} [urls] Deprecated.  Use an ImageTile source and provide an array of URLs for the\r\n * url option instead.\r\n * @property {boolean} [wrapX=true] Whether to wrap the world horizontally.\r\n * @property {number} [transition=250] Duration of the opacity transition for rendering.\r\n * To disable the opacity transition, pass `transition: 0`.\r\n * @property {number|import(\"../array.js\").NearestDirectionFunction} [zDirection=0]\r\n * Choose whether to use tiles with a higher or lower zoom level when between integer\r\n * zoom levels. See {@link module:ol/tilegrid/TileGrid~TileGrid#getZForResolution}.\r\n */ /**\r\n * @classdesc\r\n * Layer source for tile data with URLs in a set XYZ format that are\r\n * defined in a URL template. By default, this follows the widely-used\r\n * Google grid where `x` 0 and `y` 0 are in the top left. Grids like\r\n * TMS where `x` 0 and `y` 0 are in the bottom left can be used by\r\n * using the `{-y}` placeholder in the URL template, so long as the\r\n * source does not have a custom tile grid. In this case\r\n * a `tileUrlFunction` can be used, such as:\r\n * ```js\r\n *  tileUrlFunction: function(coordinate) {\r\n *    return 'http://mapserver.com/' + coordinate[0] + '/' +\r\n *      coordinate[1] + '/' + (-coordinate[2] - 1) + '.png';\r\n *  }\r\n * ```\r\n * @api\r\n */ class $963a7ef65488964c$var$XYZ extends (0, $51d055913ca55b5e$export$2e2bcd8739ae039) {\n    /**\r\n   * @param {Options} [options] XYZ options.\r\n   */ constructor(options){\n        options = options || {};\n        const projection = options.projection !== undefined ? options.projection : 'EPSG:3857';\n        const tileGrid = options.tileGrid !== undefined ? options.tileGrid : (0, $5779655d81caea04$export$38500bbeccc864ff)({\n            extent: (0, $5779655d81caea04$export$7b5b6ef8fd55fac4)(projection),\n            maxResolution: options.maxResolution,\n            maxZoom: options.maxZoom,\n            minZoom: options.minZoom,\n            tileSize: options.tileSize\n        });\n        super({\n            attributions: options.attributions,\n            cacheSize: options.cacheSize,\n            crossOrigin: options.crossOrigin,\n            interpolate: options.interpolate,\n            projection: projection,\n            reprojectionErrorThreshold: options.reprojectionErrorThreshold,\n            tileGrid: tileGrid,\n            tileLoadFunction: options.tileLoadFunction,\n            tilePixelRatio: options.tilePixelRatio,\n            tileUrlFunction: options.tileUrlFunction,\n            url: options.url,\n            urls: options.urls,\n            wrapX: options.wrapX !== undefined ? options.wrapX : true,\n            transition: options.transition,\n            attributionsCollapsible: options.attributionsCollapsible,\n            zDirection: options.zDirection\n        });\n        /**\r\n     * @private\r\n     * @type {number}\r\n     */ this.gutter_ = options.gutter !== undefined ? options.gutter : 0;\n    }\n    /**\r\n   * @return {number} Gutter.\r\n   * @override\r\n   */ getGutter() {\n        return this.gutter_;\n    }\n}\nvar $963a7ef65488964c$export$2e2bcd8739ae039 = $963a7ef65488964c$var$XYZ;\n\n\nconst $6c8498cc816f2362$export$4de8a5e77eb994ad = '&#169; <a href=\"https://www.openstreetmap.org/copyright\" target=\"_blank\">OpenStreetMap</a> contributors.';\n/**\r\n * @typedef {Object} Options\r\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\r\n * @property {number} [cacheSize] Deprecated.  Use the cacheSize option on the layer instead.\r\n * @property {null|string} [crossOrigin='anonymous'] The `crossOrigin` attribute for loaded images.  Note that\r\n * you must provide a `crossOrigin` value if you want to access pixel data with the Canvas renderer.\r\n * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\r\n * @property {boolean} [interpolate=true] Use interpolated values when resampling.  By default,\r\n * linear interpolation is used when resampling.  Set to false to use the nearest neighbor instead.\r\n * @property {number} [maxZoom=19] Max zoom.\r\n * @property {number} [reprojectionErrorThreshold=0.5] Maximum allowed reprojection error (in pixels).\r\n * Higher values can increase reprojection performance, but decrease precision.\r\n * @property {import(\"../Tile.js\").LoadFunction} [tileLoadFunction] Optional function to load a tile given a URL. The default is\r\n * ```js\r\n * function(imageTile, src) {\r\n *   imageTile.getImage().src = src;\r\n * };\r\n * ```\r\n * @property {number} [transition=250] Duration of the opacity transition for rendering.\r\n * To disable the opacity transition, pass `transition: 0`.\r\n * @property {string} [url='https://tile.openstreetmap.org/{z}/{x}/{y}.png'] URL template.\r\n * Must include `{x}`, `{y}` or `{-y}`, and `{z}` placeholders.\r\n * @property {boolean} [wrapX=true] Whether to wrap the world horizontally.\r\n * @property {number|import(\"../array.js\").NearestDirectionFunction} [zDirection=0]\r\n * Choose whether to use tiles with a higher or lower zoom level when between integer\r\n * zoom levels. See {@link module:ol/tilegrid/TileGrid~TileGrid#getZForResolution}.\r\n */ /**\r\n * @classdesc\r\n * Layer source for the OpenStreetMap tile server.\r\n * @api\r\n */ class $6c8498cc816f2362$var$OSM extends (0, $963a7ef65488964c$export$2e2bcd8739ae039) {\n    /**\r\n   * @param {Options} [options] Open Street Map options.\r\n   */ constructor(options){\n        options = options || {};\n        let attributions;\n        if (options.attributions !== undefined) attributions = options.attributions;\n        else attributions = [\n            $6c8498cc816f2362$export$4de8a5e77eb994ad\n        ];\n        const crossOrigin = options.crossOrigin !== undefined ? options.crossOrigin : 'anonymous';\n        const url = options.url !== undefined ? options.url : 'https://tile.openstreetmap.org/{z}/{x}/{y}.png';\n        super({\n            attributions: attributions,\n            attributionsCollapsible: false,\n            cacheSize: options.cacheSize,\n            crossOrigin: crossOrigin,\n            interpolate: options.interpolate,\n            maxZoom: options.maxZoom !== undefined ? options.maxZoom : 19,\n            reprojectionErrorThreshold: options.reprojectionErrorThreshold,\n            tileLoadFunction: options.tileLoadFunction,\n            transition: options.transition,\n            url: url,\n            wrapX: options.wrapX,\n            zDirection: options.zDirection\n        });\n    }\n}\nvar $6c8498cc816f2362$export$2e2bcd8739ae039 = $6c8498cc816f2362$var$OSM;\n\n\n/**\r\n * @module ol/layer/Vector\r\n */ /**\r\n * @module ol/renderer/canvas/VectorLayer\r\n */ \n\n\n\n\n\n\n/**\r\n * @module ol/render/canvas/BuilderGroup\r\n */ /**\r\n * @module ol/render/canvas/Builder\r\n */ \n\n\n\n\n/**\r\n * @module ol/render/VectorContext\r\n */ /**\r\n * @classdesc\r\n * Context for drawing geometries.  A vector context is available on render\r\n * events and does not need to be constructed directly.\r\n * @api\r\n */ class $eb0e5c3938110b4c$var$VectorContext {\n    /**\r\n   * Render a geometry with a custom renderer.\r\n   *\r\n   * @param {import(\"../geom/SimpleGeometry.js\").default} geometry Geometry.\r\n   * @param {import(\"../Feature.js\").FeatureLike} feature Feature.\r\n   * @param {Function} renderer Renderer.\r\n   * @param {Function} hitDetectionRenderer Renderer.\r\n   * @param {number} [index] Render order index.\r\n   */ drawCustom(geometry, feature, renderer, hitDetectionRenderer, index) {}\n    /**\r\n   * Render a geometry.\r\n   *\r\n   * @param {import(\"../geom/Geometry.js\").default} geometry The geometry to render.\r\n   */ drawGeometry(geometry) {}\n    /**\r\n   * Set the rendering style.\r\n   *\r\n   * @param {import(\"../style/Style.js\").default} style The rendering style.\r\n   */ setStyle(style) {}\n    /**\r\n   * @param {import(\"../geom/Circle.js\").default} circleGeometry Circle geometry.\r\n   * @param {import(\"../Feature.js\").default} feature Feature.\r\n   * @param {number} [index] Render order index.\r\n   */ drawCircle(circleGeometry, feature, index) {}\n    /**\r\n   * @param {import(\"../Feature.js\").default} feature Feature.\r\n   * @param {import(\"../style/Style.js\").default} style Style.\r\n   * @param {number} [index] Render order index.\r\n   */ drawFeature(feature, style, index) {}\n    /**\r\n   * @param {import(\"../geom/GeometryCollection.js\").default} geometryCollectionGeometry Geometry collection.\r\n   * @param {import(\"../Feature.js\").default} feature Feature.\r\n   * @param {number} [index] Render order index.\r\n   */ drawGeometryCollection(geometryCollectionGeometry, feature, index) {}\n    /**\r\n   * @param {import(\"../geom/LineString.js\").default|import(\"./Feature.js\").default} lineStringGeometry Line string geometry.\r\n   * @param {import(\"../Feature.js\").FeatureLike} feature Feature.\r\n   * @param {number} [index] Render order index.\r\n   */ drawLineString(lineStringGeometry, feature, index) {}\n    /**\r\n   * @param {import(\"../geom/MultiLineString.js\").default|import(\"./Feature.js\").default} multiLineStringGeometry MultiLineString geometry.\r\n   * @param {import(\"../Feature.js\").FeatureLike} feature Feature.\r\n   * @param {number} [index] Render order index.\r\n   */ drawMultiLineString(multiLineStringGeometry, feature, index) {}\n    /**\r\n   * @param {import(\"../geom/MultiPoint.js\").default|import(\"./Feature.js\").default} multiPointGeometry MultiPoint geometry.\r\n   * @param {import(\"../Feature.js\").FeatureLike} feature Feature.\r\n   * @param {number} [index] Render order index.\r\n   */ drawMultiPoint(multiPointGeometry, feature, index) {}\n    /**\r\n   * @param {import(\"../geom/MultiPolygon.js\").default} multiPolygonGeometry MultiPolygon geometry.\r\n   * @param {import(\"../Feature.js\").FeatureLike} feature Feature.\r\n   * @param {number} [index] Render order index.\r\n   */ drawMultiPolygon(multiPolygonGeometry, feature, index) {}\n    /**\r\n   * @param {import(\"../geom/Point.js\").default|import(\"./Feature.js\").default} pointGeometry Point geometry.\r\n   * @param {import(\"../Feature.js\").FeatureLike} feature Feature.\r\n   * @param {number} [index] Render order index.\r\n   */ drawPoint(pointGeometry, feature, index) {}\n    /**\r\n   * @param {import(\"../geom/Polygon.js\").default|import(\"./Feature.js\").default} polygonGeometry Polygon geometry.\r\n   * @param {import(\"../Feature.js\").FeatureLike} feature Feature.\r\n   * @param {number} [index] Render order index.\r\n   */ drawPolygon(polygonGeometry, feature, index) {}\n    /**\r\n   * @param {import(\"../geom/SimpleGeometry.js\").default|import(\"./Feature.js\").default} geometry Geometry.\r\n   * @param {import(\"../Feature.js\").FeatureLike} feature Feature.\r\n   * @param {number} [index] Render order index.\r\n   */ drawText(geometry, feature, index) {}\n    /**\r\n   * @param {import(\"../style/Fill.js\").default} fillStyle Fill style.\r\n   * @param {import(\"../style/Stroke.js\").default} strokeStyle Stroke style.\r\n   */ setFillStrokeStyle(fillStyle, strokeStyle) {}\n    /**\r\n   * @param {import(\"../style/Image.js\").default} imageStyle Image style.\r\n   * @param {import(\"../render/canvas.js\").DeclutterImageWithText} [declutterImageWithText] Shared data for combined decluttering with a text style.\r\n   */ setImageStyle(imageStyle, declutterImageWithText) {}\n    /**\r\n   * @param {import(\"../style/Text.js\").default} textStyle Text style.\r\n   * @param {import(\"../render/canvas.js\").DeclutterImageWithText} [declutterImageWithText] Shared data for combined decluttering with an image style.\r\n   */ setTextStyle(textStyle, declutterImageWithText) {}\n}\nvar $eb0e5c3938110b4c$export$2e2bcd8739ae039 = $eb0e5c3938110b4c$var$VectorContext;\n\n\n\n/**\r\n * @module ol/render/canvas/Instruction\r\n */ /**\r\n * @enum {number}\r\n */ const $cf547866e052f25b$var$Instruction = {\n    BEGIN_GEOMETRY: 0,\n    BEGIN_PATH: 1,\n    CIRCLE: 2,\n    CLOSE_PATH: 3,\n    CUSTOM: 4,\n    DRAW_CHARS: 5,\n    DRAW_IMAGE: 6,\n    END_GEOMETRY: 7,\n    FILL: 8,\n    MOVE_TO_LINE_TO: 9,\n    SET_FILL_STYLE: 10,\n    SET_STROKE_STYLE: 11,\n    STROKE: 12\n};\nconst $cf547866e052f25b$export$f21891651e408226 = [\n    $cf547866e052f25b$var$Instruction.FILL\n];\nconst $cf547866e052f25b$export$7a98aa5364d62ba8 = [\n    $cf547866e052f25b$var$Instruction.STROKE\n];\nconst $cf547866e052f25b$export$9f746cc58a899a00 = [\n    $cf547866e052f25b$var$Instruction.BEGIN_PATH\n];\nconst $cf547866e052f25b$export$89b10f327e413e71 = [\n    $cf547866e052f25b$var$Instruction.CLOSE_PATH\n];\nvar $cf547866e052f25b$export$2e2bcd8739ae039 = $cf547866e052f25b$var$Instruction;\n\n\nclass $2bb20f8873deb436$var$CanvasBuilder extends (0, $eb0e5c3938110b4c$export$2e2bcd8739ae039) {\n    /**\r\n   * @param {number} tolerance Tolerance.\r\n   * @param {import(\"../../extent.js\").Extent} maxExtent Maximum extent.\r\n   * @param {number} resolution Resolution.\r\n   * @param {number} pixelRatio Pixel ratio.\r\n   */ constructor(tolerance, maxExtent, resolution, pixelRatio){\n        super();\n        /**\r\n     * @protected\r\n     * @type {number}\r\n     */ this.tolerance = tolerance;\n        /**\r\n     * @protected\r\n     * @const\r\n     * @type {import(\"../../extent.js\").Extent}\r\n     */ this.maxExtent = maxExtent;\n        /**\r\n     * @protected\r\n     * @type {number}\r\n     */ this.pixelRatio = pixelRatio;\n        /**\r\n     * @protected\r\n     * @type {number}\r\n     */ this.maxLineWidth = 0;\n        /**\r\n     * @protected\r\n     * @const\r\n     * @type {number}\r\n     */ this.resolution = resolution;\n        /**\r\n     * @private\r\n     * @type {Array<*>}\r\n     */ this.beginGeometryInstruction1_ = null;\n        /**\r\n     * @private\r\n     * @type {Array<*>}\r\n     */ this.beginGeometryInstruction2_ = null;\n        /**\r\n     * @private\r\n     * @type {import(\"../../extent.js\").Extent}\r\n     */ this.bufferedMaxExtent_ = null;\n        /**\r\n     * @protected\r\n     * @type {Array<*>}\r\n     */ this.instructions = [];\n        /**\r\n     * @protected\r\n     * @type {Array<number>}\r\n     */ this.coordinates = [];\n        /**\r\n     * @private\r\n     * @type {import(\"../../coordinate.js\").Coordinate}\r\n     */ this.tmpCoordinate_ = [];\n        /**\r\n     * @protected\r\n     * @type {Array<*>}\r\n     */ this.hitDetectionInstructions = [];\n        /**\r\n     * @protected\r\n     * @type {import(\"../canvas.js\").FillStrokeState}\r\n     */ this.state = /** @type {import(\"../canvas.js\").FillStrokeState} */ {};\n    }\n    /**\r\n   * @protected\r\n   * @param {Array<number>} dashArray Dash array.\r\n   * @return {Array<number>} Dash array with pixel ratio applied\r\n   */ applyPixelRatio(dashArray) {\n        const pixelRatio = this.pixelRatio;\n        return pixelRatio == 1 ? dashArray : dashArray.map(function(dash) {\n            return dash * pixelRatio;\n        });\n    }\n    /**\r\n   * @param {Array<number>} flatCoordinates Flat coordinates.\r\n   * @param {number} stride Stride.\r\n   * @protected\r\n   * @return {number} My end\r\n   */ appendFlatPointCoordinates(flatCoordinates, stride) {\n        const extent = this.getBufferedMaxExtent();\n        const tmpCoord = this.tmpCoordinate_;\n        const coordinates = this.coordinates;\n        let myEnd = coordinates.length;\n        for(let i = 0, ii = flatCoordinates.length; i < ii; i += stride){\n            tmpCoord[0] = flatCoordinates[i];\n            tmpCoord[1] = flatCoordinates[i + 1];\n            if ((0, $6da4c8ed3074c92b$export$ac68c24d37ca240f)(extent, tmpCoord)) {\n                coordinates[myEnd++] = tmpCoord[0];\n                coordinates[myEnd++] = tmpCoord[1];\n            }\n        }\n        return myEnd;\n    }\n    /**\r\n   * @param {Array<number>} flatCoordinates Flat coordinates.\r\n   * @param {number} offset Offset.\r\n   * @param {number} end End.\r\n   * @param {number} stride Stride.\r\n   * @param {boolean} closed Last input coordinate equals first.\r\n   * @param {boolean} skipFirst Skip first coordinate.\r\n   * @protected\r\n   * @return {number} My end.\r\n   */ appendFlatLineCoordinates(flatCoordinates, offset, end, stride, closed, skipFirst) {\n        const coordinates = this.coordinates;\n        let myEnd = coordinates.length;\n        const extent = this.getBufferedMaxExtent();\n        if (skipFirst) offset += stride;\n        let lastXCoord = flatCoordinates[offset];\n        let lastYCoord = flatCoordinates[offset + 1];\n        const nextCoord = this.tmpCoordinate_;\n        let skipped = true;\n        let i, lastRel, nextRel;\n        for(i = offset + stride; i < end; i += stride){\n            nextCoord[0] = flatCoordinates[i];\n            nextCoord[1] = flatCoordinates[i + 1];\n            nextRel = (0, $6da4c8ed3074c92b$export$f97905ead28c61a8)(extent, nextCoord);\n            if (nextRel !== lastRel) {\n                if (skipped) {\n                    coordinates[myEnd++] = lastXCoord;\n                    coordinates[myEnd++] = lastYCoord;\n                    skipped = false;\n                }\n                coordinates[myEnd++] = nextCoord[0];\n                coordinates[myEnd++] = nextCoord[1];\n            } else if (nextRel === (0, $dab4245bc22b806c$export$2e2bcd8739ae039).INTERSECTING) {\n                coordinates[myEnd++] = nextCoord[0];\n                coordinates[myEnd++] = nextCoord[1];\n                skipped = false;\n            } else skipped = true;\n            lastXCoord = nextCoord[0];\n            lastYCoord = nextCoord[1];\n            lastRel = nextRel;\n        }\n        // Last coordinate equals first or only one point to append:\n        if (closed && skipped || i === offset + stride) {\n            coordinates[myEnd++] = lastXCoord;\n            coordinates[myEnd++] = lastYCoord;\n        }\n        return myEnd;\n    }\n    /**\r\n   * @param {Array<number>} flatCoordinates Flat coordinates.\r\n   * @param {number} offset Offset.\r\n   * @param {Array<number>} ends Ends.\r\n   * @param {number} stride Stride.\r\n   * @param {Array<number>} builderEnds Builder ends.\r\n   * @return {number} Offset.\r\n   */ drawCustomCoordinates_(flatCoordinates, offset, ends, stride, builderEnds) {\n        for(let i = 0, ii = ends.length; i < ii; ++i){\n            const end = ends[i];\n            const builderEnd = this.appendFlatLineCoordinates(flatCoordinates, offset, end, stride, false, false);\n            builderEnds.push(builderEnd);\n            offset = end;\n        }\n        return offset;\n    }\n    /**\r\n   * @param {import(\"../../geom/SimpleGeometry.js\").default} geometry Geometry.\r\n   * @param {import(\"../../Feature.js\").FeatureLike} feature Feature.\r\n   * @param {Function} renderer Renderer.\r\n   * @param {Function} hitDetectionRenderer Renderer.\r\n   * @param {number} [index] Render order index.\r\n   * @override\r\n   */ drawCustom(geometry, feature, renderer, hitDetectionRenderer, index) {\n        this.beginGeometry(geometry, feature, index);\n        const type = geometry.getType();\n        const stride = geometry.getStride();\n        const builderBegin = this.coordinates.length;\n        let flatCoordinates, builderEnd, builderEnds, builderEndss;\n        let offset;\n        switch(type){\n            case 'MultiPolygon':\n                flatCoordinates = /** @type {import(\"../../geom/MultiPolygon.js\").default} */ geometry.getOrientedFlatCoordinates();\n                builderEndss = [];\n                const endss = /** @type {import(\"../../geom/MultiPolygon.js\").default} */ geometry.getEndss();\n                offset = 0;\n                for(let i = 0, ii = endss.length; i < ii; ++i){\n                    const myEnds = [];\n                    offset = this.drawCustomCoordinates_(flatCoordinates, offset, endss[i], stride, myEnds);\n                    builderEndss.push(myEnds);\n                }\n                this.instructions.push([\n                    (0, $cf547866e052f25b$export$2e2bcd8739ae039).CUSTOM,\n                    builderBegin,\n                    builderEndss,\n                    geometry,\n                    renderer,\n                    (0, $5454470599558ddd$export$915c7058aeb4dfeb),\n                    index\n                ]);\n                this.hitDetectionInstructions.push([\n                    (0, $cf547866e052f25b$export$2e2bcd8739ae039).CUSTOM,\n                    builderBegin,\n                    builderEndss,\n                    geometry,\n                    hitDetectionRenderer || renderer,\n                    (0, $5454470599558ddd$export$915c7058aeb4dfeb),\n                    index\n                ]);\n                break;\n            case 'Polygon':\n            case 'MultiLineString':\n                builderEnds = [];\n                flatCoordinates = type == 'Polygon' ? /** @type {import(\"../../geom/Polygon.js\").default} */ geometry.getOrientedFlatCoordinates() : geometry.getFlatCoordinates();\n                offset = this.drawCustomCoordinates_(flatCoordinates, 0, /** @type {import(\"../../geom/Polygon.js\").default|import(\"../../geom/MultiLineString.js\").default} */ geometry.getEnds(), stride, builderEnds);\n                this.instructions.push([\n                    (0, $cf547866e052f25b$export$2e2bcd8739ae039).CUSTOM,\n                    builderBegin,\n                    builderEnds,\n                    geometry,\n                    renderer,\n                    (0, $5454470599558ddd$export$cbb9596fc0f40db2),\n                    index\n                ]);\n                this.hitDetectionInstructions.push([\n                    (0, $cf547866e052f25b$export$2e2bcd8739ae039).CUSTOM,\n                    builderBegin,\n                    builderEnds,\n                    geometry,\n                    hitDetectionRenderer || renderer,\n                    (0, $5454470599558ddd$export$cbb9596fc0f40db2),\n                    index\n                ]);\n                break;\n            case 'LineString':\n            case 'Circle':\n                flatCoordinates = geometry.getFlatCoordinates();\n                builderEnd = this.appendFlatLineCoordinates(flatCoordinates, 0, flatCoordinates.length, stride, false, false);\n                this.instructions.push([\n                    (0, $cf547866e052f25b$export$2e2bcd8739ae039).CUSTOM,\n                    builderBegin,\n                    builderEnd,\n                    geometry,\n                    renderer,\n                    (0, $5454470599558ddd$export$9c0934e4e9c3f61e),\n                    index\n                ]);\n                this.hitDetectionInstructions.push([\n                    (0, $cf547866e052f25b$export$2e2bcd8739ae039).CUSTOM,\n                    builderBegin,\n                    builderEnd,\n                    geometry,\n                    hitDetectionRenderer || renderer,\n                    (0, $5454470599558ddd$export$9c0934e4e9c3f61e),\n                    index\n                ]);\n                break;\n            case 'MultiPoint':\n                flatCoordinates = geometry.getFlatCoordinates();\n                builderEnd = this.appendFlatPointCoordinates(flatCoordinates, stride);\n                if (builderEnd > builderBegin) {\n                    this.instructions.push([\n                        (0, $cf547866e052f25b$export$2e2bcd8739ae039).CUSTOM,\n                        builderBegin,\n                        builderEnd,\n                        geometry,\n                        renderer,\n                        (0, $5454470599558ddd$export$9c0934e4e9c3f61e),\n                        index\n                    ]);\n                    this.hitDetectionInstructions.push([\n                        (0, $cf547866e052f25b$export$2e2bcd8739ae039).CUSTOM,\n                        builderBegin,\n                        builderEnd,\n                        geometry,\n                        hitDetectionRenderer || renderer,\n                        (0, $5454470599558ddd$export$9c0934e4e9c3f61e),\n                        index\n                    ]);\n                }\n                break;\n            case 'Point':\n                flatCoordinates = geometry.getFlatCoordinates();\n                this.coordinates.push(flatCoordinates[0], flatCoordinates[1]);\n                builderEnd = this.coordinates.length;\n                this.instructions.push([\n                    (0, $cf547866e052f25b$export$2e2bcd8739ae039).CUSTOM,\n                    builderBegin,\n                    builderEnd,\n                    geometry,\n                    renderer,\n                    undefined,\n                    index\n                ]);\n                this.hitDetectionInstructions.push([\n                    (0, $cf547866e052f25b$export$2e2bcd8739ae039).CUSTOM,\n                    builderBegin,\n                    builderEnd,\n                    geometry,\n                    hitDetectionRenderer || renderer,\n                    undefined,\n                    index\n                ]);\n                break;\n            default:\n        }\n        this.endGeometry(feature);\n    }\n    /**\r\n   * @protected\r\n   * @param {import(\"../../geom/Geometry\").default|import(\"../Feature.js\").default} geometry The geometry.\r\n   * @param {import(\"../../Feature.js\").FeatureLike} feature Feature.\r\n   * @param {number} index Render order index\r\n   */ beginGeometry(geometry, feature, index) {\n        this.beginGeometryInstruction1_ = [\n            (0, $cf547866e052f25b$export$2e2bcd8739ae039).BEGIN_GEOMETRY,\n            feature,\n            0,\n            geometry,\n            index\n        ];\n        this.instructions.push(this.beginGeometryInstruction1_);\n        this.beginGeometryInstruction2_ = [\n            (0, $cf547866e052f25b$export$2e2bcd8739ae039).BEGIN_GEOMETRY,\n            feature,\n            0,\n            geometry,\n            index\n        ];\n        this.hitDetectionInstructions.push(this.beginGeometryInstruction2_);\n    }\n    /**\r\n   * @return {import(\"../canvas.js\").SerializableInstructions} the serializable instructions.\r\n   */ finish() {\n        return {\n            instructions: this.instructions,\n            hitDetectionInstructions: this.hitDetectionInstructions,\n            coordinates: this.coordinates\n        };\n    }\n    /**\r\n   * Reverse the hit detection instructions.\r\n   */ reverseHitDetectionInstructions() {\n        const hitDetectionInstructions = this.hitDetectionInstructions;\n        // step 1 - reverse array\n        hitDetectionInstructions.reverse();\n        // step 2 - reverse instructions within geometry blocks\n        let i;\n        const n = hitDetectionInstructions.length;\n        let instruction;\n        let type;\n        let begin = -1;\n        for(i = 0; i < n; ++i){\n            instruction = hitDetectionInstructions[i];\n            type = /** @type {import(\"./Instruction.js\").default} */ instruction[0];\n            if (type == (0, $cf547866e052f25b$export$2e2bcd8739ae039).END_GEOMETRY) begin = i;\n            else if (type == (0, $cf547866e052f25b$export$2e2bcd8739ae039).BEGIN_GEOMETRY) {\n                instruction[2] = i;\n                (0, $b998d41b678ed5d1$export$292cfa960964f0e0)(this.hitDetectionInstructions, begin, i);\n                begin = -1;\n            }\n        }\n    }\n    /**\r\n   * @param {import(\"../../style/Fill.js\").default} fillStyle Fill style.\r\n   * @param {import('../canvas.js').FillStrokeState} [state] State.\r\n   * @return {import('../canvas.js').FillStrokeState} State.\r\n   */ fillStyleToState(fillStyle, state = /** @type {import('../canvas.js').FillStrokeState} */ {}) {\n        if (fillStyle) {\n            const fillStyleColor = fillStyle.getColor();\n            state.fillPatternScale = fillStyleColor && typeof fillStyleColor === 'object' && 'src' in fillStyleColor ? this.pixelRatio : 1;\n            state.fillStyle = (0, $e0807f400ec9a0a9$export$dc5b1400ac3a10a8)(fillStyleColor ? fillStyleColor : (0, $d4aabc5c971073f1$export$c495d52ee3fd74b2));\n        } else state.fillStyle = undefined;\n        return state;\n    }\n    /**\r\n   * @param {import(\"../../style/Stroke.js\").default} strokeStyle Stroke style.\r\n   * @param {import(\"../canvas.js\").FillStrokeState} state State.\r\n   * @return {import(\"../canvas.js\").FillStrokeState} State.\r\n   */ strokeStyleToState(strokeStyle, state = /** @type {import('../canvas.js').FillStrokeState} */ {}) {\n        if (strokeStyle) {\n            const strokeStyleColor = strokeStyle.getColor();\n            state.strokeStyle = (0, $e0807f400ec9a0a9$export$dc5b1400ac3a10a8)(strokeStyleColor ? strokeStyleColor : (0, $d4aabc5c971073f1$export$1eb2eaecacf2031e));\n            const strokeStyleLineCap = strokeStyle.getLineCap();\n            state.lineCap = strokeStyleLineCap !== undefined ? strokeStyleLineCap : (0, $d4aabc5c971073f1$export$17bd0c38d6ae694e);\n            const strokeStyleLineDash = strokeStyle.getLineDash();\n            state.lineDash = strokeStyleLineDash ? strokeStyleLineDash.slice() : (0, $d4aabc5c971073f1$export$e21b4112fdc612fc);\n            const strokeStyleLineDashOffset = strokeStyle.getLineDashOffset();\n            state.lineDashOffset = strokeStyleLineDashOffset ? strokeStyleLineDashOffset : (0, $d4aabc5c971073f1$export$e06efc2409049f76);\n            const strokeStyleLineJoin = strokeStyle.getLineJoin();\n            state.lineJoin = strokeStyleLineJoin !== undefined ? strokeStyleLineJoin : (0, $d4aabc5c971073f1$export$365eb9648cf19bd0);\n            const strokeStyleWidth = strokeStyle.getWidth();\n            state.lineWidth = strokeStyleWidth !== undefined ? strokeStyleWidth : (0, $d4aabc5c971073f1$export$79661f132c62010e);\n            const strokeStyleMiterLimit = strokeStyle.getMiterLimit();\n            state.miterLimit = strokeStyleMiterLimit !== undefined ? strokeStyleMiterLimit : (0, $d4aabc5c971073f1$export$80c1c01844597b7b);\n            if (state.lineWidth > this.maxLineWidth) {\n                this.maxLineWidth = state.lineWidth;\n                // invalidate the buffered max extent cache\n                this.bufferedMaxExtent_ = null;\n            }\n        } else {\n            state.strokeStyle = undefined;\n            state.lineCap = undefined;\n            state.lineDash = null;\n            state.lineDashOffset = undefined;\n            state.lineJoin = undefined;\n            state.lineWidth = undefined;\n            state.miterLimit = undefined;\n        }\n        return state;\n    }\n    /**\r\n   * @param {import(\"../../style/Fill.js\").default} fillStyle Fill style.\r\n   * @param {import(\"../../style/Stroke.js\").default} strokeStyle Stroke style.\r\n   * @override\r\n   */ setFillStrokeStyle(fillStyle, strokeStyle) {\n        const state = this.state;\n        this.fillStyleToState(fillStyle, state);\n        this.strokeStyleToState(strokeStyle, state);\n    }\n    /**\r\n   * @param {import(\"../canvas.js\").FillStrokeState} state State.\r\n   * @return {Array<*>} Fill instruction.\r\n   */ createFill(state) {\n        const fillStyle = state.fillStyle;\n        /** @type {Array<*>} */ const fillInstruction = [\n            (0, $cf547866e052f25b$export$2e2bcd8739ae039).SET_FILL_STYLE,\n            fillStyle\n        ];\n        if (typeof fillStyle !== 'string') // Fill is a pattern or gradient - align and scale it!\n        fillInstruction.push(state.fillPatternScale);\n        return fillInstruction;\n    }\n    /**\r\n   * @param {import(\"../canvas.js\").FillStrokeState} state State.\r\n   */ applyStroke(state) {\n        this.instructions.push(this.createStroke(state));\n    }\n    /**\r\n   * @param {import(\"../canvas.js\").FillStrokeState} state State.\r\n   * @return {Array<*>} Stroke instruction.\r\n   */ createStroke(state) {\n        return [\n            (0, $cf547866e052f25b$export$2e2bcd8739ae039).SET_STROKE_STYLE,\n            state.strokeStyle,\n            state.lineWidth * this.pixelRatio,\n            state.lineCap,\n            state.lineJoin,\n            state.miterLimit,\n            state.lineDash ? this.applyPixelRatio(state.lineDash) : null,\n            state.lineDashOffset * this.pixelRatio\n        ];\n    }\n    /**\r\n   * @param {import(\"../canvas.js\").FillStrokeState} state State.\r\n   * @param {function(this:CanvasBuilder, import(\"../canvas.js\").FillStrokeState):Array<*>} createFill Create fill.\r\n   */ updateFillStyle(state, createFill) {\n        const fillStyle = state.fillStyle;\n        if (typeof fillStyle !== 'string' || state.currentFillStyle != fillStyle) {\n            if (fillStyle !== undefined) this.instructions.push(createFill.call(this, state));\n            state.currentFillStyle = fillStyle;\n        }\n    }\n    /**\r\n   * @param {import(\"../canvas.js\").FillStrokeState} state State.\r\n   * @param {function(this:CanvasBuilder, import(\"../canvas.js\").FillStrokeState): void} applyStroke Apply stroke.\r\n   */ updateStrokeStyle(state, applyStroke) {\n        const strokeStyle = state.strokeStyle;\n        const lineCap = state.lineCap;\n        const lineDash = state.lineDash;\n        const lineDashOffset = state.lineDashOffset;\n        const lineJoin = state.lineJoin;\n        const lineWidth = state.lineWidth;\n        const miterLimit = state.miterLimit;\n        if (state.currentStrokeStyle != strokeStyle || state.currentLineCap != lineCap || lineDash != state.currentLineDash && !(0, $b998d41b678ed5d1$export$e9bab7fafb253603)(state.currentLineDash, lineDash) || state.currentLineDashOffset != lineDashOffset || state.currentLineJoin != lineJoin || state.currentLineWidth != lineWidth || state.currentMiterLimit != miterLimit) {\n            if (strokeStyle !== undefined) applyStroke.call(this, state);\n            state.currentStrokeStyle = strokeStyle;\n            state.currentLineCap = lineCap;\n            state.currentLineDash = lineDash;\n            state.currentLineDashOffset = lineDashOffset;\n            state.currentLineJoin = lineJoin;\n            state.currentLineWidth = lineWidth;\n            state.currentMiterLimit = miterLimit;\n        }\n    }\n    /**\r\n   * @param {import(\"../../Feature.js\").FeatureLike} feature Feature.\r\n   */ endGeometry(feature) {\n        this.beginGeometryInstruction1_[2] = this.instructions.length;\n        this.beginGeometryInstruction1_ = null;\n        this.beginGeometryInstruction2_[2] = this.hitDetectionInstructions.length;\n        this.beginGeometryInstruction2_ = null;\n        const endGeometryInstruction = [\n            (0, $cf547866e052f25b$export$2e2bcd8739ae039).END_GEOMETRY,\n            feature\n        ];\n        this.instructions.push(endGeometryInstruction);\n        this.hitDetectionInstructions.push(endGeometryInstruction);\n    }\n    /**\r\n   * Get the buffered rendering extent.  Rendering will be clipped to the extent\r\n   * provided to the constructor.  To account for symbolizers that may intersect\r\n   * this extent, we calculate a buffered extent (e.g. based on stroke width).\r\n   * @return {import(\"../../extent.js\").Extent} The buffered rendering extent.\r\n   * @protected\r\n   */ getBufferedMaxExtent() {\n        if (!this.bufferedMaxExtent_) {\n            this.bufferedMaxExtent_ = (0, $6da4c8ed3074c92b$export$9cd59f9826255e47)(this.maxExtent);\n            if (this.maxLineWidth > 0) {\n                const width = this.resolution * (this.maxLineWidth + 1) / 2;\n                (0, $6da4c8ed3074c92b$export$ab1029bcae9ddb4a)(this.bufferedMaxExtent_, width, this.bufferedMaxExtent_);\n            }\n        }\n        return this.bufferedMaxExtent_;\n    }\n}\nvar $2bb20f8873deb436$export$2e2bcd8739ae039 = $2bb20f8873deb436$var$CanvasBuilder;\n\n\n/**\r\n * @module ol/render/canvas/ImageBuilder\r\n */ \n\n\nclass $b652f9dd73b29cfe$var$CanvasImageBuilder extends (0, $2bb20f8873deb436$export$2e2bcd8739ae039) {\n    /**\r\n   * @param {number} tolerance Tolerance.\r\n   * @param {import(\"../../extent.js\").Extent} maxExtent Maximum extent.\r\n   * @param {number} resolution Resolution.\r\n   * @param {number} pixelRatio Pixel ratio.\r\n   */ constructor(tolerance, maxExtent, resolution, pixelRatio){\n        super(tolerance, maxExtent, resolution, pixelRatio);\n        /**\r\n     * @private\r\n     * @type {import('../../DataTile.js').ImageLike}\r\n     */ this.hitDetectionImage_ = null;\n        /**\r\n     * @private\r\n     * @type {import('../../DataTile.js').ImageLike}\r\n     */ this.image_ = null;\n        /**\r\n     * @private\r\n     * @type {number|undefined}\r\n     */ this.imagePixelRatio_ = undefined;\n        /**\r\n     * @private\r\n     * @type {number|undefined}\r\n     */ this.anchorX_ = undefined;\n        /**\r\n     * @private\r\n     * @type {number|undefined}\r\n     */ this.anchorY_ = undefined;\n        /**\r\n     * @private\r\n     * @type {number|undefined}\r\n     */ this.height_ = undefined;\n        /**\r\n     * @private\r\n     * @type {number|undefined}\r\n     */ this.opacity_ = undefined;\n        /**\r\n     * @private\r\n     * @type {number|undefined}\r\n     */ this.originX_ = undefined;\n        /**\r\n     * @private\r\n     * @type {number|undefined}\r\n     */ this.originY_ = undefined;\n        /**\r\n     * @private\r\n     * @type {boolean|undefined}\r\n     */ this.rotateWithView_ = undefined;\n        /**\r\n     * @private\r\n     * @type {number|undefined}\r\n     */ this.rotation_ = undefined;\n        /**\r\n     * @private\r\n     * @type {import(\"../../size.js\").Size|undefined}\r\n     */ this.scale_ = undefined;\n        /**\r\n     * @private\r\n     * @type {number|undefined}\r\n     */ this.width_ = undefined;\n        /**\r\n     * @private\r\n     * @type {import('../../style/Style.js').DeclutterMode}\r\n     */ this.declutterMode_ = undefined;\n        /**\r\n     * Data shared with a text builder for combined decluttering.\r\n     * @private\r\n     * @type {import(\"../canvas.js\").DeclutterImageWithText}\r\n     */ this.declutterImageWithText_ = undefined;\n    }\n    /**\r\n   * @param {import(\"../../geom/Point.js\").default|import(\"../Feature.js\").default} pointGeometry Point geometry.\r\n   * @param {import(\"../../Feature.js\").FeatureLike} feature Feature.\r\n   * @param {number} [index] Render order index.\r\n   * @override\r\n   */ drawPoint(pointGeometry, feature, index) {\n        if (!this.image_ || this.maxExtent && !(0, $6da4c8ed3074c92b$export$ac68c24d37ca240f)(this.maxExtent, pointGeometry.getFlatCoordinates())) return;\n        this.beginGeometry(pointGeometry, feature, index);\n        const flatCoordinates = pointGeometry.getFlatCoordinates();\n        const stride = pointGeometry.getStride();\n        const myBegin = this.coordinates.length;\n        const myEnd = this.appendFlatPointCoordinates(flatCoordinates, stride);\n        this.instructions.push([\n            (0, $cf547866e052f25b$export$2e2bcd8739ae039).DRAW_IMAGE,\n            myBegin,\n            myEnd,\n            this.image_,\n            // Remaining arguments to DRAW_IMAGE are in alphabetical order\n            this.anchorX_ * this.imagePixelRatio_,\n            this.anchorY_ * this.imagePixelRatio_,\n            Math.ceil(this.height_ * this.imagePixelRatio_),\n            this.opacity_,\n            this.originX_ * this.imagePixelRatio_,\n            this.originY_ * this.imagePixelRatio_,\n            this.rotateWithView_,\n            this.rotation_,\n            [\n                this.scale_[0] * this.pixelRatio / this.imagePixelRatio_,\n                this.scale_[1] * this.pixelRatio / this.imagePixelRatio_\n            ],\n            Math.ceil(this.width_ * this.imagePixelRatio_),\n            this.declutterMode_,\n            this.declutterImageWithText_\n        ]);\n        this.hitDetectionInstructions.push([\n            (0, $cf547866e052f25b$export$2e2bcd8739ae039).DRAW_IMAGE,\n            myBegin,\n            myEnd,\n            this.hitDetectionImage_,\n            // Remaining arguments to DRAW_IMAGE are in alphabetical order\n            this.anchorX_,\n            this.anchorY_,\n            this.height_,\n            1,\n            this.originX_,\n            this.originY_,\n            this.rotateWithView_,\n            this.rotation_,\n            this.scale_,\n            this.width_,\n            this.declutterMode_,\n            this.declutterImageWithText_\n        ]);\n        this.endGeometry(feature);\n    }\n    /**\r\n   * @param {import(\"../../geom/MultiPoint.js\").default|import(\"../Feature.js\").default} multiPointGeometry MultiPoint geometry.\r\n   * @param {import(\"../../Feature.js\").FeatureLike} feature Feature.\r\n   * @param {number} [index] Render order index.\r\n   * @override\r\n   */ drawMultiPoint(multiPointGeometry, feature, index) {\n        if (!this.image_) return;\n        this.beginGeometry(multiPointGeometry, feature, index);\n        const flatCoordinates = multiPointGeometry.getFlatCoordinates();\n        const filteredFlatCoordinates = [];\n        for(let i = 0, ii = flatCoordinates.length; i < ii; i += multiPointGeometry.getStride())if (!this.maxExtent || (0, $6da4c8ed3074c92b$export$ac68c24d37ca240f)(this.maxExtent, flatCoordinates.slice(i, i + 2))) filteredFlatCoordinates.push(flatCoordinates[i], flatCoordinates[i + 1]);\n        const myBegin = this.coordinates.length;\n        const myEnd = this.appendFlatPointCoordinates(filteredFlatCoordinates, 2);\n        this.instructions.push([\n            (0, $cf547866e052f25b$export$2e2bcd8739ae039).DRAW_IMAGE,\n            myBegin,\n            myEnd,\n            this.image_,\n            // Remaining arguments to DRAW_IMAGE are in alphabetical order\n            this.anchorX_ * this.imagePixelRatio_,\n            this.anchorY_ * this.imagePixelRatio_,\n            Math.ceil(this.height_ * this.imagePixelRatio_),\n            this.opacity_,\n            this.originX_ * this.imagePixelRatio_,\n            this.originY_ * this.imagePixelRatio_,\n            this.rotateWithView_,\n            this.rotation_,\n            [\n                this.scale_[0] * this.pixelRatio / this.imagePixelRatio_,\n                this.scale_[1] * this.pixelRatio / this.imagePixelRatio_\n            ],\n            Math.ceil(this.width_ * this.imagePixelRatio_),\n            this.declutterMode_,\n            this.declutterImageWithText_\n        ]);\n        this.hitDetectionInstructions.push([\n            (0, $cf547866e052f25b$export$2e2bcd8739ae039).DRAW_IMAGE,\n            myBegin,\n            myEnd,\n            this.hitDetectionImage_,\n            // Remaining arguments to DRAW_IMAGE are in alphabetical order\n            this.anchorX_,\n            this.anchorY_,\n            this.height_,\n            1,\n            this.originX_,\n            this.originY_,\n            this.rotateWithView_,\n            this.rotation_,\n            this.scale_,\n            this.width_,\n            this.declutterMode_,\n            this.declutterImageWithText_\n        ]);\n        this.endGeometry(feature);\n    }\n    /**\r\n   * @return {import(\"../canvas.js\").SerializableInstructions} the serializable instructions.\r\n   * @override\r\n   */ finish() {\n        this.reverseHitDetectionInstructions();\n        // FIXME this doesn't really protect us against further calls to draw*Geometry\n        this.anchorX_ = undefined;\n        this.anchorY_ = undefined;\n        this.hitDetectionImage_ = null;\n        this.image_ = null;\n        this.imagePixelRatio_ = undefined;\n        this.height_ = undefined;\n        this.scale_ = undefined;\n        this.opacity_ = undefined;\n        this.originX_ = undefined;\n        this.originY_ = undefined;\n        this.rotateWithView_ = undefined;\n        this.rotation_ = undefined;\n        this.width_ = undefined;\n        return super.finish();\n    }\n    /**\r\n   * @param {import(\"../../style/Image.js\").default} imageStyle Image style.\r\n   * @param {Object} [sharedData] Shared data.\r\n   * @override\r\n   */ setImageStyle(imageStyle, sharedData) {\n        const anchor = imageStyle.getAnchor();\n        const size = imageStyle.getSize();\n        const origin = imageStyle.getOrigin();\n        this.imagePixelRatio_ = imageStyle.getPixelRatio(this.pixelRatio);\n        this.anchorX_ = anchor[0];\n        this.anchorY_ = anchor[1];\n        this.hitDetectionImage_ = imageStyle.getHitDetectionImage();\n        this.image_ = imageStyle.getImage(this.pixelRatio);\n        this.height_ = size[1];\n        this.opacity_ = imageStyle.getOpacity();\n        this.originX_ = origin[0];\n        this.originY_ = origin[1];\n        this.rotateWithView_ = imageStyle.getRotateWithView();\n        this.rotation_ = imageStyle.getRotation();\n        this.scale_ = imageStyle.getScaleArray();\n        this.width_ = size[0];\n        this.declutterMode_ = imageStyle.getDeclutterMode();\n        this.declutterImageWithText_ = sharedData;\n    }\n}\nvar $b652f9dd73b29cfe$export$2e2bcd8739ae039 = $b652f9dd73b29cfe$var$CanvasImageBuilder;\n\n\n/**\r\n * @module ol/render/canvas/LineStringBuilder\r\n */ \n\n\nclass $a207f23baa5aa2c5$var$CanvasLineStringBuilder extends (0, $2bb20f8873deb436$export$2e2bcd8739ae039) {\n    /**\r\n   * @param {number} tolerance Tolerance.\r\n   * @param {import(\"../../extent.js\").Extent} maxExtent Maximum extent.\r\n   * @param {number} resolution Resolution.\r\n   * @param {number} pixelRatio Pixel ratio.\r\n   */ constructor(tolerance, maxExtent, resolution, pixelRatio){\n        super(tolerance, maxExtent, resolution, pixelRatio);\n    }\n    /**\r\n   * @param {Array<number>} flatCoordinates Flat coordinates.\r\n   * @param {number} offset Offset.\r\n   * @param {number} end End.\r\n   * @param {number} stride Stride.\r\n   * @private\r\n   * @return {number} end.\r\n   */ drawFlatCoordinates_(flatCoordinates, offset, end, stride) {\n        const myBegin = this.coordinates.length;\n        const myEnd = this.appendFlatLineCoordinates(flatCoordinates, offset, end, stride, false, false);\n        const moveToLineToInstruction = [\n            (0, $cf547866e052f25b$export$2e2bcd8739ae039).MOVE_TO_LINE_TO,\n            myBegin,\n            myEnd\n        ];\n        this.instructions.push(moveToLineToInstruction);\n        this.hitDetectionInstructions.push(moveToLineToInstruction);\n        return end;\n    }\n    /**\r\n   * @param {import(\"../../geom/LineString.js\").default|import(\"../Feature.js\").default} lineStringGeometry Line string geometry.\r\n   * @param {import(\"../../Feature.js\").FeatureLike} feature Feature.\r\n   * @param {number} [index] Render order index.\r\n   * @override\r\n   */ drawLineString(lineStringGeometry, feature, index) {\n        const state = this.state;\n        const strokeStyle = state.strokeStyle;\n        const lineWidth = state.lineWidth;\n        if (strokeStyle === undefined || lineWidth === undefined) return;\n        this.updateStrokeStyle(state, this.applyStroke);\n        this.beginGeometry(lineStringGeometry, feature, index);\n        this.hitDetectionInstructions.push([\n            (0, $cf547866e052f25b$export$2e2bcd8739ae039).SET_STROKE_STYLE,\n            state.strokeStyle,\n            state.lineWidth,\n            state.lineCap,\n            state.lineJoin,\n            state.miterLimit,\n            (0, $d4aabc5c971073f1$export$e21b4112fdc612fc),\n            (0, $d4aabc5c971073f1$export$e06efc2409049f76)\n        ], (0, $cf547866e052f25b$export$9f746cc58a899a00));\n        const flatCoordinates = lineStringGeometry.getFlatCoordinates();\n        const stride = lineStringGeometry.getStride();\n        this.drawFlatCoordinates_(flatCoordinates, 0, flatCoordinates.length, stride);\n        this.hitDetectionInstructions.push((0, $cf547866e052f25b$export$7a98aa5364d62ba8));\n        this.endGeometry(feature);\n    }\n    /**\r\n   * @param {import(\"../../geom/MultiLineString.js\").default|import(\"../Feature.js\").default} multiLineStringGeometry MultiLineString geometry.\r\n   * @param {import(\"../../Feature.js\").FeatureLike} feature Feature.\r\n   * @param {number} [index] Render order index.\r\n   * @override\r\n   */ drawMultiLineString(multiLineStringGeometry, feature, index) {\n        const state = this.state;\n        const strokeStyle = state.strokeStyle;\n        const lineWidth = state.lineWidth;\n        if (strokeStyle === undefined || lineWidth === undefined) return;\n        this.updateStrokeStyle(state, this.applyStroke);\n        this.beginGeometry(multiLineStringGeometry, feature, index);\n        this.hitDetectionInstructions.push([\n            (0, $cf547866e052f25b$export$2e2bcd8739ae039).SET_STROKE_STYLE,\n            state.strokeStyle,\n            state.lineWidth,\n            state.lineCap,\n            state.lineJoin,\n            state.miterLimit,\n            (0, $d4aabc5c971073f1$export$e21b4112fdc612fc),\n            (0, $d4aabc5c971073f1$export$e06efc2409049f76)\n        ], (0, $cf547866e052f25b$export$9f746cc58a899a00));\n        const ends = multiLineStringGeometry.getEnds();\n        const flatCoordinates = multiLineStringGeometry.getFlatCoordinates();\n        const stride = multiLineStringGeometry.getStride();\n        let offset = 0;\n        for(let i = 0, ii = ends.length; i < ii; ++i)offset = this.drawFlatCoordinates_(flatCoordinates, offset, /** @type {number} */ ends[i], stride);\n        this.hitDetectionInstructions.push((0, $cf547866e052f25b$export$7a98aa5364d62ba8));\n        this.endGeometry(feature);\n    }\n    /**\r\n   * @return {import(\"../canvas.js\").SerializableInstructions} the serializable instructions.\r\n   * @override\r\n   */ finish() {\n        const state = this.state;\n        if (state.lastStroke != undefined && state.lastStroke != this.coordinates.length) this.instructions.push((0, $cf547866e052f25b$export$7a98aa5364d62ba8));\n        this.reverseHitDetectionInstructions();\n        this.state = null;\n        return super.finish();\n    }\n    /**\r\n   * @param {import(\"../canvas.js\").FillStrokeState} state State.\r\n   * @override\r\n   */ applyStroke(state) {\n        if (state.lastStroke != undefined && state.lastStroke != this.coordinates.length) {\n            this.instructions.push((0, $cf547866e052f25b$export$7a98aa5364d62ba8));\n            state.lastStroke = this.coordinates.length;\n        }\n        state.lastStroke = 0;\n        super.applyStroke(state);\n        this.instructions.push((0, $cf547866e052f25b$export$9f746cc58a899a00));\n    }\n}\nvar $a207f23baa5aa2c5$export$2e2bcd8739ae039 = $a207f23baa5aa2c5$var$CanvasLineStringBuilder;\n\n\n/**\r\n * @module ol/render/canvas/PolygonBuilder\r\n */ \n\n\n\nclass $7d2e8ba11a45ae8a$var$CanvasPolygonBuilder extends (0, $2bb20f8873deb436$export$2e2bcd8739ae039) {\n    /**\r\n   * @param {number} tolerance Tolerance.\r\n   * @param {import(\"../../extent.js\").Extent} maxExtent Maximum extent.\r\n   * @param {number} resolution Resolution.\r\n   * @param {number} pixelRatio Pixel ratio.\r\n   */ constructor(tolerance, maxExtent, resolution, pixelRatio){\n        super(tolerance, maxExtent, resolution, pixelRatio);\n    }\n    /**\r\n   * @param {Array<number>} flatCoordinates Flat coordinates.\r\n   * @param {number} offset Offset.\r\n   * @param {Array<number>} ends Ends.\r\n   * @param {number} stride Stride.\r\n   * @private\r\n   * @return {number} End.\r\n   */ drawFlatCoordinatess_(flatCoordinates, offset, ends, stride) {\n        const state = this.state;\n        const fill = state.fillStyle !== undefined;\n        const stroke = state.strokeStyle !== undefined;\n        const numEnds = ends.length;\n        this.instructions.push((0, $cf547866e052f25b$export$9f746cc58a899a00));\n        this.hitDetectionInstructions.push((0, $cf547866e052f25b$export$9f746cc58a899a00));\n        for(let i = 0; i < numEnds; ++i){\n            const end = ends[i];\n            const myBegin = this.coordinates.length;\n            const myEnd = this.appendFlatLineCoordinates(flatCoordinates, offset, end, stride, true, !stroke);\n            const moveToLineToInstruction = [\n                (0, $cf547866e052f25b$export$2e2bcd8739ae039).MOVE_TO_LINE_TO,\n                myBegin,\n                myEnd\n            ];\n            this.instructions.push(moveToLineToInstruction);\n            this.hitDetectionInstructions.push(moveToLineToInstruction);\n            if (stroke) {\n                // Performance optimization: only call closePath() when we have a stroke.\n                // Otherwise the ring is closed already (see appendFlatLineCoordinates above).\n                this.instructions.push((0, $cf547866e052f25b$export$89b10f327e413e71));\n                this.hitDetectionInstructions.push((0, $cf547866e052f25b$export$89b10f327e413e71));\n            }\n            offset = end;\n        }\n        if (fill) {\n            this.instructions.push((0, $cf547866e052f25b$export$f21891651e408226));\n            this.hitDetectionInstructions.push((0, $cf547866e052f25b$export$f21891651e408226));\n        }\n        if (stroke) {\n            this.instructions.push((0, $cf547866e052f25b$export$7a98aa5364d62ba8));\n            this.hitDetectionInstructions.push((0, $cf547866e052f25b$export$7a98aa5364d62ba8));\n        }\n        return offset;\n    }\n    /**\r\n   * @param {import(\"../../geom/Circle.js\").default} circleGeometry Circle geometry.\r\n   * @param {import(\"../../Feature.js\").default} feature Feature.\r\n   * @param {number} [index] Render order index.\r\n   * @override\r\n   */ drawCircle(circleGeometry, feature, index) {\n        const state = this.state;\n        const fillStyle = state.fillStyle;\n        const strokeStyle = state.strokeStyle;\n        if (fillStyle === undefined && strokeStyle === undefined) return;\n        this.setFillStrokeStyles_();\n        this.beginGeometry(circleGeometry, feature, index);\n        if (state.fillStyle !== undefined) this.hitDetectionInstructions.push([\n            (0, $cf547866e052f25b$export$2e2bcd8739ae039).SET_FILL_STYLE,\n            (0, $d4aabc5c971073f1$export$c495d52ee3fd74b2)\n        ]);\n        if (state.strokeStyle !== undefined) this.hitDetectionInstructions.push([\n            (0, $cf547866e052f25b$export$2e2bcd8739ae039).SET_STROKE_STYLE,\n            state.strokeStyle,\n            state.lineWidth,\n            state.lineCap,\n            state.lineJoin,\n            state.miterLimit,\n            (0, $d4aabc5c971073f1$export$e21b4112fdc612fc),\n            (0, $d4aabc5c971073f1$export$e06efc2409049f76)\n        ]);\n        const flatCoordinates = circleGeometry.getFlatCoordinates();\n        const stride = circleGeometry.getStride();\n        const myBegin = this.coordinates.length;\n        this.appendFlatLineCoordinates(flatCoordinates, 0, flatCoordinates.length, stride, false, false);\n        const circleInstruction = [\n            (0, $cf547866e052f25b$export$2e2bcd8739ae039).CIRCLE,\n            myBegin\n        ];\n        this.instructions.push((0, $cf547866e052f25b$export$9f746cc58a899a00), circleInstruction);\n        this.hitDetectionInstructions.push((0, $cf547866e052f25b$export$9f746cc58a899a00), circleInstruction);\n        if (state.fillStyle !== undefined) {\n            this.instructions.push((0, $cf547866e052f25b$export$f21891651e408226));\n            this.hitDetectionInstructions.push((0, $cf547866e052f25b$export$f21891651e408226));\n        }\n        if (state.strokeStyle !== undefined) {\n            this.instructions.push((0, $cf547866e052f25b$export$7a98aa5364d62ba8));\n            this.hitDetectionInstructions.push((0, $cf547866e052f25b$export$7a98aa5364d62ba8));\n        }\n        this.endGeometry(feature);\n    }\n    /**\r\n   * @param {import(\"../../geom/Polygon.js\").default|import(\"../Feature.js\").default} polygonGeometry Polygon geometry.\r\n   * @param {import(\"../../Feature.js\").FeatureLike} feature Feature.\r\n   * @param {number} [index] Render order index.\r\n   * @override\r\n   */ drawPolygon(polygonGeometry, feature, index) {\n        const state = this.state;\n        const fillStyle = state.fillStyle;\n        const strokeStyle = state.strokeStyle;\n        if (fillStyle === undefined && strokeStyle === undefined) return;\n        this.setFillStrokeStyles_();\n        this.beginGeometry(polygonGeometry, feature, index);\n        if (state.fillStyle !== undefined) this.hitDetectionInstructions.push([\n            (0, $cf547866e052f25b$export$2e2bcd8739ae039).SET_FILL_STYLE,\n            (0, $d4aabc5c971073f1$export$c495d52ee3fd74b2)\n        ]);\n        if (state.strokeStyle !== undefined) this.hitDetectionInstructions.push([\n            (0, $cf547866e052f25b$export$2e2bcd8739ae039).SET_STROKE_STYLE,\n            state.strokeStyle,\n            state.lineWidth,\n            state.lineCap,\n            state.lineJoin,\n            state.miterLimit,\n            (0, $d4aabc5c971073f1$export$e21b4112fdc612fc),\n            (0, $d4aabc5c971073f1$export$e06efc2409049f76)\n        ]);\n        const ends = polygonGeometry.getEnds();\n        const flatCoordinates = polygonGeometry.getOrientedFlatCoordinates();\n        const stride = polygonGeometry.getStride();\n        this.drawFlatCoordinatess_(flatCoordinates, 0, /** @type {Array<number>} */ ends, stride);\n        this.endGeometry(feature);\n    }\n    /**\r\n   * @param {import(\"../../geom/MultiPolygon.js\").default} multiPolygonGeometry MultiPolygon geometry.\r\n   * @param {import(\"../../Feature.js\").FeatureLike} feature Feature.\r\n   * @param {number} [index] Render order index.\r\n   * @override\r\n   */ drawMultiPolygon(multiPolygonGeometry, feature, index) {\n        const state = this.state;\n        const fillStyle = state.fillStyle;\n        const strokeStyle = state.strokeStyle;\n        if (fillStyle === undefined && strokeStyle === undefined) return;\n        this.setFillStrokeStyles_();\n        this.beginGeometry(multiPolygonGeometry, feature, index);\n        if (state.fillStyle !== undefined) this.hitDetectionInstructions.push([\n            (0, $cf547866e052f25b$export$2e2bcd8739ae039).SET_FILL_STYLE,\n            (0, $d4aabc5c971073f1$export$c495d52ee3fd74b2)\n        ]);\n        if (state.strokeStyle !== undefined) this.hitDetectionInstructions.push([\n            (0, $cf547866e052f25b$export$2e2bcd8739ae039).SET_STROKE_STYLE,\n            state.strokeStyle,\n            state.lineWidth,\n            state.lineCap,\n            state.lineJoin,\n            state.miterLimit,\n            (0, $d4aabc5c971073f1$export$e21b4112fdc612fc),\n            (0, $d4aabc5c971073f1$export$e06efc2409049f76)\n        ]);\n        const endss = multiPolygonGeometry.getEndss();\n        const flatCoordinates = multiPolygonGeometry.getOrientedFlatCoordinates();\n        const stride = multiPolygonGeometry.getStride();\n        let offset = 0;\n        for(let i = 0, ii = endss.length; i < ii; ++i)offset = this.drawFlatCoordinatess_(flatCoordinates, offset, endss[i], stride);\n        this.endGeometry(feature);\n    }\n    /**\r\n   * @return {import(\"../canvas.js\").SerializableInstructions} the serializable instructions.\r\n   * @override\r\n   */ finish() {\n        this.reverseHitDetectionInstructions();\n        this.state = null;\n        // We want to preserve topology when drawing polygons.  Polygons are\n        // simplified using quantization and point elimination. However, we might\n        // have received a mix of quantized and non-quantized geometries, so ensure\n        // that all are quantized by quantizing all coordinates in the batch.\n        const tolerance = this.tolerance;\n        if (tolerance !== 0) {\n            const coordinates = this.coordinates;\n            for(let i = 0, ii = coordinates.length; i < ii; ++i)coordinates[i] = (0, $8780aae6970f5f65$export$51a0620f7a28532b)(coordinates[i], tolerance);\n        }\n        return super.finish();\n    }\n    /**\r\n   * @private\r\n   */ setFillStrokeStyles_() {\n        const state = this.state;\n        const fillStyle = state.fillStyle;\n        if (fillStyle !== undefined) this.updateFillStyle(state, this.createFill);\n        if (state.strokeStyle !== undefined) this.updateStrokeStyle(state, this.applyStroke);\n    }\n}\nvar $7d2e8ba11a45ae8a$export$2e2bcd8739ae039 = $7d2e8ba11a45ae8a$var$CanvasPolygonBuilder;\n\n\n/**\r\n * @module ol/render/canvas/TextBuilder\r\n */ \n\n\nfunction $7704cc1df2ddb619$export$f08272c6ff321e57(chunkLength, flatCoordinates, offset, end, stride) {\n    const chunks = [];\n    let cursor = offset;\n    let chunkM = 0;\n    let currentChunk = flatCoordinates.slice(offset, 2);\n    while(chunkM < chunkLength && cursor + stride < end){\n        const [x1, y1] = currentChunk.slice(-2);\n        const x2 = flatCoordinates[cursor + stride];\n        const y2 = flatCoordinates[cursor + stride + 1];\n        const segmentLength = Math.sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1));\n        chunkM += segmentLength;\n        if (chunkM >= chunkLength) {\n            const m = (chunkLength - chunkM + segmentLength) / segmentLength;\n            const x = (0, $6b000a049d919fe5$export$3a89f8d6f6bf6c9f)(x1, x2, m);\n            const y = (0, $6b000a049d919fe5$export$3a89f8d6f6bf6c9f)(y1, y2, m);\n            currentChunk.push(x, y);\n            chunks.push(currentChunk);\n            currentChunk = [\n                x,\n                y\n            ];\n            if (chunkM == chunkLength) cursor += stride;\n            chunkM = 0;\n        } else if (chunkM < chunkLength) {\n            currentChunk.push(flatCoordinates[cursor + stride], flatCoordinates[cursor + stride + 1]);\n            cursor += stride;\n        } else {\n            const missing = segmentLength - chunkM;\n            const x = (0, $6b000a049d919fe5$export$3a89f8d6f6bf6c9f)(x1, x2, missing / segmentLength);\n            const y = (0, $6b000a049d919fe5$export$3a89f8d6f6bf6c9f)(y1, y2, missing / segmentLength);\n            currentChunk.push(x, y);\n            chunks.push(currentChunk);\n            currentChunk = [\n                x,\n                y\n            ];\n            chunkM = 0;\n            cursor += stride;\n        }\n    }\n    if (chunkM > 0) chunks.push(currentChunk);\n    return chunks;\n}\n\n\n/**\r\n * @module ol/geom/flat/straightchunk\r\n */ /**\r\n * @param {number} maxAngle Maximum acceptable angle delta between segments.\r\n * @param {Array<number>} flatCoordinates Flat coordinates.\r\n * @param {number} offset Offset.\r\n * @param {number} end End.\r\n * @param {number} stride Stride.\r\n * @return {Array<number>} Start and end of the first suitable chunk of the\r\n * given `flatCoordinates`.\r\n */ function $79529ab61b92f869$export$ed6c897eea07a254(maxAngle, flatCoordinates, offset, end, stride) {\n    let chunkStart = offset;\n    let chunkEnd = offset;\n    let chunkM = 0;\n    let m = 0;\n    let start = offset;\n    let acos, i, m12, m23, x1, y1, x12, y12, x23, y23;\n    for(i = offset; i < end; i += stride){\n        const x2 = flatCoordinates[i];\n        const y2 = flatCoordinates[i + 1];\n        if (x1 !== undefined) {\n            x23 = x2 - x1;\n            y23 = y2 - y1;\n            m23 = Math.sqrt(x23 * x23 + y23 * y23);\n            if (x12 !== undefined) {\n                m += m12;\n                acos = Math.acos((x12 * x23 + y12 * y23) / (m12 * m23));\n                if (acos > maxAngle) {\n                    if (m > chunkM) {\n                        chunkM = m;\n                        chunkStart = start;\n                        chunkEnd = i;\n                    }\n                    m = 0;\n                    start = i - stride;\n                }\n            }\n            m12 = m23;\n            x12 = x23;\n            y12 = y23;\n        }\n        x1 = x2;\n        y1 = y2;\n    }\n    m += m23;\n    return m > chunkM ? [\n        start,\n        i\n    ] : [\n        chunkStart,\n        chunkEnd\n    ];\n}\n\n\n\n\n\n\nconst $8243e906fae47bbe$export$91a016276e4aee96 = {\n    'left': 0,\n    'center': 0.5,\n    'right': 1,\n    'top': 0,\n    'middle': 0.5,\n    'hanging': 0.2,\n    'alphabetic': 0.8,\n    'ideographic': 0.8,\n    'bottom': 1\n};\nclass $8243e906fae47bbe$var$CanvasTextBuilder extends (0, $2bb20f8873deb436$export$2e2bcd8739ae039) {\n    /**\r\n   * @param {number} tolerance Tolerance.\r\n   * @param {import(\"../../extent.js\").Extent} maxExtent Maximum extent.\r\n   * @param {number} resolution Resolution.\r\n   * @param {number} pixelRatio Pixel ratio.\r\n   */ constructor(tolerance, maxExtent, resolution, pixelRatio){\n        super(tolerance, maxExtent, resolution, pixelRatio);\n        /**\r\n     * @private\r\n     * @type {Array<HTMLCanvasElement>}\r\n     */ this.labels_ = null;\n        /**\r\n     * @private\r\n     * @type {string|Array<string>}\r\n     */ this.text_ = '';\n        /**\r\n     * @private\r\n     * @type {number}\r\n     */ this.textOffsetX_ = 0;\n        /**\r\n     * @private\r\n     * @type {number}\r\n     */ this.textOffsetY_ = 0;\n        /**\r\n     * @private\r\n     * @type {boolean|undefined}\r\n     */ this.textRotateWithView_ = undefined;\n        /**\r\n     * @private\r\n     * @type {boolean|undefined}\r\n     */ this.textKeepUpright_ = undefined;\n        /**\r\n     * @private\r\n     * @type {number}\r\n     */ this.textRotation_ = 0;\n        /**\r\n     * @private\r\n     * @type {?import(\"../canvas.js\").FillState}\r\n     */ this.textFillState_ = null;\n        /**\r\n     * @type {!Object<string, import(\"../canvas.js\").FillState>}\r\n     */ this.fillStates = {};\n        this.fillStates[0, $d4aabc5c971073f1$export$c495d52ee3fd74b2] = {\n            fillStyle: (0, $d4aabc5c971073f1$export$c495d52ee3fd74b2)\n        };\n        /**\r\n     * @private\r\n     * @type {?import(\"../canvas.js\").StrokeState}\r\n     */ this.textStrokeState_ = null;\n        /**\r\n     * @type {!Object<string, import(\"../canvas.js\").StrokeState>}\r\n     */ this.strokeStates = {};\n        /**\r\n     * @private\r\n     * @type {import(\"../canvas.js\").TextState}\r\n     */ this.textState_ = /** @type {import(\"../canvas.js\").TextState} */ {};\n        /**\r\n     * @type {!Object<string, import(\"../canvas.js\").TextState>}\r\n     */ this.textStates = {};\n        /**\r\n     * @private\r\n     * @type {string}\r\n     */ this.textKey_ = '';\n        /**\r\n     * @private\r\n     * @type {string}\r\n     */ this.fillKey_ = '';\n        /**\r\n     * @private\r\n     * @type {string}\r\n     */ this.strokeKey_ = '';\n        /**\r\n     * @private\r\n     * @type {import('../../style/Style.js').DeclutterMode}\r\n     */ this.declutterMode_ = undefined;\n        /**\r\n     * Data shared with an image builder for combined decluttering.\r\n     * @private\r\n     * @type {import(\"../canvas.js\").DeclutterImageWithText}\r\n     */ this.declutterImageWithText_ = undefined;\n    }\n    /**\r\n   * @return {import(\"../canvas.js\").SerializableInstructions} the serializable instructions.\r\n   * @override\r\n   */ finish() {\n        const instructions = super.finish();\n        instructions.textStates = this.textStates;\n        instructions.fillStates = this.fillStates;\n        instructions.strokeStates = this.strokeStates;\n        return instructions;\n    }\n    /**\r\n   * @param {import(\"../../geom/SimpleGeometry.js\").default|import(\"../Feature.js\").default} geometry Geometry.\r\n   * @param {import(\"../../Feature.js\").FeatureLike} feature Feature.\r\n   * @param {number} [index] Render order index.\r\n   * @override\r\n   */ drawText(geometry, feature, index) {\n        const fillState = this.textFillState_;\n        const strokeState = this.textStrokeState_;\n        const textState = this.textState_;\n        if (this.text_ === '' || !textState || !fillState && !strokeState) return;\n        const coordinates = this.coordinates;\n        let begin = coordinates.length;\n        const geometryType = geometry.getType();\n        let flatCoordinates = null;\n        let stride = geometry.getStride();\n        if (textState.placement === 'line' && (geometryType == 'LineString' || geometryType == 'MultiLineString' || geometryType == 'Polygon' || geometryType == 'MultiPolygon')) {\n            if (!(0, $6da4c8ed3074c92b$export$7b0a31e10bbff018)(this.maxExtent, geometry.getExtent())) return;\n            let ends;\n            flatCoordinates = geometry.getFlatCoordinates();\n            if (geometryType == 'LineString') ends = [\n                flatCoordinates.length\n            ];\n            else if (geometryType == 'MultiLineString') ends = /** @type {import(\"../../geom/MultiLineString.js\").default} */ geometry.getEnds();\n            else if (geometryType == 'Polygon') ends = /** @type {import(\"../../geom/Polygon.js\").default} */ geometry.getEnds().slice(0, 1);\n            else if (geometryType == 'MultiPolygon') {\n                const endss = /** @type {import(\"../../geom/MultiPolygon.js\").default} */ geometry.getEndss();\n                ends = [];\n                for(let i = 0, ii = endss.length; i < ii; ++i)ends.push(endss[i][0]);\n            }\n            this.beginGeometry(geometry, feature, index);\n            const repeat = textState.repeat;\n            const textAlign = repeat ? undefined : textState.textAlign;\n            // No `justify` support for line placement.\n            let flatOffset = 0;\n            for(let o = 0, oo = ends.length; o < oo; ++o){\n                let chunks;\n                if (repeat) chunks = (0, $7704cc1df2ddb619$export$f08272c6ff321e57)(repeat * this.resolution, flatCoordinates, flatOffset, ends[o], stride);\n                else chunks = [\n                    flatCoordinates.slice(flatOffset, ends[o])\n                ];\n                for(let c = 0, cc = chunks.length; c < cc; ++c){\n                    const chunk = chunks[c];\n                    let chunkBegin = 0;\n                    let chunkEnd = chunk.length;\n                    if (textAlign == undefined) {\n                        const range = (0, $79529ab61b92f869$export$ed6c897eea07a254)(textState.maxAngle, chunk, 0, chunk.length, 2);\n                        chunkBegin = range[0];\n                        chunkEnd = range[1];\n                    }\n                    for(let i = chunkBegin; i < chunkEnd; i += stride)coordinates.push(chunk[i], chunk[i + 1]);\n                    const end = coordinates.length;\n                    flatOffset = ends[o];\n                    this.drawChars_(begin, end);\n                    begin = end;\n                }\n            }\n            this.endGeometry(feature);\n        } else {\n            let geometryWidths = textState.overflow ? null : [];\n            switch(geometryType){\n                case 'Point':\n                case 'MultiPoint':\n                    flatCoordinates = /** @type {import(\"../../geom/MultiPoint.js\").default} */ geometry.getFlatCoordinates();\n                    break;\n                case 'LineString':\n                    flatCoordinates = /** @type {import(\"../../geom/LineString.js\").default} */ geometry.getFlatMidpoint();\n                    break;\n                case 'Circle':\n                    flatCoordinates = /** @type {import(\"../../geom/Circle.js\").default} */ geometry.getCenter();\n                    break;\n                case 'MultiLineString':\n                    flatCoordinates = /** @type {import(\"../../geom/MultiLineString.js\").default} */ geometry.getFlatMidpoints();\n                    stride = 2;\n                    break;\n                case 'Polygon':\n                    flatCoordinates = /** @type {import(\"../../geom/Polygon.js\").default} */ geometry.getFlatInteriorPoint();\n                    if (!textState.overflow) geometryWidths.push(flatCoordinates[2] / this.resolution);\n                    stride = 3;\n                    break;\n                case 'MultiPolygon':\n                    const interiorPoints = /** @type {import(\"../../geom/MultiPolygon.js\").default} */ geometry.getFlatInteriorPoints();\n                    flatCoordinates = [];\n                    for(let i = 0, ii = interiorPoints.length; i < ii; i += 3){\n                        if (!textState.overflow) geometryWidths.push(interiorPoints[i + 2] / this.resolution);\n                        flatCoordinates.push(interiorPoints[i], interiorPoints[i + 1]);\n                    }\n                    if (flatCoordinates.length === 0) return;\n                    stride = 2;\n                    break;\n                default:\n            }\n            const end = this.appendFlatPointCoordinates(flatCoordinates, stride);\n            if (end === begin) return;\n            if (geometryWidths && (end - begin) / 2 !== flatCoordinates.length / stride) {\n                let beg = begin / 2;\n                geometryWidths = geometryWidths.filter((w, i)=>{\n                    const keep = coordinates[(beg + i) * 2] === flatCoordinates[i * stride] && coordinates[(beg + i) * 2 + 1] === flatCoordinates[i * stride + 1];\n                    if (!keep) --beg;\n                    return keep;\n                });\n            }\n            this.saveTextStates_();\n            const backgroundFill = textState.backgroundFill ? this.createFill(this.fillStyleToState(textState.backgroundFill)) : null;\n            const backgroundStroke = textState.backgroundStroke ? this.createStroke(this.strokeStyleToState(textState.backgroundStroke)) : null;\n            this.beginGeometry(geometry, feature, index);\n            // adjust padding for negative scale\n            let padding = textState.padding;\n            if (padding != (0, $d4aabc5c971073f1$export$40a9eeef55665a40) && (textState.scale[0] < 0 || textState.scale[1] < 0)) {\n                let p0 = textState.padding[0];\n                let p1 = textState.padding[1];\n                let p2 = textState.padding[2];\n                let p3 = textState.padding[3];\n                if (textState.scale[0] < 0) {\n                    p1 = -p1;\n                    p3 = -p3;\n                }\n                if (textState.scale[1] < 0) {\n                    p0 = -p0;\n                    p2 = -p2;\n                }\n                padding = [\n                    p0,\n                    p1,\n                    p2,\n                    p3\n                ];\n            }\n            // The image is unknown at this stage so we pass null; it will be computed at render time.\n            // For clarity, we pass NaN for offsetX, offsetY, width and height, which will be computed at\n            // render time.\n            const pixelRatio = this.pixelRatio;\n            this.instructions.push([\n                (0, $cf547866e052f25b$export$2e2bcd8739ae039).DRAW_IMAGE,\n                begin,\n                end,\n                null,\n                NaN,\n                NaN,\n                NaN,\n                1,\n                0,\n                0,\n                this.textRotateWithView_,\n                this.textRotation_,\n                [\n                    1,\n                    1\n                ],\n                NaN,\n                this.declutterMode_,\n                this.declutterImageWithText_,\n                padding == (0, $d4aabc5c971073f1$export$40a9eeef55665a40) ? (0, $d4aabc5c971073f1$export$40a9eeef55665a40) : padding.map(function(p) {\n                    return p * pixelRatio;\n                }),\n                backgroundFill,\n                backgroundStroke,\n                this.text_,\n                this.textKey_,\n                this.strokeKey_,\n                this.fillKey_,\n                this.textOffsetX_,\n                this.textOffsetY_,\n                geometryWidths\n            ]);\n            const scale = 1 / pixelRatio;\n            // Set default fill for hit detection background\n            const hitDetectionBackgroundFill = backgroundFill ? backgroundFill.slice(0) : null;\n            if (hitDetectionBackgroundFill) hitDetectionBackgroundFill[1] = (0, $d4aabc5c971073f1$export$c495d52ee3fd74b2);\n            this.hitDetectionInstructions.push([\n                (0, $cf547866e052f25b$export$2e2bcd8739ae039).DRAW_IMAGE,\n                begin,\n                end,\n                null,\n                NaN,\n                NaN,\n                NaN,\n                1,\n                0,\n                0,\n                this.textRotateWithView_,\n                this.textRotation_,\n                [\n                    scale,\n                    scale\n                ],\n                NaN,\n                this.declutterMode_,\n                this.declutterImageWithText_,\n                padding,\n                hitDetectionBackgroundFill,\n                backgroundStroke,\n                this.text_,\n                this.textKey_,\n                this.strokeKey_,\n                this.fillKey_ ? (0, $d4aabc5c971073f1$export$c495d52ee3fd74b2) : this.fillKey_,\n                this.textOffsetX_,\n                this.textOffsetY_,\n                geometryWidths\n            ]);\n            this.endGeometry(feature);\n        }\n    }\n    /**\r\n   * @private\r\n   */ saveTextStates_() {\n        const strokeState = this.textStrokeState_;\n        const textState = this.textState_;\n        const fillState = this.textFillState_;\n        const strokeKey = this.strokeKey_;\n        if (strokeState) {\n            if (!(strokeKey in this.strokeStates)) this.strokeStates[strokeKey] = {\n                strokeStyle: strokeState.strokeStyle,\n                lineCap: strokeState.lineCap,\n                lineDashOffset: strokeState.lineDashOffset,\n                lineWidth: strokeState.lineWidth,\n                lineJoin: strokeState.lineJoin,\n                miterLimit: strokeState.miterLimit,\n                lineDash: strokeState.lineDash\n            };\n        }\n        const textKey = this.textKey_;\n        if (!(textKey in this.textStates)) this.textStates[textKey] = {\n            font: textState.font,\n            textAlign: textState.textAlign || (0, $d4aabc5c971073f1$export$94d53b95641b5766),\n            justify: textState.justify,\n            textBaseline: textState.textBaseline || (0, $d4aabc5c971073f1$export$cf2279a1bff62eb),\n            scale: textState.scale\n        };\n        const fillKey = this.fillKey_;\n        if (fillState) {\n            if (!(fillKey in this.fillStates)) this.fillStates[fillKey] = {\n                fillStyle: fillState.fillStyle\n            };\n        }\n    }\n    /**\r\n   * @private\r\n   * @param {number} begin Begin.\r\n   * @param {number} end End.\r\n   */ drawChars_(begin, end) {\n        const strokeState = this.textStrokeState_;\n        const textState = this.textState_;\n        const strokeKey = this.strokeKey_;\n        const textKey = this.textKey_;\n        const fillKey = this.fillKey_;\n        this.saveTextStates_();\n        const pixelRatio = this.pixelRatio;\n        const baseline = $8243e906fae47bbe$export$91a016276e4aee96[textState.textBaseline];\n        const offsetY = this.textOffsetY_ * pixelRatio;\n        const text = this.text_;\n        const strokeWidth = strokeState ? strokeState.lineWidth * Math.abs(textState.scale[0]) / 2 : 0;\n        this.instructions.push([\n            (0, $cf547866e052f25b$export$2e2bcd8739ae039).DRAW_CHARS,\n            begin,\n            end,\n            baseline,\n            textState.overflow,\n            fillKey,\n            textState.maxAngle,\n            pixelRatio,\n            offsetY,\n            strokeKey,\n            strokeWidth * pixelRatio,\n            text,\n            textKey,\n            1,\n            this.declutterMode_,\n            this.textKeepUpright_\n        ]);\n        this.hitDetectionInstructions.push([\n            (0, $cf547866e052f25b$export$2e2bcd8739ae039).DRAW_CHARS,\n            begin,\n            end,\n            baseline,\n            textState.overflow,\n            fillKey ? (0, $d4aabc5c971073f1$export$c495d52ee3fd74b2) : fillKey,\n            textState.maxAngle,\n            pixelRatio,\n            offsetY,\n            strokeKey,\n            strokeWidth * pixelRatio,\n            text,\n            textKey,\n            1 / pixelRatio,\n            this.declutterMode_,\n            this.textKeepUpright_\n        ]);\n    }\n    /**\r\n   * @param {import(\"../../style/Text.js\").default} textStyle Text style.\r\n   * @param {Object} [sharedData] Shared data.\r\n   * @override\r\n   */ setTextStyle(textStyle, sharedData) {\n        let textState, fillState, strokeState;\n        if (!textStyle) this.text_ = '';\n        else {\n            const textFillStyle = textStyle.getFill();\n            if (!textFillStyle) {\n                fillState = null;\n                this.textFillState_ = fillState;\n            } else {\n                fillState = this.textFillState_;\n                if (!fillState) {\n                    fillState = /** @type {import(\"../canvas.js\").FillState} */ {};\n                    this.textFillState_ = fillState;\n                }\n                fillState.fillStyle = (0, $e0807f400ec9a0a9$export$dc5b1400ac3a10a8)(textFillStyle.getColor() || (0, $d4aabc5c971073f1$export$c495d52ee3fd74b2));\n            }\n            const textStrokeStyle = textStyle.getStroke();\n            if (!textStrokeStyle) {\n                strokeState = null;\n                this.textStrokeState_ = strokeState;\n            } else {\n                strokeState = this.textStrokeState_;\n                if (!strokeState) {\n                    strokeState = /** @type {import(\"../canvas.js\").StrokeState} */ {};\n                    this.textStrokeState_ = strokeState;\n                }\n                const lineDash = textStrokeStyle.getLineDash();\n                const lineDashOffset = textStrokeStyle.getLineDashOffset();\n                const lineWidth = textStrokeStyle.getWidth();\n                const miterLimit = textStrokeStyle.getMiterLimit();\n                strokeState.lineCap = textStrokeStyle.getLineCap() || (0, $d4aabc5c971073f1$export$17bd0c38d6ae694e);\n                strokeState.lineDash = lineDash ? lineDash.slice() : (0, $d4aabc5c971073f1$export$e21b4112fdc612fc);\n                strokeState.lineDashOffset = lineDashOffset === undefined ? (0, $d4aabc5c971073f1$export$e06efc2409049f76) : lineDashOffset;\n                strokeState.lineJoin = textStrokeStyle.getLineJoin() || (0, $d4aabc5c971073f1$export$365eb9648cf19bd0);\n                strokeState.lineWidth = lineWidth === undefined ? (0, $d4aabc5c971073f1$export$79661f132c62010e) : lineWidth;\n                strokeState.miterLimit = miterLimit === undefined ? (0, $d4aabc5c971073f1$export$80c1c01844597b7b) : miterLimit;\n                strokeState.strokeStyle = (0, $e0807f400ec9a0a9$export$dc5b1400ac3a10a8)(textStrokeStyle.getColor() || (0, $d4aabc5c971073f1$export$1eb2eaecacf2031e));\n            }\n            textState = this.textState_;\n            const font = textStyle.getFont() || (0, $d4aabc5c971073f1$export$3847dfea4f8d4dfa);\n            (0, $d4aabc5c971073f1$export$a534074a28fa87ff)(font);\n            const textScale = textStyle.getScaleArray();\n            textState.overflow = textStyle.getOverflow();\n            textState.font = font;\n            textState.maxAngle = textStyle.getMaxAngle();\n            textState.placement = textStyle.getPlacement();\n            textState.textAlign = textStyle.getTextAlign();\n            textState.repeat = textStyle.getRepeat();\n            textState.justify = textStyle.getJustify();\n            textState.textBaseline = textStyle.getTextBaseline() || (0, $d4aabc5c971073f1$export$cf2279a1bff62eb);\n            textState.backgroundFill = textStyle.getBackgroundFill();\n            textState.backgroundStroke = textStyle.getBackgroundStroke();\n            textState.padding = textStyle.getPadding() || (0, $d4aabc5c971073f1$export$40a9eeef55665a40);\n            textState.scale = textScale === undefined ? [\n                1,\n                1\n            ] : textScale;\n            const textOffsetX = textStyle.getOffsetX();\n            const textOffsetY = textStyle.getOffsetY();\n            const textRotateWithView = textStyle.getRotateWithView();\n            const textKeepUpright = textStyle.getKeepUpright();\n            const textRotation = textStyle.getRotation();\n            this.text_ = textStyle.getText() || '';\n            this.textOffsetX_ = textOffsetX === undefined ? 0 : textOffsetX;\n            this.textOffsetY_ = textOffsetY === undefined ? 0 : textOffsetY;\n            this.textRotateWithView_ = textRotateWithView === undefined ? false : textRotateWithView;\n            this.textKeepUpright_ = textKeepUpright === undefined ? true : textKeepUpright;\n            this.textRotation_ = textRotation === undefined ? 0 : textRotation;\n            this.strokeKey_ = strokeState ? (typeof strokeState.strokeStyle == 'string' ? strokeState.strokeStyle : (0, $6c5e11070e371322$export$5e82334337e0f204)(strokeState.strokeStyle)) + strokeState.lineCap + strokeState.lineDashOffset + '|' + strokeState.lineWidth + strokeState.lineJoin + strokeState.miterLimit + '[' + strokeState.lineDash.join() + ']' : '';\n            this.textKey_ = textState.font + textState.scale + (textState.textAlign || '?') + (textState.repeat || '?') + (textState.justify || '?') + (textState.textBaseline || '?');\n            this.fillKey_ = fillState && fillState.fillStyle ? typeof fillState.fillStyle == 'string' ? fillState.fillStyle : '|' + (0, $6c5e11070e371322$export$5e82334337e0f204)(fillState.fillStyle) : '';\n        }\n        this.declutterMode_ = textStyle.getDeclutterMode();\n        this.declutterImageWithText_ = sharedData;\n    }\n}\nvar $8243e906fae47bbe$export$2e2bcd8739ae039 = $8243e906fae47bbe$var$CanvasTextBuilder;\n\n\n/**\r\n * @type {Object<import(\"../canvas.js\").BuilderType, typeof Builder>}\r\n */ const $e22658f4b743550b$var$BATCH_CONSTRUCTORS = {\n    'Circle': (0, $7d2e8ba11a45ae8a$export$2e2bcd8739ae039),\n    'Default': (0, $2bb20f8873deb436$export$2e2bcd8739ae039),\n    'Image': (0, $b652f9dd73b29cfe$export$2e2bcd8739ae039),\n    'LineString': (0, $a207f23baa5aa2c5$export$2e2bcd8739ae039),\n    'Polygon': (0, $7d2e8ba11a45ae8a$export$2e2bcd8739ae039),\n    'Text': (0, $8243e906fae47bbe$export$2e2bcd8739ae039)\n};\nclass $e22658f4b743550b$var$BuilderGroup {\n    /**\r\n   * @param {number} tolerance Tolerance.\r\n   * @param {import(\"../../extent.js\").Extent} maxExtent Max extent.\r\n   * @param {number} resolution Resolution.\r\n   * @param {number} pixelRatio Pixel ratio.\r\n   */ constructor(tolerance, maxExtent, resolution, pixelRatio){\n        /**\r\n     * @private\r\n     * @type {number}\r\n     */ this.tolerance_ = tolerance;\n        /**\r\n     * @private\r\n     * @type {import(\"../../extent.js\").Extent}\r\n     */ this.maxExtent_ = maxExtent;\n        /**\r\n     * @private\r\n     * @type {number}\r\n     */ this.pixelRatio_ = pixelRatio;\n        /**\r\n     * @private\r\n     * @type {number}\r\n     */ this.resolution_ = resolution;\n        /**\r\n     * @private\r\n     * @type {!Object<string, !Object<import(\"../canvas.js\").BuilderType, Builder>>}\r\n     */ this.buildersByZIndex_ = {};\n    }\n    /**\r\n   * @return {!Object<string, !Object<import(\"../canvas.js\").BuilderType, import(\"./Builder.js\").SerializableInstructions>>} The serializable instructions\r\n   */ finish() {\n        const builderInstructions = {};\n        for(const zKey in this.buildersByZIndex_){\n            builderInstructions[zKey] = builderInstructions[zKey] || {};\n            const builders = this.buildersByZIndex_[zKey];\n            for(const builderKey in builders){\n                const builderInstruction = builders[builderKey].finish();\n                builderInstructions[zKey][builderKey] = builderInstruction;\n            }\n        }\n        return builderInstructions;\n    }\n    /**\r\n   * @param {number|undefined} zIndex Z index.\r\n   * @param {import(\"../canvas.js\").BuilderType} builderType Replay type.\r\n   * @return {import(\"../VectorContext.js\").default} Replay.\r\n   */ getBuilder(zIndex, builderType) {\n        const zIndexKey = zIndex !== undefined ? zIndex.toString() : '0';\n        let replays = this.buildersByZIndex_[zIndexKey];\n        if (replays === undefined) {\n            replays = {};\n            this.buildersByZIndex_[zIndexKey] = replays;\n        }\n        let replay = replays[builderType];\n        if (replay === undefined) {\n            const Constructor = $e22658f4b743550b$var$BATCH_CONSTRUCTORS[builderType];\n            replay = new Constructor(this.tolerance_, this.maxExtent_, this.resolution_, this.pixelRatio_);\n            replays[builderType] = replay;\n        }\n        return replay;\n    }\n}\nvar $e22658f4b743550b$export$2e2bcd8739ae039 = $e22658f4b743550b$var$BuilderGroup;\n\n\n/**\r\n * @module ol/render/canvas/ExecutorGroup\r\n */ \n\n\n\n\n\n/**\r\n * @module ol/render/canvas/Executor\r\n */ \n\n\n/**\r\n * @module ol/geom/flat/textpath\r\n */ \n\nfunction $f6421f31729929e6$export$153a9a17ab3e949f(flatCoordinates, offset, end, stride, text, startM, maxAngle, scale, measureAndCacheTextWidth, font, cache, rotation, keepUpright = true) {\n    let x2 = flatCoordinates[offset];\n    let y2 = flatCoordinates[offset + 1];\n    let x1 = 0;\n    let y1 = 0;\n    let segmentLength = 0;\n    let segmentM = 0;\n    function advance() {\n        x1 = x2;\n        y1 = y2;\n        offset += stride;\n        x2 = flatCoordinates[offset];\n        y2 = flatCoordinates[offset + 1];\n        segmentM += segmentLength;\n        segmentLength = Math.sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1));\n    }\n    do advance();\n    while (offset < end - stride && segmentM + segmentLength < startM);\n    let interpolate = segmentLength === 0 ? 0 : (startM - segmentM) / segmentLength;\n    const beginX = (0, $6b000a049d919fe5$export$3a89f8d6f6bf6c9f)(x1, x2, interpolate);\n    const beginY = (0, $6b000a049d919fe5$export$3a89f8d6f6bf6c9f)(y1, y2, interpolate);\n    const startOffset = offset - stride;\n    const startLength = segmentM;\n    const endM = startM + scale * measureAndCacheTextWidth(font, text, cache);\n    while(offset < end - stride && segmentM + segmentLength < endM)advance();\n    interpolate = segmentLength === 0 ? 0 : (endM - segmentM) / segmentLength;\n    const endX = (0, $6b000a049d919fe5$export$3a89f8d6f6bf6c9f)(x1, x2, interpolate);\n    const endY = (0, $6b000a049d919fe5$export$3a89f8d6f6bf6c9f)(y1, y2, interpolate);\n    // Keep text upright if the option is selected\n    let reverse = false;\n    if (keepUpright) {\n        if (rotation) {\n            const flat = [\n                beginX,\n                beginY,\n                endX,\n                endY\n            ];\n            (0, $14c6e714516e527b$export$bb628a54ab399bc9)(flat, 0, 4, 2, rotation, flat, flat);\n            reverse = flat[0] > flat[2];\n        } else reverse = beginX > endX;\n    }\n    const PI = Math.PI;\n    const result = [];\n    const singleSegment = startOffset + stride === offset;\n    offset = startOffset;\n    segmentLength = 0;\n    segmentM = startLength;\n    x2 = flatCoordinates[offset];\n    y2 = flatCoordinates[offset + 1];\n    let previousAngle;\n    // All on the same segment\n    if (singleSegment) {\n        advance();\n        previousAngle = Math.atan2(y2 - y1, x2 - x1);\n        if (reverse) previousAngle += previousAngle > 0 ? -PI : PI;\n        const x = (endX + beginX) / 2;\n        const y = (endY + beginY) / 2;\n        result[0] = [\n            x,\n            y,\n            (endM - startM) / 2,\n            previousAngle,\n            text\n        ];\n        return result;\n    }\n    // rendering across line segments\n    text = text.replace(/\\n/g, ' '); // ensure rendering in single-line as all calculations below don't handle multi-lines\n    for(let i = 0, ii = text.length; i < ii;){\n        advance();\n        let angle = Math.atan2(y2 - y1, x2 - x1);\n        if (reverse) angle += angle > 0 ? -PI : PI;\n        if (previousAngle !== undefined) {\n            let delta = angle - previousAngle;\n            delta += delta > PI ? -2 * PI : delta < -PI ? 2 * PI : 0;\n            if (Math.abs(delta) > maxAngle) return null;\n        }\n        previousAngle = angle;\n        const iStart = i;\n        let charLength = 0;\n        for(; i < ii; ++i){\n            const index = reverse ? ii - i - 1 : i;\n            const len = scale * measureAndCacheTextWidth(font, text[index], cache);\n            if (offset + stride < end && segmentM + segmentLength < startM + charLength + len / 2) break;\n            charLength += len;\n        }\n        if (i === iStart) continue;\n        const chars = reverse ? text.substring(ii - iStart, ii - i) : text.substring(iStart, i);\n        interpolate = segmentLength === 0 ? 0 : (startM + charLength / 2 - segmentM) / segmentLength;\n        const x = (0, $6b000a049d919fe5$export$3a89f8d6f6bf6c9f)(x1, x2, interpolate);\n        const y = (0, $6b000a049d919fe5$export$3a89f8d6f6bf6c9f)(y1, y2, interpolate);\n        result.push([\n            x,\n            y,\n            charLength / 2,\n            angle,\n            chars\n        ]);\n        startM += charLength;\n    }\n    return result;\n}\n\n\n\n\n/**\r\n * @module ol/render/canvas/ZIndexContext\r\n */ \n/** @typedef {CanvasRenderingContext2D & {globalAlpha: any}} ZIndexContextProxy */ /**\r\n * @extends {CanvasRenderingContext2D}\r\n */ class $c1cb593c98d2cbd0$var$ZIndexContext {\n    constructor(){\n        /**\r\n     * @private\r\n     * @type {Array<Array<*>>}\r\n     */ this.instructions_ = [];\n        /**\r\n     * @type {number}\r\n     */ this.zIndex = 0;\n        /**\r\n     * @private\r\n     * @type {number}\r\n     */ this.offset_ = 0;\n        /**\r\n     * @private\r\n     * @type {ZIndexContextProxy}\r\n     */ this.context_ = /** @type {ZIndexContextProxy} */ new Proxy((0, $075f937d7366f1a2$export$fcb72ce088a6632c)(), {\n            get: (target, property)=>{\n                if (typeof /** @type {*} */ (0, $075f937d7366f1a2$export$fcb72ce088a6632c)()[property] !== 'function') // we only accept calling functions on the proxy, not accessing properties\n                return undefined;\n                this.push_(property);\n                return this.pushMethodArgs_;\n            },\n            set: (target, property, value)=>{\n                this.push_(property, value);\n                return true;\n            }\n        });\n    }\n    /**\r\n   * @param {...*} args Arguments to push to the instructions array.\r\n   * @private\r\n   */ push_(...args) {\n        const instructions = this.instructions_;\n        const index = this.zIndex + this.offset_;\n        if (!instructions[index]) instructions[index] = [];\n        instructions[index].push(...args);\n    }\n    /**\r\n   * @private\r\n   * @param {...*} args Args.\r\n   * @return {ZIndexContext} This.\r\n   */ pushMethodArgs_ = (...args)=>{\n        this.push_(args);\n        return this;\n    };\n    /**\r\n   * Push a function that renders to the context directly.\r\n   * @param {function(CanvasRenderingContext2D): void} render Function.\r\n   */ pushFunction(render) {\n        this.push_(render);\n    }\n    /**\r\n   * Get a proxy for CanvasRenderingContext2D which does not support getting state\r\n   * (e.g. `context.globalAlpha`, which will return `undefined`). To set state, if it relies on a\r\n   * previous state (e.g. `context.globalAlpha = context.globalAlpha / 2`), set a function,\r\n   * e.g. `context.globalAlpha = (context) => context.globalAlpha / 2`.\r\n   * @return {ZIndexContextProxy} Context.\r\n   */ getContext() {\n        return this.context_;\n    }\n    /**\r\n   * @param {CanvasRenderingContext2D} context Context.\r\n   */ draw(context) {\n        this.instructions_.forEach((instructionsAtIndex)=>{\n            for(let i = 0, ii = instructionsAtIndex.length; i < ii; ++i){\n                const property = instructionsAtIndex[i];\n                if (typeof property === 'function') {\n                    property(context);\n                    continue;\n                }\n                const instructionAtIndex = instructionsAtIndex[++i];\n                if (typeof /** @type {*} */ context[property] === 'function') /** @type {*} */ context[property](...instructionAtIndex);\n                else {\n                    if (typeof instructionAtIndex === 'function') {\n                        /** @type {*} */ context[property] = instructionAtIndex(context);\n                        continue;\n                    }\n                    /** @type {*} */ context[property] = instructionAtIndex;\n                }\n            }\n        });\n    }\n    clear() {\n        this.instructions_.length = 0;\n        this.zIndex = 0;\n        this.offset_ = 0;\n    }\n    /**\r\n   * Offsets the zIndex by the highest current zIndex. Useful for rendering multiple worlds or tiles, to\r\n   * avoid conflicting context.clip() or context.save()/restore() calls.\r\n   */ offset() {\n        this.offset_ = this.instructions_.length;\n        this.zIndex = 0;\n    }\n}\nvar $c1cb593c98d2cbd0$export$2e2bcd8739ae039 = $c1cb593c98d2cbd0$var$ZIndexContext;\n\n\n\n\n\n/**\r\n * @typedef {import('../../structs/RBush.js').Entry<import('../../Feature.js').FeatureLike>} DeclutterEntry\r\n */ /**\r\n * @typedef {Object} ImageOrLabelDimensions\r\n * @property {number} drawImageX DrawImageX.\r\n * @property {number} drawImageY DrawImageY.\r\n * @property {number} drawImageW DrawImageW.\r\n * @property {number} drawImageH DrawImageH.\r\n * @property {number} originX OriginX.\r\n * @property {number} originY OriginY.\r\n * @property {Array<number>} scale Scale.\r\n * @property {DeclutterEntry} declutterBox DeclutterBox.\r\n * @property {import(\"../../transform.js\").Transform} canvasTransform CanvasTransform.\r\n */ /**\r\n * @typedef {{0: CanvasRenderingContext2D, 1: import('../../size.js').Size, 2: import(\"../canvas.js\").Label|HTMLImageElement|HTMLCanvasElement|HTMLVideoElement, 3: ImageOrLabelDimensions, 4: number, 5: Array<*>, 6: Array<*>}} ReplayImageOrLabelArgs\r\n */ /**\r\n * @template T\r\n * @typedef {function(import(\"../../Feature.js\").FeatureLike, import(\"../../geom/SimpleGeometry.js\").default, import(\"../../style/Style.js\").DeclutterMode): T} FeatureCallback\r\n */ /**\r\n * @type {import(\"../../extent.js\").Extent}\r\n */ const $6526fa4ee42dc39d$var$tmpExtent = (0, $6da4c8ed3074c92b$export$fe201bb3bbe031e9)();\n/** @type {import(\"../../coordinate.js\").Coordinate} */ const $6526fa4ee42dc39d$var$p1 = [];\n/** @type {import(\"../../coordinate.js\").Coordinate} */ const $6526fa4ee42dc39d$var$p2 = [];\n/** @type {import(\"../../coordinate.js\").Coordinate} */ const $6526fa4ee42dc39d$var$p3 = [];\n/** @type {import(\"../../coordinate.js\").Coordinate} */ const $6526fa4ee42dc39d$var$p4 = [];\n/**\r\n * @param {ReplayImageOrLabelArgs} replayImageOrLabelArgs Arguments to replayImageOrLabel\r\n * @return {DeclutterEntry} Declutter rbush entry.\r\n */ function $6526fa4ee42dc39d$var$getDeclutterBox(replayImageOrLabelArgs) {\n    return replayImageOrLabelArgs[3].declutterBox;\n}\nconst $6526fa4ee42dc39d$var$rtlRegEx = new RegExp(/* eslint-disable prettier/prettier */ '[' + String.fromCharCode(0x00591) + '-' + String.fromCharCode(0x008ff) + String.fromCharCode(0x0fb1d) + '-' + String.fromCharCode(0x0fdff) + String.fromCharCode(0x0fe70) + '-' + String.fromCharCode(0x0fefc) + String.fromCharCode(0x10800) + '-' + String.fromCharCode(0x10fff) + String.fromCharCode(0x1e800) + '-' + String.fromCharCode(0x1efff) + ']');\n/**\r\n * @param {string} text Text.\r\n * @param {CanvasTextAlign} align Alignment.\r\n * @return {number} Text alignment.\r\n */ function $6526fa4ee42dc39d$var$horizontalTextAlign(text, align) {\n    if (align === 'start') align = $6526fa4ee42dc39d$var$rtlRegEx.test(text) ? 'right' : 'left';\n    else if (align === 'end') align = $6526fa4ee42dc39d$var$rtlRegEx.test(text) ? 'left' : 'right';\n    return (0, $8243e906fae47bbe$export$91a016276e4aee96)[align];\n}\n/**\r\n * @param {Array<string>} acc Accumulator.\r\n * @param {string} line Line of text.\r\n * @param {number} i Index\r\n * @return {Array<string>} Accumulator.\r\n */ function $6526fa4ee42dc39d$var$createTextChunks(acc, line, i) {\n    if (i > 0) acc.push('\\n', '');\n    acc.push(line, '');\n    return acc;\n}\n/**\r\n * Converts rich text to plain text for text along lines.\r\n * @param {string} result The resulting plain text.\r\n * @param {string} part Item of the rich text array.\r\n * @param {number} index Index of the item in the rich text array.\r\n * @return {string} The resulting plain text.\r\n */ function $6526fa4ee42dc39d$var$richTextToPlainText(result, part, index) {\n    if (index % 2 === 0) result += part;\n    return result;\n}\nclass $6526fa4ee42dc39d$var$Executor {\n    /**\r\n   * @param {number} resolution Resolution.\r\n   * @param {number} pixelRatio Pixel ratio.\r\n   * @param {boolean} overlaps The replay can have overlapping geometries.\r\n   * @param {import(\"../canvas.js\").SerializableInstructions} instructions The serializable instructions.\r\n   * @param {boolean} [deferredRendering] Enable deferred rendering.\r\n   */ constructor(resolution, pixelRatio, overlaps, instructions, deferredRendering){\n        /**\r\n     * @protected\r\n     * @type {boolean}\r\n     */ this.overlaps = overlaps;\n        /**\r\n     * @protected\r\n     * @type {number}\r\n     */ this.pixelRatio = pixelRatio;\n        /**\r\n     * @protected\r\n     * @const\r\n     * @type {number}\r\n     */ this.resolution = resolution;\n        /**\r\n     * @private\r\n     * @type {number}\r\n     */ this.alignAndScaleFill_;\n        /**\r\n     * @protected\r\n     * @type {Array<*>}\r\n     */ this.instructions = instructions.instructions;\n        /**\r\n     * @protected\r\n     * @type {Array<number>}\r\n     */ this.coordinates = instructions.coordinates;\n        /**\r\n     * @private\r\n     * @type {!Object<number,import(\"../../coordinate.js\").Coordinate|Array<import(\"../../coordinate.js\").Coordinate>|Array<Array<import(\"../../coordinate.js\").Coordinate>>>}\r\n     */ this.coordinateCache_ = {};\n        /**\r\n     * @private\r\n     * @type {!import(\"../../transform.js\").Transform}\r\n     */ this.renderedTransform_ = (0, $e22e7611e69f42a9$export$185802fd694ee1f5)();\n        /**\r\n     * @protected\r\n     * @type {Array<*>}\r\n     */ this.hitDetectionInstructions = instructions.hitDetectionInstructions;\n        /**\r\n     * @private\r\n     * @type {Array<number>}\r\n     */ this.pixelCoordinates_ = null;\n        /**\r\n     * @private\r\n     * @type {number}\r\n     */ this.viewRotation_ = 0;\n        /**\r\n     * @type {!Object<string, import(\"../canvas.js\").FillState>}\r\n     */ this.fillStates = instructions.fillStates || {};\n        /**\r\n     * @type {!Object<string, import(\"../canvas.js\").StrokeState>}\r\n     */ this.strokeStates = instructions.strokeStates || {};\n        /**\r\n     * @type {!Object<string, import(\"../canvas.js\").TextState>}\r\n     */ this.textStates = instructions.textStates || {};\n        /**\r\n     * @private\r\n     * @type {Object<string, Object<string, number>>}\r\n     */ this.widths_ = {};\n        /**\r\n     * @private\r\n     * @type {Object<string, import(\"../canvas.js\").Label>}\r\n     */ this.labels_ = {};\n        /**\r\n     * @private\r\n     * @type {import(\"../canvas/ZIndexContext.js\").default}\r\n     */ this.zIndexContext_ = deferredRendering ? new (0, $c1cb593c98d2cbd0$export$2e2bcd8739ae039)() : null;\n    }\n    /**\r\n   * @return {ZIndexContext} ZIndex context.\r\n   */ getZIndexContext() {\n        return this.zIndexContext_;\n    }\n    /**\r\n   * @param {string|Array<string>} text Text.\r\n   * @param {string} textKey Text style key.\r\n   * @param {string} fillKey Fill style key.\r\n   * @param {string} strokeKey Stroke style key.\r\n   * @return {import(\"../canvas.js\").Label} Label.\r\n   */ createLabel(text, textKey, fillKey, strokeKey) {\n        const key = text + textKey + fillKey + strokeKey;\n        if (this.labels_[key]) return this.labels_[key];\n        const strokeState = strokeKey ? this.strokeStates[strokeKey] : null;\n        const fillState = fillKey ? this.fillStates[fillKey] : null;\n        const textState = this.textStates[textKey];\n        const pixelRatio = this.pixelRatio;\n        const scale = [\n            textState.scale[0] * pixelRatio,\n            textState.scale[1] * pixelRatio\n        ];\n        const align = textState.justify ? (0, $8243e906fae47bbe$export$91a016276e4aee96)[textState.justify] : $6526fa4ee42dc39d$var$horizontalTextAlign(Array.isArray(text) ? text[0] : text, textState.textAlign || (0, $d4aabc5c971073f1$export$94d53b95641b5766));\n        const strokeWidth = strokeKey && strokeState.lineWidth ? strokeState.lineWidth : 0;\n        const chunks = Array.isArray(text) ? text : String(text).split('\\n').reduce($6526fa4ee42dc39d$var$createTextChunks, []);\n        const { width: width, height: height, widths: widths, heights: heights, lineWidths: lineWidths } = (0, $d4aabc5c971073f1$export$7d7c13020df1e791)(textState, chunks);\n        const renderWidth = width + strokeWidth;\n        const contextInstructions = [];\n        // make canvas 2 pixels wider to account for italic text width measurement errors\n        const w = (renderWidth + 2) * scale[0];\n        const h = (height + strokeWidth) * scale[1];\n        /** @type {import(\"../canvas.js\").Label} */ const label = {\n            width: w < 0 ? Math.floor(w) : Math.ceil(w),\n            height: h < 0 ? Math.floor(h) : Math.ceil(h),\n            contextInstructions: contextInstructions\n        };\n        if (scale[0] != 1 || scale[1] != 1) contextInstructions.push('scale', scale);\n        if (strokeKey) {\n            contextInstructions.push('strokeStyle', strokeState.strokeStyle);\n            contextInstructions.push('lineWidth', strokeWidth);\n            contextInstructions.push('lineCap', strokeState.lineCap);\n            contextInstructions.push('lineJoin', strokeState.lineJoin);\n            contextInstructions.push('miterLimit', strokeState.miterLimit);\n            contextInstructions.push('setLineDash', [\n                strokeState.lineDash\n            ]);\n            contextInstructions.push('lineDashOffset', strokeState.lineDashOffset);\n        }\n        if (fillKey) contextInstructions.push('fillStyle', fillState.fillStyle);\n        contextInstructions.push('textBaseline', 'middle');\n        contextInstructions.push('textAlign', 'center');\n        const leftRight = 0.5 - align;\n        let x = align * renderWidth + leftRight * strokeWidth;\n        const strokeInstructions = [];\n        const fillInstructions = [];\n        let lineHeight = 0;\n        let lineOffset = 0;\n        let widthHeightIndex = 0;\n        let lineWidthIndex = 0;\n        let previousFont;\n        for(let i = 0, ii = chunks.length; i < ii; i += 2){\n            const text = chunks[i];\n            if (text === '\\n') {\n                lineOffset += lineHeight;\n                lineHeight = 0;\n                x = align * renderWidth + leftRight * strokeWidth;\n                ++lineWidthIndex;\n                continue;\n            }\n            const font = chunks[i + 1] || textState.font;\n            if (font !== previousFont) {\n                if (strokeKey) strokeInstructions.push('font', font);\n                if (fillKey) fillInstructions.push('font', font);\n                previousFont = font;\n            }\n            lineHeight = Math.max(lineHeight, heights[widthHeightIndex]);\n            const fillStrokeArgs = [\n                text,\n                x + leftRight * widths[widthHeightIndex] + align * (widths[widthHeightIndex] - lineWidths[lineWidthIndex]),\n                0.5 * (strokeWidth + lineHeight) + lineOffset\n            ];\n            x += widths[widthHeightIndex];\n            if (strokeKey) strokeInstructions.push('strokeText', fillStrokeArgs);\n            if (fillKey) fillInstructions.push('fillText', fillStrokeArgs);\n            ++widthHeightIndex;\n        }\n        Array.prototype.push.apply(contextInstructions, strokeInstructions);\n        Array.prototype.push.apply(contextInstructions, fillInstructions);\n        this.labels_[key] = label;\n        return label;\n    }\n    /**\r\n   * @param {CanvasRenderingContext2D} context Context.\r\n   * @param {import(\"../../coordinate.js\").Coordinate} p1 1st point of the background box.\r\n   * @param {import(\"../../coordinate.js\").Coordinate} p2 2nd point of the background box.\r\n   * @param {import(\"../../coordinate.js\").Coordinate} p3 3rd point of the background box.\r\n   * @param {import(\"../../coordinate.js\").Coordinate} p4 4th point of the background box.\r\n   * @param {Array<*>} fillInstruction Fill instruction.\r\n   * @param {Array<*>} strokeInstruction Stroke instruction.\r\n   */ replayTextBackground_(context, p1, p2, p3, p4, fillInstruction, strokeInstruction) {\n        context.beginPath();\n        context.moveTo.apply(context, p1);\n        context.lineTo.apply(context, p2);\n        context.lineTo.apply(context, p3);\n        context.lineTo.apply(context, p4);\n        context.lineTo.apply(context, p1);\n        if (fillInstruction) {\n            this.alignAndScaleFill_ = /** @type {number} */ fillInstruction[2];\n            context.fillStyle = /** @type {string} */ fillInstruction[1];\n            this.fill_(context);\n        }\n        if (strokeInstruction) {\n            this.setStrokeStyle_(context, /** @type {Array<*>} */ strokeInstruction);\n            context.stroke();\n        }\n    }\n    /**\r\n   * @private\r\n   * @param {number} sheetWidth Width of the sprite sheet.\r\n   * @param {number} sheetHeight Height of the sprite sheet.\r\n   * @param {number} centerX X.\r\n   * @param {number} centerY Y.\r\n   * @param {number} width Width.\r\n   * @param {number} height Height.\r\n   * @param {number} anchorX Anchor X.\r\n   * @param {number} anchorY Anchor Y.\r\n   * @param {number} originX Origin X.\r\n   * @param {number} originY Origin Y.\r\n   * @param {number} rotation Rotation.\r\n   * @param {import(\"../../size.js\").Size} scale Scale.\r\n   * @param {boolean} snapToPixel Snap to pixel.\r\n   * @param {Array<number>} padding Padding.\r\n   * @param {boolean} fillStroke Background fill or stroke.\r\n   * @param {import(\"../../Feature.js\").FeatureLike} feature Feature.\r\n   * @return {ImageOrLabelDimensions} Dimensions for positioning and decluttering the image or label.\r\n   */ calculateImageOrLabelDimensions_(sheetWidth, sheetHeight, centerX, centerY, width, height, anchorX, anchorY, originX, originY, rotation, scale, snapToPixel, padding, fillStroke, feature) {\n        anchorX *= scale[0];\n        anchorY *= scale[1];\n        let x = centerX - anchorX;\n        let y = centerY - anchorY;\n        const w = width + originX > sheetWidth ? sheetWidth - originX : width;\n        const h = height + originY > sheetHeight ? sheetHeight - originY : height;\n        const boxW = padding[3] + w * scale[0] + padding[1];\n        const boxH = padding[0] + h * scale[1] + padding[2];\n        const boxX = x - padding[3];\n        const boxY = y - padding[0];\n        if (fillStroke || rotation !== 0) {\n            $6526fa4ee42dc39d$var$p1[0] = boxX;\n            $6526fa4ee42dc39d$var$p4[0] = boxX;\n            $6526fa4ee42dc39d$var$p1[1] = boxY;\n            $6526fa4ee42dc39d$var$p2[1] = boxY;\n            $6526fa4ee42dc39d$var$p2[0] = boxX + boxW;\n            $6526fa4ee42dc39d$var$p3[0] = $6526fa4ee42dc39d$var$p2[0];\n            $6526fa4ee42dc39d$var$p3[1] = boxY + boxH;\n            $6526fa4ee42dc39d$var$p4[1] = $6526fa4ee42dc39d$var$p3[1];\n        }\n        let transform;\n        if (rotation !== 0) {\n            transform = (0, $e22e7611e69f42a9$export$f672e0b6f7222cd7)((0, $e22e7611e69f42a9$export$185802fd694ee1f5)(), centerX, centerY, 1, 1, rotation, -centerX, -centerY);\n            (0, $e22e7611e69f42a9$export$5635d7ef4b8fee1c)(transform, $6526fa4ee42dc39d$var$p1);\n            (0, $e22e7611e69f42a9$export$5635d7ef4b8fee1c)(transform, $6526fa4ee42dc39d$var$p2);\n            (0, $e22e7611e69f42a9$export$5635d7ef4b8fee1c)(transform, $6526fa4ee42dc39d$var$p3);\n            (0, $e22e7611e69f42a9$export$5635d7ef4b8fee1c)(transform, $6526fa4ee42dc39d$var$p4);\n            (0, $6da4c8ed3074c92b$export$958e3e1a02eac4b6)(Math.min($6526fa4ee42dc39d$var$p1[0], $6526fa4ee42dc39d$var$p2[0], $6526fa4ee42dc39d$var$p3[0], $6526fa4ee42dc39d$var$p4[0]), Math.min($6526fa4ee42dc39d$var$p1[1], $6526fa4ee42dc39d$var$p2[1], $6526fa4ee42dc39d$var$p3[1], $6526fa4ee42dc39d$var$p4[1]), Math.max($6526fa4ee42dc39d$var$p1[0], $6526fa4ee42dc39d$var$p2[0], $6526fa4ee42dc39d$var$p3[0], $6526fa4ee42dc39d$var$p4[0]), Math.max($6526fa4ee42dc39d$var$p1[1], $6526fa4ee42dc39d$var$p2[1], $6526fa4ee42dc39d$var$p3[1], $6526fa4ee42dc39d$var$p4[1]), $6526fa4ee42dc39d$var$tmpExtent);\n        } else (0, $6da4c8ed3074c92b$export$958e3e1a02eac4b6)(Math.min(boxX, boxX + boxW), Math.min(boxY, boxY + boxH), Math.max(boxX, boxX + boxW), Math.max(boxY, boxY + boxH), $6526fa4ee42dc39d$var$tmpExtent);\n        if (snapToPixel) {\n            x = Math.round(x);\n            y = Math.round(y);\n        }\n        return {\n            drawImageX: x,\n            drawImageY: y,\n            drawImageW: w,\n            drawImageH: h,\n            originX: originX,\n            originY: originY,\n            declutterBox: {\n                minX: $6526fa4ee42dc39d$var$tmpExtent[0],\n                minY: $6526fa4ee42dc39d$var$tmpExtent[1],\n                maxX: $6526fa4ee42dc39d$var$tmpExtent[2],\n                maxY: $6526fa4ee42dc39d$var$tmpExtent[3],\n                value: feature\n            },\n            canvasTransform: transform,\n            scale: scale\n        };\n    }\n    /**\r\n   * @private\r\n   * @param {CanvasRenderingContext2D} context Context.\r\n   * @param {import('../../size.js').Size} scaledCanvasSize Scaled canvas size.\r\n   * @param {import(\"../canvas.js\").Label|HTMLImageElement|HTMLCanvasElement|HTMLVideoElement} imageOrLabel Image.\r\n   * @param {ImageOrLabelDimensions} dimensions Dimensions.\r\n   * @param {number} opacity Opacity.\r\n   * @param {Array<*>} fillInstruction Fill instruction.\r\n   * @param {Array<*>} strokeInstruction Stroke instruction.\r\n   * @return {boolean} The image or label was rendered.\r\n   */ replayImageOrLabel_(context, scaledCanvasSize, imageOrLabel, dimensions, opacity, fillInstruction, strokeInstruction) {\n        const fillStroke = !!(fillInstruction || strokeInstruction);\n        const box = dimensions.declutterBox;\n        const strokePadding = strokeInstruction ? strokeInstruction[2] * dimensions.scale[0] / 2 : 0;\n        const intersects = box.minX - strokePadding <= scaledCanvasSize[0] && box.maxX + strokePadding >= 0 && box.minY - strokePadding <= scaledCanvasSize[1] && box.maxY + strokePadding >= 0;\n        if (intersects) {\n            if (fillStroke) this.replayTextBackground_(context, $6526fa4ee42dc39d$var$p1, $6526fa4ee42dc39d$var$p2, $6526fa4ee42dc39d$var$p3, $6526fa4ee42dc39d$var$p4, /** @type {Array<*>} */ fillInstruction, /** @type {Array<*>} */ strokeInstruction);\n            (0, $d4aabc5c971073f1$export$3cb6f3a6e49cc0ee)(context, dimensions.canvasTransform, opacity, imageOrLabel, dimensions.originX, dimensions.originY, dimensions.drawImageW, dimensions.drawImageH, dimensions.drawImageX, dimensions.drawImageY, dimensions.scale);\n        }\n        return true;\n    }\n    /**\r\n   * @private\r\n   * @param {CanvasRenderingContext2D} context Context.\r\n   */ fill_(context) {\n        const alignAndScale = this.alignAndScaleFill_;\n        if (alignAndScale) {\n            const origin = (0, $e22e7611e69f42a9$export$5635d7ef4b8fee1c)(this.renderedTransform_, [\n                0,\n                0\n            ]);\n            const repeatSize = 512 * this.pixelRatio;\n            context.save();\n            context.translate(origin[0] % repeatSize, origin[1] % repeatSize);\n            if (alignAndScale !== 1) context.scale(alignAndScale, alignAndScale);\n            context.rotate(this.viewRotation_);\n        }\n        context.fill();\n        if (alignAndScale) context.restore();\n    }\n    /**\r\n   * @private\r\n   * @param {CanvasRenderingContext2D} context Context.\r\n   * @param {Array<*>} instruction Instruction.\r\n   */ setStrokeStyle_(context, instruction) {\n        context.strokeStyle = /** @type {import(\"../../colorlike.js\").ColorLike} */ instruction[1];\n        context.lineWidth = /** @type {number} */ instruction[2];\n        context.lineCap = /** @type {CanvasLineCap} */ instruction[3];\n        context.lineJoin = /** @type {CanvasLineJoin} */ instruction[4];\n        context.miterLimit = /** @type {number} */ instruction[5];\n        context.lineDashOffset = /** @type {number} */ instruction[7];\n        context.setLineDash(/** @type {Array<number>} */ instruction[6]);\n    }\n    /**\r\n   * @private\r\n   * @param {string|Array<string>} text The text to draw.\r\n   * @param {string} textKey The key of the text state.\r\n   * @param {string} strokeKey The key for the stroke state.\r\n   * @param {string} fillKey The key for the fill state.\r\n   * @return {{label: import(\"../canvas.js\").Label, anchorX: number, anchorY: number}} The text image and its anchor.\r\n   */ drawLabelWithPointPlacement_(text, textKey, strokeKey, fillKey) {\n        const textState = this.textStates[textKey];\n        const label = this.createLabel(text, textKey, fillKey, strokeKey);\n        const strokeState = this.strokeStates[strokeKey];\n        const pixelRatio = this.pixelRatio;\n        const align = $6526fa4ee42dc39d$var$horizontalTextAlign(Array.isArray(text) ? text[0] : text, textState.textAlign || (0, $d4aabc5c971073f1$export$94d53b95641b5766));\n        const baseline = (0, $8243e906fae47bbe$export$91a016276e4aee96)[textState.textBaseline || (0, $d4aabc5c971073f1$export$cf2279a1bff62eb)];\n        const strokeWidth = strokeState && strokeState.lineWidth ? strokeState.lineWidth : 0;\n        // Remove the 2 pixels we added in createLabel() for the anchor\n        const width = label.width / pixelRatio - 2 * textState.scale[0];\n        const anchorX = align * width + 2 * (0.5 - align) * strokeWidth;\n        const anchorY = baseline * label.height / pixelRatio + 2 * (0.5 - baseline) * strokeWidth;\n        return {\n            label: label,\n            anchorX: anchorX,\n            anchorY: anchorY\n        };\n    }\n    /**\r\n   * @private\r\n   * @param {CanvasRenderingContext2D} context Context.\r\n   * @param {import('../../size.js').Size} scaledCanvasSize Scaled canvas size\r\n   * @param {import(\"../../transform.js\").Transform} transform Transform.\r\n   * @param {Array<*>} instructions Instructions array.\r\n   * @param {boolean} snapToPixel Snap point symbols and text to integer pixels.\r\n   * @param {FeatureCallback<T>} [featureCallback] Feature callback.\r\n   * @param {import(\"../../extent.js\").Extent} [hitExtent] Only check\r\n   *     features that intersect this extent.\r\n   * @param {import(\"rbush\").default<DeclutterEntry>} [declutterTree] Declutter tree.\r\n   * @return {T|undefined} Callback result.\r\n   * @template T\r\n   */ execute_(context, scaledCanvasSize, transform, instructions, snapToPixel, featureCallback, hitExtent, declutterTree) {\n        const zIndexContext = this.zIndexContext_;\n        /** @type {Array<number>} */ let pixelCoordinates;\n        if (this.pixelCoordinates_ && (0, $b998d41b678ed5d1$export$e9bab7fafb253603)(transform, this.renderedTransform_)) pixelCoordinates = this.pixelCoordinates_;\n        else {\n            if (!this.pixelCoordinates_) this.pixelCoordinates_ = [];\n            pixelCoordinates = (0, $14c6e714516e527b$export$b92b2dedcfff79de)(this.coordinates, 0, this.coordinates.length, 2, transform, this.pixelCoordinates_);\n            (0, $e22e7611e69f42a9$export$42b4187a82d80ed0)(this.renderedTransform_, transform);\n        }\n        let i = 0; // instruction index\n        const ii = instructions.length; // end of instructions\n        let d = 0; // data index\n        let dd; // end of per-instruction data\n        let anchorX, anchorY, /** @type {import('../../style/Style.js').DeclutterMode} */ declutterMode, prevX, prevY, roundX, roundY, image, text, textKey, strokeKey, fillKey;\n        let pendingFill = 0;\n        let pendingStroke = 0;\n        const coordinateCache = this.coordinateCache_;\n        const viewRotation = this.viewRotation_;\n        const viewRotationFromTransform = Math.round(Math.atan2(-transform[1], transform[0]) * 1e12) / 1e12;\n        const state = /** @type {import(\"../../render.js\").State} */ {\n            context: context,\n            pixelRatio: this.pixelRatio,\n            resolution: this.resolution,\n            rotation: viewRotation\n        };\n        // When the batch size gets too big, performance decreases. 200 is a good\n        // balance between batch size and number of fill/stroke instructions.\n        const batchSize = this.instructions != instructions || this.overlaps ? 0 : 200;\n        let /** @type {import(\"../../Feature.js\").FeatureLike} */ feature;\n        let x, y, currentGeometry;\n        while(i < ii){\n            const instruction = instructions[i];\n            const type = /** @type {import(\"./Instruction.js\").default} */ instruction[0];\n            switch(type){\n                case (0, $cf547866e052f25b$export$2e2bcd8739ae039).BEGIN_GEOMETRY:\n                    feature = /** @type {import(\"../../Feature.js\").FeatureLike} */ instruction[1];\n                    currentGeometry = instruction[3];\n                    if (!feature.getGeometry()) i = /** @type {number} */ instruction[2];\n                    else if (hitExtent !== undefined && !(0, $6da4c8ed3074c92b$export$7b0a31e10bbff018)(hitExtent, currentGeometry.getExtent())) i = /** @type {number} */ instruction[2] + 1;\n                    else ++i;\n                    if (zIndexContext) zIndexContext.zIndex = instruction[4];\n                    break;\n                case (0, $cf547866e052f25b$export$2e2bcd8739ae039).BEGIN_PATH:\n                    if (pendingFill > batchSize) {\n                        this.fill_(context);\n                        pendingFill = 0;\n                    }\n                    if (pendingStroke > batchSize) {\n                        context.stroke();\n                        pendingStroke = 0;\n                    }\n                    if (!pendingFill && !pendingStroke) {\n                        context.beginPath();\n                        prevX = NaN;\n                        prevY = NaN;\n                    }\n                    ++i;\n                    break;\n                case (0, $cf547866e052f25b$export$2e2bcd8739ae039).CIRCLE:\n                    d = /** @type {number} */ instruction[1];\n                    const x1 = pixelCoordinates[d];\n                    const y1 = pixelCoordinates[d + 1];\n                    const x2 = pixelCoordinates[d + 2];\n                    const y2 = pixelCoordinates[d + 3];\n                    const dx = x2 - x1;\n                    const dy = y2 - y1;\n                    const r = Math.sqrt(dx * dx + dy * dy);\n                    context.moveTo(x1 + r, y1);\n                    context.arc(x1, y1, r, 0, 2 * Math.PI, true);\n                    ++i;\n                    break;\n                case (0, $cf547866e052f25b$export$2e2bcd8739ae039).CLOSE_PATH:\n                    context.closePath();\n                    ++i;\n                    break;\n                case (0, $cf547866e052f25b$export$2e2bcd8739ae039).CUSTOM:\n                    d = /** @type {number} */ instruction[1];\n                    dd = instruction[2];\n                    const geometry = /** @type {import(\"../../geom/SimpleGeometry.js\").default} */ instruction[3];\n                    const renderer = instruction[4];\n                    const fn = instruction[5];\n                    state.geometry = geometry;\n                    state.feature = feature;\n                    if (!(i in coordinateCache)) coordinateCache[i] = [];\n                    const coords = coordinateCache[i];\n                    if (fn) fn(pixelCoordinates, d, dd, 2, coords);\n                    else {\n                        coords[0] = pixelCoordinates[d];\n                        coords[1] = pixelCoordinates[d + 1];\n                        coords.length = 2;\n                    }\n                    if (zIndexContext) zIndexContext.zIndex = instruction[6];\n                    renderer(coords, state);\n                    ++i;\n                    break;\n                case (0, $cf547866e052f25b$export$2e2bcd8739ae039).DRAW_IMAGE:\n                    d = /** @type {number} */ instruction[1];\n                    dd = /** @type {number} */ instruction[2];\n                    image = /** @type {HTMLCanvasElement|HTMLVideoElement|HTMLImageElement} */ instruction[3];\n                    // Remaining arguments in DRAW_IMAGE are in alphabetical order\n                    anchorX = /** @type {number} */ instruction[4];\n                    anchorY = /** @type {number} */ instruction[5];\n                    let height = /** @type {number} */ instruction[6];\n                    const opacity = /** @type {number} */ instruction[7];\n                    const originX = /** @type {number} */ instruction[8];\n                    const originY = /** @type {number} */ instruction[9];\n                    const rotateWithView = /** @type {boolean} */ instruction[10];\n                    let rotation = /** @type {number} */ instruction[11];\n                    const scale = /** @type {import(\"../../size.js\").Size} */ instruction[12];\n                    let width = /** @type {number} */ instruction[13];\n                    declutterMode = instruction[14] || 'declutter';\n                    const declutterImageWithText = /** @type {{args: import(\"../canvas.js\").DeclutterImageWithText, declutterMode: import('../../style/Style.js').DeclutterMode}} */ instruction[15];\n                    if (!image && instruction.length >= 20) {\n                        // create label images\n                        text = /** @type {string} */ instruction[19];\n                        textKey = /** @type {string} */ instruction[20];\n                        strokeKey = /** @type {string} */ instruction[21];\n                        fillKey = /** @type {string} */ instruction[22];\n                        const labelWithAnchor = this.drawLabelWithPointPlacement_(text, textKey, strokeKey, fillKey);\n                        image = labelWithAnchor.label;\n                        instruction[3] = image;\n                        const textOffsetX = /** @type {number} */ instruction[23];\n                        anchorX = (labelWithAnchor.anchorX - textOffsetX) * this.pixelRatio;\n                        instruction[4] = anchorX;\n                        const textOffsetY = /** @type {number} */ instruction[24];\n                        anchorY = (labelWithAnchor.anchorY - textOffsetY) * this.pixelRatio;\n                        instruction[5] = anchorY;\n                        height = image.height;\n                        instruction[6] = height;\n                        width = image.width;\n                        instruction[13] = width;\n                    }\n                    let geometryWidths;\n                    if (instruction.length > 25) geometryWidths = /** @type {number} */ instruction[25];\n                    let padding, backgroundFillInstruction, backgroundStrokeInstruction;\n                    if (instruction.length > 17) {\n                        padding = /** @type {Array<number>} */ instruction[16];\n                        backgroundFillInstruction = /** @type {Array<*>} */ instruction[17];\n                        backgroundStrokeInstruction = /** @type {Array<*>} */ instruction[18];\n                    } else {\n                        padding = (0, $d4aabc5c971073f1$export$40a9eeef55665a40);\n                        backgroundFillInstruction = null;\n                        backgroundStrokeInstruction = null;\n                    }\n                    if (rotateWithView && viewRotationFromTransform) // Canvas is expected to be rotated to reverse view rotation.\n                    rotation += viewRotation;\n                    else if (!rotateWithView && !viewRotationFromTransform) // Canvas is not rotated, images need to be rotated back to be north-up.\n                    rotation -= viewRotation;\n                    let widthIndex = 0;\n                    for(; d < dd; d += 2){\n                        if (geometryWidths && geometryWidths[widthIndex++] < width / this.pixelRatio) continue;\n                        const dimensions = this.calculateImageOrLabelDimensions_(image.width, image.height, pixelCoordinates[d], pixelCoordinates[d + 1], width, height, anchorX, anchorY, originX, originY, rotation, scale, snapToPixel, padding, !!backgroundFillInstruction || !!backgroundStrokeInstruction, feature);\n                        /** @type {ReplayImageOrLabelArgs} */ const args = [\n                            context,\n                            scaledCanvasSize,\n                            image,\n                            dimensions,\n                            opacity,\n                            backgroundFillInstruction,\n                            backgroundStrokeInstruction\n                        ];\n                        if (declutterTree) {\n                            let imageArgs, imageDeclutterMode, imageDeclutterBox;\n                            if (declutterImageWithText) {\n                                const index = dd - d;\n                                if (!declutterImageWithText[index]) {\n                                    // We now have the image for an image+text combination.\n                                    declutterImageWithText[index] = {\n                                        args: args,\n                                        declutterMode: declutterMode\n                                    };\n                                    continue;\n                                }\n                                const imageDeclutter = declutterImageWithText[index];\n                                imageArgs = imageDeclutter.args;\n                                imageDeclutterMode = imageDeclutter.declutterMode;\n                                delete declutterImageWithText[index];\n                                imageDeclutterBox = $6526fa4ee42dc39d$var$getDeclutterBox(imageArgs);\n                            }\n                            // We now have image and text for an image+text combination.\n                            let renderImage, renderText;\n                            if (imageArgs && (imageDeclutterMode !== 'declutter' || !declutterTree.collides(imageDeclutterBox))) renderImage = true;\n                            if (declutterMode !== 'declutter' || !declutterTree.collides(dimensions.declutterBox)) renderText = true;\n                            if (imageDeclutterMode === 'declutter' && declutterMode === 'declutter') {\n                                const render = renderImage && renderText;\n                                renderImage = render;\n                                renderText = render;\n                            }\n                            if (renderImage) {\n                                if (imageDeclutterMode !== 'none') declutterTree.insert(imageDeclutterBox);\n                                this.replayImageOrLabel_.apply(this, imageArgs);\n                            }\n                            if (renderText) {\n                                if (declutterMode !== 'none') declutterTree.insert(dimensions.declutterBox);\n                                this.replayImageOrLabel_.apply(this, args);\n                            }\n                        } else this.replayImageOrLabel_.apply(this, args);\n                    }\n                    ++i;\n                    break;\n                case (0, $cf547866e052f25b$export$2e2bcd8739ae039).DRAW_CHARS:\n                    const begin = /** @type {number} */ instruction[1];\n                    const end = /** @type {number} */ instruction[2];\n                    const baseline = /** @type {number} */ instruction[3];\n                    const overflow = /** @type {number} */ instruction[4];\n                    fillKey = /** @type {string} */ instruction[5];\n                    const maxAngle = /** @type {number} */ instruction[6];\n                    const measurePixelRatio = /** @type {number} */ instruction[7];\n                    const offsetY = /** @type {number} */ instruction[8];\n                    strokeKey = /** @type {string} */ instruction[9];\n                    const strokeWidth = /** @type {number} */ instruction[10];\n                    text = /** @type {string|Array<string>} */ instruction[11];\n                    if (Array.isArray(text)) //FIXME Add support for rich text along lines\n                    text = text.reduce($6526fa4ee42dc39d$var$richTextToPlainText, '');\n                    textKey = /** @type {string} */ instruction[12];\n                    const pixelRatioScale = [\n                        /** @type {number} */ instruction[13],\n                        /** @type {number} */ instruction[13]\n                    ];\n                    declutterMode = instruction[14] || 'declutter';\n                    const textKeepUpright = /** @type {boolean} */ instruction[15];\n                    const textState = this.textStates[textKey];\n                    const font = textState.font;\n                    const textScale = [\n                        textState.scale[0] * measurePixelRatio,\n                        textState.scale[1] * measurePixelRatio\n                    ];\n                    let cachedWidths;\n                    if (font in this.widths_) cachedWidths = this.widths_[font];\n                    else {\n                        cachedWidths = {};\n                        this.widths_[font] = cachedWidths;\n                    }\n                    const pathLength = (0, $bf04349d827c1d16$export$153f8c6b4d8caebc)(pixelCoordinates, begin, end, 2);\n                    const textLength = Math.abs(textScale[0]) * (0, $d4aabc5c971073f1$export$915c7ba51467308f)(font, text, cachedWidths);\n                    if (overflow || textLength <= pathLength) {\n                        const textAlign = this.textStates[textKey].textAlign;\n                        const startM = (pathLength - textLength) * $6526fa4ee42dc39d$var$horizontalTextAlign(text, textAlign);\n                        const parts = (0, $f6421f31729929e6$export$153a9a17ab3e949f)(pixelCoordinates, begin, end, 2, text, startM, maxAngle, Math.abs(textScale[0]), (0, $d4aabc5c971073f1$export$915c7ba51467308f), font, cachedWidths, viewRotationFromTransform ? 0 : this.viewRotation_, textKeepUpright);\n                        drawChars: if (parts) {\n                            /** @type {Array<ReplayImageOrLabelArgs>} */ const replayImageOrLabelArgs = [];\n                            let c, cc, chars, label, part;\n                            if (strokeKey) for(c = 0, cc = parts.length; c < cc; ++c){\n                                part = parts[c]; // x, y, anchorX, rotation, chunk\n                                chars = /** @type {string} */ part[4];\n                                label = this.createLabel(chars, textKey, '', strokeKey);\n                                anchorX = /** @type {number} */ part[2] + (textScale[0] < 0 ? -strokeWidth : strokeWidth);\n                                anchorY = baseline * label.height + (0.5 - baseline) * 2 * strokeWidth * textScale[1] / textScale[0] - offsetY;\n                                const dimensions = this.calculateImageOrLabelDimensions_(label.width, label.height, part[0], part[1], label.width, label.height, anchorX, anchorY, 0, 0, part[3], pixelRatioScale, false, (0, $d4aabc5c971073f1$export$40a9eeef55665a40), false, feature);\n                                if (declutterTree && declutterMode === 'declutter' && declutterTree.collides(dimensions.declutterBox)) break drawChars;\n                                replayImageOrLabelArgs.push([\n                                    context,\n                                    scaledCanvasSize,\n                                    label,\n                                    dimensions,\n                                    1,\n                                    null,\n                                    null\n                                ]);\n                            }\n                            if (fillKey) for(c = 0, cc = parts.length; c < cc; ++c){\n                                part = parts[c]; // x, y, anchorX, rotation, chunk\n                                chars = /** @type {string} */ part[4];\n                                label = this.createLabel(chars, textKey, fillKey, '');\n                                anchorX = /** @type {number} */ part[2];\n                                anchorY = baseline * label.height - offsetY;\n                                const dimensions = this.calculateImageOrLabelDimensions_(label.width, label.height, part[0], part[1], label.width, label.height, anchorX, anchorY, 0, 0, part[3], pixelRatioScale, false, (0, $d4aabc5c971073f1$export$40a9eeef55665a40), false, feature);\n                                if (declutterTree && declutterMode === 'declutter' && declutterTree.collides(dimensions.declutterBox)) break drawChars;\n                                replayImageOrLabelArgs.push([\n                                    context,\n                                    scaledCanvasSize,\n                                    label,\n                                    dimensions,\n                                    1,\n                                    null,\n                                    null\n                                ]);\n                            }\n                            if (declutterTree && declutterMode !== 'none') declutterTree.load(replayImageOrLabelArgs.map($6526fa4ee42dc39d$var$getDeclutterBox));\n                            for(let i = 0, ii = replayImageOrLabelArgs.length; i < ii; ++i)this.replayImageOrLabel_.apply(this, replayImageOrLabelArgs[i]);\n                        }\n                    }\n                    ++i;\n                    break;\n                case (0, $cf547866e052f25b$export$2e2bcd8739ae039).END_GEOMETRY:\n                    if (featureCallback !== undefined) {\n                        feature = /** @type {import(\"../../Feature.js\").FeatureLike} */ instruction[1];\n                        const result = featureCallback(feature, currentGeometry, declutterMode);\n                        if (result) return result;\n                    }\n                    ++i;\n                    break;\n                case (0, $cf547866e052f25b$export$2e2bcd8739ae039).FILL:\n                    if (batchSize) pendingFill++;\n                    else this.fill_(context);\n                    ++i;\n                    break;\n                case (0, $cf547866e052f25b$export$2e2bcd8739ae039).MOVE_TO_LINE_TO:\n                    d = /** @type {number} */ instruction[1];\n                    dd = /** @type {number} */ instruction[2];\n                    x = pixelCoordinates[d];\n                    y = pixelCoordinates[d + 1];\n                    context.moveTo(x, y);\n                    prevX = x + 0.5 | 0;\n                    prevY = y + 0.5 | 0;\n                    for(d += 2; d < dd; d += 2){\n                        x = pixelCoordinates[d];\n                        y = pixelCoordinates[d + 1];\n                        roundX = x + 0.5 | 0;\n                        roundY = y + 0.5 | 0;\n                        if (d == dd - 2 || roundX !== prevX || roundY !== prevY) {\n                            context.lineTo(x, y);\n                            prevX = roundX;\n                            prevY = roundY;\n                        }\n                    }\n                    ++i;\n                    break;\n                case (0, $cf547866e052f25b$export$2e2bcd8739ae039).SET_FILL_STYLE:\n                    this.alignAndScaleFill_ = instruction[2];\n                    if (pendingFill) {\n                        this.fill_(context);\n                        pendingFill = 0;\n                        if (pendingStroke) {\n                            context.stroke();\n                            pendingStroke = 0;\n                        }\n                    }\n                    /** @type {import(\"../../colorlike.js\").ColorLike} */ context.fillStyle = instruction[1];\n                    ++i;\n                    break;\n                case (0, $cf547866e052f25b$export$2e2bcd8739ae039).SET_STROKE_STYLE:\n                    if (pendingStroke) {\n                        context.stroke();\n                        pendingStroke = 0;\n                    }\n                    this.setStrokeStyle_(context, /** @type {Array<*>} */ instruction);\n                    ++i;\n                    break;\n                case (0, $cf547866e052f25b$export$2e2bcd8739ae039).STROKE:\n                    if (batchSize) pendingStroke++;\n                    else context.stroke();\n                    ++i;\n                    break;\n                default:\n                    ++i;\n                    break;\n            }\n        }\n        if (pendingFill) this.fill_(context);\n        if (pendingStroke) context.stroke();\n        return undefined;\n    }\n    /**\r\n   * @param {CanvasRenderingContext2D} context Context.\r\n   * @param {import('../../size.js').Size} scaledCanvasSize Scaled canvas size.\r\n   * @param {import(\"../../transform.js\").Transform} transform Transform.\r\n   * @param {number} viewRotation View rotation.\r\n   * @param {boolean} snapToPixel Snap point symbols and text to integer pixels.\r\n   * @param {import(\"rbush\").default<DeclutterEntry>} [declutterTree] Declutter tree.\r\n   */ execute(context, scaledCanvasSize, transform, viewRotation, snapToPixel, declutterTree) {\n        this.viewRotation_ = viewRotation;\n        this.execute_(context, scaledCanvasSize, transform, this.instructions, snapToPixel, undefined, undefined, declutterTree);\n    }\n    /**\r\n   * @param {CanvasRenderingContext2D} context Context.\r\n   * @param {import(\"../../transform.js\").Transform} transform Transform.\r\n   * @param {number} viewRotation View rotation.\r\n   * @param {FeatureCallback<T>} [featureCallback] Feature callback.\r\n   * @param {import(\"../../extent.js\").Extent} [hitExtent] Only check\r\n   *     features that intersect this extent.\r\n   * @return {T|undefined} Callback result.\r\n   * @template T\r\n   */ executeHitDetection(context, transform, viewRotation, featureCallback, hitExtent) {\n        this.viewRotation_ = viewRotation;\n        return this.execute_(context, [\n            context.canvas.width,\n            context.canvas.height\n        ], transform, this.hitDetectionInstructions, true, featureCallback, hitExtent);\n    }\n}\nvar $6526fa4ee42dc39d$export$2e2bcd8739ae039 = $6526fa4ee42dc39d$var$Executor;\n\n\nconst $a34a824d875e4ea1$export$61b49a5ae59d663 = [\n    'Polygon',\n    'Circle',\n    'LineString',\n    'Image',\n    'Text',\n    'Default'\n];\nconst $a34a824d875e4ea1$export$6195a93a6c97ce02 = [\n    'Image',\n    'Text'\n];\nconst $a34a824d875e4ea1$export$d0fe61ccfaa1ca87 = $a34a824d875e4ea1$export$61b49a5ae59d663.filter((builderType)=>!$a34a824d875e4ea1$export$6195a93a6c97ce02.includes(builderType));\nclass $a34a824d875e4ea1$var$ExecutorGroup {\n    /**\r\n   * @param {import(\"../../extent.js\").Extent} maxExtent Max extent for clipping. When a\r\n   * `maxExtent` was set on the Builder for this executor group, the same `maxExtent`\r\n   * should be set here, unless the target context does not exceed that extent (which\r\n   * can be the case when rendering to tiles).\r\n   * @param {number} resolution Resolution.\r\n   * @param {number} pixelRatio Pixel ratio.\r\n   * @param {boolean} overlaps The executor group can have overlapping geometries.\r\n   * @param {!Object<string, !Object<import(\"../canvas.js\").BuilderType, import(\"../canvas.js\").SerializableInstructions>>} allInstructions\r\n   * The serializable instructions.\r\n   * @param {number} [renderBuffer] Optional rendering buffer.\r\n   * @param {boolean} [deferredRendering] Enable deferred rendering with renderDeferred().\r\n   */ constructor(maxExtent, resolution, pixelRatio, overlaps, allInstructions, renderBuffer, deferredRendering){\n        /**\r\n     * @private\r\n     * @type {import(\"../../extent.js\").Extent}\r\n     */ this.maxExtent_ = maxExtent;\n        /**\r\n     * @private\r\n     * @type {boolean}\r\n     */ this.overlaps_ = overlaps;\n        /**\r\n     * @private\r\n     * @type {number}\r\n     */ this.pixelRatio_ = pixelRatio;\n        /**\r\n     * @private\r\n     * @type {number}\r\n     */ this.resolution_ = resolution;\n        /**\r\n     * @private\r\n     * @type {number|undefined}\r\n     */ this.renderBuffer_ = renderBuffer;\n        /**\r\n     * @private\r\n     * @type {!Object<string, !Object<string, import(\"./Executor\").default>>}\r\n     */ this.executorsByZIndex_ = {};\n        /**\r\n     * @private\r\n     * @type {CanvasRenderingContext2D}\r\n     */ this.hitDetectionContext_ = null;\n        /**\r\n     * @private\r\n     * @type {import(\"../../transform.js\").Transform}\r\n     */ this.hitDetectionTransform_ = (0, $e22e7611e69f42a9$export$185802fd694ee1f5)();\n        /**\r\n     * @private\r\n     * @type {CanvasRenderingContext2D}\r\n     */ this.renderedContext_ = null;\n        /**\r\n     * @private\r\n     * @type {Object<number, Array<import(\"./ZIndexContext.js\").default>>}\r\n     */ this.deferredZIndexContexts_ = {};\n        this.createExecutors_(allInstructions, deferredRendering);\n    }\n    /**\r\n   * @param {CanvasRenderingContext2D} context Context.\r\n   * @param {import(\"../../transform.js\").Transform} transform Transform.\r\n   */ clip(context, transform) {\n        const flatClipCoords = this.getClipCoords(transform);\n        context.beginPath();\n        context.moveTo(flatClipCoords[0], flatClipCoords[1]);\n        context.lineTo(flatClipCoords[2], flatClipCoords[3]);\n        context.lineTo(flatClipCoords[4], flatClipCoords[5]);\n        context.lineTo(flatClipCoords[6], flatClipCoords[7]);\n        context.clip();\n    }\n    /**\r\n   * Create executors and populate them using the provided instructions.\r\n   * @private\r\n   * @param {!Object<string, !Object<string, import(\"../canvas.js\").SerializableInstructions>>} allInstructions The serializable instructions\r\n   * @param {boolean} deferredRendering Enable deferred rendering.\r\n   */ createExecutors_(allInstructions, deferredRendering) {\n        for(const zIndex in allInstructions){\n            let executors = this.executorsByZIndex_[zIndex];\n            if (executors === undefined) {\n                executors = {};\n                this.executorsByZIndex_[zIndex] = executors;\n            }\n            const instructionByZindex = allInstructions[zIndex];\n            for(const builderType in instructionByZindex){\n                const instructions = instructionByZindex[builderType];\n                executors[builderType] = new (0, $6526fa4ee42dc39d$export$2e2bcd8739ae039)(this.resolution_, this.pixelRatio_, this.overlaps_, instructions, deferredRendering);\n            }\n        }\n    }\n    /**\r\n   * @param {Array<import(\"../canvas.js\").BuilderType>} executors Executors.\r\n   * @return {boolean} Has executors of the provided types.\r\n   */ hasExecutors(executors) {\n        for(const zIndex in this.executorsByZIndex_){\n            const candidates = this.executorsByZIndex_[zIndex];\n            for(let i = 0, ii = executors.length; i < ii; ++i){\n                if (executors[i] in candidates) return true;\n            }\n        }\n        return false;\n    }\n    /**\r\n   * @param {import(\"../../coordinate.js\").Coordinate} coordinate Coordinate.\r\n   * @param {number} resolution Resolution.\r\n   * @param {number} rotation Rotation.\r\n   * @param {number} hitTolerance Hit tolerance in pixels.\r\n   * @param {function(import(\"../../Feature.js\").FeatureLike, import(\"../../geom/SimpleGeometry.js\").default, number): T} callback Feature callback.\r\n   * @param {Array<import(\"../../Feature.js\").FeatureLike>} declutteredFeatures Decluttered features.\r\n   * @return {T|undefined} Callback result.\r\n   * @template T\r\n   */ forEachFeatureAtCoordinate(coordinate, resolution, rotation, hitTolerance, callback, declutteredFeatures) {\n        hitTolerance = Math.round(hitTolerance);\n        const contextSize = hitTolerance * 2 + 1;\n        const transform = (0, $e22e7611e69f42a9$export$f672e0b6f7222cd7)(this.hitDetectionTransform_, hitTolerance + 0.5, hitTolerance + 0.5, 1 / resolution, -1 / resolution, -rotation, -coordinate[0], -coordinate[1]);\n        const newContext = !this.hitDetectionContext_;\n        if (newContext) this.hitDetectionContext_ = (0, $075f937d7366f1a2$export$9e05d10eae75c464)(contextSize, contextSize);\n        const context = this.hitDetectionContext_;\n        if (context.canvas.width !== contextSize || context.canvas.height !== contextSize) {\n            context.canvas.width = contextSize;\n            context.canvas.height = contextSize;\n        } else if (!newContext) context.clearRect(0, 0, contextSize, contextSize);\n        /** @type {import(\"../../extent.js\").Extent|undefined} */ let hitExtent;\n        if (this.renderBuffer_ !== undefined) {\n            hitExtent = (0, $6da4c8ed3074c92b$export$fe201bb3bbe031e9)();\n            (0, $6da4c8ed3074c92b$export$1f820e3920fa5715)(hitExtent, coordinate);\n            (0, $6da4c8ed3074c92b$export$ab1029bcae9ddb4a)(hitExtent, resolution * (this.renderBuffer_ + hitTolerance), hitExtent);\n        }\n        const indexes = $a34a824d875e4ea1$export$96fc84ea21b8269f(hitTolerance);\n        /** @type {import(\"../canvas.js\").BuilderType} */ let builderType;\n        /**\r\n     * @param {import(\"../../Feature.js\").FeatureLike} feature Feature.\r\n     * @param {import(\"../../geom/SimpleGeometry.js\").default} geometry Geometry.\r\n     * @param {import('../../style/Style.js').DeclutterMode} declutterMode Declutter mode.\r\n     * @return {T|undefined} Callback result.\r\n     */ function featureCallback(feature, geometry, declutterMode) {\n            const imageData = context.getImageData(0, 0, contextSize, contextSize).data;\n            for(let i = 0, ii = indexes.length; i < ii; i++)if (imageData[indexes[i]] > 0) {\n                if (!declutteredFeatures || declutterMode === 'none' || builderType !== 'Image' && builderType !== 'Text' || declutteredFeatures.includes(feature)) {\n                    const idx = (indexes[i] - 3) / 4;\n                    const x = hitTolerance - idx % contextSize;\n                    const y = hitTolerance - (idx / contextSize | 0);\n                    const result = callback(feature, geometry, x * x + y * y);\n                    if (result) return result;\n                }\n                context.clearRect(0, 0, contextSize, contextSize);\n                break;\n            }\n            return undefined;\n        }\n        /** @type {Array<number>} */ const zs = Object.keys(this.executorsByZIndex_).map(Number);\n        zs.sort((0, $b998d41b678ed5d1$export$fcb633242ef15540));\n        let i, j, executors, executor, result;\n        for(i = zs.length - 1; i >= 0; --i){\n            const zIndexKey = zs[i].toString();\n            executors = this.executorsByZIndex_[zIndexKey];\n            for(j = $a34a824d875e4ea1$export$61b49a5ae59d663.length - 1; j >= 0; --j){\n                builderType = $a34a824d875e4ea1$export$61b49a5ae59d663[j];\n                executor = executors[builderType];\n                if (executor !== undefined) {\n                    result = executor.executeHitDetection(context, transform, rotation, featureCallback, hitExtent);\n                    if (result) return result;\n                }\n            }\n        }\n        return undefined;\n    }\n    /**\r\n   * @param {import(\"../../transform.js\").Transform} transform Transform.\r\n   * @return {Array<number>|null} Clip coordinates.\r\n   */ getClipCoords(transform) {\n        const maxExtent = this.maxExtent_;\n        if (!maxExtent) return null;\n        const minX = maxExtent[0];\n        const minY = maxExtent[1];\n        const maxX = maxExtent[2];\n        const maxY = maxExtent[3];\n        const flatClipCoords = [\n            minX,\n            minY,\n            minX,\n            maxY,\n            maxX,\n            maxY,\n            maxX,\n            minY\n        ];\n        (0, $14c6e714516e527b$export$b92b2dedcfff79de)(flatClipCoords, 0, 8, 2, transform, flatClipCoords);\n        return flatClipCoords;\n    }\n    /**\r\n   * @return {boolean} Is empty.\r\n   */ isEmpty() {\n        return (0, $beaefe87199bb537$export$dd1bc94b04021eeb)(this.executorsByZIndex_);\n    }\n    /**\r\n   * @param {CanvasRenderingContext2D} targetContext Context.\r\n   * @param {import('../../size.js').Size} scaledCanvasSize Scale of the context.\r\n   * @param {import(\"../../transform.js\").Transform} transform Transform.\r\n   * @param {number} viewRotation View rotation.\r\n   * @param {boolean} snapToPixel Snap point symbols and test to integer pixel.\r\n   * @param {Array<import(\"../canvas.js\").BuilderType>} [builderTypes] Ordered replay types to replay.\r\n   *     Default is {@link module:ol/render/replay~ALL}\r\n   * @param {import(\"rbush\").default<import('./Executor.js').DeclutterEntry>|null} [declutterTree] Declutter tree.\r\n   *     When set to null, no decluttering is done, even when the executor group has a `ZIndexContext`.\r\n   */ execute(targetContext, scaledCanvasSize, transform, viewRotation, snapToPixel, builderTypes, declutterTree) {\n        const zs = Object.keys(this.executorsByZIndex_).map(Number);\n        zs.sort(declutterTree ? (0, $b998d41b678ed5d1$export$4fa3190a997c3d8f) : (0, $b998d41b678ed5d1$export$fcb633242ef15540));\n        builderTypes = builderTypes ? builderTypes : $a34a824d875e4ea1$export$61b49a5ae59d663;\n        const maxBuilderTypes = $a34a824d875e4ea1$export$61b49a5ae59d663.length;\n        for(let i = 0, ii = zs.length; i < ii; ++i){\n            const zIndexKey = zs[i].toString();\n            const replays = this.executorsByZIndex_[zIndexKey];\n            for(let j = 0, jj = builderTypes.length; j < jj; ++j){\n                const builderType = builderTypes[j];\n                const replay = replays[builderType];\n                if (replay !== undefined) {\n                    const zIndexContext = declutterTree === null ? undefined : replay.getZIndexContext();\n                    const context = zIndexContext ? zIndexContext.getContext() : targetContext;\n                    const requireClip = this.maxExtent_ && builderType !== 'Image' && builderType !== 'Text';\n                    if (requireClip) {\n                        context.save();\n                        // setup clipping so that the parts of over-simplified geometries are not\n                        // visible outside the current extent when panning\n                        this.clip(context, transform);\n                    }\n                    if (!zIndexContext || builderType === 'Text' || builderType === 'Image') replay.execute(context, scaledCanvasSize, transform, viewRotation, snapToPixel, declutterTree);\n                    else zIndexContext.pushFunction((context)=>replay.execute(context, scaledCanvasSize, transform, viewRotation, snapToPixel, declutterTree));\n                    if (requireClip) context.restore();\n                    if (zIndexContext) {\n                        zIndexContext.offset();\n                        const index = zs[i] * maxBuilderTypes + j;\n                        if (!this.deferredZIndexContexts_[index]) this.deferredZIndexContexts_[index] = [];\n                        this.deferredZIndexContexts_[index].push(zIndexContext);\n                    }\n                }\n            }\n        }\n        this.renderedContext_ = targetContext;\n    }\n    getDeferredZIndexContexts() {\n        return this.deferredZIndexContexts_;\n    }\n    getRenderedContext() {\n        return this.renderedContext_;\n    }\n    renderDeferred() {\n        const deferredZIndexContexts = this.deferredZIndexContexts_;\n        const zs = Object.keys(deferredZIndexContexts).map(Number).sort((0, $b998d41b678ed5d1$export$fcb633242ef15540));\n        for(let i = 0, ii = zs.length; i < ii; ++i){\n            deferredZIndexContexts[zs[i]].forEach((zIndexContext)=>{\n                zIndexContext.draw(this.renderedContext_); // FIXME Pass clip to replay for temporarily enabling clip\n                zIndexContext.clear();\n            });\n            deferredZIndexContexts[zs[i]].length = 0;\n        }\n    }\n}\n/**\r\n * This cache is used to store arrays of indexes for calculated pixel circles\r\n * to increase performance.\r\n * It is a static property to allow each Replaygroup to access it.\r\n * @type {Object<number, Array<number>>}\r\n */ const $a34a824d875e4ea1$var$circlePixelIndexArrayCache = {};\nfunction $a34a824d875e4ea1$export$96fc84ea21b8269f(radius) {\n    if ($a34a824d875e4ea1$var$circlePixelIndexArrayCache[radius] !== undefined) return $a34a824d875e4ea1$var$circlePixelIndexArrayCache[radius];\n    const size = radius * 2 + 1;\n    const maxDistanceSq = radius * radius;\n    const distances = new Array(maxDistanceSq + 1);\n    for(let i = 0; i <= radius; ++i)for(let j = 0; j <= radius; ++j){\n        const distanceSq = i * i + j * j;\n        if (distanceSq > maxDistanceSq) break;\n        let distance = distances[distanceSq];\n        if (!distance) {\n            distance = [];\n            distances[distanceSq] = distance;\n        }\n        distance.push(((radius + i) * size + (radius + j)) * 4 + 3);\n        if (i > 0) distance.push(((radius - i) * size + (radius + j)) * 4 + 3);\n        if (j > 0) {\n            distance.push(((radius + i) * size + (radius - j)) * 4 + 3);\n            if (i > 0) distance.push(((radius - i) * size + (radius - j)) * 4 + 3);\n        }\n    }\n    const pixelIndex = [];\n    for(let i = 0, ii = distances.length; i < ii; ++i)if (distances[i]) pixelIndex.push(...distances[i]);\n    $a34a824d875e4ea1$var$circlePixelIndexArrayCache[radius] = pixelIndex;\n    return pixelIndex;\n}\nvar $a34a824d875e4ea1$export$2e2bcd8739ae039 = $a34a824d875e4ea1$var$ExecutorGroup;\n\n\n/**\r\n * @module ol/render/canvas/hitdetect\r\n */ \n\n\n\n\n\n/**\r\n * @module ol/render/canvas/Immediate\r\n */ // FIXME test, especially polygons with holes and multipolygons\n// FIXME need to handle large thick features (where pixel size matters)\n// FIXME add offset and end to ol/geom/flat/transform~transform2D?\n\n\n\n\n\n\n\n\n\n/**\r\n * @classdesc\r\n * A concrete subclass of {@link module:ol/render/VectorContext~VectorContext} that implements\r\n * direct rendering of features and geometries to an HTML5 Canvas context.\r\n * Instances of this class are created internally by the library and\r\n * provided to application code as vectorContext member of the\r\n * {@link module:ol/render/Event~RenderEvent} object associated with postcompose, precompose and\r\n * render events emitted by layers and maps.\r\n */ class $7b0c2128a27f5020$var$CanvasImmediateRenderer extends (0, $eb0e5c3938110b4c$export$2e2bcd8739ae039) {\n    /**\r\n   * @param {CanvasRenderingContext2D} context Context.\r\n   * @param {number} pixelRatio Pixel ratio.\r\n   * @param {import(\"../../extent.js\").Extent} extent Extent.\r\n   * @param {import(\"../../transform.js\").Transform} transform Transform.\r\n   * @param {number} viewRotation View rotation.\r\n   * @param {number} [squaredTolerance] Optional squared tolerance for simplification.\r\n   * @param {import(\"../../proj.js\").TransformFunction} [userTransform] Transform from user to view projection.\r\n   */ constructor(context, pixelRatio, extent, transform, viewRotation, squaredTolerance, userTransform){\n        super();\n        /**\r\n     * @private\r\n     * @type {CanvasRenderingContext2D}\r\n     */ this.context_ = context;\n        /**\r\n     * @private\r\n     * @type {number}\r\n     */ this.pixelRatio_ = pixelRatio;\n        /**\r\n     * @private\r\n     * @type {import(\"../../extent.js\").Extent}\r\n     */ this.extent_ = extent;\n        /**\r\n     * @private\r\n     * @type {import(\"../../transform.js\").Transform}\r\n     */ this.transform_ = transform;\n        /**\r\n     * @private\r\n     * @type {number}\r\n     */ this.transformRotation_ = transform ? (0, $6b000a049d919fe5$export$a81f732198733497)(Math.atan2(transform[1], transform[0]), 10) : 0;\n        /**\r\n     * @private\r\n     * @type {number}\r\n     */ this.viewRotation_ = viewRotation;\n        /**\r\n     * @private\r\n     * @type {number}\r\n     */ this.squaredTolerance_ = squaredTolerance;\n        /**\r\n     * @private\r\n     * @type {import(\"../../proj.js\").TransformFunction}\r\n     */ this.userTransform_ = userTransform;\n        /**\r\n     * @private\r\n     * @type {?import(\"../canvas.js\").FillState}\r\n     */ this.contextFillState_ = null;\n        /**\r\n     * @private\r\n     * @type {?import(\"../canvas.js\").StrokeState}\r\n     */ this.contextStrokeState_ = null;\n        /**\r\n     * @private\r\n     * @type {?import(\"../canvas.js\").TextState}\r\n     */ this.contextTextState_ = null;\n        /**\r\n     * @private\r\n     * @type {?import(\"../canvas.js\").FillState}\r\n     */ this.fillState_ = null;\n        /**\r\n     * @private\r\n     * @type {?import(\"../canvas.js\").StrokeState}\r\n     */ this.strokeState_ = null;\n        /**\r\n     * @private\r\n     * @type {import('../../DataTile.js').ImageLike}\r\n     */ this.image_ = null;\n        /**\r\n     * @private\r\n     * @type {number}\r\n     */ this.imageAnchorX_ = 0;\n        /**\r\n     * @private\r\n     * @type {number}\r\n     */ this.imageAnchorY_ = 0;\n        /**\r\n     * @private\r\n     * @type {number}\r\n     */ this.imageHeight_ = 0;\n        /**\r\n     * @private\r\n     * @type {number}\r\n     */ this.imageOpacity_ = 0;\n        /**\r\n     * @private\r\n     * @type {number}\r\n     */ this.imageOriginX_ = 0;\n        /**\r\n     * @private\r\n     * @type {number}\r\n     */ this.imageOriginY_ = 0;\n        /**\r\n     * @private\r\n     * @type {boolean}\r\n     */ this.imageRotateWithView_ = false;\n        /**\r\n     * @private\r\n     * @type {number}\r\n     */ this.imageRotation_ = 0;\n        /**\r\n     * @private\r\n     * @type {import(\"../../size.js\").Size}\r\n     */ this.imageScale_ = [\n            0,\n            0\n        ];\n        /**\r\n     * @private\r\n     * @type {number}\r\n     */ this.imageWidth_ = 0;\n        /**\r\n     * @private\r\n     * @type {string}\r\n     */ this.text_ = '';\n        /**\r\n     * @private\r\n     * @type {number}\r\n     */ this.textOffsetX_ = 0;\n        /**\r\n     * @private\r\n     * @type {number}\r\n     */ this.textOffsetY_ = 0;\n        /**\r\n     * @private\r\n     * @type {boolean}\r\n     */ this.textRotateWithView_ = false;\n        /**\r\n     * @private\r\n     * @type {number}\r\n     */ this.textRotation_ = 0;\n        /**\r\n     * @private\r\n     * @type {import(\"../../size.js\").Size}\r\n     */ this.textScale_ = [\n            0,\n            0\n        ];\n        /**\r\n     * @private\r\n     * @type {?import(\"../canvas.js\").FillState}\r\n     */ this.textFillState_ = null;\n        /**\r\n     * @private\r\n     * @type {?import(\"../canvas.js\").StrokeState}\r\n     */ this.textStrokeState_ = null;\n        /**\r\n     * @private\r\n     * @type {?import(\"../canvas.js\").TextState}\r\n     */ this.textState_ = null;\n        /**\r\n     * @private\r\n     * @type {Array<number>}\r\n     */ this.pixelCoordinates_ = [];\n        /**\r\n     * @private\r\n     * @type {import(\"../../transform.js\").Transform}\r\n     */ this.tmpLocalTransform_ = (0, $e22e7611e69f42a9$export$185802fd694ee1f5)();\n    }\n    /**\r\n   * @param {Array<number>} flatCoordinates Flat coordinates.\r\n   * @param {number} offset Offset.\r\n   * @param {number} end End.\r\n   * @param {number} stride Stride.\r\n   * @private\r\n   */ drawImages_(flatCoordinates, offset, end, stride) {\n        if (!this.image_) return;\n        const pixelCoordinates = (0, $14c6e714516e527b$export$b92b2dedcfff79de)(flatCoordinates, offset, end, stride, this.transform_, this.pixelCoordinates_);\n        const context = this.context_;\n        const localTransform = this.tmpLocalTransform_;\n        const alpha = context.globalAlpha;\n        if (this.imageOpacity_ != 1) context.globalAlpha = alpha * this.imageOpacity_;\n        let rotation = this.imageRotation_;\n        if (this.transformRotation_ === 0) rotation -= this.viewRotation_;\n        if (this.imageRotateWithView_) rotation += this.viewRotation_;\n        for(let i = 0, ii = pixelCoordinates.length; i < ii; i += 2){\n            const x = pixelCoordinates[i] - this.imageAnchorX_;\n            const y = pixelCoordinates[i + 1] - this.imageAnchorY_;\n            if (rotation !== 0 || this.imageScale_[0] != 1 || this.imageScale_[1] != 1) {\n                const centerX = x + this.imageAnchorX_;\n                const centerY = y + this.imageAnchorY_;\n                (0, $e22e7611e69f42a9$export$f672e0b6f7222cd7)(localTransform, centerX, centerY, 1, 1, rotation, -centerX, -centerY);\n                context.save();\n                context.transform.apply(context, localTransform);\n                context.translate(centerX, centerY);\n                context.scale(this.imageScale_[0], this.imageScale_[1]);\n                context.drawImage(this.image_, this.imageOriginX_, this.imageOriginY_, this.imageWidth_, this.imageHeight_, -this.imageAnchorX_, -this.imageAnchorY_, this.imageWidth_, this.imageHeight_);\n                context.restore();\n            } else context.drawImage(this.image_, this.imageOriginX_, this.imageOriginY_, this.imageWidth_, this.imageHeight_, x, y, this.imageWidth_, this.imageHeight_);\n        }\n        if (this.imageOpacity_ != 1) context.globalAlpha = alpha;\n    }\n    /**\r\n   * @param {Array<number>} flatCoordinates Flat coordinates.\r\n   * @param {number} offset Offset.\r\n   * @param {number} end End.\r\n   * @param {number} stride Stride.\r\n   * @private\r\n   */ drawText_(flatCoordinates, offset, end, stride) {\n        if (!this.textState_ || this.text_ === '') return;\n        if (this.textFillState_) this.setContextFillState_(this.textFillState_);\n        if (this.textStrokeState_) this.setContextStrokeState_(this.textStrokeState_);\n        this.setContextTextState_(this.textState_);\n        const pixelCoordinates = (0, $14c6e714516e527b$export$b92b2dedcfff79de)(flatCoordinates, offset, end, stride, this.transform_, this.pixelCoordinates_);\n        const context = this.context_;\n        let rotation = this.textRotation_;\n        if (this.transformRotation_ === 0) rotation -= this.viewRotation_;\n        if (this.textRotateWithView_) rotation += this.viewRotation_;\n        for(; offset < end; offset += stride){\n            const x = pixelCoordinates[offset] + this.textOffsetX_;\n            const y = pixelCoordinates[offset + 1] + this.textOffsetY_;\n            if (rotation !== 0 || this.textScale_[0] != 1 || this.textScale_[1] != 1) {\n                context.save();\n                context.translate(x - this.textOffsetX_, y - this.textOffsetY_);\n                context.rotate(rotation);\n                context.translate(this.textOffsetX_, this.textOffsetY_);\n                context.scale(this.textScale_[0], this.textScale_[1]);\n                if (this.textStrokeState_) context.strokeText(this.text_, 0, 0);\n                if (this.textFillState_) context.fillText(this.text_, 0, 0);\n                context.restore();\n            } else {\n                if (this.textStrokeState_) context.strokeText(this.text_, x, y);\n                if (this.textFillState_) context.fillText(this.text_, x, y);\n            }\n        }\n    }\n    /**\r\n   * @param {Array<number>} flatCoordinates Flat coordinates.\r\n   * @param {number} offset Offset.\r\n   * @param {number} end End.\r\n   * @param {number} stride Stride.\r\n   * @param {boolean} close Close.\r\n   * @private\r\n   * @return {number} end End.\r\n   */ moveToLineTo_(flatCoordinates, offset, end, stride, close) {\n        const context = this.context_;\n        const pixelCoordinates = (0, $14c6e714516e527b$export$b92b2dedcfff79de)(flatCoordinates, offset, end, stride, this.transform_, this.pixelCoordinates_);\n        context.moveTo(pixelCoordinates[0], pixelCoordinates[1]);\n        let length = pixelCoordinates.length;\n        if (close) length -= 2;\n        for(let i = 2; i < length; i += 2)context.lineTo(pixelCoordinates[i], pixelCoordinates[i + 1]);\n        if (close) context.closePath();\n        return end;\n    }\n    /**\r\n   * @param {Array<number>} flatCoordinates Flat coordinates.\r\n   * @param {number} offset Offset.\r\n   * @param {Array<number>} ends Ends.\r\n   * @param {number} stride Stride.\r\n   * @private\r\n   * @return {number} End.\r\n   */ drawRings_(flatCoordinates, offset, ends, stride) {\n        for(let i = 0, ii = ends.length; i < ii; ++i)offset = this.moveToLineTo_(flatCoordinates, offset, ends[i], stride, true);\n        return offset;\n    }\n    /**\r\n   * Render a circle geometry into the canvas.  Rendering is immediate and uses\r\n   * the current fill and stroke styles.\r\n   *\r\n   * @param {import(\"../../geom/Circle.js\").default} geometry Circle geometry.\r\n   * @api\r\n   * @override\r\n   */ drawCircle(geometry) {\n        if (this.squaredTolerance_) geometry = /** @type {import(\"../../geom/Circle.js\").default} */ geometry.simplifyTransformed(this.squaredTolerance_, this.userTransform_);\n        if (!(0, $6da4c8ed3074c92b$export$7b0a31e10bbff018)(this.extent_, geometry.getExtent())) return;\n        if (this.fillState_ || this.strokeState_) {\n            if (this.fillState_) this.setContextFillState_(this.fillState_);\n            if (this.strokeState_) this.setContextStrokeState_(this.strokeState_);\n            const pixelCoordinates = (0, $c76e993e57efc8c4$export$a3767472617c7861)(geometry, this.transform_, this.pixelCoordinates_);\n            const dx = pixelCoordinates[2] - pixelCoordinates[0];\n            const dy = pixelCoordinates[3] - pixelCoordinates[1];\n            const radius = Math.sqrt(dx * dx + dy * dy);\n            const context = this.context_;\n            context.beginPath();\n            context.arc(pixelCoordinates[0], pixelCoordinates[1], radius, 0, 2 * Math.PI);\n            if (this.fillState_) context.fill();\n            if (this.strokeState_) context.stroke();\n        }\n        if (this.text_ !== '') this.drawText_(geometry.getCenter(), 0, 2, 2);\n    }\n    /**\r\n   * Set the rendering style.  Note that since this is an immediate rendering API,\r\n   * any `zIndex` on the provided style will be ignored.\r\n   *\r\n   * @param {import(\"../../style/Style.js\").default} style The rendering style.\r\n   * @api\r\n   * @override\r\n   */ setStyle(style) {\n        this.setFillStrokeStyle(style.getFill(), style.getStroke());\n        this.setImageStyle(style.getImage());\n        this.setTextStyle(style.getText());\n    }\n    /**\r\n   * @param {import(\"../../transform.js\").Transform} transform Transform.\r\n   */ setTransform(transform) {\n        this.transform_ = transform;\n    }\n    /**\r\n   * Render a geometry into the canvas.  Call\r\n   * {@link module:ol/render/canvas/Immediate~CanvasImmediateRenderer#setStyle renderer.setStyle()} first to set the rendering style.\r\n   *\r\n   * @param {import(\"../../geom/Geometry.js\").default|import(\"../Feature.js\").default} geometry The geometry to render.\r\n   * @api\r\n   * @override\r\n   */ drawGeometry(geometry) {\n        const type = geometry.getType();\n        switch(type){\n            case 'Point':\n                this.drawPoint(/** @type {import(\"../../geom/Point.js\").default} */ geometry);\n                break;\n            case 'LineString':\n                this.drawLineString(/** @type {import(\"../../geom/LineString.js\").default} */ geometry);\n                break;\n            case 'Polygon':\n                this.drawPolygon(/** @type {import(\"../../geom/Polygon.js\").default} */ geometry);\n                break;\n            case 'MultiPoint':\n                this.drawMultiPoint(/** @type {import(\"../../geom/MultiPoint.js\").default} */ geometry);\n                break;\n            case 'MultiLineString':\n                this.drawMultiLineString(/** @type {import(\"../../geom/MultiLineString.js\").default} */ geometry);\n                break;\n            case 'MultiPolygon':\n                this.drawMultiPolygon(/** @type {import(\"../../geom/MultiPolygon.js\").default} */ geometry);\n                break;\n            case 'GeometryCollection':\n                this.drawGeometryCollection(/** @type {import(\"../../geom/GeometryCollection.js\").default} */ geometry);\n                break;\n            case 'Circle':\n                this.drawCircle(/** @type {import(\"../../geom/Circle.js\").default} */ geometry);\n                break;\n            default:\n        }\n    }\n    /**\r\n   * Render a feature into the canvas.  Note that any `zIndex` on the provided\r\n   * style will be ignored - features are rendered immediately in the order that\r\n   * this method is called.  If you need `zIndex` support, you should be using an\r\n   * {@link module:ol/layer/Vector~VectorLayer} instead.\r\n   *\r\n   * @param {import(\"../../Feature.js\").default} feature Feature.\r\n   * @param {import(\"../../style/Style.js\").default} style Style.\r\n   * @api\r\n   * @override\r\n   */ drawFeature(feature, style) {\n        const geometry = style.getGeometryFunction()(feature);\n        if (!geometry) return;\n        this.setStyle(style);\n        this.drawGeometry(geometry);\n    }\n    /**\r\n   * Render a GeometryCollection to the canvas.  Rendering is immediate and\r\n   * uses the current styles appropriate for each geometry in the collection.\r\n   *\r\n   * @param {import(\"../../geom/GeometryCollection.js\").default} geometry Geometry collection.\r\n   * @override\r\n   */ drawGeometryCollection(geometry) {\n        const geometries = geometry.getGeometriesArray();\n        for(let i = 0, ii = geometries.length; i < ii; ++i)this.drawGeometry(geometries[i]);\n    }\n    /**\r\n   * Render a Point geometry into the canvas.  Rendering is immediate and uses\r\n   * the current style.\r\n   *\r\n   * @param {import(\"../../geom/Point.js\").default|import(\"../Feature.js\").default} geometry Point geometry.\r\n   * @override\r\n   */ drawPoint(geometry) {\n        if (this.squaredTolerance_) geometry = /** @type {import(\"../../geom/Point.js\").default} */ geometry.simplifyTransformed(this.squaredTolerance_, this.userTransform_);\n        const flatCoordinates = geometry.getFlatCoordinates();\n        const stride = geometry.getStride();\n        if (this.image_) this.drawImages_(flatCoordinates, 0, flatCoordinates.length, stride);\n        if (this.text_ !== '') this.drawText_(flatCoordinates, 0, flatCoordinates.length, stride);\n    }\n    /**\r\n   * Render a MultiPoint geometry  into the canvas.  Rendering is immediate and\r\n   * uses the current style.\r\n   *\r\n   * @param {import(\"../../geom/MultiPoint.js\").default|import(\"../Feature.js\").default} geometry MultiPoint geometry.\r\n   * @override\r\n   */ drawMultiPoint(geometry) {\n        if (this.squaredTolerance_) geometry = /** @type {import(\"../../geom/MultiPoint.js\").default} */ geometry.simplifyTransformed(this.squaredTolerance_, this.userTransform_);\n        const flatCoordinates = geometry.getFlatCoordinates();\n        const stride = geometry.getStride();\n        if (this.image_) this.drawImages_(flatCoordinates, 0, flatCoordinates.length, stride);\n        if (this.text_ !== '') this.drawText_(flatCoordinates, 0, flatCoordinates.length, stride);\n    }\n    /**\r\n   * Render a LineString into the canvas.  Rendering is immediate and uses\r\n   * the current style.\r\n   *\r\n   * @param {import(\"../../geom/LineString.js\").default|import(\"../Feature.js\").default} geometry LineString geometry.\r\n   * @override\r\n   */ drawLineString(geometry) {\n        if (this.squaredTolerance_) geometry = /** @type {import(\"../../geom/LineString.js\").default} */ geometry.simplifyTransformed(this.squaredTolerance_, this.userTransform_);\n        if (!(0, $6da4c8ed3074c92b$export$7b0a31e10bbff018)(this.extent_, geometry.getExtent())) return;\n        if (this.strokeState_) {\n            this.setContextStrokeState_(this.strokeState_);\n            const context = this.context_;\n            const flatCoordinates = geometry.getFlatCoordinates();\n            context.beginPath();\n            this.moveToLineTo_(flatCoordinates, 0, flatCoordinates.length, geometry.getStride(), false);\n            context.stroke();\n        }\n        if (this.text_ !== '') {\n            const flatMidpoint = geometry.getFlatMidpoint();\n            this.drawText_(flatMidpoint, 0, 2, 2);\n        }\n    }\n    /**\r\n   * Render a MultiLineString geometry into the canvas.  Rendering is immediate\r\n   * and uses the current style.\r\n   *\r\n   * @param {import(\"../../geom/MultiLineString.js\").default|import(\"../Feature.js\").default} geometry MultiLineString geometry.\r\n   * @override\r\n   */ drawMultiLineString(geometry) {\n        if (this.squaredTolerance_) geometry = /** @type {import(\"../../geom/MultiLineString.js\").default} */ geometry.simplifyTransformed(this.squaredTolerance_, this.userTransform_);\n        const geometryExtent = geometry.getExtent();\n        if (!(0, $6da4c8ed3074c92b$export$7b0a31e10bbff018)(this.extent_, geometryExtent)) return;\n        if (this.strokeState_) {\n            this.setContextStrokeState_(this.strokeState_);\n            const context = this.context_;\n            const flatCoordinates = geometry.getFlatCoordinates();\n            let offset = 0;\n            const ends = /** @type {Array<number>} */ geometry.getEnds();\n            const stride = geometry.getStride();\n            context.beginPath();\n            for(let i = 0, ii = ends.length; i < ii; ++i)offset = this.moveToLineTo_(flatCoordinates, offset, ends[i], stride, false);\n            context.stroke();\n        }\n        if (this.text_ !== '') {\n            const flatMidpoints = geometry.getFlatMidpoints();\n            this.drawText_(flatMidpoints, 0, flatMidpoints.length, 2);\n        }\n    }\n    /**\r\n   * Render a Polygon geometry into the canvas.  Rendering is immediate and uses\r\n   * the current style.\r\n   *\r\n   * @param {import(\"../../geom/Polygon.js\").default|import(\"../Feature.js\").default} geometry Polygon geometry.\r\n   * @override\r\n   */ drawPolygon(geometry) {\n        if (this.squaredTolerance_) geometry = /** @type {import(\"../../geom/Polygon.js\").default} */ geometry.simplifyTransformed(this.squaredTolerance_, this.userTransform_);\n        if (!(0, $6da4c8ed3074c92b$export$7b0a31e10bbff018)(this.extent_, geometry.getExtent())) return;\n        if (this.strokeState_ || this.fillState_) {\n            if (this.fillState_) this.setContextFillState_(this.fillState_);\n            if (this.strokeState_) this.setContextStrokeState_(this.strokeState_);\n            const context = this.context_;\n            context.beginPath();\n            this.drawRings_(geometry.getOrientedFlatCoordinates(), 0, /** @type {Array<number>} */ geometry.getEnds(), geometry.getStride());\n            if (this.fillState_) context.fill();\n            if (this.strokeState_) context.stroke();\n        }\n        if (this.text_ !== '') {\n            const flatInteriorPoint = geometry.getFlatInteriorPoint();\n            this.drawText_(flatInteriorPoint, 0, 2, 2);\n        }\n    }\n    /**\r\n   * Render MultiPolygon geometry into the canvas.  Rendering is immediate and\r\n   * uses the current style.\r\n   * @param {import(\"../../geom/MultiPolygon.js\").default} geometry MultiPolygon geometry.\r\n   * @override\r\n   */ drawMultiPolygon(geometry) {\n        if (this.squaredTolerance_) geometry = /** @type {import(\"../../geom/MultiPolygon.js\").default} */ geometry.simplifyTransformed(this.squaredTolerance_, this.userTransform_);\n        if (!(0, $6da4c8ed3074c92b$export$7b0a31e10bbff018)(this.extent_, geometry.getExtent())) return;\n        if (this.strokeState_ || this.fillState_) {\n            if (this.fillState_) this.setContextFillState_(this.fillState_);\n            if (this.strokeState_) this.setContextStrokeState_(this.strokeState_);\n            const context = this.context_;\n            const flatCoordinates = geometry.getOrientedFlatCoordinates();\n            let offset = 0;\n            const endss = geometry.getEndss();\n            const stride = geometry.getStride();\n            context.beginPath();\n            for(let i = 0, ii = endss.length; i < ii; ++i){\n                const ends = endss[i];\n                offset = this.drawRings_(flatCoordinates, offset, ends, stride);\n            }\n            if (this.fillState_) context.fill();\n            if (this.strokeState_) context.stroke();\n        }\n        if (this.text_ !== '') {\n            const flatInteriorPoints = geometry.getFlatInteriorPoints();\n            this.drawText_(flatInteriorPoints, 0, flatInteriorPoints.length, 2);\n        }\n    }\n    /**\r\n   * @param {import(\"../canvas.js\").FillState} fillState Fill state.\r\n   * @private\r\n   */ setContextFillState_(fillState) {\n        const context = this.context_;\n        const contextFillState = this.contextFillState_;\n        if (!contextFillState) {\n            context.fillStyle = fillState.fillStyle;\n            this.contextFillState_ = {\n                fillStyle: fillState.fillStyle\n            };\n        } else if (contextFillState.fillStyle != fillState.fillStyle) {\n            contextFillState.fillStyle = fillState.fillStyle;\n            context.fillStyle = fillState.fillStyle;\n        }\n    }\n    /**\r\n   * @param {import(\"../canvas.js\").StrokeState} strokeState Stroke state.\r\n   * @private\r\n   */ setContextStrokeState_(strokeState) {\n        const context = this.context_;\n        const contextStrokeState = this.contextStrokeState_;\n        if (!contextStrokeState) {\n            context.lineCap = strokeState.lineCap;\n            context.setLineDash(strokeState.lineDash);\n            context.lineDashOffset = strokeState.lineDashOffset;\n            context.lineJoin = strokeState.lineJoin;\n            context.lineWidth = strokeState.lineWidth;\n            context.miterLimit = strokeState.miterLimit;\n            context.strokeStyle = strokeState.strokeStyle;\n            this.contextStrokeState_ = {\n                lineCap: strokeState.lineCap,\n                lineDash: strokeState.lineDash,\n                lineDashOffset: strokeState.lineDashOffset,\n                lineJoin: strokeState.lineJoin,\n                lineWidth: strokeState.lineWidth,\n                miterLimit: strokeState.miterLimit,\n                strokeStyle: strokeState.strokeStyle\n            };\n        } else {\n            if (contextStrokeState.lineCap != strokeState.lineCap) {\n                contextStrokeState.lineCap = strokeState.lineCap;\n                context.lineCap = strokeState.lineCap;\n            }\n            if (!(0, $b998d41b678ed5d1$export$e9bab7fafb253603)(contextStrokeState.lineDash, strokeState.lineDash)) context.setLineDash(contextStrokeState.lineDash = strokeState.lineDash);\n            if (contextStrokeState.lineDashOffset != strokeState.lineDashOffset) {\n                contextStrokeState.lineDashOffset = strokeState.lineDashOffset;\n                context.lineDashOffset = strokeState.lineDashOffset;\n            }\n            if (contextStrokeState.lineJoin != strokeState.lineJoin) {\n                contextStrokeState.lineJoin = strokeState.lineJoin;\n                context.lineJoin = strokeState.lineJoin;\n            }\n            if (contextStrokeState.lineWidth != strokeState.lineWidth) {\n                contextStrokeState.lineWidth = strokeState.lineWidth;\n                context.lineWidth = strokeState.lineWidth;\n            }\n            if (contextStrokeState.miterLimit != strokeState.miterLimit) {\n                contextStrokeState.miterLimit = strokeState.miterLimit;\n                context.miterLimit = strokeState.miterLimit;\n            }\n            if (contextStrokeState.strokeStyle != strokeState.strokeStyle) {\n                contextStrokeState.strokeStyle = strokeState.strokeStyle;\n                context.strokeStyle = strokeState.strokeStyle;\n            }\n        }\n    }\n    /**\r\n   * @param {import(\"../canvas.js\").TextState} textState Text state.\r\n   * @private\r\n   */ setContextTextState_(textState) {\n        const context = this.context_;\n        const contextTextState = this.contextTextState_;\n        const textAlign = textState.textAlign ? textState.textAlign : (0, $d4aabc5c971073f1$export$94d53b95641b5766);\n        if (!contextTextState) {\n            context.font = textState.font;\n            context.textAlign = textAlign;\n            context.textBaseline = textState.textBaseline;\n            this.contextTextState_ = {\n                font: textState.font,\n                textAlign: textAlign,\n                textBaseline: textState.textBaseline\n            };\n        } else {\n            if (contextTextState.font != textState.font) {\n                contextTextState.font = textState.font;\n                context.font = textState.font;\n            }\n            if (contextTextState.textAlign != textAlign) {\n                contextTextState.textAlign = textAlign;\n                context.textAlign = textAlign;\n            }\n            if (contextTextState.textBaseline != textState.textBaseline) {\n                contextTextState.textBaseline = textState.textBaseline;\n                context.textBaseline = textState.textBaseline;\n            }\n        }\n    }\n    /**\r\n   * Set the fill and stroke style for subsequent draw operations.  To clear\r\n   * either fill or stroke styles, pass null for the appropriate parameter.\r\n   *\r\n   * @param {import(\"../../style/Fill.js\").default} fillStyle Fill style.\r\n   * @param {import(\"../../style/Stroke.js\").default} strokeStyle Stroke style.\r\n   * @override\r\n   */ setFillStrokeStyle(fillStyle, strokeStyle) {\n        if (!fillStyle) this.fillState_ = null;\n        else {\n            const fillStyleColor = fillStyle.getColor();\n            this.fillState_ = {\n                fillStyle: (0, $e0807f400ec9a0a9$export$dc5b1400ac3a10a8)(fillStyleColor ? fillStyleColor : (0, $d4aabc5c971073f1$export$c495d52ee3fd74b2))\n            };\n        }\n        if (!strokeStyle) this.strokeState_ = null;\n        else {\n            const strokeStyleColor = strokeStyle.getColor();\n            const strokeStyleLineCap = strokeStyle.getLineCap();\n            const strokeStyleLineDash = strokeStyle.getLineDash();\n            const strokeStyleLineDashOffset = strokeStyle.getLineDashOffset();\n            const strokeStyleLineJoin = strokeStyle.getLineJoin();\n            const strokeStyleWidth = strokeStyle.getWidth();\n            const strokeStyleMiterLimit = strokeStyle.getMiterLimit();\n            const lineDash = strokeStyleLineDash ? strokeStyleLineDash : (0, $d4aabc5c971073f1$export$e21b4112fdc612fc);\n            this.strokeState_ = {\n                lineCap: strokeStyleLineCap !== undefined ? strokeStyleLineCap : (0, $d4aabc5c971073f1$export$17bd0c38d6ae694e),\n                lineDash: this.pixelRatio_ === 1 ? lineDash : lineDash.map((n)=>n * this.pixelRatio_),\n                lineDashOffset: (strokeStyleLineDashOffset ? strokeStyleLineDashOffset : (0, $d4aabc5c971073f1$export$e06efc2409049f76)) * this.pixelRatio_,\n                lineJoin: strokeStyleLineJoin !== undefined ? strokeStyleLineJoin : (0, $d4aabc5c971073f1$export$365eb9648cf19bd0),\n                lineWidth: (strokeStyleWidth !== undefined ? strokeStyleWidth : (0, $d4aabc5c971073f1$export$79661f132c62010e)) * this.pixelRatio_,\n                miterLimit: strokeStyleMiterLimit !== undefined ? strokeStyleMiterLimit : (0, $d4aabc5c971073f1$export$80c1c01844597b7b),\n                strokeStyle: (0, $e0807f400ec9a0a9$export$dc5b1400ac3a10a8)(strokeStyleColor ? strokeStyleColor : (0, $d4aabc5c971073f1$export$1eb2eaecacf2031e))\n            };\n        }\n    }\n    /**\r\n   * Set the image style for subsequent draw operations.  Pass null to remove\r\n   * the image style.\r\n   *\r\n   * @param {import(\"../../style/Image.js\").default} imageStyle Image style.\r\n   * @override\r\n   */ setImageStyle(imageStyle) {\n        let imageSize;\n        if (!imageStyle || !(imageSize = imageStyle.getSize())) {\n            this.image_ = null;\n            return;\n        }\n        const imagePixelRatio = imageStyle.getPixelRatio(this.pixelRatio_);\n        const imageAnchor = imageStyle.getAnchor();\n        const imageOrigin = imageStyle.getOrigin();\n        this.image_ = imageStyle.getImage(this.pixelRatio_);\n        this.imageAnchorX_ = imageAnchor[0] * imagePixelRatio;\n        this.imageAnchorY_ = imageAnchor[1] * imagePixelRatio;\n        this.imageHeight_ = imageSize[1] * imagePixelRatio;\n        this.imageOpacity_ = imageStyle.getOpacity();\n        this.imageOriginX_ = imageOrigin[0];\n        this.imageOriginY_ = imageOrigin[1];\n        this.imageRotateWithView_ = imageStyle.getRotateWithView();\n        this.imageRotation_ = imageStyle.getRotation();\n        const imageScale = imageStyle.getScaleArray();\n        this.imageScale_ = [\n            imageScale[0] * this.pixelRatio_ / imagePixelRatio,\n            imageScale[1] * this.pixelRatio_ / imagePixelRatio\n        ];\n        this.imageWidth_ = imageSize[0] * imagePixelRatio;\n    }\n    /**\r\n   * Set the text style for subsequent draw operations.  Pass null to\r\n   * remove the text style.\r\n   *\r\n   * @param {import(\"../../style/Text.js\").default} textStyle Text style.\r\n   * @override\r\n   */ setTextStyle(textStyle) {\n        if (!textStyle) this.text_ = '';\n        else {\n            const textFillStyle = textStyle.getFill();\n            if (!textFillStyle) this.textFillState_ = null;\n            else {\n                const textFillStyleColor = textFillStyle.getColor();\n                this.textFillState_ = {\n                    fillStyle: (0, $e0807f400ec9a0a9$export$dc5b1400ac3a10a8)(textFillStyleColor ? textFillStyleColor : (0, $d4aabc5c971073f1$export$c495d52ee3fd74b2))\n                };\n            }\n            const textStrokeStyle = textStyle.getStroke();\n            if (!textStrokeStyle) this.textStrokeState_ = null;\n            else {\n                const textStrokeStyleColor = textStrokeStyle.getColor();\n                const textStrokeStyleLineCap = textStrokeStyle.getLineCap();\n                const textStrokeStyleLineDash = textStrokeStyle.getLineDash();\n                const textStrokeStyleLineDashOffset = textStrokeStyle.getLineDashOffset();\n                const textStrokeStyleLineJoin = textStrokeStyle.getLineJoin();\n                const textStrokeStyleWidth = textStrokeStyle.getWidth();\n                const textStrokeStyleMiterLimit = textStrokeStyle.getMiterLimit();\n                this.textStrokeState_ = {\n                    lineCap: textStrokeStyleLineCap !== undefined ? textStrokeStyleLineCap : (0, $d4aabc5c971073f1$export$17bd0c38d6ae694e),\n                    lineDash: textStrokeStyleLineDash ? textStrokeStyleLineDash : (0, $d4aabc5c971073f1$export$e21b4112fdc612fc),\n                    lineDashOffset: textStrokeStyleLineDashOffset ? textStrokeStyleLineDashOffset : (0, $d4aabc5c971073f1$export$e06efc2409049f76),\n                    lineJoin: textStrokeStyleLineJoin !== undefined ? textStrokeStyleLineJoin : (0, $d4aabc5c971073f1$export$365eb9648cf19bd0),\n                    lineWidth: textStrokeStyleWidth !== undefined ? textStrokeStyleWidth : (0, $d4aabc5c971073f1$export$79661f132c62010e),\n                    miterLimit: textStrokeStyleMiterLimit !== undefined ? textStrokeStyleMiterLimit : (0, $d4aabc5c971073f1$export$80c1c01844597b7b),\n                    strokeStyle: (0, $e0807f400ec9a0a9$export$dc5b1400ac3a10a8)(textStrokeStyleColor ? textStrokeStyleColor : (0, $d4aabc5c971073f1$export$1eb2eaecacf2031e))\n                };\n            }\n            const textFont = textStyle.getFont();\n            const textOffsetX = textStyle.getOffsetX();\n            const textOffsetY = textStyle.getOffsetY();\n            const textRotateWithView = textStyle.getRotateWithView();\n            const textRotation = textStyle.getRotation();\n            const textScale = textStyle.getScaleArray();\n            const textText = textStyle.getText();\n            const textTextAlign = textStyle.getTextAlign();\n            const textTextBaseline = textStyle.getTextBaseline();\n            this.textState_ = {\n                font: textFont !== undefined ? textFont : (0, $d4aabc5c971073f1$export$3847dfea4f8d4dfa),\n                textAlign: textTextAlign !== undefined ? textTextAlign : (0, $d4aabc5c971073f1$export$94d53b95641b5766),\n                textBaseline: textTextBaseline !== undefined ? textTextBaseline : (0, $d4aabc5c971073f1$export$cf2279a1bff62eb)\n            };\n            this.text_ = textText !== undefined ? Array.isArray(textText) ? textText.reduce((acc, t, i)=>acc += i % 2 ? ' ' : t, '') : textText : '';\n            this.textOffsetX_ = textOffsetX !== undefined ? this.pixelRatio_ * textOffsetX : 0;\n            this.textOffsetY_ = textOffsetY !== undefined ? this.pixelRatio_ * textOffsetY : 0;\n            this.textRotateWithView_ = textRotateWithView !== undefined ? textRotateWithView : false;\n            this.textRotation_ = textRotation !== undefined ? textRotation : 0;\n            this.textScale_ = [\n                this.pixelRatio_ * textScale[0],\n                this.pixelRatio_ * textScale[1]\n            ];\n        }\n    }\n}\nvar $7b0c2128a27f5020$export$2e2bcd8739ae039 = $7b0c2128a27f5020$var$CanvasImmediateRenderer;\n\n\nconst $13dfa0283bf5c35f$export$ab51038298418f25 = 0.5;\nfunction $13dfa0283bf5c35f$export$bd05e394339d469(size, transforms, features, styleFunction, extent, resolution, rotation, squaredTolerance, projection) {\n    const userExtent = projection ? (0, $9c4744460e43e41b$export$96bfd09e2cffb006)(extent, projection) : extent;\n    const width = size[0] * $13dfa0283bf5c35f$export$ab51038298418f25;\n    const height = size[1] * $13dfa0283bf5c35f$export$ab51038298418f25;\n    const context = (0, $075f937d7366f1a2$export$9e05d10eae75c464)(width, height);\n    context.imageSmoothingEnabled = false;\n    const canvas = context.canvas;\n    const renderer = new (0, $7b0c2128a27f5020$export$2e2bcd8739ae039)(context, $13dfa0283bf5c35f$export$ab51038298418f25, extent, null, rotation, squaredTolerance, projection ? (0, $9c4744460e43e41b$export$e3c4995a701c26a3)((0, $9c4744460e43e41b$export$3973b77d5f6f2790)(), projection) : null);\n    const featureCount = features.length;\n    // Stretch hit detection index to use the whole available color range\n    const indexFactor = Math.floor(16777215 / featureCount);\n    const featuresByZIndex = {};\n    for(let i = 1; i <= featureCount; ++i){\n        const feature = features[i - 1];\n        const featureStyleFunction = feature.getStyleFunction() || styleFunction;\n        if (!featureStyleFunction) continue;\n        let styles = featureStyleFunction(feature, resolution);\n        if (!styles) continue;\n        if (!Array.isArray(styles)) styles = [\n            styles\n        ];\n        const index = i * indexFactor;\n        const color = index.toString(16).padStart(7, '#00000');\n        for(let j = 0, jj = styles.length; j < jj; ++j){\n            const originalStyle = styles[j];\n            const geometry = originalStyle.getGeometryFunction()(feature);\n            if (!geometry || !(0, $6da4c8ed3074c92b$export$7b0a31e10bbff018)(userExtent, geometry.getExtent())) continue;\n            const style = originalStyle.clone();\n            const fill = style.getFill();\n            if (fill) fill.setColor(color);\n            const stroke = style.getStroke();\n            if (stroke) {\n                stroke.setColor(color);\n                stroke.setLineDash(null);\n            }\n            style.setText(undefined);\n            const image = originalStyle.getImage();\n            if (image) {\n                const imgSize = image.getImageSize();\n                if (!imgSize) continue;\n                const imgContext = (0, $075f937d7366f1a2$export$9e05d10eae75c464)(imgSize[0], imgSize[1], undefined, {\n                    alpha: false\n                });\n                const img = imgContext.canvas;\n                imgContext.fillStyle = color;\n                imgContext.fillRect(0, 0, img.width, img.height);\n                style.setImage(new (0, $8463d325b53eeb0c$export$2e2bcd8739ae039)({\n                    img: img,\n                    anchor: image.getAnchor(),\n                    anchorXUnits: 'pixels',\n                    anchorYUnits: 'pixels',\n                    offset: image.getOrigin(),\n                    opacity: 1,\n                    size: image.getSize(),\n                    scale: image.getScale(),\n                    rotation: image.getRotation(),\n                    rotateWithView: image.getRotateWithView()\n                }));\n            }\n            const zIndex = style.getZIndex() || 0;\n            let byGeometryType = featuresByZIndex[zIndex];\n            if (!byGeometryType) {\n                byGeometryType = {};\n                featuresByZIndex[zIndex] = byGeometryType;\n                byGeometryType['Polygon'] = [];\n                byGeometryType['Circle'] = [];\n                byGeometryType['LineString'] = [];\n                byGeometryType['Point'] = [];\n            }\n            const type = geometry.getType();\n            if (type === 'GeometryCollection') {\n                const geometries = /** @type {import(\"../../geom/GeometryCollection.js\").default} */ geometry.getGeometriesArrayRecursive();\n                for(let i = 0, ii = geometries.length; i < ii; ++i){\n                    const geometry = geometries[i];\n                    byGeometryType[geometry.getType().replace('Multi', '')].push(geometry, style);\n                }\n            } else byGeometryType[type.replace('Multi', '')].push(geometry, style);\n        }\n    }\n    const zIndexKeys = Object.keys(featuresByZIndex).map(Number).sort((0, $b998d41b678ed5d1$export$fcb633242ef15540));\n    for(let i = 0, ii = zIndexKeys.length; i < ii; ++i){\n        const byGeometryType = featuresByZIndex[zIndexKeys[i]];\n        for(const type in byGeometryType){\n            const geomAndStyle = byGeometryType[type];\n            for(let j = 0, jj = geomAndStyle.length; j < jj; j += 2){\n                renderer.setStyle(geomAndStyle[j + 1]);\n                for(let k = 0, kk = transforms.length; k < kk; ++k){\n                    renderer.setTransform(transforms[k]);\n                    renderer.drawGeometry(geomAndStyle[j]);\n                }\n            }\n        }\n    }\n    return context.getImageData(0, 0, canvas.width, canvas.height);\n}\nfunction $13dfa0283bf5c35f$export$6d4d555ddbfffa32(pixel, features, imageData) {\n    /** @type {Array<F>} */ const resultFeatures = [];\n    if (imageData) {\n        const x = Math.floor(Math.round(pixel[0]) * $13dfa0283bf5c35f$export$ab51038298418f25);\n        const y = Math.floor(Math.round(pixel[1]) * $13dfa0283bf5c35f$export$ab51038298418f25);\n        // The pixel coordinate is clamped down to the hit-detect canvas' size to account\n        // for browsers returning coordinates slightly larger than the actual canvas size\n        // due to a non-integer pixel ratio.\n        const index = ((0, $6b000a049d919fe5$export$7d15b64cf5a3a4c4)(x, 0, imageData.width - 1) + (0, $6b000a049d919fe5$export$7d15b64cf5a3a4c4)(y, 0, imageData.height - 1) * imageData.width) * 4;\n        const r = imageData.data[index];\n        const g = imageData.data[index + 1];\n        const b = imageData.data[index + 2];\n        const i = b + 256 * (g + 256 * r);\n        const indexFactor = Math.floor(16777215 / features.length);\n        if (i && i % indexFactor === 0) resultFeatures.push(features[i / indexFactor - 1]);\n    }\n    return resultFeatures;\n}\n\n\n\n/**\r\n * @module ol/renderer/vector\r\n */ \n\n/**\r\n * Feature callback. The callback will be called with three arguments. The first\r\n * argument is one {@link module:ol/Feature~Feature feature} or {@link module:ol/render/Feature~RenderFeature render feature}\r\n * at the pixel, the second is the {@link module:ol/layer/Layer~Layer layer} of the feature and will be null for\r\n * unmanaged layers. The third is the {@link module:ol/geom/SimpleGeometry~SimpleGeometry} of the feature. For features\r\n * with a GeometryCollection geometry, it will be the first detected geometry from the collection.\r\n * @template T\r\n * @typedef {function(import(\"../Feature.js\").FeatureLike, import(\"../layer/Layer.js\").default<import(\"../source/Source\").default>, import(\"../geom/SimpleGeometry.js\").default): T} FeatureCallback\r\n */ /**\r\n * Tolerance for geometry simplification in device pixels.\r\n * @type {number}\r\n */ const $4b9ac454600c05d2$var$SIMPLIFY_TOLERANCE = 0.5;\n/**\r\n * @const\r\n * @type {Object<import(\"../geom/Geometry.js\").Type,\r\n *                function(import(\"../render/canvas/BuilderGroup.js\").default, import(\"../geom/Geometry.js\").default,\r\n *                         import(\"../style/Style.js\").default, Object): void>}\r\n */ const $4b9ac454600c05d2$var$GEOMETRY_RENDERERS = {\n    'Point': $4b9ac454600c05d2$var$renderPointGeometry,\n    'LineString': $4b9ac454600c05d2$var$renderLineStringGeometry,\n    'Polygon': $4b9ac454600c05d2$var$renderPolygonGeometry,\n    'MultiPoint': $4b9ac454600c05d2$var$renderMultiPointGeometry,\n    'MultiLineString': $4b9ac454600c05d2$var$renderMultiLineStringGeometry,\n    'MultiPolygon': $4b9ac454600c05d2$var$renderMultiPolygonGeometry,\n    'GeometryCollection': $4b9ac454600c05d2$var$renderGeometryCollectionGeometry,\n    'Circle': $4b9ac454600c05d2$var$renderCircleGeometry\n};\nfunction $4b9ac454600c05d2$export$531ddd8416d52dfc(feature1, feature2) {\n    return parseInt((0, $6c5e11070e371322$export$5e82334337e0f204)(feature1), 10) - parseInt((0, $6c5e11070e371322$export$5e82334337e0f204)(feature2), 10);\n}\nfunction $4b9ac454600c05d2$export$75084a70d324c1e6(resolution, pixelRatio) {\n    const tolerance = $4b9ac454600c05d2$export$bdacc5b475012edb(resolution, pixelRatio);\n    return tolerance * tolerance;\n}\nfunction $4b9ac454600c05d2$export$bdacc5b475012edb(resolution, pixelRatio) {\n    return $4b9ac454600c05d2$var$SIMPLIFY_TOLERANCE * resolution / pixelRatio;\n}\n/**\r\n * @param {import(\"../render/canvas/BuilderGroup.js\").default} builderGroup Builder group.\r\n * @param {import(\"../geom/Circle.js\").default} geometry Geometry.\r\n * @param {import(\"../style/Style.js\").default} style Style.\r\n * @param {import(\"../Feature.js\").default} feature Feature.\r\n * @param {number} [index] Render order index.\r\n */ function $4b9ac454600c05d2$var$renderCircleGeometry(builderGroup, geometry, style, feature, index) {\n    const fillStyle = style.getFill();\n    const strokeStyle = style.getStroke();\n    if (fillStyle || strokeStyle) {\n        const circleReplay = builderGroup.getBuilder(style.getZIndex(), 'Circle');\n        circleReplay.setFillStrokeStyle(fillStyle, strokeStyle);\n        circleReplay.drawCircle(geometry, feature, index);\n    }\n    const textStyle = style.getText();\n    if (textStyle && textStyle.getText()) {\n        const textReplay = builderGroup.getBuilder(style.getZIndex(), 'Text');\n        textReplay.setTextStyle(textStyle);\n        textReplay.drawText(geometry, feature);\n    }\n}\nfunction $4b9ac454600c05d2$export$36f470a33a42f413(replayGroup, feature, style, squaredTolerance, listener, transform, declutter, index) {\n    const loadingPromises = [];\n    const imageStyle = style.getImage();\n    if (imageStyle) {\n        let loading = true;\n        const imageState = imageStyle.getImageState();\n        if (imageState == (0, $7eb75c96a6b6f2c6$export$2e2bcd8739ae039).LOADED || imageState == (0, $7eb75c96a6b6f2c6$export$2e2bcd8739ae039).ERROR) loading = false;\n        else if (imageState == (0, $7eb75c96a6b6f2c6$export$2e2bcd8739ae039).IDLE) imageStyle.load();\n        if (loading) loadingPromises.push(imageStyle.ready());\n    }\n    const fillStyle = style.getFill();\n    if (fillStyle && fillStyle.loading()) loadingPromises.push(fillStyle.ready());\n    const loading = loadingPromises.length > 0;\n    if (loading) Promise.all(loadingPromises).then(()=>listener(null));\n    $4b9ac454600c05d2$var$renderFeatureInternal(replayGroup, feature, style, squaredTolerance, transform, declutter, index);\n    return loading;\n}\n/**\r\n * @param {import(\"../render/canvas/BuilderGroup.js\").default} replayGroup Replay group.\r\n * @param {import(\"../Feature.js\").FeatureLike} feature Feature.\r\n * @param {import(\"../style/Style.js\").default} style Style.\r\n * @param {number} squaredTolerance Squared tolerance.\r\n * @param {import(\"../proj.js\").TransformFunction} [transform] Optional transform function.\r\n * @param {boolean} [declutter] Enable decluttering.\r\n * @param {number} [index] Render order index..\r\n */ function $4b9ac454600c05d2$var$renderFeatureInternal(replayGroup, feature, style, squaredTolerance, transform, declutter, index) {\n    const geometry = style.getGeometryFunction()(feature);\n    if (!geometry) return;\n    const simplifiedGeometry = geometry.simplifyTransformed(squaredTolerance, transform);\n    const renderer = style.getRenderer();\n    if (renderer) $4b9ac454600c05d2$var$renderGeometry(replayGroup, simplifiedGeometry, style, feature, index);\n    else {\n        const geometryRenderer = $4b9ac454600c05d2$var$GEOMETRY_RENDERERS[simplifiedGeometry.getType()];\n        geometryRenderer(replayGroup, simplifiedGeometry, style, feature, index, declutter);\n    }\n}\n/**\r\n * @param {import(\"../render/canvas/BuilderGroup.js\").default} replayGroup Replay group.\r\n * @param {import(\"../geom/Geometry.js\").default|import(\"../render/Feature.js\").default} geometry Geometry.\r\n * @param {import(\"../style/Style.js\").default} style Style.\r\n * @param {import(\"../Feature.js\").FeatureLike} feature Feature.\r\n * @param {number} [index] Render order index.\r\n */ function $4b9ac454600c05d2$var$renderGeometry(replayGroup, geometry, style, feature, index) {\n    if (geometry.getType() == 'GeometryCollection') {\n        const geometries = /** @type {import(\"../geom/GeometryCollection.js\").default} */ geometry.getGeometries();\n        for(let i = 0, ii = geometries.length; i < ii; ++i)$4b9ac454600c05d2$var$renderGeometry(replayGroup, geometries[i], style, feature, index);\n        return;\n    }\n    const replay = replayGroup.getBuilder(style.getZIndex(), 'Default');\n    replay.drawCustom(/** @type {import(\"../geom/SimpleGeometry.js\").default} */ geometry, feature, style.getRenderer(), style.getHitDetectionRenderer(), index);\n}\n/**\r\n * @param {import(\"../render/canvas/BuilderGroup.js\").default} replayGroup Replay group.\r\n * @param {import(\"../geom/GeometryCollection.js\").default} geometry Geometry.\r\n * @param {import(\"../style/Style.js\").default} style Style.\r\n * @param {import(\"../Feature.js\").default} feature Feature.\r\n * @param {import(\"../render/canvas/BuilderGroup.js\").default} [declutterBuilderGroup] Builder for decluttering.\r\n * @param {number} [index] Render order index.\r\n */ function $4b9ac454600c05d2$var$renderGeometryCollectionGeometry(replayGroup, geometry, style, feature, declutterBuilderGroup, index) {\n    const geometries = geometry.getGeometriesArray();\n    let i, ii;\n    for(i = 0, ii = geometries.length; i < ii; ++i){\n        const geometryRenderer = $4b9ac454600c05d2$var$GEOMETRY_RENDERERS[geometries[i].getType()];\n        geometryRenderer(replayGroup, geometries[i], style, feature, declutterBuilderGroup, index);\n    }\n}\n/**\r\n * @param {import(\"../render/canvas/BuilderGroup.js\").default} builderGroup Replay group.\r\n * @param {import(\"../geom/LineString.js\").default|import(\"../render/Feature.js\").default} geometry Geometry.\r\n * @param {import(\"../style/Style.js\").default} style Style.\r\n * @param {import(\"../Feature.js\").FeatureLike} feature Feature.\r\n * @param {number} [index] Render order index.\r\n */ function $4b9ac454600c05d2$var$renderLineStringGeometry(builderGroup, geometry, style, feature, index) {\n    const strokeStyle = style.getStroke();\n    if (strokeStyle) {\n        const lineStringReplay = builderGroup.getBuilder(style.getZIndex(), 'LineString');\n        lineStringReplay.setFillStrokeStyle(null, strokeStyle);\n        lineStringReplay.drawLineString(geometry, feature, index);\n    }\n    const textStyle = style.getText();\n    if (textStyle && textStyle.getText()) {\n        const textReplay = builderGroup.getBuilder(style.getZIndex(), 'Text');\n        textReplay.setTextStyle(textStyle);\n        textReplay.drawText(geometry, feature, index);\n    }\n}\n/**\r\n * @param {import(\"../render/canvas/BuilderGroup.js\").default} builderGroup Replay group.\r\n * @param {import(\"../geom/MultiLineString.js\").default|import(\"../render/Feature.js\").default} geometry Geometry.\r\n * @param {import(\"../style/Style.js\").default} style Style.\r\n * @param {import(\"../Feature.js\").FeatureLike} feature Feature.\r\n * @param {number} [index] Render order index.\r\n */ function $4b9ac454600c05d2$var$renderMultiLineStringGeometry(builderGroup, geometry, style, feature, index) {\n    const strokeStyle = style.getStroke();\n    if (strokeStyle) {\n        const lineStringReplay = builderGroup.getBuilder(style.getZIndex(), 'LineString');\n        lineStringReplay.setFillStrokeStyle(null, strokeStyle);\n        lineStringReplay.drawMultiLineString(geometry, feature, index);\n    }\n    const textStyle = style.getText();\n    if (textStyle && textStyle.getText()) {\n        const textReplay = builderGroup.getBuilder(style.getZIndex(), 'Text');\n        textReplay.setTextStyle(textStyle);\n        textReplay.drawText(geometry, feature, index);\n    }\n}\n/**\r\n * @param {import(\"../render/canvas/BuilderGroup.js\").default} builderGroup Replay group.\r\n * @param {import(\"../geom/MultiPolygon.js\").default} geometry Geometry.\r\n * @param {import(\"../style/Style.js\").default} style Style.\r\n * @param {import(\"../Feature.js\").default} feature Feature.\r\n * @param {number} [index] Render order index.\r\n */ function $4b9ac454600c05d2$var$renderMultiPolygonGeometry(builderGroup, geometry, style, feature, index) {\n    const fillStyle = style.getFill();\n    const strokeStyle = style.getStroke();\n    if (strokeStyle || fillStyle) {\n        const polygonReplay = builderGroup.getBuilder(style.getZIndex(), 'Polygon');\n        polygonReplay.setFillStrokeStyle(fillStyle, strokeStyle);\n        polygonReplay.drawMultiPolygon(geometry, feature, index);\n    }\n    const textStyle = style.getText();\n    if (textStyle && textStyle.getText()) {\n        const textReplay = builderGroup.getBuilder(style.getZIndex(), 'Text');\n        textReplay.setTextStyle(textStyle);\n        textReplay.drawText(geometry, feature, index);\n    }\n}\n/**\r\n * @param {import(\"../render/canvas/BuilderGroup.js\").default} builderGroup Replay group.\r\n * @param {import(\"../geom/Point.js\").default|import(\"../render/Feature.js\").default} geometry Geometry.\r\n * @param {import(\"../style/Style.js\").default} style Style.\r\n * @param {import(\"../Feature.js\").FeatureLike} feature Feature.\r\n * @param {number} [index] Render order index.\r\n * @param {boolean} [declutter] Enable decluttering.\r\n */ function $4b9ac454600c05d2$var$renderPointGeometry(builderGroup, geometry, style, feature, index, declutter) {\n    const imageStyle = style.getImage();\n    const textStyle = style.getText();\n    const hasText = textStyle && textStyle.getText();\n    /** @type {import(\"../render/canvas.js\").DeclutterImageWithText} */ const declutterImageWithText = declutter && imageStyle && hasText ? {} : undefined;\n    if (imageStyle) {\n        if (imageStyle.getImageState() != (0, $7eb75c96a6b6f2c6$export$2e2bcd8739ae039).LOADED) return;\n        const imageReplay = builderGroup.getBuilder(style.getZIndex(), 'Image');\n        imageReplay.setImageStyle(imageStyle, declutterImageWithText);\n        imageReplay.drawPoint(geometry, feature, index);\n    }\n    if (hasText) {\n        const textReplay = builderGroup.getBuilder(style.getZIndex(), 'Text');\n        textReplay.setTextStyle(textStyle, declutterImageWithText);\n        textReplay.drawText(geometry, feature, index);\n    }\n}\n/**\r\n * @param {import(\"../render/canvas/BuilderGroup.js\").default} builderGroup Replay group.\r\n * @param {import(\"../geom/MultiPoint.js\").default|import(\"../render/Feature.js\").default} geometry Geometry.\r\n * @param {import(\"../style/Style.js\").default} style Style.\r\n * @param {import(\"../Feature.js\").FeatureLike} feature Feature.\r\n * @param {number} [index] Render order index.\r\n * @param {boolean} [declutter] Enable decluttering.\r\n */ function $4b9ac454600c05d2$var$renderMultiPointGeometry(builderGroup, geometry, style, feature, index, declutter) {\n    const imageStyle = style.getImage();\n    const hasImage = imageStyle && imageStyle.getOpacity() !== 0;\n    const textStyle = style.getText();\n    const hasText = textStyle && textStyle.getText();\n    /** @type {import(\"../render/canvas.js\").DeclutterImageWithText} */ const declutterImageWithText = declutter && hasImage && hasText ? {} : undefined;\n    if (hasImage) {\n        if (imageStyle.getImageState() != (0, $7eb75c96a6b6f2c6$export$2e2bcd8739ae039).LOADED) return;\n        const imageReplay = builderGroup.getBuilder(style.getZIndex(), 'Image');\n        imageReplay.setImageStyle(imageStyle, declutterImageWithText);\n        imageReplay.drawMultiPoint(geometry, feature, index);\n    }\n    if (hasText) {\n        const textReplay = builderGroup.getBuilder(style.getZIndex(), 'Text');\n        textReplay.setTextStyle(textStyle, declutterImageWithText);\n        textReplay.drawText(geometry, feature, index);\n    }\n}\n/**\r\n * @param {import(\"../render/canvas/BuilderGroup.js\").default} builderGroup Replay group.\r\n * @param {import(\"../geom/Polygon.js\").default|import(\"../render/Feature.js\").default} geometry Geometry.\r\n * @param {import(\"../style/Style.js\").default} style Style.\r\n * @param {import(\"../Feature.js\").FeatureLike} feature Feature.\r\n * @param {number} [index] Render order index.\r\n */ function $4b9ac454600c05d2$var$renderPolygonGeometry(builderGroup, geometry, style, feature, index) {\n    const fillStyle = style.getFill();\n    const strokeStyle = style.getStroke();\n    if (fillStyle || strokeStyle) {\n        const polygonReplay = builderGroup.getBuilder(style.getZIndex(), 'Polygon');\n        polygonReplay.setFillStrokeStyle(fillStyle, strokeStyle);\n        polygonReplay.drawPolygon(geometry, feature, index);\n    }\n    const textStyle = style.getText();\n    if (textStyle && textStyle.getText()) {\n        const textReplay = builderGroup.getBuilder(style.getZIndex(), 'Text');\n        textReplay.setTextStyle(textStyle);\n        textReplay.drawText(geometry, feature, index);\n    }\n}\n\n\n/**\r\n * @module ol/renderer/canvas/Layer\r\n */ \n\n\n\n\n\n\n\n/**\r\n * @module ol/renderer/Layer\r\n */ \n\n\n\nconst $cb18cdefd702a327$var$maxStaleKeys = 5;\n/**\r\n * @template {import(\"../layer/Layer.js\").default} LayerType\r\n */ class $cb18cdefd702a327$var$LayerRenderer extends (0, $1f093ab5083c8a1f$export$2e2bcd8739ae039) {\n    /**\r\n   * @param {LayerType} layer Layer.\r\n   */ constructor(layer){\n        super();\n        /**\r\n     * The renderer is initialized and ready to render.\r\n     * @type {boolean}\r\n     */ this.ready = true;\n        /** @private */ this.boundHandleImageChange_ = this.handleImageChange_.bind(this);\n        /**\r\n     * @private\r\n     * @type {LayerType}\r\n     */ this.layer_ = layer;\n        /**\r\n     * @type {Array<string>}\r\n     * @private\r\n     */ this.staleKeys_ = new Array();\n        /**\r\n     * @type {number}\r\n     * @protected\r\n     */ this.maxStaleKeys = $cb18cdefd702a327$var$maxStaleKeys;\n    }\n    /**\r\n   * @return {Array<string>} Get the list of stale keys.\r\n   */ getStaleKeys() {\n        return this.staleKeys_;\n    }\n    /**\r\n   * @param {string} key The new stale key.\r\n   */ prependStaleKey(key) {\n        this.staleKeys_.unshift(key);\n        if (this.staleKeys_.length > this.maxStaleKeys) this.staleKeys_.length = this.maxStaleKeys;\n    }\n    /**\r\n   * Asynchronous layer level hit detection.\r\n   * @param {import(\"../pixel.js\").Pixel} pixel Pixel.\r\n   * @return {Promise<Array<import(\"../Feature\").FeatureLike>>} Promise that resolves with\r\n   * an array of features.\r\n   */ getFeatures(pixel) {\n        return (0, $6c5e11070e371322$export$817eb92a8194bab0)();\n    }\n    /**\r\n   * @param {import(\"../pixel.js\").Pixel} pixel Pixel.\r\n   * @return {Uint8ClampedArray|Uint8Array|Float32Array|DataView|null} Pixel data.\r\n   */ getData(pixel) {\n        return null;\n    }\n    /**\r\n   * Determine whether render should be called.\r\n   * @abstract\r\n   * @param {import(\"../Map.js\").FrameState} frameState Frame state.\r\n   * @return {boolean} Layer is ready to be rendered.\r\n   */ prepareFrame(frameState) {\n        return (0, $6c5e11070e371322$export$817eb92a8194bab0)();\n    }\n    /**\r\n   * Render the layer.\r\n   * @abstract\r\n   * @param {import(\"../Map.js\").FrameState} frameState Frame state.\r\n   * @param {HTMLElement|null} target Target that may be used to render content to.\r\n   * @return {HTMLElement} The rendered element.\r\n   */ renderFrame(frameState, target) {\n        return (0, $6c5e11070e371322$export$817eb92a8194bab0)();\n    }\n    /**\r\n   * @abstract\r\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\r\n   * @param {import(\"../Map.js\").FrameState} frameState Frame state.\r\n   * @param {number} hitTolerance Hit tolerance in pixels.\r\n   * @param {import(\"./vector.js\").FeatureCallback<T>} callback Feature callback.\r\n   * @param {Array<import(\"./Map.js\").HitMatch<T>>} matches The hit detected matches with tolerance.\r\n   * @return {T|undefined} Callback result.\r\n   * @template T\r\n   */ forEachFeatureAtCoordinate(coordinate, frameState, hitTolerance, callback, matches) {\n        return undefined;\n    }\n    /**\r\n   * @return {LayerType} Layer.\r\n   */ getLayer() {\n        return this.layer_;\n    }\n    /**\r\n   * Perform action necessary to get the layer rendered after new fonts have loaded\r\n   * @abstract\r\n   */ handleFontsChanged() {}\n    /**\r\n   * Handle changes in image state.\r\n   * @param {import(\"../events/Event.js\").default} event Image change event.\r\n   * @private\r\n   */ handleImageChange_(event) {\n        const image = /** @type {import(\"../Image.js\").default} */ event.target;\n        if (image.getState() === (0, $7eb75c96a6b6f2c6$export$2e2bcd8739ae039).LOADED || image.getState() === (0, $7eb75c96a6b6f2c6$export$2e2bcd8739ae039).ERROR) this.renderIfReadyAndVisible();\n    }\n    /**\r\n   * Load the image if not already loaded, and register the image change\r\n   * listener if needed.\r\n   * @param {import(\"../Image.js\").default} image Image.\r\n   * @return {boolean} `true` if the image is already loaded, `false` otherwise.\r\n   * @protected\r\n   */ loadImage(image) {\n        let imageState = image.getState();\n        if (imageState != (0, $7eb75c96a6b6f2c6$export$2e2bcd8739ae039).LOADED && imageState != (0, $7eb75c96a6b6f2c6$export$2e2bcd8739ae039).ERROR) image.addEventListener((0, $294047c5e65f31a3$export$2e2bcd8739ae039).CHANGE, this.boundHandleImageChange_);\n        if (imageState == (0, $7eb75c96a6b6f2c6$export$2e2bcd8739ae039).IDLE) {\n            image.load();\n            imageState = image.getState();\n        }\n        return imageState == (0, $7eb75c96a6b6f2c6$export$2e2bcd8739ae039).LOADED;\n    }\n    /**\r\n   * @protected\r\n   */ renderIfReadyAndVisible() {\n        const layer = this.getLayer();\n        if (layer && layer.getVisible() && layer.getSourceState() === 'ready') layer.changed();\n    }\n    /**\r\n   * @param {import(\"../Map.js\").FrameState} frameState Frame state.\r\n   */ renderDeferred(frameState) {}\n    /**\r\n   * Clean up.\r\n   * @override\r\n   */ disposeInternal() {\n        delete this.layer_;\n        super.disposeInternal();\n    }\n}\nvar $cb18cdefd702a327$export$2e2bcd8739ae039 = $cb18cdefd702a327$var$LayerRenderer;\n\n\nconst $42152f52b26b6ca7$export$a166f0857c555517 = [];\n/**\r\n * @type {CanvasRenderingContext2D}\r\n */ let $42152f52b26b6ca7$var$pixelContext = null;\nfunction $42152f52b26b6ca7$var$createPixelContext() {\n    $42152f52b26b6ca7$var$pixelContext = (0, $075f937d7366f1a2$export$9e05d10eae75c464)(1, 1, undefined, {\n        willReadFrequently: true\n    });\n}\n/**\r\n * @abstract\r\n * @template {import(\"../../layer/Layer.js\").default} LayerType\r\n * @extends {LayerRenderer<LayerType>}\r\n */ class $42152f52b26b6ca7$var$CanvasLayerRenderer extends (0, $cb18cdefd702a327$export$2e2bcd8739ae039) {\n    /**\r\n   * @param {LayerType} layer Layer.\r\n   */ constructor(layer){\n        super(layer);\n        /**\r\n     * @protected\r\n     * @type {HTMLElement}\r\n     */ this.container = null;\n        /**\r\n     * @protected\r\n     * @type {number}\r\n     */ this.renderedResolution;\n        /**\r\n     * A temporary transform.  The values in this transform should only be used in a\r\n     * function that sets the values.\r\n     * @protected\r\n     * @type {import(\"../../transform.js\").Transform}\r\n     */ this.tempTransform = (0, $e22e7611e69f42a9$export$185802fd694ee1f5)();\n        /**\r\n     * The transform for rendered pixels to viewport CSS pixels.  This transform must\r\n     * be set when rendering a frame and may be used by other functions after rendering.\r\n     * @protected\r\n     * @type {import(\"../../transform.js\").Transform}\r\n     */ this.pixelTransform = (0, $e22e7611e69f42a9$export$185802fd694ee1f5)();\n        /**\r\n     * The transform for viewport CSS pixels to rendered pixels.  This transform must\r\n     * be set when rendering a frame and may be used by other functions after rendering.\r\n     * @protected\r\n     * @type {import(\"../../transform.js\").Transform}\r\n     */ this.inversePixelTransform = (0, $e22e7611e69f42a9$export$185802fd694ee1f5)();\n        /**\r\n     * @type {CanvasRenderingContext2D}\r\n     */ this.context = null;\n        /**\r\n     * @private\r\n     * @type {ZIndexContext}\r\n     */ this.deferredContext_ = null;\n        /**\r\n     * @type {boolean}\r\n     */ this.containerReused = false;\n        /**\r\n     * @protected\r\n     * @type {import(\"../../Map.js\").FrameState|null}\r\n     */ this.frameState = null;\n    }\n    /**\r\n   * @param {import('../../DataTile.js').ImageLike} image Image.\r\n   * @param {number} col The column index.\r\n   * @param {number} row The row index.\r\n   * @return {Uint8ClampedArray|null} The image data.\r\n   */ getImageData(image, col, row) {\n        if (!$42152f52b26b6ca7$var$pixelContext) $42152f52b26b6ca7$var$createPixelContext();\n        $42152f52b26b6ca7$var$pixelContext.clearRect(0, 0, 1, 1);\n        let data;\n        try {\n            $42152f52b26b6ca7$var$pixelContext.drawImage(image, col, row, 1, 1, 0, 0, 1, 1);\n            data = $42152f52b26b6ca7$var$pixelContext.getImageData(0, 0, 1, 1).data;\n        } catch  {\n            $42152f52b26b6ca7$var$pixelContext = null;\n            return null;\n        }\n        return data;\n    }\n    /**\r\n   * @param {import('../../Map.js').FrameState} frameState Frame state.\r\n   * @return {string} Background color.\r\n   */ getBackground(frameState) {\n        const layer = this.getLayer();\n        let background = layer.getBackground();\n        if (typeof background === 'function') background = background(frameState.viewState.resolution);\n        return background || undefined;\n    }\n    /**\r\n   * Get a rendering container from an existing target, if compatible.\r\n   * @param {HTMLElement} target Potential render target.\r\n   * @param {string} transform CSS transform matrix.\r\n   * @param {string} [backgroundColor] Background color.\r\n   */ useContainer(target, transform, backgroundColor) {\n        const layerClassName = this.getLayer().getClassName();\n        let container, context;\n        if (target && target.className === layerClassName && (!backgroundColor || target && target.style.backgroundColor && (0, $b998d41b678ed5d1$export$e9bab7fafb253603)((0, $322346e1ff7894ca$export$75093a47a9fa838d)(target.style.backgroundColor), (0, $322346e1ff7894ca$export$75093a47a9fa838d)(backgroundColor)))) {\n            const canvas = target.firstElementChild;\n            if (canvas instanceof HTMLCanvasElement) context = canvas.getContext('2d');\n        }\n        if (context && (0, $e22e7611e69f42a9$export$fe091d73a555748b)(context.canvas.style.transform, transform)) {\n            // Container of the previous layer renderer can be used.\n            this.container = target;\n            this.context = context;\n            this.containerReused = true;\n        } else if (this.containerReused) {\n            // Previously reused container cannot be used any more.\n            this.container = null;\n            this.context = null;\n            this.containerReused = false;\n        } else if (this.container) this.container.style.backgroundColor = null;\n        if (!this.container) {\n            container = document.createElement('div');\n            container.className = layerClassName;\n            let style = container.style;\n            style.position = 'absolute';\n            style.width = '100%';\n            style.height = '100%';\n            context = (0, $075f937d7366f1a2$export$9e05d10eae75c464)();\n            const canvas = context.canvas;\n            container.appendChild(canvas);\n            style = canvas.style;\n            style.position = 'absolute';\n            style.left = '0';\n            style.transformOrigin = 'top left';\n            this.container = container;\n            this.context = context;\n        }\n        if (!this.containerReused && backgroundColor && !this.container.style.backgroundColor) this.container.style.backgroundColor = backgroundColor;\n    }\n    /**\r\n   * @param {CanvasRenderingContext2D} context Context.\r\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\r\n   * @param {import(\"../../extent.js\").Extent} extent Clip extent.\r\n   * @protected\r\n   */ clipUnrotated(context, frameState, extent) {\n        const topLeft = (0, $6da4c8ed3074c92b$export$cb1538b07e6964ff)(extent);\n        const topRight = (0, $6da4c8ed3074c92b$export$b84fa077c8b05295)(extent);\n        const bottomRight = (0, $6da4c8ed3074c92b$export$e77c1cf70445e168)(extent);\n        const bottomLeft = (0, $6da4c8ed3074c92b$export$8d09f5e2e1bf560d)(extent);\n        (0, $e22e7611e69f42a9$export$5635d7ef4b8fee1c)(frameState.coordinateToPixelTransform, topLeft);\n        (0, $e22e7611e69f42a9$export$5635d7ef4b8fee1c)(frameState.coordinateToPixelTransform, topRight);\n        (0, $e22e7611e69f42a9$export$5635d7ef4b8fee1c)(frameState.coordinateToPixelTransform, bottomRight);\n        (0, $e22e7611e69f42a9$export$5635d7ef4b8fee1c)(frameState.coordinateToPixelTransform, bottomLeft);\n        const inverted = this.inversePixelTransform;\n        (0, $e22e7611e69f42a9$export$5635d7ef4b8fee1c)(inverted, topLeft);\n        (0, $e22e7611e69f42a9$export$5635d7ef4b8fee1c)(inverted, topRight);\n        (0, $e22e7611e69f42a9$export$5635d7ef4b8fee1c)(inverted, bottomRight);\n        (0, $e22e7611e69f42a9$export$5635d7ef4b8fee1c)(inverted, bottomLeft);\n        context.save();\n        context.beginPath();\n        context.moveTo(Math.round(topLeft[0]), Math.round(topLeft[1]));\n        context.lineTo(Math.round(topRight[0]), Math.round(topRight[1]));\n        context.lineTo(Math.round(bottomRight[0]), Math.round(bottomRight[1]));\n        context.lineTo(Math.round(bottomLeft[0]), Math.round(bottomLeft[1]));\n        context.clip();\n    }\n    /**\r\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\r\n   * @param {HTMLElement} target Target that may be used to render content to.\r\n   * @protected\r\n   */ prepareContainer(frameState, target) {\n        const extent = frameState.extent;\n        const resolution = frameState.viewState.resolution;\n        const rotation = frameState.viewState.rotation;\n        const pixelRatio = frameState.pixelRatio;\n        const width = Math.round((0, $6da4c8ed3074c92b$export$3c49c185de0c2bfc)(extent) / resolution * pixelRatio);\n        const height = Math.round((0, $6da4c8ed3074c92b$export$c08559766941f856)(extent) / resolution * pixelRatio);\n        // set forward and inverse pixel transforms\n        (0, $e22e7611e69f42a9$export$f672e0b6f7222cd7)(this.pixelTransform, frameState.size[0] / 2, frameState.size[1] / 2, 1 / pixelRatio, 1 / pixelRatio, rotation, -width / 2, -height / 2);\n        (0, $e22e7611e69f42a9$export$bd70ea2a93c0fa4)(this.inversePixelTransform, this.pixelTransform);\n        const canvasTransform = (0, $e22e7611e69f42a9$export$f84e8e69fd4488a5)(this.pixelTransform);\n        this.useContainer(target, canvasTransform, this.getBackground(frameState));\n        if (!this.containerReused) {\n            const canvas = this.context.canvas;\n            if (canvas.width != width || canvas.height != height) {\n                canvas.width = width;\n                canvas.height = height;\n            } else this.context.clearRect(0, 0, width, height);\n            if (canvasTransform !== canvas.style.transform) canvas.style.transform = canvasTransform;\n        }\n    }\n    /**\r\n   * @param {import(\"../../render/EventType.js\").default} type Event type.\r\n   * @param {CanvasRenderingContext2D} context Context.\r\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\r\n   * @private\r\n   */ dispatchRenderEvent_(type, context, frameState) {\n        const layer = this.getLayer();\n        if (layer.hasListener(type)) {\n            const event = new (0, $b80dddceb0c42ad4$export$2e2bcd8739ae039)(type, this.inversePixelTransform, frameState, context);\n            layer.dispatchEvent(event);\n        }\n    }\n    /**\r\n   * @param {CanvasRenderingContext2D} context Context.\r\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\r\n   * @protected\r\n   */ preRender(context, frameState) {\n        this.frameState = frameState;\n        if (frameState.declutter) return;\n        this.dispatchRenderEvent_((0, $f5e92a4d985a2824$export$2e2bcd8739ae039).PRERENDER, context, frameState);\n    }\n    /**\r\n   * @param {CanvasRenderingContext2D} context Context.\r\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\r\n   * @protected\r\n   */ postRender(context, frameState) {\n        if (frameState.declutter) return;\n        this.dispatchRenderEvent_((0, $f5e92a4d985a2824$export$2e2bcd8739ae039).POSTRENDER, context, frameState);\n    }\n    /**\r\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\r\n   */ renderDeferredInternal(frameState) {}\n    /**\r\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\r\n   * @return {import('../../render/canvas/ZIndexContext.js').ZIndexContextProxy} Context.\r\n   */ getRenderContext(frameState) {\n        if (frameState.declutter && !this.deferredContext_) this.deferredContext_ = new (0, $c1cb593c98d2cbd0$export$2e2bcd8739ae039)();\n        return frameState.declutter ? this.deferredContext_.getContext() : this.context;\n    }\n    /**\r\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\r\n   * @override\r\n   */ renderDeferred(frameState) {\n        if (!frameState.declutter) return;\n        this.dispatchRenderEvent_((0, $f5e92a4d985a2824$export$2e2bcd8739ae039).PRERENDER, this.context, frameState);\n        if (frameState.declutter && this.deferredContext_) {\n            this.deferredContext_.draw(this.context);\n            this.deferredContext_.clear();\n        }\n        this.renderDeferredInternal(frameState);\n        this.dispatchRenderEvent_((0, $f5e92a4d985a2824$export$2e2bcd8739ae039).POSTRENDER, this.context, frameState);\n    }\n    /**\r\n   * Creates a transform for rendering to an element that will be rotated after rendering.\r\n   * @param {import(\"../../coordinate.js\").Coordinate} center Center.\r\n   * @param {number} resolution Resolution.\r\n   * @param {number} rotation Rotation.\r\n   * @param {number} pixelRatio Pixel ratio.\r\n   * @param {number} width Width of the rendered element (in pixels).\r\n   * @param {number} height Height of the rendered element (in pixels).\r\n   * @param {number} offsetX Offset on the x-axis in view coordinates.\r\n   * @protected\r\n   * @return {!import(\"../../transform.js\").Transform} Transform.\r\n   */ getRenderTransform(center, resolution, rotation, pixelRatio, width, height, offsetX) {\n        const dx1 = width / 2;\n        const dy1 = height / 2;\n        const sx = pixelRatio / resolution;\n        const sy = -sx;\n        const dx2 = -center[0] + offsetX;\n        const dy2 = -center[1];\n        return (0, $e22e7611e69f42a9$export$f672e0b6f7222cd7)(this.tempTransform, dx1, dy1, sx, sy, -rotation, dx2, dy2);\n    }\n    /**\r\n   * Clean up.\r\n   * @override\r\n   */ disposeInternal() {\n        delete this.frameState;\n        super.disposeInternal();\n    }\n}\nvar $42152f52b26b6ca7$export$2e2bcd8739ae039 = $42152f52b26b6ca7$var$CanvasLayerRenderer;\n\n\n/**\r\n * @classdesc\r\n * Canvas renderer for vector layers.\r\n * @api\r\n */ class $659e0e97392a5f5e$var$CanvasVectorLayerRenderer extends (0, $42152f52b26b6ca7$export$2e2bcd8739ae039) {\n    /**\r\n   * @param {import(\"../../layer/BaseVector.js\").default} vectorLayer Vector layer.\r\n   */ constructor(vectorLayer){\n        super(vectorLayer);\n        /** @private */ this.boundHandleStyleImageChange_ = this.handleStyleImageChange_.bind(this);\n        /**\r\n     * @private\r\n     * @type {boolean}\r\n     */ this.animatingOrInteracting_;\n        /**\r\n     * @private\r\n     * @type {ImageData|null}\r\n     */ this.hitDetectionImageData_ = null;\n        /**\r\n     * @private\r\n     * @type {boolean}\r\n     */ this.clipped_ = false;\n        /**\r\n     * @private\r\n     * @type {Array<import(\"../../Feature.js\").default>}\r\n     */ this.renderedFeatures_ = null;\n        /**\r\n     * @private\r\n     * @type {number}\r\n     */ this.renderedRevision_ = -1;\n        /**\r\n     * @private\r\n     * @type {number}\r\n     */ this.renderedResolution_ = NaN;\n        /**\r\n     * @private\r\n     * @type {import(\"../../extent.js\").Extent}\r\n     */ this.renderedExtent_ = (0, $6da4c8ed3074c92b$export$fe201bb3bbe031e9)();\n        /**\r\n     * @private\r\n     * @type {import(\"../../extent.js\").Extent}\r\n     */ this.wrappedRenderedExtent_ = (0, $6da4c8ed3074c92b$export$fe201bb3bbe031e9)();\n        /**\r\n     * @private\r\n     * @type {number}\r\n     */ this.renderedRotation_;\n        /**\r\n     * @private\r\n     * @type {import(\"../../coordinate\").Coordinate}\r\n     */ this.renderedCenter_ = null;\n        /**\r\n     * @private\r\n     * @type {import(\"../../proj/Projection\").default}\r\n     */ this.renderedProjection_ = null;\n        /**\r\n     * @private\r\n     * @type {number}\r\n     */ this.renderedPixelRatio_ = 1;\n        /**\r\n     * @private\r\n     * @type {import(\"../../render.js\").OrderFunction|null}\r\n     */ this.renderedRenderOrder_ = null;\n        /**\r\n     * @private\r\n     * @type {boolean}\r\n     */ this.renderedFrameDeclutter_;\n        /**\r\n     * @private\r\n     * @type {import(\"../../render/canvas/ExecutorGroup\").default}\r\n     */ this.replayGroup_ = null;\n        /**\r\n     * A new replay group had to be created by `prepareFrame()`\r\n     * @type {boolean}\r\n     */ this.replayGroupChanged = true;\n        /**\r\n     * Clipping to be performed by `renderFrame()`\r\n     * @type {boolean}\r\n     */ this.clipping = true;\n        /**\r\n     * @private\r\n     * @type {CanvasRenderingContext2D}\r\n     */ this.targetContext_ = null;\n        /**\r\n     * @private\r\n     * @type {number}\r\n     */ this.opacity_ = 1;\n    }\n    /**\r\n   * @param {ExecutorGroup} executorGroup Executor group.\r\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\r\n   * @param {boolean} [declutterable] `true` to only render declutterable items,\r\n   *     `false` to only render non-declutterable items, `undefined` to render all.\r\n   */ renderWorlds(executorGroup, frameState, declutterable) {\n        const extent = frameState.extent;\n        const viewState = frameState.viewState;\n        const center = viewState.center;\n        const resolution = viewState.resolution;\n        const projection = viewState.projection;\n        const rotation = viewState.rotation;\n        const projectionExtent = projection.getExtent();\n        const vectorSource = this.getLayer().getSource();\n        const declutter = this.getLayer().getDeclutter();\n        const pixelRatio = frameState.pixelRatio;\n        const viewHints = frameState.viewHints;\n        const snapToPixel = !(viewHints[(0, $7d362782b4ccb93d$export$2e2bcd8739ae039).ANIMATING] || viewHints[(0, $7d362782b4ccb93d$export$2e2bcd8739ae039).INTERACTING]);\n        const context = this.context;\n        const width = Math.round((0, $6da4c8ed3074c92b$export$3c49c185de0c2bfc)(extent) / resolution * pixelRatio);\n        const height = Math.round((0, $6da4c8ed3074c92b$export$c08559766941f856)(extent) / resolution * pixelRatio);\n        const multiWorld = vectorSource.getWrapX() && projection.canWrapX();\n        const worldWidth = multiWorld ? (0, $6da4c8ed3074c92b$export$3c49c185de0c2bfc)(projectionExtent) : null;\n        const endWorld = multiWorld ? Math.ceil((extent[2] - projectionExtent[2]) / worldWidth) + 1 : 1;\n        let world = multiWorld ? Math.floor((extent[0] - projectionExtent[0]) / worldWidth) : 0;\n        do {\n            let transform = this.getRenderTransform(center, resolution, 0, pixelRatio, width, height, world * worldWidth);\n            if (frameState.declutter) transform = transform.slice(0);\n            executorGroup.execute(context, [\n                context.canvas.width,\n                context.canvas.height\n            ], transform, rotation, snapToPixel, declutterable === undefined ? (0, $a34a824d875e4ea1$export$61b49a5ae59d663) : declutterable ? (0, $a34a824d875e4ea1$export$6195a93a6c97ce02) : (0, $a34a824d875e4ea1$export$d0fe61ccfaa1ca87), declutterable ? declutter && frameState.declutter[declutter] : undefined);\n        }while (++world < endWorld);\n    }\n    /**\r\n   * @private\r\n   */ setDrawContext_() {\n        if (this.opacity_ !== 1) {\n            this.targetContext_ = this.context;\n            this.context = (0, $075f937d7366f1a2$export$9e05d10eae75c464)(this.context.canvas.width, this.context.canvas.height, (0, $42152f52b26b6ca7$export$a166f0857c555517));\n        }\n    }\n    /**\r\n   * @private\r\n   */ resetDrawContext_() {\n        if (this.opacity_ !== 1) {\n            const alpha = this.targetContext_.globalAlpha;\n            this.targetContext_.globalAlpha = this.opacity_;\n            this.targetContext_.drawImage(this.context.canvas, 0, 0);\n            this.targetContext_.globalAlpha = alpha;\n            (0, $075f937d7366f1a2$export$e918ac6a1026a12a)(this.context);\n            (0, $42152f52b26b6ca7$export$a166f0857c555517).push(this.context.canvas);\n            this.context = this.targetContext_;\n            this.targetContext_ = null;\n        }\n    }\n    /**\r\n   * Render declutter items for this layer\r\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\r\n   */ renderDeclutter(frameState) {\n        if (!this.replayGroup_ || !this.getLayer().getDeclutter()) return;\n        this.renderWorlds(this.replayGroup_, frameState, true);\n    }\n    /**\r\n   * Render deferred instructions.\r\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\r\n   * @override\r\n   */ renderDeferredInternal(frameState) {\n        if (!this.replayGroup_) return;\n        this.replayGroup_.renderDeferred();\n        if (this.clipped_) this.context.restore();\n        this.resetDrawContext_();\n    }\n    /**\r\n   * Render the layer.\r\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\r\n   * @param {HTMLElement|null} target Target that may be used to render content to.\r\n   * @return {HTMLElement} The rendered element.\r\n   * @override\r\n   */ renderFrame(frameState, target) {\n        const layerState = frameState.layerStatesArray[frameState.layerIndex];\n        this.opacity_ = layerState.opacity;\n        const viewState = frameState.viewState;\n        this.prepareContainer(frameState, target);\n        const context = this.context;\n        const replayGroup = this.replayGroup_;\n        let render = replayGroup && !replayGroup.isEmpty();\n        if (!render) {\n            const hasRenderListeners = this.getLayer().hasListener((0, $f5e92a4d985a2824$export$2e2bcd8739ae039).PRERENDER) || this.getLayer().hasListener((0, $f5e92a4d985a2824$export$2e2bcd8739ae039).POSTRENDER);\n            if (!hasRenderListeners) return this.container;\n        }\n        this.setDrawContext_();\n        this.preRender(context, frameState);\n        const projection = viewState.projection;\n        // clipped rendering if layer extent is set\n        this.clipped_ = false;\n        if (render && layerState.extent && this.clipping) {\n            const layerExtent = (0, $9c4744460e43e41b$export$494be3a3a25689ca)(layerState.extent, projection);\n            render = (0, $6da4c8ed3074c92b$export$7b0a31e10bbff018)(layerExtent, frameState.extent);\n            this.clipped_ = render && !(0, $6da4c8ed3074c92b$export$be866b1e0809b17e)(layerExtent, frameState.extent);\n            if (this.clipped_) this.clipUnrotated(context, frameState, layerExtent);\n        }\n        if (render) this.renderWorlds(replayGroup, frameState, this.getLayer().getDeclutter() ? false : undefined);\n        if (!frameState.declutter && this.clipped_) context.restore();\n        this.postRender(context, frameState);\n        if (this.renderedRotation_ !== viewState.rotation) {\n            this.renderedRotation_ = viewState.rotation;\n            this.hitDetectionImageData_ = null;\n        }\n        if (!frameState.declutter) this.resetDrawContext_();\n        return this.container;\n    }\n    /**\r\n   * Asynchronous layer level hit detection.\r\n   * @param {import(\"../../pixel.js\").Pixel} pixel Pixel.\r\n   * @return {Promise<Array<import(\"../../Feature\").default>>} Promise\r\n   * that resolves with an array of features.\r\n   * @override\r\n   */ getFeatures(pixel) {\n        return new Promise((resolve)=>{\n            if (this.frameState && !this.hitDetectionImageData_ && !this.animatingOrInteracting_) {\n                const size = this.frameState.size.slice();\n                const center = this.renderedCenter_;\n                const resolution = this.renderedResolution_;\n                const rotation = this.renderedRotation_;\n                const projection = this.renderedProjection_;\n                const extent = this.wrappedRenderedExtent_;\n                const layer = this.getLayer();\n                const transforms = [];\n                const width = size[0] * (0, $13dfa0283bf5c35f$export$ab51038298418f25);\n                const height = size[1] * (0, $13dfa0283bf5c35f$export$ab51038298418f25);\n                transforms.push(this.getRenderTransform(center, resolution, rotation, (0, $13dfa0283bf5c35f$export$ab51038298418f25), width, height, 0).slice());\n                const source = layer.getSource();\n                const projectionExtent = projection.getExtent();\n                if (source.getWrapX() && projection.canWrapX() && !(0, $6da4c8ed3074c92b$export$be866b1e0809b17e)(projectionExtent, extent)) {\n                    let startX = extent[0];\n                    const worldWidth = (0, $6da4c8ed3074c92b$export$3c49c185de0c2bfc)(projectionExtent);\n                    let world = 0;\n                    let offsetX;\n                    while(startX < projectionExtent[0]){\n                        --world;\n                        offsetX = worldWidth * world;\n                        transforms.push(this.getRenderTransform(center, resolution, rotation, (0, $13dfa0283bf5c35f$export$ab51038298418f25), width, height, offsetX).slice());\n                        startX += worldWidth;\n                    }\n                    world = 0;\n                    startX = extent[2];\n                    while(startX > projectionExtent[2]){\n                        ++world;\n                        offsetX = worldWidth * world;\n                        transforms.push(this.getRenderTransform(center, resolution, rotation, (0, $13dfa0283bf5c35f$export$ab51038298418f25), width, height, offsetX).slice());\n                        startX -= worldWidth;\n                    }\n                }\n                const userProjection = (0, $9c4744460e43e41b$export$3973b77d5f6f2790)();\n                this.hitDetectionImageData_ = (0, $13dfa0283bf5c35f$export$bd05e394339d469)(size, transforms, this.renderedFeatures_, layer.getStyleFunction(), extent, resolution, rotation, (0, $4b9ac454600c05d2$export$75084a70d324c1e6)(resolution, this.renderedPixelRatio_), userProjection ? projection : null);\n            }\n            resolve((0, $13dfa0283bf5c35f$export$6d4d555ddbfffa32)(pixel, this.renderedFeatures_, this.hitDetectionImageData_));\n        });\n    }\n    /**\r\n   * @param {import(\"../../coordinate.js\").Coordinate} coordinate Coordinate.\r\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\r\n   * @param {number} hitTolerance Hit tolerance in pixels.\r\n   * @param {import(\"../vector.js\").FeatureCallback<T>} callback Feature callback.\r\n   * @param {Array<import(\"../Map.js\").HitMatch<T>>} matches The hit detected matches with tolerance.\r\n   * @return {T|undefined} Callback result.\r\n   * @template T\r\n   * @override\r\n   */ forEachFeatureAtCoordinate(coordinate, frameState, hitTolerance, callback, matches) {\n        if (!this.replayGroup_) return undefined;\n        const resolution = frameState.viewState.resolution;\n        const rotation = frameState.viewState.rotation;\n        const layer = this.getLayer();\n        /** @type {!Object<string, import(\"../Map.js\").HitMatch<T>|true>} */ const features = {};\n        /**\r\n     * @param {import(\"../../Feature.js\").FeatureLike} feature Feature.\r\n     * @param {import(\"../../geom/SimpleGeometry.js\").default} geometry Geometry.\r\n     * @param {number} distanceSq The squared distance to the click position\r\n     * @return {T|undefined} Callback result.\r\n     */ const featureCallback = function(feature, geometry, distanceSq) {\n            const key = (0, $6c5e11070e371322$export$5e82334337e0f204)(feature);\n            const match = features[key];\n            if (!match) {\n                if (distanceSq === 0) {\n                    features[key] = true;\n                    return callback(feature, layer, geometry);\n                }\n                matches.push(features[key] = {\n                    feature: feature,\n                    layer: layer,\n                    geometry: geometry,\n                    distanceSq: distanceSq,\n                    callback: callback\n                });\n            } else if (match !== true && distanceSq < match.distanceSq) {\n                if (distanceSq === 0) {\n                    features[key] = true;\n                    matches.splice(matches.lastIndexOf(match), 1);\n                    return callback(feature, layer, geometry);\n                }\n                match.geometry = geometry;\n                match.distanceSq = distanceSq;\n            }\n            return undefined;\n        };\n        const declutter = this.getLayer().getDeclutter();\n        return this.replayGroup_.forEachFeatureAtCoordinate(coordinate, resolution, rotation, hitTolerance, featureCallback, declutter ? frameState.declutter?.[declutter]?.all().map((item)=>item.value) : null);\n    }\n    /**\r\n   * Perform action necessary to get the layer rendered after new fonts have loaded\r\n   * @override\r\n   */ handleFontsChanged() {\n        const layer = this.getLayer();\n        if (layer.getVisible() && this.replayGroup_) layer.changed();\n    }\n    /**\r\n   * Handle changes in image style state.\r\n   * @param {import(\"../../events/Event.js\").default} event Image style change event.\r\n   * @private\r\n   */ handleStyleImageChange_(event) {\n        this.renderIfReadyAndVisible();\n    }\n    /**\r\n   * Determine whether render should be called.\r\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\r\n   * @return {boolean} Layer is ready to be rendered.\r\n   * @override\r\n   */ prepareFrame(frameState) {\n        const vectorLayer = this.getLayer();\n        const vectorSource = vectorLayer.getSource();\n        if (!vectorSource) return false;\n        const animating = frameState.viewHints[(0, $7d362782b4ccb93d$export$2e2bcd8739ae039).ANIMATING];\n        const interacting = frameState.viewHints[(0, $7d362782b4ccb93d$export$2e2bcd8739ae039).INTERACTING];\n        const updateWhileAnimating = vectorLayer.getUpdateWhileAnimating();\n        const updateWhileInteracting = vectorLayer.getUpdateWhileInteracting();\n        if (this.ready && !updateWhileAnimating && animating || !updateWhileInteracting && interacting) {\n            this.animatingOrInteracting_ = true;\n            return true;\n        }\n        this.animatingOrInteracting_ = false;\n        const frameStateExtent = frameState.extent;\n        const viewState = frameState.viewState;\n        const projection = viewState.projection;\n        const resolution = viewState.resolution;\n        const pixelRatio = frameState.pixelRatio;\n        const vectorLayerRevision = vectorLayer.getRevision();\n        const vectorLayerRenderBuffer = vectorLayer.getRenderBuffer();\n        let vectorLayerRenderOrder = vectorLayer.getRenderOrder();\n        if (vectorLayerRenderOrder === undefined) vectorLayerRenderOrder = (0, $4b9ac454600c05d2$export$531ddd8416d52dfc);\n        const center = viewState.center.slice();\n        const extent = (0, $6da4c8ed3074c92b$export$ab1029bcae9ddb4a)(frameStateExtent, vectorLayerRenderBuffer * resolution);\n        const renderedExtent = extent.slice();\n        const loadExtents = [\n            extent.slice()\n        ];\n        const projectionExtent = projection.getExtent();\n        if (vectorSource.getWrapX() && projection.canWrapX() && !(0, $6da4c8ed3074c92b$export$be866b1e0809b17e)(projectionExtent, frameState.extent)) {\n            // For the replay group, we need an extent that intersects the real world\n            // (-180° to +180°). To support geometries in a coordinate range from -540°\n            // to +540°, we add at least 1 world width on each side of the projection\n            // extent. If the viewport is wider than the world, we need to add half of\n            // the viewport width to make sure we cover the whole viewport.\n            const worldWidth = (0, $6da4c8ed3074c92b$export$3c49c185de0c2bfc)(projectionExtent);\n            const gutter = Math.max((0, $6da4c8ed3074c92b$export$3c49c185de0c2bfc)(extent) / 2, worldWidth);\n            extent[0] = projectionExtent[0] - gutter;\n            extent[2] = projectionExtent[2] + gutter;\n            (0, $1bd0a226f9a16141$export$39a9ce3624977b84)(center, projection);\n            const loadExtent = (0, $6da4c8ed3074c92b$export$39a9ce3624977b84)(loadExtents[0], projection);\n            // If the extent crosses the date line, we load data for both edges of the worlds\n            if (loadExtent[0] < projectionExtent[0] && loadExtent[2] < projectionExtent[2]) loadExtents.push([\n                loadExtent[0] + worldWidth,\n                loadExtent[1],\n                loadExtent[2] + worldWidth,\n                loadExtent[3]\n            ]);\n            else if (loadExtent[0] > projectionExtent[0] && loadExtent[2] > projectionExtent[2]) loadExtents.push([\n                loadExtent[0] - worldWidth,\n                loadExtent[1],\n                loadExtent[2] - worldWidth,\n                loadExtent[3]\n            ]);\n        }\n        if (this.ready && this.renderedResolution_ == resolution && this.renderedRevision_ == vectorLayerRevision && this.renderedRenderOrder_ == vectorLayerRenderOrder && this.renderedFrameDeclutter_ === !!frameState.declutter && (0, $6da4c8ed3074c92b$export$be866b1e0809b17e)(this.wrappedRenderedExtent_, extent)) {\n            if (!(0, $b998d41b678ed5d1$export$e9bab7fafb253603)(this.renderedExtent_, renderedExtent)) {\n                this.hitDetectionImageData_ = null;\n                this.renderedExtent_ = renderedExtent;\n            }\n            this.renderedCenter_ = center;\n            this.replayGroupChanged = false;\n            return true;\n        }\n        this.replayGroup_ = null;\n        const replayGroup = new (0, $e22658f4b743550b$export$2e2bcd8739ae039)((0, $4b9ac454600c05d2$export$bdacc5b475012edb)(resolution, pixelRatio), extent, resolution, pixelRatio);\n        const userProjection = (0, $9c4744460e43e41b$export$3973b77d5f6f2790)();\n        let userTransform;\n        if (userProjection) {\n            for(let i = 0, ii = loadExtents.length; i < ii; ++i){\n                const extent = loadExtents[i];\n                const userExtent = (0, $9c4744460e43e41b$export$96bfd09e2cffb006)(extent, projection);\n                vectorSource.loadFeatures(userExtent, (0, $9c4744460e43e41b$export$b56bb8ad8b3a00e9)(resolution, projection), userProjection);\n            }\n            userTransform = (0, $9c4744460e43e41b$export$e3c4995a701c26a3)(userProjection, projection);\n        } else for(let i = 0, ii = loadExtents.length; i < ii; ++i)vectorSource.loadFeatures(loadExtents[i], resolution, projection);\n        const squaredTolerance = (0, $4b9ac454600c05d2$export$75084a70d324c1e6)(resolution, pixelRatio);\n        let ready = true;\n        const render = /**\r\n       * @param {import(\"../../Feature.js\").default} feature Feature.\r\n       * @param {number} index Index.\r\n       */ (feature, index)=>{\n            let styles;\n            const styleFunction = feature.getStyleFunction() || vectorLayer.getStyleFunction();\n            if (styleFunction) styles = styleFunction(feature, resolution);\n            if (styles) {\n                const dirty = this.renderFeature(feature, squaredTolerance, styles, replayGroup, userTransform, this.getLayer().getDeclutter(), index);\n                ready = ready && !dirty;\n            }\n        };\n        const userExtent = (0, $9c4744460e43e41b$export$96bfd09e2cffb006)(extent, projection);\n        /** @type {Array<import(\"../../Feature.js\").default>} */ const features = vectorSource.getFeaturesInExtent(userExtent);\n        if (vectorLayerRenderOrder) features.sort(vectorLayerRenderOrder);\n        for(let i = 0, ii = features.length; i < ii; ++i)render(features[i], i);\n        this.renderedFeatures_ = features;\n        this.ready = ready;\n        const replayGroupInstructions = replayGroup.finish();\n        const executorGroup = new (0, $a34a824d875e4ea1$export$2e2bcd8739ae039)(extent, resolution, pixelRatio, vectorSource.getOverlaps(), replayGroupInstructions, vectorLayer.getRenderBuffer(), !!frameState.declutter);\n        this.renderedResolution_ = resolution;\n        this.renderedRevision_ = vectorLayerRevision;\n        this.renderedRenderOrder_ = vectorLayerRenderOrder;\n        this.renderedFrameDeclutter_ = !!frameState.declutter;\n        this.renderedExtent_ = renderedExtent;\n        this.wrappedRenderedExtent_ = extent;\n        this.renderedCenter_ = center;\n        this.renderedProjection_ = projection;\n        this.renderedPixelRatio_ = pixelRatio;\n        this.replayGroup_ = executorGroup;\n        this.hitDetectionImageData_ = null;\n        this.replayGroupChanged = true;\n        return true;\n    }\n    /**\r\n   * @param {import(\"../../Feature.js\").default} feature Feature.\r\n   * @param {number} squaredTolerance Squared render tolerance.\r\n   * @param {import(\"../../style/Style.js\").default|Array<import(\"../../style/Style.js\").default>} styles The style or array of styles.\r\n   * @param {import(\"../../render/canvas/BuilderGroup.js\").default} builderGroup Builder group.\r\n   * @param {import(\"../../proj.js\").TransformFunction} [transform] Transform from user to view projection.\r\n   * @param {boolean} [declutter] Enable decluttering.\r\n   * @param {number} [index] Render order index.\r\n   * @return {boolean} `true` if an image is loading.\r\n   */ renderFeature(feature, squaredTolerance, styles, builderGroup, transform, declutter, index) {\n        if (!styles) return false;\n        let loading = false;\n        if (Array.isArray(styles)) for(let i = 0, ii = styles.length; i < ii; ++i)loading = (0, $4b9ac454600c05d2$export$36f470a33a42f413)(builderGroup, feature, styles[i], squaredTolerance, this.boundHandleStyleImageChange_, transform, declutter, index) || loading;\n        else loading = (0, $4b9ac454600c05d2$export$36f470a33a42f413)(builderGroup, feature, styles, squaredTolerance, this.boundHandleStyleImageChange_, transform, declutter, index);\n        return loading;\n    }\n}\nvar $659e0e97392a5f5e$export$2e2bcd8739ae039 = $659e0e97392a5f5e$var$CanvasVectorLayerRenderer;\n\n\n\n/**\r\n * @template {import(\"../source/Vector.js\").default<FeatureType>} [VectorSourceType=import(\"../source/Vector.js\").default<*>]\r\n * @template {import('../Feature.js').FeatureLike} [FeatureType=import(\"./BaseVector.js\").ExtractedFeatureType<VectorSourceType>]\r\n * @typedef {Object} Options\r\n * @property {string} [className='ol-layer'] A CSS class name to set to the layer element.\r\n * @property {number} [opacity=1] Opacity (0, 1).\r\n * @property {boolean} [visible=true] Visibility.\r\n * @property {import(\"../extent.js\").Extent} [extent] The bounding extent for layer rendering.  The layer will not be\r\n * rendered outside of this extent.\r\n * @property {number} [zIndex] The z-index for layer rendering.  At rendering time, the layers\r\n * will be ordered, first by Z-index and then by position. When `undefined`, a `zIndex` of 0 is assumed\r\n * for layers that are added to the map's `layers` collection, or `Infinity` when the layer's `setMap()`\r\n * method was used.\r\n * @property {number} [minResolution] The minimum resolution (inclusive) at which this layer will be\r\n * visible.\r\n * @property {number} [maxResolution] The maximum resolution (exclusive) below which this layer will\r\n * be visible.\r\n * @property {number} [minZoom] The minimum view zoom level (exclusive) above which this layer will be\r\n * visible.\r\n * @property {number} [maxZoom] The maximum view zoom level (inclusive) at which this layer will\r\n * be visible.\r\n * @property {import(\"../render.js\").OrderFunction} [renderOrder] Render order. Function to be used when sorting\r\n * features before rendering. By default features are drawn in the order that they are created. Use\r\n * `null` to avoid the sort, but get an undefined draw order.\r\n * @property {number} [renderBuffer=100] The buffer in pixels around the viewport extent used by the\r\n * renderer when getting features from the vector source for the rendering or hit-detection.\r\n * Recommended value: the size of the largest symbol, line width or label.\r\n * @property {VectorSourceType} [source] Source.\r\n * @property {import(\"../Map.js\").default} [map] Sets the layer as overlay on a map. The map will not manage\r\n * this layer in its layers collection, and the layer will be rendered on top. This is useful for\r\n * temporary layers. The standard way to add a layer to a map and have it managed by the map is to\r\n * use [map.addLayer()]{@link import(\"../Map.js\").default#addLayer}.\r\n * @property {boolean|string|number} [declutter=false] Declutter images and text. Any truthy value will enable\r\n * decluttering. Within a layer, a feature rendered before another has higher priority. All layers with the\r\n * same `declutter` value will be decluttered together. The priority is determined by the drawing order of the\r\n * layers with the same `declutter` value. Higher in the layer stack means higher priority. To declutter distinct\r\n * layers or groups of layers separately, use different truthy values for `declutter`.\r\n * @property {import(\"../style/Style.js\").StyleLike|import(\"../style/flat.js\").FlatStyleLike|null} [style] Layer style. When set to `null`, only\r\n * features that have their own style will be rendered. See {@link module:ol/style/Style~Style} for the default style\r\n * which will be used if this is not set.\r\n * @property {import(\"./Base.js\").BackgroundColor} [background] Background color for the layer. If not specified, no background\r\n * will be rendered.\r\n * @property {boolean} [updateWhileAnimating=false] When set to `true`, feature batches will\r\n * be recreated during animations. This means that no vectors will be shown clipped, but the\r\n * setting will have a performance impact for large amounts of vector data. When set to `false`,\r\n * batches will be recreated when no animation is active.\r\n * @property {boolean} [updateWhileInteracting=false] When set to `true`, feature batches will\r\n * be recreated during interactions. See also `updateWhileAnimating`.\r\n * @property {Object<string, *>} [properties] Arbitrary observable properties. Can be accessed with `#get()` and `#set()`.\r\n */ /**\r\n * @classdesc\r\n * Vector data is rendered client-side, as vectors. This layer type provides most accurate rendering\r\n * even during animations. Points and labels stay upright on rotated views. For very large\r\n * amounts of vector data, performance may suffer during pan and zoom animations. In this case,\r\n * try {@link module:ol/layer/VectorImage~VectorImageLayer}.\r\n *\r\n * Note that any property set in the options is set as a {@link module:ol/Object~BaseObject}\r\n * property on the layer object; for example, setting `title: 'My Title'` in the\r\n * options means that `title` is observable, and has get/set accessors.\r\n *\r\n * @template {import(\"../source/Vector.js\").default<FeatureType>} [VectorSourceType=import(\"../source/Vector.js\").default<*>]\r\n * @template {import('../Feature.js').FeatureLike} [FeatureType=import(\"./BaseVector.js\").ExtractedFeatureType<VectorSourceType>]\r\n * @extends {BaseVectorLayer<FeatureType, VectorSourceType, CanvasVectorLayerRenderer>}\r\n * @api\r\n */ class $82a68515bd6ef378$var$VectorLayer extends (0, $c8d6dc4c09ed9916$export$2e2bcd8739ae039) {\n    /**\r\n   * @param {Options<VectorSourceType, FeatureType>} [options] Options.\r\n   */ constructor(options){\n        super(options);\n    }\n    /**\r\n   * @override\r\n   */ createRenderer() {\n        return new (0, $659e0e97392a5f5e$export$2e2bcd8739ae039)(this);\n    }\n}\nvar $82a68515bd6ef378$export$2e2bcd8739ae039 = $82a68515bd6ef378$var$VectorLayer;\n\n\n/**\r\n * @module ol/source/Vector\r\n */ \n\n\n\n\n\n\n\n\n/**\r\n * @module ol/featureloader\r\n */ /**\r\n *\r\n * @type {boolean}\r\n * @private\r\n */ let $588823c001569193$var$withCredentials = false;\nfunction $588823c001569193$export$441d7b57adab24d0(url, format, extent, resolution, projection, success, failure) {\n    const xhr = new XMLHttpRequest();\n    xhr.open('GET', typeof url === 'function' ? url(extent, resolution, projection) : url, true);\n    if (format.getType() == 'arraybuffer') xhr.responseType = 'arraybuffer';\n    xhr.withCredentials = $588823c001569193$var$withCredentials;\n    /**\r\n   * @param {Event} event Event.\r\n   * @private\r\n   */ xhr.onload = function(event) {\n        // status will be 0 for file:// urls\n        if (!xhr.status || xhr.status >= 200 && xhr.status < 300) {\n            const type = format.getType();\n            try {\n                /** @type {Document|Node|Object|string|undefined} */ let source;\n                if (type == 'text' || type == 'json') source = xhr.responseText;\n                else if (type == 'xml') source = xhr.responseXML || xhr.responseText;\n                else if (type == 'arraybuffer') source = /** @type {ArrayBuffer} */ xhr.response;\n                if (source) success(/** @type {Array<FeatureType>} */ format.readFeatures(source, {\n                    extent: extent,\n                    featureProjection: projection\n                }), format.readProjection(source));\n                else failure();\n            } catch  {\n                failure();\n            }\n        } else failure();\n    };\n    /**\r\n   * @private\r\n   */ xhr.onerror = failure;\n    xhr.send();\n}\nfunction $588823c001569193$export$14cc81df70b6707e(url, format) {\n    /**\r\n   * @param {import(\"./extent.js\").Extent} extent Extent.\r\n   * @param {number} resolution Resolution.\r\n   * @param {import(\"./proj/Projection.js\").default} projection Projection.\r\n   * @param {function(Array<FeatureType>): void} [success] Success\r\n   *      Function called when loading succeeded.\r\n   * @param {function(): void} [failure] Failure\r\n   *      Function called when loading failed.\r\n   * @this {import(\"./source/Vector.js\").default<FeatureType>}\r\n   */ return function(extent, resolution, projection, success, failure) {\n        $588823c001569193$export$441d7b57adab24d0(url, format, extent, resolution, projection, /**\r\n       * @param {Array<FeatureType>} features The loaded features.\r\n       * @param {import(\"./proj/Projection.js\").default} dataProjection Data\r\n       * projection.\r\n       */ (features, dataProjection)=>{\n            this.addFeatures(features);\n            if (success !== undefined) success(features);\n        }, ()=>{\n            this.changed();\n            if (failure !== undefined) failure();\n        });\n    };\n}\nfunction $588823c001569193$export$36fa6977a6d0d8fe(xhrWithCredentials) {\n    $588823c001569193$var$withCredentials = xhrWithCredentials;\n}\n\n\n\n/**\r\n * @module ol/loadingstrategy\r\n */ \nfunction $eb51d0a16123ee90$export$84bf76cd7afc7469(extent, resolution) {\n    return [\n        [\n            -Infinity,\n            -Infinity,\n            Infinity,\n            Infinity\n        ]\n    ];\n}\nfunction $eb51d0a16123ee90$export$bf67010aacbe66fa(extent, resolution) {\n    return [\n        extent\n    ];\n}\nfunction $eb51d0a16123ee90$export$3c17558da18e4d75(tileGrid) {\n    return(/**\r\n     * @param {import(\"./extent.js\").Extent} extent Extent.\r\n     * @param {number} resolution Resolution.\r\n     * @param {import(\"./proj.js\").Projection} projection Projection.\r\n     * @return {Array<import(\"./extent.js\").Extent>} Extents.\r\n     */ function(extent, resolution, projection) {\n        const z = tileGrid.getZForResolution((0, $9c4744460e43e41b$export$bd1cd3b88140b906)(resolution, projection));\n        const tileRange = tileGrid.getTileRangeForExtentAndZ((0, $9c4744460e43e41b$export$494be3a3a25689ca)(extent, projection), z);\n        /** @type {Array<import(\"./extent.js\").Extent>} */ const extents = [];\n        /** @type {import(\"./tilecoord.js\").TileCoord} */ const tileCoord = [\n            z,\n            0,\n            0\n        ];\n        for(tileCoord[1] = tileRange.minX; tileCoord[1] <= tileRange.maxX; ++tileCoord[1])for(tileCoord[2] = tileRange.minY; tileCoord[2] <= tileRange.maxY; ++tileCoord[2])extents.push((0, $9c4744460e43e41b$export$96bfd09e2cffb006)(tileGrid.getTileCoordExtent(tileCoord), projection));\n        return extents;\n    });\n}\n\n\n\n\n/**\r\n * @module ol/structs/RBush\r\n */ \n\n\n\n/**\r\n * @typedef {import(\"rbush\").BBox & {value: T}} Entry\r\n * @template T\r\n */ /**\r\n * @classdesc\r\n * Wrapper around the RBush by Vladimir Agafonkin.\r\n * See https://github.com/mourner/rbush.\r\n *\r\n * @template {Object} T\r\n */ class $34c742891733e7a4$var$RBush {\n    /**\r\n   * @param {number} [maxEntries] Max entries.\r\n   */ constructor(maxEntries){\n        /**\r\n     * @private\r\n     * @type {RBush_<Entry<T>>}\r\n     */ this.rbush_ = new (0, (/*@__PURE__*/$parcel$interopDefault($176ca75ee9f69668$exports)))(maxEntries);\n        /**\r\n     * A mapping between the objects added to this rbush wrapper\r\n     * and the objects that are actually added to the internal rbush.\r\n     * @private\r\n     * @type {Object<string, Entry<T>>}\r\n     */ this.items_ = {};\n    }\n    /**\r\n   * Insert a value into the RBush.\r\n   * @param {import(\"../extent.js\").Extent} extent Extent.\r\n   * @param {T} value Value.\r\n   */ insert(extent, value) {\n        /** @type {Entry<T>} */ const item = {\n            minX: extent[0],\n            minY: extent[1],\n            maxX: extent[2],\n            maxY: extent[3],\n            value: value\n        };\n        this.rbush_.insert(item);\n        this.items_[(0, $6c5e11070e371322$export$5e82334337e0f204)(value)] = item;\n    }\n    /**\r\n   * Bulk-insert values into the RBush.\r\n   * @param {Array<import(\"../extent.js\").Extent>} extents Extents.\r\n   * @param {Array<T>} values Values.\r\n   */ load(extents, values) {\n        const items = new Array(values.length);\n        for(let i = 0, l = values.length; i < l; i++){\n            const extent = extents[i];\n            const value = values[i];\n            /** @type {Entry<T>} */ const item = {\n                minX: extent[0],\n                minY: extent[1],\n                maxX: extent[2],\n                maxY: extent[3],\n                value: value\n            };\n            items[i] = item;\n            this.items_[(0, $6c5e11070e371322$export$5e82334337e0f204)(value)] = item;\n        }\n        this.rbush_.load(items);\n    }\n    /**\r\n   * Remove a value from the RBush.\r\n   * @param {T} value Value.\r\n   * @return {boolean} Removed.\r\n   */ remove(value) {\n        const uid = (0, $6c5e11070e371322$export$5e82334337e0f204)(value);\n        // get the object in which the value was wrapped when adding to the\n        // internal rbush. then use that object to do the removal.\n        const item = this.items_[uid];\n        delete this.items_[uid];\n        return this.rbush_.remove(item) !== null;\n    }\n    /**\r\n   * Update the extent of a value in the RBush.\r\n   * @param {import(\"../extent.js\").Extent} extent Extent.\r\n   * @param {T} value Value.\r\n   */ update(extent, value) {\n        const item = this.items_[(0, $6c5e11070e371322$export$5e82334337e0f204)(value)];\n        const bbox = [\n            item.minX,\n            item.minY,\n            item.maxX,\n            item.maxY\n        ];\n        if (!(0, $6da4c8ed3074c92b$export$e9bab7fafb253603)(bbox, extent)) {\n            this.remove(value);\n            this.insert(extent, value);\n        }\n    }\n    /**\r\n   * Return all values in the RBush.\r\n   * @return {Array<T>} All.\r\n   */ getAll() {\n        const items = this.rbush_.all();\n        return items.map(function(item) {\n            return item.value;\n        });\n    }\n    /**\r\n   * Return all values in the given extent.\r\n   * @param {import(\"../extent.js\").Extent} extent Extent.\r\n   * @return {Array<T>} All in extent.\r\n   */ getInExtent(extent) {\n        /** @type {import(\"rbush\").BBox} */ const bbox = {\n            minX: extent[0],\n            minY: extent[1],\n            maxX: extent[2],\n            maxY: extent[3]\n        };\n        const items = this.rbush_.search(bbox);\n        return items.map(function(item) {\n            return item.value;\n        });\n    }\n    /**\r\n   * Calls a callback function with each value in the tree.\r\n   * If the callback returns a truthy value, this value is returned without\r\n   * checking the rest of the tree.\r\n   * @param {function(T): R} callback Callback.\r\n   * @return {R|undefined} Callback return value.\r\n   * @template R\r\n   */ forEach(callback) {\n        return this.forEach_(this.getAll(), callback);\n    }\n    /**\r\n   * Calls a callback function with each value in the provided extent.\r\n   * @param {import(\"../extent.js\").Extent} extent Extent.\r\n   * @param {function(T): R} callback Callback.\r\n   * @return {R|undefined} Callback return value.\r\n   * @template R\r\n   */ forEachInExtent(extent, callback) {\n        return this.forEach_(this.getInExtent(extent), callback);\n    }\n    /**\r\n   * @param {Array<T>} values Values.\r\n   * @param {function(T): R} callback Callback.\r\n   * @return {R|undefined} Callback return value.\r\n   * @template R\r\n   * @private\r\n   */ forEach_(values, callback) {\n        let result;\n        for(let i = 0, l = values.length; i < l; i++){\n            result = callback(values[i]);\n            if (result) return result;\n        }\n        return result;\n    }\n    /**\r\n   * @return {boolean} Is empty.\r\n   */ isEmpty() {\n        return (0, $beaefe87199bb537$export$dd1bc94b04021eeb)(this.items_);\n    }\n    /**\r\n   * Remove all values from the RBush.\r\n   */ clear() {\n        this.rbush_.clear();\n        this.items_ = {};\n    }\n    /**\r\n   * @param {import(\"../extent.js\").Extent} [extent] Extent.\r\n   * @return {import(\"../extent.js\").Extent} Extent.\r\n   */ getExtent(extent) {\n        const data = this.rbush_.toJSON();\n        return (0, $6da4c8ed3074c92b$export$958e3e1a02eac4b6)(data.minX, data.minY, data.maxX, data.maxY, extent);\n    }\n    /**\r\n   * @param {RBush<T>} rbush R-Tree.\r\n   */ concat(rbush) {\n        this.rbush_.load(rbush.rbush_.all());\n        for(const i in rbush.items_)this.items_[i] = rbush.items_[i];\n    }\n}\nvar $34c742891733e7a4$export$2e2bcd8739ae039 = $34c742891733e7a4$var$RBush;\n\n\n\n\n/**\r\n * @module ol/source/VectorEventType\r\n */ /**\r\n * @enum {string}\r\n */ var $ccc4e6f11f11978f$export$2e2bcd8739ae039 /**\r\n * @typedef {'addfeature'|'changefeature'|'clear'|'removefeature'|'featuresloadstart'|'featuresloadend'|'featuresloaderror'} VectorSourceEventTypes\r\n */  = {\n    /**\r\n   * Triggered when a feature is added to the source.\r\n   * @event module:ol/source/Vector.VectorSourceEvent#addfeature\r\n   * @api\r\n   */ ADDFEATURE: 'addfeature',\n    /**\r\n   * Triggered when a feature is updated.\r\n   * @event module:ol/source/Vector.VectorSourceEvent#changefeature\r\n   * @api\r\n   */ CHANGEFEATURE: 'changefeature',\n    /**\r\n   * Triggered when the clear method is called on the source.\r\n   * @event module:ol/source/Vector.VectorSourceEvent#clear\r\n   * @api\r\n   */ CLEAR: 'clear',\n    /**\r\n   * Triggered when a feature is removed from the source.\r\n   * See {@link module:ol/source/Vector~VectorSource#clear source.clear()} for exceptions.\r\n   * @event module:ol/source/Vector.VectorSourceEvent#removefeature\r\n   * @api\r\n   */ REMOVEFEATURE: 'removefeature',\n    /**\r\n   * Triggered when features starts loading.\r\n   * @event module:ol/source/Vector.VectorSourceEvent#featuresloadstart\r\n   * @api\r\n   */ FEATURESLOADSTART: 'featuresloadstart',\n    /**\r\n   * Triggered when features finishes loading.\r\n   * @event module:ol/source/Vector.VectorSourceEvent#featuresloadend\r\n   * @api\r\n   */ FEATURESLOADEND: 'featuresloadend',\n    /**\r\n   * Triggered if feature loading results in an error.\r\n   * @event module:ol/source/Vector.VectorSourceEvent#featuresloaderror\r\n   * @api\r\n   */ FEATURESLOADERROR: 'featuresloaderror'\n};\n\n\nclass $84888e4daf3fdf44$export$d402fd02dc2b661c extends (0, $aeedce20e9577100$export$2e2bcd8739ae039) {\n    /**\r\n   * @param {string} type Type.\r\n   * @param {FeatureType} [feature] Feature.\r\n   * @param {Array<FeatureType>} [features] Features.\r\n   */ constructor(type, feature, features){\n        super(type);\n        /**\r\n     * The added or removed feature for the `ADDFEATURE` and `REMOVEFEATURE` events, `undefined` otherwise.\r\n     * @type {FeatureType|undefined}\r\n     * @api\r\n     */ this.feature = feature;\n        /**\r\n     * The loaded features for the `FEATURESLOADED` event, `undefined` otherwise.\r\n     * @type {Array<FeatureType>|undefined}\r\n     * @api\r\n     */ this.features = features;\n    }\n}\n/***\r\n * @template {import(\"../Feature.js\").FeatureLike} [T=import(\"../Feature.js\").default]\r\n * @typedef {T extends RenderFeature ? T|Array<T> : T} FeatureClassOrArrayOfRenderFeatures\r\n */ /***\r\n * @template Return\r\n * @template {import(\"../Feature.js\").FeatureLike} [FeatureType=import(\"../Feature.js\").default]\r\n * @typedef {import(\"../Observable\").OnSignature<import(\"../Observable\").EventTypes, import(\"../events/Event.js\").default, Return> &\r\n *   import(\"../Observable\").OnSignature<import(\"../ObjectEventType\").Types, import(\"../Object\").ObjectEvent, Return> &\r\n *   import(\"../Observable\").OnSignature<import(\"./VectorEventType\").VectorSourceEventTypes, VectorSourceEvent<FeatureType>, Return> &\r\n *   import(\"../Observable\").CombinedOnSignature<import(\"../Observable\").EventTypes|import(\"../ObjectEventType\").Types|\r\n *     import(\"./VectorEventType\").VectorSourceEventTypes, Return>} VectorSourceOnSignature\r\n */ /**\r\n * @template {import(\"../Feature.js\").FeatureLike} [FeatureType=import(\"../Feature.js\").default]\r\n * @typedef {Object} Options\r\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\r\n * @property {Array<FeatureType>|Collection<FeatureType>} [features]\r\n * Features. If provided as {@link module:ol/Collection~Collection}, the features in the source\r\n * and the collection will stay in sync.\r\n * @property {import(\"../format/Feature.js\").default<FeatureType>} [format] The feature format used by the XHR\r\n * feature loader when `url` is set. Required if `url` is set, otherwise ignored.\r\n * @property {import(\"../featureloader.js\").FeatureLoader<FeatureType>} [loader]\r\n * The loader function used to load features, from a remote source for example.\r\n * If this is not set and `url` is set, the source will create and use an XHR\r\n * feature loader. The `'featuresloadend'` and `'featuresloaderror'` events\r\n * will only fire if the `success` and `failure` callbacks are used.\r\n *\r\n * Example:\r\n *\r\n * ```js\r\n * import Vector from 'ol/source/Vector.js';\r\n * import GeoJSON from 'ol/format/GeoJSON.js';\r\n * import {bbox} from 'ol/loadingstrategy.js';\r\n *\r\n * const vectorSource = new Vector({\r\n *   format: new GeoJSON(),\r\n *   loader: function(extent, resolution, projection, success, failure) {\r\n *      const proj = projection.getCode();\r\n *      const url = 'https://ahocevar.com/geoserver/wfs?service=WFS&' +\r\n *          'version=1.1.0&request=GetFeature&typename=osm:water_areas&' +\r\n *          'outputFormat=application/json&srsname=' + proj + '&' +\r\n *          'bbox=' + extent.join(',') + ',' + proj;\r\n *      const xhr = new XMLHttpRequest();\r\n *      xhr.open('GET', url);\r\n *      const onError = function() {\r\n *        vectorSource.removeLoadedExtent(extent);\r\n *        failure();\r\n *      }\r\n *      xhr.onerror = onError;\r\n *      xhr.onload = function() {\r\n *        if (xhr.status == 200) {\r\n *          const features = vectorSource.getFormat().readFeatures(xhr.responseText);\r\n *          vectorSource.addFeatures(features);\r\n *          success(features);\r\n *        } else {\r\n *          onError();\r\n *        }\r\n *      }\r\n *      xhr.send();\r\n *    },\r\n *    strategy: bbox,\r\n *  });\r\n * ```\r\n * @property {boolean} [overlaps=true] This source may have overlapping geometries.\r\n * Setting this to `false` (e.g. for sources with polygons that represent administrative\r\n * boundaries or TopoJSON sources) allows the renderer to optimise fill and\r\n * stroke operations.\r\n * @property {LoadingStrategy} [strategy] The loading strategy to use.\r\n * By default an {@link module:ol/loadingstrategy.all}\r\n * strategy is used, a one-off strategy which loads all features at once.\r\n * @property {string|import(\"../featureloader.js\").FeatureUrlFunction} [url]\r\n * Setting this option instructs the source to load features using an XHR loader\r\n * (see {@link module:ol/featureloader.xhr}). Use a `string` and an\r\n * {@link module:ol/loadingstrategy.all} for a one-off download of all features from\r\n * the given URL. Use a {@link module:ol/featureloader~FeatureUrlFunction} to generate the url with\r\n * other loading strategies.\r\n * Requires `format` to be set as well.\r\n * When default XHR feature loader is provided, the features will\r\n * be transformed from the data projection to the view projection\r\n * during parsing. If your remote data source does not advertise its projection\r\n * properly, this transformation will be incorrect. For some formats, the\r\n * default projection (usually EPSG:4326) can be overridden by setting the\r\n * dataProjection constructor option on the format.\r\n * Note that if a source contains non-feature data, such as a GeoJSON geometry\r\n * or a KML NetworkLink, these will be ignored. Use a custom loader to load these.\r\n * @property {boolean} [useSpatialIndex=true]\r\n * By default, an RTree is used as spatial index. When features are removed and\r\n * added frequently, and the total number of features is low, setting this to\r\n * `false` may improve performance.\r\n *\r\n * Note that\r\n * {@link module:ol/source/Vector~VectorSource#getFeaturesInExtent},\r\n * {@link module:ol/source/Vector~VectorSource#getClosestFeatureToCoordinate} and\r\n * {@link module:ol/source/Vector~VectorSource#getExtent} cannot be used when `useSpatialIndex` is\r\n * set to `false`, and {@link module:ol/source/Vector~VectorSource#forEachFeatureInExtent} will loop\r\n * through all features.\r\n *\r\n * When set to `false`, the features will be maintained in an\r\n * {@link module:ol/Collection~Collection}, which can be retrieved through\r\n * {@link module:ol/source/Vector~VectorSource#getFeaturesCollection}.\r\n * @property {boolean} [wrapX=true] Wrap the world horizontally. For vector editing across the\r\n * -180° and 180° meridians to work properly, this should be set to `false`. The\r\n * resulting geometry coordinates will then exceed the world bounds.\r\n */ /**\r\n * @classdesc\r\n * Provides a source of features for vector layers. Vector features provided\r\n * by this source are suitable for editing. See {@link module:ol/source/VectorTile~VectorTile} for\r\n * vector data that is optimized for rendering.\r\n *\r\n * @fires VectorSourceEvent\r\n * @api\r\n * @template {import(\"../Feature.js\").FeatureLike} [FeatureType=import(\"../Feature.js\").default]\r\n */ class $84888e4daf3fdf44$var$VectorSource extends (0, $ed6dc99f268f3882$export$2e2bcd8739ae039) {\n    /**\r\n   * @param {Options<FeatureType>} [options] Vector source options.\r\n   */ constructor(options){\n        options = options || {};\n        super({\n            attributions: options.attributions,\n            interpolate: true,\n            projection: undefined,\n            state: 'ready',\n            wrapX: options.wrapX !== undefined ? options.wrapX : true\n        });\n        /***\r\n     * @type {VectorSourceOnSignature<import(\"../events\").EventsKey, FeatureType>}\r\n     */ this.on;\n        /***\r\n     * @type {VectorSourceOnSignature<import(\"../events\").EventsKey, FeatureType>}\r\n     */ this.once;\n        /***\r\n     * @type {VectorSourceOnSignature<void>}\r\n     */ this.un;\n        /**\r\n     * @private\r\n     * @type {import(\"../featureloader.js\").FeatureLoader<import(\"../Feature.js\").FeatureLike>}\r\n     */ this.loader_ = (0, $013a1733c226ec50$export$1cd1943b3a73bbe8);\n        /**\r\n     * @private\r\n     * @type {import(\"../format/Feature.js\").default<FeatureType>|null}\r\n     */ this.format_ = options.format || null;\n        /**\r\n     * @private\r\n     * @type {boolean}\r\n     */ this.overlaps_ = options.overlaps === undefined ? true : options.overlaps;\n        /**\r\n     * @private\r\n     * @type {string|import(\"../featureloader.js\").FeatureUrlFunction|undefined}\r\n     */ this.url_ = options.url;\n        if (options.loader !== undefined) this.loader_ = options.loader;\n        else if (this.url_ !== undefined) {\n            (0, $35d5ec884318008e$export$a7a9523472993e97)(this.format_, '`format` must be set when `url` is set');\n            // create a XHR feature loader for \"url\" and \"format\"\n            this.loader_ = (0, $588823c001569193$export$14cc81df70b6707e)(this.url_, this.format_);\n        }\n        /**\r\n     * @private\r\n     * @type {LoadingStrategy}\r\n     */ this.strategy_ = options.strategy !== undefined ? options.strategy : (0, $eb51d0a16123ee90$export$84bf76cd7afc7469);\n        const useSpatialIndex = options.useSpatialIndex !== undefined ? options.useSpatialIndex : true;\n        /**\r\n     * @private\r\n     * @type {RBush<FeatureType>}\r\n     */ this.featuresRtree_ = useSpatialIndex ? new (0, $34c742891733e7a4$export$2e2bcd8739ae039)() : null;\n        /**\r\n     * @private\r\n     * @type {RBush<{extent: import(\"../extent.js\").Extent}>}\r\n     */ this.loadedExtentsRtree_ = new (0, $34c742891733e7a4$export$2e2bcd8739ae039)();\n        /**\r\n     * @type {number}\r\n     * @private\r\n     */ this.loadingExtentsCount_ = 0;\n        /**\r\n     * @private\r\n     * @type {!Object<string, FeatureType>}\r\n     */ this.nullGeometryFeatures_ = {};\n        /**\r\n     * A lookup of features by id (the return from feature.getId()).\r\n     * @private\r\n     * @type {!Object<string, import('../Feature.js').FeatureLike|Array<import('../Feature.js').FeatureLike>>}\r\n     */ this.idIndex_ = {};\n        /**\r\n     * A lookup of features by uid (using getUid(feature)).\r\n     * @private\r\n     * @type {!Object<string, FeatureType>}\r\n     */ this.uidIndex_ = {};\n        /**\r\n     * @private\r\n     * @type {Object<string, Array<import(\"../events.js\").EventsKey>>}\r\n     */ this.featureChangeKeys_ = {};\n        /**\r\n     * @private\r\n     * @type {Collection<FeatureType>|null}\r\n     */ this.featuresCollection_ = null;\n        /** @type {Collection<FeatureType>} */ let collection;\n        /** @type {Array<FeatureType>} */ let features;\n        if (Array.isArray(options.features)) features = options.features;\n        else if (options.features) {\n            collection = options.features;\n            features = collection.getArray();\n        }\n        if (!useSpatialIndex && collection === undefined) collection = new (0, $931ffc4e747c14db$export$2e2bcd8739ae039)(features);\n        if (features !== undefined) this.addFeaturesInternal(features);\n        if (collection !== undefined) this.bindFeaturesCollection_(collection);\n    }\n    /**\r\n   * Add a single feature to the source.  If you want to add a batch of features\r\n   * at once, call {@link module:ol/source/Vector~VectorSource#addFeatures #addFeatures()}\r\n   * instead. A feature will not be added to the source if feature with\r\n   * the same id is already there. The reason for this behavior is to avoid\r\n   * feature duplication when using bbox or tile loading strategies.\r\n   * Note: this also applies if a {@link module:ol/Collection~Collection} is used for features,\r\n   * meaning that if a feature with a duplicate id is added in the collection, it will\r\n   * be removed from it right away.\r\n   * @param {FeatureType} feature Feature to add.\r\n   * @api\r\n   */ addFeature(feature) {\n        this.addFeatureInternal(feature);\n        this.changed();\n    }\n    /**\r\n   * Add a feature without firing a `change` event.\r\n   * @param {FeatureType} feature Feature.\r\n   * @protected\r\n   */ addFeatureInternal(feature) {\n        const featureKey = (0, $6c5e11070e371322$export$5e82334337e0f204)(feature);\n        if (!this.addToIndex_(featureKey, feature)) {\n            if (this.featuresCollection_) this.featuresCollection_.remove(feature);\n            return;\n        }\n        this.setupChangeEvents_(featureKey, feature);\n        const geometry = feature.getGeometry();\n        if (geometry) {\n            const extent = geometry.getExtent();\n            if (this.featuresRtree_) this.featuresRtree_.insert(extent, feature);\n        } else this.nullGeometryFeatures_[featureKey] = feature;\n        this.dispatchEvent(new $84888e4daf3fdf44$export$d402fd02dc2b661c((0, $ccc4e6f11f11978f$export$2e2bcd8739ae039).ADDFEATURE, feature));\n    }\n    /**\r\n   * @param {string} featureKey Unique identifier for the feature.\r\n   * @param {FeatureType} feature The feature.\r\n   * @private\r\n   */ setupChangeEvents_(featureKey, feature) {\n        if (feature instanceof (0, $36d6c36c1f9ad5d9$export$2e2bcd8739ae039)) return;\n        this.featureChangeKeys_[featureKey] = [\n            (0, $d5bf8abd656a3cdc$export$63174c828edd6ff8)(feature, (0, $294047c5e65f31a3$export$2e2bcd8739ae039).CHANGE, this.handleFeatureChange_, this),\n            (0, $d5bf8abd656a3cdc$export$63174c828edd6ff8)(feature, (0, $e881b5dca21eb5d4$export$2e2bcd8739ae039).PROPERTYCHANGE, this.handleFeatureChange_, this)\n        ];\n    }\n    /**\r\n   * @param {string} featureKey Unique identifier for the feature.\r\n   * @param {FeatureType} feature The feature.\r\n   * @return {boolean} The feature is \"valid\", in the sense that it is also a\r\n   *     candidate for insertion into the Rtree.\r\n   * @private\r\n   */ addToIndex_(featureKey, feature) {\n        let valid = true;\n        if (feature.getId() !== undefined) {\n            const id = String(feature.getId());\n            if (!(id in this.idIndex_)) this.idIndex_[id] = feature;\n            else if (feature instanceof (0, $36d6c36c1f9ad5d9$export$2e2bcd8739ae039)) {\n                const indexedFeature = this.idIndex_[id];\n                if (!(indexedFeature instanceof (0, $36d6c36c1f9ad5d9$export$2e2bcd8739ae039))) valid = false;\n                else if (!Array.isArray(indexedFeature)) this.idIndex_[id] = [\n                    indexedFeature,\n                    feature\n                ];\n                else indexedFeature.push(feature);\n            } else valid = false;\n        }\n        if (valid) {\n            (0, $35d5ec884318008e$export$a7a9523472993e97)(!(featureKey in this.uidIndex_), 'The passed `feature` was already added to the source');\n            this.uidIndex_[featureKey] = feature;\n        }\n        return valid;\n    }\n    /**\r\n   * Add a batch of features to the source.\r\n   * @param {Array<FeatureType>} features Features to add.\r\n   * @api\r\n   */ addFeatures(features) {\n        this.addFeaturesInternal(features);\n        this.changed();\n    }\n    /**\r\n   * Add features without firing a `change` event.\r\n   * @param {Array<FeatureType>} features Features.\r\n   * @protected\r\n   */ addFeaturesInternal(features) {\n        const extents = [];\n        /** @type {Array<FeatureType>} */ const newFeatures = [];\n        /** @type {Array<FeatureType>} */ const geometryFeatures = [];\n        for(let i = 0, length = features.length; i < length; i++){\n            const feature = features[i];\n            const featureKey = (0, $6c5e11070e371322$export$5e82334337e0f204)(feature);\n            if (this.addToIndex_(featureKey, feature)) newFeatures.push(feature);\n        }\n        for(let i = 0, length = newFeatures.length; i < length; i++){\n            const feature = newFeatures[i];\n            const featureKey = (0, $6c5e11070e371322$export$5e82334337e0f204)(feature);\n            this.setupChangeEvents_(featureKey, feature);\n            const geometry = feature.getGeometry();\n            if (geometry) {\n                const extent = geometry.getExtent();\n                extents.push(extent);\n                geometryFeatures.push(feature);\n            } else this.nullGeometryFeatures_[featureKey] = feature;\n        }\n        if (this.featuresRtree_) this.featuresRtree_.load(extents, geometryFeatures);\n        if (this.hasListener((0, $ccc4e6f11f11978f$export$2e2bcd8739ae039).ADDFEATURE)) for(let i = 0, length = newFeatures.length; i < length; i++)this.dispatchEvent(new $84888e4daf3fdf44$export$d402fd02dc2b661c((0, $ccc4e6f11f11978f$export$2e2bcd8739ae039).ADDFEATURE, newFeatures[i]));\n    }\n    /**\r\n   * @param {!Collection<FeatureType>} collection Collection.\r\n   * @private\r\n   */ bindFeaturesCollection_(collection) {\n        let modifyingCollection = false;\n        this.addEventListener((0, $ccc4e6f11f11978f$export$2e2bcd8739ae039).ADDFEATURE, /**\r\n       * @param {VectorSourceEvent<FeatureType>} evt The vector source event\r\n       */ function(evt) {\n            if (!modifyingCollection) {\n                modifyingCollection = true;\n                collection.push(evt.feature);\n                modifyingCollection = false;\n            }\n        });\n        this.addEventListener((0, $ccc4e6f11f11978f$export$2e2bcd8739ae039).REMOVEFEATURE, /**\r\n       * @param {VectorSourceEvent<FeatureType>} evt The vector source event\r\n       */ function(evt) {\n            if (!modifyingCollection) {\n                modifyingCollection = true;\n                collection.remove(evt.feature);\n                modifyingCollection = false;\n            }\n        });\n        collection.addEventListener((0, $161dd067fe2d672c$export$2e2bcd8739ae039).ADD, /**\r\n       * @param {import(\"../Collection.js\").CollectionEvent<FeatureType>} evt The collection event\r\n       */ (evt)=>{\n            if (!modifyingCollection) {\n                modifyingCollection = true;\n                this.addFeature(evt.element);\n                modifyingCollection = false;\n            }\n        });\n        collection.addEventListener((0, $161dd067fe2d672c$export$2e2bcd8739ae039).REMOVE, /**\r\n       * @param {import(\"../Collection.js\").CollectionEvent<FeatureType>} evt The collection event\r\n       */ (evt)=>{\n            if (!modifyingCollection) {\n                modifyingCollection = true;\n                this.removeFeature(evt.element);\n                modifyingCollection = false;\n            }\n        });\n        this.featuresCollection_ = collection;\n    }\n    /**\r\n   * Remove all features from the source.\r\n   * @param {boolean} [fast] Skip dispatching of {@link module:ol/source/Vector.VectorSourceEvent#event:removefeature} events.\r\n   * @api\r\n   */ clear(fast) {\n        if (fast) {\n            for(const featureId in this.featureChangeKeys_){\n                const keys = this.featureChangeKeys_[featureId];\n                keys.forEach((0, $d5bf8abd656a3cdc$export$b0a21c8b3c1c921));\n            }\n            if (!this.featuresCollection_) {\n                this.featureChangeKeys_ = {};\n                this.idIndex_ = {};\n                this.uidIndex_ = {};\n            }\n        } else if (this.featuresRtree_) {\n            this.featuresRtree_.forEach((feature)=>{\n                this.removeFeatureInternal(feature);\n            });\n            for(const id in this.nullGeometryFeatures_)this.removeFeatureInternal(this.nullGeometryFeatures_[id]);\n        }\n        if (this.featuresCollection_) this.featuresCollection_.clear();\n        if (this.featuresRtree_) this.featuresRtree_.clear();\n        this.nullGeometryFeatures_ = {};\n        const clearEvent = new $84888e4daf3fdf44$export$d402fd02dc2b661c((0, $ccc4e6f11f11978f$export$2e2bcd8739ae039).CLEAR);\n        this.dispatchEvent(clearEvent);\n        this.changed();\n    }\n    /**\r\n   * Iterate through all features on the source, calling the provided callback\r\n   * with each one.  If the callback returns any \"truthy\" value, iteration will\r\n   * stop and the function will return the same value.\r\n   * Note: this function only iterate through the feature that have a defined geometry.\r\n   *\r\n   * @param {function(FeatureType): T} callback Called with each feature\r\n   *     on the source.  Return a truthy value to stop iteration.\r\n   * @return {T|undefined} The return value from the last call to the callback.\r\n   * @template T\r\n   * @api\r\n   */ forEachFeature(callback) {\n        if (this.featuresRtree_) return this.featuresRtree_.forEach(callback);\n        if (this.featuresCollection_) this.featuresCollection_.forEach(callback);\n    }\n    /**\r\n   * Iterate through all features whose geometries contain the provided\r\n   * coordinate, calling the callback with each feature.  If the callback returns\r\n   * a \"truthy\" value, iteration will stop and the function will return the same\r\n   * value.\r\n   *\r\n   * For {@link module:ol/render/Feature~RenderFeature} features, the callback will be\r\n   * called for all features.\r\n   *\r\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\r\n   * @param {function(FeatureType): T} callback Called with each feature\r\n   *     whose goemetry contains the provided coordinate.\r\n   * @return {T|undefined} The return value from the last call to the callback.\r\n   * @template T\r\n   */ forEachFeatureAtCoordinateDirect(coordinate, callback) {\n        const extent = [\n            coordinate[0],\n            coordinate[1],\n            coordinate[0],\n            coordinate[1]\n        ];\n        return this.forEachFeatureInExtent(extent, function(feature) {\n            const geometry = feature.getGeometry();\n            if (geometry instanceof (0, $36d6c36c1f9ad5d9$export$2e2bcd8739ae039) || geometry.intersectsCoordinate(coordinate)) return callback(feature);\n            return undefined;\n        });\n    }\n    /**\r\n   * Iterate through all features whose bounding box intersects the provided\r\n   * extent (note that the feature's geometry may not intersect the extent),\r\n   * calling the callback with each feature.  If the callback returns a \"truthy\"\r\n   * value, iteration will stop and the function will return the same value.\r\n   *\r\n   * If you are interested in features whose geometry intersects an extent, call\r\n   * the {@link module:ol/source/Vector~VectorSource#forEachFeatureIntersectingExtent #forEachFeatureIntersectingExtent()} method instead.\r\n   *\r\n   * When `useSpatialIndex` is set to false, this method will loop through all\r\n   * features, equivalent to {@link module:ol/source/Vector~VectorSource#forEachFeature #forEachFeature()}.\r\n   *\r\n   * @param {import(\"../extent.js\").Extent} extent Extent.\r\n   * @param {function(FeatureType): T} callback Called with each feature\r\n   *     whose bounding box intersects the provided extent.\r\n   * @return {T|undefined} The return value from the last call to the callback.\r\n   * @template T\r\n   * @api\r\n   */ forEachFeatureInExtent(extent, callback) {\n        if (this.featuresRtree_) return this.featuresRtree_.forEachInExtent(extent, callback);\n        if (this.featuresCollection_) this.featuresCollection_.forEach(callback);\n    }\n    /**\r\n   * Iterate through all features whose geometry intersects the provided extent,\r\n   * calling the callback with each feature.  If the callback returns a \"truthy\"\r\n   * value, iteration will stop and the function will return the same value.\r\n   *\r\n   * If you only want to test for bounding box intersection, call the\r\n   * {@link module:ol/source/Vector~VectorSource#forEachFeatureInExtent #forEachFeatureInExtent()} method instead.\r\n   *\r\n   * @param {import(\"../extent.js\").Extent} extent Extent.\r\n   * @param {function(FeatureType): T} callback Called with each feature\r\n   *     whose geometry intersects the provided extent.\r\n   * @return {T|undefined} The return value from the last call to the callback.\r\n   * @template T\r\n   * @api\r\n   */ forEachFeatureIntersectingExtent(extent, callback) {\n        return this.forEachFeatureInExtent(extent, /**\r\n       * @param {FeatureType} feature Feature.\r\n       * @return {T|undefined} The return value from the last call to the callback.\r\n       */ function(feature) {\n            const geometry = feature.getGeometry();\n            if (geometry instanceof (0, $36d6c36c1f9ad5d9$export$2e2bcd8739ae039) || geometry.intersectsExtent(extent)) {\n                const result = callback(feature);\n                if (result) return result;\n            }\n        });\n    }\n    /**\r\n   * Get the features collection associated with this source. Will be `null`\r\n   * unless the source was configured with `useSpatialIndex` set to `false`, or\r\n   * with a {@link module:ol/Collection~Collection} as `features`.\r\n   * @return {Collection<FeatureType>|null} The collection of features.\r\n   * @api\r\n   */ getFeaturesCollection() {\n        return this.featuresCollection_;\n    }\n    /**\r\n   * Get a snapshot of the features currently on the source in random order. The returned array\r\n   * is a copy, the features are references to the features in the source.\r\n   * @return {Array<FeatureType>} Features.\r\n   * @api\r\n   */ getFeatures() {\n        let features;\n        if (this.featuresCollection_) features = this.featuresCollection_.getArray().slice(0);\n        else if (this.featuresRtree_) {\n            features = this.featuresRtree_.getAll();\n            if (!(0, $beaefe87199bb537$export$dd1bc94b04021eeb)(this.nullGeometryFeatures_)) (0, $b998d41b678ed5d1$export$8b58be045bf06082)(features, Object.values(this.nullGeometryFeatures_));\n        }\n        return features;\n    }\n    /**\r\n   * Get all features whose geometry intersects the provided coordinate.\r\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\r\n   * @return {Array<FeatureType>} Features.\r\n   * @api\r\n   */ getFeaturesAtCoordinate(coordinate) {\n        /** @type {Array<FeatureType>} */ const features = [];\n        this.forEachFeatureAtCoordinateDirect(coordinate, function(feature) {\n            features.push(feature);\n        });\n        return features;\n    }\n    /**\r\n   * Get all features whose bounding box intersects the provided extent.  Note that this returns an array of\r\n   * all features intersecting the given extent in random order (so it may include\r\n   * features whose geometries do not intersect the extent).\r\n   *\r\n   * When `useSpatialIndex` is set to false, this method will return all\r\n   * features.\r\n   *\r\n   * @param {import(\"../extent.js\").Extent} extent Extent.\r\n   * @param {import(\"../proj/Projection.js\").default} [projection] Include features\r\n   * where `extent` exceeds the x-axis bounds of `projection` and wraps around the world.\r\n   * @return {Array<FeatureType>} Features.\r\n   * @api\r\n   */ getFeaturesInExtent(extent, projection) {\n        if (this.featuresRtree_) {\n            const multiWorld = projection && projection.canWrapX() && this.getWrapX();\n            if (!multiWorld) return this.featuresRtree_.getInExtent(extent);\n            const extents = (0, $6da4c8ed3074c92b$export$9031237f01de0947)(extent, projection);\n            return [].concat(...extents.map((anExtent)=>this.featuresRtree_.getInExtent(anExtent)));\n        }\n        if (this.featuresCollection_) return this.featuresCollection_.getArray().slice(0);\n        return [];\n    }\n    /**\r\n   * Get the closest feature to the provided coordinate.\r\n   *\r\n   * This method is not available when the source is configured with\r\n   * `useSpatialIndex` set to `false` and the features in this source are of type\r\n   * {@link module:ol/Feature~Feature}.\r\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\r\n   * @param {function(FeatureType):boolean} [filter] Feature filter function.\r\n   *     The filter function will receive one argument, the {@link module:ol/Feature~Feature feature}\r\n   *     and it should return a boolean value. By default, no filtering is made.\r\n   * @return {FeatureType} Closest feature.\r\n   * @api\r\n   */ getClosestFeatureToCoordinate(coordinate, filter) {\n        // Find the closest feature using branch and bound.  We start searching an\n        // infinite extent, and find the distance from the first feature found.  This\n        // becomes the closest feature.  We then compute a smaller extent which any\n        // closer feature must intersect.  We continue searching with this smaller\n        // extent, trying to find a closer feature.  Every time we find a closer\n        // feature, we update the extent being searched so that any even closer\n        // feature must intersect it.  We continue until we run out of features.\n        const x = coordinate[0];\n        const y = coordinate[1];\n        let closestFeature = null;\n        const closestPoint = [\n            NaN,\n            NaN\n        ];\n        let minSquaredDistance = Infinity;\n        const extent = [\n            -Infinity,\n            -Infinity,\n            Infinity,\n            Infinity\n        ];\n        filter = filter ? filter : (0, $013a1733c226ec50$export$22e23a2304399231);\n        this.featuresRtree_.forEachInExtent(extent, /**\r\n       * @param {FeatureType} feature Feature.\r\n       */ function(feature) {\n            if (filter(feature)) {\n                const geometry = feature.getGeometry();\n                const previousMinSquaredDistance = minSquaredDistance;\n                minSquaredDistance = geometry instanceof (0, $36d6c36c1f9ad5d9$export$2e2bcd8739ae039) ? 0 : geometry.closestPointXY(x, y, closestPoint, minSquaredDistance);\n                if (minSquaredDistance < previousMinSquaredDistance) {\n                    closestFeature = feature;\n                    // This is sneaky.  Reduce the extent that it is currently being\n                    // searched while the R-Tree traversal using this same extent object\n                    // is still in progress.  This is safe because the new extent is\n                    // strictly contained by the old extent.\n                    const minDistance = Math.sqrt(minSquaredDistance);\n                    extent[0] = x - minDistance;\n                    extent[1] = y - minDistance;\n                    extent[2] = x + minDistance;\n                    extent[3] = y + minDistance;\n                }\n            }\n        });\n        return closestFeature;\n    }\n    /**\r\n   * Get the extent of the features currently in the source.\r\n   *\r\n   * This method is not available when the source is configured with\r\n   * `useSpatialIndex` set to `false`.\r\n   * @param {import(\"../extent.js\").Extent} [extent] Destination extent. If provided, no new extent\r\n   *     will be created. Instead, that extent's coordinates will be overwritten.\r\n   * @return {import(\"../extent.js\").Extent} Extent.\r\n   * @api\r\n   */ getExtent(extent) {\n        return this.featuresRtree_.getExtent(extent);\n    }\n    /**\r\n   * Get a feature by its identifier (the value returned by feature.getId()). When `RenderFeature`s\r\n   * are used, `getFeatureById()` can return an array of `RenderFeature`s. This allows for handling\r\n   * of `GeometryCollection` geometries, where format readers create one `RenderFeature` per\r\n   * `GeometryCollection` member.\r\n   * Note that the index treats string and numeric identifiers as the same.  So\r\n   * `source.getFeatureById(2)` will return a feature with id `'2'` or `2`.\r\n   *\r\n   * @param {string|number} id Feature identifier.\r\n   * @return {FeatureClassOrArrayOfRenderFeatures<FeatureType>|null} The feature (or `null` if not found).\r\n   * @api\r\n   */ getFeatureById(id) {\n        const feature = this.idIndex_[id.toString()];\n        return feature !== undefined ? /** @type {FeatureClassOrArrayOfRenderFeatures<FeatureType>} */ feature : null;\n    }\n    /**\r\n   * Get a feature by its internal unique identifier (using `getUid`).\r\n   *\r\n   * @param {string} uid Feature identifier.\r\n   * @return {FeatureType|null} The feature (or `null` if not found).\r\n   */ getFeatureByUid(uid) {\n        const feature = this.uidIndex_[uid];\n        return feature !== undefined ? feature : null;\n    }\n    /**\r\n   * Get the format associated with this source.\r\n   *\r\n   * @return {import(\"../format/Feature.js\").default<FeatureType>|null}} The feature format.\r\n   * @api\r\n   */ getFormat() {\n        return this.format_;\n    }\n    /**\r\n   * @return {boolean} The source can have overlapping geometries.\r\n   */ getOverlaps() {\n        return this.overlaps_;\n    }\n    /**\r\n   * Get the url associated with this source.\r\n   *\r\n   * @return {string|import(\"../featureloader.js\").FeatureUrlFunction|undefined} The url.\r\n   * @api\r\n   */ getUrl() {\n        return this.url_;\n    }\n    /**\r\n   * @param {Event} event Event.\r\n   * @private\r\n   */ handleFeatureChange_(event) {\n        const feature = /** @type {FeatureType} */ event.target;\n        const featureKey = (0, $6c5e11070e371322$export$5e82334337e0f204)(feature);\n        const geometry = feature.getGeometry();\n        if (!geometry) {\n            if (!(featureKey in this.nullGeometryFeatures_)) {\n                if (this.featuresRtree_) this.featuresRtree_.remove(feature);\n                this.nullGeometryFeatures_[featureKey] = feature;\n            }\n        } else {\n            const extent = geometry.getExtent();\n            if (featureKey in this.nullGeometryFeatures_) {\n                delete this.nullGeometryFeatures_[featureKey];\n                if (this.featuresRtree_) this.featuresRtree_.insert(extent, feature);\n            } else if (this.featuresRtree_) this.featuresRtree_.update(extent, feature);\n        }\n        const id = feature.getId();\n        if (id !== undefined) {\n            const sid = id.toString();\n            if (this.idIndex_[sid] !== feature) {\n                this.removeFromIdIndex_(feature);\n                this.idIndex_[sid] = feature;\n            }\n        } else {\n            this.removeFromIdIndex_(feature);\n            this.uidIndex_[featureKey] = feature;\n        }\n        this.changed();\n        this.dispatchEvent(new $84888e4daf3fdf44$export$d402fd02dc2b661c((0, $ccc4e6f11f11978f$export$2e2bcd8739ae039).CHANGEFEATURE, feature));\n    }\n    /**\r\n   * Returns true if the feature is contained within the source.\r\n   * @param {FeatureType} feature Feature.\r\n   * @return {boolean} Has feature.\r\n   * @api\r\n   */ hasFeature(feature) {\n        const id = feature.getId();\n        if (id !== undefined) return id in this.idIndex_;\n        return (0, $6c5e11070e371322$export$5e82334337e0f204)(feature) in this.uidIndex_;\n    }\n    /**\r\n   * @return {boolean} Is empty.\r\n   */ isEmpty() {\n        if (this.featuresRtree_) return this.featuresRtree_.isEmpty() && (0, $beaefe87199bb537$export$dd1bc94b04021eeb)(this.nullGeometryFeatures_);\n        if (this.featuresCollection_) return this.featuresCollection_.getLength() === 0;\n        return true;\n    }\n    /**\r\n   * @param {import(\"../extent.js\").Extent} extent Extent.\r\n   * @param {number} resolution Resolution.\r\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\r\n   */ loadFeatures(extent, resolution, projection) {\n        const loadedExtentsRtree = this.loadedExtentsRtree_;\n        const extentsToLoad = this.strategy_(extent, resolution, projection);\n        for(let i = 0, ii = extentsToLoad.length; i < ii; ++i){\n            const extentToLoad = extentsToLoad[i];\n            const alreadyLoaded = loadedExtentsRtree.forEachInExtent(extentToLoad, /**\r\n         * @param {{extent: import(\"../extent.js\").Extent}} object Object.\r\n         * @return {boolean} Contains.\r\n         */ function(object) {\n                return (0, $6da4c8ed3074c92b$export$be866b1e0809b17e)(object.extent, extentToLoad);\n            });\n            if (!alreadyLoaded) {\n                ++this.loadingExtentsCount_;\n                this.dispatchEvent(new $84888e4daf3fdf44$export$d402fd02dc2b661c((0, $ccc4e6f11f11978f$export$2e2bcd8739ae039).FEATURESLOADSTART));\n                this.loader_.call(this, extentToLoad, resolution, projection, /**\r\n           * @param {Array<FeatureType>} features Loaded features\r\n           */ (features)=>{\n                    --this.loadingExtentsCount_;\n                    this.dispatchEvent(new $84888e4daf3fdf44$export$d402fd02dc2b661c((0, $ccc4e6f11f11978f$export$2e2bcd8739ae039).FEATURESLOADEND, undefined, features));\n                }, ()=>{\n                    --this.loadingExtentsCount_;\n                    this.dispatchEvent(new $84888e4daf3fdf44$export$d402fd02dc2b661c((0, $ccc4e6f11f11978f$export$2e2bcd8739ae039).FEATURESLOADERROR));\n                });\n                loadedExtentsRtree.insert(extentToLoad, {\n                    extent: extentToLoad.slice()\n                });\n            }\n        }\n        this.loading = this.loader_.length < 4 ? false : this.loadingExtentsCount_ > 0;\n    }\n    /**\r\n   * @override\r\n   */ refresh() {\n        this.clear(true);\n        this.loadedExtentsRtree_.clear();\n        super.refresh();\n    }\n    /**\r\n   * Remove an extent from the list of loaded extents.\r\n   * @param {import(\"../extent.js\").Extent} extent Extent.\r\n   * @api\r\n   */ removeLoadedExtent(extent) {\n        const loadedExtentsRtree = this.loadedExtentsRtree_;\n        const obj = loadedExtentsRtree.forEachInExtent(extent, function(object) {\n            if ((0, $6da4c8ed3074c92b$export$e9bab7fafb253603)(object.extent, extent)) return object;\n        });\n        if (obj) loadedExtentsRtree.remove(obj);\n    }\n    /**\r\n   * Batch remove features from the source.  If you want to remove all features\r\n   * at once, use the {@link module:ol/source/Vector~VectorSource#clear #clear()} method\r\n   * instead.\r\n   * @param {Array<FeatureType>} features Features to remove.\r\n   * @api\r\n   */ removeFeatures(features) {\n        let removed = false;\n        for(let i = 0, ii = features.length; i < ii; ++i)removed = this.removeFeatureInternal(features[i]) || removed;\n        if (removed) this.changed();\n    }\n    /**\r\n   * Remove a single feature from the source. If you want to batch remove\r\n   * features, use the {@link module:ol/source/Vector~VectorSource#removeFeatures #removeFeatures()} method\r\n   * instead.\r\n   * @param {FeatureType} feature Feature to remove.\r\n   * @api\r\n   */ removeFeature(feature) {\n        if (!feature) return;\n        const removed = this.removeFeatureInternal(feature);\n        if (removed) this.changed();\n    }\n    /**\r\n   * Remove feature without firing a `change` event.\r\n   * @param {FeatureType} feature Feature.\r\n   * @return {boolean} True if the feature was removed, false if it was not found.\r\n   * @protected\r\n   */ removeFeatureInternal(feature) {\n        const featureKey = (0, $6c5e11070e371322$export$5e82334337e0f204)(feature);\n        if (!(featureKey in this.uidIndex_)) return false;\n        if (featureKey in this.nullGeometryFeatures_) delete this.nullGeometryFeatures_[featureKey];\n        else if (this.featuresRtree_) this.featuresRtree_.remove(feature);\n        const featureChangeKeys = this.featureChangeKeys_[featureKey];\n        featureChangeKeys?.forEach((0, $d5bf8abd656a3cdc$export$b0a21c8b3c1c921));\n        delete this.featureChangeKeys_[featureKey];\n        const id = feature.getId();\n        if (id !== undefined) {\n            const idString = id.toString();\n            const indexedFeature = this.idIndex_[idString];\n            if (indexedFeature === feature) delete this.idIndex_[idString];\n            else if (Array.isArray(indexedFeature)) {\n                indexedFeature.splice(indexedFeature.indexOf(feature), 1);\n                if (indexedFeature.length === 1) this.idIndex_[idString] = indexedFeature[0];\n            }\n        }\n        delete this.uidIndex_[featureKey];\n        if (this.hasListener((0, $ccc4e6f11f11978f$export$2e2bcd8739ae039).REMOVEFEATURE)) this.dispatchEvent(new $84888e4daf3fdf44$export$d402fd02dc2b661c((0, $ccc4e6f11f11978f$export$2e2bcd8739ae039).REMOVEFEATURE, feature));\n        return true;\n    }\n    /**\r\n   * Remove a feature from the id index.  Called internally when the feature id\r\n   * may have changed.\r\n   * @param {FeatureType} feature The feature.\r\n   * @private\r\n   */ removeFromIdIndex_(feature) {\n        for(const id in this.idIndex_)if (this.idIndex_[id] === feature) {\n            delete this.idIndex_[id];\n            break;\n        }\n    }\n    /**\r\n   * Set the new loader of the source. The next render cycle will use the\r\n   * new loader.\r\n   * @param {import(\"../featureloader.js\").FeatureLoader} loader The loader to set.\r\n   * @api\r\n   */ setLoader(loader) {\n        this.loader_ = loader;\n    }\n    /**\r\n   * Points the source to a new url. The next render cycle will use the new url.\r\n   * @param {string|import(\"../featureloader.js\").FeatureUrlFunction} url Url.\r\n   * @api\r\n   */ setUrl(url) {\n        (0, $35d5ec884318008e$export$a7a9523472993e97)(this.format_, '`format` must be set when `url` is set');\n        this.url_ = url;\n        this.setLoader((0, $588823c001569193$export$14cc81df70b6707e)(url, this.format_));\n    }\n    /**\r\n   * @param {boolean} overlaps The source can have overlapping geometries.\r\n   */ setOverlaps(overlaps) {\n        this.overlaps_ = overlaps;\n        this.changed();\n    }\n}\nvar $84888e4daf3fdf44$export$2e2bcd8739ae039 = $84888e4daf3fdf44$var$VectorSource;\n\n\n/**\r\n * @module ol/layer/Tile\r\n */ /**\r\n * @module ol/renderer/canvas/TileLayer\r\n */ /**\r\n * @module ol/DataTile\r\n */ \n\n\nfunction $fd518ba473015b27$export$3a7c913cb40dcb7d(data) {\n    return data instanceof Image || data instanceof HTMLCanvasElement || data instanceof HTMLVideoElement || data instanceof ImageBitmap ? data : null;\n}\nfunction $fd518ba473015b27$export$7386cb0413f6b283(data) {\n    return data instanceof Uint8Array || data instanceof Uint8ClampedArray || data instanceof Float32Array || data instanceof DataView ? data : null;\n}\nconst $fd518ba473015b27$export$df4c617b86128e3e = new Error('disposed');\n/**\r\n * @type {CanvasRenderingContext2D|null}\r\n */ let $fd518ba473015b27$var$sharedContext = null;\nfunction $fd518ba473015b27$export$45b10814cc054894(image) {\n    if (!$fd518ba473015b27$var$sharedContext) $fd518ba473015b27$var$sharedContext = (0, $075f937d7366f1a2$export$9e05d10eae75c464)(image.width, image.height, undefined, {\n        willReadFrequently: true\n    });\n    const canvas = $fd518ba473015b27$var$sharedContext.canvas;\n    const width = image.width;\n    if (canvas.width !== width) canvas.width = width;\n    const height = image.height;\n    if (canvas.height !== height) canvas.height = height;\n    $fd518ba473015b27$var$sharedContext.clearRect(0, 0, width, height);\n    $fd518ba473015b27$var$sharedContext.drawImage(image, 0, 0);\n    return $fd518ba473015b27$var$sharedContext.getImageData(0, 0, width, height).data;\n}\n/**\r\n * @type {import('./size.js').Size}\r\n */ const $fd518ba473015b27$var$defaultSize = [\n    256,\n    256\n];\n/**\r\n * @typedef {Object} Options\r\n * @property {import(\"./tilecoord.js\").TileCoord} tileCoord Tile coordinate.\r\n * @property {function(): Promise<Data>} loader Data loader.  For loaders that generate images,\r\n * the promise should not resolve until the image is loaded.\r\n * @property {number} [transition=250] A duration for tile opacity\r\n * transitions in milliseconds. A duration of 0 disables the opacity transition.\r\n * @property {boolean} [interpolate=false] Use interpolated values when resampling.  By default,\r\n * the nearest neighbor is used when resampling.\r\n * @property {import('./size.js').Size} [size=[256, 256]] Tile size.\r\n * @property {AbortController} [controller] An abort controller.\r\n * @api\r\n */ class $fd518ba473015b27$var$DataTile extends (0, $0f235d2d04095c6e$export$2e2bcd8739ae039) {\n    /**\r\n   * @param {Options} options Tile options.\r\n   */ constructor(options){\n        const state = (0, $b8291d9739c3c64e$export$2e2bcd8739ae039).IDLE;\n        super(options.tileCoord, state, {\n            transition: options.transition,\n            interpolate: options.interpolate\n        });\n        /**\r\n     * @type {function(): Promise<Data>}\r\n     * @private\r\n     */ this.loader_ = options.loader;\n        /**\r\n     * @type {Data}\r\n     * @private\r\n     */ this.data_ = null;\n        /**\r\n     * @type {Error}\r\n     * @private\r\n     */ this.error_ = null;\n        /**\r\n     * @type {import('./size.js').Size|null}\r\n     * @private\r\n     */ this.size_ = options.size || null;\n        /**\r\n     * @type {AbortController|null}\r\n     * @private\r\n     */ this.controller_ = options.controller || null;\n    }\n    /**\r\n   * Get the tile size.\r\n   * @return {import('./size.js').Size} Tile size.\r\n   */ getSize() {\n        if (this.size_) return this.size_;\n        const imageData = $fd518ba473015b27$export$3a7c913cb40dcb7d(this.data_);\n        if (imageData) return [\n            imageData.width,\n            imageData.height\n        ];\n        return $fd518ba473015b27$var$defaultSize;\n    }\n    /**\r\n   * Get the data for the tile.\r\n   * @return {Data} Tile data.\r\n   * @api\r\n   */ getData() {\n        return this.data_;\n    }\n    /**\r\n   * Get any loading error.\r\n   * @return {Error} Loading error.\r\n   * @api\r\n   */ getError() {\n        return this.error_;\n    }\n    /**\r\n   * Load the tile data.\r\n   * @api\r\n   * @override\r\n   */ load() {\n        if (this.state !== (0, $b8291d9739c3c64e$export$2e2bcd8739ae039).IDLE && this.state !== (0, $b8291d9739c3c64e$export$2e2bcd8739ae039).ERROR) return;\n        this.state = (0, $b8291d9739c3c64e$export$2e2bcd8739ae039).LOADING;\n        this.changed();\n        const self = this;\n        this.loader_().then(function(data) {\n            self.data_ = data;\n            self.state = (0, $b8291d9739c3c64e$export$2e2bcd8739ae039).LOADED;\n            self.changed();\n        }).catch(function(error) {\n            self.error_ = error;\n            self.state = (0, $b8291d9739c3c64e$export$2e2bcd8739ae039).ERROR;\n            self.changed();\n        });\n    }\n    /**\r\n   * Clean up.\r\n   * @override\r\n   */ disposeInternal() {\n        if (this.controller_) {\n            this.controller_.abort($fd518ba473015b27$export$df4c617b86128e3e);\n            this.controller_ = null;\n        }\n        super.disposeInternal();\n    }\n}\nvar $fd518ba473015b27$export$2e2bcd8739ae039 = $fd518ba473015b27$var$DataTile;\n\n\n\n\n\n\n\n\n\n\n/**\r\n * @module ol/structs/LRUCache\r\n */ \n\n/**\r\n * @typedef {Object} Entry\r\n * @property {string} key_ Key.\r\n * @property {Entry|null} newer Newer.\r\n * @property {Entry|null} older Older.\r\n * @property {*} value_ Value.\r\n */ /**\r\n * @classdesc\r\n * Implements a Least-Recently-Used cache where the keys do not conflict with\r\n * Object's properties (e.g. 'hasOwnProperty' is not allowed as a key). Expiring\r\n * items from the cache is the responsibility of the user.\r\n *\r\n * @fires import(\"../events/Event.js\").default\r\n * @template T\r\n */ class $859b1614288c6316$var$LRUCache {\n    /**\r\n   * @param {number} [highWaterMark] High water mark.\r\n   */ constructor(highWaterMark){\n        /**\r\n     * Desired max cache size after expireCache(). If set to 0, no cache entries\r\n     * will be pruned at all.\r\n     * @type {number}\r\n     */ this.highWaterMark = highWaterMark !== undefined ? highWaterMark : 2048;\n        /**\r\n     * @private\r\n     * @type {number}\r\n     */ this.count_ = 0;\n        /**\r\n     * @private\r\n     * @type {!Object<string, Entry>}\r\n     */ this.entries_ = {};\n        /**\r\n     * @private\r\n     * @type {?Entry}\r\n     */ this.oldest_ = null;\n        /**\r\n     * @private\r\n     * @type {?Entry}\r\n     */ this.newest_ = null;\n    }\n    deleteOldest() {\n        const entry = this.pop();\n        if (entry instanceof (0, $3273ed08087da3da$export$2e2bcd8739ae039)) entry.dispose();\n    }\n    /**\r\n   * @return {boolean} Can expire cache.\r\n   */ canExpireCache() {\n        return this.highWaterMark > 0 && this.getCount() > this.highWaterMark;\n    }\n    /**\r\n   * Expire the cache. When the cache entry is a {@link module:ol/Disposable~Disposable},\r\n   * the entry will be disposed.\r\n   * @param {!Object<string, boolean>} [keep] Keys to keep. To be implemented by subclasses.\r\n   */ expireCache(keep) {\n        while(this.canExpireCache())this.deleteOldest();\n    }\n    /**\r\n   * FIXME empty description for jsdoc\r\n   */ clear() {\n        while(this.oldest_)this.deleteOldest();\n    }\n    /**\r\n   * @param {string} key Key.\r\n   * @return {boolean} Contains key.\r\n   */ containsKey(key) {\n        return this.entries_.hasOwnProperty(key);\n    }\n    /**\r\n   * @param {function(T, string, LRUCache<T>): ?} f The function\r\n   *     to call for every entry from the oldest to the newer. This function takes\r\n   *     3 arguments (the entry value, the entry key and the LRUCache object).\r\n   *     The return value is ignored.\r\n   */ forEach(f) {\n        let entry = this.oldest_;\n        while(entry){\n            f(entry.value_, entry.key_, this);\n            entry = entry.newer;\n        }\n    }\n    /**\r\n   * @param {string} key Key.\r\n   * @param {*} [options] Options (reserved for subclasses).\r\n   * @return {T} Value.\r\n   */ get(key, options) {\n        const entry = this.entries_[key];\n        (0, $35d5ec884318008e$export$a7a9523472993e97)(entry !== undefined, 'Tried to get a value for a key that does not exist in the cache');\n        if (entry === this.newest_) return entry.value_;\n        if (entry === this.oldest_) {\n            this.oldest_ = /** @type {Entry} */ this.oldest_.newer;\n            this.oldest_.older = null;\n        } else {\n            entry.newer.older = entry.older;\n            entry.older.newer = entry.newer;\n        }\n        entry.newer = null;\n        entry.older = this.newest_;\n        this.newest_.newer = entry;\n        this.newest_ = entry;\n        return entry.value_;\n    }\n    /**\r\n   * Remove an entry from the cache.\r\n   * @param {string} key The entry key.\r\n   * @return {T} The removed entry.\r\n   */ remove(key) {\n        const entry = this.entries_[key];\n        (0, $35d5ec884318008e$export$a7a9523472993e97)(entry !== undefined, 'Tried to get a value for a key that does not exist in the cache');\n        if (entry === this.newest_) {\n            this.newest_ = /** @type {Entry} */ entry.older;\n            if (this.newest_) this.newest_.newer = null;\n        } else if (entry === this.oldest_) {\n            this.oldest_ = /** @type {Entry} */ entry.newer;\n            if (this.oldest_) this.oldest_.older = null;\n        } else {\n            entry.newer.older = entry.older;\n            entry.older.newer = entry.newer;\n        }\n        delete this.entries_[key];\n        --this.count_;\n        return entry.value_;\n    }\n    /**\r\n   * @return {number} Count.\r\n   */ getCount() {\n        return this.count_;\n    }\n    /**\r\n   * @return {Array<string>} Keys.\r\n   */ getKeys() {\n        const keys = new Array(this.count_);\n        let i = 0;\n        let entry;\n        for(entry = this.newest_; entry; entry = entry.older)keys[i++] = entry.key_;\n        return keys;\n    }\n    /**\r\n   * @return {Array<T>} Values.\r\n   */ getValues() {\n        const values = new Array(this.count_);\n        let i = 0;\n        let entry;\n        for(entry = this.newest_; entry; entry = entry.older)values[i++] = entry.value_;\n        return values;\n    }\n    /**\r\n   * @return {T} Last value.\r\n   */ peekLast() {\n        return this.oldest_.value_;\n    }\n    /**\r\n   * @return {string} Last key.\r\n   */ peekLastKey() {\n        return this.oldest_.key_;\n    }\n    /**\r\n   * Get the key of the newest item in the cache.  Throws if the cache is empty.\r\n   * @return {string} The newest key.\r\n   */ peekFirstKey() {\n        return this.newest_.key_;\n    }\n    /**\r\n   * Return an entry without updating least recently used time.\r\n   * @param {string} key Key.\r\n   * @return {T|undefined} Value.\r\n   */ peek(key) {\n        return this.entries_[key]?.value_;\n    }\n    /**\r\n   * @return {T} value Value.\r\n   */ pop() {\n        const entry = this.oldest_;\n        delete this.entries_[entry.key_];\n        if (entry.newer) entry.newer.older = null;\n        this.oldest_ = /** @type {Entry} */ entry.newer;\n        if (!this.oldest_) this.newest_ = null;\n        --this.count_;\n        return entry.value_;\n    }\n    /**\r\n   * @param {string} key Key.\r\n   * @param {T} value Value.\r\n   */ replace(key, value) {\n        this.get(key); // update `newest_`\n        this.entries_[key].value_ = value;\n    }\n    /**\r\n   * @param {string} key Key.\r\n   * @param {T} value Value.\r\n   */ set(key, value) {\n        (0, $35d5ec884318008e$export$a7a9523472993e97)(!(key in this.entries_), 'Tried to set a value for a key that is used already');\n        const entry = {\n            key_: key,\n            newer: null,\n            older: this.newest_,\n            value_: value\n        };\n        if (!this.newest_) this.oldest_ = entry;\n        else this.newest_.newer = entry;\n        this.newest_ = entry;\n        this.entries_[key] = entry;\n        ++this.count_;\n    }\n    /**\r\n   * Set a maximum number of entries for the cache.\r\n   * @param {number} size Cache size.\r\n   * @api\r\n   */ setSize(size) {\n        this.highWaterMark = size;\n    }\n}\nvar $859b1614288c6316$export$2e2bcd8739ae039 = $859b1614288c6316$var$LRUCache;\n\n\n\n\n\n\n/**\r\n * @param {string} sourceKey The source key.\r\n * @param {number} z The tile z level.\r\n * @param {number} x The tile x level.\r\n * @param {number} y The tile y level.\r\n * @return {string} The cache key.\r\n */ function $02fffef185f4339b$var$getCacheKey(sourceKey, z, x, y) {\n    return `${sourceKey},${(0, $bf2a04496fadabc6$export$92d0df0f1d25c63c)(z, x, y)}`;\n}\n/**\r\n * @typedef {Object<number, Set<import(\"../../Tile.js\").default>>} TileLookup\r\n */ /**\r\n * Add a tile to the lookup.\r\n * @param {TileLookup} tilesByZ Lookup of tiles by zoom level.\r\n * @param {import(\"../../Tile.js\").default} tile A tile.\r\n * @param {number} z The zoom level.\r\n * @return {boolean} The tile was added to the lookup.\r\n */ function $02fffef185f4339b$var$addTileToLookup(tilesByZ, tile, z) {\n    if (!(z in tilesByZ)) {\n        tilesByZ[z] = new Set([\n            tile\n        ]);\n        return true;\n    }\n    const set = tilesByZ[z];\n    const existing = set.has(tile);\n    if (!existing) set.add(tile);\n    return !existing;\n}\n/**\r\n * Remove a tile from the lookup.\r\n * @param {TileLookup} tilesByZ Lookup of tiles by zoom level.\r\n * @param {import(\"../../Tile.js\").default} tile A tile.\r\n * @param {number} z The zoom level.\r\n * @return {boolean} The tile was removed from the lookup.\r\n */ function $02fffef185f4339b$var$removeTileFromLookup(tilesByZ, tile, z) {\n    const set = tilesByZ[z];\n    if (set) return set.delete(tile);\n    return false;\n}\n/**\r\n * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\r\n * @param {import(\"../../extent.js\").Extent} extent The frame extent.\r\n * @return {import(\"../../extent.js\").Extent} Frame extent intersected with layer extents.\r\n */ function $02fffef185f4339b$var$getRenderExtent(frameState, extent) {\n    const layerState = frameState.layerStatesArray[frameState.layerIndex];\n    if (layerState.extent) extent = (0, $6da4c8ed3074c92b$export$72209efa88586d42)(extent, (0, $9c4744460e43e41b$export$494be3a3a25689ca)(layerState.extent, frameState.viewState.projection));\n    const source = /** @type {import(\"../../source/Tile.js\").default} */ layerState.layer.getRenderSource();\n    if (!source.getWrapX()) {\n        const gridExtent = source.getTileGridForProjection(frameState.viewState.projection).getExtent();\n        if (gridExtent) extent = (0, $6da4c8ed3074c92b$export$72209efa88586d42)(extent, gridExtent);\n    }\n    return extent;\n}\n/**\r\n * @typedef {Object} Options\r\n * @property {number} [cacheSize=512] The cache size.\r\n */ /**\r\n * @classdesc\r\n * Canvas renderer for tile layers.\r\n * @api\r\n * @template {import(\"../../layer/Tile.js\").default|import(\"../../layer/VectorTile.js\").default} [LayerType=import(\"../../layer/Tile.js\").default<import(\"../../source/Tile.js\").default>|import(\"../../layer/VectorTile.js\").default]\r\n * @extends {CanvasLayerRenderer<LayerType>}\r\n */ class $02fffef185f4339b$var$CanvasTileLayerRenderer extends (0, $42152f52b26b6ca7$export$2e2bcd8739ae039) {\n    /**\r\n   * @param {LayerType} tileLayer Tile layer.\r\n   * @param {Options} [options] Options.\r\n   */ constructor(tileLayer, options){\n        super(tileLayer);\n        options = options || {};\n        /**\r\n     * Rendered extent has changed since the previous `renderFrame()` call\r\n     * @type {boolean}\r\n     */ this.extentChanged = true;\n        /**\r\n     * The last call to `renderFrame` was completed with all tiles loaded\r\n     * @type {boolean}\r\n     */ this.renderComplete = false;\n        /**\r\n     * @private\r\n     * @type {?import(\"../../extent.js\").Extent}\r\n     */ this.renderedExtent_ = null;\n        /**\r\n     * @protected\r\n     * @type {number}\r\n     */ this.renderedPixelRatio;\n        /**\r\n     * @protected\r\n     * @type {import(\"../../proj/Projection.js\").default|null}\r\n     */ this.renderedProjection = null;\n        /**\r\n     * @private\r\n     * @type {number}\r\n     */ this.renderedRevision_;\n        /**\r\n     * @protected\r\n     * @type {!Array<import(\"../../Tile.js\").default>}\r\n     */ this.renderedTiles = [];\n        /**\r\n     * @private\r\n     * @type {string}\r\n     */ this.renderedSourceKey_;\n        /**\r\n     * @private\r\n     * @type {number}\r\n     */ this.renderedSourceRevision_;\n        /**\r\n     * @protected\r\n     * @type {import(\"../../extent.js\").Extent}\r\n     */ this.tempExtent = (0, $6da4c8ed3074c92b$export$fe201bb3bbe031e9)();\n        /**\r\n     * @private\r\n     * @type {import(\"../../TileRange.js\").default}\r\n     */ this.tempTileRange_ = new (0, $550e524b0d1b61d4$export$2e2bcd8739ae039)(0, 0, 0, 0);\n        /**\r\n     * @type {import(\"../../tilecoord.js\").TileCoord}\r\n     * @private\r\n     */ this.tempTileCoord_ = (0, $bf2a04496fadabc6$export$958e3e1a02eac4b6)(0, 0, 0);\n        const cacheSize = options.cacheSize !== undefined ? options.cacheSize : 512;\n        /**\r\n     * @type {import(\"../../structs/LRUCache.js\").default<import(\"../../Tile.js\").default>}\r\n     * @private\r\n     */ this.tileCache_ = new (0, $859b1614288c6316$export$2e2bcd8739ae039)(cacheSize);\n        this.maxStaleKeys = cacheSize * 0.5;\n    }\n    /**\r\n   * @return {LRUCache} Tile cache.\r\n   */ getTileCache() {\n        return this.tileCache_;\n    }\n    /**\r\n   * Get a tile from the cache or create one if needed.\r\n   *\r\n   * @param {number} z Tile coordinate z.\r\n   * @param {number} x Tile coordinate x.\r\n   * @param {number} y Tile coordinate y.\r\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\r\n   * @return {import(\"../../Tile.js\").default|null} Tile (or null if outside source extent).\r\n   * @protected\r\n   */ getOrCreateTile(z, x, y, frameState) {\n        const tileCache = this.tileCache_;\n        const tileLayer = this.getLayer();\n        const tileSource = tileLayer.getSource();\n        const cacheKey = $02fffef185f4339b$var$getCacheKey(tileSource.getKey(), z, x, y);\n        /** @type {import(\"../../Tile.js\").default} */ let tile;\n        if (tileCache.containsKey(cacheKey)) tile = tileCache.get(cacheKey);\n        else {\n            tile = tileSource.getTile(z, x, y, frameState.pixelRatio, frameState.viewState.projection);\n            if (!tile) return null;\n            tileCache.set(cacheKey, tile);\n        }\n        return tile;\n    }\n    /**\r\n   * @param {number} z Tile coordinate z.\r\n   * @param {number} x Tile coordinate x.\r\n   * @param {number} y Tile coordinate y.\r\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\r\n   * @return {import(\"../../Tile.js\").default|null} Tile (or null if outside source extent).\r\n   * @protected\r\n   */ getTile(z, x, y, frameState) {\n        const tile = this.getOrCreateTile(z, x, y, frameState);\n        if (!tile) return null;\n        return tile;\n    }\n    /**\r\n   * @param {import(\"../../pixel.js\").Pixel} pixel Pixel.\r\n   * @return {Uint8ClampedArray} Data at the pixel location.\r\n   * @override\r\n   */ getData(pixel) {\n        const frameState = this.frameState;\n        if (!frameState) return null;\n        const layer = this.getLayer();\n        const coordinate = (0, $e22e7611e69f42a9$export$5635d7ef4b8fee1c)(frameState.pixelToCoordinateTransform, pixel.slice());\n        const layerExtent = layer.getExtent();\n        if (layerExtent) {\n            if (!(0, $6da4c8ed3074c92b$export$ac68c24d37ca240f)(layerExtent, coordinate)) return null;\n        }\n        const viewState = frameState.viewState;\n        const source = layer.getRenderSource();\n        const tileGrid = source.getTileGridForProjection(viewState.projection);\n        const tilePixelRatio = source.getTilePixelRatio(frameState.pixelRatio);\n        for(let z = tileGrid.getZForResolution(viewState.resolution); z >= tileGrid.getMinZoom(); --z){\n            const tileCoord = tileGrid.getTileCoordForCoordAndZ(coordinate, z);\n            const tile = this.getTile(z, tileCoord[1], tileCoord[2], frameState);\n            if (!tile || tile.getState() !== (0, $b8291d9739c3c64e$export$2e2bcd8739ae039).LOADED) continue;\n            const tileOrigin = tileGrid.getOrigin(z);\n            const tileSize = (0, $cc435a5409103773$export$a71a825ff42fb8e1)(tileGrid.getTileSize(z));\n            const tileResolution = tileGrid.getResolution(z);\n            /**\r\n       * @type {import('../../DataTile.js').ImageLike}\r\n       */ let image;\n            if (tile instanceof (0, $cd3bc8d185522361$export$2e2bcd8739ae039) || tile instanceof (0, $398e350e33050c07$export$2e2bcd8739ae039)) image = tile.getImage();\n            else if (tile instanceof (0, $fd518ba473015b27$export$2e2bcd8739ae039)) {\n                image = (0, $fd518ba473015b27$export$3a7c913cb40dcb7d)(tile.getData());\n                if (!image) continue;\n            } else continue;\n            const col = Math.floor(tilePixelRatio * ((coordinate[0] - tileOrigin[0]) / tileResolution - tileCoord[1] * tileSize[0]));\n            const row = Math.floor(tilePixelRatio * ((tileOrigin[1] - coordinate[1]) / tileResolution - tileCoord[2] * tileSize[1]));\n            const gutter = Math.round(tilePixelRatio * source.getGutterForProjection(viewState.projection));\n            return this.getImageData(image, col + gutter, row + gutter);\n        }\n        return null;\n    }\n    /**\r\n   * Determine whether render should be called.\r\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\r\n   * @return {boolean} Layer is ready to be rendered.\r\n   * @override\r\n   */ prepareFrame(frameState) {\n        if (!this.renderedProjection) this.renderedProjection = frameState.viewState.projection;\n        else if (frameState.viewState.projection !== this.renderedProjection) {\n            this.tileCache_.clear();\n            this.renderedProjection = frameState.viewState.projection;\n        }\n        const source = this.getLayer().getSource();\n        if (!source) return false;\n        const sourceRevision = source.getRevision();\n        if (!this.renderedRevision_) this.renderedRevision_ = sourceRevision;\n        else if (this.renderedRevision_ !== sourceRevision) {\n            this.renderedRevision_ = sourceRevision;\n            if (this.renderedSourceKey_ === source.getKey()) this.tileCache_.clear();\n        }\n        return true;\n    }\n    /**\r\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\r\n   * @param {import(\"../../extent.js\").Extent} extent The extent to be rendered.\r\n   * @param {number} initialZ The zoom level.\r\n   * @param {TileLookup} tilesByZ Lookup of tiles by zoom level.\r\n   * @param {number} preload Number of additional levels to load.\r\n   */ enqueueTiles(frameState, extent, initialZ, tilesByZ, preload) {\n        const viewState = frameState.viewState;\n        const tileLayer = this.getLayer();\n        const tileSource = tileLayer.getRenderSource();\n        const tileGrid = tileSource.getTileGridForProjection(viewState.projection);\n        const tileSourceKey = (0, $6c5e11070e371322$export$5e82334337e0f204)(tileSource);\n        if (!(tileSourceKey in frameState.wantedTiles)) frameState.wantedTiles[tileSourceKey] = {};\n        const wantedTiles = frameState.wantedTiles[tileSourceKey];\n        const map = tileLayer.getMapInternal();\n        const minZ = Math.max(initialZ - preload, tileGrid.getMinZoom(), tileGrid.getZForResolution(Math.min(tileLayer.getMaxResolution(), map ? map.getView().getResolutionForZoom(Math.max(tileLayer.getMinZoom(), 0)) : tileGrid.getResolution(0)), tileSource.zDirection));\n        const rotation = viewState.rotation;\n        const viewport = rotation ? (0, $6da4c8ed3074c92b$export$4b7a6fb4002cd6ac)(viewState.center, viewState.resolution, rotation, frameState.size) : undefined;\n        for(let z = initialZ; z >= minZ; --z){\n            const tileRange = tileGrid.getTileRangeForExtentAndZ(extent, z, this.tempTileRange_);\n            const tileResolution = tileGrid.getResolution(z);\n            for(let x = tileRange.minX; x <= tileRange.maxX; ++x)for(let y = tileRange.minY; y <= tileRange.maxY; ++y){\n                if (rotation && !tileGrid.tileCoordIntersectsViewport([\n                    z,\n                    x,\n                    y\n                ], viewport)) continue;\n                const tile = this.getTile(z, x, y, frameState);\n                if (!tile) continue;\n                const added = $02fffef185f4339b$var$addTileToLookup(tilesByZ, tile, z);\n                if (!added) continue;\n                const tileQueueKey = tile.getKey();\n                wantedTiles[tileQueueKey] = true;\n                if (tile.getState() === (0, $b8291d9739c3c64e$export$2e2bcd8739ae039).IDLE) {\n                    if (!frameState.tileQueue.isKeyQueued(tileQueueKey)) {\n                        const tileCoord = (0, $bf2a04496fadabc6$export$958e3e1a02eac4b6)(z, x, y, this.tempTileCoord_);\n                        frameState.tileQueue.enqueue([\n                            tile,\n                            tileSourceKey,\n                            tileGrid.getTileCoordCenter(tileCoord),\n                            tileResolution\n                        ]);\n                    }\n                }\n            }\n        }\n    }\n    /**\r\n   * Look for tiles covering the provided tile coordinate at an alternate\r\n   * zoom level.  Loaded tiles will be added to the provided tile texture lookup.\r\n   * @param {import(\"../../tilecoord.js\").TileCoord} tileCoord The target tile coordinate.\r\n   * @param {TileLookup} tilesByZ Lookup of tiles by zoom level.\r\n   * @return {boolean} The tile coordinate is covered by loaded tiles at the alternate zoom level.\r\n   * @private\r\n   */ findStaleTile_(tileCoord, tilesByZ) {\n        const tileCache = this.tileCache_;\n        const z = tileCoord[0];\n        const x = tileCoord[1];\n        const y = tileCoord[2];\n        const staleKeys = this.getStaleKeys();\n        for(let i = 0; i < staleKeys.length; ++i){\n            const cacheKey = $02fffef185f4339b$var$getCacheKey(staleKeys[i], z, x, y);\n            if (tileCache.containsKey(cacheKey)) {\n                const tile = tileCache.peek(cacheKey);\n                if (tile.getState() === (0, $b8291d9739c3c64e$export$2e2bcd8739ae039).LOADED) {\n                    tile.endTransition((0, $6c5e11070e371322$export$5e82334337e0f204)(this));\n                    $02fffef185f4339b$var$addTileToLookup(tilesByZ, tile, z);\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n    /**\r\n   * Look for tiles covering the provided tile coordinate at an alternate\r\n   * zoom level.  Loaded tiles will be added to the provided tile texture lookup.\r\n   * @param {import(\"../../tilegrid/TileGrid.js\").default} tileGrid The tile grid.\r\n   * @param {import(\"../../tilecoord.js\").TileCoord} tileCoord The target tile coordinate.\r\n   * @param {number} altZ The alternate zoom level.\r\n   * @param {TileLookup} tilesByZ Lookup of tiles by zoom level.\r\n   * @return {boolean} The tile coordinate is covered by loaded tiles at the alternate zoom level.\r\n   * @private\r\n   */ findAltTiles_(tileGrid, tileCoord, altZ, tilesByZ) {\n        const tileRange = tileGrid.getTileRangeForTileCoordAndZ(tileCoord, altZ, this.tempTileRange_);\n        if (!tileRange) return false;\n        let covered = true;\n        const tileCache = this.tileCache_;\n        const source = this.getLayer().getRenderSource();\n        const sourceKey = source.getKey();\n        for(let x = tileRange.minX; x <= tileRange.maxX; ++x)for(let y = tileRange.minY; y <= tileRange.maxY; ++y){\n            const cacheKey = $02fffef185f4339b$var$getCacheKey(sourceKey, altZ, x, y);\n            let loaded = false;\n            if (tileCache.containsKey(cacheKey)) {\n                const tile = tileCache.peek(cacheKey);\n                if (tile.getState() === (0, $b8291d9739c3c64e$export$2e2bcd8739ae039).LOADED) {\n                    $02fffef185f4339b$var$addTileToLookup(tilesByZ, tile, altZ);\n                    loaded = true;\n                }\n            }\n            if (!loaded) covered = false;\n        }\n        return covered;\n    }\n    /**\r\n   * Render the layer.\r\n   *\r\n   * The frame rendering logic has three parts:\r\n   *\r\n   *  1. Enqueue tiles\r\n   *  2. Find alt tiles for those that are not yet loaded\r\n   *  3. Render loaded tiles\r\n   *\r\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\r\n   * @param {HTMLElement} target Target that may be used to render content to.\r\n   * @return {HTMLElement} The rendered element.\r\n   * @override\r\n   */ renderFrame(frameState, target) {\n        this.renderComplete = true;\n        /**\r\n     * TODO:\r\n     *  maybe skip transition when not fully opaque\r\n     *  decide if this.renderComplete is useful\r\n     */ const layerState = frameState.layerStatesArray[frameState.layerIndex];\n        const viewState = frameState.viewState;\n        const projection = viewState.projection;\n        const viewResolution = viewState.resolution;\n        const viewCenter = viewState.center;\n        const pixelRatio = frameState.pixelRatio;\n        const tileLayer = this.getLayer();\n        const tileSource = tileLayer.getSource();\n        const tileGrid = tileSource.getTileGridForProjection(projection);\n        const z = tileGrid.getZForResolution(viewResolution, tileSource.zDirection);\n        const tileResolution = tileGrid.getResolution(z);\n        const sourceKey = tileSource.getKey();\n        if (!this.renderedSourceKey_) this.renderedSourceKey_ = sourceKey;\n        else if (this.renderedSourceKey_ !== sourceKey) {\n            this.prependStaleKey(this.renderedSourceKey_);\n            this.renderedSourceKey_ = sourceKey;\n        }\n        let frameExtent = frameState.extent;\n        const tilePixelRatio = tileSource.getTilePixelRatio(pixelRatio);\n        this.prepareContainer(frameState, target);\n        // desired dimensions of the canvas in pixels\n        const width = this.context.canvas.width;\n        const height = this.context.canvas.height;\n        const layerExtent = layerState.extent && (0, $9c4744460e43e41b$export$494be3a3a25689ca)(layerState.extent, projection);\n        if (layerExtent) frameExtent = (0, $6da4c8ed3074c92b$export$72209efa88586d42)(frameExtent, (0, $9c4744460e43e41b$export$494be3a3a25689ca)(layerState.extent, projection));\n        const dx = tileResolution * width / 2 / tilePixelRatio;\n        const dy = tileResolution * height / 2 / tilePixelRatio;\n        const canvasExtent = [\n            viewCenter[0] - dx,\n            viewCenter[1] - dy,\n            viewCenter[0] + dx,\n            viewCenter[1] + dy\n        ];\n        /**\r\n     * @type {TileLookup}\r\n     */ const tilesByZ = {};\n        this.renderedTiles.length = 0;\n        /**\r\n     * Part 1: Enqueue tiles\r\n     */ const preload = tileLayer.getPreload();\n        if (frameState.nextExtent) {\n            const targetZ = tileGrid.getZForResolution(viewState.nextResolution, tileSource.zDirection);\n            const nextExtent = $02fffef185f4339b$var$getRenderExtent(frameState, frameState.nextExtent);\n            this.enqueueTiles(frameState, nextExtent, targetZ, tilesByZ, preload);\n        }\n        const renderExtent = $02fffef185f4339b$var$getRenderExtent(frameState, frameExtent);\n        this.enqueueTiles(frameState, renderExtent, z, tilesByZ, 0);\n        if (preload > 0) setTimeout(()=>{\n            this.enqueueTiles(frameState, renderExtent, z - 1, tilesByZ, preload - 1);\n        }, 0);\n        if (!(z in tilesByZ)) return this.container;\n        /**\r\n     * Part 2: Find alt tiles for those that are not yet loaded\r\n     */ const uid = (0, $6c5e11070e371322$export$5e82334337e0f204)(this);\n        const time = frameState.time;\n        // look for cached tiles to use if a target tile is not ready\n        for (const tile of tilesByZ[z]){\n            const tileState = tile.getState();\n            if (tileState === (0, $b8291d9739c3c64e$export$2e2bcd8739ae039).EMPTY) continue;\n            const tileCoord = tile.tileCoord;\n            if (tileState === (0, $b8291d9739c3c64e$export$2e2bcd8739ae039).LOADED) {\n                const alpha = tile.getAlpha(uid, time);\n                if (alpha === 1) {\n                    // no need to look for alt tiles\n                    tile.endTransition(uid);\n                    continue;\n                }\n            }\n            if (tileState !== (0, $b8291d9739c3c64e$export$2e2bcd8739ae039).ERROR) this.renderComplete = false;\n            const hasStaleTile = this.findStaleTile_(tileCoord, tilesByZ);\n            if (hasStaleTile) {\n                // use the stale tile before the new tile's transition has completed\n                $02fffef185f4339b$var$removeTileFromLookup(tilesByZ, tile, z);\n                frameState.animate = true;\n                continue;\n            }\n            // first look for child tiles (at z + 1)\n            const coveredByChildren = this.findAltTiles_(tileGrid, tileCoord, z + 1, tilesByZ);\n            if (coveredByChildren) continue;\n            // next look for parent tiles\n            const minZoom = tileGrid.getMinZoom();\n            for(let parentZ = z - 1; parentZ >= minZoom; --parentZ){\n                const coveredByParent = this.findAltTiles_(tileGrid, tileCoord, parentZ, tilesByZ);\n                if (coveredByParent) break;\n            }\n        }\n        /**\r\n     * Part 3: Render loaded tiles\r\n     */ const canvasScale = tileResolution / viewResolution * pixelRatio / tilePixelRatio;\n        const context = this.getRenderContext(frameState);\n        // set scale transform for calculating tile positions on the canvas\n        (0, $e22e7611e69f42a9$export$f672e0b6f7222cd7)(this.tempTransform, width / 2, height / 2, canvasScale, canvasScale, 0, -width / 2, -height / 2);\n        if (layerState.extent) this.clipUnrotated(context, frameState, layerExtent);\n        if (!tileSource.getInterpolate()) context.imageSmoothingEnabled = false;\n        this.preRender(context, frameState);\n        /** @type {Array<number>} */ const zs = Object.keys(tilesByZ).map(Number);\n        zs.sort((0, $b998d41b678ed5d1$export$fcb633242ef15540));\n        let currentClip;\n        const clips = [];\n        const clipZs = [];\n        for(let i = zs.length - 1; i >= 0; --i){\n            const currentZ = zs[i];\n            const currentTilePixelSize = tileSource.getTilePixelSize(currentZ, pixelRatio, projection);\n            const currentResolution = tileGrid.getResolution(currentZ);\n            const currentScale = currentResolution / tileResolution;\n            const dx = currentTilePixelSize[0] * currentScale * canvasScale;\n            const dy = currentTilePixelSize[1] * currentScale * canvasScale;\n            const originTileCoord = tileGrid.getTileCoordForCoordAndZ((0, $6da4c8ed3074c92b$export$cb1538b07e6964ff)(canvasExtent), currentZ);\n            const originTileExtent = tileGrid.getTileCoordExtent(originTileCoord);\n            const origin = (0, $e22e7611e69f42a9$export$5635d7ef4b8fee1c)(this.tempTransform, [\n                tilePixelRatio * (originTileExtent[0] - canvasExtent[0]) / tileResolution,\n                tilePixelRatio * (canvasExtent[3] - originTileExtent[3]) / tileResolution\n            ]);\n            const tileGutter = tilePixelRatio * tileSource.getGutterForProjection(projection);\n            for (const tile of tilesByZ[currentZ]){\n                if (tile.getState() !== (0, $b8291d9739c3c64e$export$2e2bcd8739ae039).LOADED) continue;\n                const tileCoord = tile.tileCoord;\n                // Calculate integer positions and sizes so that tiles align\n                const xIndex = originTileCoord[1] - tileCoord[1];\n                const nextX = Math.round(origin[0] - (xIndex - 1) * dx);\n                const yIndex = originTileCoord[2] - tileCoord[2];\n                const nextY = Math.round(origin[1] - (yIndex - 1) * dy);\n                const x = Math.round(origin[0] - xIndex * dx);\n                const y = Math.round(origin[1] - yIndex * dy);\n                const w = nextX - x;\n                const h = nextY - y;\n                const transition = zs.length === 1;\n                let contextSaved = false;\n                // Clip mask for regions in this tile that already filled by a higher z tile\n                currentClip = [\n                    x,\n                    y,\n                    x + w,\n                    y,\n                    x + w,\n                    y + h,\n                    x,\n                    y + h\n                ];\n                for(let i = 0, ii = clips.length; i < ii; ++i)if (!transition && currentZ < clipZs[i]) {\n                    const clip = clips[i];\n                    if ((0, $6da4c8ed3074c92b$export$7b0a31e10bbff018)([\n                        x,\n                        y,\n                        x + w,\n                        y + h\n                    ], [\n                        clip[0],\n                        clip[3],\n                        clip[4],\n                        clip[7]\n                    ])) {\n                        if (!contextSaved) {\n                            context.save();\n                            contextSaved = true;\n                        }\n                        context.beginPath();\n                        // counter-clockwise (outer ring) for current tile\n                        context.moveTo(currentClip[0], currentClip[1]);\n                        context.lineTo(currentClip[2], currentClip[3]);\n                        context.lineTo(currentClip[4], currentClip[5]);\n                        context.lineTo(currentClip[6], currentClip[7]);\n                        // clockwise (inner ring) for higher z tile\n                        context.moveTo(clip[6], clip[7]);\n                        context.lineTo(clip[4], clip[5]);\n                        context.lineTo(clip[2], clip[3]);\n                        context.lineTo(clip[0], clip[1]);\n                        context.clip();\n                    }\n                }\n                clips.push(currentClip);\n                clipZs.push(currentZ);\n                this.drawTile(tile, frameState, x, y, w, h, tileGutter, transition);\n                if (contextSaved) context.restore();\n                this.renderedTiles.unshift(tile);\n                // TODO: decide if this is necessary\n                this.updateUsedTiles(frameState.usedTiles, tileSource, tile);\n            }\n        }\n        this.renderedResolution = tileResolution;\n        this.extentChanged = !this.renderedExtent_ || !(0, $6da4c8ed3074c92b$export$e9bab7fafb253603)(this.renderedExtent_, canvasExtent);\n        this.renderedExtent_ = canvasExtent;\n        this.renderedPixelRatio = pixelRatio;\n        this.postRender(this.context, frameState);\n        if (layerState.extent) context.restore();\n        context.imageSmoothingEnabled = true;\n        if (this.renderComplete) {\n            /**\r\n       * @param {import(\"../../Map.js\").default} map Map.\r\n       * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\r\n       */ const postRenderFunction = (map, frameState)=>{\n                const tileSourceKey = (0, $6c5e11070e371322$export$5e82334337e0f204)(tileSource);\n                const wantedTiles = frameState.wantedTiles[tileSourceKey];\n                const tilesCount = wantedTiles ? Object.keys(wantedTiles).length : 0;\n                this.updateCacheSize(tilesCount);\n                this.tileCache_.expireCache();\n            };\n            frameState.postRenderFunctions.push(postRenderFunction);\n        }\n        return this.container;\n    }\n    /**\r\n   * Increases the cache size if needed\r\n   * @param {number} tileCount Minimum number of tiles needed.\r\n   */ updateCacheSize(tileCount) {\n        this.tileCache_.highWaterMark = Math.max(this.tileCache_.highWaterMark, tileCount * 2);\n    }\n    /**\r\n   * @param {import(\"../../Tile.js\").default} tile Tile.\r\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\r\n   * @param {number} x Left of the tile.\r\n   * @param {number} y Top of the tile.\r\n   * @param {number} w Width of the tile.\r\n   * @param {number} h Height of the tile.\r\n   * @param {number} gutter Tile gutter.\r\n   * @param {boolean} transition Apply an alpha transition.\r\n   * @protected\r\n   */ drawTile(tile, frameState, x, y, w, h, gutter, transition) {\n        let image;\n        if (tile instanceof (0, $fd518ba473015b27$export$2e2bcd8739ae039)) {\n            image = (0, $fd518ba473015b27$export$3a7c913cb40dcb7d)(tile.getData());\n            if (!image) throw new Error('Rendering array data is not yet supported');\n        } else image = this.getTileImage(/** @type {import(\"../../ImageTile.js\").default} */ tile);\n        if (!image) return;\n        const context = this.getRenderContext(frameState);\n        const uid = (0, $6c5e11070e371322$export$5e82334337e0f204)(this);\n        const layerState = frameState.layerStatesArray[frameState.layerIndex];\n        const alpha = layerState.opacity * (transition ? tile.getAlpha(uid, frameState.time) : 1);\n        const alphaChanged = alpha !== context.globalAlpha;\n        if (alphaChanged) {\n            context.save();\n            context.globalAlpha = alpha;\n        }\n        context.drawImage(image, gutter, gutter, image.width - 2 * gutter, image.height - 2 * gutter, x, y, w, h);\n        if (alphaChanged) context.restore();\n        if (alpha !== layerState.opacity) frameState.animate = true;\n        else if (transition) tile.endTransition(uid);\n    }\n    /**\r\n   * @return {HTMLCanvasElement} Image\r\n   */ getImage() {\n        const context = this.context;\n        return context ? context.canvas : null;\n    }\n    /**\r\n   * Get the image from a tile.\r\n   * @param {import(\"../../ImageTile.js\").default} tile Tile.\r\n   * @return {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement} Image.\r\n   * @protected\r\n   */ getTileImage(tile) {\n        return tile.getImage();\n    }\n    /**\r\n   * @param {!Object<string, !Object<string, boolean>>} usedTiles Used tiles.\r\n   * @param {import(\"../../source/Tile.js\").default} tileSource Tile source.\r\n   * @param {import('../../Tile.js').default} tile Tile.\r\n   * @protected\r\n   */ updateUsedTiles(usedTiles, tileSource, tile) {\n        // FIXME should we use tilesToDrawByZ instead?\n        const tileSourceKey = (0, $6c5e11070e371322$export$5e82334337e0f204)(tileSource);\n        if (!(tileSourceKey in usedTiles)) usedTiles[tileSourceKey] = {};\n        usedTiles[tileSourceKey][tile.getKey()] = true;\n    }\n}\nvar $02fffef185f4339b$export$2e2bcd8739ae039 = $02fffef185f4339b$var$CanvasTileLayerRenderer;\n\n\n/**\r\n * @module ol/layer/BaseTile\r\n */ \n/**\r\n * @module ol/layer/TileProperty\r\n */ /**\r\n * @enum {string}\r\n */ var $e4c61536de922b84$export$2e2bcd8739ae039 = {\n    PRELOAD: 'preload',\n    USE_INTERIM_TILES_ON_ERROR: 'useInterimTilesOnError'\n};\n\n\n/***\r\n * @template Return\r\n * @typedef {import(\"../Observable\").OnSignature<import(\"../Observable\").EventTypes, import(\"../events/Event.js\").default, Return> &\r\n *   import(\"../Observable\").OnSignature<import(\"./Base\").BaseLayerObjectEventTypes|\r\n *     import(\"./Layer.js\").LayerEventType|'change:preload'|'change:useInterimTilesOnError', import(\"../Object\").ObjectEvent, Return> &\r\n *   import(\"../Observable\").OnSignature<import(\"../render/EventType\").LayerRenderEventTypes, import(\"../render/Event\").default, Return> &\r\n *   import(\"../Observable\").CombinedOnSignature<import(\"../Observable\").EventTypes|import(\"./Base\").BaseLayerObjectEventTypes|\r\n *   import(\"./Layer.js\").LayerEventType|'change:preload'|'change:useInterimTilesOnError'|import(\"../render/EventType\").LayerRenderEventTypes, Return>} BaseTileLayerOnSignature\r\n */ /**\r\n * @template {import(\"../source/Tile.js\").default} TileSourceType\r\n * @typedef {Object} Options\r\n * @property {string} [className='ol-layer'] A CSS class name to set to the layer element.\r\n * @property {number} [opacity=1] Opacity (0, 1).\r\n * @property {boolean} [visible=true] Visibility.\r\n * @property {import(\"../extent.js\").Extent} [extent] The bounding extent for layer rendering.  The layer will not be\r\n * rendered outside of this extent.\r\n * @property {number} [zIndex] The z-index for layer rendering.  At rendering time, the layers\r\n * will be ordered, first by Z-index and then by position. When `undefined`, a `zIndex` of 0 is assumed\r\n * for layers that are added to the map's `layers` collection, or `Infinity` when the layer's `setMap()`\r\n * method was used.\r\n * @property {number} [minResolution] The minimum resolution (inclusive) at which this layer will be\r\n * visible.\r\n * @property {number} [maxResolution] The maximum resolution (exclusive) below which this layer will\r\n * be visible.\r\n * @property {number} [minZoom] The minimum view zoom level (exclusive) above which this layer will be\r\n * visible.\r\n * @property {number} [maxZoom] The maximum view zoom level (inclusive) at which this layer will\r\n * be visible.\r\n * @property {number} [preload=0] Preload. Load low-resolution tiles up to `preload` levels. `0`\r\n * means no preloading.\r\n * @property {TileSourceType} [source] Source for this layer.\r\n * @property {import(\"../Map.js\").default} [map] Sets the layer as overlay on a map. The map will not manage\r\n * this layer in its layers collection, and the layer will be rendered on top. This is useful for\r\n * temporary layers. The standard way to add a layer to a map and have it managed by the map is to\r\n * use {@link import(\"../Map.js\").default#addLayer map.addLayer()}.\r\n * @property {import(\"./Base.js\").BackgroundColor} [background] Background color for the layer. If not specified, no background\r\n * will be rendered.\r\n * @property {boolean} [useInterimTilesOnError=true] Deprecated.  Use interim tiles on error.\r\n * @property {Object<string, *>} [properties] Arbitrary observable properties. Can be accessed with `#get()` and `#set()`.\r\n * @property {number} [cacheSize=512] The internal tile cache size.  This needs to be large enough to render\r\n * two zoom levels worth of tiles.\r\n */ /**\r\n * @classdesc\r\n * For layer sources that provide pre-rendered, tiled images in grids that are\r\n * organized by zoom levels for specific resolutions.\r\n * Note that any property set in the options is set as a {@link module:ol/Object~BaseObject}\r\n * property on the layer object; for example, setting `title: 'My Title'` in the\r\n * options means that `title` is observable, and has get/set accessors.\r\n *\r\n * @template {import(\"../source/Tile.js\").default} TileSourceType\r\n * @template {import(\"../renderer/Layer.js\").default} RendererType\r\n * @extends {Layer<TileSourceType, RendererType>}\r\n * @api\r\n */ class $93be2de6a052f587$var$BaseTileLayer extends (0, $534f30fce11effcd$export$2e2bcd8739ae039) {\n    /**\r\n   * @param {Options<TileSourceType>} [options] Tile layer options.\r\n   */ constructor(options){\n        options = options ? options : {};\n        const baseOptions = Object.assign({}, options);\n        const cacheSize = options.cacheSize;\n        delete options.cacheSize;\n        delete baseOptions.preload;\n        delete baseOptions.useInterimTilesOnError;\n        super(baseOptions);\n        /***\r\n     * @type {BaseTileLayerOnSignature<import(\"../events\").EventsKey>}\r\n     */ this.on;\n        /***\r\n     * @type {BaseTileLayerOnSignature<import(\"../events\").EventsKey>}\r\n     */ this.once;\n        /***\r\n     * @type {BaseTileLayerOnSignature<void>}\r\n     */ this.un;\n        /**\r\n     * @type {number|undefined}\r\n     * @private\r\n     */ this.cacheSize_ = cacheSize;\n        this.setPreload(options.preload !== undefined ? options.preload : 0);\n        this.setUseInterimTilesOnError(options.useInterimTilesOnError !== undefined ? options.useInterimTilesOnError : true);\n    }\n    /**\r\n   * @return {number|undefined} The suggested cache size\r\n   * @protected\r\n   */ getCacheSize() {\n        return this.cacheSize_;\n    }\n    /**\r\n   * Return the level as number to which we will preload tiles up to.\r\n   * @return {number} The level to preload tiles up to.\r\n   * @observable\r\n   * @api\r\n   */ getPreload() {\n        return /** @type {number} */ this.get((0, $e4c61536de922b84$export$2e2bcd8739ae039).PRELOAD);\n    }\n    /**\r\n   * Set the level as number to which we will preload tiles up to.\r\n   * @param {number} preload The level to preload tiles up to.\r\n   * @observable\r\n   * @api\r\n   */ setPreload(preload) {\n        this.set((0, $e4c61536de922b84$export$2e2bcd8739ae039).PRELOAD, preload);\n    }\n    /**\r\n   * Deprecated.  Whether we use interim tiles on error.\r\n   * @return {boolean} Use interim tiles on error.\r\n   * @observable\r\n   * @api\r\n   */ getUseInterimTilesOnError() {\n        return /** @type {boolean} */ this.get((0, $e4c61536de922b84$export$2e2bcd8739ae039).USE_INTERIM_TILES_ON_ERROR);\n    }\n    /**\r\n   * Deprecated.  Set whether we use interim tiles on error.\r\n   * @param {boolean} useInterimTilesOnError Use interim tiles on error.\r\n   * @observable\r\n   * @api\r\n   */ setUseInterimTilesOnError(useInterimTilesOnError) {\n        this.set((0, $e4c61536de922b84$export$2e2bcd8739ae039).USE_INTERIM_TILES_ON_ERROR, useInterimTilesOnError);\n    }\n    /**\r\n   * Get data for a pixel location.  The return type depends on the source data.  For image tiles,\r\n   * a four element RGBA array will be returned.  For data tiles, the array length will match the\r\n   * number of bands in the dataset.  For requests outside the layer extent, `null` will be returned.\r\n   * Data for a image tiles can only be retrieved if the source's `crossOrigin` property is set.\r\n   *\r\n   * ```js\r\n   * // display layer data on every pointer move\r\n   * map.on('pointermove', (event) => {\r\n   *   console.log(layer.getData(event.pixel));\r\n   * });\r\n   * ```\r\n   * @param {import(\"../pixel\").Pixel} pixel Pixel.\r\n   * @return {Uint8ClampedArray|Uint8Array|Float32Array|DataView|null} Pixel data.\r\n   * @api\r\n   * @override\r\n   */ getData(pixel) {\n        return super.getData(pixel);\n    }\n}\nvar $93be2de6a052f587$export$2e2bcd8739ae039 = $93be2de6a052f587$var$BaseTileLayer;\n\n\n/**\r\n * @classdesc\r\n * For layer sources that provide pre-rendered, tiled images in grids that are\r\n * organized by zoom levels for specific resolutions.\r\n * Note that any property set in the options is set as a {@link module:ol/Object~BaseObject}\r\n * property on the layer object; for example, setting `title: 'My Title'` in the\r\n * options means that `title` is observable, and has get/set accessors.\r\n *\r\n * @template {import(\"../source/Tile.js\").default} [TileSourceType=import(\"../source/Tile.js\").default]\r\n * @extends BaseTileLayer<TileSourceType, CanvasTileLayerRenderer>\r\n * @api\r\n */ class $32e67a4d3559554a$var$TileLayer extends (0, $93be2de6a052f587$export$2e2bcd8739ae039) {\n    /**\r\n   * @param {import(\"./BaseTile.js\").Options<TileSourceType>} [options] Tile layer options.\r\n   */ constructor(options){\n        super(options);\n    }\n    /**\r\n   * @override\r\n   */ createRenderer() {\n        return new (0, $02fffef185f4339b$export$2e2bcd8739ae039)(this, {\n            cacheSize: this.getCacheSize()\n        });\n    }\n}\nvar $32e67a4d3559554a$export$2e2bcd8739ae039 = $32e67a4d3559554a$var$TileLayer;\n\n\n/**\r\n * @module ol/Geolocation\r\n */ \n\n\n\n\n/**\r\n * @enum {string}\r\n */ const $8434dbb660345c0b$var$Property = {\n    ACCURACY: 'accuracy',\n    ACCURACY_GEOMETRY: 'accuracyGeometry',\n    ALTITUDE: 'altitude',\n    ALTITUDE_ACCURACY: 'altitudeAccuracy',\n    HEADING: 'heading',\n    POSITION: 'position',\n    PROJECTION: 'projection',\n    SPEED: 'speed',\n    TRACKING: 'tracking',\n    TRACKING_OPTIONS: 'trackingOptions'\n};\n/**\r\n * @enum string\r\n */ const $8434dbb660345c0b$var$GeolocationErrorType = {\n    /**\r\n   * Triggered when a `GeolocationPositionError` occurs.\r\n   * @event module:ol/Geolocation.GeolocationError#error\r\n   * @api\r\n   */ ERROR: 'error'\n};\nclass $8434dbb660345c0b$export$862abd191a2ee43 extends (0, $aeedce20e9577100$export$2e2bcd8739ae039) {\n    /**\r\n   * @param {GeolocationPositionError} error error object.\r\n   */ constructor(error){\n        super($8434dbb660345c0b$var$GeolocationErrorType.ERROR);\n        /**\r\n     * Code of the underlying `GeolocationPositionError`.\r\n     * @type {number}\r\n     * @api\r\n     */ this.code = error.code;\n        /**\r\n     * Message of the underlying `GeolocationPositionError`.\r\n     * @type {string}\r\n     * @api\r\n     */ this.message = error.message;\n    }\n}\n/**\r\n * @typedef {Object} Options\r\n * @property {boolean} [tracking=false] Start Tracking right after\r\n * instantiation.\r\n * @property {PositionOptions} [trackingOptions] Tracking options.\r\n * See https://www.w3.org/TR/geolocation-API/#position_options_interface.\r\n * @property {import(\"./proj.js\").ProjectionLike} [projection] The projection the position\r\n * is reported in.\r\n */ /**\r\n * @typedef {import(\"./ObjectEventType\").Types|'change:accuracy'|'change:accuracyGeometry'|'change:altitude'|\r\n *    'change:altitudeAccuracy'|'change:heading'|'change:position'|'change:projection'|'change:speed'|'change:tracking'|\r\n *    'change:trackingOptions'} GeolocationObjectEventTypes\r\n */ /***\r\n * @template Return\r\n * @typedef {import(\"./Observable\").OnSignature<GeolocationObjectEventTypes, import(\"./Object\").ObjectEvent, Return> &\r\n *   import(\"./Observable\").OnSignature<'error', GeolocationError, Return> &\r\n *   import(\"./Observable\").CombinedOnSignature<import(\"./Observable\").EventTypes|GeolocationObjectEventTypes, Return> &\r\n *   import(\"./Observable\").OnSignature<import(\"./Observable\").EventTypes, import(\"./events/Event.js\").default, Return>} GeolocationOnSignature\r\n */ /**\r\n * @classdesc\r\n * Helper class for providing HTML5 Geolocation capabilities.\r\n * The [Geolocation API](https://www.w3.org/TR/geolocation-API/)\r\n * is used to locate a user's position.\r\n *\r\n * To get notified of position changes and errors, register listeners for the generic\r\n * `change` event and the `error` event on your instance of {@link module:ol/Geolocation~Geolocation}.\r\n *\r\n * Example:\r\n *\r\n *     const geolocation = new Geolocation({\r\n *       // take the projection to use from the map's view\r\n *       projection: view.getProjection()\r\n *     });\r\n *     // listen to changes in position\r\n *     geolocation.on('change', function(evt) {\r\n *       console.log(geolocation.getPosition());\r\n *     });\r\n *     // listen to error\r\n *     geolocation.on('error', function(evt) {\r\n *       window.console.log(evt.message);\r\n *     });\r\n *\r\n * @fires GeolocationError\r\n * @api\r\n */ class $8434dbb660345c0b$var$Geolocation extends (0, $b68b3d6e32e3074a$export$2e2bcd8739ae039) {\n    /**\r\n   * @param {Options} [options] Options.\r\n   */ constructor(options){\n        super();\n        /***\r\n     * @type {GeolocationOnSignature<import(\"./events\").EventsKey>}\r\n     */ this.on;\n        /***\r\n     * @type {GeolocationOnSignature<import(\"./events\").EventsKey>}\r\n     */ this.once;\n        /***\r\n     * @type {GeolocationOnSignature<void>}\r\n     */ this.un;\n        options = options || {};\n        /**\r\n     * The unprojected (EPSG:4326) device position.\r\n     * @private\r\n     * @type {?import(\"./coordinate.js\").Coordinate}\r\n     */ this.position_ = null;\n        /**\r\n     * @private\r\n     * @type {import(\"./proj.js\").TransformFunction}\r\n     */ this.transform_ = (0, $9c4744460e43e41b$export$83e8ab53904f8022);\n        /**\r\n     * @private\r\n     * @type {number|undefined}\r\n     */ this.watchId_ = undefined;\n        this.addChangeListener($8434dbb660345c0b$var$Property.PROJECTION, this.handleProjectionChanged_);\n        this.addChangeListener($8434dbb660345c0b$var$Property.TRACKING, this.handleTrackingChanged_);\n        if (options.projection !== undefined) this.setProjection(options.projection);\n        if (options.trackingOptions !== undefined) this.setTrackingOptions(options.trackingOptions);\n        this.setTracking(options.tracking !== undefined ? options.tracking : false);\n    }\n    /**\r\n   * Clean up.\r\n   * @override\r\n   */ disposeInternal() {\n        this.setTracking(false);\n        super.disposeInternal();\n    }\n    /**\r\n   * @private\r\n   */ handleProjectionChanged_() {\n        const projection = this.getProjection();\n        if (projection) {\n            this.transform_ = (0, $9c4744460e43e41b$export$e3c4995a701c26a3)((0, $9c4744460e43e41b$export$3988ae62b71be9a3)('EPSG:4326'), projection);\n            if (this.position_) this.set($8434dbb660345c0b$var$Property.POSITION, this.transform_(this.position_));\n        }\n    }\n    /**\r\n   * @private\r\n   */ handleTrackingChanged_() {\n        if ('geolocation' in navigator) {\n            const tracking = this.getTracking();\n            if (tracking && this.watchId_ === undefined) this.watchId_ = navigator.geolocation.watchPosition(this.positionChange_.bind(this), this.positionError_.bind(this), this.getTrackingOptions());\n            else if (!tracking && this.watchId_ !== undefined) {\n                navigator.geolocation.clearWatch(this.watchId_);\n                this.watchId_ = undefined;\n            }\n        }\n    }\n    /**\r\n   * @private\r\n   * @param {GeolocationPosition} position position event.\r\n   */ positionChange_(position) {\n        const coords = position.coords;\n        this.set($8434dbb660345c0b$var$Property.ACCURACY, coords.accuracy);\n        this.set($8434dbb660345c0b$var$Property.ALTITUDE, coords.altitude === null ? undefined : coords.altitude);\n        this.set($8434dbb660345c0b$var$Property.ALTITUDE_ACCURACY, coords.altitudeAccuracy === null ? undefined : coords.altitudeAccuracy);\n        this.set($8434dbb660345c0b$var$Property.HEADING, coords.heading === null ? undefined : (0, $6b000a049d919fe5$export$cba01ba138429a1d)(coords.heading));\n        if (!this.position_) this.position_ = [\n            coords.longitude,\n            coords.latitude\n        ];\n        else {\n            this.position_[0] = coords.longitude;\n            this.position_[1] = coords.latitude;\n        }\n        const projectedPosition = this.transform_(this.position_);\n        this.set($8434dbb660345c0b$var$Property.POSITION, projectedPosition.slice());\n        this.set($8434dbb660345c0b$var$Property.SPEED, coords.speed === null ? undefined : coords.speed);\n        const geometry = (0, $40aa8d43bbe572bf$export$f99d756c6d81ae3f)(this.position_, coords.accuracy);\n        geometry.applyTransform(this.transform_);\n        this.set($8434dbb660345c0b$var$Property.ACCURACY_GEOMETRY, geometry);\n        this.changed();\n    }\n    /**\r\n   * @private\r\n   * @param {GeolocationPositionError} error error object.\r\n   */ positionError_(error) {\n        this.dispatchEvent(new $8434dbb660345c0b$export$862abd191a2ee43(error));\n    }\n    /**\r\n   * Get the accuracy of the position in meters.\r\n   * @return {number|undefined} The accuracy of the position measurement in\r\n   *     meters.\r\n   * @observable\r\n   * @api\r\n   */ getAccuracy() {\n        return /** @type {number|undefined} */ this.get($8434dbb660345c0b$var$Property.ACCURACY);\n    }\n    /**\r\n   * Get a geometry of the position accuracy.\r\n   * @return {?import(\"./geom/Polygon.js\").default} A geometry of the position accuracy.\r\n   * @observable\r\n   * @api\r\n   */ getAccuracyGeometry() {\n        return /** @type {?import(\"./geom/Polygon.js\").default} */ this.get($8434dbb660345c0b$var$Property.ACCURACY_GEOMETRY) || null;\n    }\n    /**\r\n   * Get the altitude associated with the position.\r\n   * @return {number|undefined} The altitude of the position in meters above mean\r\n   *     sea level.\r\n   * @observable\r\n   * @api\r\n   */ getAltitude() {\n        return /** @type {number|undefined} */ this.get($8434dbb660345c0b$var$Property.ALTITUDE);\n    }\n    /**\r\n   * Get the altitude accuracy of the position.\r\n   * @return {number|undefined} The accuracy of the altitude measurement in\r\n   *     meters.\r\n   * @observable\r\n   * @api\r\n   */ getAltitudeAccuracy() {\n        return /** @type {number|undefined} */ this.get($8434dbb660345c0b$var$Property.ALTITUDE_ACCURACY);\n    }\n    /**\r\n   * Get the heading as radians clockwise from North.\r\n   * Note: depending on the browser, the heading is only defined if the `enableHighAccuracy`\r\n   * is set to `true` in the tracking options.\r\n   * @return {number|undefined} The heading of the device in radians from north.\r\n   * @observable\r\n   * @api\r\n   */ getHeading() {\n        return /** @type {number|undefined} */ this.get($8434dbb660345c0b$var$Property.HEADING);\n    }\n    /**\r\n   * Get the position of the device.\r\n   * @return {import(\"./coordinate.js\").Coordinate|undefined} The current position of the device reported\r\n   *     in the current projection.\r\n   * @observable\r\n   * @api\r\n   */ getPosition() {\n        return /** @type {import(\"./coordinate.js\").Coordinate|undefined} */ this.get($8434dbb660345c0b$var$Property.POSITION);\n    }\n    /**\r\n   * Get the projection associated with the position.\r\n   * @return {import(\"./proj/Projection.js\").default|undefined} The projection the position is\r\n   *     reported in.\r\n   * @observable\r\n   * @api\r\n   */ getProjection() {\n        return /** @type {import(\"./proj/Projection.js\").default|undefined} */ this.get($8434dbb660345c0b$var$Property.PROJECTION);\n    }\n    /**\r\n   * Get the speed in meters per second.\r\n   * @return {number|undefined} The instantaneous speed of the device in meters\r\n   *     per second.\r\n   * @observable\r\n   * @api\r\n   */ getSpeed() {\n        return /** @type {number|undefined} */ this.get($8434dbb660345c0b$var$Property.SPEED);\n    }\n    /**\r\n   * Determine if the device location is being tracked.\r\n   * @return {boolean} The device location is being tracked.\r\n   * @observable\r\n   * @api\r\n   */ getTracking() {\n        return /** @type {boolean} */ this.get($8434dbb660345c0b$var$Property.TRACKING);\n    }\n    /**\r\n   * Get the tracking options.\r\n   * See https://www.w3.org/TR/geolocation-API/#position-options.\r\n   * @return {PositionOptions|undefined} PositionOptions as defined by\r\n   *     the [HTML5 Geolocation spec\r\n   *     ](https://www.w3.org/TR/geolocation-API/#position_options_interface).\r\n   * @observable\r\n   * @api\r\n   */ getTrackingOptions() {\n        return /** @type {PositionOptions|undefined} */ this.get($8434dbb660345c0b$var$Property.TRACKING_OPTIONS);\n    }\n    /**\r\n   * Set the projection to use for transforming the coordinates.\r\n   * @param {import(\"./proj.js\").ProjectionLike} projection The projection the position is\r\n   *     reported in.\r\n   * @observable\r\n   * @api\r\n   */ setProjection(projection) {\n        this.set($8434dbb660345c0b$var$Property.PROJECTION, (0, $9c4744460e43e41b$export$3988ae62b71be9a3)(projection));\n    }\n    /**\r\n   * Enable or disable tracking.\r\n   * @param {boolean} tracking Enable tracking.\r\n   * @observable\r\n   * @api\r\n   */ setTracking(tracking) {\n        this.set($8434dbb660345c0b$var$Property.TRACKING, tracking);\n    }\n    /**\r\n   * Set the tracking options.\r\n   * See http://www.w3.org/TR/geolocation-API/#position-options.\r\n   * @param {PositionOptions} options PositionOptions as defined by the\r\n   *     [HTML5 Geolocation spec\r\n   *     ](http://www.w3.org/TR/geolocation-API/#position_options_interface).\r\n   * @observable\r\n   * @api\r\n   */ setTrackingOptions(options) {\n        this.set($8434dbb660345c0b$var$Property.TRACKING_OPTIONS, options);\n    }\n}\nvar $8434dbb660345c0b$export$2e2bcd8739ae039 = $8434dbb660345c0b$var$Geolocation;\n\n\n\n\n\n\n\n\n\nconst $9407cca828b9601a$var$view = new (0, $70364d0195659942$export$2e2bcd8739ae039)({\n    center: [\n        -275816,\n        6549995.2\n    ],\n    zoom: 15\n});\nconst $9407cca828b9601a$var$styleFunction = function(feature) {\n    const geometry = feature.getGeometry();\n    const styles = [\n        // linestring\n        new (0, $8c7f6dda98e8cb9c$export$2e2bcd8739ae039)({\n            stroke: new (0, $f9d0329c5c745263$export$2e2bcd8739ae039)({\n                color: '#a40d05',\n                width: 2\n            })\n        })\n    ];\n    geometry.forEachSegment(function(start, end) {\n        var dx = end[0] - start[0];\n        var dy = end[1] - start[1];\n        var rotation = Math.atan2(dy, dx);\n        var lineStr1 = new (0, $292e4002746c8223$export$2e2bcd8739ae039)([\n            end,\n            [\n                end[0] - 10,\n                end[1] + 10\n            ]\n        ]);\n        lineStr1.rotate(rotation, end);\n        var lineStr2 = new (0, $292e4002746c8223$export$2e2bcd8739ae039)([\n            end,\n            [\n                end[0] - 10,\n                end[1] - 10\n            ]\n        ]);\n        lineStr2.rotate(rotation, end);\n        var stroke = new (0, $f9d0329c5c745263$export$2e2bcd8739ae039)({\n            color: '#a40d05',\n            width: 1\n        });\n        // arrows\n        styles.push(new (0, $8c7f6dda98e8cb9c$export$2e2bcd8739ae039)({\n            geometry: lineStr1,\n            stroke: stroke\n        }));\n        styles.push(new (0, $8c7f6dda98e8cb9c$export$2e2bcd8739ae039)({\n            geometry: lineStr2,\n            stroke: stroke\n        }));\n    });\n    return styles;\n};\nconst $9407cca828b9601a$var$fetchJSON = function(url) {\n    return fetch(url).then(function(response) {\n        return response.json();\n    });\n};\nconst $9407cca828b9601a$var$geojsonObject = await $9407cca828b9601a$var$fetchJSON('./Easter_trail.geojson');\nconst $9407cca828b9601a$var$vectorSource = new (0, $84888e4daf3fdf44$export$2e2bcd8739ae039)({\n    features: new (0, $f602cef51a2e6950$export$2e2bcd8739ae039)().readFeatures($9407cca828b9601a$var$geojsonObject)\n});\nconst $9407cca828b9601a$var$vectorLayer = new (0, $82a68515bd6ef378$export$2e2bcd8739ae039)({\n    source: $9407cca828b9601a$var$vectorSource,\n    style: $9407cca828b9601a$var$styleFunction\n});\nconst $9407cca828b9601a$var$geolocation = new (0, $8434dbb660345c0b$export$2e2bcd8739ae039)({\n    // enableHighAccuracy must be set to true to have the heading value.\n    trackingOptions: {\n        enableHighAccuracy: true\n    },\n    projection: $9407cca828b9601a$var$view.getProjection()\n});\nfunction $9407cca828b9601a$var$el(id) {\n    return document.getElementById(id);\n}\n$9407cca828b9601a$var$el('track').addEventListener('change', function() {\n    $9407cca828b9601a$var$geolocation.setTracking(this.checked);\n});\n// update the HTML page when the position changes.\n$9407cca828b9601a$var$geolocation.on('change', function() {\n    $9407cca828b9601a$var$el('accuracy').innerText = $9407cca828b9601a$var$geolocation.getAccuracy() + ' [m]';\n    $9407cca828b9601a$var$el('altitude').innerText = $9407cca828b9601a$var$geolocation.getAltitude() + ' [m]';\n    $9407cca828b9601a$var$el('altitudeAccuracy').innerText = $9407cca828b9601a$var$geolocation.getAltitudeAccuracy() + ' [m]';\n    $9407cca828b9601a$var$el('heading').innerText = $9407cca828b9601a$var$geolocation.getHeading() + ' [rad]';\n    $9407cca828b9601a$var$el('speed').innerText = $9407cca828b9601a$var$geolocation.getSpeed() + ' [m/s]';\n});\n// handle geolocation error.\n$9407cca828b9601a$var$geolocation.on('error', function(error) {\n    const info = document.getElementById('info');\n    info.innerHTML = error.message;\n    info.style.display = '';\n});\nconst $9407cca828b9601a$var$accuracyFeature = new (0, $9fd014ab6df63665$export$2e2bcd8739ae039)();\n$9407cca828b9601a$var$geolocation.on('change:accuracyGeometry', function() {\n    $9407cca828b9601a$var$accuracyFeature.setGeometry($9407cca828b9601a$var$geolocation.getAccuracyGeometry());\n});\nconst $9407cca828b9601a$var$positionFeature = new (0, $9fd014ab6df63665$export$2e2bcd8739ae039)();\n$9407cca828b9601a$var$positionFeature.setStyle(new (0, $8c7f6dda98e8cb9c$export$2e2bcd8739ae039)({\n    image: new (0, $06150d8570b7481b$export$2e2bcd8739ae039)({\n        radius: 6,\n        fill: new (0, $d61d1dcaf3c44610$export$2e2bcd8739ae039)({\n            color: '#3399CC'\n        }),\n        stroke: new (0, $f9d0329c5c745263$export$2e2bcd8739ae039)({\n            color: '#fff',\n            width: 2\n        })\n    })\n}));\n$9407cca828b9601a$var$geolocation.on('change:position', function() {\n    const coordinates = $9407cca828b9601a$var$geolocation.getPosition();\n    $9407cca828b9601a$var$positionFeature.setGeometry(coordinates ? new (0, $6eced4c969949f6b$export$2e2bcd8739ae039)(coordinates) : null);\n});\nconst $9407cca828b9601a$var$locationSource = new (0, $84888e4daf3fdf44$export$2e2bcd8739ae039)({\n    features: [\n        $9407cca828b9601a$var$accuracyFeature,\n        $9407cca828b9601a$var$positionFeature\n    ]\n});\nconst $9407cca828b9601a$var$locationLayer = new (0, $82a68515bd6ef378$export$2e2bcd8739ae039)({\n    source: $9407cca828b9601a$var$locationSource\n});\nconst $9407cca828b9601a$var$map = new (0, $41aa29ae0c4b607a$export$2e2bcd8739ae039)({\n    target: 'map',\n    layers: [\n        new (0, $32e67a4d3559554a$export$2e2bcd8739ae039)({\n            source: new (0, $6c8498cc816f2362$export$2e2bcd8739ae039)()\n        }),\n        $9407cca828b9601a$var$vectorLayer,\n        $9407cca828b9601a$var$locationLayer\n    ],\n    view: $9407cca828b9601a$var$view\n});\n\n\n//# sourceMappingURL=maps-src.945c34b8.js.map\n","import './site.css';\r\nimport Feature from 'ol/Feature.js';\r\nimport Map from 'ol/Map.js';\r\nimport GeoJSON from 'ol/format/GeoJSON.js';\r\nimport OSM from 'ol/source/OSM.js';\r\nimport VectorLayer from 'ol/layer/Vector.js';\r\nimport VectorSource from 'ol/source/Vector.js';\r\nimport TileLayer from 'ol/layer/Tile.js';\r\nimport Geolocation from 'ol/Geolocation.js';\r\nimport View from 'ol/View.js';\r\nimport CircleStyle from 'ol/style/Circle.js';\r\nimport Fill from 'ol/style/Fill.js';\r\nimport Point from 'ol/geom/Point.js';\r\nimport Stroke from 'ol/style/Stroke.js';\r\nimport Style from 'ol/style/Style.js';\r\nimport LineString from 'ol/geom/LineString.js';\r\n\r\nconst view = new View({\r\n    center: [-275816.0, 6549995.2],\r\n    zoom: 15,\r\n});\r\n\r\nconst styleFunction = function (feature) {\r\n    const geometry = feature.getGeometry();\r\n    const styles = [\r\n        // linestring\r\n        new Style({\r\n            stroke: new Stroke({\r\n                color: '#a40d05',\r\n                width: 2,\r\n            }),\r\n        }),\r\n    ];\r\n\r\n    geometry.forEachSegment(function (start, end) {\r\n        var dx = end[0] - start[0];\r\n        var dy = end[1] - start[1];\r\n        var rotation = Math.atan2(dy, dx);\r\n\r\n        var lineStr1 = new LineString([end, [end[0] - 10, end[1] + 10]]);\r\n        lineStr1.rotate(rotation, end);\r\n        var lineStr2 = new LineString([end, [end[0] - 10, end[1] - 10]]);\r\n        lineStr2.rotate(rotation, end);\r\n\r\n        var stroke = new Stroke({\r\n            color: '#a40d05',\r\n            width: 1,\r\n        })\r\n\r\n        // arrows\r\n        styles.push(new Style({\r\n            geometry: lineStr1,\r\n            stroke: stroke\r\n        }));\r\n        styles.push(new Style({\r\n            geometry: lineStr2,\r\n            stroke: stroke\r\n        }));\r\n    });\r\n\r\n    return styles;\r\n};\r\n\r\nconst fetchJSON = function(url) {\r\n     return fetch(url)\r\n        .then(function (response) {\r\n            return response.json();\r\n        });\r\n}\r\n\r\nconst geojsonObject = await fetchJSON('./Easter_trail.geojson');\r\n\r\nconst vectorSource = new VectorSource({\r\n    features: new GeoJSON().readFeatures(geojsonObject),\r\n});\r\n\r\nconst vectorLayer = new VectorLayer({\r\n    source: vectorSource,\r\n    style: styleFunction,\r\n});\r\n\r\nconst geolocation = new Geolocation({\r\n    // enableHighAccuracy must be set to true to have the heading value.\r\n    trackingOptions: {\r\n        enableHighAccuracy: true,\r\n    },\r\n    projection: view.getProjection(),\r\n});\r\n\r\nfunction el(id) {\r\n    return document.getElementById(id);\r\n}\r\n\r\nel('track').addEventListener('change', function () {\r\n    geolocation.setTracking(this.checked);\r\n});\r\n\r\n// update the HTML page when the position changes.\r\ngeolocation.on('change', function () {\r\n    el('accuracy').innerText = geolocation.getAccuracy() + ' [m]';\r\n    el('altitude').innerText = geolocation.getAltitude() + ' [m]';\r\n    el('altitudeAccuracy').innerText = geolocation.getAltitudeAccuracy() + ' [m]';\r\n    el('heading').innerText = geolocation.getHeading() + ' [rad]';\r\n    el('speed').innerText = geolocation.getSpeed() + ' [m/s]';\r\n});\r\n\r\n// handle geolocation error.\r\ngeolocation.on('error', function (error) {\r\n    const info = document.getElementById('info');\r\n    info.innerHTML = error.message;\r\n    info.style.display = '';\r\n});\r\n\r\nconst accuracyFeature = new Feature();\r\ngeolocation.on('change:accuracyGeometry', function () {\r\n    accuracyFeature.setGeometry(geolocation.getAccuracyGeometry());\r\n});\r\n\r\nconst positionFeature = new Feature();\r\npositionFeature.setStyle(\r\n    new Style({\r\n        image: new CircleStyle({\r\n            radius: 6,\r\n            fill: new Fill({\r\n                color: '#3399CC',\r\n            }),\r\n            stroke: new Stroke({\r\n                color: '#fff',\r\n                width: 2,\r\n            }),\r\n        }),\r\n    }),\r\n);\r\n\r\ngeolocation.on('change:position', function () {\r\n    const coordinates = geolocation.getPosition();\r\n    positionFeature.setGeometry(coordinates ? new Point(coordinates) : null);\r\n});\r\n\r\nconst locationSource = new VectorSource({\r\n    features: [accuracyFeature, positionFeature],\r\n})\r\n\r\nconst locationLayer = new VectorLayer({\r\n    source: locationSource\r\n});\r\n\r\nconst map = new Map({\r\n    target: 'map',\r\n    layers: [\r\n        new TileLayer({\r\n            source: new OSM(),\r\n        }),\r\n        vectorLayer,\r\n        locationLayer\r\n    ],\r\n    view: view,\r\n});","/**\r\n * @module ol/Feature\r\n */\r\nimport BaseObject from './Object.js';\r\nimport {assert} from './asserts.js';\r\nimport EventType from './events/EventType.js';\r\nimport {listen, unlistenByKey} from './events.js';\r\n\r\n/**\r\n * @typedef {typeof Feature|typeof import(\"./render/Feature.js\").default} FeatureClass\r\n */\r\n\r\n/**\r\n * @typedef {Feature|import(\"./render/Feature.js\").default} FeatureLike\r\n */\r\n\r\n/***\r\n * @template Return\r\n * @typedef {import(\"./Observable\").OnSignature<import(\"./Observable\").EventTypes, import(\"./events/Event.js\").default, Return> &\r\n *   import(\"./Observable\").OnSignature<import(\"./ObjectEventType\").Types|'change:geometry', import(\"./Object\").ObjectEvent, Return> &\r\n *   import(\"./Observable\").CombinedOnSignature<import(\"./Observable\").EventTypes|import(\"./ObjectEventType\").Types\r\n *     |'change:geometry', Return>} FeatureOnSignature\r\n */\r\n\r\n/***\r\n * @template {import(\"./geom/Geometry.js\").default} [Geometry=import(\"./geom/Geometry.js\").default]\r\n * @typedef {Object<string, *> & { geometry?: Geometry }} ObjectWithGeometry\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * A vector object for geographic features with a geometry and other\r\n * attribute properties, similar to the features in vector file formats like\r\n * GeoJSON.\r\n *\r\n * Features can be styled individually with `setStyle`; otherwise they use the\r\n * style of their vector layer.\r\n *\r\n * Note that attribute properties are set as {@link module:ol/Object~BaseObject} properties on\r\n * the feature object, so they are observable, and have get/set accessors.\r\n *\r\n * Typically, a feature has a single geometry property. You can set the\r\n * geometry using the `setGeometry` method and get it with `getGeometry`.\r\n * It is possible to store more than one geometry on a feature using attribute\r\n * properties. By default, the geometry used for rendering is identified by\r\n * the property name `geometry`. If you want to use another geometry property\r\n * for rendering, use the `setGeometryName` method to change the attribute\r\n * property associated with the geometry for the feature.  For example:\r\n *\r\n * ```js\r\n *\r\n * import Feature from 'ol/Feature.js';\r\n * import Polygon from 'ol/geom/Polygon.js';\r\n * import Point from 'ol/geom/Point.js';\r\n *\r\n * const feature = new Feature({\r\n *   geometry: new Polygon(polyCoords),\r\n *   labelPoint: new Point(labelCoords),\r\n *   name: 'My Polygon',\r\n * });\r\n *\r\n * // get the polygon geometry\r\n * const poly = feature.getGeometry();\r\n *\r\n * // Render the feature as a point using the coordinates from labelPoint\r\n * feature.setGeometryName('labelPoint');\r\n *\r\n * // get the point geometry\r\n * const point = feature.getGeometry();\r\n * ```\r\n *\r\n * @api\r\n * @template {import(\"./geom/Geometry.js\").default} [Geometry=import(\"./geom/Geometry.js\").default]\r\n */\r\nclass Feature extends BaseObject {\r\n  /**\r\n   * @param {Geometry|ObjectWithGeometry<Geometry>} [geometryOrProperties]\r\n   *     You may pass a Geometry object directly, or an object literal containing\r\n   *     properties. If you pass an object literal, you may include a Geometry\r\n   *     associated with a `geometry` key.\r\n   */\r\n  constructor(geometryOrProperties) {\r\n    super();\r\n\r\n    /***\r\n     * @type {FeatureOnSignature<import(\"./events\").EventsKey>}\r\n     */\r\n    this.on;\r\n\r\n    /***\r\n     * @type {FeatureOnSignature<import(\"./events\").EventsKey>}\r\n     */\r\n    this.once;\r\n\r\n    /***\r\n     * @type {FeatureOnSignature<void>}\r\n     */\r\n    this.un;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number|string|undefined}\r\n     */\r\n    this.id_ = undefined;\r\n\r\n    /**\r\n     * @type {string}\r\n     * @private\r\n     */\r\n    this.geometryName_ = 'geometry';\r\n\r\n    /**\r\n     * User provided style.\r\n     * @private\r\n     * @type {import(\"./style/Style.js\").StyleLike}\r\n     */\r\n    this.style_ = null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"./style/Style.js\").StyleFunction|undefined}\r\n     */\r\n    this.styleFunction_ = undefined;\r\n\r\n    /**\r\n     * @private\r\n     * @type {?import(\"./events.js\").EventsKey}\r\n     */\r\n    this.geometryChangeKey_ = null;\r\n\r\n    this.addChangeListener(this.geometryName_, this.handleGeometryChanged_);\r\n\r\n    if (geometryOrProperties) {\r\n      if (\r\n        typeof (\r\n          /** @type {?} */ (geometryOrProperties).getSimplifiedGeometry\r\n        ) === 'function'\r\n      ) {\r\n        const geometry = /** @type {Geometry} */ (geometryOrProperties);\r\n        this.setGeometry(geometry);\r\n      } else {\r\n        /** @type {Object<string, *>} */\r\n        const properties = geometryOrProperties;\r\n        this.setProperties(properties);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Clone this feature. If the original feature has a geometry it\r\n   * is also cloned. The feature id is not set in the clone.\r\n   * @return {Feature<Geometry>} The clone.\r\n   * @api\r\n   */\r\n  clone() {\r\n    const clone = /** @type {Feature<Geometry>} */ (\r\n      new Feature(this.hasProperties() ? this.getProperties() : null)\r\n    );\r\n    clone.setGeometryName(this.getGeometryName());\r\n    const geometry = this.getGeometry();\r\n    if (geometry) {\r\n      clone.setGeometry(/** @type {Geometry} */ (geometry.clone()));\r\n    }\r\n    const style = this.getStyle();\r\n    if (style) {\r\n      clone.setStyle(style);\r\n    }\r\n    return clone;\r\n  }\r\n\r\n  /**\r\n   * Get the feature's default geometry.  A feature may have any number of named\r\n   * geometries.  The \"default\" geometry (the one that is rendered by default) is\r\n   * set when calling {@link module:ol/Feature~Feature#setGeometry}.\r\n   * @return {Geometry|undefined} The default geometry for the feature.\r\n   * @api\r\n   * @observable\r\n   */\r\n  getGeometry() {\r\n    return /** @type {Geometry|undefined} */ (this.get(this.geometryName_));\r\n  }\r\n\r\n  /**\r\n   * Get the feature identifier.  This is a stable identifier for the feature and\r\n   * is either set when reading data from a remote source or set explicitly by\r\n   * calling {@link module:ol/Feature~Feature#setId}.\r\n   * @return {number|string|undefined} Id.\r\n   * @api\r\n   */\r\n  getId() {\r\n    return this.id_;\r\n  }\r\n\r\n  /**\r\n   * Get the name of the feature's default geometry.  By default, the default\r\n   * geometry is named `geometry`.\r\n   * @return {string} Get the property name associated with the default geometry\r\n   *     for this feature.\r\n   * @api\r\n   */\r\n  getGeometryName() {\r\n    return this.geometryName_;\r\n  }\r\n\r\n  /**\r\n   * Get the feature's style. Will return what was provided to the\r\n   * {@link module:ol/Feature~Feature#setStyle} method.\r\n   * @return {import(\"./style/Style.js\").StyleLike|undefined} The feature style.\r\n   * @api\r\n   */\r\n  getStyle() {\r\n    return this.style_;\r\n  }\r\n\r\n  /**\r\n   * Get the feature's style function.\r\n   * @return {import(\"./style/Style.js\").StyleFunction|undefined} Return a function\r\n   * representing the current style of this feature.\r\n   * @api\r\n   */\r\n  getStyleFunction() {\r\n    return this.styleFunction_;\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  handleGeometryChange_() {\r\n    this.changed();\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  handleGeometryChanged_() {\r\n    if (this.geometryChangeKey_) {\r\n      unlistenByKey(this.geometryChangeKey_);\r\n      this.geometryChangeKey_ = null;\r\n    }\r\n    const geometry = this.getGeometry();\r\n    if (geometry) {\r\n      this.geometryChangeKey_ = listen(\r\n        geometry,\r\n        EventType.CHANGE,\r\n        this.handleGeometryChange_,\r\n        this,\r\n      );\r\n    }\r\n    this.changed();\r\n  }\r\n\r\n  /**\r\n   * Set the default geometry for the feature.  This will update the property\r\n   * with the name returned by {@link module:ol/Feature~Feature#getGeometryName}.\r\n   * @param {Geometry|undefined} geometry The new geometry.\r\n   * @api\r\n   * @observable\r\n   */\r\n  setGeometry(geometry) {\r\n    this.set(this.geometryName_, geometry);\r\n  }\r\n\r\n  /**\r\n   * Set the style for the feature to override the layer style.  This can be a\r\n   * single style object, an array of styles, or a function that takes a\r\n   * resolution and returns an array of styles. To unset the feature style, call\r\n   * `setStyle()` without arguments or a falsey value.\r\n   * @param {import(\"./style/Style.js\").StyleLike} [style] Style for this feature.\r\n   * @api\r\n   * @fires module:ol/events/Event~BaseEvent#event:change\r\n   */\r\n  setStyle(style) {\r\n    this.style_ = style;\r\n    this.styleFunction_ = !style ? undefined : createStyleFunction(style);\r\n    this.changed();\r\n  }\r\n\r\n  /**\r\n   * Set the feature id.  The feature id is considered stable and may be used when\r\n   * requesting features or comparing identifiers returned from a remote source.\r\n   * The feature id can be used with the\r\n   * {@link module:ol/source/Vector~VectorSource#getFeatureById} method.\r\n   * @param {number|string|undefined} id The feature id.\r\n   * @api\r\n   * @fires module:ol/events/Event~BaseEvent#event:change\r\n   */\r\n  setId(id) {\r\n    this.id_ = id;\r\n    this.changed();\r\n  }\r\n\r\n  /**\r\n   * Set the property name to be used when getting the feature's default geometry.\r\n   * When calling {@link module:ol/Feature~Feature#getGeometry}, the value of the property with\r\n   * this name will be returned.\r\n   * @param {string} name The property name of the default geometry.\r\n   * @api\r\n   */\r\n  setGeometryName(name) {\r\n    this.removeChangeListener(this.geometryName_, this.handleGeometryChanged_);\r\n    this.geometryName_ = name;\r\n    this.addChangeListener(this.geometryName_, this.handleGeometryChanged_);\r\n    this.handleGeometryChanged_();\r\n  }\r\n}\r\n\r\n/**\r\n * Convert the provided object into a feature style function.  Functions passed\r\n * through unchanged.  Arrays of Style or single style objects wrapped\r\n * in a new feature style function.\r\n * @param {!import(\"./style/Style.js\").StyleFunction|!Array<import(\"./style/Style.js\").default>|!import(\"./style/Style.js\").default} obj\r\n *     A feature style function, a single style, or an array of styles.\r\n * @return {import(\"./style/Style.js\").StyleFunction} A style function.\r\n */\r\nexport function createStyleFunction(obj) {\r\n  if (typeof obj === 'function') {\r\n    return obj;\r\n  }\r\n  /**\r\n   * @type {Array<import(\"./style/Style.js\").default>}\r\n   */\r\n  let styles;\r\n  if (Array.isArray(obj)) {\r\n    styles = obj;\r\n  } else {\r\n    assert(\r\n      typeof (/** @type {?} */ (obj).getZIndex) === 'function',\r\n      'Expected an `ol/style/Style` or an array of `ol/style/Style.js`',\r\n    );\r\n    const style = /** @type {import(\"./style/Style.js\").default} */ (obj);\r\n    styles = [style];\r\n  }\r\n  return function () {\r\n    return styles;\r\n  };\r\n}\r\nexport default Feature;\r\n","/**\r\n * @module ol/Object\r\n */\r\nimport ObjectEventType from './ObjectEventType.js';\r\nimport Observable from './Observable.js';\r\nimport Event from './events/Event.js';\r\nimport {isEmpty} from './obj.js';\r\nimport {getUid} from './util.js';\r\n\r\n/**\r\n * @classdesc\r\n * Events emitted by {@link module:ol/Object~BaseObject} instances are instances of this type.\r\n */\r\nexport class ObjectEvent extends Event {\r\n  /**\r\n   * @param {string} type The event type.\r\n   * @param {string} key The property name.\r\n   * @param {*} oldValue The old value for `key`.\r\n   */\r\n  constructor(type, key, oldValue) {\r\n    super(type);\r\n\r\n    /**\r\n     * The name of the property whose value is changing.\r\n     * @type {string}\r\n     * @api\r\n     */\r\n    this.key = key;\r\n\r\n    /**\r\n     * The old value. To get the new value use `e.target.get(e.key)` where\r\n     * `e` is the event object.\r\n     * @type {*}\r\n     * @api\r\n     */\r\n    this.oldValue = oldValue;\r\n  }\r\n}\r\n\r\n/***\r\n * @template Return\r\n * @typedef {import(\"./Observable\").OnSignature<import(\"./Observable\").EventTypes, import(\"./events/Event.js\").default, Return> &\r\n *    import(\"./Observable\").OnSignature<import(\"./ObjectEventType\").Types, ObjectEvent, Return> &\r\n *    import(\"./Observable\").CombinedOnSignature<import(\"./Observable\").EventTypes|import(\"./ObjectEventType\").Types, Return>} ObjectOnSignature\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * Abstract base class; normally only used for creating subclasses and not\r\n * instantiated in apps.\r\n * Most non-trivial classes inherit from this.\r\n *\r\n * This extends {@link module:ol/Observable~Observable} with observable\r\n * properties, where each property is observable as well as the object as a\r\n * whole.\r\n *\r\n * Classes that inherit from this have pre-defined properties, to which you can\r\n * add your owns. The pre-defined properties are listed in this documentation as\r\n * 'Observable Properties', and have their own accessors; for example,\r\n * {@link module:ol/Map~Map} has a `target` property, accessed with\r\n * `getTarget()` and changed with `setTarget()`. Not all properties are however\r\n * settable. There are also general-purpose accessors `get()` and `set()`. For\r\n * example, `get('target')` is equivalent to `getTarget()`.\r\n *\r\n * The `set` accessors trigger a change event, and you can monitor this by\r\n * registering a listener. For example, {@link module:ol/View~View} has a\r\n * `center` property, so `view.on('change:center', function(evt) {...});` would\r\n * call the function whenever the value of the center property changes. Within\r\n * the function, `evt.target` would be the view, so `evt.target.getCenter()`\r\n * would return the new center.\r\n *\r\n * You can add your own observable properties with\r\n * `object.set('prop', 'value')`, and retrieve that with `object.get('prop')`.\r\n * You can listen for changes on that property value with\r\n * `object.on('change:prop', listener)`. You can get a list of all\r\n * properties with {@link module:ol/Object~BaseObject#getProperties}.\r\n *\r\n * Note that the observable properties are separate from standard JS properties.\r\n * You can, for example, give your map object a title with\r\n * `map.title='New title'` and with `map.set('title', 'Another title')`. The\r\n * first will be a `hasOwnProperty`; the second will appear in\r\n * `getProperties()`. Only the second is observable.\r\n *\r\n * Properties can be deleted by using the unset method. E.g.\r\n * object.unset('foo').\r\n *\r\n * @fires ObjectEvent\r\n * @api\r\n */\r\nclass BaseObject extends Observable {\r\n  /**\r\n   * @param {Object<string, *>} [values] An object with key-value pairs.\r\n   */\r\n  constructor(values) {\r\n    super();\r\n\r\n    /***\r\n     * @type {ObjectOnSignature<import(\"./events\").EventsKey>}\r\n     */\r\n    this.on;\r\n\r\n    /***\r\n     * @type {ObjectOnSignature<import(\"./events\").EventsKey>}\r\n     */\r\n    this.once;\r\n\r\n    /***\r\n     * @type {ObjectOnSignature<void>}\r\n     */\r\n    this.un;\r\n\r\n    // Call {@link module:ol/util.getUid} to ensure that the order of objects' ids is\r\n    // the same as the order in which they were created.  This also helps to\r\n    // ensure that object properties are always added in the same order, which\r\n    // helps many JavaScript engines generate faster code.\r\n    getUid(this);\r\n\r\n    /**\r\n     * @private\r\n     * @type {Object<string, *>|null}\r\n     */\r\n    this.values_ = null;\r\n\r\n    if (values !== undefined) {\r\n      this.setProperties(values);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Gets a value.\r\n   * @param {string} key Key name.\r\n   * @return {*} Value.\r\n   * @api\r\n   */\r\n  get(key) {\r\n    let value;\r\n    if (this.values_ && this.values_.hasOwnProperty(key)) {\r\n      value = this.values_[key];\r\n    }\r\n    return value;\r\n  }\r\n\r\n  /**\r\n   * Get a list of object property names.\r\n   * @return {Array<string>} List of property names.\r\n   * @api\r\n   */\r\n  getKeys() {\r\n    return (this.values_ && Object.keys(this.values_)) || [];\r\n  }\r\n\r\n  /**\r\n   * Get an object of all property names and values.\r\n   * @return {Object<string, *>} Object.\r\n   * @api\r\n   */\r\n  getProperties() {\r\n    return (this.values_ && Object.assign({}, this.values_)) || {};\r\n  }\r\n\r\n  /**\r\n   * Get an object of all property names and values.\r\n   * @return {Object<string, *>?} Object.\r\n   */\r\n  getPropertiesInternal() {\r\n    return this.values_;\r\n  }\r\n\r\n  /**\r\n   * @return {boolean} The object has properties.\r\n   */\r\n  hasProperties() {\r\n    return !!this.values_;\r\n  }\r\n\r\n  /**\r\n   * @param {string} key Key name.\r\n   * @param {*} oldValue Old value.\r\n   */\r\n  notify(key, oldValue) {\r\n    let eventType;\r\n    eventType = `change:${key}`;\r\n    if (this.hasListener(eventType)) {\r\n      this.dispatchEvent(new ObjectEvent(eventType, key, oldValue));\r\n    }\r\n    eventType = ObjectEventType.PROPERTYCHANGE;\r\n    if (this.hasListener(eventType)) {\r\n      this.dispatchEvent(new ObjectEvent(eventType, key, oldValue));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {string} key Key name.\r\n   * @param {import(\"./events.js\").Listener} listener Listener.\r\n   */\r\n  addChangeListener(key, listener) {\r\n    this.addEventListener(`change:${key}`, listener);\r\n  }\r\n\r\n  /**\r\n   * @param {string} key Key name.\r\n   * @param {import(\"./events.js\").Listener} listener Listener.\r\n   */\r\n  removeChangeListener(key, listener) {\r\n    this.removeEventListener(`change:${key}`, listener);\r\n  }\r\n\r\n  /**\r\n   * Sets a value.\r\n   * @param {string} key Key name.\r\n   * @param {*} value Value.\r\n   * @param {boolean} [silent] Update without triggering an event.\r\n   * @api\r\n   */\r\n  set(key, value, silent) {\r\n    const values = this.values_ || (this.values_ = {});\r\n    if (silent) {\r\n      values[key] = value;\r\n    } else {\r\n      const oldValue = values[key];\r\n      values[key] = value;\r\n      if (oldValue !== value) {\r\n        this.notify(key, oldValue);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Sets a collection of key-value pairs.  Note that this changes any existing\r\n   * properties and adds new ones (it does not remove any existing properties).\r\n   * @param {Object<string, *>} values Values.\r\n   * @param {boolean} [silent] Update without triggering an event.\r\n   * @api\r\n   */\r\n  setProperties(values, silent) {\r\n    for (const key in values) {\r\n      this.set(key, values[key], silent);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Apply any properties from another object without triggering events.\r\n   * @param {BaseObject} source The source object.\r\n   * @protected\r\n   */\r\n  applyProperties(source) {\r\n    if (!source.values_) {\r\n      return;\r\n    }\r\n    Object.assign(this.values_ || (this.values_ = {}), source.values_);\r\n  }\r\n\r\n  /**\r\n   * Unsets a property.\r\n   * @param {string} key Key name.\r\n   * @param {boolean} [silent] Unset without triggering an event.\r\n   * @api\r\n   */\r\n  unset(key, silent) {\r\n    if (this.values_ && key in this.values_) {\r\n      const oldValue = this.values_[key];\r\n      delete this.values_[key];\r\n      if (isEmpty(this.values_)) {\r\n        this.values_ = null;\r\n      }\r\n      if (!silent) {\r\n        this.notify(key, oldValue);\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport default BaseObject;\r\n","/**\r\n * @module ol/ObjectEventType\r\n */\r\n\r\n/**\r\n * @enum {string}\r\n */\r\nexport default {\r\n  /**\r\n   * Triggered when a property is changed.\r\n   * @event module:ol/Object.ObjectEvent#propertychange\r\n   * @api\r\n   */\r\n  PROPERTYCHANGE: 'propertychange',\r\n};\r\n\r\n/**\r\n * @typedef {'propertychange'} Types\r\n */\r\n","/**\r\n * @module ol/Observable\r\n */\r\nimport EventType from './events/EventType.js';\r\nimport EventTarget from './events/Target.js';\r\nimport {listen, listenOnce, unlistenByKey} from './events.js';\r\n\r\n/***\r\n * @template {string} Type\r\n * @template {Event|import(\"./events/Event.js\").default} EventClass\r\n * @template Return\r\n * @typedef {(type: Type, listener: (event: EventClass) => ?) => Return} OnSignature\r\n */\r\n\r\n/***\r\n * @template {string} Type\r\n * @template Return\r\n * @typedef {(type: Type[], listener: (event: Event|import(\"./events/Event\").default) => ?) => Return extends void ? void : Return[]} CombinedOnSignature\r\n */\r\n\r\n/**\r\n * @typedef {'change'|'error'} EventTypes\r\n */\r\n\r\n/***\r\n * @template Return\r\n * @typedef {OnSignature<EventTypes, import(\"./events/Event.js\").default, Return> & CombinedOnSignature<EventTypes, Return>} ObservableOnSignature\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * Abstract base class; normally only used for creating subclasses and not\r\n * instantiated in apps.\r\n * An event target providing convenient methods for listener registration\r\n * and unregistration. A generic `change` event is always available through\r\n * {@link module:ol/Observable~Observable#changed}.\r\n *\r\n * @fires import(\"./events/Event.js\").default\r\n * @api\r\n */\r\nclass Observable extends EventTarget {\r\n  constructor() {\r\n    super();\r\n\r\n    this.on =\r\n      /** @type {ObservableOnSignature<import(\"./events\").EventsKey>} */ (\r\n        this.onInternal\r\n      );\r\n\r\n    this.once =\r\n      /** @type {ObservableOnSignature<import(\"./events\").EventsKey>} */ (\r\n        this.onceInternal\r\n      );\r\n\r\n    this.un = /** @type {ObservableOnSignature<void>} */ (this.unInternal);\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.revision_ = 0;\r\n  }\r\n\r\n  /**\r\n   * Increases the revision counter and dispatches a 'change' event.\r\n   * @api\r\n   */\r\n  changed() {\r\n    ++this.revision_;\r\n    this.dispatchEvent(EventType.CHANGE);\r\n  }\r\n\r\n  /**\r\n   * Get the version number for this object.  Each time the object is modified,\r\n   * its version number will be incremented.\r\n   * @return {number} Revision.\r\n   * @api\r\n   */\r\n  getRevision() {\r\n    return this.revision_;\r\n  }\r\n\r\n  /**\r\n   * @param {string|Array<string>} type Type.\r\n   * @param {function((Event|import(\"./events/Event\").default)): ?} listener Listener.\r\n   * @return {import(\"./events.js\").EventsKey|Array<import(\"./events.js\").EventsKey>} Event key.\r\n   * @protected\r\n   */\r\n  onInternal(type, listener) {\r\n    if (Array.isArray(type)) {\r\n      const len = type.length;\r\n      const keys = new Array(len);\r\n      for (let i = 0; i < len; ++i) {\r\n        keys[i] = listen(this, type[i], listener);\r\n      }\r\n      return keys;\r\n    }\r\n    return listen(this, /** @type {string} */ (type), listener);\r\n  }\r\n\r\n  /**\r\n   * @param {string|Array<string>} type Type.\r\n   * @param {function((Event|import(\"./events/Event\").default)): ?} listener Listener.\r\n   * @return {import(\"./events.js\").EventsKey|Array<import(\"./events.js\").EventsKey>} Event key.\r\n   * @protected\r\n   */\r\n  onceInternal(type, listener) {\r\n    let key;\r\n    if (Array.isArray(type)) {\r\n      const len = type.length;\r\n      key = new Array(len);\r\n      for (let i = 0; i < len; ++i) {\r\n        key[i] = listenOnce(this, type[i], listener);\r\n      }\r\n    } else {\r\n      key = listenOnce(this, /** @type {string} */ (type), listener);\r\n    }\r\n    /** @type {Object} */ (listener).ol_key = key;\r\n    return key;\r\n  }\r\n\r\n  /**\r\n   * Unlisten for a certain type of event.\r\n   * @param {string|Array<string>} type Type.\r\n   * @param {function((Event|import(\"./events/Event\").default)): ?} listener Listener.\r\n   * @protected\r\n   */\r\n  unInternal(type, listener) {\r\n    const key = /** @type {Object} */ (listener).ol_key;\r\n    if (key) {\r\n      unByKey(key);\r\n    } else if (Array.isArray(type)) {\r\n      for (let i = 0, ii = type.length; i < ii; ++i) {\r\n        this.removeEventListener(type[i], listener);\r\n      }\r\n    } else {\r\n      this.removeEventListener(type, listener);\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Listen for a certain type of event.\r\n * @function\r\n * @param {string|Array<string>} type The event type or array of event types.\r\n * @param {function((Event|import(\"./events/Event\").default)): ?} listener The listener function.\r\n * @return {import(\"./events.js\").EventsKey|Array<import(\"./events.js\").EventsKey>} Unique key for the listener. If\r\n *     called with an array of event types as the first argument, the return\r\n *     will be an array of keys.\r\n * @api\r\n */\r\nObservable.prototype.on;\r\n\r\n/**\r\n * Listen once for a certain type of event.\r\n * @function\r\n * @param {string|Array<string>} type The event type or array of event types.\r\n * @param {function((Event|import(\"./events/Event\").default)): ?} listener The listener function.\r\n * @return {import(\"./events.js\").EventsKey|Array<import(\"./events.js\").EventsKey>} Unique key for the listener. If\r\n *     called with an array of event types as the first argument, the return\r\n *     will be an array of keys.\r\n * @api\r\n */\r\nObservable.prototype.once;\r\n\r\n/**\r\n * Unlisten for a certain type of event.\r\n * @function\r\n * @param {string|Array<string>} type The event type or array of event types.\r\n * @param {function((Event|import(\"./events/Event\").default)): ?} listener The listener function.\r\n * @api\r\n */\r\nObservable.prototype.un;\r\n\r\n/**\r\n * Removes an event listener using the key returned by `on()` or `once()`.\r\n * @param {import(\"./events.js\").EventsKey|Array<import(\"./events.js\").EventsKey>} key The key returned by `on()`\r\n *     or `once()` (or an array of keys).\r\n * @api\r\n */\r\nexport function unByKey(key) {\r\n  if (Array.isArray(key)) {\r\n    for (let i = 0, ii = key.length; i < ii; ++i) {\r\n      unlistenByKey(key[i]);\r\n    }\r\n  } else {\r\n    unlistenByKey(/** @type {import(\"./events.js\").EventsKey} */ (key));\r\n  }\r\n}\r\n\r\nexport default Observable;\r\n","/**\r\n * @module ol/events/EventType\r\n */\r\n\r\n/**\r\n * @enum {string}\r\n * @const\r\n */\r\nexport default {\r\n  /**\r\n   * Generic change event. Triggered when the revision counter is increased.\r\n   * @event module:ol/events/Event~BaseEvent#change\r\n   * @api\r\n   */\r\n  CHANGE: 'change',\r\n\r\n  /**\r\n   * Generic error event. Triggered when an error occurs.\r\n   * @event module:ol/events/Event~BaseEvent#error\r\n   * @api\r\n   */\r\n  ERROR: 'error',\r\n\r\n  BLUR: 'blur',\r\n  CLEAR: 'clear',\r\n  CONTEXTMENU: 'contextmenu',\r\n  CLICK: 'click',\r\n  DBLCLICK: 'dblclick',\r\n  DRAGENTER: 'dragenter',\r\n  DRAGOVER: 'dragover',\r\n  DROP: 'drop',\r\n  FOCUS: 'focus',\r\n  KEYDOWN: 'keydown',\r\n  KEYPRESS: 'keypress',\r\n  LOAD: 'load',\r\n  RESIZE: 'resize',\r\n  TOUCHMOVE: 'touchmove',\r\n  WHEEL: 'wheel',\r\n};\r\n","/**\r\n * @module ol/events/Target\r\n */\r\nimport Disposable from '../Disposable.js';\r\nimport {VOID} from '../functions.js';\r\nimport {clear} from '../obj.js';\r\nimport Event from './Event.js';\r\n\r\n/**\r\n * @typedef {EventTarget|Target} EventTargetLike\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * A simplified implementation of the W3C DOM Level 2 EventTarget interface.\r\n * See https://www.w3.org/TR/2000/REC-DOM-Level-2-Events-20001113/events.html#Events-EventTarget.\r\n *\r\n * There are two important simplifications compared to the specification:\r\n *\r\n * 1. The handling of `useCapture` in `addEventListener` and\r\n *    `removeEventListener`. There is no real capture model.\r\n * 2. The handling of `stopPropagation` and `preventDefault` on `dispatchEvent`.\r\n *    There is no event target hierarchy. When a listener calls\r\n *    `stopPropagation` or `preventDefault` on an event object, it means that no\r\n *    more listeners after this one will be called. Same as when the listener\r\n *    returns false.\r\n */\r\nclass Target extends Disposable {\r\n  /**\r\n   * @param {*} [target] Default event target for dispatched events.\r\n   */\r\n  constructor(target) {\r\n    super();\r\n\r\n    /**\r\n     * @private\r\n     * @type {*}\r\n     */\r\n    this.eventTarget_ = target;\r\n\r\n    /**\r\n     * @private\r\n     * @type {Object<string, number>|null}\r\n     */\r\n    this.pendingRemovals_ = null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {Object<string, number>|null}\r\n     */\r\n    this.dispatching_ = null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {Object<string, Array<import(\"../events.js\").Listener>>|null}\r\n     */\r\n    this.listeners_ = null;\r\n  }\r\n\r\n  /**\r\n   * @param {string} type Type.\r\n   * @param {import(\"../events.js\").Listener} listener Listener.\r\n   */\r\n  addEventListener(type, listener) {\r\n    if (!type || !listener) {\r\n      return;\r\n    }\r\n    const listeners = this.listeners_ || (this.listeners_ = {});\r\n    const listenersForType = listeners[type] || (listeners[type] = []);\r\n    if (!listenersForType.includes(listener)) {\r\n      listenersForType.push(listener);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Dispatches an event and calls all listeners listening for events\r\n   * of this type. The event parameter can either be a string or an\r\n   * Object with a `type` property.\r\n   *\r\n   * @param {import(\"./Event.js\").default|string} event Event object.\r\n   * @return {boolean|undefined} `false` if anyone called preventDefault on the\r\n   *     event object or if any of the listeners returned false.\r\n   * @api\r\n   */\r\n  dispatchEvent(event) {\r\n    const isString = typeof event === 'string';\r\n    const type = isString ? event : event.type;\r\n    const listeners = this.listeners_ && this.listeners_[type];\r\n    if (!listeners) {\r\n      return;\r\n    }\r\n\r\n    const evt = isString ? new Event(event) : /** @type {Event} */ (event);\r\n    if (!evt.target) {\r\n      evt.target = this.eventTarget_ || this;\r\n    }\r\n    const dispatching = this.dispatching_ || (this.dispatching_ = {});\r\n    const pendingRemovals =\r\n      this.pendingRemovals_ || (this.pendingRemovals_ = {});\r\n    if (!(type in dispatching)) {\r\n      dispatching[type] = 0;\r\n      pendingRemovals[type] = 0;\r\n    }\r\n    ++dispatching[type];\r\n    let propagate;\r\n    for (let i = 0, ii = listeners.length; i < ii; ++i) {\r\n      if ('handleEvent' in listeners[i]) {\r\n        propagate = /** @type {import(\"../events.js\").ListenerObject} */ (\r\n          listeners[i]\r\n        ).handleEvent(evt);\r\n      } else {\r\n        propagate = /** @type {import(\"../events.js\").ListenerFunction} */ (\r\n          listeners[i]\r\n        ).call(this, evt);\r\n      }\r\n      if (propagate === false || evt.propagationStopped) {\r\n        propagate = false;\r\n        break;\r\n      }\r\n    }\r\n    if (--dispatching[type] === 0) {\r\n      let pr = pendingRemovals[type];\r\n      delete pendingRemovals[type];\r\n      while (pr--) {\r\n        this.removeEventListener(type, VOID);\r\n      }\r\n      delete dispatching[type];\r\n    }\r\n    return propagate;\r\n  }\r\n\r\n  /**\r\n   * Clean up.\r\n   * @override\r\n   */\r\n  disposeInternal() {\r\n    this.listeners_ && clear(this.listeners_);\r\n  }\r\n\r\n  /**\r\n   * Get the listeners for a specified event type. Listeners are returned in the\r\n   * order that they will be called in.\r\n   *\r\n   * @param {string} type Type.\r\n   * @return {Array<import(\"../events.js\").Listener>|undefined} Listeners.\r\n   */\r\n  getListeners(type) {\r\n    return (this.listeners_ && this.listeners_[type]) || undefined;\r\n  }\r\n\r\n  /**\r\n   * @param {string} [type] Type. If not provided,\r\n   *     `true` will be returned if this event target has any listeners.\r\n   * @return {boolean} Has listeners.\r\n   */\r\n  hasListener(type) {\r\n    if (!this.listeners_) {\r\n      return false;\r\n    }\r\n    return type\r\n      ? type in this.listeners_\r\n      : Object.keys(this.listeners_).length > 0;\r\n  }\r\n\r\n  /**\r\n   * @param {string} type Type.\r\n   * @param {import(\"../events.js\").Listener} listener Listener.\r\n   */\r\n  removeEventListener(type, listener) {\r\n    if (!this.listeners_) {\r\n      return;\r\n    }\r\n    const listeners = this.listeners_[type];\r\n    if (!listeners) {\r\n      return;\r\n    }\r\n    const index = listeners.indexOf(listener);\r\n    if (index !== -1) {\r\n      if (this.pendingRemovals_ && type in this.pendingRemovals_) {\r\n        // make listener a no-op, and remove later in #dispatchEvent()\r\n        listeners[index] = VOID;\r\n        ++this.pendingRemovals_[type];\r\n      } else {\r\n        listeners.splice(index, 1);\r\n        if (listeners.length === 0) {\r\n          delete this.listeners_[type];\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport default Target;\r\n","/**\r\n * @module ol/Disposable\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * Objects that need to clean up after themselves.\r\n */\r\nclass Disposable {\r\n  constructor() {\r\n    /**\r\n     * The object has already been disposed.\r\n     * @type {boolean}\r\n     * @protected\r\n     */\r\n    this.disposed = false;\r\n  }\r\n\r\n  /**\r\n   * Clean up.\r\n   */\r\n  dispose() {\r\n    if (!this.disposed) {\r\n      this.disposed = true;\r\n      this.disposeInternal();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Extension point for disposable objects.\r\n   * @protected\r\n   */\r\n  disposeInternal() {}\r\n}\r\n\r\nexport default Disposable;\r\n","/**\r\n * @module ol/functions\r\n */\r\n\r\nimport {equals as arrayEquals} from './array.js';\r\n\r\n/**\r\n * Always returns true.\r\n * @return {boolean} true.\r\n */\r\nexport function TRUE() {\r\n  return true;\r\n}\r\n\r\n/**\r\n * Always returns false.\r\n * @return {boolean} false.\r\n */\r\nexport function FALSE() {\r\n  return false;\r\n}\r\n\r\n/**\r\n * A reusable function, used e.g. as a default for callbacks.\r\n *\r\n * @return {void} Nothing.\r\n */\r\nexport function VOID() {}\r\n\r\n/**\r\n * Wrap a function in another function that remembers the last return.  If the\r\n * returned function is called twice in a row with the same arguments and the same\r\n * this object, it will return the value from the first call in the second call.\r\n *\r\n * @param {function(...any): ReturnType} fn The function to memoize.\r\n * @return {function(...any): ReturnType} The memoized function.\r\n * @template ReturnType\r\n */\r\nexport function memoizeOne(fn) {\r\n  /** @type {ReturnType} */\r\n  let lastResult;\r\n\r\n  /** @type {Array<any>|undefined} */\r\n  let lastArgs;\r\n\r\n  let lastThis;\r\n\r\n  /**\r\n   * @this {*} Only need to know if `this` changed, don't care what type\r\n   * @return {ReturnType} Memoized value\r\n   */\r\n  return function () {\r\n    const nextArgs = Array.prototype.slice.call(arguments);\r\n    if (!lastArgs || this !== lastThis || !arrayEquals(nextArgs, lastArgs)) {\r\n      lastThis = this;\r\n      lastArgs = nextArgs;\r\n      lastResult = fn.apply(this, arguments);\r\n    }\r\n    return lastResult;\r\n  };\r\n}\r\n\r\n/**\r\n * @template T\r\n * @param {function(): (T | Promise<T>)} getter A function that returns a value or a promise for a value.\r\n * @return {Promise<T>} A promise for the value.\r\n */\r\nexport function toPromise(getter) {\r\n  function promiseGetter() {\r\n    let value;\r\n    try {\r\n      value = getter();\r\n    } catch (err) {\r\n      return Promise.reject(err);\r\n    }\r\n    if (value instanceof Promise) {\r\n      return value;\r\n    }\r\n    return Promise.resolve(value);\r\n  }\r\n  return promiseGetter();\r\n}\r\n","/**\r\n * @module ol/array\r\n */\r\n\r\n/**\r\n * Performs a binary search on the provided sorted list and returns the index of the item if found. If it can't be found it'll return -1.\r\n * https://github.com/darkskyapp/binary-search\r\n *\r\n * @param {Array<*>} haystack Items to search through.\r\n * @param {*} needle The item to look for.\r\n * @param {Function} [comparator] Comparator function.\r\n * @return {number} The index of the item if found, -1 if not.\r\n */\r\nexport function binarySearch(haystack, needle, comparator) {\r\n  let mid, cmp;\r\n  comparator = comparator || ascending;\r\n  let low = 0;\r\n  let high = haystack.length;\r\n  let found = false;\r\n\r\n  while (low < high) {\r\n    /* Note that \"(low + high) >>> 1\" may overflow, and results in a typecast\r\n     * to double (which gives the wrong results). */\r\n    mid = low + ((high - low) >> 1);\r\n    cmp = +comparator(haystack[mid], needle);\r\n\r\n    if (cmp < 0.0) {\r\n      /* Too low. */\r\n      low = mid + 1;\r\n    } else {\r\n      /* Key found or too high */\r\n      high = mid;\r\n      found = !cmp;\r\n    }\r\n  }\r\n\r\n  /* Key not found. */\r\n  return found ? low : ~low;\r\n}\r\n\r\n/**\r\n * Compare function sorting arrays in ascending order.  Safe to use for numeric values.\r\n * @param {*} a The first object to be compared.\r\n * @param {*} b The second object to be compared.\r\n * @return {number} A negative number, zero, or a positive number as the first\r\n *     argument is less than, equal to, or greater than the second.\r\n */\r\nexport function ascending(a, b) {\r\n  return a > b ? 1 : a < b ? -1 : 0;\r\n}\r\n\r\n/**\r\n * Compare function sorting arrays in descending order.  Safe to use for numeric values.\r\n * @param {*} a The first object to be compared.\r\n * @param {*} b The second object to be compared.\r\n * @return {number} A negative number, zero, or a positive number as the first\r\n *     argument is greater than, equal to, or less than the second.\r\n */\r\nexport function descending(a, b) {\r\n  return a < b ? 1 : a > b ? -1 : 0;\r\n}\r\n\r\n/**\r\n * {@link module:ol/tilegrid/TileGrid~TileGrid#getZForResolution} can use a function\r\n * of this type to determine which nearest resolution to use.\r\n *\r\n * This function takes a `{number}` representing a value between two array entries,\r\n * a `{number}` representing the value of the nearest higher entry and\r\n * a `{number}` representing the value of the nearest lower entry\r\n * as arguments and returns a `{number}`. If a negative number or zero is returned\r\n * the lower value will be used, if a positive number is returned the higher value\r\n * will be used.\r\n * @typedef {function(number, number, number): number} NearestDirectionFunction\r\n * @api\r\n */\r\n\r\n/**\r\n * @param {Array<number>} arr Array in descending order.\r\n * @param {number} target Target.\r\n * @param {number|NearestDirectionFunction} direction\r\n *    0 means return the nearest,\r\n *    > 0 means return the largest nearest,\r\n *    < 0 means return the smallest nearest.\r\n * @return {number} Index.\r\n */\r\nexport function linearFindNearest(arr, target, direction) {\r\n  if (arr[0] <= target) {\r\n    return 0;\r\n  }\r\n\r\n  const n = arr.length;\r\n  if (target <= arr[n - 1]) {\r\n    return n - 1;\r\n  }\r\n\r\n  if (typeof direction === 'function') {\r\n    for (let i = 1; i < n; ++i) {\r\n      const candidate = arr[i];\r\n      if (candidate === target) {\r\n        return i;\r\n      }\r\n      if (candidate < target) {\r\n        if (direction(target, arr[i - 1], candidate) > 0) {\r\n          return i - 1;\r\n        }\r\n        return i;\r\n      }\r\n    }\r\n    return n - 1;\r\n  }\r\n\r\n  if (direction > 0) {\r\n    for (let i = 1; i < n; ++i) {\r\n      if (arr[i] < target) {\r\n        return i - 1;\r\n      }\r\n    }\r\n    return n - 1;\r\n  }\r\n\r\n  if (direction < 0) {\r\n    for (let i = 1; i < n; ++i) {\r\n      if (arr[i] <= target) {\r\n        return i;\r\n      }\r\n    }\r\n    return n - 1;\r\n  }\r\n\r\n  for (let i = 1; i < n; ++i) {\r\n    if (arr[i] == target) {\r\n      return i;\r\n    }\r\n    if (arr[i] < target) {\r\n      if (arr[i - 1] - target < target - arr[i]) {\r\n        return i - 1;\r\n      }\r\n      return i;\r\n    }\r\n  }\r\n  return n - 1;\r\n}\r\n\r\n/**\r\n * @param {Array<*>} arr Array.\r\n * @param {number} begin Begin index.\r\n * @param {number} end End index.\r\n */\r\nexport function reverseSubArray(arr, begin, end) {\r\n  while (begin < end) {\r\n    const tmp = arr[begin];\r\n    arr[begin] = arr[end];\r\n    arr[end] = tmp;\r\n    ++begin;\r\n    --end;\r\n  }\r\n}\r\n\r\n/**\r\n * @param {Array<VALUE>} arr The array to modify.\r\n * @param {!Array<VALUE>|VALUE} data The elements or arrays of elements to add to arr.\r\n * @template VALUE\r\n */\r\nexport function extend(arr, data) {\r\n  const extension = Array.isArray(data) ? data : [data];\r\n  const length = extension.length;\r\n  for (let i = 0; i < length; i++) {\r\n    arr[arr.length] = extension[i];\r\n  }\r\n}\r\n\r\n/**\r\n * @param {Array<VALUE>} arr The array to modify.\r\n * @param {VALUE} obj The element to remove.\r\n * @template VALUE\r\n * @return {boolean} If the element was removed.\r\n */\r\nexport function remove(arr, obj) {\r\n  const i = arr.indexOf(obj);\r\n  const found = i > -1;\r\n  if (found) {\r\n    arr.splice(i, 1);\r\n  }\r\n  return found;\r\n}\r\n\r\n/**\r\n * @param {Array<any>|Uint8ClampedArray} arr1 The first array to compare.\r\n * @param {Array<any>|Uint8ClampedArray} arr2 The second array to compare.\r\n * @return {boolean} Whether the two arrays are equal.\r\n */\r\nexport function equals(arr1, arr2) {\r\n  const len1 = arr1.length;\r\n  if (len1 !== arr2.length) {\r\n    return false;\r\n  }\r\n  for (let i = 0; i < len1; i++) {\r\n    if (arr1[i] !== arr2[i]) {\r\n      return false;\r\n    }\r\n  }\r\n  return true;\r\n}\r\n\r\n/**\r\n * Sort the passed array such that the relative order of equal elements is preserved.\r\n * See https://en.wikipedia.org/wiki/Sorting_algorithm#Stability for details.\r\n * @param {Array<*>} arr The array to sort (modifies original).\r\n * @param {!function(*, *): number} compareFnc Comparison function.\r\n * @api\r\n */\r\nexport function stableSort(arr, compareFnc) {\r\n  const length = arr.length;\r\n  const tmp = Array(arr.length);\r\n  let i;\r\n  for (i = 0; i < length; i++) {\r\n    tmp[i] = {index: i, value: arr[i]};\r\n  }\r\n  tmp.sort(function (a, b) {\r\n    return compareFnc(a.value, b.value) || a.index - b.index;\r\n  });\r\n  for (i = 0; i < arr.length; i++) {\r\n    arr[i] = tmp[i].value;\r\n  }\r\n}\r\n\r\n/**\r\n * @param {Array<*>} arr The array to test.\r\n * @param {Function} [func] Comparison function.\r\n * @param {boolean} [strict] Strictly sorted (default false).\r\n * @return {boolean} Return index.\r\n */\r\nexport function isSorted(arr, func, strict) {\r\n  const compare = func || ascending;\r\n  return arr.every(function (currentVal, index) {\r\n    if (index === 0) {\r\n      return true;\r\n    }\r\n    const res = compare(arr[index - 1], currentVal);\r\n    return !(res > 0 || (strict && res === 0));\r\n  });\r\n}\r\n","/**\r\n * @module ol/obj\r\n */\r\n\r\n/**\r\n * Removes all properties from an object.\r\n * @param {Object<string, unknown>} object The object to clear.\r\n */\r\nexport function clear(object) {\r\n  for (const property in object) {\r\n    delete object[property];\r\n  }\r\n}\r\n\r\n/**\r\n * Determine if an object has any properties.\r\n * @param {Object} object The object to check.\r\n * @return {boolean} The object is empty.\r\n */\r\nexport function isEmpty(object) {\r\n  let property;\r\n  for (property in object) {\r\n    return false;\r\n  }\r\n  return !property;\r\n}\r\n","/**\r\n * @module ol/events/Event\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * Stripped down implementation of the W3C DOM Level 2 Event interface.\r\n * See https://www.w3.org/TR/DOM-Level-2-Events/events.html#Events-interface.\r\n *\r\n * This implementation only provides `type` and `target` properties, and\r\n * `stopPropagation` and `preventDefault` methods. It is meant as base class\r\n * for higher level events defined in the library, and works with\r\n * {@link module:ol/events/Target~Target}.\r\n */\r\nclass BaseEvent {\r\n  /**\r\n   * @param {string} type Type.\r\n   */\r\n  constructor(type) {\r\n    /**\r\n     * @type {boolean}\r\n     */\r\n    this.propagationStopped;\r\n\r\n    /**\r\n     * @type {boolean}\r\n     */\r\n    this.defaultPrevented;\r\n\r\n    /**\r\n     * The event type.\r\n     * @type {string}\r\n     * @api\r\n     */\r\n    this.type = type;\r\n\r\n    /**\r\n     * The event target.\r\n     * @type {Object}\r\n     * @api\r\n     */\r\n    this.target = null;\r\n  }\r\n\r\n  /**\r\n   * Prevent default. This means that no emulated `click`, `singleclick` or `doubleclick` events\r\n   * will be fired.\r\n   * @api\r\n   */\r\n  preventDefault() {\r\n    this.defaultPrevented = true;\r\n  }\r\n\r\n  /**\r\n   * Stop event propagation.\r\n   * @api\r\n   */\r\n  stopPropagation() {\r\n    this.propagationStopped = true;\r\n  }\r\n}\r\n\r\n/**\r\n * @param {Event|import(\"./Event.js\").default} evt Event\r\n */\r\nexport function stopPropagation(evt) {\r\n  evt.stopPropagation();\r\n}\r\n\r\n/**\r\n * @param {Event|import(\"./Event.js\").default} evt Event\r\n */\r\nexport function preventDefault(evt) {\r\n  evt.preventDefault();\r\n}\r\n\r\nexport default BaseEvent;\r\n","/**\r\n * @module ol/events\r\n */\r\nimport {clear} from './obj.js';\r\n\r\n/**\r\n * Key to use with {@link module:ol/Observable.unByKey}.\r\n * @typedef {Object} EventsKey\r\n * @property {ListenerFunction} listener Listener.\r\n * @property {import(\"./events/Target.js\").EventTargetLike} target Target.\r\n * @property {string} type Type.\r\n * @api\r\n */\r\n\r\n/**\r\n * Listener function. This function is called with an event object as argument.\r\n * When the function returns `false`, event propagation will stop.\r\n *\r\n * @typedef {function((Event|import(\"./events/Event.js\").default)): (void|boolean)} ListenerFunction\r\n * @api\r\n */\r\n\r\n/**\r\n * @typedef {Object} ListenerObject\r\n * @property {ListenerFunction} handleEvent HandleEvent listener function.\r\n */\r\n\r\n/**\r\n * @typedef {ListenerFunction|ListenerObject} Listener\r\n */\r\n\r\n/**\r\n * Registers an event listener on an event target. Inspired by\r\n * https://google.github.io/closure-library/api/source/closure/goog/events/events.js.src.html\r\n *\r\n * This function efficiently binds a `listener` to a `this` object, and returns\r\n * a key for use with {@link module:ol/events.unlistenByKey}.\r\n *\r\n * @param {import(\"./events/Target.js\").EventTargetLike} target Event target.\r\n * @param {string} type Event type.\r\n * @param {ListenerFunction} listener Listener.\r\n * @param {Object} [thisArg] Object referenced by the `this` keyword in the\r\n *     listener. Default is the `target`.\r\n * @param {boolean} [once] If true, add the listener as one-off listener.\r\n * @return {EventsKey} Unique key for the listener.\r\n */\r\nexport function listen(target, type, listener, thisArg, once) {\r\n  if (once) {\r\n    const originalListener = listener;\r\n    /**\r\n     * @param {Event|import('./events/Event.js').default} event The event\r\n     * @return {void|boolean} When the function returns `false`, event propagation will stop.\r\n     * @this {typeof target}\r\n     */\r\n    listener = function (event) {\r\n      target.removeEventListener(type, listener);\r\n      return originalListener.call(thisArg ?? this, event);\r\n    };\r\n  } else if (thisArg && thisArg !== target) {\r\n    listener = listener.bind(thisArg);\r\n  }\r\n  const eventsKey = {\r\n    target: target,\r\n    type: type,\r\n    listener: listener,\r\n  };\r\n  target.addEventListener(type, listener);\r\n  return eventsKey;\r\n}\r\n\r\n/**\r\n * Registers a one-off event listener on an event target. Inspired by\r\n * https://google.github.io/closure-library/api/source/closure/goog/events/events.js.src.html\r\n *\r\n * This function efficiently binds a `listener` as self-unregistering listener\r\n * to a `this` object, and returns a key for use with\r\n * {@link module:ol/events.unlistenByKey} in case the listener needs to be\r\n * unregistered before it is called.\r\n *\r\n * When {@link module:ol/events.listen} is called with the same arguments after this\r\n * function, the self-unregistering listener will be turned into a permanent\r\n * listener.\r\n *\r\n * @param {import(\"./events/Target.js\").EventTargetLike} target Event target.\r\n * @param {string} type Event type.\r\n * @param {ListenerFunction} listener Listener.\r\n * @param {Object} [thisArg] Object referenced by the `this` keyword in the\r\n *     listener. Default is the `target`.\r\n * @return {EventsKey} Key for unlistenByKey.\r\n */\r\nexport function listenOnce(target, type, listener, thisArg) {\r\n  return listen(target, type, listener, thisArg, true);\r\n}\r\n\r\n/**\r\n * Unregisters event listeners on an event target. Inspired by\r\n * https://google.github.io/closure-library/api/source/closure/goog/events/events.js.src.html\r\n *\r\n * The argument passed to this function is the key returned from\r\n * {@link module:ol/events.listen} or {@link module:ol/events.listenOnce}.\r\n *\r\n * @param {EventsKey} key The key.\r\n */\r\nexport function unlistenByKey(key) {\r\n  if (key && key.target) {\r\n    key.target.removeEventListener(key.type, key.listener);\r\n    clear(key);\r\n  }\r\n}\r\n","/**\r\n * @module ol/util\r\n */\r\n\r\n/**\r\n * @return {never} Any return.\r\n */\r\nexport function abstract() {\r\n  throw new Error('Unimplemented abstract method.');\r\n}\r\n\r\n/**\r\n * Counter for getUid.\r\n * @type {number}\r\n * @private\r\n */\r\nlet uidCounter_ = 0;\r\n\r\n/**\r\n * Gets a unique ID for an object. This mutates the object so that further calls\r\n * with the same object as a parameter returns the same value. Unique IDs are generated\r\n * as a strictly increasing sequence. Adapted from goog.getUid.\r\n *\r\n * @param {Object} obj The object to get the unique ID for.\r\n * @return {string} The unique ID for the object.\r\n * @api\r\n */\r\nexport function getUid(obj) {\r\n  return obj.ol_uid || (obj.ol_uid = String(++uidCounter_));\r\n}\r\n\r\n/**\r\n * OpenLayers version.\r\n * @type {string}\r\n */\r\nexport const VERSION = '10.5.0';\r\n","/**\r\n * @module ol/asserts\r\n */\r\n\r\n/**\r\n * @param {*} assertion Assertion we expected to be truthy.\r\n * @param {string} errorMessage Error message.\r\n */\r\nexport function assert(assertion, errorMessage) {\r\n  if (!assertion) {\r\n    throw new Error(errorMessage);\r\n  }\r\n}\r\n","/**\r\n * @module ol/Map\r\n */\r\nimport Collection from './Collection.js';\r\nimport CollectionEventType from './CollectionEventType.js';\r\nimport MapBrowserEvent from './MapBrowserEvent.js';\r\nimport MapBrowserEventHandler from './MapBrowserEventHandler.js';\r\nimport MapBrowserEventType from './MapBrowserEventType.js';\r\nimport MapEvent from './MapEvent.js';\r\nimport MapEventType from './MapEventType.js';\r\nimport MapProperty from './MapProperty.js';\r\nimport BaseObject from './Object.js';\r\nimport ObjectEventType from './ObjectEventType.js';\r\nimport TileQueue, {getTilePriority} from './TileQueue.js';\r\nimport View from './View.js';\r\nimport ViewHint from './ViewHint.js';\r\nimport {equals} from './array.js';\r\nimport {assert} from './asserts.js';\r\nimport {warn} from './console.js';\r\nimport {defaults as defaultControls} from './control/defaults.js';\r\nimport EventType from './events/EventType.js';\r\nimport {listen, unlistenByKey} from './events.js';\r\nimport {\r\n  clone,\r\n  createOrUpdateEmpty,\r\n  equals as equalsExtent,\r\n  getForViewAndSize,\r\n  isEmpty,\r\n} from './extent.js';\r\nimport {TRUE} from './functions.js';\r\nimport {DEVICE_PIXEL_RATIO, PASSIVE_EVENT_LISTENERS} from './has.js';\r\nimport {defaults as defaultInteractions} from './interaction/defaults.js';\r\nimport LayerGroup, {GroupEvent} from './layer/Group.js';\r\nimport Layer from './layer/Layer.js';\r\nimport PointerEventType from './pointer/EventType.js';\r\nimport {fromUserCoordinate, toUserCoordinate} from './proj.js';\r\nimport RenderEventType from './render/EventType.js';\r\nimport CompositeMapRenderer from './renderer/Composite.js';\r\nimport {hasArea} from './size.js';\r\nimport {\r\n  apply as applyTransform,\r\n  create as createTransform,\r\n} from './transform.js';\r\nimport {getUid} from './util.js';\r\n\r\n/**\r\n * State of the current frame. Only `pixelRatio`, `time` and `viewState` should\r\n * be used in applications.\r\n * @typedef {Object} FrameState\r\n * @property {number} pixelRatio The pixel ratio of the frame.\r\n * @property {number} time The time when rendering of the frame was requested.\r\n * @property {import(\"./View.js\").State} viewState The state of the current view.\r\n * @property {boolean} animate Animate.\r\n * @property {import(\"./transform.js\").Transform} coordinateToPixelTransform CoordinateToPixelTransform.\r\n * @property {Object<string, import(\"rbush\").default<import('./render/canvas/Executor.js').DeclutterEntry>>|null} declutter\r\n * Declutter trees by declutter group.\r\n * When null, no decluttering is needed because no layers have decluttering enabled.\r\n * @property {null|import(\"./extent.js\").Extent} extent Extent (in view projection coordinates).\r\n * @property {import(\"./extent.js\").Extent} [nextExtent] Next extent during an animation series.\r\n * @property {number} index Index.\r\n * @property {Array<import(\"./layer/Layer.js\").State>} layerStatesArray LayerStatesArray.\r\n * @property {number} layerIndex LayerIndex.\r\n * @property {import(\"./transform.js\").Transform} pixelToCoordinateTransform PixelToCoordinateTransform.\r\n * @property {Array<PostRenderFunction>} postRenderFunctions PostRenderFunctions.\r\n * @property {import(\"./size.js\").Size} size Size.\r\n * @property {TileQueue} tileQueue TileQueue.\r\n * @property {!Object<string, Object<string, boolean>>} usedTiles UsedTiles.\r\n * @property {Array<number>} viewHints ViewHints.\r\n * @property {!Object<string, Object<string, boolean>>} wantedTiles WantedTiles.\r\n * @property {string} mapId The id of the map.\r\n * @property {Object<string, boolean>} renderTargets Identifiers of previously rendered elements.\r\n */\r\n\r\n/**\r\n * @typedef {function(Map, FrameState): any} PostRenderFunction\r\n */\r\n\r\n/**\r\n * @typedef {Object} AtPixelOptions\r\n * @property {undefined|function(import(\"./layer/Layer.js\").default<import(\"./source/Source\").default>): boolean} [layerFilter] Layer filter\r\n * function. The filter function will receive one argument, the\r\n * {@link module:ol/layer/Layer~Layer layer-candidate} and it should return a boolean value.\r\n * Only layers which are visible and for which this function returns `true`\r\n * will be tested for features. By default, all visible layers will be tested.\r\n * @property {number} [hitTolerance=0] Hit-detection tolerance in css pixels. Pixels\r\n * inside the radius around the given position will be checked for features.\r\n * @property {boolean} [checkWrapped=true] Check-Wrapped Will check for wrapped geometries inside the range of\r\n *   +/- 1 world width. Works only if a projection is used that can be wrapped.\r\n */\r\n\r\n/**\r\n * @typedef {Object} MapOptionsInternal\r\n * @property {Collection<import(\"./control/Control.js\").default>} [controls] Controls.\r\n * @property {Collection<import(\"./interaction/Interaction.js\").default>} [interactions] Interactions.\r\n * @property {HTMLElement|Document} keyboardEventTarget KeyboardEventTarget.\r\n * @property {Collection<import(\"./Overlay.js\").default>} overlays Overlays.\r\n * @property {Object<string, *>} values Values.\r\n */\r\n\r\n/**\r\n * @typedef {import(\"./ObjectEventType\").Types|'change:layergroup'|'change:size'|'change:target'|'change:view'} MapObjectEventTypes\r\n */\r\n\r\n/***\r\n * @template Return\r\n * @typedef {import(\"./Observable\").OnSignature<import(\"./Observable\").EventTypes, import(\"./events/Event.js\").default, Return> &\r\n *    import(\"./Observable\").OnSignature<MapObjectEventTypes, import(\"./Object\").ObjectEvent, Return> &\r\n *    import(\"./Observable\").OnSignature<import(\"./MapBrowserEventType\").Types, import(\"./MapBrowserEvent\").default, Return> &\r\n *    import(\"./Observable\").OnSignature<import(\"./MapEventType\").Types, import(\"./MapEvent\").default, Return> &\r\n *    import(\"./Observable\").OnSignature<import(\"./render/EventType\").MapRenderEventTypes, import(\"./render/Event\").default, Return> &\r\n *    import(\"./Observable\").CombinedOnSignature<import(\"./Observable\").EventTypes|MapObjectEventTypes|\r\n *      import(\"./MapBrowserEventType\").Types|import(\"./MapEventType\").Types|\r\n *      import(\"./render/EventType\").MapRenderEventTypes, Return>} MapEventHandler\r\n */\r\n\r\n/**\r\n * Object literal with config options for the map.\r\n * @typedef {Object} MapOptions\r\n * @property {Collection<import(\"./control/Control.js\").default>|Array<import(\"./control/Control.js\").default>} [controls]\r\n * Controls initially added to the map. If not specified,\r\n * {@link module:ol/control/defaults.defaults} is used.\r\n * @property {number} [pixelRatio=window.devicePixelRatio] The ratio between\r\n * physical pixels and device-independent pixels (dips) on the device.\r\n * @property {Collection<import(\"./interaction/Interaction.js\").default>|Array<import(\"./interaction/Interaction.js\").default>} [interactions]\r\n * Interactions that are initially added to the map. If not specified,\r\n * {@link module:ol/interaction/defaults.defaults} is used.\r\n * @property {HTMLElement|Document|string} [keyboardEventTarget] The element to\r\n * listen to keyboard events on. This determines when the `KeyboardPan` and\r\n * `KeyboardZoom` interactions trigger. For example, if this option is set to\r\n * `document` the keyboard interactions will always trigger. If this option is\r\n * not specified, the element the library listens to keyboard events on is the\r\n * map target (i.e. the user-provided div for the map). If this is not\r\n * `document`, the target element needs to be focused for key events to be\r\n * emitted, requiring that the target element has a `tabindex` attribute.\r\n * @property {Array<import(\"./layer/Base.js\").default>|Collection<import(\"./layer/Base.js\").default>|LayerGroup} [layers]\r\n * Layers. If this is not defined, a map with no layers will be rendered. Note\r\n * that layers are rendered in the order supplied, so if you want, for example,\r\n * a vector layer to appear on top of a tile layer, it must come after the tile\r\n * layer.\r\n * @property {number} [maxTilesLoading=16] Maximum number tiles to load\r\n * simultaneously.\r\n * @property {number} [moveTolerance=1] The minimum distance in pixels the\r\n * cursor must move to be detected as a map move event instead of a click.\r\n * Increasing this value can make it easier to click on the map.\r\n * @property {Collection<import(\"./Overlay.js\").default>|Array<import(\"./Overlay.js\").default>} [overlays]\r\n * Overlays initially added to the map. By default, no overlays are added.\r\n * @property {HTMLElement|string} [target] The container for the map, either the\r\n * element itself or the `id` of the element. If not specified at construction\r\n * time, {@link module:ol/Map~Map#setTarget} must be called for the map to be\r\n * rendered. If passed by element, the container can be in a secondary document.\r\n * For accessibility (focus and keyboard events for map navigation), the `target` element must have a\r\n *  properly configured `tabindex` attribute. If the `target` element is inside a Shadow DOM, the\r\n *  `tabindex` atribute must be set on the custom element's host element.\r\n * **Note:** CSS `transform` support for the target element is limited to `scale`.\r\n * @property {View|Promise<import(\"./View.js\").ViewOptions>} [view] The map's view.  No layer sources will be\r\n * fetched unless this is specified at construction time or through\r\n * {@link module:ol/Map~Map#setView}.\r\n */\r\n\r\n/**\r\n * @param {import(\"./layer/Base.js\").default} layer Layer.\r\n */\r\nfunction removeLayerMapProperty(layer) {\r\n  if (layer instanceof Layer) {\r\n    layer.setMapInternal(null);\r\n    return;\r\n  }\r\n  if (layer instanceof LayerGroup) {\r\n    layer.getLayers().forEach(removeLayerMapProperty);\r\n  }\r\n}\r\n\r\n/**\r\n * @param {import(\"./layer/Base.js\").default} layer Layer.\r\n * @param {Map} map Map.\r\n */\r\nfunction setLayerMapProperty(layer, map) {\r\n  if (layer instanceof Layer) {\r\n    layer.setMapInternal(map);\r\n    return;\r\n  }\r\n  if (layer instanceof LayerGroup) {\r\n    const layers = layer.getLayers().getArray();\r\n    for (let i = 0, ii = layers.length; i < ii; ++i) {\r\n      setLayerMapProperty(layers[i], map);\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * @classdesc\r\n * The map is the core component of OpenLayers. For a map to render, a view,\r\n * one or more layers, and a target container are needed:\r\n *\r\n *     import Map from 'ol/Map.js';\r\n *     import View from 'ol/View.js';\r\n *     import TileLayer from 'ol/layer/Tile.js';\r\n *     import OSM from 'ol/source/OSM.js';\r\n *\r\n *     const map = new Map({\r\n *       view: new View({\r\n *         center: [0, 0],\r\n *         zoom: 1,\r\n *       }),\r\n *       layers: [\r\n *         new TileLayer({\r\n *           source: new OSM(),\r\n *         }),\r\n *       ],\r\n *       target: 'map',\r\n *     });\r\n *\r\n * The above snippet creates a map using a {@link module:ol/layer/Tile~TileLayer} to\r\n * display {@link module:ol/source/OSM~OSM} OSM data and render it to a DOM\r\n * element with the id `map`.\r\n *\r\n * The constructor places a viewport container (with CSS class name\r\n * `ol-viewport`) in the target element (see `getViewport()`), and then two\r\n * further elements within the viewport: one with CSS class name\r\n * `ol-overlaycontainer-stopevent` for controls and some overlays, and one with\r\n * CSS class name `ol-overlaycontainer` for other overlays (see the `stopEvent`\r\n * option of {@link module:ol/Overlay~Overlay} for the difference). The map\r\n * itself is placed in a further element within the viewport.\r\n *\r\n * Layers are stored as a {@link module:ol/Collection~Collection} in\r\n * layerGroups. A top-level group is provided by the library. This is what is\r\n * accessed by `getLayerGroup` and `setLayerGroup`. Layers entered in the\r\n * options are added to this group, and `addLayer` and `removeLayer` change the\r\n * layer collection in the group. `getLayers` is a convenience function for\r\n * `getLayerGroup().getLayers()`. Note that {@link module:ol/layer/Group~LayerGroup}\r\n * is a subclass of {@link module:ol/layer/Base~BaseLayer}, so layers entered in the\r\n * options or added with `addLayer` can be groups, which can contain further\r\n * groups, and so on.\r\n *\r\n * @fires import(\"./MapBrowserEvent.js\").MapBrowserEvent\r\n * @fires import(\"./MapEvent.js\").MapEvent\r\n * @fires import(\"./render/Event.js\").default#precompose\r\n * @fires import(\"./render/Event.js\").default#postcompose\r\n * @fires import(\"./render/Event.js\").default#rendercomplete\r\n * @api\r\n */\r\nclass Map extends BaseObject {\r\n  /**\r\n   * @param {MapOptions} [options] Map options.\r\n   */\r\n  constructor(options) {\r\n    super();\r\n\r\n    options = options || {};\r\n\r\n    /***\r\n     * @type {MapEventHandler<import(\"./events\").EventsKey>}\r\n     */\r\n    this.on;\r\n\r\n    /***\r\n     * @type {MapEventHandler<import(\"./events\").EventsKey>}\r\n     */\r\n    this.once;\r\n\r\n    /***\r\n     * @type {MapEventHandler<void>}\r\n     */\r\n    this.un;\r\n\r\n    const optionsInternal = createOptionsInternal(options);\r\n\r\n    /**\r\n     * @private\r\n     * @type {boolean}\r\n     */\r\n    this.renderComplete_ = false;\r\n\r\n    /**\r\n     * @private\r\n     * @type {boolean}\r\n     */\r\n    this.loaded_ = true;\r\n\r\n    /** @private */\r\n    this.boundHandleBrowserEvent_ = this.handleBrowserEvent.bind(this);\r\n\r\n    /**\r\n     * @type {number}\r\n     * @private\r\n     */\r\n    this.maxTilesLoading_ =\r\n      options.maxTilesLoading !== undefined ? options.maxTilesLoading : 16;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.pixelRatio_ =\r\n      options.pixelRatio !== undefined\r\n        ? options.pixelRatio\r\n        : DEVICE_PIXEL_RATIO;\r\n\r\n    /**\r\n     * @private\r\n     * @type {ReturnType<typeof setTimeout>}\r\n     */\r\n    this.postRenderTimeoutHandle_;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number|undefined}\r\n     */\r\n    this.animationDelayKey_;\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    this.animationDelay_ = this.animationDelay_.bind(this);\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"./transform.js\").Transform}\r\n     */\r\n    this.coordinateToPixelTransform_ = createTransform();\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"./transform.js\").Transform}\r\n     */\r\n    this.pixelToCoordinateTransform_ = createTransform();\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.frameIndex_ = 0;\r\n\r\n    /**\r\n     * @private\r\n     * @type {?FrameState}\r\n     */\r\n    this.frameState_ = null;\r\n\r\n    /**\r\n     * The extent at the previous 'moveend' event.\r\n     * @private\r\n     * @type {import(\"./extent.js\").Extent}\r\n     */\r\n    this.previousExtent_ = null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {?import(\"./events.js\").EventsKey}\r\n     */\r\n    this.viewPropertyListenerKey_ = null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {?import(\"./events.js\").EventsKey}\r\n     */\r\n    this.viewChangeListenerKey_ = null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {?Array<import(\"./events.js\").EventsKey>}\r\n     */\r\n    this.layerGroupPropertyListenerKeys_ = null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {!HTMLElement}\r\n     */\r\n    this.viewport_ = document.createElement('div');\r\n    this.viewport_.className =\r\n      'ol-viewport' + ('ontouchstart' in window ? ' ol-touch' : '');\r\n    this.viewport_.style.position = 'relative';\r\n    this.viewport_.style.overflow = 'hidden';\r\n    this.viewport_.style.width = '100%';\r\n    this.viewport_.style.height = '100%';\r\n\r\n    /**\r\n     * @private\r\n     * @type {!HTMLElement}\r\n     */\r\n    this.overlayContainer_ = document.createElement('div');\r\n    this.overlayContainer_.style.position = 'absolute';\r\n    this.overlayContainer_.style.zIndex = '0';\r\n    this.overlayContainer_.style.width = '100%';\r\n    this.overlayContainer_.style.height = '100%';\r\n    this.overlayContainer_.style.pointerEvents = 'none';\r\n    this.overlayContainer_.className = 'ol-overlaycontainer';\r\n    this.viewport_.appendChild(this.overlayContainer_);\r\n\r\n    /**\r\n     * @private\r\n     * @type {!HTMLElement}\r\n     */\r\n    this.overlayContainerStopEvent_ = document.createElement('div');\r\n    this.overlayContainerStopEvent_.style.position = 'absolute';\r\n    this.overlayContainerStopEvent_.style.zIndex = '0';\r\n    this.overlayContainerStopEvent_.style.width = '100%';\r\n    this.overlayContainerStopEvent_.style.height = '100%';\r\n    this.overlayContainerStopEvent_.style.pointerEvents = 'none';\r\n    this.overlayContainerStopEvent_.className = 'ol-overlaycontainer-stopevent';\r\n    this.viewport_.appendChild(this.overlayContainerStopEvent_);\r\n\r\n    /**\r\n     * @private\r\n     * @type {MapBrowserEventHandler}\r\n     */\r\n    this.mapBrowserEventHandler_ = null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.moveTolerance_ = options.moveTolerance;\r\n\r\n    /**\r\n     * @private\r\n     * @type {HTMLElement|Document}\r\n     */\r\n    this.keyboardEventTarget_ = optionsInternal.keyboardEventTarget;\r\n\r\n    /**\r\n     * @private\r\n     * @type {?Array<import(\"./events.js\").EventsKey>}\r\n     */\r\n    this.targetChangeHandlerKeys_ = null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {HTMLElement|null}\r\n     */\r\n    this.targetElement_ = null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {ResizeObserver}\r\n     */\r\n    this.resizeObserver_ = new ResizeObserver(() => this.updateSize());\r\n\r\n    /**\r\n     * @type {Collection<import(\"./control/Control.js\").default>}\r\n     * @protected\r\n     */\r\n    this.controls = optionsInternal.controls || defaultControls();\r\n\r\n    /**\r\n     * @type {Collection<import(\"./interaction/Interaction.js\").default>}\r\n     * @protected\r\n     */\r\n    this.interactions =\r\n      optionsInternal.interactions ||\r\n      defaultInteractions({\r\n        onFocusOnly: true,\r\n      });\r\n\r\n    /**\r\n     * @type {Collection<import(\"./Overlay.js\").default>}\r\n     * @private\r\n     */\r\n    this.overlays_ = optionsInternal.overlays;\r\n\r\n    /**\r\n     * A lookup of overlays by id.\r\n     * @private\r\n     * @type {Object<string, import(\"./Overlay.js\").default>}\r\n     */\r\n    this.overlayIdIndex_ = {};\r\n\r\n    /**\r\n     * @type {import(\"./renderer/Map.js\").default|null}\r\n     * @private\r\n     */\r\n    this.renderer_ = null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {!Array<PostRenderFunction>}\r\n     */\r\n    this.postRenderFunctions_ = [];\r\n\r\n    /**\r\n     * @private\r\n     * @type {TileQueue}\r\n     */\r\n    this.tileQueue_ = new TileQueue(\r\n      this.getTilePriority.bind(this),\r\n      this.handleTileChange_.bind(this),\r\n    );\r\n\r\n    this.addChangeListener(\r\n      MapProperty.LAYERGROUP,\r\n      this.handleLayerGroupChanged_,\r\n    );\r\n    this.addChangeListener(MapProperty.VIEW, this.handleViewChanged_);\r\n    this.addChangeListener(MapProperty.SIZE, this.handleSizeChanged_);\r\n    this.addChangeListener(MapProperty.TARGET, this.handleTargetChanged_);\r\n\r\n    // setProperties will trigger the rendering of the map if the map\r\n    // is \"defined\" already.\r\n    this.setProperties(optionsInternal.values);\r\n\r\n    const map = this;\r\n    if (options.view && !(options.view instanceof View)) {\r\n      options.view.then(function (viewOptions) {\r\n        map.setView(new View(viewOptions));\r\n      });\r\n    }\r\n\r\n    this.controls.addEventListener(\r\n      CollectionEventType.ADD,\r\n      /**\r\n       * @param {import(\"./Collection.js\").CollectionEvent<import(\"./control/Control.js\").default>} event CollectionEvent\r\n       */\r\n      (event) => {\r\n        event.element.setMap(this);\r\n      },\r\n    );\r\n\r\n    this.controls.addEventListener(\r\n      CollectionEventType.REMOVE,\r\n      /**\r\n       * @param {import(\"./Collection.js\").CollectionEvent<import(\"./control/Control.js\").default>} event CollectionEvent.\r\n       */\r\n      (event) => {\r\n        event.element.setMap(null);\r\n      },\r\n    );\r\n\r\n    this.interactions.addEventListener(\r\n      CollectionEventType.ADD,\r\n      /**\r\n       * @param {import(\"./Collection.js\").CollectionEvent<import(\"./interaction/Interaction.js\").default>} event CollectionEvent.\r\n       */\r\n      (event) => {\r\n        event.element.setMap(this);\r\n      },\r\n    );\r\n\r\n    this.interactions.addEventListener(\r\n      CollectionEventType.REMOVE,\r\n      /**\r\n       * @param {import(\"./Collection.js\").CollectionEvent<import(\"./interaction/Interaction.js\").default>} event CollectionEvent.\r\n       */\r\n      (event) => {\r\n        event.element.setMap(null);\r\n      },\r\n    );\r\n\r\n    this.overlays_.addEventListener(\r\n      CollectionEventType.ADD,\r\n      /**\r\n       * @param {import(\"./Collection.js\").CollectionEvent<import(\"./Overlay.js\").default>} event CollectionEvent.\r\n       */\r\n      (event) => {\r\n        this.addOverlayInternal_(event.element);\r\n      },\r\n    );\r\n\r\n    this.overlays_.addEventListener(\r\n      CollectionEventType.REMOVE,\r\n      /**\r\n       * @param {import(\"./Collection.js\").CollectionEvent<import(\"./Overlay.js\").default>} event CollectionEvent.\r\n       */\r\n      (event) => {\r\n        const id = event.element.getId();\r\n        if (id !== undefined) {\r\n          delete this.overlayIdIndex_[id.toString()];\r\n        }\r\n        event.element.setMap(null);\r\n      },\r\n    );\r\n\r\n    this.controls.forEach(\r\n      /**\r\n       * @param {import(\"./control/Control.js\").default} control Control.\r\n       */\r\n      (control) => {\r\n        control.setMap(this);\r\n      },\r\n    );\r\n\r\n    this.interactions.forEach(\r\n      /**\r\n       * @param {import(\"./interaction/Interaction.js\").default} interaction Interaction.\r\n       */\r\n      (interaction) => {\r\n        interaction.setMap(this);\r\n      },\r\n    );\r\n\r\n    this.overlays_.forEach(this.addOverlayInternal_.bind(this));\r\n  }\r\n\r\n  /**\r\n   * Add the given control to the map.\r\n   * @param {import(\"./control/Control.js\").default} control Control.\r\n   * @api\r\n   */\r\n  addControl(control) {\r\n    this.getControls().push(control);\r\n  }\r\n\r\n  /**\r\n   * Add the given interaction to the map. If you want to add an interaction\r\n   * at another point of the collection use `getInteractions()` and the methods\r\n   * available on {@link module:ol/Collection~Collection}. This can be used to\r\n   * stop the event propagation from the handleEvent function. The interactions\r\n   * get to handle the events in the reverse order of this collection.\r\n   * @param {import(\"./interaction/Interaction.js\").default} interaction Interaction to add.\r\n   * @api\r\n   */\r\n  addInteraction(interaction) {\r\n    this.getInteractions().push(interaction);\r\n  }\r\n\r\n  /**\r\n   * Adds the given layer to the top of this map. If you want to add a layer\r\n   * elsewhere in the stack, use `getLayers()` and the methods available on\r\n   * {@link module:ol/Collection~Collection}.\r\n   * @param {import(\"./layer/Base.js\").default} layer Layer.\r\n   * @api\r\n   */\r\n  addLayer(layer) {\r\n    const layers = this.getLayerGroup().getLayers();\r\n    layers.push(layer);\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"./layer/Group.js\").GroupEvent} event The layer add event.\r\n   * @private\r\n   */\r\n  handleLayerAdd_(event) {\r\n    setLayerMapProperty(event.layer, this);\r\n  }\r\n\r\n  /**\r\n   * Add the given overlay to the map.\r\n   * @param {import(\"./Overlay.js\").default} overlay Overlay.\r\n   * @api\r\n   */\r\n  addOverlay(overlay) {\r\n    this.getOverlays().push(overlay);\r\n  }\r\n\r\n  /**\r\n   * This deals with map's overlay collection changes.\r\n   * @param {import(\"./Overlay.js\").default} overlay Overlay.\r\n   * @private\r\n   */\r\n  addOverlayInternal_(overlay) {\r\n    const id = overlay.getId();\r\n    if (id !== undefined) {\r\n      this.overlayIdIndex_[id.toString()] = overlay;\r\n    }\r\n    overlay.setMap(this);\r\n  }\r\n\r\n  /**\r\n   *\r\n   * Clean up.\r\n   * @override\r\n   */\r\n  disposeInternal() {\r\n    this.controls.clear();\r\n    this.interactions.clear();\r\n    this.overlays_.clear();\r\n    this.resizeObserver_.disconnect();\r\n    this.setTarget(null);\r\n    super.disposeInternal();\r\n  }\r\n\r\n  /**\r\n   * Detect features that intersect a pixel on the viewport, and execute a\r\n   * callback with each intersecting feature. Layers included in the detection can\r\n   * be configured through the `layerFilter` option in `options`.\r\n   * For polygons without a fill, only the stroke will be used for hit detection.\r\n   * Polygons must have a fill style applied to ensure that pixels inside a polygon are detected.\r\n   * The fill can be transparent.\r\n   * @param {import(\"./pixel.js\").Pixel} pixel Pixel.\r\n   * @param {function(import(\"./Feature.js\").FeatureLike, import(\"./layer/Layer.js\").default<import(\"./source/Source\").default>, import(\"./geom/SimpleGeometry.js\").default): T} callback Feature callback. The callback will be\r\n   *     called with two arguments. The first argument is one\r\n   *     {@link module:ol/Feature~Feature feature} or\r\n   *     {@link module:ol/render/Feature~RenderFeature render feature} at the pixel, the second is\r\n   *     the {@link module:ol/layer/Layer~Layer layer} of the feature and will be null for\r\n   *     unmanaged layers. To stop detection, callback functions can return a\r\n   *     truthy value.\r\n   * @param {AtPixelOptions} [options] Optional options.\r\n   * @return {T|undefined} Callback result, i.e. the return value of last\r\n   * callback execution, or the first truthy callback return value.\r\n   * @template T\r\n   * @api\r\n   */\r\n  forEachFeatureAtPixel(pixel, callback, options) {\r\n    if (!this.frameState_ || !this.renderer_) {\r\n      return;\r\n    }\r\n    const coordinate = this.getCoordinateFromPixelInternal(pixel);\r\n    options = options !== undefined ? options : {};\r\n    const hitTolerance =\r\n      options.hitTolerance !== undefined ? options.hitTolerance : 0;\r\n    const layerFilter =\r\n      options.layerFilter !== undefined ? options.layerFilter : TRUE;\r\n    const checkWrapped = options.checkWrapped !== false;\r\n    return this.renderer_.forEachFeatureAtCoordinate(\r\n      coordinate,\r\n      this.frameState_,\r\n      hitTolerance,\r\n      checkWrapped,\r\n      callback,\r\n      null,\r\n      layerFilter,\r\n      null,\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Get all features that intersect a pixel on the viewport.\r\n   * For polygons without a fill, only the stroke will be used for hit detection.\r\n   * Polygons must have a fill style applied to ensure that pixels inside a polygon are detected.\r\n   * The fill can be transparent.\r\n   * @param {import(\"./pixel.js\").Pixel} pixel Pixel.\r\n   * @param {AtPixelOptions} [options] Optional options.\r\n   * @return {Array<import(\"./Feature.js\").FeatureLike>} The detected features or\r\n   * an empty array if none were found.\r\n   * @api\r\n   */\r\n  getFeaturesAtPixel(pixel, options) {\r\n    const features = [];\r\n    this.forEachFeatureAtPixel(\r\n      pixel,\r\n      function (feature) {\r\n        features.push(feature);\r\n      },\r\n      options,\r\n    );\r\n    return features;\r\n  }\r\n\r\n  /**\r\n   * Get all layers from all layer groups.\r\n   * @return {Array<import(\"./layer/Layer.js\").default>} Layers.\r\n   * @api\r\n   */\r\n  getAllLayers() {\r\n    const layers = [];\r\n    function addLayersFrom(layerGroup) {\r\n      layerGroup.forEach(function (layer) {\r\n        if (layer instanceof LayerGroup) {\r\n          addLayersFrom(layer.getLayers());\r\n        } else {\r\n          layers.push(layer);\r\n        }\r\n      });\r\n    }\r\n    addLayersFrom(this.getLayers());\r\n    return layers;\r\n  }\r\n\r\n  /**\r\n   * Detect if features intersect a pixel on the viewport. Layers included in the\r\n   * detection can be configured through the `layerFilter` option.\r\n   * For polygons without a fill, only the stroke will be used for hit detection.\r\n   * Polygons must have a fill style applied to ensure that pixels inside a polygon are detected.\r\n   * The fill can be transparent.\r\n   * @param {import(\"./pixel.js\").Pixel} pixel Pixel.\r\n   * @param {AtPixelOptions} [options] Optional options.\r\n   * @return {boolean} Is there a feature at the given pixel?\r\n   * @api\r\n   */\r\n  hasFeatureAtPixel(pixel, options) {\r\n    if (!this.frameState_ || !this.renderer_) {\r\n      return false;\r\n    }\r\n    const coordinate = this.getCoordinateFromPixelInternal(pixel);\r\n    options = options !== undefined ? options : {};\r\n    const layerFilter =\r\n      options.layerFilter !== undefined ? options.layerFilter : TRUE;\r\n    const hitTolerance =\r\n      options.hitTolerance !== undefined ? options.hitTolerance : 0;\r\n    const checkWrapped = options.checkWrapped !== false;\r\n    return this.renderer_.hasFeatureAtCoordinate(\r\n      coordinate,\r\n      this.frameState_,\r\n      hitTolerance,\r\n      checkWrapped,\r\n      layerFilter,\r\n      null,\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Returns the coordinate in user projection for a browser event.\r\n   * @param {MouseEvent} event Event.\r\n   * @return {import(\"./coordinate.js\").Coordinate} Coordinate.\r\n   * @api\r\n   */\r\n  getEventCoordinate(event) {\r\n    return this.getCoordinateFromPixel(this.getEventPixel(event));\r\n  }\r\n\r\n  /**\r\n   * Returns the coordinate in view projection for a browser event.\r\n   * @param {MouseEvent} event Event.\r\n   * @return {import(\"./coordinate.js\").Coordinate} Coordinate.\r\n   */\r\n  getEventCoordinateInternal(event) {\r\n    return this.getCoordinateFromPixelInternal(this.getEventPixel(event));\r\n  }\r\n\r\n  /**\r\n   * Returns the map pixel position for a browser event relative to the viewport.\r\n   * @param {UIEvent|{clientX: number, clientY: number}} event Event.\r\n   * @return {import(\"./pixel.js\").Pixel} Pixel.\r\n   * @api\r\n   */\r\n  getEventPixel(event) {\r\n    const viewport = this.viewport_;\r\n    const viewportPosition = viewport.getBoundingClientRect();\r\n    const viewportSize = this.getSize();\r\n    const scaleX = viewportPosition.width / viewportSize[0];\r\n    const scaleY = viewportPosition.height / viewportSize[1];\r\n    const eventPosition =\r\n      //FIXME Are we really calling this with a TouchEvent anywhere?\r\n      'changedTouches' in event\r\n        ? /** @type {TouchEvent} */ (event).changedTouches[0]\r\n        : /** @type {MouseEvent} */ (event);\r\n\r\n    return [\r\n      (eventPosition.clientX - viewportPosition.left) / scaleX,\r\n      (eventPosition.clientY - viewportPosition.top) / scaleY,\r\n    ];\r\n  }\r\n\r\n  /**\r\n   * Get the target in which this map is rendered.\r\n   * Note that this returns what is entered as an option or in setTarget:\r\n   * if that was an element, it returns an element; if a string, it returns that.\r\n   * @return {HTMLElement|string|undefined} The Element or id of the Element that the\r\n   *     map is rendered in.\r\n   * @observable\r\n   * @api\r\n   */\r\n  getTarget() {\r\n    return /** @type {HTMLElement|string|undefined} */ (\r\n      this.get(MapProperty.TARGET)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Get the DOM element into which this map is rendered. In contrast to\r\n   * `getTarget` this method always return an `Element`, or `null` if the\r\n   * map has no target.\r\n   * @return {HTMLElement} The element that the map is rendered in.\r\n   * @api\r\n   */\r\n  getTargetElement() {\r\n    return this.targetElement_;\r\n  }\r\n\r\n  /**\r\n   * Get the coordinate for a given pixel.  This returns a coordinate in the\r\n   * user projection.\r\n   * @param {import(\"./pixel.js\").Pixel} pixel Pixel position in the map viewport.\r\n   * @return {import(\"./coordinate.js\").Coordinate} The coordinate for the pixel position.\r\n   * @api\r\n   */\r\n  getCoordinateFromPixel(pixel) {\r\n    return toUserCoordinate(\r\n      this.getCoordinateFromPixelInternal(pixel),\r\n      this.getView().getProjection(),\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Get the coordinate for a given pixel.  This returns a coordinate in the\r\n   * map view projection.\r\n   * @param {import(\"./pixel.js\").Pixel} pixel Pixel position in the map viewport.\r\n   * @return {import(\"./coordinate.js\").Coordinate} The coordinate for the pixel position.\r\n   */\r\n  getCoordinateFromPixelInternal(pixel) {\r\n    const frameState = this.frameState_;\r\n    if (!frameState) {\r\n      return null;\r\n    }\r\n    return applyTransform(frameState.pixelToCoordinateTransform, pixel.slice());\r\n  }\r\n\r\n  /**\r\n   * Get the map controls. Modifying this collection changes the controls\r\n   * associated with the map.\r\n   * @return {Collection<import(\"./control/Control.js\").default>} Controls.\r\n   * @api\r\n   */\r\n  getControls() {\r\n    return this.controls;\r\n  }\r\n\r\n  /**\r\n   * Get the map overlays. Modifying this collection changes the overlays\r\n   * associated with the map.\r\n   * @return {Collection<import(\"./Overlay.js\").default>} Overlays.\r\n   * @api\r\n   */\r\n  getOverlays() {\r\n    return this.overlays_;\r\n  }\r\n\r\n  /**\r\n   * Get an overlay by its identifier (the value returned by overlay.getId()).\r\n   * Note that the index treats string and numeric identifiers as the same. So\r\n   * `map.getOverlayById(2)` will return an overlay with id `'2'` or `2`.\r\n   * @param {string|number} id Overlay identifier.\r\n   * @return {import(\"./Overlay.js\").default|null} Overlay.\r\n   * @api\r\n   */\r\n  getOverlayById(id) {\r\n    const overlay = this.overlayIdIndex_[id.toString()];\r\n    return overlay !== undefined ? overlay : null;\r\n  }\r\n\r\n  /**\r\n   * Get the map interactions. Modifying this collection changes the interactions\r\n   * associated with the map.\r\n   *\r\n   * Interactions are used for e.g. pan, zoom and rotate.\r\n   * @return {Collection<import(\"./interaction/Interaction.js\").default>} Interactions.\r\n   * @api\r\n   */\r\n  getInteractions() {\r\n    return this.interactions;\r\n  }\r\n\r\n  /**\r\n   * Get the layergroup associated with this map.\r\n   * @return {LayerGroup} A layer group containing the layers in this map.\r\n   * @observable\r\n   * @api\r\n   */\r\n  getLayerGroup() {\r\n    return /** @type {LayerGroup} */ (this.get(MapProperty.LAYERGROUP));\r\n  }\r\n\r\n  /**\r\n   * Clear any existing layers and add layers to the map.\r\n   * @param {Array<import(\"./layer/Base.js\").default>|Collection<import(\"./layer/Base.js\").default>} layers The layers to be added to the map.\r\n   * @api\r\n   */\r\n  setLayers(layers) {\r\n    const group = this.getLayerGroup();\r\n    if (layers instanceof Collection) {\r\n      group.setLayers(layers);\r\n      return;\r\n    }\r\n\r\n    const collection = group.getLayers();\r\n    collection.clear();\r\n    collection.extend(layers);\r\n  }\r\n\r\n  /**\r\n   * Get the collection of layers associated with this map.\r\n   * @return {!Collection<import(\"./layer/Base.js\").default>} Layers.\r\n   * @api\r\n   */\r\n  getLayers() {\r\n    const layers = this.getLayerGroup().getLayers();\r\n    return layers;\r\n  }\r\n\r\n  /**\r\n   * @return {boolean} Layers have sources that are still loading.\r\n   */\r\n  getLoadingOrNotReady() {\r\n    const layerStatesArray = this.getLayerGroup().getLayerStatesArray();\r\n    for (let i = 0, ii = layerStatesArray.length; i < ii; ++i) {\r\n      const state = layerStatesArray[i];\r\n      if (!state.visible) {\r\n        continue;\r\n      }\r\n      const renderer = state.layer.getRenderer();\r\n      if (renderer && !renderer.ready) {\r\n        return true;\r\n      }\r\n      const source = state.layer.getSource();\r\n      if (source && source.loading) {\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Get the pixel for a coordinate.  This takes a coordinate in the user\r\n   * projection and returns the corresponding pixel.\r\n   * @param {import(\"./coordinate.js\").Coordinate} coordinate A map coordinate.\r\n   * @return {import(\"./pixel.js\").Pixel} A pixel position in the map viewport.\r\n   * @api\r\n   */\r\n  getPixelFromCoordinate(coordinate) {\r\n    const viewCoordinate = fromUserCoordinate(\r\n      coordinate,\r\n      this.getView().getProjection(),\r\n    );\r\n    return this.getPixelFromCoordinateInternal(viewCoordinate);\r\n  }\r\n\r\n  /**\r\n   * Get the pixel for a coordinate.  This takes a coordinate in the map view\r\n   * projection and returns the corresponding pixel.\r\n   * @param {import(\"./coordinate.js\").Coordinate} coordinate A map coordinate.\r\n   * @return {import(\"./pixel.js\").Pixel} A pixel position in the map viewport.\r\n   */\r\n  getPixelFromCoordinateInternal(coordinate) {\r\n    const frameState = this.frameState_;\r\n    if (!frameState) {\r\n      return null;\r\n    }\r\n    return applyTransform(\r\n      frameState.coordinateToPixelTransform,\r\n      coordinate.slice(0, 2),\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Get the map renderer.\r\n   * @return {import(\"./renderer/Map.js\").default|null} Renderer\r\n   */\r\n  getRenderer() {\r\n    return this.renderer_;\r\n  }\r\n\r\n  /**\r\n   * Get the size of this map.\r\n   * @return {import(\"./size.js\").Size|undefined} The size in pixels of the map in the DOM.\r\n   * @observable\r\n   * @api\r\n   */\r\n  getSize() {\r\n    return /** @type {import(\"./size.js\").Size|undefined} */ (\r\n      this.get(MapProperty.SIZE)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Get the view associated with this map. A view manages properties such as\r\n   * center and resolution.\r\n   * @return {View} The view that controls this map.\r\n   * @observable\r\n   * @api\r\n   */\r\n  getView() {\r\n    return /** @type {View} */ (this.get(MapProperty.VIEW));\r\n  }\r\n\r\n  /**\r\n   * Get the element that serves as the map viewport.\r\n   * @return {HTMLElement} Viewport.\r\n   * @api\r\n   */\r\n  getViewport() {\r\n    return this.viewport_;\r\n  }\r\n\r\n  /**\r\n   * Get the element that serves as the container for overlays.  Elements added to\r\n   * this container will let mousedown and touchstart events through to the map,\r\n   * so clicks and gestures on an overlay will trigger {@link module:ol/MapBrowserEvent~MapBrowserEvent}\r\n   * events.\r\n   * @return {!HTMLElement} The map's overlay container.\r\n   */\r\n  getOverlayContainer() {\r\n    return this.overlayContainer_;\r\n  }\r\n\r\n  /**\r\n   * Get the element that serves as a container for overlays that don't allow\r\n   * event propagation. Elements added to this container won't let mousedown and\r\n   * touchstart events through to the map, so clicks and gestures on an overlay\r\n   * don't trigger any {@link module:ol/MapBrowserEvent~MapBrowserEvent}.\r\n   * @return {!HTMLElement} The map's overlay container that stops events.\r\n   */\r\n  getOverlayContainerStopEvent() {\r\n    return this.overlayContainerStopEvent_;\r\n  }\r\n\r\n  /**\r\n   * @return {!Document} The document where the map is displayed.\r\n   */\r\n  getOwnerDocument() {\r\n    const targetElement = this.getTargetElement();\r\n    return targetElement ? targetElement.ownerDocument : document;\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"./Tile.js\").default} tile Tile.\r\n   * @param {string} tileSourceKey Tile source key.\r\n   * @param {import(\"./coordinate.js\").Coordinate} tileCenter Tile center.\r\n   * @param {number} tileResolution Tile resolution.\r\n   * @return {number} Tile priority.\r\n   */\r\n  getTilePriority(tile, tileSourceKey, tileCenter, tileResolution) {\r\n    return getTilePriority(\r\n      this.frameState_,\r\n      tile,\r\n      tileSourceKey,\r\n      tileCenter,\r\n      tileResolution,\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @param {PointerEvent|KeyboardEvent|WheelEvent} browserEvent Browser event.\r\n   * @param {string} [type] Type.\r\n   */\r\n  handleBrowserEvent(browserEvent, type) {\r\n    type = type || browserEvent.type;\r\n    const mapBrowserEvent = new MapBrowserEvent(type, this, browserEvent);\r\n    this.handleMapBrowserEvent(mapBrowserEvent);\r\n  }\r\n\r\n  /**\r\n   * @param {MapBrowserEvent} mapBrowserEvent The event to handle.\r\n   */\r\n  handleMapBrowserEvent(mapBrowserEvent) {\r\n    if (!this.frameState_) {\r\n      // With no view defined, we cannot translate pixels into geographical\r\n      // coordinates so interactions cannot be used.\r\n      return;\r\n    }\r\n    const originalEvent = mapBrowserEvent.originalEvent;\r\n    const eventType = originalEvent.type;\r\n    if (\r\n      eventType === PointerEventType.POINTERDOWN ||\r\n      eventType === EventType.WHEEL ||\r\n      eventType === EventType.KEYDOWN\r\n    ) {\r\n      const doc = this.getOwnerDocument();\r\n      const rootNode = this.viewport_.getRootNode\r\n        ? this.viewport_.getRootNode()\r\n        : doc;\r\n      const target = /** @type {Node} */ (originalEvent.target);\r\n\r\n      const currentDoc =\r\n        rootNode instanceof ShadowRoot\r\n          ? rootNode.host === target\r\n            ? rootNode.host.ownerDocument\r\n            : rootNode\r\n          : rootNode === doc\r\n            ? doc.documentElement\r\n            : rootNode;\r\n      if (\r\n        // Abort if the target is a child of the container for elements whose events are not meant\r\n        // to be handled by map interactions.\r\n        this.overlayContainerStopEvent_.contains(target) ||\r\n        // Abort if the event target is a child of the container that is no longer in the page.\r\n        // It's possible for the target to no longer be in the page if it has been removed in an\r\n        // event listener, this might happen in a Control that recreates it's content based on\r\n        // user interaction either manually or via a render in something like https://reactjs.org/\r\n        !currentDoc.contains(target)\r\n      ) {\r\n        return;\r\n      }\r\n    }\r\n    mapBrowserEvent.frameState = this.frameState_;\r\n    if (this.dispatchEvent(mapBrowserEvent) !== false) {\r\n      const interactionsArray = this.getInteractions().getArray().slice();\r\n      for (let i = interactionsArray.length - 1; i >= 0; i--) {\r\n        const interaction = interactionsArray[i];\r\n        if (\r\n          interaction.getMap() !== this ||\r\n          !interaction.getActive() ||\r\n          !this.getTargetElement()\r\n        ) {\r\n          continue;\r\n        }\r\n        const cont = interaction.handleEvent(mapBrowserEvent);\r\n        if (!cont || mapBrowserEvent.propagationStopped) {\r\n          break;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @protected\r\n   */\r\n  handlePostRender() {\r\n    const frameState = this.frameState_;\r\n\r\n    // Manage the tile queue\r\n    // Image loads are expensive and a limited resource, so try to use them\r\n    // efficiently:\r\n    // * When the view is static we allow a large number of parallel tile loads\r\n    //   to complete the frame as quickly as possible.\r\n    // * When animating or interacting, image loads can cause janks, so we reduce\r\n    //   the maximum number of loads per frame and limit the number of parallel\r\n    //   tile loads to remain reactive to view changes and to reduce the chance of\r\n    //   loading tiles that will quickly disappear from view.\r\n    const tileQueue = this.tileQueue_;\r\n    if (!tileQueue.isEmpty()) {\r\n      let maxTotalLoading = this.maxTilesLoading_;\r\n      let maxNewLoads = maxTotalLoading;\r\n      if (frameState) {\r\n        const hints = frameState.viewHints;\r\n        if (hints[ViewHint.ANIMATING] || hints[ViewHint.INTERACTING]) {\r\n          const lowOnFrameBudget = Date.now() - frameState.time > 8;\r\n          maxTotalLoading = lowOnFrameBudget ? 0 : 8;\r\n          maxNewLoads = lowOnFrameBudget ? 0 : 2;\r\n        }\r\n      }\r\n      if (tileQueue.getTilesLoading() < maxTotalLoading) {\r\n        tileQueue.reprioritize(); // FIXME only call if view has changed\r\n        tileQueue.loadMoreTiles(maxTotalLoading, maxNewLoads);\r\n      }\r\n    }\r\n\r\n    if (frameState && this.renderer_ && !frameState.animate) {\r\n      if (this.renderComplete_) {\r\n        if (this.hasListener(RenderEventType.RENDERCOMPLETE)) {\r\n          this.renderer_.dispatchRenderEvent(\r\n            RenderEventType.RENDERCOMPLETE,\r\n            frameState,\r\n          );\r\n        }\r\n        if (this.loaded_ === false) {\r\n          this.loaded_ = true;\r\n          this.dispatchEvent(\r\n            new MapEvent(MapEventType.LOADEND, this, frameState),\r\n          );\r\n        }\r\n      } else if (this.loaded_ === true) {\r\n        this.loaded_ = false;\r\n        this.dispatchEvent(\r\n          new MapEvent(MapEventType.LOADSTART, this, frameState),\r\n        );\r\n      }\r\n    }\r\n\r\n    const postRenderFunctions = this.postRenderFunctions_;\r\n    if (frameState) {\r\n      for (let i = 0, ii = postRenderFunctions.length; i < ii; ++i) {\r\n        postRenderFunctions[i](this, frameState);\r\n      }\r\n    }\r\n    postRenderFunctions.length = 0;\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  handleSizeChanged_() {\r\n    if (this.getView() && !this.getView().getAnimating()) {\r\n      this.getView().resolveConstraints(0);\r\n    }\r\n\r\n    this.render();\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  handleTargetChanged_() {\r\n    if (this.mapBrowserEventHandler_) {\r\n      for (let i = 0, ii = this.targetChangeHandlerKeys_.length; i < ii; ++i) {\r\n        unlistenByKey(this.targetChangeHandlerKeys_[i]);\r\n      }\r\n      this.targetChangeHandlerKeys_ = null;\r\n      this.viewport_.removeEventListener(\r\n        EventType.CONTEXTMENU,\r\n        this.boundHandleBrowserEvent_,\r\n      );\r\n      this.viewport_.removeEventListener(\r\n        EventType.WHEEL,\r\n        this.boundHandleBrowserEvent_,\r\n      );\r\n      this.mapBrowserEventHandler_.dispose();\r\n      this.mapBrowserEventHandler_ = null;\r\n      this.viewport_.remove();\r\n    }\r\n\r\n    if (this.targetElement_) {\r\n      this.resizeObserver_.unobserve(this.targetElement_);\r\n      const rootNode = this.targetElement_.getRootNode();\r\n      if (rootNode instanceof ShadowRoot) {\r\n        this.resizeObserver_.unobserve(rootNode.host);\r\n      }\r\n      this.setSize(undefined);\r\n    }\r\n\r\n    // target may be undefined, null, a string or an Element.\r\n    // If it's a string we convert it to an Element before proceeding.\r\n    // If it's not now an Element we remove the viewport from the DOM.\r\n    // If it's an Element we append the viewport element to it.\r\n\r\n    const target = this.getTarget();\r\n    const targetElement =\r\n      typeof target === 'string' ? document.getElementById(target) : target;\r\n    this.targetElement_ = targetElement;\r\n    if (!targetElement) {\r\n      if (this.renderer_) {\r\n        clearTimeout(this.postRenderTimeoutHandle_);\r\n        this.postRenderTimeoutHandle_ = undefined;\r\n        this.postRenderFunctions_.length = 0;\r\n        this.renderer_.dispose();\r\n        this.renderer_ = null;\r\n      }\r\n      if (this.animationDelayKey_) {\r\n        cancelAnimationFrame(this.animationDelayKey_);\r\n        this.animationDelayKey_ = undefined;\r\n      }\r\n    } else {\r\n      targetElement.appendChild(this.viewport_);\r\n      if (!this.renderer_) {\r\n        this.renderer_ = new CompositeMapRenderer(this);\r\n      }\r\n\r\n      this.mapBrowserEventHandler_ = new MapBrowserEventHandler(\r\n        this,\r\n        this.moveTolerance_,\r\n      );\r\n      for (const key in MapBrowserEventType) {\r\n        this.mapBrowserEventHandler_.addEventListener(\r\n          MapBrowserEventType[key],\r\n          this.handleMapBrowserEvent.bind(this),\r\n        );\r\n      }\r\n      this.viewport_.addEventListener(\r\n        EventType.CONTEXTMENU,\r\n        this.boundHandleBrowserEvent_,\r\n        false,\r\n      );\r\n      this.viewport_.addEventListener(\r\n        EventType.WHEEL,\r\n        this.boundHandleBrowserEvent_,\r\n        PASSIVE_EVENT_LISTENERS ? {passive: false} : false,\r\n      );\r\n\r\n      let keyboardEventTarget;\r\n      if (!this.keyboardEventTarget_) {\r\n        // check if map target is in shadowDOM, if yes use host element as target\r\n        const targetRoot = targetElement.getRootNode();\r\n        const targetCandidate =\r\n          targetRoot instanceof ShadowRoot ? targetRoot.host : targetElement;\r\n        keyboardEventTarget = targetCandidate;\r\n      } else {\r\n        keyboardEventTarget = this.keyboardEventTarget_;\r\n      }\r\n\r\n      this.targetChangeHandlerKeys_ = [\r\n        listen(\r\n          keyboardEventTarget,\r\n          EventType.KEYDOWN,\r\n          this.handleBrowserEvent,\r\n          this,\r\n        ),\r\n        listen(\r\n          keyboardEventTarget,\r\n          EventType.KEYPRESS,\r\n          this.handleBrowserEvent,\r\n          this,\r\n        ),\r\n      ];\r\n      const rootNode = targetElement.getRootNode();\r\n      if (rootNode instanceof ShadowRoot) {\r\n        this.resizeObserver_.observe(rootNode.host);\r\n      }\r\n      this.resizeObserver_.observe(targetElement);\r\n    }\r\n\r\n    this.updateSize();\r\n    // updateSize calls setSize, so no need to call this.render\r\n    // ourselves here.\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  handleTileChange_() {\r\n    this.render();\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  handleViewPropertyChanged_() {\r\n    this.render();\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  handleViewChanged_() {\r\n    if (this.viewPropertyListenerKey_) {\r\n      unlistenByKey(this.viewPropertyListenerKey_);\r\n      this.viewPropertyListenerKey_ = null;\r\n    }\r\n    if (this.viewChangeListenerKey_) {\r\n      unlistenByKey(this.viewChangeListenerKey_);\r\n      this.viewChangeListenerKey_ = null;\r\n    }\r\n    const view = this.getView();\r\n    if (view) {\r\n      this.updateViewportSize_(this.getSize());\r\n\r\n      this.viewPropertyListenerKey_ = listen(\r\n        view,\r\n        ObjectEventType.PROPERTYCHANGE,\r\n        this.handleViewPropertyChanged_,\r\n        this,\r\n      );\r\n      this.viewChangeListenerKey_ = listen(\r\n        view,\r\n        EventType.CHANGE,\r\n        this.handleViewPropertyChanged_,\r\n        this,\r\n      );\r\n\r\n      view.resolveConstraints(0);\r\n    }\r\n    this.render();\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  handleLayerGroupChanged_() {\r\n    if (this.layerGroupPropertyListenerKeys_) {\r\n      this.layerGroupPropertyListenerKeys_.forEach(unlistenByKey);\r\n      this.layerGroupPropertyListenerKeys_ = null;\r\n    }\r\n    const layerGroup = this.getLayerGroup();\r\n    if (layerGroup) {\r\n      this.handleLayerAdd_(new GroupEvent('addlayer', layerGroup));\r\n      this.layerGroupPropertyListenerKeys_ = [\r\n        listen(layerGroup, ObjectEventType.PROPERTYCHANGE, this.render, this),\r\n        listen(layerGroup, EventType.CHANGE, this.render, this),\r\n        listen(layerGroup, 'addlayer', this.handleLayerAdd_, this),\r\n        listen(layerGroup, 'removelayer', this.handleLayerRemove_, this),\r\n      ];\r\n    }\r\n    this.render();\r\n  }\r\n\r\n  /**\r\n   * @return {boolean} Is rendered.\r\n   */\r\n  isRendered() {\r\n    return !!this.frameState_;\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  animationDelay_() {\r\n    this.animationDelayKey_ = undefined;\r\n    this.renderFrame_(Date.now());\r\n  }\r\n\r\n  /**\r\n   * Requests an immediate render in a synchronous manner.\r\n   * @api\r\n   */\r\n  renderSync() {\r\n    if (this.animationDelayKey_) {\r\n      cancelAnimationFrame(this.animationDelayKey_);\r\n    }\r\n    this.animationDelay_();\r\n  }\r\n\r\n  /**\r\n   * Redraws all text after new fonts have loaded\r\n   */\r\n  redrawText() {\r\n    const layerStates = this.getLayerGroup().getLayerStatesArray();\r\n    for (let i = 0, ii = layerStates.length; i < ii; ++i) {\r\n      const layer = layerStates[i].layer;\r\n      if (layer.hasRenderer()) {\r\n        layer.getRenderer().handleFontsChanged();\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Request a map rendering (at the next animation frame).\r\n   * @api\r\n   */\r\n  render() {\r\n    if (this.renderer_ && this.animationDelayKey_ === undefined) {\r\n      this.animationDelayKey_ = requestAnimationFrame(this.animationDelay_);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Remove the given control from the map.\r\n   * @param {import(\"./control/Control.js\").default} control Control.\r\n   * @return {import(\"./control/Control.js\").default|undefined} The removed control (or undefined\r\n   *     if the control was not found).\r\n   * @api\r\n   */\r\n  removeControl(control) {\r\n    return this.getControls().remove(control);\r\n  }\r\n\r\n  /**\r\n   * Remove the given interaction from the map.\r\n   * @param {import(\"./interaction/Interaction.js\").default} interaction Interaction to remove.\r\n   * @return {import(\"./interaction/Interaction.js\").default|undefined} The removed interaction (or\r\n   *     undefined if the interaction was not found).\r\n   * @api\r\n   */\r\n  removeInteraction(interaction) {\r\n    return this.getInteractions().remove(interaction);\r\n  }\r\n\r\n  /**\r\n   * Removes the given layer from the map.\r\n   * @param {import(\"./layer/Base.js\").default} layer Layer.\r\n   * @return {import(\"./layer/Base.js\").default|undefined} The removed layer (or undefined if the\r\n   *     layer was not found).\r\n   * @api\r\n   */\r\n  removeLayer(layer) {\r\n    const layers = this.getLayerGroup().getLayers();\r\n    return layers.remove(layer);\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"./layer/Group.js\").GroupEvent} event The layer remove event.\r\n   * @private\r\n   */\r\n  handleLayerRemove_(event) {\r\n    removeLayerMapProperty(event.layer);\r\n  }\r\n\r\n  /**\r\n   * Remove the given overlay from the map.\r\n   * @param {import(\"./Overlay.js\").default} overlay Overlay.\r\n   * @return {import(\"./Overlay.js\").default|undefined} The removed overlay (or undefined\r\n   *     if the overlay was not found).\r\n   * @api\r\n   */\r\n  removeOverlay(overlay) {\r\n    return this.getOverlays().remove(overlay);\r\n  }\r\n\r\n  /**\r\n   * @param {number} time Time.\r\n   * @private\r\n   */\r\n  renderFrame_(time) {\r\n    const size = this.getSize();\r\n    const view = this.getView();\r\n    const previousFrameState = this.frameState_;\r\n    /** @type {?FrameState} */\r\n    let frameState = null;\r\n    if (size !== undefined && hasArea(size) && view && view.isDef()) {\r\n      const viewHints = view.getHints(\r\n        this.frameState_ ? this.frameState_.viewHints : undefined,\r\n      );\r\n      const viewState = view.getState();\r\n      frameState = {\r\n        animate: false,\r\n        coordinateToPixelTransform: this.coordinateToPixelTransform_,\r\n        declutter: null,\r\n        extent: getForViewAndSize(\r\n          viewState.center,\r\n          viewState.resolution,\r\n          viewState.rotation,\r\n          size,\r\n        ),\r\n        index: this.frameIndex_++,\r\n        layerIndex: 0,\r\n        layerStatesArray: this.getLayerGroup().getLayerStatesArray(),\r\n        pixelRatio: this.pixelRatio_,\r\n        pixelToCoordinateTransform: this.pixelToCoordinateTransform_,\r\n        postRenderFunctions: [],\r\n        size: size,\r\n        tileQueue: this.tileQueue_,\r\n        time: time,\r\n        usedTiles: {},\r\n        viewState: viewState,\r\n        viewHints: viewHints,\r\n        wantedTiles: {},\r\n        mapId: getUid(this),\r\n        renderTargets: {},\r\n      };\r\n      if (viewState.nextCenter && viewState.nextResolution) {\r\n        const rotation = isNaN(viewState.nextRotation)\r\n          ? viewState.rotation\r\n          : viewState.nextRotation;\r\n\r\n        frameState.nextExtent = getForViewAndSize(\r\n          viewState.nextCenter,\r\n          viewState.nextResolution,\r\n          rotation,\r\n          size,\r\n        );\r\n      }\r\n    }\r\n\r\n    this.frameState_ = frameState;\r\n    this.renderer_.renderFrame(frameState);\r\n\r\n    if (frameState) {\r\n      if (frameState.animate) {\r\n        this.render();\r\n      }\r\n      Array.prototype.push.apply(\r\n        this.postRenderFunctions_,\r\n        frameState.postRenderFunctions,\r\n      );\r\n\r\n      if (previousFrameState) {\r\n        const moveStart =\r\n          !this.previousExtent_ ||\r\n          (!isEmpty(this.previousExtent_) &&\r\n            !equalsExtent(frameState.extent, this.previousExtent_));\r\n        if (moveStart) {\r\n          this.dispatchEvent(\r\n            new MapEvent(MapEventType.MOVESTART, this, previousFrameState),\r\n          );\r\n          this.previousExtent_ = createOrUpdateEmpty(this.previousExtent_);\r\n        }\r\n      }\r\n\r\n      const idle =\r\n        this.previousExtent_ &&\r\n        !frameState.viewHints[ViewHint.ANIMATING] &&\r\n        !frameState.viewHints[ViewHint.INTERACTING] &&\r\n        !equalsExtent(frameState.extent, this.previousExtent_);\r\n\r\n      if (idle) {\r\n        this.dispatchEvent(\r\n          new MapEvent(MapEventType.MOVEEND, this, frameState),\r\n        );\r\n        clone(frameState.extent, this.previousExtent_);\r\n      }\r\n    }\r\n\r\n    this.dispatchEvent(new MapEvent(MapEventType.POSTRENDER, this, frameState));\r\n\r\n    this.renderComplete_ =\r\n      (this.hasListener(MapEventType.LOADSTART) ||\r\n        this.hasListener(MapEventType.LOADEND) ||\r\n        this.hasListener(RenderEventType.RENDERCOMPLETE)) &&\r\n      !this.tileQueue_.getTilesLoading() &&\r\n      !this.tileQueue_.getCount() &&\r\n      !this.getLoadingOrNotReady();\r\n\r\n    if (!this.postRenderTimeoutHandle_) {\r\n      this.postRenderTimeoutHandle_ = setTimeout(() => {\r\n        this.postRenderTimeoutHandle_ = undefined;\r\n        this.handlePostRender();\r\n      }, 0);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Sets the layergroup of this map.\r\n   * @param {LayerGroup} layerGroup A layer group containing the layers in this map.\r\n   * @observable\r\n   * @api\r\n   */\r\n  setLayerGroup(layerGroup) {\r\n    const oldLayerGroup = this.getLayerGroup();\r\n    if (oldLayerGroup) {\r\n      this.handleLayerRemove_(new GroupEvent('removelayer', oldLayerGroup));\r\n    }\r\n    this.set(MapProperty.LAYERGROUP, layerGroup);\r\n  }\r\n\r\n  /**\r\n   * Set the size of this map.\r\n   * @param {import(\"./size.js\").Size|undefined} size The size in pixels of the map in the DOM.\r\n   * @observable\r\n   * @api\r\n   */\r\n  setSize(size) {\r\n    this.set(MapProperty.SIZE, size);\r\n  }\r\n\r\n  /**\r\n   * Set the target element to render this map into.\r\n   * For accessibility (focus and keyboard events for map navigation), the `target` element must have a\r\n   *  properly configured `tabindex` attribute. If the `target` element is inside a Shadow DOM, the\r\n   *  `tabindex` atribute must be set on the custom element's host element.\r\n   * @param {HTMLElement|string} [target] The Element or id of the Element\r\n   *     that the map is rendered in.\r\n   * @observable\r\n   * @api\r\n   */\r\n  setTarget(target) {\r\n    this.set(MapProperty.TARGET, target);\r\n  }\r\n\r\n  /**\r\n   * Set the view for this map.\r\n   * @param {View|Promise<import(\"./View.js\").ViewOptions>|null} view The view that controls this map.\r\n   * It is also possible to pass a promise that resolves to options for constructing a view.  This\r\n   * alternative allows view properties to be resolved by sources or other components that load\r\n   * view-related metadata.\r\n   * @observable\r\n   * @api\r\n   */\r\n  setView(view) {\r\n    if (!view || view instanceof View) {\r\n      this.set(MapProperty.VIEW, view);\r\n      return;\r\n    }\r\n    this.set(MapProperty.VIEW, new View());\r\n\r\n    const map = this;\r\n    view.then(function (viewOptions) {\r\n      map.setView(new View(viewOptions));\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Force a recalculation of the map viewport size.  This should be called when\r\n   * third-party code changes the size of the map viewport.\r\n   * @api\r\n   */\r\n  updateSize() {\r\n    const targetElement = this.getTargetElement();\r\n\r\n    let size = undefined;\r\n    if (targetElement) {\r\n      const computedStyle = getComputedStyle(targetElement);\r\n      const width =\r\n        targetElement.offsetWidth -\r\n        parseFloat(computedStyle['borderLeftWidth']) -\r\n        parseFloat(computedStyle['paddingLeft']) -\r\n        parseFloat(computedStyle['paddingRight']) -\r\n        parseFloat(computedStyle['borderRightWidth']);\r\n      const height =\r\n        targetElement.offsetHeight -\r\n        parseFloat(computedStyle['borderTopWidth']) -\r\n        parseFloat(computedStyle['paddingTop']) -\r\n        parseFloat(computedStyle['paddingBottom']) -\r\n        parseFloat(computedStyle['borderBottomWidth']);\r\n      if (!isNaN(width) && !isNaN(height)) {\r\n        size = [Math.max(0, width), Math.max(0, height)];\r\n        if (\r\n          !hasArea(size) &&\r\n          !!(\r\n            targetElement.offsetWidth ||\r\n            targetElement.offsetHeight ||\r\n            targetElement.getClientRects().length\r\n          )\r\n        ) {\r\n          warn(\r\n            \"No map visible because the map container's width or height are 0.\",\r\n          );\r\n        }\r\n      }\r\n    }\r\n\r\n    const oldSize = this.getSize();\r\n    if (size && (!oldSize || !equals(size, oldSize))) {\r\n      this.setSize(size);\r\n      this.updateViewportSize_(size);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Recomputes the viewport size and save it on the view object (if any)\r\n   * @param {import(\"./size.js\").Size|undefined} size The size.\r\n   * @private\r\n   */\r\n  updateViewportSize_(size) {\r\n    const view = this.getView();\r\n    if (view) {\r\n      view.setViewportSize(size);\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * @param {MapOptions} options Map options.\r\n * @return {MapOptionsInternal} Internal map options.\r\n */\r\nfunction createOptionsInternal(options) {\r\n  /**\r\n   * @type {HTMLElement|Document}\r\n   */\r\n  let keyboardEventTarget = null;\r\n  if (options.keyboardEventTarget !== undefined) {\r\n    keyboardEventTarget =\r\n      typeof options.keyboardEventTarget === 'string'\r\n        ? document.getElementById(options.keyboardEventTarget)\r\n        : options.keyboardEventTarget;\r\n  }\r\n\r\n  /**\r\n   * @type {Object<string, *>}\r\n   */\r\n  const values = {};\r\n\r\n  const layerGroup =\r\n    options.layers &&\r\n    typeof (/** @type {?} */ (options.layers).getLayers) === 'function'\r\n      ? /** @type {LayerGroup} */ (options.layers)\r\n      : new LayerGroup({\r\n          layers:\r\n            /** @type {Collection<import(\"./layer/Base.js\").default>|Array<import(\"./layer/Base.js\").default>} */ (\r\n              options.layers\r\n            ),\r\n        });\r\n  values[MapProperty.LAYERGROUP] = layerGroup;\r\n\r\n  values[MapProperty.TARGET] = options.target;\r\n\r\n  values[MapProperty.VIEW] =\r\n    options.view instanceof View ? options.view : new View();\r\n\r\n  /** @type {Collection<import(\"./control/Control.js\").default>} */\r\n  let controls;\r\n  if (options.controls !== undefined) {\r\n    if (Array.isArray(options.controls)) {\r\n      controls = new Collection(options.controls.slice());\r\n    } else {\r\n      assert(\r\n        typeof (/** @type {?} */ (options.controls).getArray) === 'function',\r\n        'Expected `controls` to be an array or an `ol/Collection.js`',\r\n      );\r\n      controls = options.controls;\r\n    }\r\n  }\r\n\r\n  /** @type {Collection<import(\"./interaction/Interaction\").default>} */\r\n  let interactions;\r\n  if (options.interactions !== undefined) {\r\n    if (Array.isArray(options.interactions)) {\r\n      interactions = new Collection(options.interactions.slice());\r\n    } else {\r\n      assert(\r\n        typeof (/** @type {?} */ (options.interactions).getArray) ===\r\n          'function',\r\n        'Expected `interactions` to be an array or an `ol/Collection.js`',\r\n      );\r\n      interactions = options.interactions;\r\n    }\r\n  }\r\n\r\n  /** @type {Collection<import(\"./Overlay.js\").default>} */\r\n  let overlays;\r\n  if (options.overlays !== undefined) {\r\n    if (Array.isArray(options.overlays)) {\r\n      overlays = new Collection(options.overlays.slice());\r\n    } else {\r\n      assert(\r\n        typeof (/** @type {?} */ (options.overlays).getArray) === 'function',\r\n        'Expected `overlays` to be an array or an `ol/Collection.js`',\r\n      );\r\n      overlays = options.overlays;\r\n    }\r\n  } else {\r\n    overlays = new Collection();\r\n  }\r\n\r\n  return {\r\n    controls: controls,\r\n    interactions: interactions,\r\n    keyboardEventTarget: keyboardEventTarget,\r\n    overlays: overlays,\r\n    values: values,\r\n  };\r\n}\r\nexport default Map;\r\n","/**\r\n * @module ol/Collection\r\n */\r\nimport CollectionEventType from './CollectionEventType.js';\r\nimport BaseObject from './Object.js';\r\nimport Event from './events/Event.js';\r\n\r\n/**\r\n * @enum {string}\r\n * @private\r\n */\r\nconst Property = {\r\n  LENGTH: 'length',\r\n};\r\n\r\n/**\r\n * @classdesc\r\n * Events emitted by {@link module:ol/Collection~Collection} instances are instances of this\r\n * type.\r\n * @template T\r\n */\r\nexport class CollectionEvent extends Event {\r\n  /**\r\n   * @param {import(\"./CollectionEventType.js\").default} type Type.\r\n   * @param {T} element Element.\r\n   * @param {number} index The index of the added or removed element.\r\n   */\r\n  constructor(type, element, index) {\r\n    super(type);\r\n\r\n    /**\r\n     * The element that is added to or removed from the collection.\r\n     * @type {T}\r\n     * @api\r\n     */\r\n    this.element = element;\r\n\r\n    /**\r\n     * The index of the added or removed element.\r\n     * @type {number}\r\n     * @api\r\n     */\r\n    this.index = index;\r\n  }\r\n}\r\n\r\n/***\r\n * @template T\r\n * @template Return\r\n * @typedef {import(\"./Observable\").OnSignature<import(\"./Observable\").EventTypes, import(\"./events/Event.js\").default, Return> &\r\n *   import(\"./Observable\").OnSignature<import(\"./ObjectEventType\").Types|'change:length', import(\"./Object\").ObjectEvent, Return> &\r\n *   import(\"./Observable\").OnSignature<'add'|'remove', CollectionEvent<T>, Return> &\r\n *   import(\"./Observable\").CombinedOnSignature<import(\"./Observable\").EventTypes|import(\"./ObjectEventType\").Types|\r\n *     'change:length'|'add'|'remove',Return>} CollectionOnSignature\r\n */\r\n\r\n/**\r\n * @typedef {Object} Options\r\n * @property {boolean} [unique=false] Disallow the same item from being added to\r\n * the collection twice.\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * An expanded version of standard JS Array, adding convenience methods for\r\n * manipulation. Add and remove changes to the Collection trigger a Collection\r\n * event. Note that this does not cover changes to the objects _within_ the\r\n * Collection; they trigger events on the appropriate object, not on the\r\n * Collection as a whole.\r\n *\r\n * @fires CollectionEvent\r\n *\r\n * @template T\r\n * @api\r\n */\r\nclass Collection extends BaseObject {\r\n  /**\r\n   * @param {Array<T>} [array] Array.\r\n   * @param {Options} [options] Collection options.\r\n   */\r\n  constructor(array, options) {\r\n    super();\r\n\r\n    /***\r\n     * @type {CollectionOnSignature<T, import(\"./events\").EventsKey>}\r\n     */\r\n    this.on;\r\n\r\n    /***\r\n     * @type {CollectionOnSignature<T, import(\"./events\").EventsKey>}\r\n     */\r\n    this.once;\r\n\r\n    /***\r\n     * @type {CollectionOnSignature<T, void>}\r\n     */\r\n    this.un;\r\n\r\n    options = options || {};\r\n\r\n    /**\r\n     * @private\r\n     * @type {boolean}\r\n     */\r\n    this.unique_ = !!options.unique;\r\n\r\n    /**\r\n     * @private\r\n     * @type {!Array<T>}\r\n     */\r\n    this.array_ = array ? array : [];\r\n\r\n    if (this.unique_) {\r\n      for (let i = 0, ii = this.array_.length; i < ii; ++i) {\r\n        this.assertUnique_(this.array_[i], i);\r\n      }\r\n    }\r\n\r\n    this.updateLength_();\r\n  }\r\n\r\n  /**\r\n   * Remove all elements from the collection.\r\n   * @api\r\n   */\r\n  clear() {\r\n    while (this.getLength() > 0) {\r\n      this.pop();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Add elements to the collection.  This pushes each item in the provided array\r\n   * to the end of the collection.\r\n   * @param {!Array<T>} arr Array.\r\n   * @return {Collection<T>} This collection.\r\n   * @api\r\n   */\r\n  extend(arr) {\r\n    for (let i = 0, ii = arr.length; i < ii; ++i) {\r\n      this.push(arr[i]);\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Iterate over each element, calling the provided callback.\r\n   * @param {function(T, number, Array<T>): *} f The function to call\r\n   *     for every element. This function takes 3 arguments (the element, the\r\n   *     index and the array). The return value is ignored.\r\n   * @api\r\n   */\r\n  forEach(f) {\r\n    const array = this.array_;\r\n    for (let i = 0, ii = array.length; i < ii; ++i) {\r\n      f(array[i], i, array);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get a reference to the underlying Array object. Warning: if the array\r\n   * is mutated, no events will be dispatched by the collection, and the\r\n   * collection's \"length\" property won't be in sync with the actual length\r\n   * of the array.\r\n   * @return {!Array<T>} Array.\r\n   * @api\r\n   */\r\n  getArray() {\r\n    return this.array_;\r\n  }\r\n\r\n  /**\r\n   * Get the element at the provided index.\r\n   * @param {number} index Index.\r\n   * @return {T} Element.\r\n   * @api\r\n   */\r\n  item(index) {\r\n    return this.array_[index];\r\n  }\r\n\r\n  /**\r\n   * Get the length of this collection.\r\n   * @return {number} The length of the array.\r\n   * @observable\r\n   * @api\r\n   */\r\n  getLength() {\r\n    return this.get(Property.LENGTH);\r\n  }\r\n\r\n  /**\r\n   * Insert an element at the provided index.\r\n   * @param {number} index Index.\r\n   * @param {T} elem Element.\r\n   * @api\r\n   */\r\n  insertAt(index, elem) {\r\n    if (index < 0 || index > this.getLength()) {\r\n      throw new Error('Index out of bounds: ' + index);\r\n    }\r\n    if (this.unique_) {\r\n      this.assertUnique_(elem);\r\n    }\r\n    this.array_.splice(index, 0, elem);\r\n    this.updateLength_();\r\n    this.dispatchEvent(\r\n      new CollectionEvent(CollectionEventType.ADD, elem, index),\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Remove the last element of the collection and return it.\r\n   * Return `undefined` if the collection is empty.\r\n   * @return {T|undefined} Element.\r\n   * @api\r\n   */\r\n  pop() {\r\n    return this.removeAt(this.getLength() - 1);\r\n  }\r\n\r\n  /**\r\n   * Insert the provided element at the end of the collection.\r\n   * @param {T} elem Element.\r\n   * @return {number} New length of the collection.\r\n   * @api\r\n   */\r\n  push(elem) {\r\n    if (this.unique_) {\r\n      this.assertUnique_(elem);\r\n    }\r\n    const n = this.getLength();\r\n    this.insertAt(n, elem);\r\n    return this.getLength();\r\n  }\r\n\r\n  /**\r\n   * Remove the first occurrence of an element from the collection.\r\n   * @param {T} elem Element.\r\n   * @return {T|undefined} The removed element or undefined if none found.\r\n   * @api\r\n   */\r\n  remove(elem) {\r\n    const arr = this.array_;\r\n    for (let i = 0, ii = arr.length; i < ii; ++i) {\r\n      if (arr[i] === elem) {\r\n        return this.removeAt(i);\r\n      }\r\n    }\r\n    return undefined;\r\n  }\r\n\r\n  /**\r\n   * Remove the element at the provided index and return it.\r\n   * Return `undefined` if the collection does not contain this index.\r\n   * @param {number} index Index.\r\n   * @return {T|undefined} Value.\r\n   * @api\r\n   */\r\n  removeAt(index) {\r\n    if (index < 0 || index >= this.getLength()) {\r\n      return undefined;\r\n    }\r\n    const prev = this.array_[index];\r\n    this.array_.splice(index, 1);\r\n    this.updateLength_();\r\n    this.dispatchEvent(\r\n      /** @type {CollectionEvent<T>} */ (\r\n        new CollectionEvent(CollectionEventType.REMOVE, prev, index)\r\n      ),\r\n    );\r\n    return prev;\r\n  }\r\n\r\n  /**\r\n   * Set the element at the provided index.\r\n   * @param {number} index Index.\r\n   * @param {T} elem Element.\r\n   * @api\r\n   */\r\n  setAt(index, elem) {\r\n    const n = this.getLength();\r\n    if (index >= n) {\r\n      this.insertAt(index, elem);\r\n      return;\r\n    }\r\n    if (index < 0) {\r\n      throw new Error('Index out of bounds: ' + index);\r\n    }\r\n    if (this.unique_) {\r\n      this.assertUnique_(elem, index);\r\n    }\r\n    const prev = this.array_[index];\r\n    this.array_[index] = elem;\r\n    this.dispatchEvent(\r\n      /** @type {CollectionEvent<T>} */ (\r\n        new CollectionEvent(CollectionEventType.REMOVE, prev, index)\r\n      ),\r\n    );\r\n    this.dispatchEvent(\r\n      /** @type {CollectionEvent<T>} */ (\r\n        new CollectionEvent(CollectionEventType.ADD, elem, index)\r\n      ),\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  updateLength_() {\r\n    this.set(Property.LENGTH, this.array_.length);\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {T} elem Element.\r\n   * @param {number} [except] Optional index to ignore.\r\n   */\r\n  assertUnique_(elem, except) {\r\n    for (let i = 0, ii = this.array_.length; i < ii; ++i) {\r\n      if (this.array_[i] === elem && i !== except) {\r\n        throw new Error('Duplicate item added to a unique collection');\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport default Collection;\r\n","/**\r\n * @module ol/CollectionEventType\r\n */\r\n\r\n/**\r\n * @enum {string}\r\n */\r\nexport default {\r\n  /**\r\n   * Triggered when an item is added to the collection.\r\n   * @event module:ol/Collection.CollectionEvent#add\r\n   * @api\r\n   */\r\n  ADD: 'add',\r\n  /**\r\n   * Triggered when an item is removed from the collection.\r\n   * @event module:ol/Collection.CollectionEvent#remove\r\n   * @api\r\n   */\r\n  REMOVE: 'remove',\r\n};\r\n","/**\r\n * @module ol/MapBrowserEvent\r\n */\r\nimport MapEvent from './MapEvent.js';\r\n\r\n/**\r\n * @classdesc\r\n * Events emitted as map browser events are instances of this type.\r\n * See {@link module:ol/Map~Map} for which events trigger a map browser event.\r\n * @template {PointerEvent|KeyboardEvent|WheelEvent} [EVENT=PointerEvent|KeyboardEvent|WheelEvent]\r\n */\r\nclass MapBrowserEvent extends MapEvent {\r\n  /**\r\n   * @param {string} type Event type.\r\n   * @param {import(\"./Map.js\").default} map Map.\r\n   * @param {EVENT} originalEvent Original event.\r\n   * @param {boolean} [dragging] Is the map currently being dragged?\r\n   * @param {import(\"./Map.js\").FrameState} [frameState] Frame state.\r\n   * @param {Array<PointerEvent>} [activePointers] Active pointers.\r\n   */\r\n  constructor(type, map, originalEvent, dragging, frameState, activePointers) {\r\n    super(type, map, frameState);\r\n\r\n    /**\r\n     * The original browser event.\r\n     * @const\r\n     * @type {EVENT}\r\n     * @api\r\n     */\r\n    this.originalEvent = originalEvent;\r\n\r\n    /**\r\n     * The map pixel relative to the viewport corresponding to the original browser event.\r\n     * @type {?import(\"./pixel.js\").Pixel}\r\n     * @private\r\n     */\r\n    this.pixel_ = null;\r\n\r\n    /**\r\n     * The coordinate in the user projection corresponding to the original browser event.\r\n     * @type {?import(\"./coordinate.js\").Coordinate}\r\n     * @private\r\n     */\r\n    this.coordinate_ = null;\r\n\r\n    /**\r\n     * Indicates if the map is currently being dragged. Only set for\r\n     * `POINTERDRAG` and `POINTERMOVE` events. Default is `false`.\r\n     *\r\n     * @type {boolean}\r\n     * @api\r\n     */\r\n    this.dragging = dragging !== undefined ? dragging : false;\r\n\r\n    /**\r\n     * @type {Array<PointerEvent>|undefined}\r\n     */\r\n    this.activePointers = activePointers;\r\n  }\r\n\r\n  /**\r\n   * The map pixel relative to the viewport corresponding to the original event.\r\n   * @type {import(\"./pixel.js\").Pixel}\r\n   * @api\r\n   */\r\n  get pixel() {\r\n    if (!this.pixel_) {\r\n      this.pixel_ = this.map.getEventPixel(this.originalEvent);\r\n    }\r\n    return this.pixel_;\r\n  }\r\n  set pixel(pixel) {\r\n    this.pixel_ = pixel;\r\n  }\r\n\r\n  /**\r\n   * The coordinate corresponding to the original browser event.  This will be in the user\r\n   * projection if one is set.  Otherwise it will be in the view projection.\r\n   * @type {import(\"./coordinate.js\").Coordinate}\r\n   * @api\r\n   */\r\n  get coordinate() {\r\n    if (!this.coordinate_) {\r\n      this.coordinate_ = this.map.getCoordinateFromPixel(this.pixel);\r\n    }\r\n    return this.coordinate_;\r\n  }\r\n  set coordinate(coordinate) {\r\n    this.coordinate_ = coordinate;\r\n  }\r\n\r\n  /**\r\n   * Prevents the default browser action.\r\n   * See https://developer.mozilla.org/en-US/docs/Web/API/event.preventDefault.\r\n   * @api\r\n   * @override\r\n   */\r\n  preventDefault() {\r\n    super.preventDefault();\r\n    if ('preventDefault' in this.originalEvent) {\r\n      /** @type {UIEvent} */ (this.originalEvent).preventDefault();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Prevents further propagation of the current event.\r\n   * See https://developer.mozilla.org/en-US/docs/Web/API/event.stopPropagation.\r\n   * @api\r\n   * @override\r\n   */\r\n  stopPropagation() {\r\n    super.stopPropagation();\r\n    if ('stopPropagation' in this.originalEvent) {\r\n      /** @type {UIEvent} */ (this.originalEvent).stopPropagation();\r\n    }\r\n  }\r\n}\r\n\r\nexport default MapBrowserEvent;\r\n","/**\r\n * @module ol/MapEvent\r\n */\r\nimport Event from './events/Event.js';\r\n\r\n/**\r\n * @classdesc\r\n * Events emitted as map events are instances of this type.\r\n * See {@link module:ol/Map~Map} for which events trigger a map event.\r\n */\r\nclass MapEvent extends Event {\r\n  /**\r\n   * @param {string} type Event type.\r\n   * @param {import(\"./Map.js\").default} map Map.\r\n   * @param {?import(\"./Map.js\").FrameState} [frameState] Frame state.\r\n   */\r\n  constructor(type, map, frameState) {\r\n    super(type);\r\n\r\n    /**\r\n     * The map where the event occurred.\r\n     * @type {import(\"./Map.js\").default}\r\n     * @api\r\n     */\r\n    this.map = map;\r\n\r\n    /**\r\n     * The frame state at the time of the event.\r\n     * @type {?import(\"./Map.js\").FrameState}\r\n     * @api\r\n     */\r\n    this.frameState = frameState !== undefined ? frameState : null;\r\n  }\r\n}\r\n\r\nexport default MapEvent;\r\n","/**\r\n * @module ol/MapBrowserEventHandler\r\n */\r\n\r\nimport MapBrowserEvent from './MapBrowserEvent.js';\r\nimport MapBrowserEventType from './MapBrowserEventType.js';\r\nimport EventType from './events/EventType.js';\r\nimport Target from './events/Target.js';\r\nimport {listen, unlistenByKey} from './events.js';\r\nimport {PASSIVE_EVENT_LISTENERS} from './has.js';\r\nimport PointerEventType from './pointer/EventType.js';\r\n\r\nclass MapBrowserEventHandler extends Target {\r\n  /**\r\n   * @param {import(\"./Map.js\").default} map The map with the viewport to listen to events on.\r\n   * @param {number} [moveTolerance] The minimal distance the pointer must travel to trigger a move.\r\n   */\r\n  constructor(map, moveTolerance) {\r\n    super(map);\r\n\r\n    /**\r\n     * This is the element that we will listen to the real events on.\r\n     * @type {import(\"./Map.js\").default}\r\n     * @private\r\n     */\r\n    this.map_ = map;\r\n\r\n    /**\r\n     * @type {ReturnType<typeof setTimeout>}\r\n     * @private\r\n     */\r\n    this.clickTimeoutId_;\r\n\r\n    /**\r\n     * Emulate dblclick and singleclick. Will be true when only one pointer is active.\r\n     * @type {boolean}\r\n     */\r\n    this.emulateClicks_ = false;\r\n\r\n    /**\r\n     * @type {boolean}\r\n     * @private\r\n     */\r\n    this.dragging_ = false;\r\n\r\n    /**\r\n     * @type {!Array<import(\"./events.js\").EventsKey>}\r\n     * @private\r\n     */\r\n    this.dragListenerKeys_ = [];\r\n\r\n    /**\r\n     * @type {number}\r\n     * @private\r\n     */\r\n    this.moveTolerance_ = moveTolerance === undefined ? 1 : moveTolerance;\r\n\r\n    /**\r\n     * The most recent \"down\" type event (or null if none have occurred).\r\n     * Set on pointerdown.\r\n     * @type {PointerEvent|null}\r\n     * @private\r\n     */\r\n    this.down_ = null;\r\n\r\n    const element = this.map_.getViewport();\r\n\r\n    /**\r\n     * @type {Array<PointerEvent>}\r\n     * @private\r\n     */\r\n    this.activePointers_ = [];\r\n\r\n    /**\r\n     * @type {!Object<number, Event>}\r\n     * @private\r\n     */\r\n    this.trackedTouches_ = {};\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    this.element_ = element;\r\n\r\n    /**\r\n     * @type {?import(\"./events.js\").EventsKey}\r\n     * @private\r\n     */\r\n    this.pointerdownListenerKey_ = listen(\r\n      element,\r\n      PointerEventType.POINTERDOWN,\r\n      this.handlePointerDown_,\r\n      this,\r\n    );\r\n\r\n    /**\r\n     * @type {PointerEvent}\r\n     * @private\r\n     */\r\n    this.originalPointerMoveEvent_;\r\n\r\n    /**\r\n     * @type {?import(\"./events.js\").EventsKey}\r\n     * @private\r\n     */\r\n    this.relayedListenerKey_ = listen(\r\n      element,\r\n      PointerEventType.POINTERMOVE,\r\n      this.relayMoveEvent_,\r\n      this,\r\n    );\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    this.boundHandleTouchMove_ = this.handleTouchMove_.bind(this);\r\n\r\n    this.element_.addEventListener(\r\n      EventType.TOUCHMOVE,\r\n      this.boundHandleTouchMove_,\r\n      PASSIVE_EVENT_LISTENERS ? {passive: false} : false,\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @param {PointerEvent} pointerEvent Pointer\r\n   * event.\r\n   * @private\r\n   */\r\n  emulateClick_(pointerEvent) {\r\n    let newEvent = new MapBrowserEvent(\r\n      MapBrowserEventType.CLICK,\r\n      this.map_,\r\n      pointerEvent,\r\n    );\r\n    this.dispatchEvent(newEvent);\r\n    if (this.clickTimeoutId_ !== undefined) {\r\n      // double-click\r\n      clearTimeout(this.clickTimeoutId_);\r\n      this.clickTimeoutId_ = undefined;\r\n      newEvent = new MapBrowserEvent(\r\n        MapBrowserEventType.DBLCLICK,\r\n        this.map_,\r\n        pointerEvent,\r\n      );\r\n      this.dispatchEvent(newEvent);\r\n    } else {\r\n      // click\r\n      this.clickTimeoutId_ = setTimeout(() => {\r\n        this.clickTimeoutId_ = undefined;\r\n        const newEvent = new MapBrowserEvent(\r\n          MapBrowserEventType.SINGLECLICK,\r\n          this.map_,\r\n          pointerEvent,\r\n        );\r\n        this.dispatchEvent(newEvent);\r\n      }, 250);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Keeps track on how many pointers are currently active.\r\n   *\r\n   * @param {PointerEvent} pointerEvent Pointer\r\n   * event.\r\n   * @private\r\n   */\r\n  updateActivePointers_(pointerEvent) {\r\n    const event = pointerEvent;\r\n    const id = event.pointerId;\r\n\r\n    if (\r\n      event.type == MapBrowserEventType.POINTERUP ||\r\n      event.type == MapBrowserEventType.POINTERCANCEL\r\n    ) {\r\n      delete this.trackedTouches_[id];\r\n      for (const pointerId in this.trackedTouches_) {\r\n        if (this.trackedTouches_[pointerId].target !== event.target) {\r\n          // Some platforms assign a new pointerId when the target changes.\r\n          // If this happens, delete one tracked pointer. If there is more\r\n          // than one tracked pointer for the old target, it will be cleared\r\n          // by subsequent POINTERUP events from other pointers.\r\n          delete this.trackedTouches_[pointerId];\r\n          break;\r\n        }\r\n      }\r\n    } else if (\r\n      event.type == MapBrowserEventType.POINTERDOWN ||\r\n      event.type == MapBrowserEventType.POINTERMOVE\r\n    ) {\r\n      this.trackedTouches_[id] = event;\r\n    }\r\n    this.activePointers_ = Object.values(this.trackedTouches_);\r\n  }\r\n\r\n  /**\r\n   * @param {PointerEvent} pointerEvent Pointer\r\n   * event.\r\n   * @private\r\n   */\r\n  handlePointerUp_(pointerEvent) {\r\n    this.updateActivePointers_(pointerEvent);\r\n    const newEvent = new MapBrowserEvent(\r\n      MapBrowserEventType.POINTERUP,\r\n      this.map_,\r\n      pointerEvent,\r\n      undefined,\r\n      undefined,\r\n      this.activePointers_,\r\n    );\r\n    this.dispatchEvent(newEvent);\r\n\r\n    // We emulate click events on left mouse button click, touch contact, and pen\r\n    // contact. isMouseActionButton returns true in these cases (evt.button is set\r\n    // to 0).\r\n    // See http://www.w3.org/TR/pointerevents/#button-states\r\n    // We only fire click, singleclick, and doubleclick if nobody has called\r\n    // event.preventDefault().\r\n    if (\r\n      this.emulateClicks_ &&\r\n      !newEvent.defaultPrevented &&\r\n      !this.dragging_ &&\r\n      this.isMouseActionButton_(pointerEvent)\r\n    ) {\r\n      this.emulateClick_(this.down_);\r\n    }\r\n\r\n    if (this.activePointers_.length === 0) {\r\n      this.dragListenerKeys_.forEach(unlistenByKey);\r\n      this.dragListenerKeys_.length = 0;\r\n      this.dragging_ = false;\r\n      this.down_ = null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {PointerEvent} pointerEvent Pointer\r\n   * event.\r\n   * @return {boolean} If the left mouse button was pressed.\r\n   * @private\r\n   */\r\n  isMouseActionButton_(pointerEvent) {\r\n    return pointerEvent.button === 0;\r\n  }\r\n\r\n  /**\r\n   * @param {PointerEvent} pointerEvent Pointer\r\n   * event.\r\n   * @private\r\n   */\r\n  handlePointerDown_(pointerEvent) {\r\n    this.emulateClicks_ = this.activePointers_.length === 0;\r\n    this.updateActivePointers_(pointerEvent);\r\n    const newEvent = new MapBrowserEvent(\r\n      MapBrowserEventType.POINTERDOWN,\r\n      this.map_,\r\n      pointerEvent,\r\n      undefined,\r\n      undefined,\r\n      this.activePointers_,\r\n    );\r\n    this.dispatchEvent(newEvent);\r\n\r\n    this.down_ = new PointerEvent(pointerEvent.type, pointerEvent);\r\n    Object.defineProperty(this.down_, 'target', {\r\n      writable: false,\r\n      value: pointerEvent.target,\r\n    });\r\n\r\n    if (this.dragListenerKeys_.length === 0) {\r\n      const doc = this.map_.getOwnerDocument();\r\n      this.dragListenerKeys_.push(\r\n        listen(\r\n          doc,\r\n          MapBrowserEventType.POINTERMOVE,\r\n          this.handlePointerMove_,\r\n          this,\r\n        ),\r\n        listen(doc, MapBrowserEventType.POINTERUP, this.handlePointerUp_, this),\r\n        /* Note that the listener for `pointercancel is set up on\r\n         * `pointerEventHandler_` and not `documentPointerEventHandler_` like\r\n         * the `pointerup` and `pointermove` listeners.\r\n         *\r\n         * The reason for this is the following: `TouchSource.vacuumTouches_()`\r\n         * issues `pointercancel` events, when there was no `touchend` for a\r\n         * `touchstart`. Now, let's say a first `touchstart` is registered on\r\n         * `pointerEventHandler_`. The `documentPointerEventHandler_` is set up.\r\n         * But `documentPointerEventHandler_` doesn't know about the first\r\n         * `touchstart`. If there is no `touchend` for the `touchstart`, we can\r\n         * only receive a `touchcancel` from `pointerEventHandler_`, because it is\r\n         * only registered there.\r\n         */\r\n        listen(\r\n          this.element_,\r\n          MapBrowserEventType.POINTERCANCEL,\r\n          this.handlePointerUp_,\r\n          this,\r\n        ),\r\n      );\r\n      if (this.element_.getRootNode && this.element_.getRootNode() !== doc) {\r\n        this.dragListenerKeys_.push(\r\n          listen(\r\n            this.element_.getRootNode(),\r\n            MapBrowserEventType.POINTERUP,\r\n            this.handlePointerUp_,\r\n            this,\r\n          ),\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {PointerEvent} pointerEvent Pointer\r\n   * event.\r\n   * @private\r\n   */\r\n  handlePointerMove_(pointerEvent) {\r\n    // Between pointerdown and pointerup, pointermove events are triggered.\r\n    // To avoid a 'false' touchmove event to be dispatched, we test if the pointer\r\n    // moved a significant distance.\r\n    if (this.isMoving_(pointerEvent)) {\r\n      this.updateActivePointers_(pointerEvent);\r\n      this.dragging_ = true;\r\n      const newEvent = new MapBrowserEvent(\r\n        MapBrowserEventType.POINTERDRAG,\r\n        this.map_,\r\n        pointerEvent,\r\n        this.dragging_,\r\n        undefined,\r\n        this.activePointers_,\r\n      );\r\n      this.dispatchEvent(newEvent);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Wrap and relay a pointermove event.\r\n   * @param {PointerEvent} pointerEvent Pointer\r\n   * event.\r\n   * @private\r\n   */\r\n  relayMoveEvent_(pointerEvent) {\r\n    this.originalPointerMoveEvent_ = pointerEvent;\r\n    const dragging = !!(this.down_ && this.isMoving_(pointerEvent));\r\n    this.dispatchEvent(\r\n      new MapBrowserEvent(\r\n        MapBrowserEventType.POINTERMOVE,\r\n        this.map_,\r\n        pointerEvent,\r\n        dragging,\r\n      ),\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Flexible handling of a `touch-action: none` css equivalent: because calling\r\n   * `preventDefault()` on a `pointermove` event does not stop native page scrolling\r\n   * and zooming, we also listen for `touchmove` and call `preventDefault()` on it\r\n   * when an interaction (currently `DragPan` handles the event.\r\n   * @param {TouchEvent} event Event.\r\n   * @private\r\n   */\r\n  handleTouchMove_(event) {\r\n    // Due to https://github.com/mpizenberg/elm-pep/issues/2, `this.originalPointerMoveEvent_`\r\n    // may not be initialized yet when we get here on a platform without native pointer events,\r\n    // when elm-pep is used as pointer events polyfill.\r\n    const originalEvent = this.originalPointerMoveEvent_;\r\n    if (\r\n      (!originalEvent || originalEvent.defaultPrevented) &&\r\n      (typeof event.cancelable !== 'boolean' || event.cancelable === true)\r\n    ) {\r\n      event.preventDefault();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {PointerEvent} pointerEvent Pointer\r\n   * event.\r\n   * @return {boolean} Is moving.\r\n   * @private\r\n   */\r\n  isMoving_(pointerEvent) {\r\n    return (\r\n      this.dragging_ ||\r\n      Math.abs(pointerEvent.clientX - this.down_.clientX) >\r\n        this.moveTolerance_ ||\r\n      Math.abs(pointerEvent.clientY - this.down_.clientY) > this.moveTolerance_\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Clean up.\r\n   * @override\r\n   */\r\n  disposeInternal() {\r\n    if (this.relayedListenerKey_) {\r\n      unlistenByKey(this.relayedListenerKey_);\r\n      this.relayedListenerKey_ = null;\r\n    }\r\n    this.element_.removeEventListener(\r\n      EventType.TOUCHMOVE,\r\n      this.boundHandleTouchMove_,\r\n    );\r\n\r\n    if (this.pointerdownListenerKey_) {\r\n      unlistenByKey(this.pointerdownListenerKey_);\r\n      this.pointerdownListenerKey_ = null;\r\n    }\r\n\r\n    this.dragListenerKeys_.forEach(unlistenByKey);\r\n    this.dragListenerKeys_.length = 0;\r\n\r\n    this.element_ = null;\r\n    super.disposeInternal();\r\n  }\r\n}\r\n\r\nexport default MapBrowserEventHandler;\r\n","/**\r\n * @module ol/MapBrowserEventType\r\n */\r\nimport EventType from './events/EventType.js';\r\n\r\n/**\r\n * Constants for event names.\r\n * @enum {string}\r\n */\r\nexport default {\r\n  /**\r\n   * A true single click with no dragging and no double click. Note that this\r\n   * event is delayed by 250 ms to ensure that it is not a double click.\r\n   * @event module:ol/MapBrowserEvent~MapBrowserEvent#singleclick\r\n   * @api\r\n   */\r\n  SINGLECLICK: 'singleclick',\r\n\r\n  /**\r\n   * A click with no dragging. A double click will fire two of this.\r\n   * @event module:ol/MapBrowserEvent~MapBrowserEvent#click\r\n   * @api\r\n   */\r\n  CLICK: EventType.CLICK,\r\n\r\n  /**\r\n   * A true double click, with no dragging.\r\n   * @event module:ol/MapBrowserEvent~MapBrowserEvent#dblclick\r\n   * @api\r\n   */\r\n  DBLCLICK: EventType.DBLCLICK,\r\n\r\n  /**\r\n   * Triggered when a pointer is dragged.\r\n   * @event module:ol/MapBrowserEvent~MapBrowserEvent#pointerdrag\r\n   * @api\r\n   */\r\n  POINTERDRAG: 'pointerdrag',\r\n\r\n  /**\r\n   * Triggered when a pointer is moved. Note that on touch devices this is\r\n   * triggered when the map is panned, so is not the same as mousemove.\r\n   * @event module:ol/MapBrowserEvent~MapBrowserEvent#pointermove\r\n   * @api\r\n   */\r\n  POINTERMOVE: 'pointermove',\r\n\r\n  POINTERDOWN: 'pointerdown',\r\n  POINTERUP: 'pointerup',\r\n  POINTEROVER: 'pointerover',\r\n  POINTEROUT: 'pointerout',\r\n  POINTERENTER: 'pointerenter',\r\n  POINTERLEAVE: 'pointerleave',\r\n  POINTERCANCEL: 'pointercancel',\r\n};\r\n\r\n/***\r\n * @typedef {'singleclick'|'click'|'dblclick'|'pointerdrag'|'pointermove'} Types\r\n */\r\n","/**\r\n * @module ol/has\r\n */\r\n\r\nconst ua =\r\n  typeof navigator !== 'undefined' && typeof navigator.userAgent !== 'undefined'\r\n    ? navigator.userAgent.toLowerCase()\r\n    : '';\r\n\r\n/**\r\n * User agent string says we are dealing with Safari as browser.\r\n * @type {boolean}\r\n */\r\nexport const SAFARI = ua.includes('safari') && !ua.includes('chrom');\r\n\r\n/**\r\n * https://bugs.webkit.org/show_bug.cgi?id=237906\r\n * @type {boolean}\r\n */\r\nexport const SAFARI_BUG_237906 =\r\n  SAFARI &&\r\n  (ua.includes('version/15.4') ||\r\n    /cpu (os|iphone os) 15_4 like mac os x/.test(ua));\r\n\r\n/**\r\n * User agent string says we are dealing with a WebKit engine.\r\n * @type {boolean}\r\n */\r\nexport const WEBKIT = ua.includes('webkit') && !ua.includes('edge');\r\n\r\n/**\r\n * User agent string says we are dealing with a Mac as platform.\r\n * @type {boolean}\r\n */\r\nexport const MAC = ua.includes('macintosh');\r\n\r\n/**\r\n * The ratio between physical pixels and device-independent pixels\r\n * (dips) on the device (`window.devicePixelRatio`).\r\n * @const\r\n * @type {number}\r\n * @api\r\n */\r\nexport const DEVICE_PIXEL_RATIO =\r\n  typeof devicePixelRatio !== 'undefined' ? devicePixelRatio : 1;\r\n\r\n/**\r\n * The execution context is a worker with OffscreenCanvas available.\r\n * @const\r\n * @type {boolean}\r\n */\r\nexport const WORKER_OFFSCREEN_CANVAS =\r\n  typeof WorkerGlobalScope !== 'undefined' &&\r\n  typeof OffscreenCanvas !== 'undefined' &&\r\n  self instanceof WorkerGlobalScope; //eslint-disable-line\r\n\r\n/**\r\n * Image.prototype.decode() is supported.\r\n * @type {boolean}\r\n */\r\nexport const IMAGE_DECODE =\r\n  typeof Image !== 'undefined' && Image.prototype.decode;\r\n\r\n/**\r\n * createImageBitmap() is supported.\r\n * @type {boolean}\r\n */\r\nexport const CREATE_IMAGE_BITMAP = typeof createImageBitmap === 'function';\r\n\r\n/**\r\n * @type {boolean}\r\n */\r\nexport const PASSIVE_EVENT_LISTENERS = (function () {\r\n  let passive = false;\r\n  try {\r\n    const options = Object.defineProperty({}, 'passive', {\r\n      get: function () {\r\n        passive = true;\r\n      },\r\n    });\r\n\r\n    // @ts-ignore Ignore invalid event type '_'\r\n    window.addEventListener('_', null, options);\r\n    // @ts-ignore Ignore invalid event type '_'\r\n    window.removeEventListener('_', null, options);\r\n  } catch {\r\n    // passive not supported\r\n  }\r\n  return passive;\r\n})();\r\n","/**\r\n * @module ol/pointer/EventType\r\n */\r\n\r\n/**\r\n * Constants for event names.\r\n * @enum {string}\r\n */\r\nexport default {\r\n  POINTERMOVE: 'pointermove',\r\n  POINTERDOWN: 'pointerdown',\r\n  POINTERUP: 'pointerup',\r\n  POINTEROVER: 'pointerover',\r\n  POINTEROUT: 'pointerout',\r\n  POINTERENTER: 'pointerenter',\r\n  POINTERLEAVE: 'pointerleave',\r\n  POINTERCANCEL: 'pointercancel',\r\n};\r\n","/**\r\n * @module ol/MapEventType\r\n */\r\n\r\n/**\r\n * @enum {string}\r\n */\r\nexport default {\r\n  /**\r\n   * Triggered after a map frame is rendered.\r\n   * @event module:ol/MapEvent~MapEvent#postrender\r\n   * @api\r\n   */\r\n  POSTRENDER: 'postrender',\r\n\r\n  /**\r\n   * Triggered when the map starts moving.\r\n   * @event module:ol/MapEvent~MapEvent#movestart\r\n   * @api\r\n   */\r\n  MOVESTART: 'movestart',\r\n\r\n  /**\r\n   * Triggered after the map is moved.\r\n   * @event module:ol/MapEvent~MapEvent#moveend\r\n   * @api\r\n   */\r\n  MOVEEND: 'moveend',\r\n\r\n  /**\r\n   * Triggered when loading of additional map data (tiles, images, features) starts.\r\n   * @event module:ol/MapEvent~MapEvent#loadstart\r\n   * @api\r\n   */\r\n  LOADSTART: 'loadstart',\r\n\r\n  /**\r\n   * Triggered when loading of additional map data has completed.\r\n   * @event module:ol/MapEvent~MapEvent#loadend\r\n   * @api\r\n   */\r\n  LOADEND: 'loadend',\r\n};\r\n\r\n/***\r\n * @typedef {'postrender'|'movestart'|'moveend'|'loadstart'|'loadend'} Types\r\n */\r\n","/**\r\n * @module ol/MapProperty\r\n */\r\n\r\n/**\r\n * @enum {string}\r\n */\r\nexport default {\r\n  LAYERGROUP: 'layergroup',\r\n  SIZE: 'size',\r\n  TARGET: 'target',\r\n  VIEW: 'view',\r\n};\r\n","/**\r\n * @module ol/TileQueue\r\n */\r\nimport TileState from './TileState.js';\r\nimport EventType from './events/EventType.js';\r\nimport PriorityQueue, {DROP} from './structs/PriorityQueue.js';\r\n\r\n/**\r\n * @typedef {function(import(\"./Tile.js\").default, string, import('./tilecoord.js').TileCoord, number): number} PriorityFunction\r\n */\r\n\r\n/**\r\n * @typedef {[import('./Tile.js').default, string, import('./tilecoord.js').TileCoord, number]} TileQueueElement\r\n */\r\n\r\n/**\r\n * @extends PriorityQueue<TileQueueElement>}\r\n */\r\nclass TileQueue extends PriorityQueue {\r\n  /**\r\n   * @param {PriorityFunction} tilePriorityFunction Tile priority function.\r\n   * @param {function(): ?} tileChangeCallback Function called on each tile change event.\r\n   */\r\n  constructor(tilePriorityFunction, tileChangeCallback) {\r\n    super(\r\n      (element) => tilePriorityFunction.apply(null, element),\r\n      (element) => element[0].getKey(),\r\n    );\r\n\r\n    /** @private */\r\n    this.boundHandleTileChange_ = this.handleTileChange.bind(this);\r\n\r\n    /**\r\n     * @private\r\n     * @type {function(): ?}\r\n     */\r\n    this.tileChangeCallback_ = tileChangeCallback;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.tilesLoading_ = 0;\r\n\r\n    /**\r\n     * @private\r\n     * @type {!Object<string,boolean>}\r\n     */\r\n    this.tilesLoadingKeys_ = {};\r\n  }\r\n\r\n  /**\r\n   * @param {TileQueueElement} element Element.\r\n   * @return {boolean} The element was added to the queue.\r\n   * @override\r\n   */\r\n  enqueue(element) {\r\n    const added = super.enqueue(element);\r\n    if (added) {\r\n      const tile = element[0];\r\n      tile.addEventListener(EventType.CHANGE, this.boundHandleTileChange_);\r\n    }\r\n    return added;\r\n  }\r\n\r\n  /**\r\n   * @return {number} Number of tiles loading.\r\n   */\r\n  getTilesLoading() {\r\n    return this.tilesLoading_;\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"./events/Event.js\").default} event Event.\r\n   * @protected\r\n   */\r\n  handleTileChange(event) {\r\n    const tile = /** @type {import(\"./Tile.js\").default} */ (event.target);\r\n    const state = tile.getState();\r\n    if (\r\n      state === TileState.LOADED ||\r\n      state === TileState.ERROR ||\r\n      state === TileState.EMPTY\r\n    ) {\r\n      if (state !== TileState.ERROR) {\r\n        tile.removeEventListener(EventType.CHANGE, this.boundHandleTileChange_);\r\n      }\r\n      const tileKey = tile.getKey();\r\n      if (tileKey in this.tilesLoadingKeys_) {\r\n        delete this.tilesLoadingKeys_[tileKey];\r\n        --this.tilesLoading_;\r\n      }\r\n      this.tileChangeCallback_();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {number} maxTotalLoading Maximum number tiles to load simultaneously.\r\n   * @param {number} maxNewLoads Maximum number of new tiles to load.\r\n   */\r\n  loadMoreTiles(maxTotalLoading, maxNewLoads) {\r\n    let newLoads = 0;\r\n    while (\r\n      this.tilesLoading_ < maxTotalLoading &&\r\n      newLoads < maxNewLoads &&\r\n      this.getCount() > 0\r\n    ) {\r\n      const tile = this.dequeue()[0];\r\n      const tileKey = tile.getKey();\r\n      const state = tile.getState();\r\n      if (state === TileState.IDLE && !(tileKey in this.tilesLoadingKeys_)) {\r\n        this.tilesLoadingKeys_[tileKey] = true;\r\n        ++this.tilesLoading_;\r\n        ++newLoads;\r\n        tile.load();\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport default TileQueue;\r\n\r\n/**\r\n * @param {import('./Map.js').FrameState} frameState Frame state.\r\n * @param {import(\"./Tile.js\").default} tile Tile.\r\n * @param {string} tileSourceKey Tile source key.\r\n * @param {import(\"./coordinate.js\").Coordinate} tileCenter Tile center.\r\n * @param {number} tileResolution Tile resolution.\r\n * @return {number} Tile priority.\r\n */\r\nexport function getTilePriority(\r\n  frameState,\r\n  tile,\r\n  tileSourceKey,\r\n  tileCenter,\r\n  tileResolution,\r\n) {\r\n  // Filter out tiles at higher zoom levels than the current zoom level, or that\r\n  // are outside the visible extent.\r\n  if (!frameState || !(tileSourceKey in frameState.wantedTiles)) {\r\n    return DROP;\r\n  }\r\n  if (!frameState.wantedTiles[tileSourceKey][tile.getKey()]) {\r\n    return DROP;\r\n  }\r\n  // Prioritize the highest zoom level tiles closest to the focus.\r\n  // Tiles at higher zoom levels are prioritized using Math.log(tileResolution).\r\n  // Within a zoom level, tiles are prioritized by the distance in pixels between\r\n  // the center of the tile and the center of the viewport.  The factor of 65536\r\n  // means that the prioritization should behave as desired for tiles up to\r\n  // 65536 * Math.log(2) = 45426 pixels from the focus.\r\n  const center = frameState.viewState.center;\r\n  const deltaX = tileCenter[0] - center[0];\r\n  const deltaY = tileCenter[1] - center[1];\r\n  return (\r\n    65536 * Math.log(tileResolution) +\r\n    Math.sqrt(deltaX * deltaX + deltaY * deltaY) / tileResolution\r\n  );\r\n}\r\n","/**\r\n * @module ol/TileState\r\n */\r\n\r\n/**\r\n * @enum {number}\r\n */\r\nexport default {\r\n  IDLE: 0,\r\n  LOADING: 1,\r\n  LOADED: 2,\r\n  /**\r\n   * Indicates that tile loading failed\r\n   * @type {number}\r\n   */\r\n  ERROR: 3,\r\n  EMPTY: 4,\r\n};\r\n","/**\r\n * @module ol/structs/PriorityQueue\r\n */\r\nimport {assert} from '../asserts.js';\r\nimport {clear} from '../obj.js';\r\n\r\n/**\r\n * @type {number}\r\n */\r\nexport const DROP = Infinity;\r\n\r\n/**\r\n * @classdesc\r\n * Priority queue.\r\n *\r\n * The implementation is inspired from the Closure Library's Heap class and\r\n * Python's heapq module.\r\n *\r\n * See https://github.com/google/closure-library/blob/master/closure/goog/structs/heap.js\r\n * and https://hg.python.org/cpython/file/2.7/Lib/heapq.py.\r\n *\r\n * @template T\r\n */\r\nclass PriorityQueue {\r\n  /**\r\n   * @param {function(T): number} priorityFunction Priority function.\r\n   * @param {function(T): string} keyFunction Key function.\r\n   */\r\n  constructor(priorityFunction, keyFunction) {\r\n    /**\r\n     * @type {function(T): number}\r\n     * @private\r\n     */\r\n    this.priorityFunction_ = priorityFunction;\r\n\r\n    /**\r\n     * @type {function(T): string}\r\n     * @private\r\n     */\r\n    this.keyFunction_ = keyFunction;\r\n\r\n    /**\r\n     * @type {Array<T>}\r\n     * @private\r\n     */\r\n    this.elements_ = [];\r\n\r\n    /**\r\n     * @type {Array<number>}\r\n     * @private\r\n     */\r\n    this.priorities_ = [];\r\n\r\n    /**\r\n     * @type {!Object<string, boolean>}\r\n     * @private\r\n     */\r\n    this.queuedElements_ = {};\r\n  }\r\n\r\n  /**\r\n   * FIXME empty description for jsdoc\r\n   */\r\n  clear() {\r\n    this.elements_.length = 0;\r\n    this.priorities_.length = 0;\r\n    clear(this.queuedElements_);\r\n  }\r\n\r\n  /**\r\n   * Remove and return the highest-priority element. O(log N).\r\n   * @return {T} Element.\r\n   */\r\n  dequeue() {\r\n    const elements = this.elements_;\r\n    const priorities = this.priorities_;\r\n    const element = elements[0];\r\n    if (elements.length == 1) {\r\n      elements.length = 0;\r\n      priorities.length = 0;\r\n    } else {\r\n      elements[0] = /** @type {T} */ (elements.pop());\r\n      priorities[0] = /** @type {number} */ (priorities.pop());\r\n      this.siftUp_(0);\r\n    }\r\n    const elementKey = this.keyFunction_(element);\r\n    delete this.queuedElements_[elementKey];\r\n    return element;\r\n  }\r\n\r\n  /**\r\n   * Enqueue an element. O(log N).\r\n   * @param {T} element Element.\r\n   * @return {boolean} The element was added to the queue.\r\n   */\r\n  enqueue(element) {\r\n    assert(\r\n      !(this.keyFunction_(element) in this.queuedElements_),\r\n      'Tried to enqueue an `element` that was already added to the queue',\r\n    );\r\n    const priority = this.priorityFunction_(element);\r\n    if (priority != DROP) {\r\n      this.elements_.push(element);\r\n      this.priorities_.push(priority);\r\n      this.queuedElements_[this.keyFunction_(element)] = true;\r\n      this.siftDown_(0, this.elements_.length - 1);\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * @return {number} Count.\r\n   */\r\n  getCount() {\r\n    return this.elements_.length;\r\n  }\r\n\r\n  /**\r\n   * Gets the index of the left child of the node at the given index.\r\n   * @param {number} index The index of the node to get the left child for.\r\n   * @return {number} The index of the left child.\r\n   * @private\r\n   */\r\n  getLeftChildIndex_(index) {\r\n    return index * 2 + 1;\r\n  }\r\n\r\n  /**\r\n   * Gets the index of the right child of the node at the given index.\r\n   * @param {number} index The index of the node to get the right child for.\r\n   * @return {number} The index of the right child.\r\n   * @private\r\n   */\r\n  getRightChildIndex_(index) {\r\n    return index * 2 + 2;\r\n  }\r\n\r\n  /**\r\n   * Gets the index of the parent of the node at the given index.\r\n   * @param {number} index The index of the node to get the parent for.\r\n   * @return {number} The index of the parent.\r\n   * @private\r\n   */\r\n  getParentIndex_(index) {\r\n    return (index - 1) >> 1;\r\n  }\r\n\r\n  /**\r\n   * Make this a heap. O(N).\r\n   * @private\r\n   */\r\n  heapify_() {\r\n    let i;\r\n    for (i = (this.elements_.length >> 1) - 1; i >= 0; i--) {\r\n      this.siftUp_(i);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @return {boolean} Is empty.\r\n   */\r\n  isEmpty() {\r\n    return this.elements_.length === 0;\r\n  }\r\n\r\n  /**\r\n   * @param {string} key Key.\r\n   * @return {boolean} Is key queued.\r\n   */\r\n  isKeyQueued(key) {\r\n    return key in this.queuedElements_;\r\n  }\r\n\r\n  /**\r\n   * @param {T} element Element.\r\n   * @return {boolean} Is queued.\r\n   */\r\n  isQueued(element) {\r\n    return this.isKeyQueued(this.keyFunction_(element));\r\n  }\r\n\r\n  /**\r\n   * @param {number} index The index of the node to move down.\r\n   * @private\r\n   */\r\n  siftUp_(index) {\r\n    const elements = this.elements_;\r\n    const priorities = this.priorities_;\r\n    const count = elements.length;\r\n    const element = elements[index];\r\n    const priority = priorities[index];\r\n    const startIndex = index;\r\n\r\n    while (index < count >> 1) {\r\n      const lIndex = this.getLeftChildIndex_(index);\r\n      const rIndex = this.getRightChildIndex_(index);\r\n\r\n      const smallerChildIndex =\r\n        rIndex < count && priorities[rIndex] < priorities[lIndex]\r\n          ? rIndex\r\n          : lIndex;\r\n\r\n      elements[index] = elements[smallerChildIndex];\r\n      priorities[index] = priorities[smallerChildIndex];\r\n      index = smallerChildIndex;\r\n    }\r\n\r\n    elements[index] = element;\r\n    priorities[index] = priority;\r\n    this.siftDown_(startIndex, index);\r\n  }\r\n\r\n  /**\r\n   * @param {number} startIndex The index of the root.\r\n   * @param {number} index The index of the node to move up.\r\n   * @private\r\n   */\r\n  siftDown_(startIndex, index) {\r\n    const elements = this.elements_;\r\n    const priorities = this.priorities_;\r\n    const element = elements[index];\r\n    const priority = priorities[index];\r\n\r\n    while (index > startIndex) {\r\n      const parentIndex = this.getParentIndex_(index);\r\n      if (priorities[parentIndex] > priority) {\r\n        elements[index] = elements[parentIndex];\r\n        priorities[index] = priorities[parentIndex];\r\n        index = parentIndex;\r\n      } else {\r\n        break;\r\n      }\r\n    }\r\n    elements[index] = element;\r\n    priorities[index] = priority;\r\n  }\r\n\r\n  /**\r\n   * FIXME empty description for jsdoc\r\n   */\r\n  reprioritize() {\r\n    const priorityFunction = this.priorityFunction_;\r\n    const elements = this.elements_;\r\n    const priorities = this.priorities_;\r\n    let index = 0;\r\n    const n = elements.length;\r\n    let element, i, priority;\r\n    for (i = 0; i < n; ++i) {\r\n      element = elements[i];\r\n      priority = priorityFunction(element);\r\n      if (priority == DROP) {\r\n        delete this.queuedElements_[this.keyFunction_(element)];\r\n      } else {\r\n        priorities[index] = priority;\r\n        elements[index++] = element;\r\n      }\r\n    }\r\n    elements.length = index;\r\n    priorities.length = index;\r\n    this.heapify_();\r\n  }\r\n}\r\n\r\nexport default PriorityQueue;\r\n","/**\r\n * @module ol/View\r\n */\r\nimport BaseObject from './Object.js';\r\nimport ViewHint from './ViewHint.js';\r\nimport ViewProperty from './ViewProperty.js';\r\nimport {linearFindNearest} from './array.js';\r\nimport {assert} from './asserts.js';\r\nimport {createExtent, none as centerNone} from './centerconstraint.js';\r\nimport {\r\n  add as addCoordinate,\r\n  equals,\r\n  equals as coordinatesEqual,\r\n  rotate as rotateCoordinate,\r\n} from './coordinate.js';\r\nimport {easeOut, inAndOut} from './easing.js';\r\nimport {\r\n  getCenter,\r\n  getForViewAndSize,\r\n  getHeight,\r\n  getWidth,\r\n  isEmpty,\r\n} from './extent.js';\r\nimport {VOID} from './functions.js';\r\nimport {fromExtent as polygonFromExtent} from './geom/Polygon.js';\r\nimport {clamp, modulo} from './math.js';\r\nimport {\r\n  METERS_PER_UNIT,\r\n  createProjection,\r\n  disableCoordinateWarning,\r\n  fromUserCoordinate,\r\n  fromUserExtent,\r\n  getUserProjection,\r\n  toUserCoordinate,\r\n  toUserExtent,\r\n} from './proj.js';\r\nimport {\r\n  createMinMaxResolution,\r\n  createSnapToPower,\r\n  createSnapToResolutions,\r\n} from './resolutionconstraint.js';\r\nimport {\r\n  createSnapToN,\r\n  createSnapToZero,\r\n  disable,\r\n  none as rotationNone,\r\n} from './rotationconstraint.js';\r\nimport {DEFAULT_TILE_SIZE} from './tilegrid/common.js';\r\n\r\n/**\r\n * An animation configuration\r\n *\r\n * @typedef {Object} Animation\r\n * @property {import(\"./coordinate.js\").Coordinate} [sourceCenter] Source center.\r\n * @property {import(\"./coordinate.js\").Coordinate} [targetCenter] Target center.\r\n * @property {number} [sourceResolution] Source resolution.\r\n * @property {number} [targetResolution] Target resolution.\r\n * @property {number} [sourceRotation] Source rotation.\r\n * @property {number} [targetRotation] Target rotation.\r\n * @property {import(\"./coordinate.js\").Coordinate} [anchor] Anchor.\r\n * @property {number} start Start.\r\n * @property {number} duration Duration.\r\n * @property {boolean} complete Complete.\r\n * @property {function(number):number} easing Easing.\r\n * @property {function(boolean):void} callback Callback.\r\n */\r\n\r\n/**\r\n * @typedef {Object} Constraints\r\n * @property {import(\"./centerconstraint.js\").Type} center Center.\r\n * @property {import(\"./resolutionconstraint.js\").Type} resolution Resolution.\r\n * @property {import(\"./rotationconstraint.js\").Type} rotation Rotation.\r\n */\r\n\r\n/**\r\n * @typedef {Object} FitOptions\r\n * @property {import(\"./size.js\").Size} [size] The size in pixels of the box to\r\n * fit the extent into. Defaults to the size of the map the view is associated with.\r\n * If no map or multiple maps are connected to the view, provide the desired box size\r\n * (e.g. `map.getSize()`).\r\n * @property {!Array<number>} [padding=[0, 0, 0, 0]] Padding (in pixels) to be\r\n * cleared inside the view. Values in the array are top, right, bottom and left\r\n * padding.\r\n * @property {boolean} [nearest=false] If the view `constrainResolution` option is `true`,\r\n * get the nearest extent instead of the closest that actually fits the view.\r\n * @property {number} [minResolution=0] Minimum resolution that we zoom to.\r\n * @property {number} [maxZoom] Maximum zoom level that we zoom to. If\r\n * `minResolution` is given, this property is ignored.\r\n * @property {number} [duration] The duration of the animation in milliseconds.\r\n * By default, there is no animation to the target extent.\r\n * @property {function(number):number} [easing] The easing function used during\r\n * the animation (defaults to {@link module:ol/easing.inAndOut}).\r\n * The function will be called for each frame with a number representing a\r\n * fraction of the animation's duration.  The function should return a number\r\n * between 0 and 1 representing the progress toward the destination state.\r\n * @property {function(boolean):void} [callback] Function called when the view is in\r\n * its final position. The callback will be called with `true` if the animation\r\n * series completed on its own or `false` if it was cancelled.\r\n */\r\n\r\n/**\r\n * @typedef {Object} ViewOptions\r\n * @property {import(\"./coordinate.js\").Coordinate} [center] The initial center for\r\n * the view. If a user projection is not set, the coordinate system for the center is\r\n * specified with the `projection` option. Layer sources will not be fetched if this\r\n * is not set, but the center can be set later with {@link #setCenter}.\r\n * @property {boolean|number} [constrainRotation=true] Rotation constraint.\r\n * `false` means no constraint. `true` means no constraint, but snap to zero\r\n * near zero. A number constrains the rotation to that number of values. For\r\n * example, `4` will constrain the rotation to 0, 90, 180, and 270 degrees.\r\n * @property {boolean} [enableRotation=true] Enable rotation.\r\n * If `false`, a rotation constraint that always sets the rotation to zero is\r\n * used. The `constrainRotation` option has no effect if `enableRotation` is\r\n * `false`.\r\n * @property {import(\"./extent.js\").Extent} [extent] The extent that constrains the\r\n * view, in other words, nothing outside of this extent can be visible on the map.\r\n * @property {boolean} [constrainOnlyCenter=false] If true, the extent\r\n * constraint will only apply to the view center and not the whole extent.\r\n * @property {boolean} [smoothExtentConstraint=true] If true, the extent\r\n * constraint will be applied smoothly, i.e. allow the view to go slightly outside\r\n * of the given `extent`.\r\n * @property {number} [maxResolution] The maximum resolution used to determine\r\n * the resolution constraint. It is used together with `minResolution` (or\r\n * `maxZoom`) and `zoomFactor`. If unspecified it is calculated in such a way\r\n * that the projection's validity extent fits in a 256x256 px tile. If the\r\n * projection is Spherical Mercator (the default) then `maxResolution` defaults\r\n * to `40075016.68557849 / 256 = 156543.03392804097`.\r\n * @property {number} [minResolution] The minimum resolution used to determine\r\n * the resolution constraint.  It is used together with `maxResolution` (or\r\n * `minZoom`) and `zoomFactor`.  If unspecified it is calculated assuming 29\r\n * zoom levels (with a factor of 2). If the projection is Spherical Mercator\r\n * (the default) then `minResolution` defaults to\r\n * `40075016.68557849 / 256 / Math.pow(2, 28) = 0.0005831682455839253`.\r\n * @property {number} [maxZoom=28] The maximum zoom level used to determine the\r\n * resolution constraint. It is used together with `minZoom` (or\r\n * `maxResolution`) and `zoomFactor`.  Note that if `minResolution` is also\r\n * provided, it is given precedence over `maxZoom`.\r\n * @property {number} [minZoom=0] The minimum zoom level used to determine the\r\n * resolution constraint. It is used together with `maxZoom` (or\r\n * `minResolution`) and `zoomFactor`.  Note that if `maxResolution` is also\r\n * provided, it is given precedence over `minZoom`.\r\n * @property {boolean} [multiWorld=false] If `false` the view is constrained so\r\n * only one world is visible, and you cannot pan off the edge.  If `true` the map\r\n * may show multiple worlds at low zoom levels.  Only used if the `projection` is\r\n * global.  Note that if `extent` is also provided it is given precedence.\r\n * @property {boolean} [constrainResolution=false] If true, the view will always\r\n * animate to the closest zoom level after an interaction; false means\r\n * intermediary zoom levels are allowed.\r\n * @property {boolean} [smoothResolutionConstraint=true] If true, the resolution\r\n * min/max values will be applied smoothly, i. e. allow the view to exceed slightly\r\n * the given resolution or zoom bounds.\r\n * @property {boolean} [showFullExtent=false] Allow the view to be zoomed out to\r\n * show the full configured extent. By default, when a view is configured with an\r\n * extent, users will not be able to zoom out so the viewport exceeds the extent in\r\n * either dimension. This means the full extent may not be visible if the viewport\r\n * is taller or wider than the aspect ratio of the configured extent. If\r\n * showFullExtent is true, the user will be able to zoom out so that the viewport\r\n * exceeds the height or width of the configured extent, but not both, allowing the\r\n * full extent to be shown.\r\n * @property {import(\"./proj.js\").ProjectionLike} [projection='EPSG:3857'] The\r\n * projection. The default is Spherical Mercator.\r\n * @property {number} [resolution] The initial resolution for the view. The\r\n * units are `projection` units per pixel (e.g. meters per pixel). An\r\n * alternative to setting this is to set `zoom`. Layer sources will not be\r\n * fetched if neither this nor `zoom` are defined, but they can be set later\r\n * with {@link #setZoom} or {@link #setResolution}.\r\n * @property {Array<number>} [resolutions] Resolutions that determine the\r\n * zoom levels if specified. The index in the array corresponds to the zoom level,\r\n * therefore the resolution values have to be in descending order. It also constrains\r\n * the resolution by the minimum and maximum value. If set the `maxResolution`,\r\n * `minResolution`, `minZoom`, `maxZoom`, and `zoomFactor` options are ignored.\r\n * @property {number} [rotation=0] The initial rotation for the view in radians\r\n * (positive rotation clockwise, 0 means North).\r\n * @property {number} [zoom] Only used if `resolution` is not defined. Zoom\r\n * level used to calculate the initial resolution for the view.\r\n * @property {number} [zoomFactor=2] The zoom factor used to compute the\r\n * corresponding resolution.\r\n * @property {!Array<number>} [padding=[0, 0, 0, 0]] Padding (in css pixels).\r\n * If the map viewport is partially covered with other content (overlays) along\r\n * its edges, this setting allows to shift the center of the viewport away from\r\n * that content. The order of the values is top, right, bottom, left.\r\n */\r\n\r\n/**\r\n * @typedef {Object} AnimationOptions\r\n * @property {import(\"./coordinate.js\").Coordinate} [center] The center of the view at the end of\r\n * the animation.\r\n * @property {number} [zoom] The zoom level of the view at the end of the\r\n * animation. This takes precedence over `resolution`.\r\n * @property {number} [resolution] The resolution of the view at the end\r\n * of the animation.  If `zoom` is also provided, this option will be ignored.\r\n * @property {number} [rotation] The rotation of the view at the end of\r\n * the animation.\r\n * @property {import(\"./coordinate.js\").Coordinate} [anchor] Optional anchor to remain fixed\r\n * during a rotation or resolution animation.\r\n * @property {number} [duration=1000] The duration of the animation in milliseconds.\r\n * @property {function(number):number} [easing] The easing function used\r\n * during the animation (defaults to {@link module:ol/easing.inAndOut}).\r\n * The function will be called for each frame with a number representing a\r\n * fraction of the animation's duration.  The function should return a number\r\n * between 0 and 1 representing the progress toward the destination state.\r\n */\r\n\r\n/**\r\n * @typedef {Object} State\r\n * @property {import(\"./coordinate.js\").Coordinate} center Center (in view projection coordinates).\r\n * @property {import(\"./proj/Projection.js\").default} projection Projection.\r\n * @property {number} resolution Resolution.\r\n * @property {import(\"./coordinate.js\").Coordinate} [nextCenter] The next center during an animation series.\r\n * @property {number} [nextResolution] The next resolution during an animation series.\r\n * @property {number} [nextRotation] The next rotation during an animation series.\r\n * @property {number} rotation Rotation.\r\n * @property {number} zoom Zoom.\r\n */\r\n\r\n/**\r\n * Like {@link import(\"./Map.js\").FrameState}, but just `viewState` and `extent`.\r\n * @typedef {Object} ViewStateLayerStateExtent\r\n * @property {State} viewState View state.\r\n * @property {import(\"./extent.js\").Extent} extent Extent (in user projection coordinates).\r\n * @property {Array<import(\"./layer/Layer.js\").State>} [layerStatesArray] Layer states.\r\n */\r\n\r\n/**\r\n * Default min zoom level for the map view.\r\n * @type {number}\r\n */\r\nconst DEFAULT_MIN_ZOOM = 0;\r\n\r\n/**\r\n * @typedef {import(\"./ObjectEventType\").Types|'change:center'|'change:resolution'|'change:rotation'} ViewObjectEventTypes\r\n */\r\n\r\n/***\r\n * @template Return\r\n * @typedef {import(\"./Observable\").OnSignature<import(\"./Observable\").EventTypes, import(\"./events/Event.js\").default, Return> &\r\n *   import(\"./Observable\").OnSignature<ViewObjectEventTypes, import(\"./Object\").ObjectEvent, Return> &\r\n *   import(\"./Observable\").CombinedOnSignature<import(\"./Observable\").EventTypes|ViewObjectEventTypes, Return>} ViewOnSignature\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * A View object represents a simple 2D view of the map.\r\n *\r\n * This is the object to act upon to change the center, resolution,\r\n * and rotation of the map.\r\n *\r\n * A View has a `projection`. The projection determines the\r\n * coordinate system of the center, and its units determine the units of the\r\n * resolution (projection units per pixel). The default projection is\r\n * Web Mercator (EPSG:3857).\r\n *\r\n * ### The view states\r\n *\r\n * A View is determined by three states: `center`, `resolution`,\r\n * and `rotation`. Each state has a corresponding getter and setter, e.g.\r\n * `getCenter` and `setCenter` for the `center` state.\r\n *\r\n * The `zoom` state is actually not saved on the view: all computations\r\n * internally use the `resolution` state. Still, the `setZoom` and `getZoom`\r\n * methods are available, as well as `getResolutionForZoom` and\r\n * `getZoomForResolution` to switch from one system to the other.\r\n *\r\n * ### The constraints\r\n *\r\n * `setCenter`, `setResolution` and `setRotation` can be used to change the\r\n * states of the view, but any constraint defined in the constructor will\r\n * be applied along the way.\r\n *\r\n * A View object can have a *resolution constraint*, a *rotation constraint*\r\n * and a *center constraint*.\r\n *\r\n * The *resolution constraint* typically restricts min/max values and\r\n * snaps to specific resolutions. It is determined by the following\r\n * options: `resolutions`, `maxResolution`, `maxZoom` and `zoomFactor`.\r\n * If `resolutions` is set, the other three options are ignored. See\r\n * documentation for each option for more information. By default, the view\r\n * only has a min/max restriction and allow intermediary zoom levels when\r\n * pinch-zooming for example.\r\n *\r\n * The *rotation constraint* snaps to specific angles. It is determined\r\n * by the following options: `enableRotation` and `constrainRotation`.\r\n * By default rotation is allowed and its value is snapped to zero when approaching the\r\n * horizontal.\r\n *\r\n * The *center constraint* is determined by the `extent` option. By\r\n * default the view center is not constrained at all.\r\n *\r\n * ### Changing the view state\r\n *\r\n * It is important to note that `setZoom`, `setResolution`, `setCenter` and\r\n * `setRotation` are subject to the above mentioned constraints. As such, it\r\n * may sometimes not be possible to know in advance the resulting state of the\r\n * View. For example, calling `setResolution(10)` does not guarantee that\r\n * `getResolution()` will return `10`.\r\n *\r\n * A consequence of this is that, when applying a delta on the view state, one\r\n * should use `adjustCenter`, `adjustRotation`, `adjustZoom` and `adjustResolution`\r\n * rather than the corresponding setters. This will let view do its internal\r\n * computations. Besides, the `adjust*` methods also take an `anchor`\r\n * argument which allows specifying an origin for the transformation.\r\n *\r\n * ### Interacting with the view\r\n *\r\n * View constraints are usually only applied when the view is *at rest*, meaning that\r\n * no interaction or animation is ongoing. As such, if the user puts the view in a\r\n * state that is not equivalent to a constrained one (e.g. rotating the view when\r\n * the snap angle is 0), an animation will be triggered at the interaction end to\r\n * put back the view to a stable state;\r\n *\r\n * @api\r\n */\r\nclass View extends BaseObject {\r\n  /**\r\n   * @param {ViewOptions} [options] View options.\r\n   */\r\n  constructor(options) {\r\n    super();\r\n\r\n    /***\r\n     * @type {ViewOnSignature<import(\"./events\").EventsKey>}\r\n     */\r\n    this.on;\r\n\r\n    /***\r\n     * @type {ViewOnSignature<import(\"./events\").EventsKey>}\r\n     */\r\n    this.once;\r\n\r\n    /***\r\n     * @type {ViewOnSignature<void>}\r\n     */\r\n    this.un;\r\n\r\n    options = Object.assign({}, options);\r\n\r\n    /**\r\n     * @private\r\n     * @type {Array<number>}\r\n     */\r\n    this.hints_ = [0, 0];\r\n\r\n    /**\r\n     * @private\r\n     * @type {Array<Array<Animation>>}\r\n     */\r\n    this.animations_ = [];\r\n\r\n    /**\r\n     * @private\r\n     * @type {number|undefined}\r\n     */\r\n    this.updateAnimationKey_;\r\n\r\n    /**\r\n     * @private\r\n     * @const\r\n     * @type {import(\"./proj/Projection.js\").default}\r\n     */\r\n    this.projection_ = createProjection(options.projection, 'EPSG:3857');\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"./size.js\").Size}\r\n     */\r\n    this.viewportSize_ = [100, 100];\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"./coordinate.js\").Coordinate|undefined}\r\n     */\r\n    this.targetCenter_ = null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number|undefined}\r\n     */\r\n    this.targetResolution_;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number|undefined}\r\n     */\r\n    this.targetRotation_;\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"./coordinate.js\").Coordinate}\r\n     */\r\n    this.nextCenter_ = null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.nextResolution_;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.nextRotation_;\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"./coordinate.js\").Coordinate|undefined}\r\n     */\r\n    this.cancelAnchor_ = undefined;\r\n\r\n    if (options.projection) {\r\n      disableCoordinateWarning();\r\n    }\r\n    if (options.center) {\r\n      options.center = fromUserCoordinate(options.center, this.projection_);\r\n    }\r\n    if (options.extent) {\r\n      options.extent = fromUserExtent(options.extent, this.projection_);\r\n    }\r\n\r\n    this.applyOptions_(options);\r\n  }\r\n\r\n  /**\r\n   * Set up the view with the given options.\r\n   * @param {ViewOptions} options View options.\r\n   */\r\n  applyOptions_(options) {\r\n    const properties = Object.assign({}, options);\r\n    for (const key in ViewProperty) {\r\n      delete properties[key];\r\n    }\r\n    this.setProperties(properties, true);\r\n\r\n    const resolutionConstraintInfo = createResolutionConstraint(options);\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.maxResolution_ = resolutionConstraintInfo.maxResolution;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.minResolution_ = resolutionConstraintInfo.minResolution;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.zoomFactor_ = resolutionConstraintInfo.zoomFactor;\r\n\r\n    /**\r\n     * @private\r\n     * @type {Array<number>|undefined}\r\n     */\r\n    this.resolutions_ = options.resolutions;\r\n\r\n    /**\r\n     * @type {Array<number>|undefined}\r\n     * @private\r\n     */\r\n    this.padding_ = options.padding;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.minZoom_ = resolutionConstraintInfo.minZoom;\r\n\r\n    const centerConstraint = createCenterConstraint(options);\r\n    const resolutionConstraint = resolutionConstraintInfo.constraint;\r\n    const rotationConstraint = createRotationConstraint(options);\r\n\r\n    /**\r\n     * @private\r\n     * @type {Constraints}\r\n     */\r\n    this.constraints_ = {\r\n      center: centerConstraint,\r\n      resolution: resolutionConstraint,\r\n      rotation: rotationConstraint,\r\n    };\r\n\r\n    this.setRotation(options.rotation !== undefined ? options.rotation : 0);\r\n    this.setCenterInternal(\r\n      options.center !== undefined ? options.center : null,\r\n    );\r\n    if (options.resolution !== undefined) {\r\n      this.setResolution(options.resolution);\r\n    } else if (options.zoom !== undefined) {\r\n      this.setZoom(options.zoom);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Padding (in css pixels).\r\n   * If the map viewport is partially covered with other content (overlays) along\r\n   * its edges, this setting allows to shift the center of the viewport away from that\r\n   * content. The order of the values in the array is top, right, bottom, left.\r\n   * The default is no padding, which is equivalent to `[0, 0, 0, 0]`.\r\n   * @type {Array<number>|undefined}\r\n   * @api\r\n   */\r\n  get padding() {\r\n    return this.padding_;\r\n  }\r\n  set padding(padding) {\r\n    let oldPadding = this.padding_;\r\n    this.padding_ = padding;\r\n    const center = this.getCenterInternal();\r\n    if (center) {\r\n      const newPadding = padding || [0, 0, 0, 0];\r\n      oldPadding = oldPadding || [0, 0, 0, 0];\r\n      const resolution = this.getResolution();\r\n      const offsetX =\r\n        (resolution / 2) *\r\n        (newPadding[3] - oldPadding[3] + oldPadding[1] - newPadding[1]);\r\n      const offsetY =\r\n        (resolution / 2) *\r\n        (newPadding[0] - oldPadding[0] + oldPadding[2] - newPadding[2]);\r\n      this.setCenterInternal([center[0] + offsetX, center[1] - offsetY]);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get an updated version of the view options used to construct the view.  The\r\n   * current resolution (or zoom), center, and rotation are applied to any stored\r\n   * options.  The provided options can be used to apply new min/max zoom or\r\n   * resolution limits.\r\n   * @param {ViewOptions} newOptions New options to be applied.\r\n   * @return {ViewOptions} New options updated with the current view state.\r\n   */\r\n  getUpdatedOptions_(newOptions) {\r\n    const options = this.getProperties();\r\n\r\n    // preserve resolution (or zoom)\r\n    if (options.resolution !== undefined) {\r\n      options.resolution = this.getResolution();\r\n    } else {\r\n      options.zoom = this.getZoom();\r\n    }\r\n\r\n    // preserve center\r\n    options.center = this.getCenterInternal();\r\n\r\n    // preserve rotation\r\n    options.rotation = this.getRotation();\r\n\r\n    return Object.assign({}, options, newOptions);\r\n  }\r\n\r\n  /**\r\n   * Animate the view.  The view's center, zoom (or resolution), and rotation\r\n   * can be animated for smooth transitions between view states.  For example,\r\n   * to animate the view to a new zoom level:\r\n   *\r\n   *     view.animate({zoom: view.getZoom() + 1});\r\n   *\r\n   * By default, the animation lasts one second and uses in-and-out easing.  You\r\n   * can customize this behavior by including `duration` (in milliseconds) and\r\n   * `easing` options (see {@link module:ol/easing}).\r\n   *\r\n   * To chain together multiple animations, call the method with multiple\r\n   * animation objects.  For example, to first zoom and then pan:\r\n   *\r\n   *     view.animate({zoom: 10}, {center: [0, 0]});\r\n   *\r\n   * If you provide a function as the last argument to the animate method, it\r\n   * will get called at the end of an animation series.  The callback will be\r\n   * called with `true` if the animation series completed on its own or `false`\r\n   * if it was cancelled.\r\n   *\r\n   * Animations are cancelled by user interactions (e.g. dragging the map) or by\r\n   * calling `view.setCenter()`, `view.setResolution()`, or `view.setRotation()`\r\n   * (or another method that calls one of these).\r\n   *\r\n   * @param {...(AnimationOptions|function(boolean): void)} var_args Animation\r\n   *     options.  Multiple animations can be run in series by passing multiple\r\n   *     options objects.  To run multiple animations in parallel, call the method\r\n   *     multiple times.  An optional callback can be provided as a final\r\n   *     argument.  The callback will be called with a boolean indicating whether\r\n   *     the animation completed without being cancelled.\r\n   * @api\r\n   */\r\n  animate(var_args) {\r\n    if (this.isDef() && !this.getAnimating()) {\r\n      this.resolveConstraints(0);\r\n    }\r\n    const args = new Array(arguments.length);\r\n    for (let i = 0; i < args.length; ++i) {\r\n      let options = arguments[i];\r\n      if (options.center) {\r\n        options = Object.assign({}, options);\r\n        options.center = fromUserCoordinate(\r\n          options.center,\r\n          this.getProjection(),\r\n        );\r\n      }\r\n      if (options.anchor) {\r\n        options = Object.assign({}, options);\r\n        options.anchor = fromUserCoordinate(\r\n          options.anchor,\r\n          this.getProjection(),\r\n        );\r\n      }\r\n      args[i] = options;\r\n    }\r\n    this.animateInternal.apply(this, args);\r\n  }\r\n\r\n  /**\r\n   * @param {...(AnimationOptions|function(boolean): void)} var_args Animation options.\r\n   */\r\n  animateInternal(var_args) {\r\n    let animationCount = arguments.length;\r\n    let callback;\r\n    if (\r\n      animationCount > 1 &&\r\n      typeof arguments[animationCount - 1] === 'function'\r\n    ) {\r\n      callback = arguments[animationCount - 1];\r\n      --animationCount;\r\n    }\r\n\r\n    let i = 0;\r\n    for (; i < animationCount && !this.isDef(); ++i) {\r\n      // if view properties are not yet set, shortcut to the final state\r\n      const state = arguments[i];\r\n      if (state.center) {\r\n        this.setCenterInternal(state.center);\r\n      }\r\n      if (state.zoom !== undefined) {\r\n        this.setZoom(state.zoom);\r\n      } else if (state.resolution) {\r\n        this.setResolution(state.resolution);\r\n      }\r\n      if (state.rotation !== undefined) {\r\n        this.setRotation(state.rotation);\r\n      }\r\n    }\r\n    if (i === animationCount) {\r\n      if (callback) {\r\n        animationCallback(callback, true);\r\n      }\r\n      return;\r\n    }\r\n\r\n    let start = Date.now();\r\n    let center = this.targetCenter_.slice();\r\n    let resolution = this.targetResolution_;\r\n    let rotation = this.targetRotation_;\r\n    const series = [];\r\n    for (; i < animationCount; ++i) {\r\n      const options = /** @type {AnimationOptions} */ (arguments[i]);\r\n\r\n      const animation = {\r\n        start: start,\r\n        complete: false,\r\n        anchor: options.anchor,\r\n        duration: options.duration !== undefined ? options.duration : 1000,\r\n        easing: options.easing || inAndOut,\r\n        callback: callback,\r\n      };\r\n\r\n      if (options.center) {\r\n        animation.sourceCenter = center;\r\n        animation.targetCenter = options.center.slice();\r\n        center = animation.targetCenter;\r\n      }\r\n\r\n      if (options.zoom !== undefined) {\r\n        animation.sourceResolution = resolution;\r\n        animation.targetResolution = this.getResolutionForZoom(options.zoom);\r\n        resolution = animation.targetResolution;\r\n      } else if (options.resolution) {\r\n        animation.sourceResolution = resolution;\r\n        animation.targetResolution = options.resolution;\r\n        resolution = animation.targetResolution;\r\n      }\r\n\r\n      if (options.rotation !== undefined) {\r\n        animation.sourceRotation = rotation;\r\n        const delta =\r\n          modulo(options.rotation - rotation + Math.PI, 2 * Math.PI) - Math.PI;\r\n        animation.targetRotation = rotation + delta;\r\n        rotation = animation.targetRotation;\r\n      }\r\n\r\n      // check if animation is a no-op\r\n      if (isNoopAnimation(animation)) {\r\n        animation.complete = true;\r\n        // we still push it onto the series for callback handling\r\n      } else {\r\n        start += animation.duration;\r\n      }\r\n      series.push(animation);\r\n    }\r\n    this.animations_.push(series);\r\n    this.setHint(ViewHint.ANIMATING, 1);\r\n    this.updateAnimations_();\r\n  }\r\n\r\n  /**\r\n   * Determine if the view is being animated.\r\n   * @return {boolean} The view is being animated.\r\n   * @api\r\n   */\r\n  getAnimating() {\r\n    return this.hints_[ViewHint.ANIMATING] > 0;\r\n  }\r\n\r\n  /**\r\n   * Determine if the user is interacting with the view, such as panning or zooming.\r\n   * @return {boolean} The view is being interacted with.\r\n   * @api\r\n   */\r\n  getInteracting() {\r\n    return this.hints_[ViewHint.INTERACTING] > 0;\r\n  }\r\n\r\n  /**\r\n   * Cancel any ongoing animations.\r\n   * @api\r\n   */\r\n  cancelAnimations() {\r\n    this.setHint(ViewHint.ANIMATING, -this.hints_[ViewHint.ANIMATING]);\r\n    let anchor;\r\n    for (let i = 0, ii = this.animations_.length; i < ii; ++i) {\r\n      const series = this.animations_[i];\r\n      if (series[0].callback) {\r\n        animationCallback(series[0].callback, false);\r\n      }\r\n      if (!anchor) {\r\n        for (let j = 0, jj = series.length; j < jj; ++j) {\r\n          const animation = series[j];\r\n          if (!animation.complete) {\r\n            anchor = animation.anchor;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    this.animations_.length = 0;\r\n    this.cancelAnchor_ = anchor;\r\n    this.nextCenter_ = null;\r\n    this.nextResolution_ = NaN;\r\n    this.nextRotation_ = NaN;\r\n  }\r\n\r\n  /**\r\n   * Update all animations.\r\n   */\r\n  updateAnimations_() {\r\n    if (this.updateAnimationKey_ !== undefined) {\r\n      cancelAnimationFrame(this.updateAnimationKey_);\r\n      this.updateAnimationKey_ = undefined;\r\n    }\r\n    if (!this.getAnimating()) {\r\n      return;\r\n    }\r\n    const now = Date.now();\r\n    let more = false;\r\n    for (let i = this.animations_.length - 1; i >= 0; --i) {\r\n      const series = this.animations_[i];\r\n      let seriesComplete = true;\r\n      for (let j = 0, jj = series.length; j < jj; ++j) {\r\n        const animation = series[j];\r\n        if (animation.complete) {\r\n          continue;\r\n        }\r\n        const elapsed = now - animation.start;\r\n        let fraction =\r\n          animation.duration > 0 ? elapsed / animation.duration : 1;\r\n        if (fraction >= 1) {\r\n          animation.complete = true;\r\n          fraction = 1;\r\n        } else {\r\n          seriesComplete = false;\r\n        }\r\n        const progress = animation.easing(fraction);\r\n        if (animation.sourceCenter) {\r\n          const x0 = animation.sourceCenter[0];\r\n          const y0 = animation.sourceCenter[1];\r\n          const x1 = animation.targetCenter[0];\r\n          const y1 = animation.targetCenter[1];\r\n          this.nextCenter_ = animation.targetCenter;\r\n          const x = x0 + progress * (x1 - x0);\r\n          const y = y0 + progress * (y1 - y0);\r\n          this.targetCenter_ = [x, y];\r\n        }\r\n        if (animation.sourceResolution && animation.targetResolution) {\r\n          const resolution =\r\n            progress === 1\r\n              ? animation.targetResolution\r\n              : animation.sourceResolution +\r\n                progress *\r\n                  (animation.targetResolution - animation.sourceResolution);\r\n          if (animation.anchor) {\r\n            const size = this.getViewportSize_(this.getRotation());\r\n            const constrainedResolution = this.constraints_.resolution(\r\n              resolution,\r\n              0,\r\n              size,\r\n              true,\r\n            );\r\n            this.targetCenter_ = this.calculateCenterZoom(\r\n              constrainedResolution,\r\n              animation.anchor,\r\n            );\r\n          }\r\n          this.nextResolution_ = animation.targetResolution;\r\n          this.targetResolution_ = resolution;\r\n          this.applyTargetState_(true);\r\n        }\r\n        if (\r\n          animation.sourceRotation !== undefined &&\r\n          animation.targetRotation !== undefined\r\n        ) {\r\n          const rotation =\r\n            progress === 1\r\n              ? modulo(animation.targetRotation + Math.PI, 2 * Math.PI) -\r\n                Math.PI\r\n              : animation.sourceRotation +\r\n                progress *\r\n                  (animation.targetRotation - animation.sourceRotation);\r\n          if (animation.anchor) {\r\n            const constrainedRotation = this.constraints_.rotation(\r\n              rotation,\r\n              true,\r\n            );\r\n            this.targetCenter_ = this.calculateCenterRotate(\r\n              constrainedRotation,\r\n              animation.anchor,\r\n            );\r\n          }\r\n          this.nextRotation_ = animation.targetRotation;\r\n          this.targetRotation_ = rotation;\r\n        }\r\n        this.applyTargetState_(true);\r\n        more = true;\r\n        if (!animation.complete) {\r\n          break;\r\n        }\r\n      }\r\n      if (seriesComplete) {\r\n        this.animations_[i] = null;\r\n        this.setHint(ViewHint.ANIMATING, -1);\r\n        this.nextCenter_ = null;\r\n        this.nextResolution_ = NaN;\r\n        this.nextRotation_ = NaN;\r\n        const callback = series[0].callback;\r\n        if (callback) {\r\n          animationCallback(callback, true);\r\n        }\r\n      }\r\n    }\r\n    // prune completed series\r\n    this.animations_ = this.animations_.filter(Boolean);\r\n    if (more && this.updateAnimationKey_ === undefined) {\r\n      this.updateAnimationKey_ = requestAnimationFrame(\r\n        this.updateAnimations_.bind(this),\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {number} rotation Target rotation.\r\n   * @param {import(\"./coordinate.js\").Coordinate} anchor Rotation anchor.\r\n   * @return {import(\"./coordinate.js\").Coordinate|undefined} Center for rotation and anchor.\r\n   */\r\n  calculateCenterRotate(rotation, anchor) {\r\n    let center;\r\n    const currentCenter = this.getCenterInternal();\r\n    if (currentCenter !== undefined) {\r\n      center = [currentCenter[0] - anchor[0], currentCenter[1] - anchor[1]];\r\n      rotateCoordinate(center, rotation - this.getRotation());\r\n      addCoordinate(center, anchor);\r\n    }\r\n    return center;\r\n  }\r\n\r\n  /**\r\n   * @param {number} resolution Target resolution.\r\n   * @param {import(\"./coordinate.js\").Coordinate} anchor Zoom anchor.\r\n   * @return {import(\"./coordinate.js\").Coordinate|undefined} Center for resolution and anchor.\r\n   */\r\n  calculateCenterZoom(resolution, anchor) {\r\n    let center;\r\n    const currentCenter = this.getCenterInternal();\r\n    const currentResolution = this.getResolution();\r\n    if (currentCenter !== undefined && currentResolution !== undefined) {\r\n      const x =\r\n        anchor[0] -\r\n        (resolution * (anchor[0] - currentCenter[0])) / currentResolution;\r\n      const y =\r\n        anchor[1] -\r\n        (resolution * (anchor[1] - currentCenter[1])) / currentResolution;\r\n      center = [x, y];\r\n    }\r\n    return center;\r\n  }\r\n\r\n  /**\r\n   * Returns the current viewport size.\r\n   * @private\r\n   * @param {number} [rotation] Take into account the rotation of the viewport when giving the size\r\n   * @return {import(\"./size.js\").Size} Viewport size or `[100, 100]` when no viewport is found.\r\n   */\r\n  getViewportSize_(rotation) {\r\n    const size = this.viewportSize_;\r\n    if (rotation) {\r\n      const w = size[0];\r\n      const h = size[1];\r\n      return [\r\n        Math.abs(w * Math.cos(rotation)) + Math.abs(h * Math.sin(rotation)),\r\n        Math.abs(w * Math.sin(rotation)) + Math.abs(h * Math.cos(rotation)),\r\n      ];\r\n    }\r\n    return size;\r\n  }\r\n\r\n  /**\r\n   * Stores the viewport size on the view. The viewport size is not read every time from the DOM\r\n   * to avoid performance hit and layout reflow.\r\n   * This should be done on map size change.\r\n   * Note: the constraints are not resolved during an animation to avoid stopping it\r\n   * @param {import(\"./size.js\").Size} [size] Viewport size; if undefined, [100, 100] is assumed\r\n   */\r\n  setViewportSize(size) {\r\n    this.viewportSize_ = Array.isArray(size) ? size.slice() : [100, 100];\r\n    if (!this.getAnimating()) {\r\n      this.resolveConstraints(0);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get the view center.\r\n   * @return {import(\"./coordinate.js\").Coordinate|undefined} The center of the view.\r\n   * @observable\r\n   * @api\r\n   */\r\n  getCenter() {\r\n    const center = this.getCenterInternal();\r\n    if (!center) {\r\n      return center;\r\n    }\r\n    return toUserCoordinate(center, this.getProjection());\r\n  }\r\n\r\n  /**\r\n   * Get the view center without transforming to user projection.\r\n   * @return {import(\"./coordinate.js\").Coordinate|undefined} The center of the view.\r\n   */\r\n  getCenterInternal() {\r\n    return /** @type {import(\"./coordinate.js\").Coordinate|undefined} */ (\r\n      this.get(ViewProperty.CENTER)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @return {Constraints} Constraints.\r\n   */\r\n  getConstraints() {\r\n    return this.constraints_;\r\n  }\r\n\r\n  /**\r\n   * @return {boolean} Resolution constraint is set\r\n   */\r\n  getConstrainResolution() {\r\n    return this.get('constrainResolution');\r\n  }\r\n\r\n  /**\r\n   * @param {Array<number>} [hints] Destination array.\r\n   * @return {Array<number>} Hint.\r\n   */\r\n  getHints(hints) {\r\n    if (hints !== undefined) {\r\n      hints[0] = this.hints_[0];\r\n      hints[1] = this.hints_[1];\r\n      return hints;\r\n    }\r\n    return this.hints_.slice();\r\n  }\r\n\r\n  /**\r\n   * Calculate the extent for the current view state and the passed box size.\r\n   * @param {import(\"./size.js\").Size} [size] The pixel dimensions of the box\r\n   * into which the calculated extent should fit. Defaults to the size of the\r\n   * map the view is associated with.\r\n   * If no map or multiple maps are connected to the view, provide the desired\r\n   * box size (e.g. `map.getSize()`).\r\n   * @return {import(\"./extent.js\").Extent} Extent.\r\n   * @api\r\n   */\r\n  calculateExtent(size) {\r\n    const extent = this.calculateExtentInternal(size);\r\n    return toUserExtent(extent, this.getProjection());\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"./size.js\").Size} [size] Box pixel size. If not provided,\r\n   * the map's last known viewport size will be used.\r\n   * @return {import(\"./extent.js\").Extent} Extent.\r\n   */\r\n  calculateExtentInternal(size) {\r\n    size = size || this.getViewportSizeMinusPadding_();\r\n    const center = /** @type {!import(\"./coordinate.js\").Coordinate} */ (\r\n      this.getCenterInternal()\r\n    );\r\n    assert(center, 'The view center is not defined');\r\n    const resolution = /** @type {!number} */ (this.getResolution());\r\n    assert(resolution !== undefined, 'The view resolution is not defined');\r\n    const rotation = /** @type {!number} */ (this.getRotation());\r\n    assert(rotation !== undefined, 'The view rotation is not defined');\r\n\r\n    return getForViewAndSize(center, resolution, rotation, size);\r\n  }\r\n\r\n  /**\r\n   * Get the maximum resolution of the view.\r\n   * @return {number} The maximum resolution of the view.\r\n   * @api\r\n   */\r\n  getMaxResolution() {\r\n    return this.maxResolution_;\r\n  }\r\n\r\n  /**\r\n   * Get the minimum resolution of the view.\r\n   * @return {number} The minimum resolution of the view.\r\n   * @api\r\n   */\r\n  getMinResolution() {\r\n    return this.minResolution_;\r\n  }\r\n\r\n  /**\r\n   * Get the maximum zoom level for the view.\r\n   * @return {number} The maximum zoom level.\r\n   * @api\r\n   */\r\n  getMaxZoom() {\r\n    return /** @type {number} */ (\r\n      this.getZoomForResolution(this.minResolution_)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Set a new maximum zoom level for the view.\r\n   * @param {number} zoom The maximum zoom level.\r\n   * @api\r\n   */\r\n  setMaxZoom(zoom) {\r\n    this.applyOptions_(this.getUpdatedOptions_({maxZoom: zoom}));\r\n  }\r\n\r\n  /**\r\n   * Get the minimum zoom level for the view.\r\n   * @return {number} The minimum zoom level.\r\n   * @api\r\n   */\r\n  getMinZoom() {\r\n    return /** @type {number} */ (\r\n      this.getZoomForResolution(this.maxResolution_)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Set a new minimum zoom level for the view.\r\n   * @param {number} zoom The minimum zoom level.\r\n   * @api\r\n   */\r\n  setMinZoom(zoom) {\r\n    this.applyOptions_(this.getUpdatedOptions_({minZoom: zoom}));\r\n  }\r\n\r\n  /**\r\n   * Set whether the view should allow intermediary zoom levels.\r\n   * @param {boolean} enabled Whether the resolution is constrained.\r\n   * @api\r\n   */\r\n  setConstrainResolution(enabled) {\r\n    this.applyOptions_(this.getUpdatedOptions_({constrainResolution: enabled}));\r\n  }\r\n\r\n  /**\r\n   * Get the view projection.\r\n   * @return {import(\"./proj/Projection.js\").default} The projection of the view.\r\n   * @api\r\n   */\r\n  getProjection() {\r\n    return this.projection_;\r\n  }\r\n\r\n  /**\r\n   * Get the view resolution.\r\n   * @return {number|undefined} The resolution of the view.\r\n   * @observable\r\n   * @api\r\n   */\r\n  getResolution() {\r\n    return /** @type {number|undefined} */ (this.get(ViewProperty.RESOLUTION));\r\n  }\r\n\r\n  /**\r\n   * Get the resolutions for the view. This returns the array of resolutions\r\n   * passed to the constructor of the View, or undefined if none were given.\r\n   * @return {Array<number>|undefined} The resolutions of the view.\r\n   * @api\r\n   */\r\n  getResolutions() {\r\n    return this.resolutions_;\r\n  }\r\n\r\n  /**\r\n   * Get the resolution for a provided extent (in map units) and size (in pixels).\r\n   * @param {import(\"./extent.js\").Extent} extent Extent.\r\n   * @param {import(\"./size.js\").Size} [size] Box pixel size.\r\n   * @return {number} The resolution at which the provided extent will render at\r\n   *     the given size.\r\n   * @api\r\n   */\r\n  getResolutionForExtent(extent, size) {\r\n    return this.getResolutionForExtentInternal(\r\n      fromUserExtent(extent, this.getProjection()),\r\n      size,\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Get the resolution for a provided extent (in map units) and size (in pixels).\r\n   * @param {import(\"./extent.js\").Extent} extent Extent.\r\n   * @param {import(\"./size.js\").Size} [size] Box pixel size.\r\n   * @return {number} The resolution at which the provided extent will render at\r\n   *     the given size.\r\n   */\r\n  getResolutionForExtentInternal(extent, size) {\r\n    size = size || this.getViewportSizeMinusPadding_();\r\n    const xResolution = getWidth(extent) / size[0];\r\n    const yResolution = getHeight(extent) / size[1];\r\n    return Math.max(xResolution, yResolution);\r\n  }\r\n\r\n  /**\r\n   * Return a function that returns a value between 0 and 1 for a\r\n   * resolution. Exponential scaling is assumed.\r\n   * @param {number} [power] Power.\r\n   * @return {function(number): number} Resolution for value function.\r\n   */\r\n  getResolutionForValueFunction(power) {\r\n    power = power || 2;\r\n    const maxResolution = this.getConstrainedResolution(this.maxResolution_);\r\n    const minResolution = this.minResolution_;\r\n    const max = Math.log(maxResolution / minResolution) / Math.log(power);\r\n    return (\r\n      /**\r\n       * @param {number} value Value.\r\n       * @return {number} Resolution.\r\n       */\r\n      function (value) {\r\n        const resolution = maxResolution / Math.pow(power, value * max);\r\n        return resolution;\r\n      }\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Get the view rotation.\r\n   * @return {number} The rotation of the view in radians.\r\n   * @observable\r\n   * @api\r\n   */\r\n  getRotation() {\r\n    return /** @type {number} */ (this.get(ViewProperty.ROTATION));\r\n  }\r\n\r\n  /**\r\n   * Return a function that returns a resolution for a value between\r\n   * 0 and 1. Exponential scaling is assumed.\r\n   * @param {number} [power] Power.\r\n   * @return {function(number): number} Value for resolution function.\r\n   */\r\n  getValueForResolutionFunction(power) {\r\n    const logPower = Math.log(power || 2);\r\n    const maxResolution = this.getConstrainedResolution(this.maxResolution_);\r\n    const minResolution = this.minResolution_;\r\n    const max = Math.log(maxResolution / minResolution) / logPower;\r\n    return (\r\n      /**\r\n       * @param {number} resolution Resolution.\r\n       * @return {number} Value.\r\n       */\r\n      function (resolution) {\r\n        const value = Math.log(maxResolution / resolution) / logPower / max;\r\n        return value;\r\n      }\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Returns the size of the viewport minus padding.\r\n   * @private\r\n   * @param {number} [rotation] Take into account the rotation of the viewport when giving the size\r\n   * @return {import(\"./size.js\").Size} Viewport size reduced by the padding.\r\n   */\r\n  getViewportSizeMinusPadding_(rotation) {\r\n    let size = this.getViewportSize_(rotation);\r\n    const padding = this.padding_;\r\n    if (padding) {\r\n      size = [\r\n        size[0] - padding[1] - padding[3],\r\n        size[1] - padding[0] - padding[2],\r\n      ];\r\n    }\r\n    return size;\r\n  }\r\n\r\n  /**\r\n   * @return {State} View state.\r\n   */\r\n  getState() {\r\n    const projection = this.getProjection();\r\n    const resolution = this.getResolution();\r\n    const rotation = this.getRotation();\r\n    let center = /** @type {import(\"./coordinate.js\").Coordinate} */ (\r\n      this.getCenterInternal()\r\n    );\r\n    const padding = this.padding_;\r\n    if (padding) {\r\n      const reducedSize = this.getViewportSizeMinusPadding_();\r\n      center = calculateCenterOn(\r\n        center,\r\n        this.getViewportSize_(),\r\n        [reducedSize[0] / 2 + padding[3], reducedSize[1] / 2 + padding[0]],\r\n        resolution,\r\n        rotation,\r\n      );\r\n    }\r\n    return {\r\n      center: center.slice(0),\r\n      projection: projection !== undefined ? projection : null,\r\n      resolution: resolution,\r\n      nextCenter: this.nextCenter_,\r\n      nextResolution: this.nextResolution_,\r\n      nextRotation: this.nextRotation_,\r\n      rotation: rotation,\r\n      zoom: this.getZoom(),\r\n    };\r\n  }\r\n\r\n  /**\r\n   * @return {ViewStateLayerStateExtent} Like `FrameState`, but just `viewState` and `extent`.\r\n   */\r\n  getViewStateAndExtent() {\r\n    return {\r\n      viewState: this.getState(),\r\n      extent: this.calculateExtent(),\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Get the current zoom level. This method may return non-integer zoom levels\r\n   * if the view does not constrain the resolution, or if an interaction or\r\n   * animation is underway.\r\n   * @return {number|undefined} Zoom.\r\n   * @api\r\n   */\r\n  getZoom() {\r\n    let zoom;\r\n    const resolution = this.getResolution();\r\n    if (resolution !== undefined) {\r\n      zoom = this.getZoomForResolution(resolution);\r\n    }\r\n    return zoom;\r\n  }\r\n\r\n  /**\r\n   * Get the zoom level for a resolution.\r\n   * @param {number} resolution The resolution.\r\n   * @return {number|undefined} The zoom level for the provided resolution.\r\n   * @api\r\n   */\r\n  getZoomForResolution(resolution) {\r\n    let offset = this.minZoom_ || 0;\r\n    let max, zoomFactor;\r\n    if (this.resolutions_) {\r\n      const nearest = linearFindNearest(this.resolutions_, resolution, 1);\r\n      offset = nearest;\r\n      max = this.resolutions_[nearest];\r\n      if (nearest == this.resolutions_.length - 1) {\r\n        zoomFactor = 2;\r\n      } else {\r\n        zoomFactor = max / this.resolutions_[nearest + 1];\r\n      }\r\n    } else {\r\n      max = this.maxResolution_;\r\n      zoomFactor = this.zoomFactor_;\r\n    }\r\n    return offset + Math.log(max / resolution) / Math.log(zoomFactor);\r\n  }\r\n\r\n  /**\r\n   * Get the resolution for a zoom level.\r\n   * @param {number} zoom Zoom level.\r\n   * @return {number} The view resolution for the provided zoom level.\r\n   * @api\r\n   */\r\n  getResolutionForZoom(zoom) {\r\n    if (this.resolutions_?.length) {\r\n      if (this.resolutions_.length === 1) {\r\n        return this.resolutions_[0];\r\n      }\r\n      const baseLevel = clamp(\r\n        Math.floor(zoom),\r\n        0,\r\n        this.resolutions_.length - 2,\r\n      );\r\n      const zoomFactor =\r\n        this.resolutions_[baseLevel] / this.resolutions_[baseLevel + 1];\r\n      return (\r\n        this.resolutions_[baseLevel] /\r\n        Math.pow(zoomFactor, clamp(zoom - baseLevel, 0, 1))\r\n      );\r\n    }\r\n    return (\r\n      this.maxResolution_ / Math.pow(this.zoomFactor_, zoom - this.minZoom_)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Fit the given geometry or extent based on the given map size and border.\r\n   * The size is pixel dimensions of the box to fit the extent into.\r\n   * In most cases you will want to use the map size, that is `map.getSize()`.\r\n   * Takes care of the map angle.\r\n   * @param {import(\"./geom/SimpleGeometry.js\").default|import(\"./extent.js\").Extent} geometryOrExtent The geometry or\r\n   *     extent to fit the view to.\r\n   * @param {FitOptions} [options] Options.\r\n   * @api\r\n   */\r\n  fit(geometryOrExtent, options) {\r\n    /** @type {import(\"./geom/SimpleGeometry.js\").default} */\r\n    let geometry;\r\n    assert(\r\n      Array.isArray(geometryOrExtent) ||\r\n        typeof (/** @type {?} */ (geometryOrExtent).getSimplifiedGeometry) ===\r\n          'function',\r\n      'Invalid extent or geometry provided as `geometry`',\r\n    );\r\n    if (Array.isArray(geometryOrExtent)) {\r\n      assert(\r\n        !isEmpty(geometryOrExtent),\r\n        'Cannot fit empty extent provided as `geometry`',\r\n      );\r\n      const extent = fromUserExtent(geometryOrExtent, this.getProjection());\r\n      geometry = polygonFromExtent(extent);\r\n    } else if (geometryOrExtent.getType() === 'Circle') {\r\n      const extent = fromUserExtent(\r\n        geometryOrExtent.getExtent(),\r\n        this.getProjection(),\r\n      );\r\n      geometry = polygonFromExtent(extent);\r\n      geometry.rotate(this.getRotation(), getCenter(extent));\r\n    } else {\r\n      const userProjection = getUserProjection();\r\n      if (userProjection) {\r\n        geometry = /** @type {import(\"./geom/SimpleGeometry.js\").default} */ (\r\n          geometryOrExtent\r\n            .clone()\r\n            .transform(userProjection, this.getProjection())\r\n        );\r\n      } else {\r\n        geometry = geometryOrExtent;\r\n      }\r\n    }\r\n\r\n    this.fitInternal(geometry, options);\r\n  }\r\n\r\n  /**\r\n   * Calculate rotated extent\r\n   * @param {import(\"./geom/SimpleGeometry.js\").default} geometry The geometry.\r\n   * @return {import(\"./extent\").Extent} The rotated extent for the geometry.\r\n   */\r\n  rotatedExtentForGeometry(geometry) {\r\n    const rotation = this.getRotation();\r\n    const cosAngle = Math.cos(rotation);\r\n    const sinAngle = Math.sin(-rotation);\r\n    const coords = geometry.getFlatCoordinates();\r\n    const stride = geometry.getStride();\r\n    let minRotX = +Infinity;\r\n    let minRotY = +Infinity;\r\n    let maxRotX = -Infinity;\r\n    let maxRotY = -Infinity;\r\n    for (let i = 0, ii = coords.length; i < ii; i += stride) {\r\n      const rotX = coords[i] * cosAngle - coords[i + 1] * sinAngle;\r\n      const rotY = coords[i] * sinAngle + coords[i + 1] * cosAngle;\r\n      minRotX = Math.min(minRotX, rotX);\r\n      minRotY = Math.min(minRotY, rotY);\r\n      maxRotX = Math.max(maxRotX, rotX);\r\n      maxRotY = Math.max(maxRotY, rotY);\r\n    }\r\n    return [minRotX, minRotY, maxRotX, maxRotY];\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"./geom/SimpleGeometry.js\").default} geometry The geometry.\r\n   * @param {FitOptions} [options] Options.\r\n   */\r\n  fitInternal(geometry, options) {\r\n    options = options || {};\r\n    let size = options.size;\r\n    if (!size) {\r\n      size = this.getViewportSizeMinusPadding_();\r\n    }\r\n    const padding =\r\n      options.padding !== undefined ? options.padding : [0, 0, 0, 0];\r\n    const nearest = options.nearest !== undefined ? options.nearest : false;\r\n    let minResolution;\r\n    if (options.minResolution !== undefined) {\r\n      minResolution = options.minResolution;\r\n    } else if (options.maxZoom !== undefined) {\r\n      minResolution = this.getResolutionForZoom(options.maxZoom);\r\n    } else {\r\n      minResolution = 0;\r\n    }\r\n\r\n    const rotatedExtent = this.rotatedExtentForGeometry(geometry);\r\n\r\n    // calculate resolution\r\n    let resolution = this.getResolutionForExtentInternal(rotatedExtent, [\r\n      size[0] - padding[1] - padding[3],\r\n      size[1] - padding[0] - padding[2],\r\n    ]);\r\n    resolution = isNaN(resolution)\r\n      ? minResolution\r\n      : Math.max(resolution, minResolution);\r\n    resolution = this.getConstrainedResolution(resolution, nearest ? 0 : 1);\r\n\r\n    // calculate center\r\n    const rotation = this.getRotation();\r\n    const sinAngle = Math.sin(rotation);\r\n    const cosAngle = Math.cos(rotation);\r\n    const centerRot = getCenter(rotatedExtent);\r\n    centerRot[0] += ((padding[1] - padding[3]) / 2) * resolution;\r\n    centerRot[1] += ((padding[0] - padding[2]) / 2) * resolution;\r\n    const centerX = centerRot[0] * cosAngle - centerRot[1] * sinAngle;\r\n    const centerY = centerRot[1] * cosAngle + centerRot[0] * sinAngle;\r\n    const center = this.getConstrainedCenter([centerX, centerY], resolution);\r\n    const callback = options.callback ? options.callback : VOID;\r\n\r\n    if (options.duration !== undefined) {\r\n      this.animateInternal(\r\n        {\r\n          resolution: resolution,\r\n          center: center,\r\n          duration: options.duration,\r\n          easing: options.easing,\r\n        },\r\n        callback,\r\n      );\r\n    } else {\r\n      this.targetResolution_ = resolution;\r\n      this.targetCenter_ = center;\r\n      this.applyTargetState_(false, true);\r\n      animationCallback(callback, true);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Center on coordinate and view position.\r\n   * @param {import(\"./coordinate.js\").Coordinate} coordinate Coordinate.\r\n   * @param {import(\"./size.js\").Size} size Box pixel size.\r\n   * @param {import(\"./pixel.js\").Pixel} position Position on the view to center on.\r\n   * @api\r\n   */\r\n  centerOn(coordinate, size, position) {\r\n    this.centerOnInternal(\r\n      fromUserCoordinate(coordinate, this.getProjection()),\r\n      size,\r\n      position,\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"./coordinate.js\").Coordinate} coordinate Coordinate.\r\n   * @param {import(\"./size.js\").Size} size Box pixel size.\r\n   * @param {import(\"./pixel.js\").Pixel} position Position on the view to center on.\r\n   */\r\n  centerOnInternal(coordinate, size, position) {\r\n    this.setCenterInternal(\r\n      calculateCenterOn(\r\n        coordinate,\r\n        size,\r\n        position,\r\n        this.getResolution(),\r\n        this.getRotation(),\r\n      ),\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Calculates the shift between map and viewport center.\r\n   * @param {import(\"./coordinate.js\").Coordinate} center Center.\r\n   * @param {number} resolution Resolution.\r\n   * @param {number} rotation Rotation.\r\n   * @param {import(\"./size.js\").Size} size Size.\r\n   * @return {Array<number>|undefined} Center shift.\r\n   */\r\n  calculateCenterShift(center, resolution, rotation, size) {\r\n    let centerShift;\r\n    const padding = this.padding_;\r\n    if (padding && center) {\r\n      const reducedSize = this.getViewportSizeMinusPadding_(-rotation);\r\n      const shiftedCenter = calculateCenterOn(\r\n        center,\r\n        size,\r\n        [reducedSize[0] / 2 + padding[3], reducedSize[1] / 2 + padding[0]],\r\n        resolution,\r\n        rotation,\r\n      );\r\n      centerShift = [\r\n        center[0] - shiftedCenter[0],\r\n        center[1] - shiftedCenter[1],\r\n      ];\r\n    }\r\n    return centerShift;\r\n  }\r\n\r\n  /**\r\n   * @return {boolean} Is defined.\r\n   */\r\n  isDef() {\r\n    return !!this.getCenterInternal() && this.getResolution() !== undefined;\r\n  }\r\n\r\n  /**\r\n   * Adds relative coordinates to the center of the view. Any extent constraint will apply.\r\n   * @param {import(\"./coordinate.js\").Coordinate} deltaCoordinates Relative value to add.\r\n   * @api\r\n   */\r\n  adjustCenter(deltaCoordinates) {\r\n    const center = toUserCoordinate(this.targetCenter_, this.getProjection());\r\n    this.setCenter([\r\n      center[0] + deltaCoordinates[0],\r\n      center[1] + deltaCoordinates[1],\r\n    ]);\r\n  }\r\n\r\n  /**\r\n   * Adds relative coordinates to the center of the view. Any extent constraint will apply.\r\n   * @param {import(\"./coordinate.js\").Coordinate} deltaCoordinates Relative value to add.\r\n   */\r\n  adjustCenterInternal(deltaCoordinates) {\r\n    const center = this.targetCenter_;\r\n    this.setCenterInternal([\r\n      center[0] + deltaCoordinates[0],\r\n      center[1] + deltaCoordinates[1],\r\n    ]);\r\n  }\r\n\r\n  /**\r\n   * Multiply the view resolution by a ratio, optionally using an anchor. Any resolution\r\n   * constraint will apply.\r\n   * @param {number} ratio The ratio to apply on the view resolution.\r\n   * @param {import(\"./coordinate.js\").Coordinate} [anchor] The origin of the transformation.\r\n   * @api\r\n   */\r\n  adjustResolution(ratio, anchor) {\r\n    anchor = anchor && fromUserCoordinate(anchor, this.getProjection());\r\n    this.adjustResolutionInternal(ratio, anchor);\r\n  }\r\n\r\n  /**\r\n   * Multiply the view resolution by a ratio, optionally using an anchor. Any resolution\r\n   * constraint will apply.\r\n   * @param {number} ratio The ratio to apply on the view resolution.\r\n   * @param {import(\"./coordinate.js\").Coordinate} [anchor] The origin of the transformation.\r\n   */\r\n  adjustResolutionInternal(ratio, anchor) {\r\n    const isMoving = this.getAnimating() || this.getInteracting();\r\n    const size = this.getViewportSize_(this.getRotation());\r\n    const newResolution = this.constraints_.resolution(\r\n      this.targetResolution_ * ratio,\r\n      0,\r\n      size,\r\n      isMoving,\r\n    );\r\n\r\n    if (anchor) {\r\n      this.targetCenter_ = this.calculateCenterZoom(newResolution, anchor);\r\n    }\r\n\r\n    this.targetResolution_ *= ratio;\r\n    this.applyTargetState_();\r\n  }\r\n\r\n  /**\r\n   * Adds a value to the view zoom level, optionally using an anchor. Any resolution\r\n   * constraint will apply.\r\n   * @param {number} delta Relative value to add to the zoom level.\r\n   * @param {import(\"./coordinate.js\").Coordinate} [anchor] The origin of the transformation.\r\n   * @api\r\n   */\r\n  adjustZoom(delta, anchor) {\r\n    this.adjustResolution(Math.pow(this.zoomFactor_, -delta), anchor);\r\n  }\r\n\r\n  /**\r\n   * Adds a value to the view rotation, optionally using an anchor. Any rotation\r\n   * constraint will apply.\r\n   * @param {number} delta Relative value to add to the zoom rotation, in radians.\r\n   * @param {import(\"./coordinate.js\").Coordinate} [anchor] The rotation center.\r\n   * @api\r\n   */\r\n  adjustRotation(delta, anchor) {\r\n    if (anchor) {\r\n      anchor = fromUserCoordinate(anchor, this.getProjection());\r\n    }\r\n    this.adjustRotationInternal(delta, anchor);\r\n  }\r\n\r\n  /**\r\n   * @param {number} delta Relative value to add to the zoom rotation, in radians.\r\n   * @param {import(\"./coordinate.js\").Coordinate} [anchor] The rotation center.\r\n   */\r\n  adjustRotationInternal(delta, anchor) {\r\n    const isMoving = this.getAnimating() || this.getInteracting();\r\n    const newRotation = this.constraints_.rotation(\r\n      this.targetRotation_ + delta,\r\n      isMoving,\r\n    );\r\n    if (anchor) {\r\n      this.targetCenter_ = this.calculateCenterRotate(newRotation, anchor);\r\n    }\r\n    this.targetRotation_ += delta;\r\n    this.applyTargetState_();\r\n  }\r\n\r\n  /**\r\n   * Set the center of the current view. Any extent constraint will apply.\r\n   * @param {import(\"./coordinate.js\").Coordinate|undefined} center The center of the view.\r\n   * @observable\r\n   * @api\r\n   */\r\n  setCenter(center) {\r\n    this.setCenterInternal(\r\n      center ? fromUserCoordinate(center, this.getProjection()) : center,\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Set the center using the view projection (not the user projection).\r\n   * @param {import(\"./coordinate.js\").Coordinate|undefined} center The center of the view.\r\n   */\r\n  setCenterInternal(center) {\r\n    this.targetCenter_ = center;\r\n    this.applyTargetState_();\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"./ViewHint.js\").default} hint Hint.\r\n   * @param {number} delta Delta.\r\n   * @return {number} New value.\r\n   */\r\n  setHint(hint, delta) {\r\n    this.hints_[hint] += delta;\r\n    this.changed();\r\n    return this.hints_[hint];\r\n  }\r\n\r\n  /**\r\n   * Set the resolution for this view. Any resolution constraint will apply.\r\n   * @param {number|undefined} resolution The resolution of the view.\r\n   * @observable\r\n   * @api\r\n   */\r\n  setResolution(resolution) {\r\n    this.targetResolution_ = resolution;\r\n    this.applyTargetState_();\r\n  }\r\n\r\n  /**\r\n   * Set the rotation for this view. Any rotation constraint will apply.\r\n   * @param {number} rotation The rotation of the view in radians.\r\n   * @observable\r\n   * @api\r\n   */\r\n  setRotation(rotation) {\r\n    this.targetRotation_ = rotation;\r\n    this.applyTargetState_();\r\n  }\r\n\r\n  /**\r\n   * Zoom to a specific zoom level. Any resolution constrain will apply.\r\n   * @param {number} zoom Zoom level.\r\n   * @api\r\n   */\r\n  setZoom(zoom) {\r\n    this.setResolution(this.getResolutionForZoom(zoom));\r\n  }\r\n\r\n  /**\r\n   * Recompute rotation/resolution/center based on target values.\r\n   * Note: we have to compute rotation first, then resolution and center considering that\r\n   * parameters can influence one another in case a view extent constraint is present.\r\n   * @param {boolean} [doNotCancelAnims] Do not cancel animations.\r\n   * @param {boolean} [forceMoving] Apply constraints as if the view is moving.\r\n   * @private\r\n   */\r\n  applyTargetState_(doNotCancelAnims, forceMoving) {\r\n    const isMoving =\r\n      this.getAnimating() || this.getInteracting() || forceMoving;\r\n\r\n    // compute rotation\r\n    const newRotation = this.constraints_.rotation(\r\n      this.targetRotation_,\r\n      isMoving,\r\n    );\r\n    const size = this.getViewportSize_(newRotation);\r\n    const newResolution = this.constraints_.resolution(\r\n      this.targetResolution_,\r\n      0,\r\n      size,\r\n      isMoving,\r\n    );\r\n    const newCenter = this.constraints_.center(\r\n      this.targetCenter_,\r\n      newResolution,\r\n      size,\r\n      isMoving,\r\n      this.calculateCenterShift(\r\n        this.targetCenter_,\r\n        newResolution,\r\n        newRotation,\r\n        size,\r\n      ),\r\n    );\r\n\r\n    if (this.get(ViewProperty.ROTATION) !== newRotation) {\r\n      this.set(ViewProperty.ROTATION, newRotation);\r\n    }\r\n    if (this.get(ViewProperty.RESOLUTION) !== newResolution) {\r\n      this.set(ViewProperty.RESOLUTION, newResolution);\r\n      this.set('zoom', this.getZoom(), true);\r\n    }\r\n    if (\r\n      !newCenter ||\r\n      !this.get(ViewProperty.CENTER) ||\r\n      !equals(this.get(ViewProperty.CENTER), newCenter)\r\n    ) {\r\n      this.set(ViewProperty.CENTER, newCenter);\r\n    }\r\n\r\n    if (this.getAnimating() && !doNotCancelAnims) {\r\n      this.cancelAnimations();\r\n    }\r\n    this.cancelAnchor_ = undefined;\r\n  }\r\n\r\n  /**\r\n   * If any constraints need to be applied, an animation will be triggered.\r\n   * This is typically done on interaction end.\r\n   * Note: calling this with a duration of 0 will apply the constrained values straight away,\r\n   * without animation.\r\n   * @param {number} [duration] The animation duration in ms.\r\n   * @param {number} [resolutionDirection] Which direction to zoom.\r\n   * @param {import(\"./coordinate.js\").Coordinate} [anchor] The origin of the transformation.\r\n   */\r\n  resolveConstraints(duration, resolutionDirection, anchor) {\r\n    duration = duration !== undefined ? duration : 200;\r\n    const direction = resolutionDirection || 0;\r\n\r\n    const newRotation = this.constraints_.rotation(this.targetRotation_);\r\n    const size = this.getViewportSize_(newRotation);\r\n    const newResolution = this.constraints_.resolution(\r\n      this.targetResolution_,\r\n      direction,\r\n      size,\r\n    );\r\n    const newCenter = this.constraints_.center(\r\n      this.targetCenter_,\r\n      newResolution,\r\n      size,\r\n      false,\r\n      this.calculateCenterShift(\r\n        this.targetCenter_,\r\n        newResolution,\r\n        newRotation,\r\n        size,\r\n      ),\r\n    );\r\n\r\n    if (duration === 0 && !this.cancelAnchor_) {\r\n      this.targetResolution_ = newResolution;\r\n      this.targetRotation_ = newRotation;\r\n      this.targetCenter_ = newCenter;\r\n      this.applyTargetState_();\r\n      return;\r\n    }\r\n\r\n    anchor = anchor || (duration === 0 ? this.cancelAnchor_ : undefined);\r\n    this.cancelAnchor_ = undefined;\r\n\r\n    if (\r\n      this.getResolution() !== newResolution ||\r\n      this.getRotation() !== newRotation ||\r\n      !this.getCenterInternal() ||\r\n      !equals(this.getCenterInternal(), newCenter)\r\n    ) {\r\n      if (this.getAnimating()) {\r\n        this.cancelAnimations();\r\n      }\r\n\r\n      this.animateInternal({\r\n        rotation: newRotation,\r\n        center: newCenter,\r\n        resolution: newResolution,\r\n        duration: duration,\r\n        easing: easeOut,\r\n        anchor: anchor,\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Notify the View that an interaction has started.\r\n   * The view state will be resolved to a stable one if needed\r\n   * (depending on its constraints).\r\n   * @api\r\n   */\r\n  beginInteraction() {\r\n    this.resolveConstraints(0);\r\n\r\n    this.setHint(ViewHint.INTERACTING, 1);\r\n  }\r\n\r\n  /**\r\n   * Notify the View that an interaction has ended. The view state will be resolved\r\n   * to a stable one if needed (depending on its constraints).\r\n   * @param {number} [duration] Animation duration in ms.\r\n   * @param {number} [resolutionDirection] Which direction to zoom.\r\n   * @param {import(\"./coordinate.js\").Coordinate} [anchor] The origin of the transformation.\r\n   * @api\r\n   */\r\n  endInteraction(duration, resolutionDirection, anchor) {\r\n    anchor = anchor && fromUserCoordinate(anchor, this.getProjection());\r\n    this.endInteractionInternal(duration, resolutionDirection, anchor);\r\n  }\r\n\r\n  /**\r\n   * Notify the View that an interaction has ended. The view state will be resolved\r\n   * to a stable one if needed (depending on its constraints).\r\n   * @param {number} [duration] Animation duration in ms.\r\n   * @param {number} [resolutionDirection] Which direction to zoom.\r\n   * @param {import(\"./coordinate.js\").Coordinate} [anchor] The origin of the transformation.\r\n   */\r\n  endInteractionInternal(duration, resolutionDirection, anchor) {\r\n    if (!this.getInteracting()) {\r\n      return;\r\n    }\r\n    this.setHint(ViewHint.INTERACTING, -1);\r\n    this.resolveConstraints(duration, resolutionDirection, anchor);\r\n  }\r\n\r\n  /**\r\n   * Get a valid position for the view center according to the current constraints.\r\n   * @param {import(\"./coordinate.js\").Coordinate|undefined} targetCenter Target center position.\r\n   * @param {number} [targetResolution] Target resolution. If not supplied, the current one will be used.\r\n   * This is useful to guess a valid center position at a different zoom level.\r\n   * @return {import(\"./coordinate.js\").Coordinate|undefined} Valid center position.\r\n   */\r\n  getConstrainedCenter(targetCenter, targetResolution) {\r\n    const size = this.getViewportSize_(this.getRotation());\r\n    return this.constraints_.center(\r\n      targetCenter,\r\n      targetResolution || this.getResolution(),\r\n      size,\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Get a valid zoom level according to the current view constraints.\r\n   * @param {number|undefined} targetZoom Target zoom.\r\n   * @param {number} [direction] Indicate which resolution should be used\r\n   * by a renderer if the view resolution does not match any resolution of the tile source.\r\n   * If 0, the nearest resolution will be used. If 1, the nearest lower resolution\r\n   * will be used. If -1, the nearest higher resolution will be used.\r\n   * @return {number|undefined} Valid zoom level.\r\n   */\r\n  getConstrainedZoom(targetZoom, direction) {\r\n    const targetRes = this.getResolutionForZoom(targetZoom);\r\n    return this.getZoomForResolution(\r\n      this.getConstrainedResolution(targetRes, direction),\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Get a valid resolution according to the current view constraints.\r\n   * @param {number|undefined} targetResolution Target resolution.\r\n   * @param {number} [direction] Indicate which resolution should be used\r\n   * by a renderer if the view resolution does not match any resolution of the tile source.\r\n   * If 0, the nearest resolution will be used. If 1, the nearest lower resolution\r\n   * will be used. If -1, the nearest higher resolution will be used.\r\n   * @return {number|undefined} Valid resolution.\r\n   */\r\n  getConstrainedResolution(targetResolution, direction) {\r\n    direction = direction || 0;\r\n    const size = this.getViewportSize_(this.getRotation());\r\n\r\n    return this.constraints_.resolution(targetResolution, direction, size);\r\n  }\r\n}\r\n\r\n/**\r\n * @param {Function} callback Callback.\r\n * @param {*} returnValue Return value.\r\n */\r\nfunction animationCallback(callback, returnValue) {\r\n  setTimeout(function () {\r\n    callback(returnValue);\r\n  }, 0);\r\n}\r\n\r\n/**\r\n * @param {ViewOptions} options View options.\r\n * @return {import(\"./centerconstraint.js\").Type} The constraint.\r\n */\r\nexport function createCenterConstraint(options) {\r\n  if (options.extent !== undefined) {\r\n    const smooth =\r\n      options.smoothExtentConstraint !== undefined\r\n        ? options.smoothExtentConstraint\r\n        : true;\r\n    return createExtent(options.extent, options.constrainOnlyCenter, smooth);\r\n  }\r\n\r\n  const projection = createProjection(options.projection, 'EPSG:3857');\r\n  if (options.multiWorld !== true && projection.isGlobal()) {\r\n    const extent = projection.getExtent().slice();\r\n    extent[0] = -Infinity;\r\n    extent[2] = Infinity;\r\n    return createExtent(extent, false, false);\r\n  }\r\n\r\n  return centerNone;\r\n}\r\n\r\n/**\r\n * @param {ViewOptions} options View options.\r\n * @return {{constraint: import(\"./resolutionconstraint.js\").Type, maxResolution: number,\r\n *     minResolution: number, minZoom: number, zoomFactor: number}} The constraint.\r\n */\r\nexport function createResolutionConstraint(options) {\r\n  let resolutionConstraint;\r\n  let maxResolution;\r\n  let minResolution;\r\n\r\n  // TODO: move these to be ol constants\r\n  // see https://github.com/openlayers/openlayers/issues/2076\r\n  const defaultMaxZoom = 28;\r\n  const defaultZoomFactor = 2;\r\n\r\n  let minZoom =\r\n    options.minZoom !== undefined ? options.minZoom : DEFAULT_MIN_ZOOM;\r\n\r\n  let maxZoom =\r\n    options.maxZoom !== undefined ? options.maxZoom : defaultMaxZoom;\r\n\r\n  const zoomFactor =\r\n    options.zoomFactor !== undefined ? options.zoomFactor : defaultZoomFactor;\r\n\r\n  const multiWorld =\r\n    options.multiWorld !== undefined ? options.multiWorld : false;\r\n\r\n  const smooth =\r\n    options.smoothResolutionConstraint !== undefined\r\n      ? options.smoothResolutionConstraint\r\n      : true;\r\n\r\n  const showFullExtent =\r\n    options.showFullExtent !== undefined ? options.showFullExtent : false;\r\n\r\n  const projection = createProjection(options.projection, 'EPSG:3857');\r\n  const projExtent = projection.getExtent();\r\n  let constrainOnlyCenter = options.constrainOnlyCenter;\r\n  let extent = options.extent;\r\n  if (!multiWorld && !extent && projection.isGlobal()) {\r\n    constrainOnlyCenter = false;\r\n    extent = projExtent;\r\n  }\r\n\r\n  if (options.resolutions !== undefined) {\r\n    const resolutions = options.resolutions;\r\n    maxResolution = resolutions[minZoom];\r\n    minResolution =\r\n      resolutions[maxZoom] !== undefined\r\n        ? resolutions[maxZoom]\r\n        : resolutions[resolutions.length - 1];\r\n\r\n    if (options.constrainResolution) {\r\n      resolutionConstraint = createSnapToResolutions(\r\n        resolutions,\r\n        smooth,\r\n        !constrainOnlyCenter && extent,\r\n        showFullExtent,\r\n      );\r\n    } else {\r\n      resolutionConstraint = createMinMaxResolution(\r\n        maxResolution,\r\n        minResolution,\r\n        smooth,\r\n        !constrainOnlyCenter && extent,\r\n        showFullExtent,\r\n      );\r\n    }\r\n  } else {\r\n    // calculate the default min and max resolution\r\n    const size = !projExtent\r\n      ? // use an extent that can fit the whole world if need be\r\n        (360 * METERS_PER_UNIT.degrees) / projection.getMetersPerUnit()\r\n      : Math.max(getWidth(projExtent), getHeight(projExtent));\r\n\r\n    const defaultMaxResolution =\r\n      size / DEFAULT_TILE_SIZE / Math.pow(defaultZoomFactor, DEFAULT_MIN_ZOOM);\r\n\r\n    const defaultMinResolution =\r\n      defaultMaxResolution /\r\n      Math.pow(defaultZoomFactor, defaultMaxZoom - DEFAULT_MIN_ZOOM);\r\n\r\n    // user provided maxResolution takes precedence\r\n    maxResolution = options.maxResolution;\r\n    if (maxResolution !== undefined) {\r\n      minZoom = 0;\r\n    } else {\r\n      maxResolution = defaultMaxResolution / Math.pow(zoomFactor, minZoom);\r\n    }\r\n\r\n    // user provided minResolution takes precedence\r\n    minResolution = options.minResolution;\r\n    if (minResolution === undefined) {\r\n      if (options.maxZoom !== undefined) {\r\n        if (options.maxResolution !== undefined) {\r\n          minResolution = maxResolution / Math.pow(zoomFactor, maxZoom);\r\n        } else {\r\n          minResolution = defaultMaxResolution / Math.pow(zoomFactor, maxZoom);\r\n        }\r\n      } else {\r\n        minResolution = defaultMinResolution;\r\n      }\r\n    }\r\n\r\n    // given discrete zoom levels, minResolution may be different than provided\r\n    maxZoom =\r\n      minZoom +\r\n      Math.floor(\r\n        Math.log(maxResolution / minResolution) / Math.log(zoomFactor),\r\n      );\r\n    minResolution = maxResolution / Math.pow(zoomFactor, maxZoom - minZoom);\r\n\r\n    if (options.constrainResolution) {\r\n      resolutionConstraint = createSnapToPower(\r\n        zoomFactor,\r\n        maxResolution,\r\n        minResolution,\r\n        smooth,\r\n        !constrainOnlyCenter && extent,\r\n        showFullExtent,\r\n      );\r\n    } else {\r\n      resolutionConstraint = createMinMaxResolution(\r\n        maxResolution,\r\n        minResolution,\r\n        smooth,\r\n        !constrainOnlyCenter && extent,\r\n        showFullExtent,\r\n      );\r\n    }\r\n  }\r\n  return {\r\n    constraint: resolutionConstraint,\r\n    maxResolution: maxResolution,\r\n    minResolution: minResolution,\r\n    minZoom: minZoom,\r\n    zoomFactor: zoomFactor,\r\n  };\r\n}\r\n\r\n/**\r\n * @param {ViewOptions} options View options.\r\n * @return {import(\"./rotationconstraint.js\").Type} Rotation constraint.\r\n */\r\nexport function createRotationConstraint(options) {\r\n  const enableRotation =\r\n    options.enableRotation !== undefined ? options.enableRotation : true;\r\n  if (enableRotation) {\r\n    const constrainRotation = options.constrainRotation;\r\n    if (constrainRotation === undefined || constrainRotation === true) {\r\n      return createSnapToZero();\r\n    }\r\n    if (constrainRotation === false) {\r\n      return rotationNone;\r\n    }\r\n    if (typeof constrainRotation === 'number') {\r\n      return createSnapToN(constrainRotation);\r\n    }\r\n    return rotationNone;\r\n  }\r\n  return disable;\r\n}\r\n\r\n/**\r\n * Determine if an animation involves no view change.\r\n * @param {Animation} animation The animation.\r\n * @return {boolean} The animation involves no view change.\r\n */\r\nexport function isNoopAnimation(animation) {\r\n  if (animation.sourceCenter && animation.targetCenter) {\r\n    if (!coordinatesEqual(animation.sourceCenter, animation.targetCenter)) {\r\n      return false;\r\n    }\r\n  }\r\n  if (animation.sourceResolution !== animation.targetResolution) {\r\n    return false;\r\n  }\r\n  if (animation.sourceRotation !== animation.targetRotation) {\r\n    return false;\r\n  }\r\n  return true;\r\n}\r\n\r\n/**\r\n * @param {import(\"./coordinate.js\").Coordinate} coordinate Coordinate.\r\n * @param {import(\"./size.js\").Size} size Box pixel size.\r\n * @param {import(\"./pixel.js\").Pixel} position Position on the view to center on.\r\n * @param {number} resolution Resolution.\r\n * @param {number} rotation Rotation.\r\n * @return {import(\"./coordinate.js\").Coordinate} Shifted center.\r\n */\r\nfunction calculateCenterOn(coordinate, size, position, resolution, rotation) {\r\n  // calculate rotated position\r\n  const cosAngle = Math.cos(-rotation);\r\n  let sinAngle = Math.sin(-rotation);\r\n  let rotX = coordinate[0] * cosAngle - coordinate[1] * sinAngle;\r\n  let rotY = coordinate[1] * cosAngle + coordinate[0] * sinAngle;\r\n  rotX += (size[0] / 2 - position[0]) * resolution;\r\n  rotY += (position[1] - size[1] / 2) * resolution;\r\n\r\n  // go back to original angle\r\n  sinAngle = -sinAngle; // go back to original rotation\r\n  const centerX = rotX * cosAngle - rotY * sinAngle;\r\n  const centerY = rotY * cosAngle + rotX * sinAngle;\r\n\r\n  return [centerX, centerY];\r\n}\r\n\r\nexport default View;\r\n","/**\r\n * @module ol/ViewHint\r\n */\r\n\r\n/**\r\n * @enum {number}\r\n */\r\nexport default {\r\n  ANIMATING: 0,\r\n  INTERACTING: 1,\r\n};\r\n","/**\r\n * @module ol/ViewProperty\r\n */\r\n\r\n/**\r\n * @enum {string}\r\n */\r\nexport default {\r\n  CENTER: 'center',\r\n  RESOLUTION: 'resolution',\r\n  ROTATION: 'rotation',\r\n};\r\n","/**\r\n * @module ol/centerconstraint\r\n */\r\nimport {clamp} from './math.js';\r\n\r\n/**\r\n * @typedef {function((import(\"./coordinate.js\").Coordinate|undefined), number, import(\"./size.js\").Size, boolean=, Array<number>=): (import(\"./coordinate.js\").Coordinate|undefined)} Type\r\n */\r\n\r\n/**\r\n * @param {import(\"./extent.js\").Extent} extent Extent.\r\n * @param {boolean} onlyCenter If true, the constraint will only apply to the view center.\r\n * @param {boolean} smooth If true, the view will be able to go slightly out of the given extent\r\n * (only during interaction and animation).\r\n * @return {Type} The constraint.\r\n */\r\nexport function createExtent(extent, onlyCenter, smooth) {\r\n  return (\r\n    /**\r\n     * @param {import(\"./coordinate.js\").Coordinate|undefined} center Center.\r\n     * @param {number|undefined} resolution Resolution.\r\n     * @param {import(\"./size.js\").Size} size Viewport size; unused if `onlyCenter` was specified.\r\n     * @param {boolean} [isMoving] True if an interaction or animation is in progress.\r\n     * @param {Array<number>} [centerShift] Shift between map center and viewport center.\r\n     * @return {import(\"./coordinate.js\").Coordinate|undefined} Center.\r\n     */\r\n    function (center, resolution, size, isMoving, centerShift) {\r\n      if (!center) {\r\n        return undefined;\r\n      }\r\n      if (!resolution && !onlyCenter) {\r\n        return center;\r\n      }\r\n      const viewWidth = onlyCenter ? 0 : size[0] * resolution;\r\n      const viewHeight = onlyCenter ? 0 : size[1] * resolution;\r\n      const shiftX = centerShift ? centerShift[0] : 0;\r\n      const shiftY = centerShift ? centerShift[1] : 0;\r\n      let minX = extent[0] + viewWidth / 2 + shiftX;\r\n      let maxX = extent[2] - viewWidth / 2 + shiftX;\r\n      let minY = extent[1] + viewHeight / 2 + shiftY;\r\n      let maxY = extent[3] - viewHeight / 2 + shiftY;\r\n\r\n      // note: when zooming out of bounds, min and max values for x and y may\r\n      // end up inverted (min > max); this has to be accounted for\r\n      if (minX > maxX) {\r\n        minX = (maxX + minX) / 2;\r\n        maxX = minX;\r\n      }\r\n      if (minY > maxY) {\r\n        minY = (maxY + minY) / 2;\r\n        maxY = minY;\r\n      }\r\n\r\n      let x = clamp(center[0], minX, maxX);\r\n      let y = clamp(center[1], minY, maxY);\r\n\r\n      // during an interaction, allow some overscroll\r\n      if (isMoving && smooth && resolution) {\r\n        const ratio = 30 * resolution;\r\n        x +=\r\n          -ratio * Math.log(1 + Math.max(0, minX - center[0]) / ratio) +\r\n          ratio * Math.log(1 + Math.max(0, center[0] - maxX) / ratio);\r\n        y +=\r\n          -ratio * Math.log(1 + Math.max(0, minY - center[1]) / ratio) +\r\n          ratio * Math.log(1 + Math.max(0, center[1] - maxY) / ratio);\r\n      }\r\n\r\n      return [x, y];\r\n    }\r\n  );\r\n}\r\n\r\n/**\r\n * @param {import(\"./coordinate.js\").Coordinate} [center] Center.\r\n * @return {import(\"./coordinate.js\").Coordinate|undefined} Center.\r\n */\r\nexport function none(center) {\r\n  return center;\r\n}\r\n","/**\r\n * @module ol/math\r\n */\r\n\r\n/**\r\n * Takes a number and clamps it to within the provided bounds.\r\n * @param {number} value The input number.\r\n * @param {number} min The minimum value to return.\r\n * @param {number} max The maximum value to return.\r\n * @return {number} The input number if it is within bounds, or the nearest\r\n *     number within the bounds.\r\n */\r\nexport function clamp(value, min, max) {\r\n  return Math.min(Math.max(value, min), max);\r\n}\r\n\r\n/**\r\n * Returns the square of the closest distance between the point (x, y) and the\r\n * line segment (x1, y1) to (x2, y2).\r\n * @param {number} x X.\r\n * @param {number} y Y.\r\n * @param {number} x1 X1.\r\n * @param {number} y1 Y1.\r\n * @param {number} x2 X2.\r\n * @param {number} y2 Y2.\r\n * @return {number} Squared distance.\r\n */\r\nexport function squaredSegmentDistance(x, y, x1, y1, x2, y2) {\r\n  const dx = x2 - x1;\r\n  const dy = y2 - y1;\r\n  if (dx !== 0 || dy !== 0) {\r\n    const t = ((x - x1) * dx + (y - y1) * dy) / (dx * dx + dy * dy);\r\n    if (t > 1) {\r\n      x1 = x2;\r\n      y1 = y2;\r\n    } else if (t > 0) {\r\n      x1 += dx * t;\r\n      y1 += dy * t;\r\n    }\r\n  }\r\n  return squaredDistance(x, y, x1, y1);\r\n}\r\n\r\n/**\r\n * Returns the square of the distance between the points (x1, y1) and (x2, y2).\r\n * @param {number} x1 X1.\r\n * @param {number} y1 Y1.\r\n * @param {number} x2 X2.\r\n * @param {number} y2 Y2.\r\n * @return {number} Squared distance.\r\n */\r\nexport function squaredDistance(x1, y1, x2, y2) {\r\n  const dx = x2 - x1;\r\n  const dy = y2 - y1;\r\n  return dx * dx + dy * dy;\r\n}\r\n\r\n/**\r\n * Solves system of linear equations using Gaussian elimination method.\r\n *\r\n * @param {Array<Array<number>>} mat Augmented matrix (n x n + 1 column)\r\n *                                     in row-major order.\r\n * @return {Array<number>|null} The resulting vector.\r\n */\r\nexport function solveLinearSystem(mat) {\r\n  const n = mat.length;\r\n\r\n  for (let i = 0; i < n; i++) {\r\n    // Find max in the i-th column (ignoring i - 1 first rows)\r\n    let maxRow = i;\r\n    let maxEl = Math.abs(mat[i][i]);\r\n    for (let r = i + 1; r < n; r++) {\r\n      const absValue = Math.abs(mat[r][i]);\r\n      if (absValue > maxEl) {\r\n        maxEl = absValue;\r\n        maxRow = r;\r\n      }\r\n    }\r\n\r\n    if (maxEl === 0) {\r\n      return null; // matrix is singular\r\n    }\r\n\r\n    // Swap max row with i-th (current) row\r\n    const tmp = mat[maxRow];\r\n    mat[maxRow] = mat[i];\r\n    mat[i] = tmp;\r\n\r\n    // Subtract the i-th row to make all the remaining rows 0 in the i-th column\r\n    for (let j = i + 1; j < n; j++) {\r\n      const coef = -mat[j][i] / mat[i][i];\r\n      for (let k = i; k < n + 1; k++) {\r\n        if (i == k) {\r\n          mat[j][k] = 0;\r\n        } else {\r\n          mat[j][k] += coef * mat[i][k];\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // Solve Ax=b for upper triangular matrix A (mat)\r\n  const x = new Array(n);\r\n  for (let l = n - 1; l >= 0; l--) {\r\n    x[l] = mat[l][n] / mat[l][l];\r\n    for (let m = l - 1; m >= 0; m--) {\r\n      mat[m][n] -= mat[m][l] * x[l];\r\n    }\r\n  }\r\n  return x;\r\n}\r\n\r\n/**\r\n * Converts radians to to degrees.\r\n *\r\n * @param {number} angleInRadians Angle in radians.\r\n * @return {number} Angle in degrees.\r\n */\r\nexport function toDegrees(angleInRadians) {\r\n  return (angleInRadians * 180) / Math.PI;\r\n}\r\n\r\n/**\r\n * Converts degrees to radians.\r\n *\r\n * @param {number} angleInDegrees Angle in degrees.\r\n * @return {number} Angle in radians.\r\n */\r\nexport function toRadians(angleInDegrees) {\r\n  return (angleInDegrees * Math.PI) / 180;\r\n}\r\n\r\n/**\r\n * Returns the modulo of a / b, depending on the sign of b.\r\n *\r\n * @param {number} a Dividend.\r\n * @param {number} b Divisor.\r\n * @return {number} Modulo.\r\n */\r\nexport function modulo(a, b) {\r\n  const r = a % b;\r\n  return r * b < 0 ? r + b : r;\r\n}\r\n\r\n/**\r\n * Calculates the linearly interpolated value of x between a and b.\r\n *\r\n * @param {number} a Number\r\n * @param {number} b Number\r\n * @param {number} x Value to be interpolated.\r\n * @return {number} Interpolated value.\r\n */\r\nexport function lerp(a, b, x) {\r\n  return a + x * (b - a);\r\n}\r\n\r\n/**\r\n * Returns a number with a limited number of decimal digits.\r\n * @param {number} n The input number.\r\n * @param {number} decimals The maximum number of decimal digits.\r\n * @return {number} The input number with a limited number of decimal digits.\r\n */\r\nexport function toFixed(n, decimals) {\r\n  const factor = Math.pow(10, decimals);\r\n  return Math.round(n * factor) / factor;\r\n}\r\n\r\n/**\r\n * Rounds a number to the nearest integer value considering only the given number\r\n * of decimal digits (with rounding on the final digit).\r\n * @param {number} n The input number.\r\n * @param {number} decimals The maximum number of decimal digits.\r\n * @return {number} The nearest integer.\r\n */\r\nexport function round(n, decimals) {\r\n  return Math.round(toFixed(n, decimals));\r\n}\r\n\r\n/**\r\n * Rounds a number to the next smaller integer considering only the given number\r\n * of decimal digits (with rounding on the final digit).\r\n * @param {number} n The input number.\r\n * @param {number} decimals The maximum number of decimal digits.\r\n * @return {number} The next smaller integer.\r\n */\r\nexport function floor(n, decimals) {\r\n  return Math.floor(toFixed(n, decimals));\r\n}\r\n\r\n/**\r\n * Rounds a number to the next bigger integer considering only the given number\r\n * of decimal digits (with rounding on the final digit).\r\n * @param {number} n The input number.\r\n * @param {number} decimals The maximum number of decimal digits.\r\n * @return {number} The next bigger integer.\r\n */\r\nexport function ceil(n, decimals) {\r\n  return Math.ceil(toFixed(n, decimals));\r\n}\r\n\r\n/**\r\n * Wraps a number between some minimum and maximum values.\r\n * @param {number} n The number to wrap.\r\n * @param {number} min The minimum of the range (inclusive).\r\n * @param {number} max The maximum of the range (exclusive).\r\n * @return {number} The wrapped number.\r\n */\r\nexport function wrap(n, min, max) {\r\n  if (n >= min && n < max) {\r\n    return n;\r\n  }\r\n  const range = max - min;\r\n  return ((((n - min) % range) + range) % range) + min;\r\n}\r\n","/**\r\n * @module ol/coordinate\r\n */\r\nimport {getWidth} from './extent.js';\r\nimport {modulo, toFixed} from './math.js';\r\nimport {padNumber} from './string.js';\r\n\r\n/**\r\n * An array of numbers representing an `xy`, `xyz` or `xyzm` coordinate.\r\n * Example: `[16, 48]`.\r\n * @typedef {Array<number>} Coordinate\r\n * @api\r\n */\r\n\r\n/**\r\n * A function that takes a {@link module:ol/coordinate~Coordinate} and\r\n * transforms it into a `{string}`.\r\n *\r\n * @typedef {function((Coordinate|undefined)): string} CoordinateFormat\r\n * @api\r\n */\r\n\r\n/**\r\n * Add `delta` to `coordinate`. `coordinate` is modified in place and returned\r\n * by the function.\r\n *\r\n * Example:\r\n *\r\n *     import {add} from 'ol/coordinate.js';\r\n *\r\n *     const coord = [7.85, 47.983333];\r\n *     add(coord, [-2, 4]);\r\n *     // coord is now [5.85, 51.983333]\r\n *\r\n * @param {Coordinate} coordinate Coordinate.\r\n * @param {Coordinate} delta Delta.\r\n * @return {Coordinate} The input coordinate adjusted by\r\n * the given delta.\r\n * @api\r\n */\r\nexport function add(coordinate, delta) {\r\n  coordinate[0] += +delta[0];\r\n  coordinate[1] += +delta[1];\r\n  return coordinate;\r\n}\r\n\r\n/**\r\n * Calculates the point closest to the passed coordinate on the passed circle.\r\n *\r\n * @param {Coordinate} coordinate The coordinate.\r\n * @param {import(\"./geom/Circle.js\").default} circle The circle.\r\n * @return {Coordinate} Closest point on the circumference.\r\n */\r\nexport function closestOnCircle(coordinate, circle) {\r\n  const r = circle.getRadius();\r\n  const center = circle.getCenter();\r\n  const x0 = center[0];\r\n  const y0 = center[1];\r\n  const x1 = coordinate[0];\r\n  const y1 = coordinate[1];\r\n\r\n  let dx = x1 - x0;\r\n  const dy = y1 - y0;\r\n  if (dx === 0 && dy === 0) {\r\n    dx = 1;\r\n  }\r\n  const d = Math.sqrt(dx * dx + dy * dy);\r\n\r\n  const x = x0 + (r * dx) / d;\r\n  const y = y0 + (r * dy) / d;\r\n\r\n  return [x, y];\r\n}\r\n\r\n/**\r\n * Calculates the point closest to the passed coordinate on the passed segment.\r\n * This is the foot of the perpendicular of the coordinate to the segment when\r\n * the foot is on the segment, or the closest segment coordinate when the foot\r\n * is outside the segment.\r\n *\r\n * @param {Coordinate} coordinate The coordinate.\r\n * @param {Array<Coordinate>} segment The two coordinates\r\n * of the segment.\r\n * @return {Coordinate} The foot of the perpendicular of\r\n * the coordinate to the segment.\r\n */\r\nexport function closestOnSegment(coordinate, segment) {\r\n  const x0 = coordinate[0];\r\n  const y0 = coordinate[1];\r\n  const start = segment[0];\r\n  const end = segment[1];\r\n  const x1 = start[0];\r\n  const y1 = start[1];\r\n  const x2 = end[0];\r\n  const y2 = end[1];\r\n  const dx = x2 - x1;\r\n  const dy = y2 - y1;\r\n  const along =\r\n    dx === 0 && dy === 0\r\n      ? 0\r\n      : (dx * (x0 - x1) + dy * (y0 - y1)) / (dx * dx + dy * dy || 0);\r\n  let x, y;\r\n  if (along <= 0) {\r\n    x = x1;\r\n    y = y1;\r\n  } else if (along >= 1) {\r\n    x = x2;\r\n    y = y2;\r\n  } else {\r\n    x = x1 + along * dx;\r\n    y = y1 + along * dy;\r\n  }\r\n  return [x, y];\r\n}\r\n\r\n/**\r\n * Returns a {@link module:ol/coordinate~CoordinateFormat} function that can be\r\n * used to format\r\n * a {Coordinate} to a string.\r\n *\r\n * Example without specifying the fractional digits:\r\n *\r\n *     import {createStringXY} from 'ol/coordinate.js';\r\n *\r\n *     const coord = [7.85, 47.983333];\r\n *     const stringifyFunc = createStringXY();\r\n *     const out = stringifyFunc(coord);\r\n *     // out is now '8, 48'\r\n *\r\n * Example with explicitly specifying 2 fractional digits:\r\n *\r\n *     import {createStringXY} from 'ol/coordinate.js';\r\n *\r\n *     const coord = [7.85, 47.983333];\r\n *     const stringifyFunc = createStringXY(2);\r\n *     const out = stringifyFunc(coord);\r\n *     // out is now '7.85, 47.98'\r\n *\r\n * @param {number} [fractionDigits] The number of digits to include\r\n *    after the decimal point. Default is `0`.\r\n * @return {CoordinateFormat} Coordinate format.\r\n * @api\r\n */\r\nexport function createStringXY(fractionDigits) {\r\n  return (\r\n    /**\r\n     * @param {Coordinate} coordinate Coordinate.\r\n     * @return {string} String XY.\r\n     */\r\n    function (coordinate) {\r\n      return toStringXY(coordinate, fractionDigits);\r\n    }\r\n  );\r\n}\r\n\r\n/**\r\n * @param {string} hemispheres Hemispheres.\r\n * @param {number} degrees Degrees.\r\n * @param {number} [fractionDigits] The number of digits to include\r\n *    after the decimal point. Default is `0`.\r\n * @return {string} String.\r\n */\r\nexport function degreesToStringHDMS(hemispheres, degrees, fractionDigits) {\r\n  const normalizedDegrees = modulo(degrees + 180, 360) - 180;\r\n  const x = Math.abs(3600 * normalizedDegrees);\r\n  const decimals = fractionDigits || 0;\r\n\r\n  let deg = Math.floor(x / 3600);\r\n  let min = Math.floor((x - deg * 3600) / 60);\r\n  let sec = toFixed(x - deg * 3600 - min * 60, decimals);\r\n\r\n  if (sec >= 60) {\r\n    sec = 0;\r\n    min += 1;\r\n  }\r\n\r\n  if (min >= 60) {\r\n    min = 0;\r\n    deg += 1;\r\n  }\r\n\r\n  let hdms = deg + '\\u00b0';\r\n  if (min !== 0 || sec !== 0) {\r\n    hdms += ' ' + padNumber(min, 2) + '\\u2032';\r\n  }\r\n  if (sec !== 0) {\r\n    hdms += ' ' + padNumber(sec, 2, decimals) + '\\u2033';\r\n  }\r\n  if (normalizedDegrees !== 0) {\r\n    hdms += ' ' + hemispheres.charAt(normalizedDegrees < 0 ? 1 : 0);\r\n  }\r\n\r\n  return hdms;\r\n}\r\n\r\n/**\r\n * Transforms the given {@link module:ol/coordinate~Coordinate} to a string\r\n * using the given string template. The strings `{x}` and `{y}` in the template\r\n * will be replaced with the first and second coordinate values respectively.\r\n *\r\n * Example without specifying the fractional digits:\r\n *\r\n *     import {format} from 'ol/coordinate.js';\r\n *\r\n *     const coord = [7.85, 47.983333];\r\n *     const template = 'Coordinate is ({x}|{y}).';\r\n *     const out = format(coord, template);\r\n *     // out is now 'Coordinate is (8|48).'\r\n *\r\n * Example explicitly specifying the fractional digits:\r\n *\r\n *     import {format} from 'ol/coordinate.js';\r\n *\r\n *     const coord = [7.85, 47.983333];\r\n *     const template = 'Coordinate is ({x}|{y}).';\r\n *     const out = format(coord, template, 2);\r\n *     // out is now 'Coordinate is (7.85|47.98).'\r\n *\r\n * @param {Coordinate} coordinate Coordinate.\r\n * @param {string} template A template string with `{x}` and `{y}` placeholders\r\n *     that will be replaced by first and second coordinate values.\r\n * @param {number} [fractionDigits] The number of digits to include\r\n *    after the decimal point. Default is `0`.\r\n * @return {string} Formatted coordinate.\r\n * @api\r\n */\r\nexport function format(coordinate, template, fractionDigits) {\r\n  if (coordinate) {\r\n    return template\r\n      .replace('{x}', coordinate[0].toFixed(fractionDigits))\r\n      .replace('{y}', coordinate[1].toFixed(fractionDigits));\r\n  }\r\n  return '';\r\n}\r\n\r\n/**\r\n * @param {Coordinate} coordinate1 First coordinate.\r\n * @param {Coordinate} coordinate2 Second coordinate.\r\n * @return {boolean} The two coordinates are equal.\r\n */\r\nexport function equals(coordinate1, coordinate2) {\r\n  let equals = true;\r\n  for (let i = coordinate1.length - 1; i >= 0; --i) {\r\n    if (coordinate1[i] != coordinate2[i]) {\r\n      equals = false;\r\n      break;\r\n    }\r\n  }\r\n  return equals;\r\n}\r\n\r\n/**\r\n * Rotate `coordinate` by `angle`. `coordinate` is modified in place and\r\n * returned by the function.\r\n *\r\n * Example:\r\n *\r\n *     import {rotate} from 'ol/coordinate.js';\r\n *\r\n *     const coord = [7.85, 47.983333];\r\n *     const rotateRadians = Math.PI / 2; // 90 degrees\r\n *     rotate(coord, rotateRadians);\r\n *     // coord is now [-47.983333, 7.85]\r\n *\r\n * @param {Coordinate} coordinate Coordinate.\r\n * @param {number} angle Angle in radian.\r\n * @return {Coordinate} Coordinate.\r\n * @api\r\n */\r\nexport function rotate(coordinate, angle) {\r\n  const cosAngle = Math.cos(angle);\r\n  const sinAngle = Math.sin(angle);\r\n  const x = coordinate[0] * cosAngle - coordinate[1] * sinAngle;\r\n  const y = coordinate[1] * cosAngle + coordinate[0] * sinAngle;\r\n  coordinate[0] = x;\r\n  coordinate[1] = y;\r\n  return coordinate;\r\n}\r\n\r\n/**\r\n * Scale `coordinate` by `scale`. `coordinate` is modified in place and returned\r\n * by the function.\r\n *\r\n * Example:\r\n *\r\n *     import {scale as scaleCoordinate} from 'ol/coordinate.js';\r\n *\r\n *     const coord = [7.85, 47.983333];\r\n *     const scale = 1.2;\r\n *     scaleCoordinate(coord, scale);\r\n *     // coord is now [9.42, 57.5799996]\r\n *\r\n * @param {Coordinate} coordinate Coordinate.\r\n * @param {number} scale Scale factor.\r\n * @return {Coordinate} Coordinate.\r\n */\r\nexport function scale(coordinate, scale) {\r\n  coordinate[0] *= scale;\r\n  coordinate[1] *= scale;\r\n  return coordinate;\r\n}\r\n\r\n/**\r\n * @param {Coordinate} coord1 First coordinate.\r\n * @param {Coordinate} coord2 Second coordinate.\r\n * @return {number} Squared distance between coord1 and coord2.\r\n */\r\nexport function squaredDistance(coord1, coord2) {\r\n  const dx = coord1[0] - coord2[0];\r\n  const dy = coord1[1] - coord2[1];\r\n  return dx * dx + dy * dy;\r\n}\r\n\r\n/**\r\n * @param {Coordinate} coord1 First coordinate.\r\n * @param {Coordinate} coord2 Second coordinate.\r\n * @return {number} Distance between coord1 and coord2.\r\n */\r\nexport function distance(coord1, coord2) {\r\n  return Math.sqrt(squaredDistance(coord1, coord2));\r\n}\r\n\r\n/**\r\n * Calculate the squared distance from a coordinate to a line segment.\r\n *\r\n * @param {Coordinate} coordinate Coordinate of the point.\r\n * @param {Array<Coordinate>} segment Line segment (2\r\n * coordinates).\r\n * @return {number} Squared distance from the point to the line segment.\r\n */\r\nexport function squaredDistanceToSegment(coordinate, segment) {\r\n  return squaredDistance(coordinate, closestOnSegment(coordinate, segment));\r\n}\r\n\r\n/**\r\n * Format a geographic coordinate with the hemisphere, degrees, minutes, and\r\n * seconds.\r\n *\r\n * Example without specifying fractional digits:\r\n *\r\n *     import {toStringHDMS} from 'ol/coordinate.js';\r\n *\r\n *     const coord = [7.85, 47.983333];\r\n *     const out = toStringHDMS(coord);\r\n *     // out is now '47° 58′ 60″ N 7° 50′ 60″ E'\r\n *\r\n * Example explicitly specifying 1 fractional digit:\r\n *\r\n *     import {toStringHDMS} from 'ol/coordinate.js';\r\n *\r\n *     const coord = [7.85, 47.983333];\r\n *     const out = toStringHDMS(coord, 1);\r\n *     // out is now '47° 58′ 60.0″ N 7° 50′ 60.0″ E'\r\n *\r\n * @param {Coordinate} coordinate Coordinate.\r\n * @param {number} [fractionDigits] The number of digits to include\r\n *    after the decimal point. Default is `0`.\r\n * @return {string} Hemisphere, degrees, minutes and seconds.\r\n * @api\r\n */\r\nexport function toStringHDMS(coordinate, fractionDigits) {\r\n  if (coordinate) {\r\n    return (\r\n      degreesToStringHDMS('NS', coordinate[1], fractionDigits) +\r\n      ' ' +\r\n      degreesToStringHDMS('EW', coordinate[0], fractionDigits)\r\n    );\r\n  }\r\n  return '';\r\n}\r\n\r\n/**\r\n * Format a coordinate as a comma delimited string.\r\n *\r\n * Example without specifying fractional digits:\r\n *\r\n *     import {toStringXY} from 'ol/coordinate.js';\r\n *\r\n *     const coord = [7.85, 47.983333];\r\n *     const out = toStringXY(coord);\r\n *     // out is now '8, 48'\r\n *\r\n * Example explicitly specifying 1 fractional digit:\r\n *\r\n *     import {toStringXY} from 'ol/coordinate.js';\r\n *\r\n *     const coord = [7.85, 47.983333];\r\n *     const out = toStringXY(coord, 1);\r\n *     // out is now '7.8, 48.0'\r\n *\r\n * @param {Coordinate} coordinate Coordinate.\r\n * @param {number} [fractionDigits] The number of digits to include\r\n *    after the decimal point. Default is `0`.\r\n * @return {string} XY.\r\n * @api\r\n */\r\nexport function toStringXY(coordinate, fractionDigits) {\r\n  return format(coordinate, '{x}, {y}', fractionDigits);\r\n}\r\n\r\n/**\r\n * Modifies the provided coordinate in-place to be within the real world\r\n * extent. The lower projection extent boundary is inclusive, the upper one\r\n * exclusive.\r\n *\r\n * @param {Coordinate} coordinate Coordinate.\r\n * @param {import(\"./proj/Projection.js\").default} projection Projection.\r\n * @return {Coordinate} The coordinate within the real world extent.\r\n */\r\nexport function wrapX(coordinate, projection) {\r\n  if (projection.canWrapX()) {\r\n    const worldWidth = getWidth(projection.getExtent());\r\n    const worldsAway = getWorldsAway(coordinate, projection, worldWidth);\r\n    if (worldsAway) {\r\n      coordinate[0] -= worldsAway * worldWidth;\r\n    }\r\n  }\r\n  return coordinate;\r\n}\r\n/**\r\n * @param {Coordinate} coordinate Coordinate.\r\n * @param {import(\"./proj/Projection.js\").default} projection Projection.\r\n * @param {number} [sourceExtentWidth] Width of the source extent.\r\n * @return {number} Offset in world widths.\r\n */\r\nexport function getWorldsAway(coordinate, projection, sourceExtentWidth) {\r\n  const projectionExtent = projection.getExtent();\r\n  let worldsAway = 0;\r\n  if (\r\n    projection.canWrapX() &&\r\n    (coordinate[0] < projectionExtent[0] || coordinate[0] > projectionExtent[2])\r\n  ) {\r\n    sourceExtentWidth = sourceExtentWidth || getWidth(projectionExtent);\r\n    worldsAway = Math.floor(\r\n      (coordinate[0] - projectionExtent[0]) / sourceExtentWidth,\r\n    );\r\n  }\r\n  return worldsAway;\r\n}\r\n","/**\r\n * @module ol/extent\r\n */\r\nimport Relationship from './extent/Relationship.js';\r\n\r\n/**\r\n * An array of numbers representing an extent: `[minx, miny, maxx, maxy]`.\r\n * @typedef {Array<number>} Extent\r\n * @api\r\n */\r\n\r\n/**\r\n * Extent corner.\r\n * @typedef {'bottom-left' | 'bottom-right' | 'top-left' | 'top-right'} Corner\r\n */\r\n\r\n/**\r\n * Build an extent that includes all given coordinates.\r\n *\r\n * @param {Array<import(\"./coordinate.js\").Coordinate>} coordinates Coordinates.\r\n * @return {Extent} Bounding extent.\r\n * @api\r\n */\r\nexport function boundingExtent(coordinates) {\r\n  const extent = createEmpty();\r\n  for (let i = 0, ii = coordinates.length; i < ii; ++i) {\r\n    extendCoordinate(extent, coordinates[i]);\r\n  }\r\n  return extent;\r\n}\r\n\r\n/**\r\n * @param {Array<number>} xs Xs.\r\n * @param {Array<number>} ys Ys.\r\n * @param {Extent} [dest] Destination extent.\r\n * @private\r\n * @return {Extent} Extent.\r\n */\r\nfunction _boundingExtentXYs(xs, ys, dest) {\r\n  const minX = Math.min.apply(null, xs);\r\n  const minY = Math.min.apply(null, ys);\r\n  const maxX = Math.max.apply(null, xs);\r\n  const maxY = Math.max.apply(null, ys);\r\n  return createOrUpdate(minX, minY, maxX, maxY, dest);\r\n}\r\n\r\n/**\r\n * Return extent increased by the provided value.\r\n * @param {Extent} extent Extent.\r\n * @param {number} value The amount by which the extent should be buffered.\r\n * @param {Extent} [dest] Extent.\r\n * @return {Extent} Extent.\r\n * @api\r\n */\r\nexport function buffer(extent, value, dest) {\r\n  if (dest) {\r\n    dest[0] = extent[0] - value;\r\n    dest[1] = extent[1] - value;\r\n    dest[2] = extent[2] + value;\r\n    dest[3] = extent[3] + value;\r\n    return dest;\r\n  }\r\n  return [\r\n    extent[0] - value,\r\n    extent[1] - value,\r\n    extent[2] + value,\r\n    extent[3] + value,\r\n  ];\r\n}\r\n\r\n/**\r\n * Creates a clone of an extent.\r\n *\r\n * @param {Extent} extent Extent to clone.\r\n * @param {Extent} [dest] Extent.\r\n * @return {Extent} The clone.\r\n */\r\nexport function clone(extent, dest) {\r\n  if (dest) {\r\n    dest[0] = extent[0];\r\n    dest[1] = extent[1];\r\n    dest[2] = extent[2];\r\n    dest[3] = extent[3];\r\n    return dest;\r\n  }\r\n  return extent.slice();\r\n}\r\n\r\n/**\r\n * @param {Extent} extent Extent.\r\n * @param {number} x X.\r\n * @param {number} y Y.\r\n * @return {number} Closest squared distance.\r\n */\r\nexport function closestSquaredDistanceXY(extent, x, y) {\r\n  let dx, dy;\r\n  if (x < extent[0]) {\r\n    dx = extent[0] - x;\r\n  } else if (extent[2] < x) {\r\n    dx = x - extent[2];\r\n  } else {\r\n    dx = 0;\r\n  }\r\n  if (y < extent[1]) {\r\n    dy = extent[1] - y;\r\n  } else if (extent[3] < y) {\r\n    dy = y - extent[3];\r\n  } else {\r\n    dy = 0;\r\n  }\r\n  return dx * dx + dy * dy;\r\n}\r\n\r\n/**\r\n * Check if the passed coordinate is contained or on the edge of the extent.\r\n *\r\n * @param {Extent} extent Extent.\r\n * @param {import(\"./coordinate.js\").Coordinate} coordinate Coordinate.\r\n * @return {boolean} The coordinate is contained in the extent.\r\n * @api\r\n */\r\nexport function containsCoordinate(extent, coordinate) {\r\n  return containsXY(extent, coordinate[0], coordinate[1]);\r\n}\r\n\r\n/**\r\n * Check if one extent contains another.\r\n *\r\n * An extent is deemed contained if it lies completely within the other extent,\r\n * including if they share one or more edges.\r\n *\r\n * @param {Extent} extent1 Extent 1.\r\n * @param {Extent} extent2 Extent 2.\r\n * @return {boolean} The second extent is contained by or on the edge of the\r\n *     first.\r\n * @api\r\n */\r\nexport function containsExtent(extent1, extent2) {\r\n  return (\r\n    extent1[0] <= extent2[0] &&\r\n    extent2[2] <= extent1[2] &&\r\n    extent1[1] <= extent2[1] &&\r\n    extent2[3] <= extent1[3]\r\n  );\r\n}\r\n\r\n/**\r\n * Check if the passed coordinate is contained or on the edge of the extent.\r\n *\r\n * @param {Extent} extent Extent.\r\n * @param {number} x X coordinate.\r\n * @param {number} y Y coordinate.\r\n * @return {boolean} The x, y values are contained in the extent.\r\n * @api\r\n */\r\nexport function containsXY(extent, x, y) {\r\n  return extent[0] <= x && x <= extent[2] && extent[1] <= y && y <= extent[3];\r\n}\r\n\r\n/**\r\n * Get the relationship between a coordinate and extent.\r\n * @param {Extent} extent The extent.\r\n * @param {import(\"./coordinate.js\").Coordinate} coordinate The coordinate.\r\n * @return {import(\"./extent/Relationship.js\").default} The relationship (bitwise compare with\r\n *     import(\"./extent/Relationship.js\").Relationship).\r\n */\r\nexport function coordinateRelationship(extent, coordinate) {\r\n  const minX = extent[0];\r\n  const minY = extent[1];\r\n  const maxX = extent[2];\r\n  const maxY = extent[3];\r\n  const x = coordinate[0];\r\n  const y = coordinate[1];\r\n  let relationship = Relationship.UNKNOWN;\r\n  if (x < minX) {\r\n    relationship = relationship | Relationship.LEFT;\r\n  } else if (x > maxX) {\r\n    relationship = relationship | Relationship.RIGHT;\r\n  }\r\n  if (y < minY) {\r\n    relationship = relationship | Relationship.BELOW;\r\n  } else if (y > maxY) {\r\n    relationship = relationship | Relationship.ABOVE;\r\n  }\r\n  if (relationship === Relationship.UNKNOWN) {\r\n    relationship = Relationship.INTERSECTING;\r\n  }\r\n  return relationship;\r\n}\r\n\r\n/**\r\n * Create an empty extent.\r\n * @return {Extent} Empty extent.\r\n * @api\r\n */\r\nexport function createEmpty() {\r\n  return [Infinity, Infinity, -Infinity, -Infinity];\r\n}\r\n\r\n/**\r\n * Create a new extent or update the provided extent.\r\n * @param {number} minX Minimum X.\r\n * @param {number} minY Minimum Y.\r\n * @param {number} maxX Maximum X.\r\n * @param {number} maxY Maximum Y.\r\n * @param {Extent} [dest] Destination extent.\r\n * @return {Extent} Extent.\r\n */\r\nexport function createOrUpdate(minX, minY, maxX, maxY, dest) {\r\n  if (dest) {\r\n    dest[0] = minX;\r\n    dest[1] = minY;\r\n    dest[2] = maxX;\r\n    dest[3] = maxY;\r\n    return dest;\r\n  }\r\n  return [minX, minY, maxX, maxY];\r\n}\r\n\r\n/**\r\n * Create a new empty extent or make the provided one empty.\r\n * @param {Extent} [dest] Extent.\r\n * @return {Extent} Extent.\r\n */\r\nexport function createOrUpdateEmpty(dest) {\r\n  return createOrUpdate(Infinity, Infinity, -Infinity, -Infinity, dest);\r\n}\r\n\r\n/**\r\n * @param {import(\"./coordinate.js\").Coordinate} coordinate Coordinate.\r\n * @param {Extent} [dest] Extent.\r\n * @return {Extent} Extent.\r\n */\r\nexport function createOrUpdateFromCoordinate(coordinate, dest) {\r\n  const x = coordinate[0];\r\n  const y = coordinate[1];\r\n  return createOrUpdate(x, y, x, y, dest);\r\n}\r\n\r\n/**\r\n * @param {Array<import(\"./coordinate.js\").Coordinate>} coordinates Coordinates.\r\n * @param {Extent} [dest] Extent.\r\n * @return {Extent} Extent.\r\n */\r\nexport function createOrUpdateFromCoordinates(coordinates, dest) {\r\n  const extent = createOrUpdateEmpty(dest);\r\n  return extendCoordinates(extent, coordinates);\r\n}\r\n\r\n/**\r\n * @param {Array<number>} flatCoordinates Flat coordinates.\r\n * @param {number} offset Offset.\r\n * @param {number} end End.\r\n * @param {number} stride Stride.\r\n * @param {Extent} [dest] Extent.\r\n * @return {Extent} Extent.\r\n */\r\nexport function createOrUpdateFromFlatCoordinates(\r\n  flatCoordinates,\r\n  offset,\r\n  end,\r\n  stride,\r\n  dest,\r\n) {\r\n  const extent = createOrUpdateEmpty(dest);\r\n  return extendFlatCoordinates(extent, flatCoordinates, offset, end, stride);\r\n}\r\n\r\n/**\r\n * @param {Array<Array<import(\"./coordinate.js\").Coordinate>>} rings Rings.\r\n * @param {Extent} [dest] Extent.\r\n * @return {Extent} Extent.\r\n */\r\nexport function createOrUpdateFromRings(rings, dest) {\r\n  const extent = createOrUpdateEmpty(dest);\r\n  return extendRings(extent, rings);\r\n}\r\n\r\n/**\r\n * Determine if two extents are equivalent.\r\n * @param {Extent} extent1 Extent 1.\r\n * @param {Extent} extent2 Extent 2.\r\n * @return {boolean} The two extents are equivalent.\r\n * @api\r\n */\r\nexport function equals(extent1, extent2) {\r\n  return (\r\n    extent1[0] == extent2[0] &&\r\n    extent1[2] == extent2[2] &&\r\n    extent1[1] == extent2[1] &&\r\n    extent1[3] == extent2[3]\r\n  );\r\n}\r\n\r\n/**\r\n * Determine if two extents are approximately equivalent.\r\n * @param {Extent} extent1 Extent 1.\r\n * @param {Extent} extent2 Extent 2.\r\n * @param {number} tolerance Tolerance in extent coordinate units.\r\n * @return {boolean} The two extents differ by less than the tolerance.\r\n */\r\nexport function approximatelyEquals(extent1, extent2, tolerance) {\r\n  return (\r\n    Math.abs(extent1[0] - extent2[0]) < tolerance &&\r\n    Math.abs(extent1[2] - extent2[2]) < tolerance &&\r\n    Math.abs(extent1[1] - extent2[1]) < tolerance &&\r\n    Math.abs(extent1[3] - extent2[3]) < tolerance\r\n  );\r\n}\r\n\r\n/**\r\n * Modify an extent to include another extent.\r\n * @param {Extent} extent1 The extent to be modified.\r\n * @param {Extent} extent2 The extent that will be included in the first.\r\n * @return {Extent} A reference to the first (extended) extent.\r\n * @api\r\n */\r\nexport function extend(extent1, extent2) {\r\n  if (extent2[0] < extent1[0]) {\r\n    extent1[0] = extent2[0];\r\n  }\r\n  if (extent2[2] > extent1[2]) {\r\n    extent1[2] = extent2[2];\r\n  }\r\n  if (extent2[1] < extent1[1]) {\r\n    extent1[1] = extent2[1];\r\n  }\r\n  if (extent2[3] > extent1[3]) {\r\n    extent1[3] = extent2[3];\r\n  }\r\n  return extent1;\r\n}\r\n\r\n/**\r\n * @param {Extent} extent Extent.\r\n * @param {import(\"./coordinate.js\").Coordinate} coordinate Coordinate.\r\n */\r\nexport function extendCoordinate(extent, coordinate) {\r\n  if (coordinate[0] < extent[0]) {\r\n    extent[0] = coordinate[0];\r\n  }\r\n  if (coordinate[0] > extent[2]) {\r\n    extent[2] = coordinate[0];\r\n  }\r\n  if (coordinate[1] < extent[1]) {\r\n    extent[1] = coordinate[1];\r\n  }\r\n  if (coordinate[1] > extent[3]) {\r\n    extent[3] = coordinate[1];\r\n  }\r\n}\r\n\r\n/**\r\n * @param {Extent} extent Extent.\r\n * @param {Array<import(\"./coordinate.js\").Coordinate>} coordinates Coordinates.\r\n * @return {Extent} Extent.\r\n */\r\nexport function extendCoordinates(extent, coordinates) {\r\n  for (let i = 0, ii = coordinates.length; i < ii; ++i) {\r\n    extendCoordinate(extent, coordinates[i]);\r\n  }\r\n  return extent;\r\n}\r\n\r\n/**\r\n * @param {Extent} extent Extent.\r\n * @param {Array<number>} flatCoordinates Flat coordinates.\r\n * @param {number} offset Offset.\r\n * @param {number} end End.\r\n * @param {number} stride Stride.\r\n * @return {Extent} Extent.\r\n */\r\nexport function extendFlatCoordinates(\r\n  extent,\r\n  flatCoordinates,\r\n  offset,\r\n  end,\r\n  stride,\r\n) {\r\n  for (; offset < end; offset += stride) {\r\n    extendXY(extent, flatCoordinates[offset], flatCoordinates[offset + 1]);\r\n  }\r\n  return extent;\r\n}\r\n\r\n/**\r\n * @param {Extent} extent Extent.\r\n * @param {Array<Array<import(\"./coordinate.js\").Coordinate>>} rings Rings.\r\n * @return {Extent} Extent.\r\n */\r\nexport function extendRings(extent, rings) {\r\n  for (let i = 0, ii = rings.length; i < ii; ++i) {\r\n    extendCoordinates(extent, rings[i]);\r\n  }\r\n  return extent;\r\n}\r\n\r\n/**\r\n * @param {Extent} extent Extent.\r\n * @param {number} x X.\r\n * @param {number} y Y.\r\n */\r\nexport function extendXY(extent, x, y) {\r\n  extent[0] = Math.min(extent[0], x);\r\n  extent[1] = Math.min(extent[1], y);\r\n  extent[2] = Math.max(extent[2], x);\r\n  extent[3] = Math.max(extent[3], y);\r\n}\r\n\r\n/**\r\n * This function calls `callback` for each corner of the extent. If the\r\n * callback returns a truthy value the function returns that value\r\n * immediately. Otherwise the function returns `false`.\r\n * @param {Extent} extent Extent.\r\n * @param {function(import(\"./coordinate.js\").Coordinate): S} callback Callback.\r\n * @return {S|boolean} Value.\r\n * @template S\r\n */\r\nexport function forEachCorner(extent, callback) {\r\n  let val;\r\n  val = callback(getBottomLeft(extent));\r\n  if (val) {\r\n    return val;\r\n  }\r\n  val = callback(getBottomRight(extent));\r\n  if (val) {\r\n    return val;\r\n  }\r\n  val = callback(getTopRight(extent));\r\n  if (val) {\r\n    return val;\r\n  }\r\n  val = callback(getTopLeft(extent));\r\n  if (val) {\r\n    return val;\r\n  }\r\n  return false;\r\n}\r\n\r\n/**\r\n * Get the size of an extent.\r\n * @param {Extent} extent Extent.\r\n * @return {number} Area.\r\n * @api\r\n */\r\nexport function getArea(extent) {\r\n  let area = 0;\r\n  if (!isEmpty(extent)) {\r\n    area = getWidth(extent) * getHeight(extent);\r\n  }\r\n  return area;\r\n}\r\n\r\n/**\r\n * Get the bottom left coordinate of an extent.\r\n * @param {Extent} extent Extent.\r\n * @return {import(\"./coordinate.js\").Coordinate} Bottom left coordinate.\r\n * @api\r\n */\r\nexport function getBottomLeft(extent) {\r\n  return [extent[0], extent[1]];\r\n}\r\n\r\n/**\r\n * Get the bottom right coordinate of an extent.\r\n * @param {Extent} extent Extent.\r\n * @return {import(\"./coordinate.js\").Coordinate} Bottom right coordinate.\r\n * @api\r\n */\r\nexport function getBottomRight(extent) {\r\n  return [extent[2], extent[1]];\r\n}\r\n\r\n/**\r\n * Get the center coordinate of an extent.\r\n * @param {Extent} extent Extent.\r\n * @return {import(\"./coordinate.js\").Coordinate} Center.\r\n * @api\r\n */\r\nexport function getCenter(extent) {\r\n  return [(extent[0] + extent[2]) / 2, (extent[1] + extent[3]) / 2];\r\n}\r\n\r\n/**\r\n * Get a corner coordinate of an extent.\r\n * @param {Extent} extent Extent.\r\n * @param {Corner} corner Corner.\r\n * @return {import(\"./coordinate.js\").Coordinate} Corner coordinate.\r\n */\r\nexport function getCorner(extent, corner) {\r\n  let coordinate;\r\n  if (corner === 'bottom-left') {\r\n    coordinate = getBottomLeft(extent);\r\n  } else if (corner === 'bottom-right') {\r\n    coordinate = getBottomRight(extent);\r\n  } else if (corner === 'top-left') {\r\n    coordinate = getTopLeft(extent);\r\n  } else if (corner === 'top-right') {\r\n    coordinate = getTopRight(extent);\r\n  } else {\r\n    throw new Error('Invalid corner');\r\n  }\r\n  return coordinate;\r\n}\r\n\r\n/**\r\n * @param {Extent} extent1 Extent 1.\r\n * @param {Extent} extent2 Extent 2.\r\n * @return {number} Enlarged area.\r\n */\r\nexport function getEnlargedArea(extent1, extent2) {\r\n  const minX = Math.min(extent1[0], extent2[0]);\r\n  const minY = Math.min(extent1[1], extent2[1]);\r\n  const maxX = Math.max(extent1[2], extent2[2]);\r\n  const maxY = Math.max(extent1[3], extent2[3]);\r\n  return (maxX - minX) * (maxY - minY);\r\n}\r\n\r\n/**\r\n * @param {import(\"./coordinate.js\").Coordinate} center Center.\r\n * @param {number} resolution Resolution.\r\n * @param {number} rotation Rotation.\r\n * @param {import(\"./size.js\").Size} size Size.\r\n * @param {Extent} [dest] Destination extent.\r\n * @return {Extent} Extent.\r\n */\r\nexport function getForViewAndSize(center, resolution, rotation, size, dest) {\r\n  const [x0, y0, x1, y1, x2, y2, x3, y3] = getRotatedViewport(\r\n    center,\r\n    resolution,\r\n    rotation,\r\n    size,\r\n  );\r\n  return createOrUpdate(\r\n    Math.min(x0, x1, x2, x3),\r\n    Math.min(y0, y1, y2, y3),\r\n    Math.max(x0, x1, x2, x3),\r\n    Math.max(y0, y1, y2, y3),\r\n    dest,\r\n  );\r\n}\r\n\r\n/**\r\n * @param {import(\"./coordinate.js\").Coordinate} center Center.\r\n * @param {number} resolution Resolution.\r\n * @param {number} rotation Rotation.\r\n * @param {import(\"./size.js\").Size} size Size.\r\n * @return {Array<number>} Linear ring representing the viewport.\r\n */\r\nexport function getRotatedViewport(center, resolution, rotation, size) {\r\n  const dx = (resolution * size[0]) / 2;\r\n  const dy = (resolution * size[1]) / 2;\r\n  const cosRotation = Math.cos(rotation);\r\n  const sinRotation = Math.sin(rotation);\r\n  const xCos = dx * cosRotation;\r\n  const xSin = dx * sinRotation;\r\n  const yCos = dy * cosRotation;\r\n  const ySin = dy * sinRotation;\r\n  const x = center[0];\r\n  const y = center[1];\r\n  return [\r\n    x - xCos + ySin,\r\n    y - xSin - yCos,\r\n    x - xCos - ySin,\r\n    y - xSin + yCos,\r\n    x + xCos - ySin,\r\n    y + xSin + yCos,\r\n    x + xCos + ySin,\r\n    y + xSin - yCos,\r\n    x - xCos + ySin,\r\n    y - xSin - yCos,\r\n  ];\r\n}\r\n\r\n/**\r\n * Get the height of an extent.\r\n * @param {Extent} extent Extent.\r\n * @return {number} Height.\r\n * @api\r\n */\r\nexport function getHeight(extent) {\r\n  return extent[3] - extent[1];\r\n}\r\n\r\n/**\r\n * @param {Extent} extent1 Extent 1.\r\n * @param {Extent} extent2 Extent 2.\r\n * @return {number} Intersection area.\r\n */\r\nexport function getIntersectionArea(extent1, extent2) {\r\n  const intersection = getIntersection(extent1, extent2);\r\n  return getArea(intersection);\r\n}\r\n\r\n/**\r\n * Get the intersection of two extents.\r\n * @param {Extent} extent1 Extent 1.\r\n * @param {Extent} extent2 Extent 2.\r\n * @param {Extent} [dest] Optional extent to populate with intersection.\r\n * @return {Extent} Intersecting extent.\r\n * @api\r\n */\r\nexport function getIntersection(extent1, extent2, dest) {\r\n  const intersection = dest ? dest : createEmpty();\r\n  if (intersects(extent1, extent2)) {\r\n    if (extent1[0] > extent2[0]) {\r\n      intersection[0] = extent1[0];\r\n    } else {\r\n      intersection[0] = extent2[0];\r\n    }\r\n    if (extent1[1] > extent2[1]) {\r\n      intersection[1] = extent1[1];\r\n    } else {\r\n      intersection[1] = extent2[1];\r\n    }\r\n    if (extent1[2] < extent2[2]) {\r\n      intersection[2] = extent1[2];\r\n    } else {\r\n      intersection[2] = extent2[2];\r\n    }\r\n    if (extent1[3] < extent2[3]) {\r\n      intersection[3] = extent1[3];\r\n    } else {\r\n      intersection[3] = extent2[3];\r\n    }\r\n  } else {\r\n    createOrUpdateEmpty(intersection);\r\n  }\r\n  return intersection;\r\n}\r\n\r\n/**\r\n * @param {Extent} extent Extent.\r\n * @return {number} Margin.\r\n */\r\nexport function getMargin(extent) {\r\n  return getWidth(extent) + getHeight(extent);\r\n}\r\n\r\n/**\r\n * Get the size (width, height) of an extent.\r\n * @param {Extent} extent The extent.\r\n * @return {import(\"./size.js\").Size} The extent size.\r\n * @api\r\n */\r\nexport function getSize(extent) {\r\n  return [extent[2] - extent[0], extent[3] - extent[1]];\r\n}\r\n\r\n/**\r\n * Get the top left coordinate of an extent.\r\n * @param {Extent} extent Extent.\r\n * @return {import(\"./coordinate.js\").Coordinate} Top left coordinate.\r\n * @api\r\n */\r\nexport function getTopLeft(extent) {\r\n  return [extent[0], extent[3]];\r\n}\r\n\r\n/**\r\n * Get the top right coordinate of an extent.\r\n * @param {Extent} extent Extent.\r\n * @return {import(\"./coordinate.js\").Coordinate} Top right coordinate.\r\n * @api\r\n */\r\nexport function getTopRight(extent) {\r\n  return [extent[2], extent[3]];\r\n}\r\n\r\n/**\r\n * Get the width of an extent.\r\n * @param {Extent} extent Extent.\r\n * @return {number} Width.\r\n * @api\r\n */\r\nexport function getWidth(extent) {\r\n  return extent[2] - extent[0];\r\n}\r\n\r\n/**\r\n * Determine if one extent intersects another.\r\n * @param {Extent} extent1 Extent 1.\r\n * @param {Extent} extent2 Extent.\r\n * @return {boolean} The two extents intersect.\r\n * @api\r\n */\r\nexport function intersects(extent1, extent2) {\r\n  return (\r\n    extent1[0] <= extent2[2] &&\r\n    extent1[2] >= extent2[0] &&\r\n    extent1[1] <= extent2[3] &&\r\n    extent1[3] >= extent2[1]\r\n  );\r\n}\r\n\r\n/**\r\n * Determine if an extent is empty.\r\n * @param {Extent} extent Extent.\r\n * @return {boolean} Is empty.\r\n * @api\r\n */\r\nexport function isEmpty(extent) {\r\n  return extent[2] < extent[0] || extent[3] < extent[1];\r\n}\r\n\r\n/**\r\n * @param {Extent} extent Extent.\r\n * @param {Extent} [dest] Extent.\r\n * @return {Extent} Extent.\r\n */\r\nexport function returnOrUpdate(extent, dest) {\r\n  if (dest) {\r\n    dest[0] = extent[0];\r\n    dest[1] = extent[1];\r\n    dest[2] = extent[2];\r\n    dest[3] = extent[3];\r\n    return dest;\r\n  }\r\n  return extent;\r\n}\r\n\r\n/**\r\n * @param {Extent} extent Extent.\r\n * @param {number} value Value.\r\n */\r\nexport function scaleFromCenter(extent, value) {\r\n  const deltaX = ((extent[2] - extent[0]) / 2) * (value - 1);\r\n  const deltaY = ((extent[3] - extent[1]) / 2) * (value - 1);\r\n  extent[0] -= deltaX;\r\n  extent[2] += deltaX;\r\n  extent[1] -= deltaY;\r\n  extent[3] += deltaY;\r\n}\r\n\r\n/**\r\n * Determine if the segment between two coordinates intersects (crosses,\r\n * touches, or is contained by) the provided extent.\r\n * @param {Extent} extent The extent.\r\n * @param {import(\"./coordinate.js\").Coordinate} start Segment start coordinate.\r\n * @param {import(\"./coordinate.js\").Coordinate} end Segment end coordinate.\r\n * @return {boolean} The segment intersects the extent.\r\n */\r\nexport function intersectsSegment(extent, start, end) {\r\n  let intersects = false;\r\n  const startRel = coordinateRelationship(extent, start);\r\n  const endRel = coordinateRelationship(extent, end);\r\n  if (\r\n    startRel === Relationship.INTERSECTING ||\r\n    endRel === Relationship.INTERSECTING\r\n  ) {\r\n    intersects = true;\r\n  } else {\r\n    const minX = extent[0];\r\n    const minY = extent[1];\r\n    const maxX = extent[2];\r\n    const maxY = extent[3];\r\n    const startX = start[0];\r\n    const startY = start[1];\r\n    const endX = end[0];\r\n    const endY = end[1];\r\n    const slope = (endY - startY) / (endX - startX);\r\n    let x, y;\r\n    if (!!(endRel & Relationship.ABOVE) && !(startRel & Relationship.ABOVE)) {\r\n      // potentially intersects top\r\n      x = endX - (endY - maxY) / slope;\r\n      intersects = x >= minX && x <= maxX;\r\n    }\r\n    if (\r\n      !intersects &&\r\n      !!(endRel & Relationship.RIGHT) &&\r\n      !(startRel & Relationship.RIGHT)\r\n    ) {\r\n      // potentially intersects right\r\n      y = endY - (endX - maxX) * slope;\r\n      intersects = y >= minY && y <= maxY;\r\n    }\r\n    if (\r\n      !intersects &&\r\n      !!(endRel & Relationship.BELOW) &&\r\n      !(startRel & Relationship.BELOW)\r\n    ) {\r\n      // potentially intersects bottom\r\n      x = endX - (endY - minY) / slope;\r\n      intersects = x >= minX && x <= maxX;\r\n    }\r\n    if (\r\n      !intersects &&\r\n      !!(endRel & Relationship.LEFT) &&\r\n      !(startRel & Relationship.LEFT)\r\n    ) {\r\n      // potentially intersects left\r\n      y = endY - (endX - minX) * slope;\r\n      intersects = y >= minY && y <= maxY;\r\n    }\r\n  }\r\n  return intersects;\r\n}\r\n\r\n/**\r\n * Apply a transform function to the extent.\r\n * @param {Extent} extent Extent.\r\n * @param {import(\"./proj.js\").TransformFunction} transformFn Transform function.\r\n * Called with `[minX, minY, maxX, maxY]` extent coordinates.\r\n * @param {Extent} [dest] Destination extent.\r\n * @param {number} [stops] Number of stops per side used for the transform.\r\n * By default only the corners are used.\r\n * @return {Extent} Extent.\r\n * @api\r\n */\r\nexport function applyTransform(extent, transformFn, dest, stops) {\r\n  if (isEmpty(extent)) {\r\n    return createOrUpdateEmpty(dest);\r\n  }\r\n  let coordinates = [];\r\n  if (stops > 1) {\r\n    const width = extent[2] - extent[0];\r\n    const height = extent[3] - extent[1];\r\n    for (let i = 0; i < stops; ++i) {\r\n      coordinates.push(\r\n        extent[0] + (width * i) / stops,\r\n        extent[1],\r\n        extent[2],\r\n        extent[1] + (height * i) / stops,\r\n        extent[2] - (width * i) / stops,\r\n        extent[3],\r\n        extent[0],\r\n        extent[3] - (height * i) / stops,\r\n      );\r\n    }\r\n  } else {\r\n    coordinates = [\r\n      extent[0],\r\n      extent[1],\r\n      extent[2],\r\n      extent[1],\r\n      extent[2],\r\n      extent[3],\r\n      extent[0],\r\n      extent[3],\r\n    ];\r\n  }\r\n  transformFn(coordinates, coordinates, 2);\r\n  const xs = [];\r\n  const ys = [];\r\n  for (let i = 0, l = coordinates.length; i < l; i += 2) {\r\n    xs.push(coordinates[i]);\r\n    ys.push(coordinates[i + 1]);\r\n  }\r\n  return _boundingExtentXYs(xs, ys, dest);\r\n}\r\n\r\n/**\r\n * Modifies the provided extent in-place to be within the real world\r\n * extent.\r\n *\r\n * @param {Extent} extent Extent.\r\n * @param {import(\"./proj/Projection.js\").default} projection Projection\r\n * @return {Extent} The extent within the real world extent.\r\n */\r\nexport function wrapX(extent, projection) {\r\n  const projectionExtent = projection.getExtent();\r\n  const center = getCenter(extent);\r\n  if (\r\n    projection.canWrapX() &&\r\n    (center[0] < projectionExtent[0] || center[0] >= projectionExtent[2])\r\n  ) {\r\n    const worldWidth = getWidth(projectionExtent);\r\n    const worldsAway = Math.floor(\r\n      (center[0] - projectionExtent[0]) / worldWidth,\r\n    );\r\n    const offset = worldsAway * worldWidth;\r\n    extent[0] -= offset;\r\n    extent[2] -= offset;\r\n  }\r\n  return extent;\r\n}\r\n\r\n/**\r\n * Fits the extent to the real world\r\n *\r\n * If the extent does not cross the anti meridian, this will return the extent in an array\r\n * If the extent crosses the anti meridian, the extent will be sliced, so each part fits within the\r\n * real world\r\n *\r\n *\r\n * @param {Extent} extent Extent.\r\n * @param {import(\"./proj/Projection.js\").default} projection Projection\r\n * @param {boolean} [multiWorld] Return all worlds\r\n * @return {Array<Extent>} The extent within the real world extent.\r\n */\r\nexport function wrapAndSliceX(extent, projection, multiWorld) {\r\n  if (projection.canWrapX()) {\r\n    const projectionExtent = projection.getExtent();\r\n\r\n    if (!isFinite(extent[0]) || !isFinite(extent[2])) {\r\n      return [[projectionExtent[0], extent[1], projectionExtent[2], extent[3]]];\r\n    }\r\n\r\n    wrapX(extent, projection);\r\n    const worldWidth = getWidth(projectionExtent);\r\n\r\n    if (getWidth(extent) > worldWidth && !multiWorld) {\r\n      // the extent wraps around on itself\r\n      return [[projectionExtent[0], extent[1], projectionExtent[2], extent[3]]];\r\n    }\r\n    if (extent[0] < projectionExtent[0]) {\r\n      // the extent crosses the anti meridian, so it needs to be sliced\r\n      return [\r\n        [extent[0] + worldWidth, extent[1], projectionExtent[2], extent[3]],\r\n        [projectionExtent[0], extent[1], extent[2], extent[3]],\r\n      ];\r\n    }\r\n    if (extent[2] > projectionExtent[2]) {\r\n      // the extent crosses the anti meridian, so it needs to be sliced\r\n      return [\r\n        [extent[0], extent[1], projectionExtent[2], extent[3]],\r\n        [projectionExtent[0], extent[1], extent[2] - worldWidth, extent[3]],\r\n      ];\r\n    }\r\n  }\r\n\r\n  return [extent];\r\n}\r\n","/**\r\n * @module ol/extent/Relationship\r\n */\r\n\r\n/**\r\n * Relationship to an extent.\r\n * @enum {number}\r\n */\r\nexport default {\r\n  UNKNOWN: 0,\r\n  INTERSECTING: 1,\r\n  ABOVE: 2,\r\n  RIGHT: 4,\r\n  BELOW: 8,\r\n  LEFT: 16,\r\n};\r\n","/**\r\n * @module ol/string\r\n */\r\n\r\n/**\r\n * @param {number} number Number to be formatted\r\n * @param {number} width The desired width\r\n * @param {number} [precision] Precision of the output string (i.e. number of decimal places)\r\n * @return {string} Formatted string\r\n */\r\nexport function padNumber(number, width, precision) {\r\n  const numberString =\r\n    precision !== undefined ? number.toFixed(precision) : '' + number;\r\n  let decimal = numberString.indexOf('.');\r\n  decimal = decimal === -1 ? numberString.length : decimal;\r\n  return decimal > width\r\n    ? numberString\r\n    : new Array(1 + width - decimal).join('0') + numberString;\r\n}\r\n\r\n/**\r\n * Adapted from https://github.com/omichelsen/compare-versions/blob/master/index.js\r\n * @param {string|number} v1 First version\r\n * @param {string|number} v2 Second version\r\n * @return {number} Value\r\n */\r\nexport function compareVersions(v1, v2) {\r\n  const s1 = ('' + v1).split('.');\r\n  const s2 = ('' + v2).split('.');\r\n\r\n  for (let i = 0; i < Math.max(s1.length, s2.length); i++) {\r\n    const n1 = parseInt(s1[i] || '0', 10);\r\n    const n2 = parseInt(s2[i] || '0', 10);\r\n\r\n    if (n1 > n2) {\r\n      return 1;\r\n    }\r\n    if (n2 > n1) {\r\n      return -1;\r\n    }\r\n  }\r\n\r\n  return 0;\r\n}\r\n","/**\r\n * @module ol/easing\r\n */\r\n\r\n/**\r\n * Start slow and speed up.\r\n * @param {number} t Input between 0 and 1.\r\n * @return {number} Output between 0 and 1.\r\n * @api\r\n */\r\nexport function easeIn(t) {\r\n  return Math.pow(t, 3);\r\n}\r\n\r\n/**\r\n * Start fast and slow down.\r\n * @param {number} t Input between 0 and 1.\r\n * @return {number} Output between 0 and 1.\r\n * @api\r\n */\r\nexport function easeOut(t) {\r\n  return 1 - easeIn(1 - t);\r\n}\r\n\r\n/**\r\n * Start slow, speed up, and then slow down again.\r\n * @param {number} t Input between 0 and 1.\r\n * @return {number} Output between 0 and 1.\r\n * @api\r\n */\r\nexport function inAndOut(t) {\r\n  return 3 * t * t - 2 * t * t * t;\r\n}\r\n\r\n/**\r\n * Maintain a constant speed over time.\r\n * @param {number} t Input between 0 and 1.\r\n * @return {number} Output between 0 and 1.\r\n * @api\r\n */\r\nexport function linear(t) {\r\n  return t;\r\n}\r\n\r\n/**\r\n * Start slow, speed up, and at the very end slow down again.  This has the\r\n * same general behavior as {@link module:ol/easing.inAndOut}, but the final\r\n * slowdown is delayed.\r\n * @param {number} t Input between 0 and 1.\r\n * @return {number} Output between 0 and 1.\r\n * @api\r\n */\r\nexport function upAndDown(t) {\r\n  if (t < 0.5) {\r\n    return inAndOut(2 * t);\r\n  }\r\n  return 1 - inAndOut(2 * (t - 0.5));\r\n}\r\n","/**\r\n * @module ol/geom/Polygon\r\n */\r\nimport {extend} from '../array.js';\r\nimport {closestSquaredDistanceXY, getCenter, isEmpty} from '../extent.js';\r\nimport {modulo} from '../math.js';\r\nimport {offset as sphereOffset} from '../sphere.js';\r\nimport LinearRing from './LinearRing.js';\r\nimport Point from './Point.js';\r\nimport SimpleGeometry from './SimpleGeometry.js';\r\nimport {linearRings as linearRingsArea} from './flat/area.js';\r\nimport {arrayMaxSquaredDelta, assignClosestArrayPoint} from './flat/closest.js';\r\nimport {linearRingsContainsXY} from './flat/contains.js';\r\nimport {deflateCoordinatesArray} from './flat/deflate.js';\r\nimport {inflateCoordinatesArray} from './flat/inflate.js';\r\nimport {getInteriorPointOfArray} from './flat/interiorpoint.js';\r\nimport {intersectsLinearRingArray} from './flat/intersectsextent.js';\r\nimport {linearRingsAreOriented, orientLinearRings} from './flat/orient.js';\r\nimport {quantizeArray} from './flat/simplify.js';\r\n\r\n/**\r\n * @classdesc\r\n * Polygon geometry.\r\n *\r\n * @api\r\n */\r\nclass Polygon extends SimpleGeometry {\r\n  /**\r\n   * @param {!Array<Array<import(\"../coordinate.js\").Coordinate>>|!Array<number>} coordinates\r\n   *     Array of linear rings that define the polygon. The first linear ring of the\r\n   *     array defines the outer-boundary or surface of the polygon. Each subsequent\r\n   *     linear ring defines a hole in the surface of the polygon. A linear ring is\r\n   *     an array of vertices' coordinates where the first coordinate and the last are\r\n   *     equivalent. (For internal use, flat coordinates in combination with\r\n   *     `layout` and `ends` are also accepted.)\r\n   * @param {import(\"./Geometry.js\").GeometryLayout} [layout] Layout.\r\n   * @param {Array<number>} [ends] Ends (for internal use with flat coordinates).\r\n   */\r\n  constructor(coordinates, layout, ends) {\r\n    super();\r\n\r\n    /**\r\n     * @type {Array<number>}\r\n     * @private\r\n     */\r\n    this.ends_ = [];\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.flatInteriorPointRevision_ = -1;\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"../coordinate.js\").Coordinate|null}\r\n     */\r\n    this.flatInteriorPoint_ = null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.maxDelta_ = -1;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.maxDeltaRevision_ = -1;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.orientedRevision_ = -1;\r\n\r\n    /**\r\n     * @private\r\n     * @type {Array<number>|null}\r\n     */\r\n    this.orientedFlatCoordinates_ = null;\r\n\r\n    if (layout !== undefined && ends) {\r\n      this.setFlatCoordinates(\r\n        layout,\r\n        /** @type {Array<number>} */ (coordinates),\r\n      );\r\n      this.ends_ = ends;\r\n    } else {\r\n      this.setCoordinates(\r\n        /** @type {Array<Array<import(\"../coordinate.js\").Coordinate>>} */ (\r\n          coordinates\r\n        ),\r\n        layout,\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Append the passed linear ring to this polygon.\r\n   * @param {LinearRing} linearRing Linear ring.\r\n   * @api\r\n   */\r\n  appendLinearRing(linearRing) {\r\n    if (!this.flatCoordinates) {\r\n      this.flatCoordinates = linearRing.getFlatCoordinates().slice();\r\n    } else {\r\n      extend(this.flatCoordinates, linearRing.getFlatCoordinates());\r\n    }\r\n    this.ends_.push(this.flatCoordinates.length);\r\n    this.changed();\r\n  }\r\n\r\n  /**\r\n   * Make a complete copy of the geometry.\r\n   * @return {!Polygon} Clone.\r\n   * @api\r\n   * @override\r\n   */\r\n  clone() {\r\n    const polygon = new Polygon(\r\n      this.flatCoordinates.slice(),\r\n      this.layout,\r\n      this.ends_.slice(),\r\n    );\r\n    polygon.applyProperties(this);\r\n    return polygon;\r\n  }\r\n\r\n  /**\r\n   * @param {number} x X.\r\n   * @param {number} y Y.\r\n   * @param {import(\"../coordinate.js\").Coordinate} closestPoint Closest point.\r\n   * @param {number} minSquaredDistance Minimum squared distance.\r\n   * @return {number} Minimum squared distance.\r\n   * @override\r\n   */\r\n  closestPointXY(x, y, closestPoint, minSquaredDistance) {\r\n    if (minSquaredDistance < closestSquaredDistanceXY(this.getExtent(), x, y)) {\r\n      return minSquaredDistance;\r\n    }\r\n    if (this.maxDeltaRevision_ != this.getRevision()) {\r\n      this.maxDelta_ = Math.sqrt(\r\n        arrayMaxSquaredDelta(\r\n          this.flatCoordinates,\r\n          0,\r\n          this.ends_,\r\n          this.stride,\r\n          0,\r\n        ),\r\n      );\r\n      this.maxDeltaRevision_ = this.getRevision();\r\n    }\r\n    return assignClosestArrayPoint(\r\n      this.flatCoordinates,\r\n      0,\r\n      this.ends_,\r\n      this.stride,\r\n      this.maxDelta_,\r\n      true,\r\n      x,\r\n      y,\r\n      closestPoint,\r\n      minSquaredDistance,\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @param {number} x X.\r\n   * @param {number} y Y.\r\n   * @return {boolean} Contains (x, y).\r\n   * @override\r\n   */\r\n  containsXY(x, y) {\r\n    return linearRingsContainsXY(\r\n      this.getOrientedFlatCoordinates(),\r\n      0,\r\n      this.ends_,\r\n      this.stride,\r\n      x,\r\n      y,\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Return the area of the polygon on projected plane.\r\n   * @return {number} Area (on projected plane).\r\n   * @api\r\n   */\r\n  getArea() {\r\n    return linearRingsArea(\r\n      this.getOrientedFlatCoordinates(),\r\n      0,\r\n      this.ends_,\r\n      this.stride,\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Get the coordinate array for this geometry.  This array has the structure\r\n   * of a GeoJSON coordinate array for polygons.\r\n   *\r\n   * @param {boolean} [right] Orient coordinates according to the right-hand\r\n   *     rule (counter-clockwise for exterior and clockwise for interior rings).\r\n   *     If `false`, coordinates will be oriented according to the left-hand rule\r\n   *     (clockwise for exterior and counter-clockwise for interior rings).\r\n   *     By default, coordinate orientation will depend on how the geometry was\r\n   *     constructed.\r\n   * @return {Array<Array<import(\"../coordinate.js\").Coordinate>>} Coordinates.\r\n   * @api\r\n   * @override\r\n   */\r\n  getCoordinates(right) {\r\n    let flatCoordinates;\r\n    if (right !== undefined) {\r\n      flatCoordinates = this.getOrientedFlatCoordinates().slice();\r\n      orientLinearRings(flatCoordinates, 0, this.ends_, this.stride, right);\r\n    } else {\r\n      flatCoordinates = this.flatCoordinates;\r\n    }\r\n\r\n    return inflateCoordinatesArray(flatCoordinates, 0, this.ends_, this.stride);\r\n  }\r\n\r\n  /**\r\n   * @return {Array<number>} Ends.\r\n   */\r\n  getEnds() {\r\n    return this.ends_;\r\n  }\r\n\r\n  /**\r\n   * @return {Array<number>} Interior point.\r\n   */\r\n  getFlatInteriorPoint() {\r\n    if (this.flatInteriorPointRevision_ != this.getRevision()) {\r\n      const flatCenter = getCenter(this.getExtent());\r\n      this.flatInteriorPoint_ = getInteriorPointOfArray(\r\n        this.getOrientedFlatCoordinates(),\r\n        0,\r\n        this.ends_,\r\n        this.stride,\r\n        flatCenter,\r\n        0,\r\n      );\r\n      this.flatInteriorPointRevision_ = this.getRevision();\r\n    }\r\n    return /** @type {import(\"../coordinate.js\").Coordinate} */ (\r\n      this.flatInteriorPoint_\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Return an interior point of the polygon.\r\n   * @return {Point} Interior point as XYM coordinate, where M is the\r\n   * length of the horizontal intersection that the point belongs to.\r\n   * @api\r\n   */\r\n  getInteriorPoint() {\r\n    return new Point(this.getFlatInteriorPoint(), 'XYM');\r\n  }\r\n\r\n  /**\r\n   * Return the number of rings of the polygon,  this includes the exterior\r\n   * ring and any interior rings.\r\n   *\r\n   * @return {number} Number of rings.\r\n   * @api\r\n   */\r\n  getLinearRingCount() {\r\n    return this.ends_.length;\r\n  }\r\n\r\n  /**\r\n   * Return the Nth linear ring of the polygon geometry. Return `null` if the\r\n   * given index is out of range.\r\n   * The exterior linear ring is available at index `0` and the interior rings\r\n   * at index `1` and beyond.\r\n   *\r\n   * @param {number} index Index.\r\n   * @return {LinearRing|null} Linear ring.\r\n   * @api\r\n   */\r\n  getLinearRing(index) {\r\n    if (index < 0 || this.ends_.length <= index) {\r\n      return null;\r\n    }\r\n    return new LinearRing(\r\n      this.flatCoordinates.slice(\r\n        index === 0 ? 0 : this.ends_[index - 1],\r\n        this.ends_[index],\r\n      ),\r\n      this.layout,\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Return the linear rings of the polygon.\r\n   * @return {Array<LinearRing>} Linear rings.\r\n   * @api\r\n   */\r\n  getLinearRings() {\r\n    const layout = this.layout;\r\n    const flatCoordinates = this.flatCoordinates;\r\n    const ends = this.ends_;\r\n    const linearRings = [];\r\n    let offset = 0;\r\n    for (let i = 0, ii = ends.length; i < ii; ++i) {\r\n      const end = ends[i];\r\n      const linearRing = new LinearRing(\r\n        flatCoordinates.slice(offset, end),\r\n        layout,\r\n      );\r\n      linearRings.push(linearRing);\r\n      offset = end;\r\n    }\r\n    return linearRings;\r\n  }\r\n\r\n  /**\r\n   * @return {Array<number>} Oriented flat coordinates.\r\n   */\r\n  getOrientedFlatCoordinates() {\r\n    if (this.orientedRevision_ != this.getRevision()) {\r\n      const flatCoordinates = this.flatCoordinates;\r\n      if (linearRingsAreOriented(flatCoordinates, 0, this.ends_, this.stride)) {\r\n        this.orientedFlatCoordinates_ = flatCoordinates;\r\n      } else {\r\n        this.orientedFlatCoordinates_ = flatCoordinates.slice();\r\n        this.orientedFlatCoordinates_.length = orientLinearRings(\r\n          this.orientedFlatCoordinates_,\r\n          0,\r\n          this.ends_,\r\n          this.stride,\r\n        );\r\n      }\r\n      this.orientedRevision_ = this.getRevision();\r\n    }\r\n    return /** @type {Array<number>} */ (this.orientedFlatCoordinates_);\r\n  }\r\n\r\n  /**\r\n   * @param {number} squaredTolerance Squared tolerance.\r\n   * @return {Polygon} Simplified Polygon.\r\n   * @protected\r\n   * @override\r\n   */\r\n  getSimplifiedGeometryInternal(squaredTolerance) {\r\n    /** @type {Array<number>} */\r\n    const simplifiedFlatCoordinates = [];\r\n    /** @type {Array<number>} */\r\n    const simplifiedEnds = [];\r\n    simplifiedFlatCoordinates.length = quantizeArray(\r\n      this.flatCoordinates,\r\n      0,\r\n      this.ends_,\r\n      this.stride,\r\n      Math.sqrt(squaredTolerance),\r\n      simplifiedFlatCoordinates,\r\n      0,\r\n      simplifiedEnds,\r\n    );\r\n    return new Polygon(simplifiedFlatCoordinates, 'XY', simplifiedEnds);\r\n  }\r\n\r\n  /**\r\n   * Get the type of this geometry.\r\n   * @return {import(\"./Geometry.js\").Type} Geometry type.\r\n   * @api\r\n   * @override\r\n   */\r\n  getType() {\r\n    return 'Polygon';\r\n  }\r\n\r\n  /**\r\n   * Test if the geometry and the passed extent intersect.\r\n   * @param {import(\"../extent.js\").Extent} extent Extent.\r\n   * @return {boolean} `true` if the geometry and the extent intersect.\r\n   * @api\r\n   * @override\r\n   */\r\n  intersectsExtent(extent) {\r\n    return intersectsLinearRingArray(\r\n      this.getOrientedFlatCoordinates(),\r\n      0,\r\n      this.ends_,\r\n      this.stride,\r\n      extent,\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Set the coordinates of the polygon.\r\n   * @param {!Array<Array<import(\"../coordinate.js\").Coordinate>>} coordinates Coordinates.\r\n   * @param {import(\"./Geometry.js\").GeometryLayout} [layout] Layout.\r\n   * @api\r\n   * @override\r\n   */\r\n  setCoordinates(coordinates, layout) {\r\n    this.setLayout(layout, coordinates, 2);\r\n    if (!this.flatCoordinates) {\r\n      this.flatCoordinates = [];\r\n    }\r\n    const ends = deflateCoordinatesArray(\r\n      this.flatCoordinates,\r\n      0,\r\n      coordinates,\r\n      this.stride,\r\n      this.ends_,\r\n    );\r\n    this.flatCoordinates.length = ends.length === 0 ? 0 : ends[ends.length - 1];\r\n    this.changed();\r\n  }\r\n}\r\n\r\nexport default Polygon;\r\n\r\n/**\r\n * Create an approximation of a circle on the surface of a sphere.\r\n * @param {import(\"../coordinate.js\").Coordinate} center Center (`[lon, lat]` in degrees).\r\n * @param {number} radius The great-circle distance from the center to\r\n *     the polygon vertices in meters.\r\n * @param {number} [n] Optional number of vertices for the resulting\r\n *     polygon. Default is `32`.\r\n * @param {number} [sphereRadius] Optional radius for the sphere (defaults to\r\n *     the Earth's mean radius using the WGS84 ellipsoid).\r\n * @return {Polygon} The \"circular\" polygon.\r\n * @api\r\n */\r\nexport function circular(center, radius, n, sphereRadius) {\r\n  n = n ? n : 32;\r\n  /** @type {Array<number>} */\r\n  const flatCoordinates = [];\r\n  for (let i = 0; i < n; ++i) {\r\n    extend(\r\n      flatCoordinates,\r\n      sphereOffset(center, radius, (2 * Math.PI * i) / n, sphereRadius),\r\n    );\r\n  }\r\n  flatCoordinates.push(flatCoordinates[0], flatCoordinates[1]);\r\n  return new Polygon(flatCoordinates, 'XY', [flatCoordinates.length]);\r\n}\r\n\r\n/**\r\n * Create a polygon from an extent. The layout used is `XY`.\r\n * @param {import(\"../extent.js\").Extent} extent The extent.\r\n * @return {Polygon} The polygon.\r\n * @api\r\n */\r\nexport function fromExtent(extent) {\r\n  if (isEmpty(extent)) {\r\n    throw new Error('Cannot create polygon from empty extent');\r\n  }\r\n  const minX = extent[0];\r\n  const minY = extent[1];\r\n  const maxX = extent[2];\r\n  const maxY = extent[3];\r\n  const flatCoordinates = [\r\n    minX,\r\n    minY,\r\n    minX,\r\n    maxY,\r\n    maxX,\r\n    maxY,\r\n    maxX,\r\n    minY,\r\n    minX,\r\n    minY,\r\n  ];\r\n  return new Polygon(flatCoordinates, 'XY', [flatCoordinates.length]);\r\n}\r\n\r\n/**\r\n * Create a regular polygon from a circle.\r\n * @param {import(\"./Circle.js\").default} circle Circle geometry.\r\n * @param {number} [sides] Number of sides of the polygon. Default is 32.\r\n * @param {number} [angle] Start angle for the first vertex of the polygon in\r\n *     counter-clockwise radians. 0 means East. Default is 0.\r\n * @return {Polygon} Polygon geometry.\r\n * @api\r\n */\r\nexport function fromCircle(circle, sides, angle) {\r\n  sides = sides ? sides : 32;\r\n  const stride = circle.getStride();\r\n  const layout = circle.getLayout();\r\n  const center = circle.getCenter();\r\n  const arrayLength = stride * (sides + 1);\r\n  const flatCoordinates = new Array(arrayLength);\r\n  for (let i = 0; i < arrayLength; i += stride) {\r\n    flatCoordinates[i] = 0;\r\n    flatCoordinates[i + 1] = 0;\r\n    for (let j = 2; j < stride; j++) {\r\n      flatCoordinates[i + j] = center[j];\r\n    }\r\n  }\r\n  const ends = [flatCoordinates.length];\r\n  const polygon = new Polygon(flatCoordinates, layout, ends);\r\n  makeRegular(polygon, center, circle.getRadius(), angle);\r\n  return polygon;\r\n}\r\n\r\n/**\r\n * Modify the coordinates of a polygon to make it a regular polygon.\r\n * @param {Polygon} polygon Polygon geometry.\r\n * @param {import(\"../coordinate.js\").Coordinate} center Center of the regular polygon.\r\n * @param {number} radius Radius of the regular polygon.\r\n * @param {number} [angle] Start angle for the first vertex of the polygon in\r\n *     counter-clockwise radians. 0 means East. Default is 0.\r\n */\r\nexport function makeRegular(polygon, center, radius, angle) {\r\n  const flatCoordinates = polygon.getFlatCoordinates();\r\n  const stride = polygon.getStride();\r\n  const sides = flatCoordinates.length / stride - 1;\r\n  const startAngle = angle ? angle : 0;\r\n  for (let i = 0; i <= sides; ++i) {\r\n    const offset = i * stride;\r\n    const angle = startAngle + (modulo(i, sides) * 2 * Math.PI) / sides;\r\n    flatCoordinates[offset] = center[0] + radius * Math.cos(angle);\r\n    flatCoordinates[offset + 1] = center[1] + radius * Math.sin(angle);\r\n  }\r\n  polygon.changed();\r\n}\r\n","/**\r\n * @module ol/sphere\r\n */\r\nimport {toDegrees, toRadians} from './math.js';\r\n\r\n/**\r\n * Object literal with options for the {@link getLength} or {@link getArea}\r\n * functions.\r\n * @typedef {Object} SphereMetricOptions\r\n * @property {import(\"./proj.js\").ProjectionLike} [projection='EPSG:3857']\r\n * Projection of the  geometry.  By default, the geometry is assumed to be in\r\n * Web Mercator.\r\n * @property {number} [radius=6371008.8] Sphere radius.  By default, the\r\n * [mean Earth radius](https://en.wikipedia.org/wiki/Earth_radius#Mean_radius)\r\n * for the WGS84 ellipsoid is used.\r\n */\r\n\r\n/**\r\n * The mean Earth radius (1/3 * (2a + b)) for the WGS84 ellipsoid.\r\n * https://en.wikipedia.org/wiki/Earth_radius#Mean_radius\r\n * @type {number}\r\n */\r\nexport const DEFAULT_RADIUS = 6371008.8;\r\n\r\n/**\r\n * Get the great circle distance (in meters) between two geographic coordinates.\r\n * @param {Array} c1 Starting coordinate.\r\n * @param {Array} c2 Ending coordinate.\r\n * @param {number} [radius] The sphere radius to use.  Defaults to the Earth's\r\n *     mean radius using the WGS84 ellipsoid.\r\n * @return {number} The great circle distance between the points (in meters).\r\n * @api\r\n */\r\nexport function getDistance(c1, c2, radius) {\r\n  radius = radius || DEFAULT_RADIUS;\r\n  const lat1 = toRadians(c1[1]);\r\n  const lat2 = toRadians(c2[1]);\r\n  const deltaLatBy2 = (lat2 - lat1) / 2;\r\n  const deltaLonBy2 = toRadians(c2[0] - c1[0]) / 2;\r\n  const a =\r\n    Math.sin(deltaLatBy2) * Math.sin(deltaLatBy2) +\r\n    Math.sin(deltaLonBy2) *\r\n      Math.sin(deltaLonBy2) *\r\n      Math.cos(lat1) *\r\n      Math.cos(lat2);\r\n  return 2 * radius * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\r\n}\r\n\r\n/**\r\n * Get the cumulative great circle length of linestring coordinates (geographic).\r\n * @param {Array} coordinates Linestring coordinates.\r\n * @param {number} radius The sphere radius to use.\r\n * @return {number} The length (in meters).\r\n */\r\nfunction getLengthInternal(coordinates, radius) {\r\n  let length = 0;\r\n  for (let i = 0, ii = coordinates.length; i < ii - 1; ++i) {\r\n    length += getDistance(coordinates[i], coordinates[i + 1], radius);\r\n  }\r\n  return length;\r\n}\r\n\r\n/**\r\n * Get the spherical length of a geometry.  This length is the sum of the\r\n * great circle distances between coordinates.  For polygons, the length is\r\n * the sum of all rings.  For points, the length is zero.  For multi-part\r\n * geometries, the length is the sum of the length of each part.\r\n * @param {import(\"./geom/Geometry.js\").default} geometry A geometry.\r\n * @param {SphereMetricOptions} [options] Options for the\r\n * length calculation.  By default, geometries are assumed to be in 'EPSG:3857'.\r\n * You can change this by providing a `projection` option.\r\n * @return {number} The spherical length (in meters).\r\n * @api\r\n */\r\nexport function getLength(geometry, options) {\r\n  options = options || {};\r\n  const radius = options.radius || DEFAULT_RADIUS;\r\n  const projection = options.projection || 'EPSG:3857';\r\n  const type = geometry.getType();\r\n  if (type !== 'GeometryCollection') {\r\n    geometry = geometry.clone().transform(projection, 'EPSG:4326');\r\n  }\r\n  let length = 0;\r\n  let coordinates, coords, i, ii, j, jj;\r\n  switch (type) {\r\n    case 'Point':\r\n    case 'MultiPoint': {\r\n      break;\r\n    }\r\n    case 'LineString':\r\n    case 'LinearRing': {\r\n      coordinates = /** @type {import(\"./geom/SimpleGeometry.js\").default} */ (\r\n        geometry\r\n      ).getCoordinates();\r\n      length = getLengthInternal(coordinates, radius);\r\n      break;\r\n    }\r\n    case 'MultiLineString':\r\n    case 'Polygon': {\r\n      coordinates = /** @type {import(\"./geom/SimpleGeometry.js\").default} */ (\r\n        geometry\r\n      ).getCoordinates();\r\n      for (i = 0, ii = coordinates.length; i < ii; ++i) {\r\n        length += getLengthInternal(coordinates[i], radius);\r\n      }\r\n      break;\r\n    }\r\n    case 'MultiPolygon': {\r\n      coordinates = /** @type {import(\"./geom/SimpleGeometry.js\").default} */ (\r\n        geometry\r\n      ).getCoordinates();\r\n      for (i = 0, ii = coordinates.length; i < ii; ++i) {\r\n        coords = coordinates[i];\r\n        for (j = 0, jj = coords.length; j < jj; ++j) {\r\n          length += getLengthInternal(coords[j], radius);\r\n        }\r\n      }\r\n      break;\r\n    }\r\n    case 'GeometryCollection': {\r\n      const geometries =\r\n        /** @type {import(\"./geom/GeometryCollection.js\").default} */ (\r\n          geometry\r\n        ).getGeometries();\r\n      for (i = 0, ii = geometries.length; i < ii; ++i) {\r\n        length += getLength(geometries[i], options);\r\n      }\r\n      break;\r\n    }\r\n    default: {\r\n      throw new Error('Unsupported geometry type: ' + type);\r\n    }\r\n  }\r\n  return length;\r\n}\r\n\r\n/**\r\n * Returns the spherical area for a list of coordinates.\r\n *\r\n * [Reference](https://trs.jpl.nasa.gov/handle/2014/40409)\r\n * Robert. G. Chamberlain and William H. Duquette, \"Some Algorithms for\r\n * Polygons on a Sphere\", JPL Publication 07-03, Jet Propulsion\r\n * Laboratory, Pasadena, CA, June 2007\r\n *\r\n * @param {Array<import(\"./coordinate.js\").Coordinate>} coordinates List of coordinates of a linear\r\n * ring. If the ring is oriented clockwise, the area will be positive,\r\n * otherwise it will be negative.\r\n * @param {number} radius The sphere radius.\r\n * @return {number} Area (in square meters).\r\n */\r\nfunction getAreaInternal(coordinates, radius) {\r\n  let area = 0;\r\n  const len = coordinates.length;\r\n  let x1 = coordinates[len - 1][0];\r\n  let y1 = coordinates[len - 1][1];\r\n  for (let i = 0; i < len; i++) {\r\n    const x2 = coordinates[i][0];\r\n    const y2 = coordinates[i][1];\r\n    area +=\r\n      toRadians(x2 - x1) *\r\n      (2 + Math.sin(toRadians(y1)) + Math.sin(toRadians(y2)));\r\n    x1 = x2;\r\n    y1 = y2;\r\n  }\r\n  return (area * radius * radius) / 2.0;\r\n}\r\n\r\n/**\r\n * Get the spherical area of a geometry.  This is the area (in meters) assuming\r\n * that polygon edges are segments of great circles on a sphere.\r\n * @param {import(\"./geom/Geometry.js\").default} geometry A geometry.\r\n * @param {SphereMetricOptions} [options] Options for the area\r\n *     calculation.  By default, geometries are assumed to be in 'EPSG:3857'.\r\n *     You can change this by providing a `projection` option.\r\n * @return {number} The spherical area (in square meters).\r\n * @api\r\n */\r\nexport function getArea(geometry, options) {\r\n  options = options || {};\r\n  const radius = options.radius || DEFAULT_RADIUS;\r\n  const projection = options.projection || 'EPSG:3857';\r\n  const type = geometry.getType();\r\n  if (type !== 'GeometryCollection') {\r\n    geometry = geometry.clone().transform(projection, 'EPSG:4326');\r\n  }\r\n  let area = 0;\r\n  let coordinates, coords, i, ii, j, jj;\r\n  switch (type) {\r\n    case 'Point':\r\n    case 'MultiPoint':\r\n    case 'LineString':\r\n    case 'MultiLineString':\r\n    case 'LinearRing': {\r\n      break;\r\n    }\r\n    case 'Polygon': {\r\n      coordinates = /** @type {import(\"./geom/Polygon.js\").default} */ (\r\n        geometry\r\n      ).getCoordinates();\r\n      area = Math.abs(getAreaInternal(coordinates[0], radius));\r\n      for (i = 1, ii = coordinates.length; i < ii; ++i) {\r\n        area -= Math.abs(getAreaInternal(coordinates[i], radius));\r\n      }\r\n      break;\r\n    }\r\n    case 'MultiPolygon': {\r\n      coordinates = /** @type {import(\"./geom/SimpleGeometry.js\").default} */ (\r\n        geometry\r\n      ).getCoordinates();\r\n      for (i = 0, ii = coordinates.length; i < ii; ++i) {\r\n        coords = coordinates[i];\r\n        area += Math.abs(getAreaInternal(coords[0], radius));\r\n        for (j = 1, jj = coords.length; j < jj; ++j) {\r\n          area -= Math.abs(getAreaInternal(coords[j], radius));\r\n        }\r\n      }\r\n      break;\r\n    }\r\n    case 'GeometryCollection': {\r\n      const geometries =\r\n        /** @type {import(\"./geom/GeometryCollection.js\").default} */ (\r\n          geometry\r\n        ).getGeometries();\r\n      for (i = 0, ii = geometries.length; i < ii; ++i) {\r\n        area += getArea(geometries[i], options);\r\n      }\r\n      break;\r\n    }\r\n    default: {\r\n      throw new Error('Unsupported geometry type: ' + type);\r\n    }\r\n  }\r\n  return area;\r\n}\r\n\r\n/**\r\n * Returns the coordinate at the given distance and bearing from `c1`.\r\n *\r\n * @param {import(\"./coordinate.js\").Coordinate} c1 The origin point (`[lon, lat]` in degrees).\r\n * @param {number} distance The great-circle distance between the origin\r\n *     point and the target point.\r\n * @param {number} bearing The bearing (in radians).\r\n * @param {number} [radius] The sphere radius to use.  Defaults to the Earth's\r\n *     mean radius using the WGS84 ellipsoid.\r\n * @return {import(\"./coordinate.js\").Coordinate} The target point.\r\n */\r\nexport function offset(c1, distance, bearing, radius) {\r\n  radius = radius || DEFAULT_RADIUS;\r\n  const lat1 = toRadians(c1[1]);\r\n  const lon1 = toRadians(c1[0]);\r\n  const dByR = distance / radius;\r\n  const lat = Math.asin(\r\n    Math.sin(lat1) * Math.cos(dByR) +\r\n      Math.cos(lat1) * Math.sin(dByR) * Math.cos(bearing),\r\n  );\r\n  const lon =\r\n    lon1 +\r\n    Math.atan2(\r\n      Math.sin(bearing) * Math.sin(dByR) * Math.cos(lat1),\r\n      Math.cos(dByR) - Math.sin(lat1) * Math.sin(lat),\r\n    );\r\n  return [toDegrees(lon), toDegrees(lat)];\r\n}\r\n","/**\r\n * @module ol/geom/LinearRing\r\n */\r\nimport {closestSquaredDistanceXY} from '../extent.js';\r\nimport SimpleGeometry from './SimpleGeometry.js';\r\nimport {linearRing as linearRingArea} from './flat/area.js';\r\nimport {assignClosestPoint, maxSquaredDelta} from './flat/closest.js';\r\nimport {deflateCoordinates} from './flat/deflate.js';\r\nimport {inflateCoordinates} from './flat/inflate.js';\r\nimport {douglasPeucker} from './flat/simplify.js';\r\n\r\n/**\r\n * @classdesc\r\n * Linear ring geometry. Only used as part of polygon; cannot be rendered\r\n * on its own.\r\n *\r\n * @api\r\n */\r\nclass LinearRing extends SimpleGeometry {\r\n  /**\r\n   * @param {Array<import(\"../coordinate.js\").Coordinate>|Array<number>} coordinates Coordinates.\r\n   *     For internal use, flat coordinates in combination with `layout` are also accepted.\r\n   * @param {import(\"./Geometry.js\").GeometryLayout} [layout] Layout.\r\n   */\r\n  constructor(coordinates, layout) {\r\n    super();\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.maxDelta_ = -1;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.maxDeltaRevision_ = -1;\r\n\r\n    if (layout !== undefined && !Array.isArray(coordinates[0])) {\r\n      this.setFlatCoordinates(\r\n        layout,\r\n        /** @type {Array<number>} */ (coordinates),\r\n      );\r\n    } else {\r\n      this.setCoordinates(\r\n        /** @type {Array<import(\"../coordinate.js\").Coordinate>} */ (\r\n          coordinates\r\n        ),\r\n        layout,\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Make a complete copy of the geometry.\r\n   * @return {!LinearRing} Clone.\r\n   * @api\r\n   * @override\r\n   */\r\n  clone() {\r\n    return new LinearRing(this.flatCoordinates.slice(), this.layout);\r\n  }\r\n\r\n  /**\r\n   * @param {number} x X.\r\n   * @param {number} y Y.\r\n   * @param {import(\"../coordinate.js\").Coordinate} closestPoint Closest point.\r\n   * @param {number} minSquaredDistance Minimum squared distance.\r\n   * @return {number} Minimum squared distance.\r\n   * @override\r\n   */\r\n  closestPointXY(x, y, closestPoint, minSquaredDistance) {\r\n    if (minSquaredDistance < closestSquaredDistanceXY(this.getExtent(), x, y)) {\r\n      return minSquaredDistance;\r\n    }\r\n    if (this.maxDeltaRevision_ != this.getRevision()) {\r\n      this.maxDelta_ = Math.sqrt(\r\n        maxSquaredDelta(\r\n          this.flatCoordinates,\r\n          0,\r\n          this.flatCoordinates.length,\r\n          this.stride,\r\n          0,\r\n        ),\r\n      );\r\n      this.maxDeltaRevision_ = this.getRevision();\r\n    }\r\n    return assignClosestPoint(\r\n      this.flatCoordinates,\r\n      0,\r\n      this.flatCoordinates.length,\r\n      this.stride,\r\n      this.maxDelta_,\r\n      true,\r\n      x,\r\n      y,\r\n      closestPoint,\r\n      minSquaredDistance,\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Return the area of the linear ring on projected plane.\r\n   * @return {number} Area (on projected plane).\r\n   * @api\r\n   */\r\n  getArea() {\r\n    return linearRingArea(\r\n      this.flatCoordinates,\r\n      0,\r\n      this.flatCoordinates.length,\r\n      this.stride,\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Return the coordinates of the linear ring.\r\n   * @return {Array<import(\"../coordinate.js\").Coordinate>} Coordinates.\r\n   * @api\r\n   * @override\r\n   */\r\n  getCoordinates() {\r\n    return inflateCoordinates(\r\n      this.flatCoordinates,\r\n      0,\r\n      this.flatCoordinates.length,\r\n      this.stride,\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @param {number} squaredTolerance Squared tolerance.\r\n   * @return {LinearRing} Simplified LinearRing.\r\n   * @protected\r\n   * @override\r\n   */\r\n  getSimplifiedGeometryInternal(squaredTolerance) {\r\n    /** @type {Array<number>} */\r\n    const simplifiedFlatCoordinates = [];\r\n    simplifiedFlatCoordinates.length = douglasPeucker(\r\n      this.flatCoordinates,\r\n      0,\r\n      this.flatCoordinates.length,\r\n      this.stride,\r\n      squaredTolerance,\r\n      simplifiedFlatCoordinates,\r\n      0,\r\n    );\r\n    return new LinearRing(simplifiedFlatCoordinates, 'XY');\r\n  }\r\n\r\n  /**\r\n   * Get the type of this geometry.\r\n   * @return {import(\"./Geometry.js\").Type} Geometry type.\r\n   * @api\r\n   * @override\r\n   */\r\n  getType() {\r\n    return 'LinearRing';\r\n  }\r\n\r\n  /**\r\n   * Test if the geometry and the passed extent intersect.\r\n   * @param {import(\"../extent.js\").Extent} extent Extent.\r\n   * @return {boolean} `true` if the geometry and the extent intersect.\r\n   * @api\r\n   * @override\r\n   */\r\n  intersectsExtent(extent) {\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Set the coordinates of the linear ring.\r\n   * @param {!Array<import(\"../coordinate.js\").Coordinate>} coordinates Coordinates.\r\n   * @param {import(\"./Geometry.js\").GeometryLayout} [layout] Layout.\r\n   * @api\r\n   * @override\r\n   */\r\n  setCoordinates(coordinates, layout) {\r\n    this.setLayout(layout, coordinates, 1);\r\n    if (!this.flatCoordinates) {\r\n      this.flatCoordinates = [];\r\n    }\r\n    this.flatCoordinates.length = deflateCoordinates(\r\n      this.flatCoordinates,\r\n      0,\r\n      coordinates,\r\n      this.stride,\r\n    );\r\n    this.changed();\r\n  }\r\n}\r\n\r\nexport default LinearRing;\r\n","/**\r\n * @module ol/geom/SimpleGeometry\r\n */\r\nimport {createOrUpdateFromFlatCoordinates, getCenter} from '../extent.js';\r\nimport {abstract} from '../util.js';\r\nimport Geometry from './Geometry.js';\r\nimport {rotate, scale, transform2D, translate} from './flat/transform.js';\r\n\r\n/**\r\n * @classdesc\r\n * Abstract base class; only used for creating subclasses; do not instantiate\r\n * in apps, as cannot be rendered.\r\n *\r\n * @abstract\r\n * @api\r\n */\r\nclass SimpleGeometry extends Geometry {\r\n  constructor() {\r\n    super();\r\n\r\n    /**\r\n     * @protected\r\n     * @type {import(\"./Geometry.js\").GeometryLayout}\r\n     */\r\n    this.layout = 'XY';\r\n\r\n    /**\r\n     * @protected\r\n     * @type {number}\r\n     */\r\n    this.stride = 2;\r\n\r\n    /**\r\n     * @protected\r\n     * @type {Array<number>}\r\n     */\r\n    this.flatCoordinates;\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../extent.js\").Extent} extent Extent.\r\n   * @protected\r\n   * @return {import(\"../extent.js\").Extent} extent Extent.\r\n   * @override\r\n   */\r\n  computeExtent(extent) {\r\n    return createOrUpdateFromFlatCoordinates(\r\n      this.flatCoordinates,\r\n      0,\r\n      this.flatCoordinates.length,\r\n      this.stride,\r\n      extent,\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @abstract\r\n   * @return {Array<*> | null} Coordinates.\r\n   */\r\n  getCoordinates() {\r\n    return abstract();\r\n  }\r\n\r\n  /**\r\n   * Return the first coordinate of the geometry.\r\n   * @return {import(\"../coordinate.js\").Coordinate} First coordinate.\r\n   * @api\r\n   */\r\n  getFirstCoordinate() {\r\n    return this.flatCoordinates.slice(0, this.stride);\r\n  }\r\n\r\n  /**\r\n   * @return {Array<number>} Flat coordinates.\r\n   */\r\n  getFlatCoordinates() {\r\n    return this.flatCoordinates;\r\n  }\r\n\r\n  /**\r\n   * Return the last coordinate of the geometry.\r\n   * @return {import(\"../coordinate.js\").Coordinate} Last point.\r\n   * @api\r\n   */\r\n  getLastCoordinate() {\r\n    return this.flatCoordinates.slice(\r\n      this.flatCoordinates.length - this.stride,\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Return the {@link import(\"./Geometry.js\").GeometryLayout layout} of the geometry.\r\n   * @return {import(\"./Geometry.js\").GeometryLayout} Layout.\r\n   * @api\r\n   */\r\n  getLayout() {\r\n    return this.layout;\r\n  }\r\n\r\n  /**\r\n   * Create a simplified version of this geometry using the Douglas Peucker algorithm.\r\n   * @param {number} squaredTolerance Squared tolerance.\r\n   * @return {SimpleGeometry} Simplified geometry.\r\n   * @override\r\n   */\r\n  getSimplifiedGeometry(squaredTolerance) {\r\n    if (this.simplifiedGeometryRevision !== this.getRevision()) {\r\n      this.simplifiedGeometryMaxMinSquaredTolerance = 0;\r\n      this.simplifiedGeometryRevision = this.getRevision();\r\n    }\r\n    // If squaredTolerance is negative or if we know that simplification will not\r\n    // have any effect then just return this.\r\n    if (\r\n      squaredTolerance < 0 ||\r\n      (this.simplifiedGeometryMaxMinSquaredTolerance !== 0 &&\r\n        squaredTolerance <= this.simplifiedGeometryMaxMinSquaredTolerance)\r\n    ) {\r\n      return this;\r\n    }\r\n\r\n    const simplifiedGeometry =\r\n      this.getSimplifiedGeometryInternal(squaredTolerance);\r\n    const simplifiedFlatCoordinates = simplifiedGeometry.getFlatCoordinates();\r\n    if (simplifiedFlatCoordinates.length < this.flatCoordinates.length) {\r\n      return simplifiedGeometry;\r\n    }\r\n    // Simplification did not actually remove any coordinates.  We now know\r\n    // that any calls to getSimplifiedGeometry with a squaredTolerance less\r\n    // than or equal to the current squaredTolerance will also not have any\r\n    // effect.  This allows us to short circuit simplification (saving CPU\r\n    // cycles) and prevents the cache of simplified geometries from filling\r\n    // up with useless identical copies of this geometry (saving memory).\r\n    this.simplifiedGeometryMaxMinSquaredTolerance = squaredTolerance;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @param {number} squaredTolerance Squared tolerance.\r\n   * @return {SimpleGeometry} Simplified geometry.\r\n   * @protected\r\n   */\r\n  getSimplifiedGeometryInternal(squaredTolerance) {\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @return {number} Stride.\r\n   */\r\n  getStride() {\r\n    return this.stride;\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"./Geometry.js\").GeometryLayout} layout Layout.\r\n   * @param {Array<number>} flatCoordinates Flat coordinates.\r\n   */\r\n  setFlatCoordinates(layout, flatCoordinates) {\r\n    this.stride = getStrideForLayout(layout);\r\n    this.layout = layout;\r\n    this.flatCoordinates = flatCoordinates;\r\n  }\r\n\r\n  /**\r\n   * @abstract\r\n   * @param {!Array<*>} coordinates Coordinates.\r\n   * @param {import(\"./Geometry.js\").GeometryLayout} [layout] Layout.\r\n   */\r\n  setCoordinates(coordinates, layout) {\r\n    abstract();\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"./Geometry.js\").GeometryLayout|undefined} layout Layout.\r\n   * @param {Array<*>} coordinates Coordinates.\r\n   * @param {number} nesting Nesting.\r\n   * @protected\r\n   */\r\n  setLayout(layout, coordinates, nesting) {\r\n    let stride;\r\n    if (layout) {\r\n      stride = getStrideForLayout(layout);\r\n    } else {\r\n      for (let i = 0; i < nesting; ++i) {\r\n        if (coordinates.length === 0) {\r\n          this.layout = 'XY';\r\n          this.stride = 2;\r\n          return;\r\n        }\r\n        coordinates = /** @type {Array<unknown>} */ (coordinates[0]);\r\n      }\r\n      stride = coordinates.length;\r\n      layout = getLayoutForStride(stride);\r\n    }\r\n    this.layout = layout;\r\n    this.stride = stride;\r\n  }\r\n\r\n  /**\r\n   * Apply a transform function to the coordinates of the geometry.\r\n   * The geometry is modified in place.\r\n   * If you do not want the geometry modified in place, first `clone()` it and\r\n   * then use this function on the clone.\r\n   * @param {import(\"../proj.js\").TransformFunction} transformFn Transform function.\r\n   * Called with a flat array of geometry coordinates.\r\n   * @api\r\n   * @override\r\n   */\r\n  applyTransform(transformFn) {\r\n    if (this.flatCoordinates) {\r\n      transformFn(\r\n        this.flatCoordinates,\r\n        this.flatCoordinates,\r\n        this.layout.startsWith('XYZ') ? 3 : 2,\r\n        this.stride,\r\n      );\r\n      this.changed();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Rotate the geometry around a given coordinate. This modifies the geometry\r\n   * coordinates in place.\r\n   * @param {number} angle Rotation angle in counter-clockwise radians.\r\n   * @param {import(\"../coordinate.js\").Coordinate} anchor The rotation center.\r\n   * @api\r\n   * @override\r\n   */\r\n  rotate(angle, anchor) {\r\n    const flatCoordinates = this.getFlatCoordinates();\r\n    if (flatCoordinates) {\r\n      const stride = this.getStride();\r\n      rotate(\r\n        flatCoordinates,\r\n        0,\r\n        flatCoordinates.length,\r\n        stride,\r\n        angle,\r\n        anchor,\r\n        flatCoordinates,\r\n      );\r\n      this.changed();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Scale the geometry (with an optional origin).  This modifies the geometry\r\n   * coordinates in place.\r\n   * @param {number} sx The scaling factor in the x-direction.\r\n   * @param {number} [sy] The scaling factor in the y-direction (defaults to sx).\r\n   * @param {import(\"../coordinate.js\").Coordinate} [anchor] The scale origin (defaults to the center\r\n   *     of the geometry extent).\r\n   * @api\r\n   * @override\r\n   */\r\n  scale(sx, sy, anchor) {\r\n    if (sy === undefined) {\r\n      sy = sx;\r\n    }\r\n    if (!anchor) {\r\n      anchor = getCenter(this.getExtent());\r\n    }\r\n    const flatCoordinates = this.getFlatCoordinates();\r\n    if (flatCoordinates) {\r\n      const stride = this.getStride();\r\n      scale(\r\n        flatCoordinates,\r\n        0,\r\n        flatCoordinates.length,\r\n        stride,\r\n        sx,\r\n        sy,\r\n        anchor,\r\n        flatCoordinates,\r\n      );\r\n      this.changed();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Translate the geometry.  This modifies the geometry coordinates in place.  If\r\n   * instead you want a new geometry, first `clone()` this geometry.\r\n   * @param {number} deltaX Delta X.\r\n   * @param {number} deltaY Delta Y.\r\n   * @api\r\n   * @override\r\n   */\r\n  translate(deltaX, deltaY) {\r\n    const flatCoordinates = this.getFlatCoordinates();\r\n    if (flatCoordinates) {\r\n      const stride = this.getStride();\r\n      translate(\r\n        flatCoordinates,\r\n        0,\r\n        flatCoordinates.length,\r\n        stride,\r\n        deltaX,\r\n        deltaY,\r\n        flatCoordinates,\r\n      );\r\n      this.changed();\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * @param {number} stride Stride.\r\n * @return {import(\"./Geometry.js\").GeometryLayout} layout Layout.\r\n */\r\nexport function getLayoutForStride(stride) {\r\n  let layout;\r\n  if (stride == 2) {\r\n    layout = 'XY';\r\n  } else if (stride == 3) {\r\n    layout = 'XYZ';\r\n  } else if (stride == 4) {\r\n    layout = 'XYZM';\r\n  }\r\n  return /** @type {import(\"./Geometry.js\").GeometryLayout} */ (layout);\r\n}\r\n\r\n/**\r\n * @param {import(\"./Geometry.js\").GeometryLayout} layout Layout.\r\n * @return {number} Stride.\r\n */\r\nexport function getStrideForLayout(layout) {\r\n  let stride;\r\n  if (layout == 'XY') {\r\n    stride = 2;\r\n  } else if (layout == 'XYZ' || layout == 'XYM') {\r\n    stride = 3;\r\n  } else if (layout == 'XYZM') {\r\n    stride = 4;\r\n  }\r\n  return /** @type {number} */ (stride);\r\n}\r\n\r\n/**\r\n * @param {SimpleGeometry} simpleGeometry Simple geometry.\r\n * @param {import(\"../transform.js\").Transform} transform Transform.\r\n * @param {Array<number>} [dest] Destination.\r\n * @return {Array<number>} Transformed flat coordinates.\r\n */\r\nexport function transformGeom2D(simpleGeometry, transform, dest) {\r\n  const flatCoordinates = simpleGeometry.getFlatCoordinates();\r\n  if (!flatCoordinates) {\r\n    return null;\r\n  }\r\n  const stride = simpleGeometry.getStride();\r\n  return transform2D(\r\n    flatCoordinates,\r\n    0,\r\n    flatCoordinates.length,\r\n    stride,\r\n    transform,\r\n    dest,\r\n  );\r\n}\r\n\r\nexport default SimpleGeometry;\r\n","/**\r\n * @module ol/geom/Geometry\r\n */\r\nimport BaseObject from '../Object.js';\r\nimport {\r\n  createEmpty,\r\n  createOrUpdateEmpty,\r\n  getHeight,\r\n  returnOrUpdate,\r\n} from '../extent.js';\r\nimport {memoizeOne} from '../functions.js';\r\nimport {get as getProjection, getTransform} from '../proj.js';\r\nimport {\r\n  compose as composeTransform,\r\n  create as createTransform,\r\n} from '../transform.js';\r\nimport {abstract} from '../util.js';\r\nimport {transform2D} from './flat/transform.js';\r\n\r\n/**\r\n * @typedef {'XY' | 'XYZ' | 'XYM' | 'XYZM'} GeometryLayout\r\n * The coordinate layout for geometries, indicating whether a 3rd or 4th z ('Z')\r\n * or measure ('M') coordinate is available.\r\n */\r\n\r\n/**\r\n * @typedef {'Point' | 'LineString' | 'LinearRing' | 'Polygon' | 'MultiPoint' | 'MultiLineString' | 'MultiPolygon' | 'GeometryCollection' | 'Circle'} Type\r\n * The geometry type.  One of `'Point'`, `'LineString'`, `'LinearRing'`,\r\n * `'Polygon'`, `'MultiPoint'`, `'MultiLineString'`, `'MultiPolygon'`,\r\n * `'GeometryCollection'`, or `'Circle'`.\r\n */\r\n\r\n/**\r\n * @type {import(\"../transform.js\").Transform}\r\n */\r\nconst tmpTransform = createTransform();\r\n\r\n/** @type {import('../coordinate.js').Coordinate} */\r\nconst tmpPoint = [NaN, NaN];\r\n\r\n/**\r\n * @classdesc\r\n * Abstract base class; normally only used for creating subclasses and not\r\n * instantiated in apps.\r\n * Base class for vector geometries.\r\n *\r\n * To get notified of changes to the geometry, register a listener for the\r\n * generic `change` event on your geometry instance.\r\n *\r\n * @abstract\r\n * @api\r\n */\r\nclass Geometry extends BaseObject {\r\n  constructor() {\r\n    super();\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"../extent.js\").Extent}\r\n     */\r\n    this.extent_ = createEmpty();\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.extentRevision_ = -1;\r\n\r\n    /**\r\n     * @protected\r\n     * @type {number}\r\n     */\r\n    this.simplifiedGeometryMaxMinSquaredTolerance = 0;\r\n\r\n    /**\r\n     * @protected\r\n     * @type {number}\r\n     */\r\n    this.simplifiedGeometryRevision = 0;\r\n\r\n    /**\r\n     * Get a transformed and simplified version of the geometry.\r\n     * @abstract\r\n     * @param {number} revision The geometry revision.\r\n     * @param {number} squaredTolerance Squared tolerance.\r\n     * @param {import(\"../proj.js\").TransformFunction} [transform] Optional transform function.\r\n     * @return {Geometry} Simplified geometry.\r\n     */\r\n    this.simplifyTransformedInternal = memoizeOne(\r\n      (revision, squaredTolerance, transform) => {\r\n        if (!transform) {\r\n          return this.getSimplifiedGeometry(squaredTolerance);\r\n        }\r\n        const clone = this.clone();\r\n        clone.applyTransform(transform);\r\n        return clone.getSimplifiedGeometry(squaredTolerance);\r\n      },\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Get a transformed and simplified version of the geometry.\r\n   * @abstract\r\n   * @param {number} squaredTolerance Squared tolerance.\r\n   * @param {import(\"../proj.js\").TransformFunction} [transform] Optional transform function.\r\n   * @return {Geometry} Simplified geometry.\r\n   */\r\n  simplifyTransformed(squaredTolerance, transform) {\r\n    return this.simplifyTransformedInternal(\r\n      this.getRevision(),\r\n      squaredTolerance,\r\n      transform,\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Make a complete copy of the geometry.\r\n   * @abstract\r\n   * @return {!Geometry} Clone.\r\n   */\r\n  clone() {\r\n    return abstract();\r\n  }\r\n\r\n  /**\r\n   * @abstract\r\n   * @param {number} x X.\r\n   * @param {number} y Y.\r\n   * @param {import(\"../coordinate.js\").Coordinate} closestPoint Closest point.\r\n   * @param {number} minSquaredDistance Minimum squared distance.\r\n   * @return {number} Minimum squared distance.\r\n   */\r\n  closestPointXY(x, y, closestPoint, minSquaredDistance) {\r\n    return abstract();\r\n  }\r\n\r\n  /**\r\n   * @param {number} x X.\r\n   * @param {number} y Y.\r\n   * @return {boolean} Contains (x, y).\r\n   */\r\n  containsXY(x, y) {\r\n    return this.closestPointXY(x, y, tmpPoint, Number.MIN_VALUE) === 0;\r\n  }\r\n\r\n  /**\r\n   * Return the closest point of the geometry to the passed point as\r\n   * {@link module:ol/coordinate~Coordinate coordinate}.\r\n   * @param {import(\"../coordinate.js\").Coordinate} point Point.\r\n   * @param {import(\"../coordinate.js\").Coordinate} [closestPoint] Closest point.\r\n   * @return {import(\"../coordinate.js\").Coordinate} Closest point.\r\n   * @api\r\n   */\r\n  getClosestPoint(point, closestPoint) {\r\n    closestPoint = closestPoint ? closestPoint : [NaN, NaN];\r\n    this.closestPointXY(point[0], point[1], closestPoint, Infinity);\r\n    return closestPoint;\r\n  }\r\n\r\n  /**\r\n   * Returns true if this geometry includes the specified coordinate. If the\r\n   * coordinate is on the boundary of the geometry, returns false.\r\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\r\n   * @return {boolean} Contains coordinate.\r\n   * @api\r\n   */\r\n  intersectsCoordinate(coordinate) {\r\n    return this.containsXY(coordinate[0], coordinate[1]);\r\n  }\r\n\r\n  /**\r\n   * @abstract\r\n   * @param {import(\"../extent.js\").Extent} extent Extent.\r\n   * @protected\r\n   * @return {import(\"../extent.js\").Extent} extent Extent.\r\n   */\r\n  computeExtent(extent) {\r\n    return abstract();\r\n  }\r\n\r\n  /**\r\n   * Get the extent of the geometry.\r\n   * @param {import(\"../extent.js\").Extent} [extent] Extent.\r\n   * @return {import(\"../extent.js\").Extent} extent Extent.\r\n   * @api\r\n   */\r\n  getExtent(extent) {\r\n    if (this.extentRevision_ != this.getRevision()) {\r\n      const extent = this.computeExtent(this.extent_);\r\n      if (isNaN(extent[0]) || isNaN(extent[1])) {\r\n        createOrUpdateEmpty(extent);\r\n      }\r\n      this.extentRevision_ = this.getRevision();\r\n    }\r\n    return returnOrUpdate(this.extent_, extent);\r\n  }\r\n\r\n  /**\r\n   * Rotate the geometry around a given coordinate. This modifies the geometry\r\n   * coordinates in place.\r\n   * @abstract\r\n   * @param {number} angle Rotation angle in radians.\r\n   * @param {import(\"../coordinate.js\").Coordinate} anchor The rotation center.\r\n   * @api\r\n   */\r\n  rotate(angle, anchor) {\r\n    abstract();\r\n  }\r\n\r\n  /**\r\n   * Scale the geometry (with an optional origin).  This modifies the geometry\r\n   * coordinates in place.\r\n   * @abstract\r\n   * @param {number} sx The scaling factor in the x-direction.\r\n   * @param {number} [sy] The scaling factor in the y-direction (defaults to sx).\r\n   * @param {import(\"../coordinate.js\").Coordinate} [anchor] The scale origin (defaults to the center\r\n   *     of the geometry extent).\r\n   * @api\r\n   */\r\n  scale(sx, sy, anchor) {\r\n    abstract();\r\n  }\r\n\r\n  /**\r\n   * Create a simplified version of this geometry.  For linestrings, this uses\r\n   * the [Douglas Peucker](https://en.wikipedia.org/wiki/Ramer-Douglas-Peucker_algorithm)\r\n   * algorithm.  For polygons, a quantization-based\r\n   * simplification is used to preserve topology.\r\n   * @param {number} tolerance The tolerance distance for simplification.\r\n   * @return {Geometry} A new, simplified version of the original geometry.\r\n   * @api\r\n   */\r\n  simplify(tolerance) {\r\n    return this.getSimplifiedGeometry(tolerance * tolerance);\r\n  }\r\n\r\n  /**\r\n   * Create a simplified version of this geometry using the Douglas Peucker\r\n   * algorithm.\r\n   * See https://en.wikipedia.org/wiki/Ramer-Douglas-Peucker_algorithm.\r\n   * @abstract\r\n   * @param {number} squaredTolerance Squared tolerance.\r\n   * @return {Geometry} Simplified geometry.\r\n   */\r\n  getSimplifiedGeometry(squaredTolerance) {\r\n    return abstract();\r\n  }\r\n\r\n  /**\r\n   * Get the type of this geometry.\r\n   * @abstract\r\n   * @return {Type} Geometry type.\r\n   */\r\n  getType() {\r\n    return abstract();\r\n  }\r\n\r\n  /**\r\n   * Apply a transform function to the coordinates of the geometry.\r\n   * The geometry is modified in place.\r\n   * If you do not want the geometry modified in place, first `clone()` it and\r\n   * then use this function on the clone.\r\n   * @abstract\r\n   * @param {import(\"../proj.js\").TransformFunction} transformFn Transform function.\r\n   * Called with a flat array of geometry coordinates.\r\n   */\r\n  applyTransform(transformFn) {\r\n    abstract();\r\n  }\r\n\r\n  /**\r\n   * Test if the geometry and the passed extent intersect.\r\n   * @abstract\r\n   * @param {import(\"../extent.js\").Extent} extent Extent.\r\n   * @return {boolean} `true` if the geometry and the extent intersect.\r\n   */\r\n  intersectsExtent(extent) {\r\n    return abstract();\r\n  }\r\n\r\n  /**\r\n   * Translate the geometry.  This modifies the geometry coordinates in place.  If\r\n   * instead you want a new geometry, first `clone()` this geometry.\r\n   * @abstract\r\n   * @param {number} deltaX Delta X.\r\n   * @param {number} deltaY Delta Y.\r\n   * @api\r\n   */\r\n  translate(deltaX, deltaY) {\r\n    abstract();\r\n  }\r\n\r\n  /**\r\n   * Transform each coordinate of the geometry from one coordinate reference\r\n   * system to another. The geometry is modified in place.\r\n   * For example, a line will be transformed to a line and a circle to a circle.\r\n   * If you do not want the geometry modified in place, first `clone()` it and\r\n   * then use this function on the clone.\r\n   *\r\n   * @param {import(\"../proj.js\").ProjectionLike} source The current projection.  Can be a\r\n   *     string identifier or a {@link module:ol/proj/Projection~Projection} object.\r\n   * @param {import(\"../proj.js\").ProjectionLike} destination The desired projection.  Can be a\r\n   *     string identifier or a {@link module:ol/proj/Projection~Projection} object.\r\n   * @return {this} This geometry.  Note that original geometry is\r\n   *     modified in place.\r\n   * @api\r\n   */\r\n  transform(source, destination) {\r\n    /** @type {import(\"../proj/Projection.js\").default} */\r\n    const sourceProj = getProjection(source);\r\n    const transformFn =\r\n      sourceProj.getUnits() == 'tile-pixels'\r\n        ? function (inCoordinates, outCoordinates, stride) {\r\n            const pixelExtent = sourceProj.getExtent();\r\n            const projectedExtent = sourceProj.getWorldExtent();\r\n            const scale = getHeight(projectedExtent) / getHeight(pixelExtent);\r\n            composeTransform(\r\n              tmpTransform,\r\n              projectedExtent[0],\r\n              projectedExtent[3],\r\n              scale,\r\n              -scale,\r\n              0,\r\n              0,\r\n              0,\r\n            );\r\n            const transformed = transform2D(\r\n              inCoordinates,\r\n              0,\r\n              inCoordinates.length,\r\n              stride,\r\n              tmpTransform,\r\n              outCoordinates,\r\n            );\r\n            const projTransform = getTransform(sourceProj, destination);\r\n            if (projTransform) {\r\n              return projTransform(transformed, transformed, stride);\r\n            }\r\n            return transformed;\r\n          }\r\n        : getTransform(sourceProj, destination);\r\n    this.applyTransform(transformFn);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport default Geometry;\r\n","/**\r\n * @module ol/proj\r\n */\r\n\r\n/**\r\n * The ol/proj module stores:\r\n * a list of {@link module:ol/proj/Projection~Projection}\r\n * objects, one for each projection supported by the application\r\n * a list of transform functions needed to convert coordinates in one projection\r\n * into another.\r\n *\r\n * The static functions are the methods used to maintain these.\r\n * Each transform function can handle not only simple coordinate pairs, but also\r\n * large arrays of coordinates such as vector geometries.\r\n *\r\n * When loaded, the library adds projection objects for EPSG:4326 (WGS84\r\n * geographic coordinates) and EPSG:3857 (Web or Spherical Mercator, as used\r\n * for example by Bing Maps or OpenStreetMap), together with the relevant\r\n * transform functions.\r\n *\r\n * Additional transforms may be added by using the http://proj4js.org/\r\n * library (version 2.2 or later). You can use the full build supplied by\r\n * Proj4js, or create a custom build to support those projections you need; see\r\n * the Proj4js website for how to do this. You also need the Proj4js definitions\r\n * for the required projections. These definitions can be obtained from\r\n * https://epsg.io/, and are a JS function, so can be loaded in a script\r\n * tag (as in the examples) or pasted into your application.\r\n *\r\n * After all required projection definitions are added to proj4's registry (by\r\n * using `proj4.defs()`), simply call `register(proj4)` from the `ol/proj/proj4`\r\n * package. Existing transforms are not changed by this function. See\r\n * examples/wms-image-custom-proj for an example of this.\r\n *\r\n * Additional projection definitions can be registered with `proj4.defs()` any\r\n * time. Just make sure to call `register(proj4)` again; for example, with user-supplied data where you don't\r\n * know in advance what projections are needed, you can initially load minimal\r\n * support and then load whichever are requested.\r\n *\r\n * Note that Proj4js does not support projection extents. If you want to add\r\n * one for creating default tile grids, you can add it after the Projection\r\n * object has been created with `setExtent`, for example,\r\n * `get('EPSG:1234').setExtent(extent)`.\r\n *\r\n * In addition to Proj4js support, any transform functions can be added with\r\n * {@link module:ol/proj.addCoordinateTransforms}. To use this, you must first create\r\n * a {@link module:ol/proj/Projection~Projection} object for the new projection and add it with\r\n * {@link module:ol/proj.addProjection}. You can then add the forward and inverse\r\n * functions with {@link module:ol/proj.addCoordinateTransforms}. See\r\n * examples/wms-custom-proj for an example of this.\r\n *\r\n * Note that if no transforms are needed and you only need to define the\r\n * projection, just add a {@link module:ol/proj/Projection~Projection} with\r\n * {@link module:ol/proj.addProjection}. See examples/wms-no-proj for an example of\r\n * this.\r\n */\r\nimport {warn} from './console.js';\r\nimport {equals, getWorldsAway} from './coordinate.js';\r\nimport {applyTransform, getWidth} from './extent.js';\r\nimport {clamp, modulo} from './math.js';\r\nimport Projection from './proj/Projection.js';\r\nimport {METERS_PER_UNIT} from './proj/Units.js';\r\nimport {\r\n  PROJECTIONS as EPSG3857_PROJECTIONS,\r\n  fromEPSG4326,\r\n  toEPSG4326,\r\n} from './proj/epsg3857.js';\r\nimport {PROJECTIONS as EPSG4326_PROJECTIONS} from './proj/epsg4326.js';\r\nimport {\r\n  add as addProj,\r\n  clear as clearProj,\r\n  get as getProj,\r\n} from './proj/projections.js';\r\nimport {\r\n  add as addTransformFunc,\r\n  clear as clearTransformFuncs,\r\n  get as getTransformFunc,\r\n} from './proj/transforms.js';\r\nimport {\r\n  makeProjection as makeUTMProjection,\r\n  makeTransforms as makeUTMTransforms,\r\n} from './proj/utm.js';\r\nimport {getDistance} from './sphere.js';\r\n\r\n/**\r\n * A projection as {@link module:ol/proj/Projection~Projection}, SRS identifier\r\n * string or undefined.\r\n * @typedef {Projection|string|undefined} ProjectionLike\r\n * @api\r\n */\r\n\r\n/**\r\n * @typedef {Object} Transforms\r\n * @property {TransformFunction} forward The forward transform (from geographic).\r\n * @property {TransformFunction} inverse The inverse transform (to geographic).\r\n */\r\n\r\n/**\r\n * @type {Array<function(Projection): Transforms|null>}\r\n */\r\nconst transformFactories = [makeUTMTransforms];\r\n\r\n/**\r\n * @type {Array<function(string): Projection|null>}\r\n */\r\nconst projectionFactories = [makeUTMProjection];\r\n\r\n/**\r\n * A transform function accepts an array of input coordinate values, an optional\r\n * output array, and an optional dimension (default should be 2).  The function\r\n * transforms the input coordinate values, populates the output array, and\r\n * returns the output array.\r\n *\r\n * @callback TransformFunction\r\n * @param {Array<number>} input\r\n * @param {Array<number>} [output]\r\n * @param {number} [dimension]\r\n * @param {number} [stride]\r\n * @return {Array<number>}\r\n *\r\n * @api\r\n */\r\n\r\nexport {METERS_PER_UNIT};\r\n\r\nexport {Projection};\r\n\r\nlet showCoordinateWarning = true;\r\n\r\n/**\r\n * @param {boolean} [disable] Disable console info about `useGeographic()`\r\n */\r\nexport function disableCoordinateWarning(disable) {\r\n  const hide = disable === undefined ? true : disable;\r\n  showCoordinateWarning = !hide;\r\n}\r\n\r\n/**\r\n * @param {Array<number>} input Input coordinate array.\r\n * @param {Array<number>} [output] Output array of coordinate values.\r\n * @return {Array<number>} Output coordinate array (new array, same coordinate\r\n *     values).\r\n */\r\nexport function cloneTransform(input, output) {\r\n  if (output !== undefined) {\r\n    for (let i = 0, ii = input.length; i < ii; ++i) {\r\n      output[i] = input[i];\r\n    }\r\n    output = output;\r\n  } else {\r\n    output = input.slice();\r\n  }\r\n  return output;\r\n}\r\n\r\n/**\r\n * @param {Array<number>} input Input coordinate array.\r\n * @param {Array<number>} [output] Output array of coordinate values.\r\n * @return {Array<number>} Input coordinate array (same array as input).\r\n */\r\nexport function identityTransform(input, output) {\r\n  if (output !== undefined && input !== output) {\r\n    for (let i = 0, ii = input.length; i < ii; ++i) {\r\n      output[i] = input[i];\r\n    }\r\n    input = output;\r\n  }\r\n  return input;\r\n}\r\n\r\n/**\r\n * Add a Projection object to the list of supported projections that can be\r\n * looked up by their code.\r\n *\r\n * @param {Projection} projection Projection instance.\r\n * @api\r\n */\r\nexport function addProjection(projection) {\r\n  addProj(projection.getCode(), projection);\r\n  addTransformFunc(projection, projection, cloneTransform);\r\n}\r\n\r\n/**\r\n * @param {Array<Projection>} projections Projections.\r\n */\r\nexport function addProjections(projections) {\r\n  projections.forEach(addProjection);\r\n}\r\n\r\n/**\r\n * Fetches a Projection object for the code specified.\r\n *\r\n * @param {ProjectionLike} projectionLike Either a code string which is\r\n *     a combination of authority and identifier such as \"EPSG:4326\", or an\r\n *     existing projection object, or undefined.\r\n * @return {Projection|null} Projection object, or null if not in list.\r\n * @api\r\n */\r\nexport function get(projectionLike) {\r\n  if (!(typeof projectionLike === 'string')) {\r\n    return projectionLike;\r\n  }\r\n  const projection = getProj(projectionLike);\r\n  if (projection) {\r\n    return projection;\r\n  }\r\n  for (const makeProjection of projectionFactories) {\r\n    const projection = makeProjection(projectionLike);\r\n    if (projection) {\r\n      return projection;\r\n    }\r\n  }\r\n  return null;\r\n}\r\n\r\n/**\r\n * Get the resolution of the point in degrees or distance units.\r\n * For projections with degrees as the unit this will simply return the\r\n * provided resolution. For other projections the point resolution is\r\n * by default estimated by transforming the `point` pixel to EPSG:4326,\r\n * measuring its width and height on the normal sphere,\r\n * and taking the average of the width and height.\r\n * A custom function can be provided for a specific projection, either\r\n * by setting the `getPointResolution` option in the\r\n * {@link module:ol/proj/Projection~Projection} constructor or by using\r\n * {@link module:ol/proj/Projection~Projection#setGetPointResolution} to change an existing\r\n * projection object.\r\n * @param {ProjectionLike} projection The projection.\r\n * @param {number} resolution Nominal resolution in projection units.\r\n * @param {import(\"./coordinate.js\").Coordinate} point Point to find adjusted resolution at.\r\n * @param {import(\"./proj/Units.js\").Units} [units] Units to get the point resolution in.\r\n * Default is the projection's units.\r\n * @return {number} Point resolution.\r\n * @api\r\n */\r\nexport function getPointResolution(projection, resolution, point, units) {\r\n  projection = get(projection);\r\n  let pointResolution;\r\n  const getter = projection.getPointResolutionFunc();\r\n  if (getter) {\r\n    pointResolution = getter(resolution, point);\r\n    if (units && units !== projection.getUnits()) {\r\n      const metersPerUnit = projection.getMetersPerUnit();\r\n      if (metersPerUnit) {\r\n        pointResolution =\r\n          (pointResolution * metersPerUnit) / METERS_PER_UNIT[units];\r\n      }\r\n    }\r\n  } else {\r\n    const projUnits = projection.getUnits();\r\n    if ((projUnits == 'degrees' && !units) || units == 'degrees') {\r\n      pointResolution = resolution;\r\n    } else {\r\n      // Estimate point resolution by transforming the center pixel to EPSG:4326,\r\n      // measuring its width and height on the normal sphere, and taking the\r\n      // average of the width and height.\r\n      const toEPSG4326 = getTransformFromProjections(\r\n        projection,\r\n        get('EPSG:4326'),\r\n      );\r\n      if (!toEPSG4326 && projUnits !== 'degrees') {\r\n        // no transform is available\r\n        pointResolution = resolution * projection.getMetersPerUnit();\r\n      } else {\r\n        let vertices = [\r\n          point[0] - resolution / 2,\r\n          point[1],\r\n          point[0] + resolution / 2,\r\n          point[1],\r\n          point[0],\r\n          point[1] - resolution / 2,\r\n          point[0],\r\n          point[1] + resolution / 2,\r\n        ];\r\n        vertices = toEPSG4326(vertices, vertices, 2);\r\n        const width = getDistance(vertices.slice(0, 2), vertices.slice(2, 4));\r\n        const height = getDistance(vertices.slice(4, 6), vertices.slice(6, 8));\r\n        pointResolution = (width + height) / 2;\r\n      }\r\n      const metersPerUnit = units\r\n        ? METERS_PER_UNIT[units]\r\n        : projection.getMetersPerUnit();\r\n      if (metersPerUnit !== undefined) {\r\n        pointResolution /= metersPerUnit;\r\n      }\r\n    }\r\n  }\r\n  return pointResolution;\r\n}\r\n\r\n/**\r\n * Registers transformation functions that don't alter coordinates. Those allow\r\n * to transform between projections with equal meaning.\r\n *\r\n * @param {Array<Projection>} projections Projections.\r\n * @api\r\n */\r\nexport function addEquivalentProjections(projections) {\r\n  addProjections(projections);\r\n  projections.forEach(function (source) {\r\n    projections.forEach(function (destination) {\r\n      if (source !== destination) {\r\n        addTransformFunc(source, destination, cloneTransform);\r\n      }\r\n    });\r\n  });\r\n}\r\n\r\n/**\r\n * Registers transformation functions to convert coordinates in any projection\r\n * in projection1 to any projection in projection2.\r\n *\r\n * @param {Array<Projection>} projections1 Projections with equal\r\n *     meaning.\r\n * @param {Array<Projection>} projections2 Projections with equal\r\n *     meaning.\r\n * @param {TransformFunction} forwardTransform Transformation from any\r\n *   projection in projection1 to any projection in projection2.\r\n * @param {TransformFunction} inverseTransform Transform from any projection\r\n *   in projection2 to any projection in projection1..\r\n */\r\nexport function addEquivalentTransforms(\r\n  projections1,\r\n  projections2,\r\n  forwardTransform,\r\n  inverseTransform,\r\n) {\r\n  projections1.forEach(function (projection1) {\r\n    projections2.forEach(function (projection2) {\r\n      addTransformFunc(projection1, projection2, forwardTransform);\r\n      addTransformFunc(projection2, projection1, inverseTransform);\r\n    });\r\n  });\r\n}\r\n\r\n/**\r\n * Clear all cached projections and transforms.\r\n */\r\nexport function clearAllProjections() {\r\n  clearProj();\r\n  clearTransformFuncs();\r\n}\r\n\r\n/**\r\n * @param {Projection|string|undefined} projection Projection.\r\n * @param {string} defaultCode Default code.\r\n * @return {Projection} Projection.\r\n */\r\nexport function createProjection(projection, defaultCode) {\r\n  if (!projection) {\r\n    return get(defaultCode);\r\n  }\r\n  if (typeof projection === 'string') {\r\n    return get(projection);\r\n  }\r\n  return /** @type {Projection} */ (projection);\r\n}\r\n\r\n/**\r\n * Creates a {@link module:ol/proj~TransformFunction} from a simple 2D coordinate transform\r\n * function.\r\n * @param {function(import(\"./coordinate.js\").Coordinate): import(\"./coordinate.js\").Coordinate} coordTransform Coordinate\r\n *     transform.\r\n * @return {TransformFunction} Transform function.\r\n */\r\nexport function createTransformFromCoordinateTransform(coordTransform) {\r\n  return (\r\n    /**\r\n     * @param {Array<number>} input Input.\r\n     * @param {Array<number>} [output] Output.\r\n     * @param {number} [dimension] Dimensions that should be transformed.\r\n     * @param {number} [stride] Stride.\r\n     * @return {Array<number>} Output.\r\n     */\r\n    function (input, output, dimension, stride) {\r\n      const length = input.length;\r\n      dimension = dimension !== undefined ? dimension : 2;\r\n      stride = stride ?? dimension;\r\n      output = output !== undefined ? output : new Array(length);\r\n      for (let i = 0; i < length; i += stride) {\r\n        const point = coordTransform(input.slice(i, i + dimension));\r\n        const pointLength = point.length;\r\n        for (let j = 0, jj = stride; j < jj; ++j) {\r\n          output[i + j] = j >= pointLength ? input[i + j] : point[j];\r\n        }\r\n      }\r\n      return output;\r\n    }\r\n  );\r\n}\r\n\r\n/**\r\n * Registers coordinate transform functions to convert coordinates between the\r\n * source projection and the destination projection.\r\n * The forward and inverse functions convert coordinate pairs; this function\r\n * converts these into the functions used internally which also handle\r\n * extents and coordinate arrays.\r\n *\r\n * @param {ProjectionLike} source Source projection.\r\n * @param {ProjectionLike} destination Destination projection.\r\n * @param {function(import(\"./coordinate.js\").Coordinate): import(\"./coordinate.js\").Coordinate} forward The forward transform\r\n *     function (that is, from the source projection to the destination\r\n *     projection) that takes a {@link module:ol/coordinate~Coordinate} as argument and returns\r\n *     the transformed {@link module:ol/coordinate~Coordinate}.\r\n * @param {function(import(\"./coordinate.js\").Coordinate): import(\"./coordinate.js\").Coordinate} inverse The inverse transform\r\n *     function (that is, from the destination projection to the source\r\n *     projection) that takes a {@link module:ol/coordinate~Coordinate} as argument and returns\r\n *     the transformed {@link module:ol/coordinate~Coordinate}. If the transform function can only\r\n *     transform less dimensions than the input coordinate, it is supposeed to return a coordinate\r\n *     with only the length it can transform. The other dimensions will be taken unchanged from the\r\n *     source.\r\n * @api\r\n */\r\nexport function addCoordinateTransforms(source, destination, forward, inverse) {\r\n  const sourceProj = get(source);\r\n  const destProj = get(destination);\r\n  addTransformFunc(\r\n    sourceProj,\r\n    destProj,\r\n    createTransformFromCoordinateTransform(forward),\r\n  );\r\n  addTransformFunc(\r\n    destProj,\r\n    sourceProj,\r\n    createTransformFromCoordinateTransform(inverse),\r\n  );\r\n}\r\n\r\n/**\r\n * Transforms a coordinate from longitude/latitude to a different projection.\r\n * @param {import(\"./coordinate.js\").Coordinate} coordinate Coordinate as longitude and latitude, i.e.\r\n *     an array with longitude as 1st and latitude as 2nd element.\r\n * @param {ProjectionLike} [projection] Target projection. The\r\n *     default is Web Mercator, i.e. 'EPSG:3857'.\r\n * @return {import(\"./coordinate.js\").Coordinate} Coordinate projected to the target projection.\r\n * @api\r\n */\r\nexport function fromLonLat(coordinate, projection) {\r\n  disableCoordinateWarning();\r\n  return transform(\r\n    coordinate,\r\n    'EPSG:4326',\r\n    projection !== undefined ? projection : 'EPSG:3857',\r\n  );\r\n}\r\n\r\n/**\r\n * Transforms a coordinate to longitude/latitude.\r\n * @param {import(\"./coordinate.js\").Coordinate} coordinate Projected coordinate.\r\n * @param {ProjectionLike} [projection] Projection of the coordinate.\r\n *     The default is Web Mercator, i.e. 'EPSG:3857'.\r\n * @return {import(\"./coordinate.js\").Coordinate} Coordinate as longitude and latitude, i.e. an array\r\n *     with longitude as 1st and latitude as 2nd element.\r\n * @api\r\n */\r\nexport function toLonLat(coordinate, projection) {\r\n  const lonLat = transform(\r\n    coordinate,\r\n    projection !== undefined ? projection : 'EPSG:3857',\r\n    'EPSG:4326',\r\n  );\r\n  const lon = lonLat[0];\r\n  if (lon < -180 || lon > 180) {\r\n    lonLat[0] = modulo(lon + 180, 360) - 180;\r\n  }\r\n  return lonLat;\r\n}\r\n\r\n/**\r\n * Checks if two projections are the same, that is every coordinate in one\r\n * projection does represent the same geographic point as the same coordinate in\r\n * the other projection.\r\n *\r\n * @param {Projection} projection1 Projection 1.\r\n * @param {Projection} projection2 Projection 2.\r\n * @return {boolean} Equivalent.\r\n * @api\r\n */\r\nexport function equivalent(projection1, projection2) {\r\n  if (projection1 === projection2) {\r\n    return true;\r\n  }\r\n  const equalUnits = projection1.getUnits() === projection2.getUnits();\r\n  if (projection1.getCode() === projection2.getCode()) {\r\n    return equalUnits;\r\n  }\r\n  const transformFunc = getTransformFromProjections(projection1, projection2);\r\n  return transformFunc === cloneTransform && equalUnits;\r\n}\r\n\r\n/**\r\n * Searches in the list of transform functions for the function for converting\r\n * coordinates from the source projection to the destination projection.\r\n *\r\n * @param {Projection} source Source Projection object.\r\n * @param {Projection} destination Destination Projection\r\n *     object.\r\n * @return {TransformFunction|null} Transform function.\r\n */\r\nexport function getTransformFromProjections(source, destination) {\r\n  const sourceCode = source.getCode();\r\n  const destinationCode = destination.getCode();\r\n  let transformFunc = getTransformFunc(sourceCode, destinationCode);\r\n  if (transformFunc) {\r\n    return transformFunc;\r\n  }\r\n\r\n  /**\r\n   * @type {Transforms|null}\r\n   */\r\n  let sourceTransforms = null;\r\n\r\n  /**\r\n   * @type {Transforms|null}\r\n   */\r\n  let destinationTransforms = null;\r\n\r\n  // lazily add projections if we have supported transforms\r\n  for (const makeTransforms of transformFactories) {\r\n    if (!sourceTransforms) {\r\n      sourceTransforms = makeTransforms(source);\r\n    }\r\n    if (!destinationTransforms) {\r\n      destinationTransforms = makeTransforms(destination);\r\n    }\r\n  }\r\n\r\n  if (!sourceTransforms && !destinationTransforms) {\r\n    return null;\r\n  }\r\n\r\n  const intermediateCode = 'EPSG:4326';\r\n  if (!destinationTransforms) {\r\n    const toDestination = getTransformFunc(intermediateCode, destinationCode);\r\n    if (toDestination) {\r\n      transformFunc = composeTransformFuncs(\r\n        sourceTransforms.inverse,\r\n        toDestination,\r\n      );\r\n    }\r\n  } else if (!sourceTransforms) {\r\n    const fromSource = getTransformFunc(sourceCode, intermediateCode);\r\n    if (fromSource) {\r\n      transformFunc = composeTransformFuncs(\r\n        fromSource,\r\n        destinationTransforms.forward,\r\n      );\r\n    }\r\n  } else {\r\n    transformFunc = composeTransformFuncs(\r\n      sourceTransforms.inverse,\r\n      destinationTransforms.forward,\r\n    );\r\n  }\r\n\r\n  if (transformFunc) {\r\n    addProjection(source);\r\n    addProjection(destination);\r\n    addTransformFunc(source, destination, transformFunc);\r\n  }\r\n\r\n  return transformFunc;\r\n}\r\n\r\n/**\r\n * @param {TransformFunction} t1 The first transform function.\r\n * @param {TransformFunction} t2 The second transform function.\r\n * @return {TransformFunction} The composed transform function.\r\n */\r\nfunction composeTransformFuncs(t1, t2) {\r\n  return function (input, output, dimensions, stride) {\r\n    output = t1(input, output, dimensions, stride);\r\n    return t2(output, output, dimensions, stride);\r\n  };\r\n}\r\n\r\n/**\r\n * Given the projection-like objects, searches for a transformation\r\n * function to convert a coordinates array from the source projection to the\r\n * destination projection.\r\n *\r\n * @param {ProjectionLike} source Source.\r\n * @param {ProjectionLike} destination Destination.\r\n * @return {TransformFunction} Transform function.\r\n * @api\r\n */\r\nexport function getTransform(source, destination) {\r\n  const sourceProjection = get(source);\r\n  const destinationProjection = get(destination);\r\n  return getTransformFromProjections(sourceProjection, destinationProjection);\r\n}\r\n\r\n/**\r\n * Transforms a coordinate from source projection to destination projection.\r\n * This returns a new coordinate (and does not modify the original). If there\r\n * is no available transform between the two projection, the function will throw\r\n * an error.\r\n *\r\n * See {@link module:ol/proj.transformExtent} for extent transformation.\r\n * See the transform method of {@link module:ol/geom/Geometry~Geometry} and its\r\n * subclasses for geometry transforms.\r\n *\r\n * @param {import(\"./coordinate.js\").Coordinate} coordinate Coordinate.\r\n * @param {ProjectionLike} source Source projection-like.\r\n * @param {ProjectionLike} destination Destination projection-like.\r\n * @return {import(\"./coordinate.js\").Coordinate} Coordinate.\r\n * @api\r\n */\r\nexport function transform(coordinate, source, destination) {\r\n  const transformFunc = getTransform(source, destination);\r\n  if (!transformFunc) {\r\n    const sourceCode = get(source).getCode();\r\n    const destinationCode = get(destination).getCode();\r\n    throw new Error(\r\n      `No transform available between ${sourceCode} and ${destinationCode}`,\r\n    );\r\n  }\r\n  return transformFunc(coordinate, undefined, coordinate.length);\r\n}\r\n\r\n/**\r\n * Transforms an extent from source projection to destination projection.  This\r\n * returns a new extent (and does not modify the original).\r\n *\r\n * @param {import(\"./extent.js\").Extent} extent The extent to transform.\r\n * @param {ProjectionLike} source Source projection-like.\r\n * @param {ProjectionLike} destination Destination projection-like.\r\n * @param {number} [stops] Number of stops per side used for the transform.\r\n * By default only the corners are used.\r\n * @return {import(\"./extent.js\").Extent} The transformed extent.\r\n * @api\r\n */\r\nexport function transformExtent(extent, source, destination, stops) {\r\n  const transformFunc = getTransform(source, destination);\r\n  return applyTransform(extent, transformFunc, undefined, stops);\r\n}\r\n\r\n/**\r\n * Transforms the given point to the destination projection.\r\n *\r\n * @param {import(\"./coordinate.js\").Coordinate} point Point.\r\n * @param {Projection} sourceProjection Source projection.\r\n * @param {Projection} destinationProjection Destination projection.\r\n * @return {import(\"./coordinate.js\").Coordinate} Point.\r\n */\r\nexport function transformWithProjections(\r\n  point,\r\n  sourceProjection,\r\n  destinationProjection,\r\n) {\r\n  const transformFunc = getTransformFromProjections(\r\n    sourceProjection,\r\n    destinationProjection,\r\n  );\r\n  return transformFunc(point);\r\n}\r\n\r\n/**\r\n * @type {Projection|null}\r\n */\r\nlet userProjection = null;\r\n\r\n/**\r\n * Set the projection for coordinates supplied from and returned by API methods.\r\n * This includes all API methods except for those interacting with tile grids,\r\n * plus {@link import(\"./Map.js\").FrameState} and {@link import(\"./View.js\").State}.\r\n * @param {ProjectionLike} projection The user projection.\r\n * @api\r\n */\r\nexport function setUserProjection(projection) {\r\n  userProjection = get(projection);\r\n}\r\n\r\n/**\r\n * Clear the user projection if set.\r\n * @api\r\n */\r\nexport function clearUserProjection() {\r\n  userProjection = null;\r\n}\r\n\r\n/**\r\n * Get the projection for coordinates supplied from and returned by API methods.\r\n * @return {Projection|null} The user projection (or null if not set).\r\n * @api\r\n */\r\nexport function getUserProjection() {\r\n  return userProjection;\r\n}\r\n\r\n/**\r\n * Use geographic coordinates (WGS-84 datum) in API methods.\r\n * This includes all API methods except for those interacting with tile grids,\r\n * plus {@link import(\"./Map.js\").FrameState} and {@link import(\"./View.js\").State}.\r\n * @api\r\n */\r\nexport function useGeographic() {\r\n  setUserProjection('EPSG:4326');\r\n}\r\n\r\n/**\r\n * Return a coordinate transformed into the user projection.  If no user projection\r\n * is set, the original coordinate is returned.\r\n * @param {Array<number>} coordinate Input coordinate.\r\n * @param {ProjectionLike} sourceProjection The input coordinate projection.\r\n * @return {Array<number>} The input coordinate in the user projection.\r\n */\r\nexport function toUserCoordinate(coordinate, sourceProjection) {\r\n  if (!userProjection) {\r\n    return coordinate;\r\n  }\r\n  return transform(coordinate, sourceProjection, userProjection);\r\n}\r\n\r\n/**\r\n * Return a coordinate transformed from the user projection.  If no user projection\r\n * is set, the original coordinate is returned.\r\n * @param {Array<number>} coordinate Input coordinate.\r\n * @param {ProjectionLike} destProjection The destination projection.\r\n * @return {Array<number>} The input coordinate transformed.\r\n */\r\nexport function fromUserCoordinate(coordinate, destProjection) {\r\n  if (!userProjection) {\r\n    if (\r\n      showCoordinateWarning &&\r\n      !equals(coordinate, [0, 0]) &&\r\n      coordinate[0] >= -180 &&\r\n      coordinate[0] <= 180 &&\r\n      coordinate[1] >= -90 &&\r\n      coordinate[1] <= 90\r\n    ) {\r\n      showCoordinateWarning = false;\r\n      warn(\r\n        'Call useGeographic() from ol/proj once to work with [longitude, latitude] coordinates.',\r\n      );\r\n    }\r\n    return coordinate;\r\n  }\r\n  return transform(coordinate, userProjection, destProjection);\r\n}\r\n\r\n/**\r\n * Return an extent transformed into the user projection.  If no user projection\r\n * is set, the original extent is returned.\r\n * @param {import(\"./extent.js\").Extent} extent Input extent.\r\n * @param {ProjectionLike} sourceProjection The input extent projection.\r\n * @return {import(\"./extent.js\").Extent} The input extent in the user projection.\r\n */\r\nexport function toUserExtent(extent, sourceProjection) {\r\n  if (!userProjection) {\r\n    return extent;\r\n  }\r\n  return transformExtent(extent, sourceProjection, userProjection);\r\n}\r\n\r\n/**\r\n * Return an extent transformed from the user projection.  If no user projection\r\n * is set, the original extent is returned.\r\n * @param {import(\"./extent.js\").Extent} extent Input extent.\r\n * @param {ProjectionLike} destProjection The destination projection.\r\n * @return {import(\"./extent.js\").Extent} The input extent transformed.\r\n */\r\nexport function fromUserExtent(extent, destProjection) {\r\n  if (!userProjection) {\r\n    return extent;\r\n  }\r\n  return transformExtent(extent, userProjection, destProjection);\r\n}\r\n\r\n/**\r\n * Return the resolution in user projection units per pixel. If no user projection\r\n * is set, or source or user projection are missing units, the original resolution\r\n * is returned.\r\n * @param {number} resolution Resolution in input projection units per pixel.\r\n * @param {ProjectionLike} sourceProjection The input projection.\r\n * @return {number} Resolution in user projection units per pixel.\r\n */\r\nexport function toUserResolution(resolution, sourceProjection) {\r\n  if (!userProjection) {\r\n    return resolution;\r\n  }\r\n  const sourceMetersPerUnit = get(sourceProjection).getMetersPerUnit();\r\n  const userMetersPerUnit = userProjection.getMetersPerUnit();\r\n  return sourceMetersPerUnit && userMetersPerUnit\r\n    ? (resolution * sourceMetersPerUnit) / userMetersPerUnit\r\n    : resolution;\r\n}\r\n\r\n/**\r\n * Return the resolution in user projection units per pixel. If no user projection\r\n * is set, or source or user projection are missing units, the original resolution\r\n * is returned.\r\n * @param {number} resolution Resolution in user projection units per pixel.\r\n * @param {ProjectionLike} destProjection The destination projection.\r\n * @return {number} Resolution in destination projection units per pixel.\r\n */\r\nexport function fromUserResolution(resolution, destProjection) {\r\n  if (!userProjection) {\r\n    return resolution;\r\n  }\r\n  const destMetersPerUnit = get(destProjection).getMetersPerUnit();\r\n  const userMetersPerUnit = userProjection.getMetersPerUnit();\r\n  return destMetersPerUnit && userMetersPerUnit\r\n    ? (resolution * userMetersPerUnit) / destMetersPerUnit\r\n    : resolution;\r\n}\r\n\r\n/**\r\n * Creates a safe coordinate transform function from a coordinate transform function.\r\n * \"Safe\" means that it can handle wrapping of x-coordinates for global projections,\r\n * and that coordinates exceeding the source projection validity extent's range will be\r\n * clamped to the validity range.\r\n * @param {Projection} sourceProj Source projection.\r\n * @param {Projection} destProj Destination projection.\r\n * @param {function(import(\"./coordinate.js\").Coordinate): import(\"./coordinate.js\").Coordinate} transform Transform function (source to destination).\r\n * @return {function(import(\"./coordinate.js\").Coordinate): import(\"./coordinate.js\").Coordinate} Safe transform function (source to destination).\r\n */\r\nexport function createSafeCoordinateTransform(sourceProj, destProj, transform) {\r\n  return function (coord) {\r\n    let transformed, worldsAway;\r\n    if (sourceProj.canWrapX()) {\r\n      const sourceExtent = sourceProj.getExtent();\r\n      const sourceExtentWidth = getWidth(sourceExtent);\r\n      coord = coord.slice(0);\r\n      worldsAway = getWorldsAway(coord, sourceProj, sourceExtentWidth);\r\n      if (worldsAway) {\r\n        // Move x to the real world\r\n        coord[0] = coord[0] - worldsAway * sourceExtentWidth;\r\n      }\r\n      coord[0] = clamp(coord[0], sourceExtent[0], sourceExtent[2]);\r\n      coord[1] = clamp(coord[1], sourceExtent[1], sourceExtent[3]);\r\n      transformed = transform(coord);\r\n    } else {\r\n      transformed = transform(coord);\r\n    }\r\n    if (worldsAway && destProj.canWrapX()) {\r\n      // Move transformed coordinate back to the offset world\r\n      transformed[0] += worldsAway * getWidth(destProj.getExtent());\r\n    }\r\n    return transformed;\r\n  };\r\n}\r\n\r\n/**\r\n * Add transforms to and from EPSG:4326 and EPSG:3857.  This function is called\r\n * by when this module is executed and should only need to be called again after\r\n * `clearAllProjections()` is called (e.g. in tests).\r\n */\r\nexport function addCommon() {\r\n  // Add transformations that don't alter coordinates to convert within set of\r\n  // projections with equal meaning.\r\n  addEquivalentProjections(EPSG3857_PROJECTIONS);\r\n  addEquivalentProjections(EPSG4326_PROJECTIONS);\r\n  // Add transformations to convert EPSG:4326 like coordinates to EPSG:3857 like\r\n  // coordinates and back.\r\n  addEquivalentTransforms(\r\n    EPSG4326_PROJECTIONS,\r\n    EPSG3857_PROJECTIONS,\r\n    fromEPSG4326,\r\n    toEPSG4326,\r\n  );\r\n}\r\n\r\naddCommon();\r\n","/**\r\n * @module ol/console\r\n */\r\n\r\n/**\r\n * @typedef {'info'|'warn'|'error'|'none'} Level\r\n */\r\n\r\n/**\r\n * @type {Object<Level, number>}\r\n */\r\nconst levels = {\r\n  info: 1,\r\n  warn: 2,\r\n  error: 3,\r\n  none: 4,\r\n};\r\n\r\n/**\r\n * @type {number}\r\n */\r\nlet level = levels.info;\r\n\r\n/**\r\n * Set the logging level.  By default, the level is set to 'info' and all\r\n * messages will be logged.  Set to 'warn' to only display warnings and errors.\r\n * Set to 'error' to only display errors.  Set to 'none' to silence all messages.\r\n *\r\n * @param {Level} l The new level.\r\n */\r\nexport function setLevel(l) {\r\n  level = levels[l];\r\n}\r\n\r\n/**\r\n * @param  {...any} args Arguments to log\r\n */\r\nexport function log(...args) {\r\n  if (level > levels.info) {\r\n    return;\r\n  }\r\n  console.log(...args); // eslint-disable-line no-console\r\n}\r\n\r\n/**\r\n * @param  {...any} args Arguments to log\r\n */\r\nexport function warn(...args) {\r\n  if (level > levels.warn) {\r\n    return;\r\n  }\r\n  console.warn(...args); // eslint-disable-line no-console\r\n}\r\n\r\n/**\r\n * @param  {...any} args Arguments to log\r\n */\r\nexport function error(...args) {\r\n  if (level > levels.error) {\r\n    return;\r\n  }\r\n  console.error(...args); // eslint-disable-line no-console\r\n}\r\n","/**\r\n * @module ol/proj/Units\r\n */\r\n\r\n/**\r\n * @typedef {'radians' | 'degrees' | 'ft' | 'm' | 'pixels' | 'tile-pixels' | 'us-ft'} Units\r\n * Projection units.\r\n */\r\n\r\n/**\r\n * See http://duff.ess.washington.edu/data/raster/drg/docs/geotiff.txt\r\n * @type {Object<number, Units>}\r\n */\r\nconst unitByCode = {\r\n  '9001': 'm',\r\n  '9002': 'ft',\r\n  '9003': 'us-ft',\r\n  '9101': 'radians',\r\n  '9102': 'degrees',\r\n};\r\n\r\n/**\r\n * @param {number} code Unit code.\r\n * @return {Units} Units.\r\n */\r\nexport function fromCode(code) {\r\n  return unitByCode[code];\r\n}\r\n\r\n/**\r\n * @typedef {Object} MetersPerUnitLookup\r\n * @property {number} radians Radians\r\n * @property {number} degrees Degrees\r\n * @property {number} ft  Feet\r\n * @property {number} m Meters\r\n * @property {number} us-ft US feet\r\n */\r\n\r\n/**\r\n * Meters per unit lookup table.\r\n * @const\r\n * @type {MetersPerUnitLookup}\r\n * @api\r\n */\r\nexport const METERS_PER_UNIT = {\r\n  // use the radius of the Normal sphere\r\n  'radians': 6370997 / (2 * Math.PI),\r\n  'degrees': (2 * Math.PI * 6370997) / 360,\r\n  'ft': 0.3048,\r\n  'm': 1,\r\n  'us-ft': 1200 / 3937,\r\n};\r\n","/**\r\n * @module ol/proj/epsg3857\r\n */\r\nimport Projection from './Projection.js';\r\n\r\n/**\r\n * Radius of WGS84 sphere\r\n *\r\n * @const\r\n * @type {number}\r\n */\r\nexport const RADIUS = 6378137;\r\n\r\n/**\r\n * @const\r\n * @type {number}\r\n */\r\nexport const HALF_SIZE = Math.PI * RADIUS;\r\n\r\n/**\r\n * @const\r\n * @type {import(\"../extent.js\").Extent}\r\n */\r\nexport const EXTENT = [-HALF_SIZE, -HALF_SIZE, HALF_SIZE, HALF_SIZE];\r\n\r\n/**\r\n * @const\r\n * @type {import(\"../extent.js\").Extent}\r\n */\r\nexport const WORLD_EXTENT = [-180, -85, 180, 85];\r\n\r\n/**\r\n * Maximum safe value in y direction\r\n * @const\r\n * @type {number}\r\n */\r\nexport const MAX_SAFE_Y = RADIUS * Math.log(Math.tan(Math.PI / 2));\r\n\r\n/**\r\n * @classdesc\r\n * Projection object for web/spherical Mercator (EPSG:3857).\r\n */\r\nclass EPSG3857Projection extends Projection {\r\n  /**\r\n   * @param {string} code Code.\r\n   */\r\n  constructor(code) {\r\n    super({\r\n      code: code,\r\n      units: 'm',\r\n      extent: EXTENT,\r\n      global: true,\r\n      worldExtent: WORLD_EXTENT,\r\n      getPointResolution: function (resolution, point) {\r\n        return resolution / Math.cosh(point[1] / RADIUS);\r\n      },\r\n    });\r\n  }\r\n}\r\n\r\n/**\r\n * Projections equal to EPSG:3857.\r\n *\r\n * @const\r\n * @type {Array<import(\"./Projection.js\").default>}\r\n */\r\nexport const PROJECTIONS = [\r\n  new EPSG3857Projection('EPSG:3857'),\r\n  new EPSG3857Projection('EPSG:102100'),\r\n  new EPSG3857Projection('EPSG:102113'),\r\n  new EPSG3857Projection('EPSG:900913'),\r\n  new EPSG3857Projection('http://www.opengis.net/def/crs/EPSG/0/3857'),\r\n  new EPSG3857Projection('http://www.opengis.net/gml/srs/epsg.xml#3857'),\r\n];\r\n\r\n/**\r\n * Transformation from EPSG:4326 to EPSG:3857.\r\n *\r\n * @param {Array<number>} input Input array of coordinate values.\r\n * @param {Array<number>} [output] Output array of coordinate values.\r\n * @param {number} [dimension] Dimension (default is `2`).\r\n * @param {number} [stride] Stride (default is `dimension`).\r\n * @return {Array<number>} Output array of coordinate values.\r\n */\r\nexport function fromEPSG4326(input, output, dimension, stride) {\r\n  const length = input.length;\r\n  dimension = dimension > 1 ? dimension : 2;\r\n  stride = stride ?? dimension;\r\n  if (output === undefined) {\r\n    if (dimension > 2) {\r\n      // preserve values beyond second dimension\r\n      output = input.slice();\r\n    } else {\r\n      output = new Array(length);\r\n    }\r\n  }\r\n  for (let i = 0; i < length; i += stride) {\r\n    output[i] = (HALF_SIZE * input[i]) / 180;\r\n    let y = RADIUS * Math.log(Math.tan((Math.PI * (+input[i + 1] + 90)) / 360));\r\n    if (y > MAX_SAFE_Y) {\r\n      y = MAX_SAFE_Y;\r\n    } else if (y < -MAX_SAFE_Y) {\r\n      y = -MAX_SAFE_Y;\r\n    }\r\n    output[i + 1] = y;\r\n  }\r\n  return output;\r\n}\r\n\r\n/**\r\n * Transformation from EPSG:3857 to EPSG:4326.\r\n *\r\n * @param {Array<number>} input Input array of coordinate values.\r\n * @param {Array<number>} [output] Output array of coordinate values.\r\n * @param {number} [dimension] Dimension (default is `2`).\r\n * @param {number} [stride] Stride (default is `dimension`).\r\n * @return {Array<number>} Output array of coordinate values.\r\n */\r\nexport function toEPSG4326(input, output, dimension, stride) {\r\n  const length = input.length;\r\n  dimension = dimension > 1 ? dimension : 2;\r\n  stride = stride ?? dimension;\r\n  if (output === undefined) {\r\n    if (dimension > 2) {\r\n      // preserve values beyond second dimension\r\n      output = input.slice();\r\n    } else {\r\n      output = new Array(length);\r\n    }\r\n  }\r\n  for (let i = 0; i < length; i += stride) {\r\n    output[i] = (180 * input[i]) / HALF_SIZE;\r\n    output[i + 1] =\r\n      (360 * Math.atan(Math.exp(input[i + 1] / RADIUS))) / Math.PI - 90;\r\n  }\r\n  return output;\r\n}\r\n","/**\r\n * @module ol/proj/Projection\r\n */\r\nimport {METERS_PER_UNIT} from './Units.js';\r\n\r\n/**\r\n * The function is called with a `number` view resolution and a\r\n * {@link module:ol/coordinate~Coordinate} as arguments, and returns the `number` resolution\r\n * in projection units at the passed coordinate.\r\n * @typedef {function(number, import(\"../coordinate.js\").Coordinate):number} GetPointResolution\r\n * @api\r\n */\r\n\r\n/**\r\n * @typedef {Object} Options\r\n * @property {string} code The SRS identifier code, e.g. `EPSG:4326`.\r\n * @property {import(\"./Units.js\").Units} [units] Units. Required unless a\r\n * proj4 projection is defined for `code`.\r\n * @property {import(\"../extent.js\").Extent} [extent] The validity extent for the SRS.\r\n * @property {string} [axisOrientation='enu'] The axis orientation as specified in Proj4.\r\n * @property {boolean} [global=false] Whether the projection is valid for the whole globe.\r\n * @property {number} [metersPerUnit] The meters per unit for the SRS.\r\n * If not provided, the `units` are used to get the meters per unit from the {@link METERS_PER_UNIT}\r\n * lookup table.\r\n * @property {import(\"../extent.js\").Extent} [worldExtent] The world extent for the SRS.\r\n * @property {GetPointResolution} [getPointResolution]\r\n * Function to determine resolution at a point. The function is called with a\r\n * `number` view resolution and a {@link module:ol/coordinate~Coordinate} as arguments, and returns\r\n * the `number` resolution in projection units at the passed coordinate. If this is `undefined`,\r\n * the default {@link module:ol/proj.getPointResolution} function will be used.\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * In most cases, you should not need to create instances of this class.\r\n * Instead, where projection information is required, you can use a string\r\n * projection code or identifier (e.g. `EPSG:4326`) instead of a projection\r\n * instance.\r\n *\r\n * The library includes support for transforming coordinates between the following\r\n * projections:\r\n *\r\n *  WGS 84 / Geographic - Using codes `EPSG:4326`, `CRS:84`, `urn:ogc:def:crs:EPSG:6.6:4326`,\r\n *    `urn:ogc:def:crs:OGC:1.3:CRS84`, `urn:ogc:def:crs:OGC:2:84`, `http://www.opengis.net/gml/srs/epsg.xml#4326`,\r\n *    or `urn:x-ogc:def:crs:EPSG:4326`\r\n *  WGS 84 / Spherical Mercator - Using codes `EPSG:3857`, `EPSG:102100`, `EPSG:102113`, `EPSG:900913`,\r\n *    `urn:ogc:def:crs:EPSG:6.18:3:3857`, or `http://www.opengis.net/gml/srs/epsg.xml#3857`\r\n *  WGS 84 / UTM zones - Using codes `EPSG:32601` through `EPSG:32660` for northern zones\r\n *    and `EPSG:32701` through `EPSG:32760` for southern zones. Note that the built-in UTM transforms\r\n *    are lower accuracy (with errors on the order of 0.1 m) than those that you might get in a\r\n *    library like [proj4js](https://github.com/proj4js/proj4js).\r\n *\r\n * For additional projection support, or to use higher accuracy transforms than the built-in ones, you can use\r\n * the [proj4js](https://github.com/proj4js/proj4js) library. With `proj4js`, after adding any new projection\r\n * definitions, call the {@link module:ol/proj/proj4.register} function.\r\n *\r\n * You can use the {@link module:ol/proj.get} function to retrieve a projection instance\r\n * for one of the registered projections.\r\n *\r\n * @api\r\n */\r\nclass Projection {\r\n  /**\r\n   * @param {Options} options Projection options.\r\n   */\r\n  constructor(options) {\r\n    /**\r\n     * @private\r\n     * @type {string}\r\n     */\r\n    this.code_ = options.code;\r\n\r\n    /**\r\n     * Units of projected coordinates. When set to `TILE_PIXELS`, a\r\n     * `this.extent_` and `this.worldExtent_` must be configured properly for each\r\n     * tile.\r\n     * @private\r\n     * @type {import(\"./Units.js\").Units}\r\n     */\r\n    this.units_ = /** @type {import(\"./Units.js\").Units} */ (options.units);\r\n\r\n    /**\r\n     * Validity extent of the projection in projected coordinates. For projections\r\n     * with `TILE_PIXELS` units, this is the extent of the tile in\r\n     * tile pixel space.\r\n     * @private\r\n     * @type {import(\"../extent.js\").Extent}\r\n     */\r\n    this.extent_ = options.extent !== undefined ? options.extent : null;\r\n\r\n    /**\r\n     * Extent of the world in EPSG:4326. For projections with\r\n     * `TILE_PIXELS` units, this is the extent of the tile in\r\n     * projected coordinate space.\r\n     * @private\r\n     * @type {import(\"../extent.js\").Extent}\r\n     */\r\n    this.worldExtent_ =\r\n      options.worldExtent !== undefined ? options.worldExtent : null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {string}\r\n     */\r\n    this.axisOrientation_ =\r\n      options.axisOrientation !== undefined ? options.axisOrientation : 'enu';\r\n\r\n    /**\r\n     * @private\r\n     * @type {boolean}\r\n     */\r\n    this.global_ = options.global !== undefined ? options.global : false;\r\n\r\n    /**\r\n     * @private\r\n     * @type {boolean}\r\n     */\r\n    this.canWrapX_ = !!(this.global_ && this.extent_);\r\n\r\n    /**\r\n     * @private\r\n     * @type {GetPointResolution|undefined}\r\n     */\r\n    this.getPointResolutionFunc_ = options.getPointResolution;\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"../tilegrid/TileGrid.js\").default}\r\n     */\r\n    this.defaultTileGrid_ = null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number|undefined}\r\n     */\r\n    this.metersPerUnit_ = options.metersPerUnit;\r\n  }\r\n\r\n  /**\r\n   * @return {boolean} The projection is suitable for wrapping the x-axis\r\n   */\r\n  canWrapX() {\r\n    return this.canWrapX_;\r\n  }\r\n\r\n  /**\r\n   * Get the code for this projection, e.g. 'EPSG:4326'.\r\n   * @return {string} Code.\r\n   * @api\r\n   */\r\n  getCode() {\r\n    return this.code_;\r\n  }\r\n\r\n  /**\r\n   * Get the validity extent for this projection.\r\n   * @return {import(\"../extent.js\").Extent} Extent.\r\n   * @api\r\n   */\r\n  getExtent() {\r\n    return this.extent_;\r\n  }\r\n\r\n  /**\r\n   * Get the units of this projection.\r\n   * @return {import(\"./Units.js\").Units} Units.\r\n   * @api\r\n   */\r\n  getUnits() {\r\n    return this.units_;\r\n  }\r\n\r\n  /**\r\n   * Get the amount of meters per unit of this projection.  If the projection is\r\n   * not configured with `metersPerUnit` or a units identifier, the return is\r\n   * `undefined`.\r\n   * @return {number|undefined} Meters.\r\n   * @api\r\n   */\r\n  getMetersPerUnit() {\r\n    return this.metersPerUnit_ || METERS_PER_UNIT[this.units_];\r\n  }\r\n\r\n  /**\r\n   * Get the world extent for this projection.\r\n   * @return {import(\"../extent.js\").Extent} Extent.\r\n   * @api\r\n   */\r\n  getWorldExtent() {\r\n    return this.worldExtent_;\r\n  }\r\n\r\n  /**\r\n   * Get the axis orientation of this projection.\r\n   * Example values are:\r\n   * enu - the default easting, northing, elevation.\r\n   * neu - northing, easting, up - useful for \"lat/long\" geographic coordinates,\r\n   *     or south orientated transverse mercator.\r\n   * wnu - westing, northing, up - some planetary coordinate systems have\r\n   *     \"west positive\" coordinate systems\r\n   * @return {string} Axis orientation.\r\n   * @api\r\n   */\r\n  getAxisOrientation() {\r\n    return this.axisOrientation_;\r\n  }\r\n\r\n  /**\r\n   * Is this projection a global projection which spans the whole world?\r\n   * @return {boolean} Whether the projection is global.\r\n   * @api\r\n   */\r\n  isGlobal() {\r\n    return this.global_;\r\n  }\r\n\r\n  /**\r\n   * Set if the projection is a global projection which spans the whole world\r\n   * @param {boolean} global Whether the projection is global.\r\n   * @api\r\n   */\r\n  setGlobal(global) {\r\n    this.global_ = global;\r\n    this.canWrapX_ = !!(global && this.extent_);\r\n  }\r\n\r\n  /**\r\n   * @return {import(\"../tilegrid/TileGrid.js\").default} The default tile grid.\r\n   */\r\n  getDefaultTileGrid() {\r\n    return this.defaultTileGrid_;\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../tilegrid/TileGrid.js\").default} tileGrid The default tile grid.\r\n   */\r\n  setDefaultTileGrid(tileGrid) {\r\n    this.defaultTileGrid_ = tileGrid;\r\n  }\r\n\r\n  /**\r\n   * Set the validity extent for this projection.\r\n   * @param {import(\"../extent.js\").Extent} extent Extent.\r\n   * @api\r\n   */\r\n  setExtent(extent) {\r\n    this.extent_ = extent;\r\n    this.canWrapX_ = !!(this.global_ && extent);\r\n  }\r\n\r\n  /**\r\n   * Set the world extent for this projection.\r\n   * @param {import(\"../extent.js\").Extent} worldExtent World extent\r\n   *     [minlon, minlat, maxlon, maxlat].\r\n   * @api\r\n   */\r\n  setWorldExtent(worldExtent) {\r\n    this.worldExtent_ = worldExtent;\r\n  }\r\n\r\n  /**\r\n   * Set the getPointResolution function (see {@link module:ol/proj.getPointResolution}\r\n   * for this projection.\r\n   * @param {function(number, import(\"../coordinate.js\").Coordinate):number} func Function\r\n   * @api\r\n   */\r\n  setGetPointResolution(func) {\r\n    this.getPointResolutionFunc_ = func;\r\n  }\r\n\r\n  /**\r\n   * Get the custom point resolution function for this projection (if set).\r\n   * @return {GetPointResolution|undefined} The custom point\r\n   * resolution function (if set).\r\n   */\r\n  getPointResolutionFunc() {\r\n    return this.getPointResolutionFunc_;\r\n  }\r\n}\r\n\r\nexport default Projection;\r\n","/**\r\n * @module ol/proj/epsg4326\r\n */\r\nimport Projection from './Projection.js';\r\n\r\n/**\r\n * Semi-major radius of the WGS84 ellipsoid.\r\n *\r\n * @const\r\n * @type {number}\r\n */\r\nexport const RADIUS = 6378137;\r\n\r\n/**\r\n * Extent of the EPSG:4326 projection which is the whole world.\r\n *\r\n * @const\r\n * @type {import(\"../extent.js\").Extent}\r\n */\r\nexport const EXTENT = [-180, -90, 180, 90];\r\n\r\n/**\r\n * @const\r\n * @type {number}\r\n */\r\nexport const METERS_PER_UNIT = (Math.PI * RADIUS) / 180;\r\n\r\n/**\r\n * @classdesc\r\n * Projection object for WGS84 geographic coordinates (EPSG:4326).\r\n *\r\n * Note that OpenLayers does not strictly comply with the EPSG definition.\r\n * The EPSG registry defines 4326 as a CRS for Latitude,Longitude (y,x).\r\n * OpenLayers treats EPSG:4326 as a pseudo-projection, with x,y coordinates.\r\n */\r\nclass EPSG4326Projection extends Projection {\r\n  /**\r\n   * @param {string} code Code.\r\n   * @param {string} [axisOrientation] Axis orientation.\r\n   */\r\n  constructor(code, axisOrientation) {\r\n    super({\r\n      code: code,\r\n      units: 'degrees',\r\n      extent: EXTENT,\r\n      axisOrientation: axisOrientation,\r\n      global: true,\r\n      metersPerUnit: METERS_PER_UNIT,\r\n      worldExtent: EXTENT,\r\n    });\r\n  }\r\n}\r\n\r\n/**\r\n * Projections equal to EPSG:4326.\r\n *\r\n * @const\r\n * @type {Array<import(\"./Projection.js\").default>}\r\n */\r\nexport const PROJECTIONS = [\r\n  new EPSG4326Projection('CRS:84'),\r\n  new EPSG4326Projection('EPSG:4326', 'neu'),\r\n  new EPSG4326Projection('urn:ogc:def:crs:OGC:1.3:CRS84'),\r\n  new EPSG4326Projection('urn:ogc:def:crs:OGC:2:84'),\r\n  new EPSG4326Projection('http://www.opengis.net/def/crs/OGC/1.3/CRS84'),\r\n  new EPSG4326Projection('http://www.opengis.net/gml/srs/epsg.xml#4326', 'neu'),\r\n  new EPSG4326Projection('http://www.opengis.net/def/crs/EPSG/0/4326', 'neu'),\r\n];\r\n","/**\r\n * @module ol/proj/projections\r\n */\r\n\r\n/**\r\n * @type {Object<string, import(\"./Projection.js\").default>}\r\n */\r\nlet cache = {};\r\n\r\n/**\r\n * Clear the projections cache.\r\n */\r\nexport function clear() {\r\n  cache = {};\r\n}\r\n\r\n/**\r\n * Get a cached projection by code.\r\n * @param {string} code The code for the projection.\r\n * @return {import(\"./Projection.js\").default|null} The projection (if cached).\r\n */\r\nexport function get(code) {\r\n  return (\r\n    cache[code] ||\r\n    cache[code.replace(/urn:(x-)?ogc:def:crs:EPSG:(.*:)?(\\w+)$/, 'EPSG:$3')] ||\r\n    null\r\n  );\r\n}\r\n\r\n/**\r\n * Add a projection to the cache.\r\n * @param {string} code The projection code.\r\n * @param {import(\"./Projection.js\").default} projection The projection to cache.\r\n */\r\nexport function add(code, projection) {\r\n  cache[code] = projection;\r\n}\r\n","/**\r\n * @module ol/proj/transforms\r\n */\r\nimport {isEmpty} from '../obj.js';\r\n\r\n/**\r\n * @private\r\n * @type {!Object<string, Object<string, import(\"../proj.js\").TransformFunction>>}\r\n */\r\nlet transforms = {};\r\n\r\n/**\r\n * Clear the transform cache.\r\n */\r\nexport function clear() {\r\n  transforms = {};\r\n}\r\n\r\n/**\r\n * Registers a conversion function to convert coordinates from the source\r\n * projection to the destination projection.\r\n *\r\n * @param {import(\"./Projection.js\").default} source Source.\r\n * @param {import(\"./Projection.js\").default} destination Destination.\r\n * @param {import(\"../proj.js\").TransformFunction} transformFn Transform.\r\n */\r\nexport function add(source, destination, transformFn) {\r\n  const sourceCode = source.getCode();\r\n  const destinationCode = destination.getCode();\r\n  if (!(sourceCode in transforms)) {\r\n    transforms[sourceCode] = {};\r\n  }\r\n  transforms[sourceCode][destinationCode] = transformFn;\r\n}\r\n\r\n/**\r\n * Unregisters the conversion function to convert coordinates from the source\r\n * projection to the destination projection.  This method is used to clean up\r\n * cached transforms during testing.\r\n *\r\n * @param {import(\"./Projection.js\").default} source Source projection.\r\n * @param {import(\"./Projection.js\").default} destination Destination projection.\r\n * @return {import(\"../proj.js\").TransformFunction} transformFn The unregistered transform.\r\n */\r\nexport function remove(source, destination) {\r\n  const sourceCode = source.getCode();\r\n  const destinationCode = destination.getCode();\r\n  const transform = transforms[sourceCode][destinationCode];\r\n  delete transforms[sourceCode][destinationCode];\r\n  if (isEmpty(transforms[sourceCode])) {\r\n    delete transforms[sourceCode];\r\n  }\r\n  return transform;\r\n}\r\n\r\n/**\r\n * Get a transform given a source code and a destination code.\r\n * @param {string} sourceCode The code for the source projection.\r\n * @param {string} destinationCode The code for the destination projection.\r\n * @return {import(\"../proj.js\").TransformFunction|null} The transform function (if found).\r\n */\r\nexport function get(sourceCode, destinationCode) {\r\n  if (sourceCode in transforms && destinationCode in transforms[sourceCode]) {\r\n    return transforms[sourceCode][destinationCode];\r\n  }\r\n  return null;\r\n}\r\n","/**\r\n * @module ol/proj/utm\r\n */\r\n\r\n/**\r\n * Adapted from https://github.com/Turbo87/utm\r\n * Copyright (c) 2012-2017 Tobias Bieniek\r\n *\r\n * The functions here provide approximate transforms to and from UTM.\r\n * They are not appropriate for use beyond the validity extend of a UTM\r\n * zone, and the accuracy of the transform decreases toward the zone\r\n * edges.\r\n */\r\n\r\nimport {toDegrees, toRadians, wrap} from '../math.js';\r\nimport Projection from './Projection.js';\r\n\r\n/**\r\n * @typedef {Object} UTMZone\r\n * @property {number} number The zone number (1 - 60).\r\n * @property {boolean} north The northern hemisphere.\r\n */\r\n\r\nconst K0 = 0.9996;\r\n\r\nconst E = 0.00669438;\r\nconst E2 = E * E;\r\nconst E3 = E2 * E;\r\nconst E_P2 = E / (1 - E);\r\n\r\nconst SQRT_E = Math.sqrt(1 - E);\r\nconst _E = (1 - SQRT_E) / (1 + SQRT_E);\r\nconst _E2 = _E * _E;\r\nconst _E3 = _E2 * _E;\r\nconst _E4 = _E3 * _E;\r\nconst _E5 = _E4 * _E;\r\n\r\nconst M1 = 1 - E / 4 - (3 * E2) / 64 - (5 * E3) / 256;\r\nconst M2 = (3 * E) / 8 + (3 * E2) / 32 + (45 * E3) / 1024;\r\nconst M3 = (15 * E2) / 256 + (45 * E3) / 1024;\r\nconst M4 = (35 * E3) / 3072;\r\n\r\nconst P2 = (3 / 2) * _E - (27 / 32) * _E3 + (269 / 512) * _E5;\r\nconst P3 = (21 / 16) * _E2 - (55 / 32) * _E4;\r\nconst P4 = (151 / 96) * _E3 - (417 / 128) * _E5;\r\nconst P5 = (1097 / 512) * _E4;\r\n\r\nconst R = 6378137;\r\n\r\n/**\r\n * @param {number} easting Easting value of coordinate.\r\n * @param {number} northing Northing value of coordinate.\r\n * @param {UTMZone} zone The UTM zone.\r\n * @return {import(\"../coordinate.js\").Coordinate} The transformed coordinate.\r\n */\r\nfunction toLonLat(easting, northing, zone) {\r\n  const x = easting - 500000;\r\n  const y = zone.north ? northing : northing - 10000000;\r\n\r\n  const m = y / K0;\r\n  const mu = m / (R * M1);\r\n\r\n  const pRad =\r\n    mu +\r\n    P2 * Math.sin(2 * mu) +\r\n    P3 * Math.sin(4 * mu) +\r\n    P4 * Math.sin(6 * mu) +\r\n    P5 * Math.sin(8 * mu);\r\n\r\n  const pSin = Math.sin(pRad);\r\n  const pSin2 = pSin * pSin;\r\n\r\n  const pCos = Math.cos(pRad);\r\n\r\n  const pTan = pSin / pCos;\r\n  const pTan2 = pTan * pTan;\r\n  const pTan4 = pTan2 * pTan2;\r\n\r\n  const epSin = 1 - E * pSin2;\r\n  const epSinSqrt = Math.sqrt(1 - E * pSin2);\r\n\r\n  const n = R / epSinSqrt;\r\n  const r = (1 - E) / epSin;\r\n\r\n  const c = E_P2 * pCos ** 2;\r\n  const c2 = c * c;\r\n\r\n  const d = x / (n * K0);\r\n  const d2 = d * d;\r\n  const d3 = d2 * d;\r\n  const d4 = d3 * d;\r\n  const d5 = d4 * d;\r\n  const d6 = d5 * d;\r\n\r\n  const latitude =\r\n    pRad -\r\n    (pTan / r) *\r\n      (d2 / 2 - (d4 / 24) * (5 + 3 * pTan2 + 10 * c - 4 * c2 - 9 * E_P2)) +\r\n    (d6 / 720) * (61 + 90 * pTan2 + 298 * c + 45 * pTan4 - 252 * E_P2 - 3 * c2);\r\n\r\n  let longitude =\r\n    (d -\r\n      (d3 / 6) * (1 + 2 * pTan2 + c) +\r\n      (d5 / 120) * (5 - 2 * c + 28 * pTan2 - 3 * c2 + 8 * E_P2 + 24 * pTan4)) /\r\n    pCos;\r\n\r\n  longitude = wrap(\r\n    longitude + toRadians(zoneToCentralLongitude(zone.number)),\r\n    -Math.PI,\r\n    Math.PI,\r\n  );\r\n\r\n  return [toDegrees(longitude), toDegrees(latitude)];\r\n}\r\n\r\nconst MIN_LATITUDE = -80;\r\nconst MAX_LATITUDE = 84;\r\nconst MIN_LONGITUDE = -180;\r\nconst MAX_LONGITUDE = 180;\r\n\r\n/**\r\n * @param {number} longitude The longitude.\r\n * @param {number} latitude The latitude.\r\n * @param {UTMZone} zone The UTM zone.\r\n * @return {import('../coordinate.js').Coordinate} The UTM coordinate.\r\n */\r\nfunction fromLonLat(longitude, latitude, zone) {\r\n  longitude = wrap(longitude, MIN_LONGITUDE, MAX_LONGITUDE);\r\n\r\n  if (latitude < MIN_LATITUDE) {\r\n    latitude = MIN_LATITUDE;\r\n  } else if (latitude > MAX_LATITUDE) {\r\n    latitude = MAX_LATITUDE;\r\n  }\r\n\r\n  const latRad = toRadians(latitude);\r\n  const latSin = Math.sin(latRad);\r\n  const latCos = Math.cos(latRad);\r\n\r\n  const latTan = latSin / latCos;\r\n  const latTan2 = latTan * latTan;\r\n  const latTan4 = latTan2 * latTan2;\r\n\r\n  const lonRad = toRadians(longitude);\r\n  const centralLon = zoneToCentralLongitude(zone.number);\r\n  const centralLonRad = toRadians(centralLon);\r\n\r\n  const n = R / Math.sqrt(1 - E * latSin ** 2);\r\n  const c = E_P2 * latCos ** 2;\r\n\r\n  const a = latCos * wrap(lonRad - centralLonRad, -Math.PI, Math.PI);\r\n  const a2 = a * a;\r\n  const a3 = a2 * a;\r\n  const a4 = a3 * a;\r\n  const a5 = a4 * a;\r\n  const a6 = a5 * a;\r\n\r\n  const m =\r\n    R *\r\n    (M1 * latRad -\r\n      M2 * Math.sin(2 * latRad) +\r\n      M3 * Math.sin(4 * latRad) -\r\n      M4 * Math.sin(6 * latRad));\r\n\r\n  const easting =\r\n    K0 *\r\n      n *\r\n      (a +\r\n        (a3 / 6) * (1 - latTan2 + c) +\r\n        (a5 / 120) * (5 - 18 * latTan2 + latTan4 + 72 * c - 58 * E_P2)) +\r\n    500000;\r\n\r\n  let northing =\r\n    K0 *\r\n    (m +\r\n      n *\r\n        latTan *\r\n        (a2 / 2 +\r\n          (a4 / 24) * (5 - latTan2 + 9 * c + 4 * c ** 2) +\r\n          (a6 / 720) * (61 - 58 * latTan2 + latTan4 + 600 * c - 330 * E_P2)));\r\n\r\n  if (!zone.north) {\r\n    northing += 10000000;\r\n  }\r\n\r\n  return [easting, northing];\r\n}\r\n\r\n/**\r\n * @param {number} zone The zone number.\r\n * @return {number} The central longitude in degrees.\r\n */\r\nfunction zoneToCentralLongitude(zone) {\r\n  return (zone - 1) * 6 - 180 + 3;\r\n}\r\n\r\n/**\r\n * @type {Array<RegExp>}\r\n */\r\nconst epsgRegExes = [\r\n  /^EPSG:(\\d+)$/,\r\n  /^urn:ogc:def:crs:EPSG::(\\d+)$/,\r\n  /^http:\\/\\/www\\.opengis\\.net\\/def\\/crs\\/EPSG\\/0\\/(\\d+)$/,\r\n];\r\n\r\n/**\r\n * @param {string} code The projection code.\r\n * @return {UTMZone|null} The UTM zone info (or null if not UTM).\r\n */\r\nexport function zoneFromCode(code) {\r\n  let epsgId = 0;\r\n  for (const re of epsgRegExes) {\r\n    const match = code.match(re);\r\n    if (match) {\r\n      epsgId = parseInt(match[1]);\r\n      break;\r\n    }\r\n  }\r\n  if (!epsgId) {\r\n    return null;\r\n  }\r\n\r\n  let number = 0;\r\n  let north = false;\r\n  if (epsgId > 32700 && epsgId < 32761) {\r\n    number = epsgId - 32700;\r\n  } else if (epsgId > 32600 && epsgId < 32661) {\r\n    north = true;\r\n    number = epsgId - 32600;\r\n  }\r\n  if (!number) {\r\n    return null;\r\n  }\r\n\r\n  return {number, north};\r\n}\r\n\r\n/**\r\n * @param {function(number, number, UTMZone): import('../coordinate.js').Coordinate} transformer The transformer.\r\n * @param {UTMZone} zone The UTM zone.\r\n * @return {import('../proj.js').TransformFunction} The transform function.\r\n */\r\nfunction makeTransformFunction(transformer, zone) {\r\n  return function (input, output, dimension, stride) {\r\n    const length = input.length;\r\n    dimension = dimension > 1 ? dimension : 2;\r\n    stride = stride ?? dimension;\r\n    if (!output) {\r\n      if (dimension > 2) {\r\n        output = input.slice();\r\n      } else {\r\n        output = new Array(length);\r\n      }\r\n    }\r\n    for (let i = 0; i < length; i += stride) {\r\n      const x = input[i];\r\n      const y = input[i + 1];\r\n      const coord = transformer(x, y, zone);\r\n      output[i] = coord[0];\r\n      output[i + 1] = coord[1];\r\n    }\r\n    return output;\r\n  };\r\n}\r\n\r\n/**\r\n * @param {string} code The projection code.\r\n * @return {import('./Projection.js').default|null} A projection or null if unable to create one.\r\n */\r\nexport function makeProjection(code) {\r\n  const zone = zoneFromCode(code);\r\n  if (!zone) {\r\n    return null;\r\n  }\r\n  return new Projection({code, units: 'm'});\r\n}\r\n\r\n/**\r\n * @param {import('./Projection.js').default} projection The projection.\r\n * @return {import('../proj.js').Transforms|null} The transforms lookup or null if unable to handle projection.\r\n */\r\nexport function makeTransforms(projection) {\r\n  const zone = zoneFromCode(projection.getCode());\r\n  if (!zone) {\r\n    return null;\r\n  }\r\n\r\n  return {\r\n    forward: makeTransformFunction(fromLonLat, zone),\r\n    inverse: makeTransformFunction(toLonLat, zone),\r\n  };\r\n}\r\n","/**\r\n * @module ol/transform\r\n */\r\nimport {assert} from './asserts.js';\r\n\r\n/**\r\n * An array representing an affine 2d transformation for use with\r\n * {@link module:ol/transform} functions. The array has 6 elements.\r\n * @typedef {!Array<number>} Transform\r\n * @api\r\n */\r\n\r\n/**\r\n * Collection of affine 2d transformation functions. The functions work on an\r\n * array of 6 elements. The element order is compatible with the [SVGMatrix\r\n * interface](https://developer.mozilla.org/en-US/docs/Web/API/SVGMatrix) and is\r\n * a subset (elements a to f) of a 3×3 matrix:\r\n * ```\r\n * [ a c e ]\r\n * [ b d f ]\r\n * [ 0 0 1 ]\r\n * ```\r\n */\r\n\r\n/**\r\n * @private\r\n * @type {Transform}\r\n */\r\nconst tmp_ = new Array(6);\r\n\r\n/**\r\n * Create an identity transform.\r\n * @return {!Transform} Identity transform.\r\n */\r\nexport function create() {\r\n  return [1, 0, 0, 1, 0, 0];\r\n}\r\n\r\n/**\r\n * Resets the given transform to an identity transform.\r\n * @param {!Transform} transform Transform.\r\n * @return {!Transform} Transform.\r\n */\r\nexport function reset(transform) {\r\n  return set(transform, 1, 0, 0, 1, 0, 0);\r\n}\r\n\r\n/**\r\n * Multiply the underlying matrices of two transforms and return the result in\r\n * the first transform.\r\n * @param {!Transform} transform1 Transform parameters of matrix 1.\r\n * @param {!Transform} transform2 Transform parameters of matrix 2.\r\n * @return {!Transform} transform1 multiplied with transform2.\r\n */\r\nexport function multiply(transform1, transform2) {\r\n  const a1 = transform1[0];\r\n  const b1 = transform1[1];\r\n  const c1 = transform1[2];\r\n  const d1 = transform1[3];\r\n  const e1 = transform1[4];\r\n  const f1 = transform1[5];\r\n  const a2 = transform2[0];\r\n  const b2 = transform2[1];\r\n  const c2 = transform2[2];\r\n  const d2 = transform2[3];\r\n  const e2 = transform2[4];\r\n  const f2 = transform2[5];\r\n\r\n  transform1[0] = a1 * a2 + c1 * b2;\r\n  transform1[1] = b1 * a2 + d1 * b2;\r\n  transform1[2] = a1 * c2 + c1 * d2;\r\n  transform1[3] = b1 * c2 + d1 * d2;\r\n  transform1[4] = a1 * e2 + c1 * f2 + e1;\r\n  transform1[5] = b1 * e2 + d1 * f2 + f1;\r\n\r\n  return transform1;\r\n}\r\n\r\n/**\r\n * Set the transform components a-f on a given transform.\r\n * @param {!Transform} transform Transform.\r\n * @param {number} a The a component of the transform.\r\n * @param {number} b The b component of the transform.\r\n * @param {number} c The c component of the transform.\r\n * @param {number} d The d component of the transform.\r\n * @param {number} e The e component of the transform.\r\n * @param {number} f The f component of the transform.\r\n * @return {!Transform} Matrix with transform applied.\r\n */\r\nexport function set(transform, a, b, c, d, e, f) {\r\n  transform[0] = a;\r\n  transform[1] = b;\r\n  transform[2] = c;\r\n  transform[3] = d;\r\n  transform[4] = e;\r\n  transform[5] = f;\r\n  return transform;\r\n}\r\n\r\n/**\r\n * Set transform on one matrix from another matrix.\r\n * @param {!Transform} transform1 Matrix to set transform to.\r\n * @param {!Transform} transform2 Matrix to set transform from.\r\n * @return {!Transform} transform1 with transform from transform2 applied.\r\n */\r\nexport function setFromArray(transform1, transform2) {\r\n  transform1[0] = transform2[0];\r\n  transform1[1] = transform2[1];\r\n  transform1[2] = transform2[2];\r\n  transform1[3] = transform2[3];\r\n  transform1[4] = transform2[4];\r\n  transform1[5] = transform2[5];\r\n  return transform1;\r\n}\r\n\r\n/**\r\n * Transforms the given coordinate with the given transform returning the\r\n * resulting, transformed coordinate. The coordinate will be modified in-place.\r\n *\r\n * @param {Transform} transform The transformation.\r\n * @param {import(\"./coordinate.js\").Coordinate|import(\"./pixel.js\").Pixel} coordinate The coordinate to transform.\r\n * @return {import(\"./coordinate.js\").Coordinate|import(\"./pixel.js\").Pixel} return coordinate so that operations can be\r\n *     chained together.\r\n */\r\nexport function apply(transform, coordinate) {\r\n  const x = coordinate[0];\r\n  const y = coordinate[1];\r\n  coordinate[0] = transform[0] * x + transform[2] * y + transform[4];\r\n  coordinate[1] = transform[1] * x + transform[3] * y + transform[5];\r\n  return coordinate;\r\n}\r\n\r\n/**\r\n * Applies rotation to the given transform.\r\n * @param {!Transform} transform Transform.\r\n * @param {number} angle Angle in radians.\r\n * @return {!Transform} The rotated transform.\r\n */\r\nexport function rotate(transform, angle) {\r\n  const cos = Math.cos(angle);\r\n  const sin = Math.sin(angle);\r\n  return multiply(transform, set(tmp_, cos, sin, -sin, cos, 0, 0));\r\n}\r\n\r\n/**\r\n * Applies scale to a given transform.\r\n * @param {!Transform} transform Transform.\r\n * @param {number} x Scale factor x.\r\n * @param {number} y Scale factor y.\r\n * @return {!Transform} The scaled transform.\r\n */\r\nexport function scale(transform, x, y) {\r\n  return multiply(transform, set(tmp_, x, 0, 0, y, 0, 0));\r\n}\r\n\r\n/**\r\n * Creates a scale transform.\r\n * @param {!Transform} target Transform to overwrite.\r\n * @param {number} x Scale factor x.\r\n * @param {number} y Scale factor y.\r\n * @return {!Transform} The scale transform.\r\n */\r\nexport function makeScale(target, x, y) {\r\n  return set(target, x, 0, 0, y, 0, 0);\r\n}\r\n\r\n/**\r\n * Applies translation to the given transform.\r\n * @param {!Transform} transform Transform.\r\n * @param {number} dx Translation x.\r\n * @param {number} dy Translation y.\r\n * @return {!Transform} The translated transform.\r\n */\r\nexport function translate(transform, dx, dy) {\r\n  return multiply(transform, set(tmp_, 1, 0, 0, 1, dx, dy));\r\n}\r\n\r\n/**\r\n * Creates a composite transform given an initial translation, scale, rotation, and\r\n * final translation (in that order only, not commutative).\r\n * @param {!Transform} transform The transform (will be modified in place).\r\n * @param {number} dx1 Initial translation x.\r\n * @param {number} dy1 Initial translation y.\r\n * @param {number} sx Scale factor x.\r\n * @param {number} sy Scale factor y.\r\n * @param {number} angle Rotation (in counter-clockwise radians).\r\n * @param {number} dx2 Final translation x.\r\n * @param {number} dy2 Final translation y.\r\n * @return {!Transform} The composite transform.\r\n */\r\nexport function compose(transform, dx1, dy1, sx, sy, angle, dx2, dy2) {\r\n  const sin = Math.sin(angle);\r\n  const cos = Math.cos(angle);\r\n  transform[0] = sx * cos;\r\n  transform[1] = sy * sin;\r\n  transform[2] = -sx * sin;\r\n  transform[3] = sy * cos;\r\n  transform[4] = dx2 * sx * cos - dy2 * sx * sin + dx1;\r\n  transform[5] = dx2 * sy * sin + dy2 * sy * cos + dy1;\r\n  return transform;\r\n}\r\n\r\n/**\r\n * Creates a composite transform given an initial translation, scale, rotation, and\r\n * final translation (in that order only, not commutative). The resulting transform\r\n * string can be applied as `transform` property of an HTMLElement's style.\r\n * @param {number} dx1 Initial translation x.\r\n * @param {number} dy1 Initial translation y.\r\n * @param {number} sx Scale factor x.\r\n * @param {number} sy Scale factor y.\r\n * @param {number} angle Rotation (in counter-clockwise radians).\r\n * @param {number} dx2 Final translation x.\r\n * @param {number} dy2 Final translation y.\r\n * @return {string} The composite css transform.\r\n * @api\r\n */\r\nexport function composeCssTransform(dx1, dy1, sx, sy, angle, dx2, dy2) {\r\n  return toString(compose(create(), dx1, dy1, sx, sy, angle, dx2, dy2));\r\n}\r\n\r\n/**\r\n * Invert the given transform.\r\n * @param {!Transform} source The source transform to invert.\r\n * @return {!Transform} The inverted (source) transform.\r\n */\r\nexport function invert(source) {\r\n  return makeInverse(source, source);\r\n}\r\n\r\n/**\r\n * Invert the given transform.\r\n * @param {!Transform} target Transform to be set as the inverse of\r\n *     the source transform.\r\n * @param {!Transform} source The source transform to invert.\r\n * @return {!Transform} The inverted (target) transform.\r\n */\r\nexport function makeInverse(target, source) {\r\n  const det = determinant(source);\r\n  assert(det !== 0, 'Transformation matrix cannot be inverted');\r\n\r\n  const a = source[0];\r\n  const b = source[1];\r\n  const c = source[2];\r\n  const d = source[3];\r\n  const e = source[4];\r\n  const f = source[5];\r\n\r\n  target[0] = d / det;\r\n  target[1] = -b / det;\r\n  target[2] = -c / det;\r\n  target[3] = a / det;\r\n  target[4] = (c * f - d * e) / det;\r\n  target[5] = -(a * f - b * e) / det;\r\n\r\n  return target;\r\n}\r\n\r\n/**\r\n * Returns the determinant of the given matrix.\r\n * @param {!Transform} mat Matrix.\r\n * @return {number} Determinant.\r\n */\r\nexport function determinant(mat) {\r\n  return mat[0] * mat[3] - mat[1] * mat[2];\r\n}\r\n\r\n/**\r\n * @type {Array}\r\n */\r\nconst matrixPrecision = [1e5, 1e5, 1e5, 1e5, 2, 2];\r\n\r\n/**\r\n * A matrix string version of the transform.  This can be used\r\n * for CSS transforms.\r\n * @param {!Transform} mat Matrix.\r\n * @return {string} The transform as a string.\r\n */\r\nexport function toString(mat) {\r\n  const transformString = 'matrix(' + mat.join(', ') + ')';\r\n  return transformString;\r\n}\r\n\r\n/**\r\n * Create a transform from a CSS transform matrix string.\r\n * @param {string} cssTransform The CSS string to parse.\r\n * @return {!Transform} The transform.\r\n */\r\nfunction fromString(cssTransform) {\r\n  const values = cssTransform.substring(7, cssTransform.length - 1).split(',');\r\n  return values.map(parseFloat);\r\n}\r\n\r\n/**\r\n * Compare two matrices for equality.\r\n * @param {!string} cssTransform1 A CSS transform matrix string.\r\n * @param {!string} cssTransform2 A CSS transform matrix string.\r\n * @return {boolean} The two matrices are equal.\r\n */\r\nexport function equivalent(cssTransform1, cssTransform2) {\r\n  const mat1 = fromString(cssTransform1);\r\n  const mat2 = fromString(cssTransform2);\r\n  for (let i = 0; i < 6; ++i) {\r\n    if (Math.round((mat1[i] - mat2[i]) * matrixPrecision[i]) !== 0) {\r\n      return false;\r\n    }\r\n  }\r\n  return true;\r\n}\r\n","/**\r\n * @module ol/geom/flat/transform\r\n */\r\n\r\n/**\r\n * @param {Array<number>} flatCoordinates Flat coordinates.\r\n * @param {number} offset Offset.\r\n * @param {number} end End.\r\n * @param {number} stride Stride.\r\n * @param {import(\"../../transform.js\").Transform} transform Transform.\r\n * @param {Array<number>} [dest] Destination.\r\n * @param {number} [destinationStride] Stride of destination coordinates; if unspecified, assumed to be 2.\r\n * @return {Array<number>} Transformed coordinates.\r\n */\r\nexport function transform2D(\r\n  flatCoordinates,\r\n  offset,\r\n  end,\r\n  stride,\r\n  transform,\r\n  dest,\r\n  destinationStride,\r\n) {\r\n  dest = dest ? dest : [];\r\n  destinationStride = destinationStride ? destinationStride : 2;\r\n  let i = 0;\r\n  for (let j = offset; j < end; j += stride) {\r\n    const x = flatCoordinates[j];\r\n    const y = flatCoordinates[j + 1];\r\n    dest[i++] = transform[0] * x + transform[2] * y + transform[4];\r\n    dest[i++] = transform[1] * x + transform[3] * y + transform[5];\r\n\r\n    for (let k = 2; k < destinationStride; k++) {\r\n      dest[i++] = flatCoordinates[j + k];\r\n    }\r\n  }\r\n\r\n  if (dest && dest.length != i) {\r\n    dest.length = i;\r\n  }\r\n  return dest;\r\n}\r\n\r\n/**\r\n * @param {Array<number>} flatCoordinates Flat coordinates.\r\n * @param {number} offset Offset.\r\n * @param {number} end End.\r\n * @param {number} stride Stride.\r\n * @param {number} angle Angle.\r\n * @param {Array<number>} anchor Rotation anchor point.\r\n * @param {Array<number>} [dest] Destination.\r\n * @return {Array<number>} Transformed coordinates.\r\n */\r\nexport function rotate(\r\n  flatCoordinates,\r\n  offset,\r\n  end,\r\n  stride,\r\n  angle,\r\n  anchor,\r\n  dest,\r\n) {\r\n  dest = dest ? dest : [];\r\n  const cos = Math.cos(angle);\r\n  const sin = Math.sin(angle);\r\n  const anchorX = anchor[0];\r\n  const anchorY = anchor[1];\r\n  let i = 0;\r\n  for (let j = offset; j < end; j += stride) {\r\n    const deltaX = flatCoordinates[j] - anchorX;\r\n    const deltaY = flatCoordinates[j + 1] - anchorY;\r\n    dest[i++] = anchorX + deltaX * cos - deltaY * sin;\r\n    dest[i++] = anchorY + deltaX * sin + deltaY * cos;\r\n    for (let k = j + 2; k < j + stride; ++k) {\r\n      dest[i++] = flatCoordinates[k];\r\n    }\r\n  }\r\n  if (dest && dest.length != i) {\r\n    dest.length = i;\r\n  }\r\n  return dest;\r\n}\r\n\r\n/**\r\n * Scale the coordinates.\r\n * @param {Array<number>} flatCoordinates Flat coordinates.\r\n * @param {number} offset Offset.\r\n * @param {number} end End.\r\n * @param {number} stride Stride.\r\n * @param {number} sx Scale factor in the x-direction.\r\n * @param {number} sy Scale factor in the y-direction.\r\n * @param {Array<number>} anchor Scale anchor point.\r\n * @param {Array<number>} [dest] Destination.\r\n * @return {Array<number>} Transformed coordinates.\r\n */\r\nexport function scale(\r\n  flatCoordinates,\r\n  offset,\r\n  end,\r\n  stride,\r\n  sx,\r\n  sy,\r\n  anchor,\r\n  dest,\r\n) {\r\n  dest = dest ? dest : [];\r\n  const anchorX = anchor[0];\r\n  const anchorY = anchor[1];\r\n  let i = 0;\r\n  for (let j = offset; j < end; j += stride) {\r\n    const deltaX = flatCoordinates[j] - anchorX;\r\n    const deltaY = flatCoordinates[j + 1] - anchorY;\r\n    dest[i++] = anchorX + sx * deltaX;\r\n    dest[i++] = anchorY + sy * deltaY;\r\n    for (let k = j + 2; k < j + stride; ++k) {\r\n      dest[i++] = flatCoordinates[k];\r\n    }\r\n  }\r\n  if (dest && dest.length != i) {\r\n    dest.length = i;\r\n  }\r\n  return dest;\r\n}\r\n\r\n/**\r\n * @param {Array<number>} flatCoordinates Flat coordinates.\r\n * @param {number} offset Offset.\r\n * @param {number} end End.\r\n * @param {number} stride Stride.\r\n * @param {number} deltaX Delta X.\r\n * @param {number} deltaY Delta Y.\r\n * @param {Array<number>} [dest] Destination.\r\n * @return {Array<number>} Transformed coordinates.\r\n */\r\nexport function translate(\r\n  flatCoordinates,\r\n  offset,\r\n  end,\r\n  stride,\r\n  deltaX,\r\n  deltaY,\r\n  dest,\r\n) {\r\n  dest = dest ? dest : [];\r\n  let i = 0;\r\n  for (let j = offset; j < end; j += stride) {\r\n    dest[i++] = flatCoordinates[j] + deltaX;\r\n    dest[i++] = flatCoordinates[j + 1] + deltaY;\r\n    for (let k = j + 2; k < j + stride; ++k) {\r\n      dest[i++] = flatCoordinates[k];\r\n    }\r\n  }\r\n  if (dest && dest.length != i) {\r\n    dest.length = i;\r\n  }\r\n  return dest;\r\n}\r\n","/**\r\n * @module ol/geom/flat/area\r\n */\r\n\r\n/**\r\n * @param {Array<number>} flatCoordinates Flat coordinates.\r\n * @param {number} offset Offset.\r\n * @param {number} end End.\r\n * @param {number} stride Stride.\r\n * @return {number} Area.\r\n */\r\nexport function linearRing(flatCoordinates, offset, end, stride) {\r\n  let twiceArea = 0;\r\n  const x0 = flatCoordinates[end - stride];\r\n  const y0 = flatCoordinates[end - stride + 1];\r\n  let dx1 = 0;\r\n  let dy1 = 0;\r\n  for (; offset < end; offset += stride) {\r\n    const dx2 = flatCoordinates[offset] - x0;\r\n    const dy2 = flatCoordinates[offset + 1] - y0;\r\n    twiceArea += dy1 * dx2 - dx1 * dy2;\r\n    dx1 = dx2;\r\n    dy1 = dy2;\r\n  }\r\n  return twiceArea / 2;\r\n}\r\n\r\n/**\r\n * @param {Array<number>} flatCoordinates Flat coordinates.\r\n * @param {number} offset Offset.\r\n * @param {Array<number>} ends Ends.\r\n * @param {number} stride Stride.\r\n * @return {number} Area.\r\n */\r\nexport function linearRings(flatCoordinates, offset, ends, stride) {\r\n  let area = 0;\r\n  for (let i = 0, ii = ends.length; i < ii; ++i) {\r\n    const end = ends[i];\r\n    area += linearRing(flatCoordinates, offset, end, stride);\r\n    offset = end;\r\n  }\r\n  return area;\r\n}\r\n\r\n/**\r\n * @param {Array<number>} flatCoordinates Flat coordinates.\r\n * @param {number} offset Offset.\r\n * @param {Array<Array<number>>} endss Endss.\r\n * @param {number} stride Stride.\r\n * @return {number} Area.\r\n */\r\nexport function linearRingss(flatCoordinates, offset, endss, stride) {\r\n  let area = 0;\r\n  for (let i = 0, ii = endss.length; i < ii; ++i) {\r\n    const ends = endss[i];\r\n    area += linearRings(flatCoordinates, offset, ends, stride);\r\n    offset = ends[ends.length - 1];\r\n  }\r\n  return area;\r\n}\r\n","/**\r\n * @module ol/geom/flat/closest\r\n */\r\nimport {lerp, squaredDistance as squaredDx} from '../../math.js';\r\n\r\n/**\r\n * Returns the point on the 2D line segment flatCoordinates[offset1] to\r\n * flatCoordinates[offset2] that is closest to the point (x, y).  Extra\r\n * dimensions are linearly interpolated.\r\n * @param {Array<number>} flatCoordinates Flat coordinates.\r\n * @param {number} offset1 Offset 1.\r\n * @param {number} offset2 Offset 2.\r\n * @param {number} stride Stride.\r\n * @param {number} x X.\r\n * @param {number} y Y.\r\n * @param {Array<number>} closestPoint Closest point.\r\n */\r\nfunction assignClosest(\r\n  flatCoordinates,\r\n  offset1,\r\n  offset2,\r\n  stride,\r\n  x,\r\n  y,\r\n  closestPoint,\r\n) {\r\n  const x1 = flatCoordinates[offset1];\r\n  const y1 = flatCoordinates[offset1 + 1];\r\n  const dx = flatCoordinates[offset2] - x1;\r\n  const dy = flatCoordinates[offset2 + 1] - y1;\r\n  let offset;\r\n  if (dx === 0 && dy === 0) {\r\n    offset = offset1;\r\n  } else {\r\n    const t = ((x - x1) * dx + (y - y1) * dy) / (dx * dx + dy * dy);\r\n    if (t > 1) {\r\n      offset = offset2;\r\n    } else if (t > 0) {\r\n      for (let i = 0; i < stride; ++i) {\r\n        closestPoint[i] = lerp(\r\n          flatCoordinates[offset1 + i],\r\n          flatCoordinates[offset2 + i],\r\n          t,\r\n        );\r\n      }\r\n      closestPoint.length = stride;\r\n      return;\r\n    } else {\r\n      offset = offset1;\r\n    }\r\n  }\r\n  for (let i = 0; i < stride; ++i) {\r\n    closestPoint[i] = flatCoordinates[offset + i];\r\n  }\r\n  closestPoint.length = stride;\r\n}\r\n\r\n/**\r\n * Return the squared of the largest distance between any pair of consecutive\r\n * coordinates.\r\n * @param {Array<number>} flatCoordinates Flat coordinates.\r\n * @param {number} offset Offset.\r\n * @param {number} end End.\r\n * @param {number} stride Stride.\r\n * @param {number} max Max squared delta.\r\n * @return {number} Max squared delta.\r\n */\r\nexport function maxSquaredDelta(flatCoordinates, offset, end, stride, max) {\r\n  let x1 = flatCoordinates[offset];\r\n  let y1 = flatCoordinates[offset + 1];\r\n  for (offset += stride; offset < end; offset += stride) {\r\n    const x2 = flatCoordinates[offset];\r\n    const y2 = flatCoordinates[offset + 1];\r\n    const squaredDelta = squaredDx(x1, y1, x2, y2);\r\n    if (squaredDelta > max) {\r\n      max = squaredDelta;\r\n    }\r\n    x1 = x2;\r\n    y1 = y2;\r\n  }\r\n  return max;\r\n}\r\n\r\n/**\r\n * @param {Array<number>} flatCoordinates Flat coordinates.\r\n * @param {number} offset Offset.\r\n * @param {Array<number>} ends Ends.\r\n * @param {number} stride Stride.\r\n * @param {number} max Max squared delta.\r\n * @return {number} Max squared delta.\r\n */\r\nexport function arrayMaxSquaredDelta(\r\n  flatCoordinates,\r\n  offset,\r\n  ends,\r\n  stride,\r\n  max,\r\n) {\r\n  for (let i = 0, ii = ends.length; i < ii; ++i) {\r\n    const end = ends[i];\r\n    max = maxSquaredDelta(flatCoordinates, offset, end, stride, max);\r\n    offset = end;\r\n  }\r\n  return max;\r\n}\r\n\r\n/**\r\n * @param {Array<number>} flatCoordinates Flat coordinates.\r\n * @param {number} offset Offset.\r\n * @param {Array<Array<number>>} endss Endss.\r\n * @param {number} stride Stride.\r\n * @param {number} max Max squared delta.\r\n * @return {number} Max squared delta.\r\n */\r\nexport function multiArrayMaxSquaredDelta(\r\n  flatCoordinates,\r\n  offset,\r\n  endss,\r\n  stride,\r\n  max,\r\n) {\r\n  for (let i = 0, ii = endss.length; i < ii; ++i) {\r\n    const ends = endss[i];\r\n    max = arrayMaxSquaredDelta(flatCoordinates, offset, ends, stride, max);\r\n    offset = ends[ends.length - 1];\r\n  }\r\n  return max;\r\n}\r\n\r\n/**\r\n * @param {Array<number>} flatCoordinates Flat coordinates.\r\n * @param {number} offset Offset.\r\n * @param {number} end End.\r\n * @param {number} stride Stride.\r\n * @param {number} maxDelta Max delta.\r\n * @param {boolean} isRing Is ring.\r\n * @param {number} x X.\r\n * @param {number} y Y.\r\n * @param {Array<number>} closestPoint Closest point.\r\n * @param {number} minSquaredDistance Minimum squared distance.\r\n * @param {Array<number>} [tmpPoint] Temporary point object.\r\n * @return {number} Minimum squared distance.\r\n */\r\nexport function assignClosestPoint(\r\n  flatCoordinates,\r\n  offset,\r\n  end,\r\n  stride,\r\n  maxDelta,\r\n  isRing,\r\n  x,\r\n  y,\r\n  closestPoint,\r\n  minSquaredDistance,\r\n  tmpPoint,\r\n) {\r\n  if (offset == end) {\r\n    return minSquaredDistance;\r\n  }\r\n  let i, squaredDistance;\r\n  if (maxDelta === 0) {\r\n    // All points are identical, so just test the first point.\r\n    squaredDistance = squaredDx(\r\n      x,\r\n      y,\r\n      flatCoordinates[offset],\r\n      flatCoordinates[offset + 1],\r\n    );\r\n    if (squaredDistance < minSquaredDistance) {\r\n      for (i = 0; i < stride; ++i) {\r\n        closestPoint[i] = flatCoordinates[offset + i];\r\n      }\r\n      closestPoint.length = stride;\r\n      return squaredDistance;\r\n    }\r\n    return minSquaredDistance;\r\n  }\r\n  tmpPoint = tmpPoint ? tmpPoint : [NaN, NaN];\r\n  let index = offset + stride;\r\n  while (index < end) {\r\n    assignClosest(\r\n      flatCoordinates,\r\n      index - stride,\r\n      index,\r\n      stride,\r\n      x,\r\n      y,\r\n      tmpPoint,\r\n    );\r\n    squaredDistance = squaredDx(x, y, tmpPoint[0], tmpPoint[1]);\r\n    if (squaredDistance < minSquaredDistance) {\r\n      minSquaredDistance = squaredDistance;\r\n      for (i = 0; i < stride; ++i) {\r\n        closestPoint[i] = tmpPoint[i];\r\n      }\r\n      closestPoint.length = stride;\r\n      index += stride;\r\n    } else {\r\n      // Skip ahead multiple points, because we know that all the skipped\r\n      // points cannot be any closer than the closest point we have found so\r\n      // far.  We know this because we know how close the current point is, how\r\n      // close the closest point we have found so far is, and the maximum\r\n      // distance between consecutive points.  For example, if we're currently\r\n      // at distance 10, the best we've found so far is 3, and that the maximum\r\n      // distance between consecutive points is 2, then we'll need to skip at\r\n      // least (10 - 3) / 2 == 3 (rounded down) points to have any chance of\r\n      // finding a closer point.  We use Math.max(..., 1) to ensure that we\r\n      // always advance at least one point, to avoid an infinite loop.\r\n      index +=\r\n        stride *\r\n        Math.max(\r\n          ((Math.sqrt(squaredDistance) - Math.sqrt(minSquaredDistance)) /\r\n            maxDelta) |\r\n            0,\r\n          1,\r\n        );\r\n    }\r\n  }\r\n  if (isRing) {\r\n    // Check the closing segment.\r\n    assignClosest(\r\n      flatCoordinates,\r\n      end - stride,\r\n      offset,\r\n      stride,\r\n      x,\r\n      y,\r\n      tmpPoint,\r\n    );\r\n    squaredDistance = squaredDx(x, y, tmpPoint[0], tmpPoint[1]);\r\n    if (squaredDistance < minSquaredDistance) {\r\n      minSquaredDistance = squaredDistance;\r\n      for (i = 0; i < stride; ++i) {\r\n        closestPoint[i] = tmpPoint[i];\r\n      }\r\n      closestPoint.length = stride;\r\n    }\r\n  }\r\n  return minSquaredDistance;\r\n}\r\n\r\n/**\r\n * @param {Array<number>} flatCoordinates Flat coordinates.\r\n * @param {number} offset Offset.\r\n * @param {Array<number>} ends Ends.\r\n * @param {number} stride Stride.\r\n * @param {number} maxDelta Max delta.\r\n * @param {boolean} isRing Is ring.\r\n * @param {number} x X.\r\n * @param {number} y Y.\r\n * @param {Array<number>} closestPoint Closest point.\r\n * @param {number} minSquaredDistance Minimum squared distance.\r\n * @param {Array<number>} [tmpPoint] Temporary point object.\r\n * @return {number} Minimum squared distance.\r\n */\r\nexport function assignClosestArrayPoint(\r\n  flatCoordinates,\r\n  offset,\r\n  ends,\r\n  stride,\r\n  maxDelta,\r\n  isRing,\r\n  x,\r\n  y,\r\n  closestPoint,\r\n  minSquaredDistance,\r\n  tmpPoint,\r\n) {\r\n  tmpPoint = tmpPoint ? tmpPoint : [NaN, NaN];\r\n  for (let i = 0, ii = ends.length; i < ii; ++i) {\r\n    const end = ends[i];\r\n    minSquaredDistance = assignClosestPoint(\r\n      flatCoordinates,\r\n      offset,\r\n      end,\r\n      stride,\r\n      maxDelta,\r\n      isRing,\r\n      x,\r\n      y,\r\n      closestPoint,\r\n      minSquaredDistance,\r\n      tmpPoint,\r\n    );\r\n    offset = end;\r\n  }\r\n  return minSquaredDistance;\r\n}\r\n\r\n/**\r\n * @param {Array<number>} flatCoordinates Flat coordinates.\r\n * @param {number} offset Offset.\r\n * @param {Array<Array<number>>} endss Endss.\r\n * @param {number} stride Stride.\r\n * @param {number} maxDelta Max delta.\r\n * @param {boolean} isRing Is ring.\r\n * @param {number} x X.\r\n * @param {number} y Y.\r\n * @param {Array<number>} closestPoint Closest point.\r\n * @param {number} minSquaredDistance Minimum squared distance.\r\n * @param {Array<number>} [tmpPoint] Temporary point object.\r\n * @return {number} Minimum squared distance.\r\n */\r\nexport function assignClosestMultiArrayPoint(\r\n  flatCoordinates,\r\n  offset,\r\n  endss,\r\n  stride,\r\n  maxDelta,\r\n  isRing,\r\n  x,\r\n  y,\r\n  closestPoint,\r\n  minSquaredDistance,\r\n  tmpPoint,\r\n) {\r\n  tmpPoint = tmpPoint ? tmpPoint : [NaN, NaN];\r\n  for (let i = 0, ii = endss.length; i < ii; ++i) {\r\n    const ends = endss[i];\r\n    minSquaredDistance = assignClosestArrayPoint(\r\n      flatCoordinates,\r\n      offset,\r\n      ends,\r\n      stride,\r\n      maxDelta,\r\n      isRing,\r\n      x,\r\n      y,\r\n      closestPoint,\r\n      minSquaredDistance,\r\n      tmpPoint,\r\n    );\r\n    offset = ends[ends.length - 1];\r\n  }\r\n  return minSquaredDistance;\r\n}\r\n","/**\r\n * @module ol/geom/flat/deflate\r\n */\r\n\r\n/**\r\n * @param {Array<number>} flatCoordinates Flat coordinates.\r\n * @param {number} offset Offset.\r\n * @param {import(\"../../coordinate.js\").Coordinate} coordinate Coordinate.\r\n * @param {number} stride Stride.\r\n * @return {number} offset Offset.\r\n */\r\nexport function deflateCoordinate(flatCoordinates, offset, coordinate, stride) {\r\n  for (let i = 0, ii = coordinate.length; i < ii; ++i) {\r\n    flatCoordinates[offset++] = coordinate[i];\r\n  }\r\n  return offset;\r\n}\r\n\r\n/**\r\n * @param {Array<number>} flatCoordinates Flat coordinates.\r\n * @param {number} offset Offset.\r\n * @param {Array<import(\"../../coordinate.js\").Coordinate>} coordinates Coordinates.\r\n * @param {number} stride Stride.\r\n * @return {number} offset Offset.\r\n */\r\nexport function deflateCoordinates(\r\n  flatCoordinates,\r\n  offset,\r\n  coordinates,\r\n  stride,\r\n) {\r\n  for (let i = 0, ii = coordinates.length; i < ii; ++i) {\r\n    const coordinate = coordinates[i];\r\n    for (let j = 0; j < stride; ++j) {\r\n      flatCoordinates[offset++] = coordinate[j];\r\n    }\r\n  }\r\n  return offset;\r\n}\r\n\r\n/**\r\n * @param {Array<number>} flatCoordinates Flat coordinates.\r\n * @param {number} offset Offset.\r\n * @param {Array<Array<import(\"../../coordinate.js\").Coordinate>>} coordinatess Coordinatess.\r\n * @param {number} stride Stride.\r\n * @param {Array<number>} [ends] Ends.\r\n * @return {Array<number>} Ends.\r\n */\r\nexport function deflateCoordinatesArray(\r\n  flatCoordinates,\r\n  offset,\r\n  coordinatess,\r\n  stride,\r\n  ends,\r\n) {\r\n  ends = ends ? ends : [];\r\n  let i = 0;\r\n  for (let j = 0, jj = coordinatess.length; j < jj; ++j) {\r\n    const end = deflateCoordinates(\r\n      flatCoordinates,\r\n      offset,\r\n      coordinatess[j],\r\n      stride,\r\n    );\r\n    ends[i++] = end;\r\n    offset = end;\r\n  }\r\n  ends.length = i;\r\n  return ends;\r\n}\r\n\r\n/**\r\n * @param {Array<number>} flatCoordinates Flat coordinates.\r\n * @param {number} offset Offset.\r\n * @param {Array<Array<Array<import(\"../../coordinate.js\").Coordinate>>>} coordinatesss Coordinatesss.\r\n * @param {number} stride Stride.\r\n * @param {Array<Array<number>>} [endss] Endss.\r\n * @return {Array<Array<number>>} Endss.\r\n */\r\nexport function deflateMultiCoordinatesArray(\r\n  flatCoordinates,\r\n  offset,\r\n  coordinatesss,\r\n  stride,\r\n  endss,\r\n) {\r\n  endss = endss ? endss : [];\r\n  let i = 0;\r\n  for (let j = 0, jj = coordinatesss.length; j < jj; ++j) {\r\n    const ends = deflateCoordinatesArray(\r\n      flatCoordinates,\r\n      offset,\r\n      coordinatesss[j],\r\n      stride,\r\n      endss[i],\r\n    );\r\n    if (ends.length === 0) {\r\n      ends[0] = offset;\r\n    }\r\n    endss[i++] = ends;\r\n    offset = ends[ends.length - 1];\r\n  }\r\n  endss.length = i;\r\n  return endss;\r\n}\r\n","/**\r\n * @module ol/geom/flat/inflate\r\n */\r\n\r\n/**\r\n * @param {Array<number>} flatCoordinates Flat coordinates.\r\n * @param {number} offset Offset.\r\n * @param {number} end End.\r\n * @param {number} stride Stride.\r\n * @param {Array<import(\"../../coordinate.js\").Coordinate>} [coordinates] Coordinates.\r\n * @return {Array<import(\"../../coordinate.js\").Coordinate>} Coordinates.\r\n */\r\nexport function inflateCoordinates(\r\n  flatCoordinates,\r\n  offset,\r\n  end,\r\n  stride,\r\n  coordinates,\r\n) {\r\n  coordinates = coordinates !== undefined ? coordinates : [];\r\n  let i = 0;\r\n  for (let j = offset; j < end; j += stride) {\r\n    coordinates[i++] = flatCoordinates.slice(j, j + stride);\r\n  }\r\n  coordinates.length = i;\r\n  return coordinates;\r\n}\r\n\r\n/**\r\n * @param {Array<number>} flatCoordinates Flat coordinates.\r\n * @param {number} offset Offset.\r\n * @param {Array<number>} ends Ends.\r\n * @param {number} stride Stride.\r\n * @param {Array<Array<import(\"../../coordinate.js\").Coordinate>>} [coordinatess] Coordinatess.\r\n * @return {Array<Array<import(\"../../coordinate.js\").Coordinate>>} Coordinatess.\r\n */\r\nexport function inflateCoordinatesArray(\r\n  flatCoordinates,\r\n  offset,\r\n  ends,\r\n  stride,\r\n  coordinatess,\r\n) {\r\n  coordinatess = coordinatess !== undefined ? coordinatess : [];\r\n  let i = 0;\r\n  for (let j = 0, jj = ends.length; j < jj; ++j) {\r\n    const end = ends[j];\r\n    coordinatess[i++] = inflateCoordinates(\r\n      flatCoordinates,\r\n      offset,\r\n      end,\r\n      stride,\r\n      coordinatess[i],\r\n    );\r\n    offset = end;\r\n  }\r\n  coordinatess.length = i;\r\n  return coordinatess;\r\n}\r\n\r\n/**\r\n * @param {Array<number>} flatCoordinates Flat coordinates.\r\n * @param {number} offset Offset.\r\n * @param {Array<Array<number>>} endss Endss.\r\n * @param {number} stride Stride.\r\n * @param {Array<Array<Array<import(\"../../coordinate.js\").Coordinate>>>} [coordinatesss]\r\n *     Coordinatesss.\r\n * @return {Array<Array<Array<import(\"../../coordinate.js\").Coordinate>>>} Coordinatesss.\r\n */\r\nexport function inflateMultiCoordinatesArray(\r\n  flatCoordinates,\r\n  offset,\r\n  endss,\r\n  stride,\r\n  coordinatesss,\r\n) {\r\n  coordinatesss = coordinatesss !== undefined ? coordinatesss : [];\r\n  let i = 0;\r\n  for (let j = 0, jj = endss.length; j < jj; ++j) {\r\n    const ends = endss[j];\r\n    coordinatesss[i++] =\r\n      ends.length === 1 && ends[0] === offset\r\n        ? []\r\n        : inflateCoordinatesArray(\r\n            flatCoordinates,\r\n            offset,\r\n            ends,\r\n            stride,\r\n            coordinatesss[i],\r\n          );\r\n    offset = ends[ends.length - 1];\r\n  }\r\n  coordinatesss.length = i;\r\n  return coordinatesss;\r\n}\r\n","/**\r\n * @module ol/geom/flat/simplify\r\n */\r\n// Based on simplify-js https://github.com/mourner/simplify-js\r\n// Copyright (c) 2012, Vladimir Agafonkin\r\n// All rights reserved.\r\n//\r\n// Redistribution and use in source and binary forms, with or without\r\n// modification, are permitted provided that the following conditions are met:\r\n//\r\n//    1. Redistributions of source code must retain the above copyright notice,\r\n//       this list of conditions and the following disclaimer.\r\n//\r\n//    2. Redistributions in binary form must reproduce the above copyright\r\n//       notice, this list of conditions and the following disclaimer in the\r\n//       documentation and/or other materials provided with the distribution.\r\n//\r\n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\r\n// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\r\n// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\r\n// ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\r\n// LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\r\n// CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\r\n// SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\r\n// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\r\n// CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n// POSSIBILITY OF SUCH DAMAGE.\r\n\r\nimport {squaredDistance, squaredSegmentDistance} from '../../math.js';\r\n\r\n/**\r\n * @param {Array<number>} flatCoordinates Flat coordinates.\r\n * @param {number} offset Offset.\r\n * @param {number} end End.\r\n * @param {number} stride Stride.\r\n * @param {number} squaredTolerance Squared tolerance.\r\n * @param {boolean} highQuality Highest quality.\r\n * @param {Array<number>} [simplifiedFlatCoordinates] Simplified flat\r\n *     coordinates.\r\n * @return {Array<number>} Simplified line string.\r\n */\r\nexport function simplifyLineString(\r\n  flatCoordinates,\r\n  offset,\r\n  end,\r\n  stride,\r\n  squaredTolerance,\r\n  highQuality,\r\n  simplifiedFlatCoordinates,\r\n) {\r\n  simplifiedFlatCoordinates =\r\n    simplifiedFlatCoordinates !== undefined ? simplifiedFlatCoordinates : [];\r\n  if (!highQuality) {\r\n    end = radialDistance(\r\n      flatCoordinates,\r\n      offset,\r\n      end,\r\n      stride,\r\n      squaredTolerance,\r\n      simplifiedFlatCoordinates,\r\n      0,\r\n    );\r\n    flatCoordinates = simplifiedFlatCoordinates;\r\n    offset = 0;\r\n    stride = 2;\r\n  }\r\n  simplifiedFlatCoordinates.length = douglasPeucker(\r\n    flatCoordinates,\r\n    offset,\r\n    end,\r\n    stride,\r\n    squaredTolerance,\r\n    simplifiedFlatCoordinates,\r\n    0,\r\n  );\r\n  return simplifiedFlatCoordinates;\r\n}\r\n\r\n/**\r\n * @param {Array<number>} flatCoordinates Flat coordinates.\r\n * @param {number} offset Offset.\r\n * @param {number} end End.\r\n * @param {number} stride Stride.\r\n * @param {number} squaredTolerance Squared tolerance.\r\n * @param {Array<number>} simplifiedFlatCoordinates Simplified flat\r\n *     coordinates.\r\n * @param {number} simplifiedOffset Simplified offset.\r\n * @return {number} Simplified offset.\r\n */\r\nexport function douglasPeucker(\r\n  flatCoordinates,\r\n  offset,\r\n  end,\r\n  stride,\r\n  squaredTolerance,\r\n  simplifiedFlatCoordinates,\r\n  simplifiedOffset,\r\n) {\r\n  const n = (end - offset) / stride;\r\n  if (n < 3) {\r\n    for (; offset < end; offset += stride) {\r\n      simplifiedFlatCoordinates[simplifiedOffset++] = flatCoordinates[offset];\r\n      simplifiedFlatCoordinates[simplifiedOffset++] =\r\n        flatCoordinates[offset + 1];\r\n    }\r\n    return simplifiedOffset;\r\n  }\r\n  /** @type {Array<number>} */\r\n  const markers = new Array(n);\r\n  markers[0] = 1;\r\n  markers[n - 1] = 1;\r\n  /** @type {Array<number>} */\r\n  const stack = [offset, end - stride];\r\n  let index = 0;\r\n  while (stack.length > 0) {\r\n    const last = stack.pop();\r\n    const first = stack.pop();\r\n    let maxSquaredDistance = 0;\r\n    const x1 = flatCoordinates[first];\r\n    const y1 = flatCoordinates[first + 1];\r\n    const x2 = flatCoordinates[last];\r\n    const y2 = flatCoordinates[last + 1];\r\n    for (let i = first + stride; i < last; i += stride) {\r\n      const x = flatCoordinates[i];\r\n      const y = flatCoordinates[i + 1];\r\n      const squaredDistance = squaredSegmentDistance(x, y, x1, y1, x2, y2);\r\n      if (squaredDistance > maxSquaredDistance) {\r\n        index = i;\r\n        maxSquaredDistance = squaredDistance;\r\n      }\r\n    }\r\n    if (maxSquaredDistance > squaredTolerance) {\r\n      markers[(index - offset) / stride] = 1;\r\n      if (first + stride < index) {\r\n        stack.push(first, index);\r\n      }\r\n      if (index + stride < last) {\r\n        stack.push(index, last);\r\n      }\r\n    }\r\n  }\r\n  for (let i = 0; i < n; ++i) {\r\n    if (markers[i]) {\r\n      simplifiedFlatCoordinates[simplifiedOffset++] =\r\n        flatCoordinates[offset + i * stride];\r\n      simplifiedFlatCoordinates[simplifiedOffset++] =\r\n        flatCoordinates[offset + i * stride + 1];\r\n    }\r\n  }\r\n  return simplifiedOffset;\r\n}\r\n\r\n/**\r\n * @param {Array<number>} flatCoordinates Flat coordinates.\r\n * @param {number} offset Offset.\r\n * @param {Array<number>} ends Ends.\r\n * @param {number} stride Stride.\r\n * @param {number} squaredTolerance Squared tolerance.\r\n * @param {Array<number>} simplifiedFlatCoordinates Simplified flat\r\n *     coordinates.\r\n * @param {number} simplifiedOffset Simplified offset.\r\n * @param {Array<number>} simplifiedEnds Simplified ends.\r\n * @return {number} Simplified offset.\r\n */\r\nexport function douglasPeuckerArray(\r\n  flatCoordinates,\r\n  offset,\r\n  ends,\r\n  stride,\r\n  squaredTolerance,\r\n  simplifiedFlatCoordinates,\r\n  simplifiedOffset,\r\n  simplifiedEnds,\r\n) {\r\n  for (let i = 0, ii = ends.length; i < ii; ++i) {\r\n    const end = ends[i];\r\n    simplifiedOffset = douglasPeucker(\r\n      flatCoordinates,\r\n      offset,\r\n      end,\r\n      stride,\r\n      squaredTolerance,\r\n      simplifiedFlatCoordinates,\r\n      simplifiedOffset,\r\n    );\r\n    simplifiedEnds.push(simplifiedOffset);\r\n    offset = end;\r\n  }\r\n  return simplifiedOffset;\r\n}\r\n\r\n/**\r\n * @param {Array<number>} flatCoordinates Flat coordinates.\r\n * @param {number} offset Offset.\r\n * @param {Array<Array<number>>} endss Endss.\r\n * @param {number} stride Stride.\r\n * @param {number} squaredTolerance Squared tolerance.\r\n * @param {Array<number>} simplifiedFlatCoordinates Simplified flat\r\n *     coordinates.\r\n * @param {number} simplifiedOffset Simplified offset.\r\n * @param {Array<Array<number>>} simplifiedEndss Simplified endss.\r\n * @return {number} Simplified offset.\r\n */\r\nexport function douglasPeuckerMultiArray(\r\n  flatCoordinates,\r\n  offset,\r\n  endss,\r\n  stride,\r\n  squaredTolerance,\r\n  simplifiedFlatCoordinates,\r\n  simplifiedOffset,\r\n  simplifiedEndss,\r\n) {\r\n  for (let i = 0, ii = endss.length; i < ii; ++i) {\r\n    const ends = endss[i];\r\n    /** @type {Array<number>} */\r\n    const simplifiedEnds = [];\r\n    simplifiedOffset = douglasPeuckerArray(\r\n      flatCoordinates,\r\n      offset,\r\n      ends,\r\n      stride,\r\n      squaredTolerance,\r\n      simplifiedFlatCoordinates,\r\n      simplifiedOffset,\r\n      simplifiedEnds,\r\n    );\r\n    simplifiedEndss.push(simplifiedEnds);\r\n    offset = ends[ends.length - 1];\r\n  }\r\n  return simplifiedOffset;\r\n}\r\n\r\n/**\r\n * @param {Array<number>} flatCoordinates Flat coordinates.\r\n * @param {number} offset Offset.\r\n * @param {number} end End.\r\n * @param {number} stride Stride.\r\n * @param {number} squaredTolerance Squared tolerance.\r\n * @param {Array<number>} simplifiedFlatCoordinates Simplified flat\r\n *     coordinates.\r\n * @param {number} simplifiedOffset Simplified offset.\r\n * @return {number} Simplified offset.\r\n */\r\nexport function radialDistance(\r\n  flatCoordinates,\r\n  offset,\r\n  end,\r\n  stride,\r\n  squaredTolerance,\r\n  simplifiedFlatCoordinates,\r\n  simplifiedOffset,\r\n) {\r\n  if (end <= offset + stride) {\r\n    // zero or one point, no simplification possible, so copy and return\r\n    for (; offset < end; offset += stride) {\r\n      simplifiedFlatCoordinates[simplifiedOffset++] = flatCoordinates[offset];\r\n      simplifiedFlatCoordinates[simplifiedOffset++] =\r\n        flatCoordinates[offset + 1];\r\n    }\r\n    return simplifiedOffset;\r\n  }\r\n  let x1 = flatCoordinates[offset];\r\n  let y1 = flatCoordinates[offset + 1];\r\n  // copy first point\r\n  simplifiedFlatCoordinates[simplifiedOffset++] = x1;\r\n  simplifiedFlatCoordinates[simplifiedOffset++] = y1;\r\n  let x2 = x1;\r\n  let y2 = y1;\r\n  for (offset += stride; offset < end; offset += stride) {\r\n    x2 = flatCoordinates[offset];\r\n    y2 = flatCoordinates[offset + 1];\r\n    if (squaredDistance(x1, y1, x2, y2) > squaredTolerance) {\r\n      // copy point at offset\r\n      simplifiedFlatCoordinates[simplifiedOffset++] = x2;\r\n      simplifiedFlatCoordinates[simplifiedOffset++] = y2;\r\n      x1 = x2;\r\n      y1 = y2;\r\n    }\r\n  }\r\n  if (x2 != x1 || y2 != y1) {\r\n    // copy last point\r\n    simplifiedFlatCoordinates[simplifiedOffset++] = x2;\r\n    simplifiedFlatCoordinates[simplifiedOffset++] = y2;\r\n  }\r\n  return simplifiedOffset;\r\n}\r\n\r\n/**\r\n * @param {number} value Value.\r\n * @param {number} tolerance Tolerance.\r\n * @return {number} Rounded value.\r\n */\r\nexport function snap(value, tolerance) {\r\n  return tolerance * Math.round(value / tolerance);\r\n}\r\n\r\n/**\r\n * Simplifies a line string using an algorithm designed by Tim Schaub.\r\n * Coordinates are snapped to the nearest value in a virtual grid and\r\n * consecutive duplicate coordinates are discarded.  This effectively preserves\r\n * topology as the simplification of any subsection of a line string is\r\n * independent of the rest of the line string.  This means that, for examples,\r\n * the common edge between two polygons will be simplified to the same line\r\n * string independently in both polygons.  This implementation uses a single\r\n * pass over the coordinates and eliminates intermediate collinear points.\r\n * @param {Array<number>} flatCoordinates Flat coordinates.\r\n * @param {number} offset Offset.\r\n * @param {number} end End.\r\n * @param {number} stride Stride.\r\n * @param {number} tolerance Tolerance.\r\n * @param {Array<number>} simplifiedFlatCoordinates Simplified flat\r\n *     coordinates.\r\n * @param {number} simplifiedOffset Simplified offset.\r\n * @return {number} Simplified offset.\r\n */\r\nexport function quantize(\r\n  flatCoordinates,\r\n  offset,\r\n  end,\r\n  stride,\r\n  tolerance,\r\n  simplifiedFlatCoordinates,\r\n  simplifiedOffset,\r\n) {\r\n  // do nothing if the line is empty\r\n  if (offset == end) {\r\n    return simplifiedOffset;\r\n  }\r\n  // snap the first coordinate (P1)\r\n  let x1 = snap(flatCoordinates[offset], tolerance);\r\n  let y1 = snap(flatCoordinates[offset + 1], tolerance);\r\n  offset += stride;\r\n  // add the first coordinate to the output\r\n  simplifiedFlatCoordinates[simplifiedOffset++] = x1;\r\n  simplifiedFlatCoordinates[simplifiedOffset++] = y1;\r\n  // find the next coordinate that does not snap to the same value as the first\r\n  // coordinate (P2)\r\n  let x2, y2;\r\n  do {\r\n    x2 = snap(flatCoordinates[offset], tolerance);\r\n    y2 = snap(flatCoordinates[offset + 1], tolerance);\r\n    offset += stride;\r\n    if (offset == end) {\r\n      // all coordinates snap to the same value, the line collapses to a point\r\n      // push the last snapped value anyway to ensure that the output contains\r\n      // at least two points\r\n      // FIXME should we really return at least two points anyway?\r\n      simplifiedFlatCoordinates[simplifiedOffset++] = x2;\r\n      simplifiedFlatCoordinates[simplifiedOffset++] = y2;\r\n      return simplifiedOffset;\r\n    }\r\n  } while (x2 == x1 && y2 == y1);\r\n  while (offset < end) {\r\n    // snap the next coordinate (P3)\r\n    const x3 = snap(flatCoordinates[offset], tolerance);\r\n    const y3 = snap(flatCoordinates[offset + 1], tolerance);\r\n    offset += stride;\r\n    // skip P3 if it is equal to P2\r\n    if (x3 == x2 && y3 == y2) {\r\n      continue;\r\n    }\r\n    // calculate the delta between P1 and P2\r\n    const dx1 = x2 - x1;\r\n    const dy1 = y2 - y1;\r\n    // calculate the delta between P3 and P1\r\n    const dx2 = x3 - x1;\r\n    const dy2 = y3 - y1;\r\n    // if P1, P2, and P3 are colinear and P3 is further from P1 than P2 is from\r\n    // P1 in the same direction then P2 is on the straight line between P1 and\r\n    // P3\r\n    if (\r\n      dx1 * dy2 == dy1 * dx2 &&\r\n      ((dx1 < 0 && dx2 < dx1) || dx1 == dx2 || (dx1 > 0 && dx2 > dx1)) &&\r\n      ((dy1 < 0 && dy2 < dy1) || dy1 == dy2 || (dy1 > 0 && dy2 > dy1))\r\n    ) {\r\n      // discard P2 and set P2 = P3\r\n      x2 = x3;\r\n      y2 = y3;\r\n      continue;\r\n    }\r\n    // either P1, P2, and P3 are not colinear, or they are colinear but P3 is\r\n    // between P3 and P1 or on the opposite half of the line to P2.  add P2,\r\n    // and continue with P1 = P2 and P2 = P3\r\n    simplifiedFlatCoordinates[simplifiedOffset++] = x2;\r\n    simplifiedFlatCoordinates[simplifiedOffset++] = y2;\r\n    x1 = x2;\r\n    y1 = y2;\r\n    x2 = x3;\r\n    y2 = y3;\r\n  }\r\n  // add the last point (P2)\r\n  simplifiedFlatCoordinates[simplifiedOffset++] = x2;\r\n  simplifiedFlatCoordinates[simplifiedOffset++] = y2;\r\n  return simplifiedOffset;\r\n}\r\n\r\n/**\r\n * @param {Array<number>} flatCoordinates Flat coordinates.\r\n * @param {number} offset Offset.\r\n * @param {Array<number>} ends Ends.\r\n * @param {number} stride Stride.\r\n * @param {number} tolerance Tolerance.\r\n * @param {Array<number>} simplifiedFlatCoordinates Simplified flat\r\n *     coordinates.\r\n * @param {number} simplifiedOffset Simplified offset.\r\n * @param {Array<number>} simplifiedEnds Simplified ends.\r\n * @return {number} Simplified offset.\r\n */\r\nexport function quantizeArray(\r\n  flatCoordinates,\r\n  offset,\r\n  ends,\r\n  stride,\r\n  tolerance,\r\n  simplifiedFlatCoordinates,\r\n  simplifiedOffset,\r\n  simplifiedEnds,\r\n) {\r\n  for (let i = 0, ii = ends.length; i < ii; ++i) {\r\n    const end = ends[i];\r\n    simplifiedOffset = quantize(\r\n      flatCoordinates,\r\n      offset,\r\n      end,\r\n      stride,\r\n      tolerance,\r\n      simplifiedFlatCoordinates,\r\n      simplifiedOffset,\r\n    );\r\n    simplifiedEnds.push(simplifiedOffset);\r\n    offset = end;\r\n  }\r\n  return simplifiedOffset;\r\n}\r\n\r\n/**\r\n * @param {Array<number>} flatCoordinates Flat coordinates.\r\n * @param {number} offset Offset.\r\n * @param {Array<Array<number>>} endss Endss.\r\n * @param {number} stride Stride.\r\n * @param {number} tolerance Tolerance.\r\n * @param {Array<number>} simplifiedFlatCoordinates Simplified flat\r\n *     coordinates.\r\n * @param {number} simplifiedOffset Simplified offset.\r\n * @param {Array<Array<number>>} simplifiedEndss Simplified endss.\r\n * @return {number} Simplified offset.\r\n */\r\nexport function quantizeMultiArray(\r\n  flatCoordinates,\r\n  offset,\r\n  endss,\r\n  stride,\r\n  tolerance,\r\n  simplifiedFlatCoordinates,\r\n  simplifiedOffset,\r\n  simplifiedEndss,\r\n) {\r\n  for (let i = 0, ii = endss.length; i < ii; ++i) {\r\n    const ends = endss[i];\r\n    /** @type {Array<number>} */\r\n    const simplifiedEnds = [];\r\n    simplifiedOffset = quantizeArray(\r\n      flatCoordinates,\r\n      offset,\r\n      ends,\r\n      stride,\r\n      tolerance,\r\n      simplifiedFlatCoordinates,\r\n      simplifiedOffset,\r\n      simplifiedEnds,\r\n    );\r\n    simplifiedEndss.push(simplifiedEnds);\r\n    offset = ends[ends.length - 1];\r\n  }\r\n  return simplifiedOffset;\r\n}\r\n","/**\r\n * @module ol/geom/Point\r\n */\r\nimport {containsXY, createOrUpdateFromCoordinate} from '../extent.js';\r\nimport {squaredDistance as squaredDx} from '../math.js';\r\nimport SimpleGeometry from './SimpleGeometry.js';\r\nimport {deflateCoordinate} from './flat/deflate.js';\r\n\r\n/**\r\n * @classdesc\r\n * Point geometry.\r\n *\r\n * @api\r\n */\r\nclass Point extends SimpleGeometry {\r\n  /**\r\n   * @param {import(\"../coordinate.js\").Coordinate} coordinates Coordinates.\r\n   * @param {import(\"./Geometry.js\").GeometryLayout} [layout] Layout.\r\n   */\r\n  constructor(coordinates, layout) {\r\n    super();\r\n    this.setCoordinates(coordinates, layout);\r\n  }\r\n\r\n  /**\r\n   * Make a complete copy of the geometry.\r\n   * @return {!Point} Clone.\r\n   * @api\r\n   * @override\r\n   */\r\n  clone() {\r\n    const point = new Point(this.flatCoordinates.slice(), this.layout);\r\n    point.applyProperties(this);\r\n    return point;\r\n  }\r\n\r\n  /**\r\n   * @param {number} x X.\r\n   * @param {number} y Y.\r\n   * @param {import(\"../coordinate.js\").Coordinate} closestPoint Closest point.\r\n   * @param {number} minSquaredDistance Minimum squared distance.\r\n   * @return {number} Minimum squared distance.\r\n   * @override\r\n   */\r\n  closestPointXY(x, y, closestPoint, minSquaredDistance) {\r\n    const flatCoordinates = this.flatCoordinates;\r\n    const squaredDistance = squaredDx(\r\n      x,\r\n      y,\r\n      flatCoordinates[0],\r\n      flatCoordinates[1],\r\n    );\r\n    if (squaredDistance < minSquaredDistance) {\r\n      const stride = this.stride;\r\n      for (let i = 0; i < stride; ++i) {\r\n        closestPoint[i] = flatCoordinates[i];\r\n      }\r\n      closestPoint.length = stride;\r\n      return squaredDistance;\r\n    }\r\n    return minSquaredDistance;\r\n  }\r\n\r\n  /**\r\n   * Return the coordinate of the point.\r\n   * @return {import(\"../coordinate.js\").Coordinate} Coordinates.\r\n   * @api\r\n   * @override\r\n   */\r\n  getCoordinates() {\r\n    return this.flatCoordinates.slice();\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../extent.js\").Extent} extent Extent.\r\n   * @protected\r\n   * @return {import(\"../extent.js\").Extent} extent Extent.\r\n   * @override\r\n   */\r\n  computeExtent(extent) {\r\n    return createOrUpdateFromCoordinate(this.flatCoordinates, extent);\r\n  }\r\n\r\n  /**\r\n   * Get the type of this geometry.\r\n   * @return {import(\"./Geometry.js\").Type} Geometry type.\r\n   * @api\r\n   * @override\r\n   */\r\n  getType() {\r\n    return 'Point';\r\n  }\r\n\r\n  /**\r\n   * Test if the geometry and the passed extent intersect.\r\n   * @param {import(\"../extent.js\").Extent} extent Extent.\r\n   * @return {boolean} `true` if the geometry and the extent intersect.\r\n   * @api\r\n   * @override\r\n   */\r\n  intersectsExtent(extent) {\r\n    return containsXY(extent, this.flatCoordinates[0], this.flatCoordinates[1]);\r\n  }\r\n\r\n  /**\r\n   * @param {!Array<*>} coordinates Coordinates.\r\n   * @param {import(\"./Geometry.js\").GeometryLayout} [layout] Layout.\r\n   * @api\r\n   * @override\r\n   */\r\n  setCoordinates(coordinates, layout) {\r\n    this.setLayout(layout, coordinates, 0);\r\n    if (!this.flatCoordinates) {\r\n      this.flatCoordinates = [];\r\n    }\r\n    this.flatCoordinates.length = deflateCoordinate(\r\n      this.flatCoordinates,\r\n      0,\r\n      coordinates,\r\n      this.stride,\r\n    );\r\n    this.changed();\r\n  }\r\n}\r\n\r\nexport default Point;\r\n","/**\r\n * @module ol/geom/flat/contains\r\n */\r\nimport {forEachCorner} from '../../extent.js';\r\n\r\n/**\r\n * @param {Array<number>} flatCoordinates Flat coordinates.\r\n * @param {number} offset Offset.\r\n * @param {number} end End.\r\n * @param {number} stride Stride.\r\n * @param {import(\"../../extent.js\").Extent} extent Extent.\r\n * @return {boolean} Contains extent.\r\n */\r\nexport function linearRingContainsExtent(\r\n  flatCoordinates,\r\n  offset,\r\n  end,\r\n  stride,\r\n  extent,\r\n) {\r\n  const outside = forEachCorner(\r\n    extent,\r\n    /**\r\n     * @param {import(\"../../coordinate.js\").Coordinate} coordinate Coordinate.\r\n     * @return {boolean} Contains (x, y).\r\n     */\r\n    function (coordinate) {\r\n      return !linearRingContainsXY(\r\n        flatCoordinates,\r\n        offset,\r\n        end,\r\n        stride,\r\n        coordinate[0],\r\n        coordinate[1],\r\n      );\r\n    },\r\n  );\r\n  return !outside;\r\n}\r\n\r\n/**\r\n * @param {Array<number>} flatCoordinates Flat coordinates.\r\n * @param {number} offset Offset.\r\n * @param {number} end End.\r\n * @param {number} stride Stride.\r\n * @param {number} x X.\r\n * @param {number} y Y.\r\n * @return {boolean} Contains (x, y).\r\n */\r\nexport function linearRingContainsXY(\r\n  flatCoordinates,\r\n  offset,\r\n  end,\r\n  stride,\r\n  x,\r\n  y,\r\n) {\r\n  // https://geomalgorithms.com/a03-_inclusion.html\r\n  // Copyright 2000 softSurfer, 2012 Dan Sunday\r\n  // This code may be freely used and modified for any purpose\r\n  // providing that this copyright notice is included with it.\r\n  // SoftSurfer makes no warranty for this code, and cannot be held\r\n  // liable for any real or imagined damage resulting from its use.\r\n  // Users of this code must verify correctness for their application.\r\n  let wn = 0;\r\n  let x1 = flatCoordinates[end - stride];\r\n  let y1 = flatCoordinates[end - stride + 1];\r\n  for (; offset < end; offset += stride) {\r\n    const x2 = flatCoordinates[offset];\r\n    const y2 = flatCoordinates[offset + 1];\r\n    if (y1 <= y) {\r\n      if (y2 > y && (x2 - x1) * (y - y1) - (x - x1) * (y2 - y1) > 0) {\r\n        wn++;\r\n      }\r\n    } else if (y2 <= y && (x2 - x1) * (y - y1) - (x - x1) * (y2 - y1) < 0) {\r\n      wn--;\r\n    }\r\n    x1 = x2;\r\n    y1 = y2;\r\n  }\r\n  return wn !== 0;\r\n}\r\n\r\n/**\r\n * @param {Array<number>} flatCoordinates Flat coordinates.\r\n * @param {number} offset Offset.\r\n * @param {Array<number>} ends Ends.\r\n * @param {number} stride Stride.\r\n * @param {number} x X.\r\n * @param {number} y Y.\r\n * @return {boolean} Contains (x, y).\r\n */\r\nexport function linearRingsContainsXY(\r\n  flatCoordinates,\r\n  offset,\r\n  ends,\r\n  stride,\r\n  x,\r\n  y,\r\n) {\r\n  if (ends.length === 0) {\r\n    return false;\r\n  }\r\n  if (!linearRingContainsXY(flatCoordinates, offset, ends[0], stride, x, y)) {\r\n    return false;\r\n  }\r\n  for (let i = 1, ii = ends.length; i < ii; ++i) {\r\n    if (\r\n      linearRingContainsXY(flatCoordinates, ends[i - 1], ends[i], stride, x, y)\r\n    ) {\r\n      return false;\r\n    }\r\n  }\r\n  return true;\r\n}\r\n\r\n/**\r\n * @param {Array<number>} flatCoordinates Flat coordinates.\r\n * @param {number} offset Offset.\r\n * @param {Array<Array<number>>} endss Endss.\r\n * @param {number} stride Stride.\r\n * @param {number} x X.\r\n * @param {number} y Y.\r\n * @return {boolean} Contains (x, y).\r\n */\r\nexport function linearRingssContainsXY(\r\n  flatCoordinates,\r\n  offset,\r\n  endss,\r\n  stride,\r\n  x,\r\n  y,\r\n) {\r\n  if (endss.length === 0) {\r\n    return false;\r\n  }\r\n  for (let i = 0, ii = endss.length; i < ii; ++i) {\r\n    const ends = endss[i];\r\n    if (linearRingsContainsXY(flatCoordinates, offset, ends, stride, x, y)) {\r\n      return true;\r\n    }\r\n    offset = ends[ends.length - 1];\r\n  }\r\n  return false;\r\n}\r\n","/**\r\n * @module ol/geom/flat/interiorpoint\r\n */\r\nimport {ascending} from '../../array.js';\r\nimport {linearRingsContainsXY} from './contains.js';\r\n\r\n/**\r\n * Calculates a point that is likely to lie in the interior of the linear rings.\r\n * Inspired by JTS's com.vividsolutions.jts.geom.Geometry#getInteriorPoint.\r\n * @param {Array<number>} flatCoordinates Flat coordinates.\r\n * @param {number} offset Offset.\r\n * @param {Array<number>} ends Ends.\r\n * @param {number} stride Stride.\r\n * @param {Array<number>} flatCenters Flat centers.\r\n * @param {number} flatCentersOffset Flat center offset.\r\n * @param {Array<number>} [dest] Destination.\r\n * @return {Array<number>} Destination point as XYM coordinate, where M is the\r\n * length of the horizontal intersection that the point belongs to.\r\n */\r\nexport function getInteriorPointOfArray(\r\n  flatCoordinates,\r\n  offset,\r\n  ends,\r\n  stride,\r\n  flatCenters,\r\n  flatCentersOffset,\r\n  dest,\r\n) {\r\n  let i, ii, x, x1, x2, y1, y2;\r\n  const y = flatCenters[flatCentersOffset + 1];\r\n  /** @type {Array<number>} */\r\n  const intersections = [];\r\n  // Calculate intersections with the horizontal line\r\n  for (let r = 0, rr = ends.length; r < rr; ++r) {\r\n    const end = ends[r];\r\n    x1 = flatCoordinates[end - stride];\r\n    y1 = flatCoordinates[end - stride + 1];\r\n    for (i = offset; i < end; i += stride) {\r\n      x2 = flatCoordinates[i];\r\n      y2 = flatCoordinates[i + 1];\r\n      if ((y <= y1 && y2 <= y) || (y1 <= y && y <= y2)) {\r\n        x = ((y - y1) / (y2 - y1)) * (x2 - x1) + x1;\r\n        intersections.push(x);\r\n      }\r\n      x1 = x2;\r\n      y1 = y2;\r\n    }\r\n  }\r\n  // Find the longest segment of the horizontal line that has its center point\r\n  // inside the linear ring.\r\n  let pointX = NaN;\r\n  let maxSegmentLength = -Infinity;\r\n  intersections.sort(ascending);\r\n  x1 = intersections[0];\r\n  for (i = 1, ii = intersections.length; i < ii; ++i) {\r\n    x2 = intersections[i];\r\n    const segmentLength = Math.abs(x2 - x1);\r\n    if (segmentLength > maxSegmentLength) {\r\n      x = (x1 + x2) / 2;\r\n      if (linearRingsContainsXY(flatCoordinates, offset, ends, stride, x, y)) {\r\n        pointX = x;\r\n        maxSegmentLength = segmentLength;\r\n      }\r\n    }\r\n    x1 = x2;\r\n  }\r\n  if (isNaN(pointX)) {\r\n    // There is no horizontal line that has its center point inside the linear\r\n    // ring.  Use the center of the the linear ring's extent.\r\n    pointX = flatCenters[flatCentersOffset];\r\n  }\r\n  if (dest) {\r\n    dest.push(pointX, y, maxSegmentLength);\r\n    return dest;\r\n  }\r\n  return [pointX, y, maxSegmentLength];\r\n}\r\n\r\n/**\r\n * @param {Array<number>} flatCoordinates Flat coordinates.\r\n * @param {number} offset Offset.\r\n * @param {Array<Array<number>>} endss Endss.\r\n * @param {number} stride Stride.\r\n * @param {Array<number>} flatCenters Flat centers.\r\n * @return {Array<number>} Interior points as XYM coordinates, where M is the\r\n * length of the horizontal intersection that the point belongs to.\r\n */\r\nexport function getInteriorPointsOfMultiArray(\r\n  flatCoordinates,\r\n  offset,\r\n  endss,\r\n  stride,\r\n  flatCenters,\r\n) {\r\n  /** @type {Array<number>} */\r\n  let interiorPoints = [];\r\n  for (let i = 0, ii = endss.length; i < ii; ++i) {\r\n    const ends = endss[i];\r\n    interiorPoints = getInteriorPointOfArray(\r\n      flatCoordinates,\r\n      offset,\r\n      ends,\r\n      stride,\r\n      flatCenters,\r\n      2 * i,\r\n      interiorPoints,\r\n    );\r\n    offset = ends[ends.length - 1];\r\n  }\r\n  return interiorPoints;\r\n}\r\n","/**\r\n * @module ol/geom/flat/intersectsextent\r\n */\r\nimport {\r\n  createEmpty,\r\n  extendFlatCoordinates,\r\n  intersects,\r\n  intersectsSegment,\r\n} from '../../extent.js';\r\nimport {linearRingContainsExtent, linearRingContainsXY} from './contains.js';\r\nimport {forEach as forEachSegment} from './segments.js';\r\n\r\n/**\r\n * @param {Array<number>} flatCoordinates Flat coordinates.\r\n * @param {number} offset Offset.\r\n * @param {number} end End.\r\n * @param {number} stride Stride.\r\n * @param {import(\"../../extent.js\").Extent} extent Extent.\r\n * @param {import('../../extent.js').Extent} [coordinatesExtent] Coordinates extent\r\n * @return {boolean} True if the geometry and the extent intersect.\r\n */\r\nexport function intersectsLineString(\r\n  flatCoordinates,\r\n  offset,\r\n  end,\r\n  stride,\r\n  extent,\r\n  coordinatesExtent,\r\n) {\r\n  coordinatesExtent =\r\n    coordinatesExtent ??\r\n    extendFlatCoordinates(createEmpty(), flatCoordinates, offset, end, stride);\r\n  if (!intersects(extent, coordinatesExtent)) {\r\n    return false;\r\n  }\r\n  if (\r\n    (coordinatesExtent[0] >= extent[0] && coordinatesExtent[2] <= extent[2]) ||\r\n    (coordinatesExtent[1] >= extent[1] && coordinatesExtent[3] <= extent[3])\r\n  ) {\r\n    return true;\r\n  }\r\n  return forEachSegment(\r\n    flatCoordinates,\r\n    offset,\r\n    end,\r\n    stride,\r\n    /**\r\n     * @param {import(\"../../coordinate.js\").Coordinate} point1 Start point.\r\n     * @param {import(\"../../coordinate.js\").Coordinate} point2 End point.\r\n     * @return {boolean} `true` if the segment and the extent intersect,\r\n     *     `false` otherwise.\r\n     */\r\n    function (point1, point2) {\r\n      return intersectsSegment(extent, point1, point2);\r\n    },\r\n  );\r\n}\r\n\r\n/**\r\n * @param {Array<number>} flatCoordinates Flat coordinates.\r\n * @param {number} offset Offset.\r\n * @param {Array<number>} ends Ends.\r\n * @param {number} stride Stride.\r\n * @param {import(\"../../extent.js\").Extent} extent Extent.\r\n * @return {boolean} True if the geometry and the extent intersect.\r\n */\r\nexport function intersectsLineStringArray(\r\n  flatCoordinates,\r\n  offset,\r\n  ends,\r\n  stride,\r\n  extent,\r\n) {\r\n  for (let i = 0, ii = ends.length; i < ii; ++i) {\r\n    if (\r\n      intersectsLineString(flatCoordinates, offset, ends[i], stride, extent)\r\n    ) {\r\n      return true;\r\n    }\r\n    offset = ends[i];\r\n  }\r\n  return false;\r\n}\r\n\r\n/**\r\n * @param {Array<number>} flatCoordinates Flat coordinates.\r\n * @param {number} offset Offset.\r\n * @param {number} end End.\r\n * @param {number} stride Stride.\r\n * @param {import(\"../../extent.js\").Extent} extent Extent.\r\n * @return {boolean} True if the geometry and the extent intersect.\r\n */\r\nexport function intersectsLinearRing(\r\n  flatCoordinates,\r\n  offset,\r\n  end,\r\n  stride,\r\n  extent,\r\n) {\r\n  if (intersectsLineString(flatCoordinates, offset, end, stride, extent)) {\r\n    return true;\r\n  }\r\n  if (\r\n    linearRingContainsXY(\r\n      flatCoordinates,\r\n      offset,\r\n      end,\r\n      stride,\r\n      extent[0],\r\n      extent[1],\r\n    )\r\n  ) {\r\n    return true;\r\n  }\r\n  if (\r\n    linearRingContainsXY(\r\n      flatCoordinates,\r\n      offset,\r\n      end,\r\n      stride,\r\n      extent[0],\r\n      extent[3],\r\n    )\r\n  ) {\r\n    return true;\r\n  }\r\n  if (\r\n    linearRingContainsXY(\r\n      flatCoordinates,\r\n      offset,\r\n      end,\r\n      stride,\r\n      extent[2],\r\n      extent[1],\r\n    )\r\n  ) {\r\n    return true;\r\n  }\r\n  if (\r\n    linearRingContainsXY(\r\n      flatCoordinates,\r\n      offset,\r\n      end,\r\n      stride,\r\n      extent[2],\r\n      extent[3],\r\n    )\r\n  ) {\r\n    return true;\r\n  }\r\n  return false;\r\n}\r\n\r\n/**\r\n * @param {Array<number>} flatCoordinates Flat coordinates.\r\n * @param {number} offset Offset.\r\n * @param {Array<number>} ends Ends.\r\n * @param {number} stride Stride.\r\n * @param {import(\"../../extent.js\").Extent} extent Extent.\r\n * @return {boolean} True if the geometry and the extent intersect.\r\n */\r\nexport function intersectsLinearRingArray(\r\n  flatCoordinates,\r\n  offset,\r\n  ends,\r\n  stride,\r\n  extent,\r\n) {\r\n  if (!intersectsLinearRing(flatCoordinates, offset, ends[0], stride, extent)) {\r\n    return false;\r\n  }\r\n  if (ends.length === 1) {\r\n    return true;\r\n  }\r\n  for (let i = 1, ii = ends.length; i < ii; ++i) {\r\n    if (\r\n      linearRingContainsExtent(\r\n        flatCoordinates,\r\n        ends[i - 1],\r\n        ends[i],\r\n        stride,\r\n        extent,\r\n      )\r\n    ) {\r\n      if (\r\n        !intersectsLineString(\r\n          flatCoordinates,\r\n          ends[i - 1],\r\n          ends[i],\r\n          stride,\r\n          extent,\r\n        )\r\n      ) {\r\n        return false;\r\n      }\r\n    }\r\n  }\r\n  return true;\r\n}\r\n\r\n/**\r\n * @param {Array<number>} flatCoordinates Flat coordinates.\r\n * @param {number} offset Offset.\r\n * @param {Array<Array<number>>} endss Endss.\r\n * @param {number} stride Stride.\r\n * @param {import(\"../../extent.js\").Extent} extent Extent.\r\n * @return {boolean} True if the geometry and the extent intersect.\r\n */\r\nexport function intersectsLinearRingMultiArray(\r\n  flatCoordinates,\r\n  offset,\r\n  endss,\r\n  stride,\r\n  extent,\r\n) {\r\n  for (let i = 0, ii = endss.length; i < ii; ++i) {\r\n    const ends = endss[i];\r\n    if (\r\n      intersectsLinearRingArray(flatCoordinates, offset, ends, stride, extent)\r\n    ) {\r\n      return true;\r\n    }\r\n    offset = ends[ends.length - 1];\r\n  }\r\n  return false;\r\n}\r\n","/**\r\n * @module ol/geom/flat/segments\r\n */\r\n\r\n/**\r\n * This function calls `callback` for each segment of the flat coordinates\r\n * array. If the callback returns a truthy value the function returns that\r\n * value immediately. Otherwise the function returns `false`.\r\n * @param {Array<number>} flatCoordinates Flat coordinates.\r\n * @param {number} offset Offset.\r\n * @param {number} end End.\r\n * @param {number} stride Stride.\r\n * @param {function(import(\"../../coordinate.js\").Coordinate, import(\"../../coordinate.js\").Coordinate): T} callback Function\r\n *     called for each segment.\r\n * @return {T|boolean} Value.\r\n * @template T\r\n */\r\nexport function forEach(flatCoordinates, offset, end, stride, callback) {\r\n  let ret;\r\n  offset += stride;\r\n  for (; offset < end; offset += stride) {\r\n    ret = callback(\r\n      flatCoordinates.slice(offset - stride, offset),\r\n      flatCoordinates.slice(offset, offset + stride),\r\n    );\r\n    if (ret) {\r\n      return ret;\r\n    }\r\n  }\r\n  return false;\r\n}\r\n\r\n/**\r\n * Calculate the intersection point of two line segments.\r\n * Reference: https://stackoverflow.com/a/72474223/2389327\r\n * @param {Array<import(\"../../coordinate.js\").Coordinate>} segment1 The first line segment as an array of two points.\r\n * @param {Array<import(\"../../coordinate.js\").Coordinate>} segment2 The second line segment as an array of two points.\r\n * @return {import(\"../../coordinate.js\").Coordinate|undefined} The intersection point or `undefined` if no intersection.\r\n */\r\nexport function getIntersectionPoint(segment1, segment2) {\r\n  const [a, b] = segment1;\r\n  const [c, d] = segment2;\r\n  const t =\r\n    ((a[0] - c[0]) * (c[1] - d[1]) - (a[1] - c[1]) * (c[0] - d[0])) /\r\n    ((a[0] - b[0]) * (c[1] - d[1]) - (a[1] - b[1]) * (c[0] - d[0]));\r\n  const u =\r\n    ((a[0] - c[0]) * (a[1] - b[1]) - (a[1] - c[1]) * (a[0] - b[0])) /\r\n    ((a[0] - b[0]) * (c[1] - d[1]) - (a[1] - b[1]) * (c[0] - d[0]));\r\n\r\n  // Check if lines actually intersect\r\n  if (0 <= t && t <= 1 && 0 <= u && u <= 1) {\r\n    return [a[0] + t * (b[0] - a[0]), a[1] + t * (b[1] - a[1])];\r\n  }\r\n  return undefined;\r\n}\r\n","/**\r\n * @module ol/geom/flat/orient\r\n */\r\nimport {coordinates as reverseCoordinates} from './reverse.js';\r\n\r\n/**\r\n * Is the linear ring oriented clockwise in a coordinate system with a bottom-left\r\n * coordinate origin? For a coordinate system with a top-left coordinate origin,\r\n * the ring's orientation is clockwise when this function returns false.\r\n * @param {Array<number>} flatCoordinates Flat coordinates.\r\n * @param {number} offset Offset.\r\n * @param {number} end End.\r\n * @param {number} stride Stride.\r\n * @return {boolean|undefined} Is clockwise.\r\n */\r\nexport function linearRingIsClockwise(flatCoordinates, offset, end, stride) {\r\n  // https://stackoverflow.com/q/1165647/clockwise-method#1165943\r\n  // https://github.com/OSGeo/gdal/blob/master/gdal/ogr/ogrlinearring.cpp\r\n  let edge = 0;\r\n  let x1 = flatCoordinates[end - stride];\r\n  let y1 = flatCoordinates[end - stride + 1];\r\n  for (; offset < end; offset += stride) {\r\n    const x2 = flatCoordinates[offset];\r\n    const y2 = flatCoordinates[offset + 1];\r\n    edge += (x2 - x1) * (y2 + y1);\r\n    x1 = x2;\r\n    y1 = y2;\r\n  }\r\n  return edge === 0 ? undefined : edge > 0;\r\n}\r\n\r\n/**\r\n * Determines if linear rings are oriented.  By default, left-hand orientation\r\n * is tested (first ring must be clockwise, remaining rings counter-clockwise).\r\n * To test for right-hand orientation, use the `right` argument.\r\n *\r\n * @param {Array<number>} flatCoordinates Flat coordinates.\r\n * @param {number} offset Offset.\r\n * @param {Array<number>} ends Array of end indexes.\r\n * @param {number} stride Stride.\r\n * @param {boolean} [right] Test for right-hand orientation\r\n *     (counter-clockwise exterior ring and clockwise interior rings).\r\n * @return {boolean} Rings are correctly oriented.\r\n */\r\nexport function linearRingsAreOriented(\r\n  flatCoordinates,\r\n  offset,\r\n  ends,\r\n  stride,\r\n  right,\r\n) {\r\n  right = right !== undefined ? right : false;\r\n  for (let i = 0, ii = ends.length; i < ii; ++i) {\r\n    const end = ends[i];\r\n    const isClockwise = linearRingIsClockwise(\r\n      flatCoordinates,\r\n      offset,\r\n      end,\r\n      stride,\r\n    );\r\n    if (i === 0) {\r\n      if ((right && isClockwise) || (!right && !isClockwise)) {\r\n        return false;\r\n      }\r\n    } else {\r\n      if ((right && !isClockwise) || (!right && isClockwise)) {\r\n        return false;\r\n      }\r\n    }\r\n    offset = end;\r\n  }\r\n  return true;\r\n}\r\n\r\n/**\r\n * Determines if linear rings are oriented.  By default, left-hand orientation\r\n * is tested (first ring must be clockwise, remaining rings counter-clockwise).\r\n * To test for right-hand orientation, use the `right` argument.\r\n *\r\n * @param {Array<number>} flatCoordinates Flat coordinates.\r\n * @param {number} offset Offset.\r\n * @param {Array<Array<number>>} endss Array of array of end indexes.\r\n * @param {number} stride Stride.\r\n * @param {boolean} [right] Test for right-hand orientation\r\n *     (counter-clockwise exterior ring and clockwise interior rings).\r\n * @return {boolean} Rings are correctly oriented.\r\n */\r\nexport function linearRingssAreOriented(\r\n  flatCoordinates,\r\n  offset,\r\n  endss,\r\n  stride,\r\n  right,\r\n) {\r\n  for (let i = 0, ii = endss.length; i < ii; ++i) {\r\n    const ends = endss[i];\r\n    if (!linearRingsAreOriented(flatCoordinates, offset, ends, stride, right)) {\r\n      return false;\r\n    }\r\n    if (ends.length) {\r\n      offset = ends[ends.length - 1];\r\n    }\r\n  }\r\n  return true;\r\n}\r\n\r\n/**\r\n * Orient coordinates in a flat array of linear rings.  By default, rings\r\n * are oriented following the left-hand rule (clockwise for exterior and\r\n * counter-clockwise for interior rings).  To orient according to the\r\n * right-hand rule, use the `right` argument.\r\n *\r\n * @param {Array<number>} flatCoordinates Flat coordinates.\r\n * @param {number} offset Offset.\r\n * @param {Array<number>} ends Ends.\r\n * @param {number} stride Stride.\r\n * @param {boolean} [right] Follow the right-hand rule for orientation.\r\n * @return {number} End.\r\n */\r\nexport function orientLinearRings(\r\n  flatCoordinates,\r\n  offset,\r\n  ends,\r\n  stride,\r\n  right,\r\n) {\r\n  right = right !== undefined ? right : false;\r\n  for (let i = 0, ii = ends.length; i < ii; ++i) {\r\n    const end = ends[i];\r\n    const isClockwise = linearRingIsClockwise(\r\n      flatCoordinates,\r\n      offset,\r\n      end,\r\n      stride,\r\n    );\r\n    const reverse =\r\n      i === 0\r\n        ? (right && isClockwise) || (!right && !isClockwise)\r\n        : (right && !isClockwise) || (!right && isClockwise);\r\n    if (reverse) {\r\n      reverseCoordinates(flatCoordinates, offset, end, stride);\r\n    }\r\n    offset = end;\r\n  }\r\n  return offset;\r\n}\r\n\r\n/**\r\n * Orient coordinates in a flat array of linear rings.  By default, rings\r\n * are oriented following the left-hand rule (clockwise for exterior and\r\n * counter-clockwise for interior rings).  To orient according to the\r\n * right-hand rule, use the `right` argument.\r\n *\r\n * @param {Array<number>} flatCoordinates Flat coordinates.\r\n * @param {number} offset Offset.\r\n * @param {Array<Array<number>>} endss Array of array of end indexes.\r\n * @param {number} stride Stride.\r\n * @param {boolean} [right] Follow the right-hand rule for orientation.\r\n * @return {number} End.\r\n */\r\nexport function orientLinearRingsArray(\r\n  flatCoordinates,\r\n  offset,\r\n  endss,\r\n  stride,\r\n  right,\r\n) {\r\n  for (let i = 0, ii = endss.length; i < ii; ++i) {\r\n    offset = orientLinearRings(\r\n      flatCoordinates,\r\n      offset,\r\n      endss[i],\r\n      stride,\r\n      right,\r\n    );\r\n  }\r\n  return offset;\r\n}\r\n\r\n/**\r\n * Return a two-dimensional endss\r\n * @param {Array<number>} flatCoordinates Flat coordinates\r\n * @param {Array<number>} ends Linear ring end indexes\r\n * @return {Array<Array<number>>} Two dimensional endss array that can\r\n * be used to construct a MultiPolygon\r\n */\r\nexport function inflateEnds(flatCoordinates, ends) {\r\n  const endss = [];\r\n  let offset = 0;\r\n  let prevEndIndex = 0;\r\n  let startOrientation;\r\n  for (let i = 0, ii = ends.length; i < ii; ++i) {\r\n    const end = ends[i];\r\n    // classifies an array of rings into polygons with outer rings and holes\r\n    const orientation = linearRingIsClockwise(flatCoordinates, offset, end, 2);\r\n    if (startOrientation === undefined) {\r\n      startOrientation = orientation;\r\n    }\r\n    if (orientation === startOrientation) {\r\n      endss.push(ends.slice(prevEndIndex, i + 1));\r\n    } else {\r\n      if (endss.length === 0) {\r\n        continue;\r\n      }\r\n      endss[endss.length - 1].push(ends[prevEndIndex]);\r\n    }\r\n    prevEndIndex = i + 1;\r\n    offset = end;\r\n  }\r\n  return endss;\r\n}\r\n","/**\r\n * @module ol/geom/flat/reverse\r\n */\r\n\r\n/**\r\n * @param {Array<number>} flatCoordinates Flat coordinates.\r\n * @param {number} offset Offset.\r\n * @param {number} end End.\r\n * @param {number} stride Stride.\r\n */\r\nexport function coordinates(flatCoordinates, offset, end, stride) {\r\n  while (offset < end - stride) {\r\n    for (let i = 0; i < stride; ++i) {\r\n      const tmp = flatCoordinates[offset + i];\r\n      flatCoordinates[offset + i] = flatCoordinates[end - stride + i];\r\n      flatCoordinates[end - stride + i] = tmp;\r\n    }\r\n    offset += stride;\r\n    end -= stride;\r\n  }\r\n}\r\n","/**\r\n * @module ol/resolutionconstraint\r\n */\r\nimport {linearFindNearest} from './array.js';\r\nimport {getHeight, getWidth} from './extent.js';\r\nimport {clamp} from './math.js';\r\n\r\n/**\r\n * @typedef {function((number|undefined), number, import(\"./size.js\").Size, boolean=): (number|undefined)} Type\r\n */\r\n\r\n/**\r\n * Returns a modified resolution taking into account the viewport size and maximum\r\n * allowed extent.\r\n * @param {number} resolution Resolution\r\n * @param {import(\"./extent.js\").Extent} maxExtent Maximum allowed extent.\r\n * @param {import(\"./size.js\").Size} viewportSize Viewport size.\r\n * @param {boolean} showFullExtent Whether to show the full extent.\r\n * @return {number} Capped resolution.\r\n */\r\nfunction getViewportClampedResolution(\r\n  resolution,\r\n  maxExtent,\r\n  viewportSize,\r\n  showFullExtent,\r\n) {\r\n  const xResolution = getWidth(maxExtent) / viewportSize[0];\r\n  const yResolution = getHeight(maxExtent) / viewportSize[1];\r\n\r\n  if (showFullExtent) {\r\n    return Math.min(resolution, Math.max(xResolution, yResolution));\r\n  }\r\n  return Math.min(resolution, Math.min(xResolution, yResolution));\r\n}\r\n\r\n/**\r\n * Returns a modified resolution to be between maxResolution and minResolution while\r\n * still allowing the value to be slightly out of bounds.\r\n * Note: the computation is based on the logarithm function (ln):\r\n *  - at 1, ln(x) is 0\r\n *  - above 1, ln(x) keeps increasing but at a much slower pace than x\r\n * The final result is clamped to prevent getting too far away from bounds.\r\n * @param {number} resolution Resolution.\r\n * @param {number} maxResolution Max resolution.\r\n * @param {number} minResolution Min resolution.\r\n * @return {number} Smoothed resolution.\r\n */\r\nfunction getSmoothClampedResolution(resolution, maxResolution, minResolution) {\r\n  let result = Math.min(resolution, maxResolution);\r\n  const ratio = 50;\r\n\r\n  result *=\r\n    Math.log(1 + ratio * Math.max(0, resolution / maxResolution - 1)) / ratio +\r\n    1;\r\n  if (minResolution) {\r\n    result = Math.max(result, minResolution);\r\n    result /=\r\n      Math.log(1 + ratio * Math.max(0, minResolution / resolution - 1)) /\r\n        ratio +\r\n      1;\r\n  }\r\n  return clamp(result, minResolution / 2, maxResolution * 2);\r\n}\r\n\r\n/**\r\n * @param {Array<number>} resolutions Resolutions.\r\n * @param {boolean} [smooth] If true, the view will be able to slightly exceed resolution limits. Default: true.\r\n * @param {import(\"./extent.js\").Extent} [maxExtent] Maximum allowed extent.\r\n * @param {boolean} [showFullExtent] If true, allows us to show the full extent. Default: false.\r\n * @return {Type} Zoom function.\r\n */\r\nexport function createSnapToResolutions(\r\n  resolutions,\r\n  smooth,\r\n  maxExtent,\r\n  showFullExtent,\r\n) {\r\n  smooth = smooth !== undefined ? smooth : true;\r\n  return (\r\n    /**\r\n     * @param {number|undefined} resolution Resolution.\r\n     * @param {number} direction Direction.\r\n     * @param {import(\"./size.js\").Size} size Viewport size.\r\n     * @param {boolean} [isMoving] True if an interaction or animation is in progress.\r\n     * @return {number|undefined} Resolution.\r\n     */\r\n    function (resolution, direction, size, isMoving) {\r\n      if (resolution !== undefined) {\r\n        const maxResolution = resolutions[0];\r\n        const minResolution = resolutions[resolutions.length - 1];\r\n        const cappedMaxRes = maxExtent\r\n          ? getViewportClampedResolution(\r\n              maxResolution,\r\n              maxExtent,\r\n              size,\r\n              showFullExtent,\r\n            )\r\n          : maxResolution;\r\n\r\n        // during interacting or animating, allow intermediary values\r\n        if (isMoving) {\r\n          if (!smooth) {\r\n            return clamp(resolution, minResolution, cappedMaxRes);\r\n          }\r\n          return getSmoothClampedResolution(\r\n            resolution,\r\n            cappedMaxRes,\r\n            minResolution,\r\n          );\r\n        }\r\n\r\n        const capped = Math.min(cappedMaxRes, resolution);\r\n        const z = Math.floor(linearFindNearest(resolutions, capped, direction));\r\n        if (resolutions[z] > cappedMaxRes && z < resolutions.length - 1) {\r\n          return resolutions[z + 1];\r\n        }\r\n        return resolutions[z];\r\n      }\r\n      return undefined;\r\n    }\r\n  );\r\n}\r\n\r\n/**\r\n * @param {number} power Power.\r\n * @param {number} maxResolution Maximum resolution.\r\n * @param {number} [minResolution] Minimum resolution.\r\n * @param {boolean} [smooth] If true, the view will be able to slightly exceed resolution limits. Default: true.\r\n * @param {import(\"./extent.js\").Extent} [maxExtent] Maximum allowed extent.\r\n * @param {boolean} [showFullExtent] If true, allows us to show the full extent. Default: false.\r\n * @return {Type} Zoom function.\r\n */\r\nexport function createSnapToPower(\r\n  power,\r\n  maxResolution,\r\n  minResolution,\r\n  smooth,\r\n  maxExtent,\r\n  showFullExtent,\r\n) {\r\n  smooth = smooth !== undefined ? smooth : true;\r\n  minResolution = minResolution !== undefined ? minResolution : 0;\r\n\r\n  return (\r\n    /**\r\n     * @param {number|undefined} resolution Resolution.\r\n     * @param {number} direction Direction.\r\n     * @param {import(\"./size.js\").Size} size Viewport size.\r\n     * @param {boolean} [isMoving] True if an interaction or animation is in progress.\r\n     * @return {number|undefined} Resolution.\r\n     */\r\n    function (resolution, direction, size, isMoving) {\r\n      if (resolution !== undefined) {\r\n        const cappedMaxRes = maxExtent\r\n          ? getViewportClampedResolution(\r\n              maxResolution,\r\n              maxExtent,\r\n              size,\r\n              showFullExtent,\r\n            )\r\n          : maxResolution;\r\n\r\n        // during interacting or animating, allow intermediary values\r\n        if (isMoving) {\r\n          if (!smooth) {\r\n            return clamp(resolution, minResolution, cappedMaxRes);\r\n          }\r\n          return getSmoothClampedResolution(\r\n            resolution,\r\n            cappedMaxRes,\r\n            minResolution,\r\n          );\r\n        }\r\n\r\n        const tolerance = 1e-9;\r\n        const minZoomLevel = Math.ceil(\r\n          Math.log(maxResolution / cappedMaxRes) / Math.log(power) - tolerance,\r\n        );\r\n        const offset = -direction * (0.5 - tolerance) + 0.5;\r\n        const capped = Math.min(cappedMaxRes, resolution);\r\n        const cappedZoomLevel = Math.floor(\r\n          Math.log(maxResolution / capped) / Math.log(power) + offset,\r\n        );\r\n        const zoomLevel = Math.max(minZoomLevel, cappedZoomLevel);\r\n        const newResolution = maxResolution / Math.pow(power, zoomLevel);\r\n        return clamp(newResolution, minResolution, cappedMaxRes);\r\n      }\r\n      return undefined;\r\n    }\r\n  );\r\n}\r\n\r\n/**\r\n * @param {number} maxResolution Max resolution.\r\n * @param {number} minResolution Min resolution.\r\n * @param {boolean} [smooth] If true, the view will be able to slightly exceed resolution limits. Default: true.\r\n * @param {import(\"./extent.js\").Extent} [maxExtent] Maximum allowed extent.\r\n * @param {boolean} [showFullExtent] If true, allows us to show the full extent. Default: false.\r\n * @return {Type} Zoom function.\r\n */\r\nexport function createMinMaxResolution(\r\n  maxResolution,\r\n  minResolution,\r\n  smooth,\r\n  maxExtent,\r\n  showFullExtent,\r\n) {\r\n  smooth = smooth !== undefined ? smooth : true;\r\n\r\n  return (\r\n    /**\r\n     * @param {number|undefined} resolution Resolution.\r\n     * @param {number} direction Direction.\r\n     * @param {import(\"./size.js\").Size} size Viewport size.\r\n     * @param {boolean} [isMoving] True if an interaction or animation is in progress.\r\n     * @return {number|undefined} Resolution.\r\n     */\r\n    function (resolution, direction, size, isMoving) {\r\n      if (resolution !== undefined) {\r\n        const cappedMaxRes = maxExtent\r\n          ? getViewportClampedResolution(\r\n              maxResolution,\r\n              maxExtent,\r\n              size,\r\n              showFullExtent,\r\n            )\r\n          : maxResolution;\r\n\r\n        if (!smooth || !isMoving) {\r\n          return clamp(resolution, minResolution, cappedMaxRes);\r\n        }\r\n        return getSmoothClampedResolution(\r\n          resolution,\r\n          cappedMaxRes,\r\n          minResolution,\r\n        );\r\n      }\r\n      return undefined;\r\n    }\r\n  );\r\n}\r\n","/**\r\n * @module ol/rotationconstraint\r\n */\r\nimport {toRadians} from './math.js';\r\n\r\n/**\r\n * @typedef {function((number|undefined), boolean=): (number|undefined)} Type\r\n */\r\n\r\n/**\r\n * @param {number|undefined} rotation Rotation.\r\n * @return {number|undefined} Rotation.\r\n */\r\nexport function disable(rotation) {\r\n  if (rotation !== undefined) {\r\n    return 0;\r\n  }\r\n  return undefined;\r\n}\r\n\r\n/**\r\n * @param {number|undefined} rotation Rotation.\r\n * @return {number|undefined} Rotation.\r\n */\r\nexport function none(rotation) {\r\n  if (rotation !== undefined) {\r\n    return rotation;\r\n  }\r\n  return undefined;\r\n}\r\n\r\n/**\r\n * @param {number} n N.\r\n * @return {Type} Rotation constraint.\r\n */\r\nexport function createSnapToN(n) {\r\n  const theta = (2 * Math.PI) / n;\r\n  return (\r\n    /**\r\n     * @param {number|undefined} rotation Rotation.\r\n     * @param {boolean} [isMoving] True if an interaction or animation is in progress.\r\n     * @return {number|undefined} Rotation.\r\n     */\r\n    function (rotation, isMoving) {\r\n      if (isMoving) {\r\n        return rotation;\r\n      }\r\n\r\n      if (rotation !== undefined) {\r\n        rotation = Math.floor(rotation / theta + 0.5) * theta;\r\n        return rotation;\r\n      }\r\n      return undefined;\r\n    }\r\n  );\r\n}\r\n\r\n/**\r\n * @param {number} [tolerance] Tolerance.\r\n * @return {Type} Rotation constraint.\r\n */\r\nexport function createSnapToZero(tolerance) {\r\n  const t = tolerance === undefined ? toRadians(5) : tolerance;\r\n  return (\r\n    /**\r\n     * @param {number|undefined} rotation Rotation.\r\n     * @param {boolean} [isMoving] True if an interaction or animation is in progress.\r\n     * @return {number|undefined} Rotation.\r\n     */\r\n    function (rotation, isMoving) {\r\n      if (isMoving || rotation === undefined) {\r\n        return rotation;\r\n      }\r\n\r\n      if (Math.abs(rotation) <= t) {\r\n        return 0;\r\n      }\r\n      return rotation;\r\n    }\r\n  );\r\n}\r\n","/**\r\n * @module ol/tilegrid/common\r\n */\r\n\r\n/**\r\n * Default maximum zoom for default tile grids.\r\n * @type {number}\r\n */\r\nexport const DEFAULT_MAX_ZOOM = 42;\r\n\r\n/**\r\n * Default tile size.\r\n * @type {number}\r\n */\r\nexport const DEFAULT_TILE_SIZE = 256;\r\n","/**\r\n * @module ol/control/defaults\r\n */\r\nimport Collection from '../Collection.js';\r\nimport Attribution from './Attribution.js';\r\nimport Rotate from './Rotate.js';\r\nimport Zoom from './Zoom.js';\r\n\r\n/**\r\n * @typedef {Object} DefaultsOptions\r\n * @property {boolean} [attribution=true] Include\r\n * {@link module:ol/control/Attribution~Attribution}.\r\n * @property {import(\"./Attribution.js\").Options} [attributionOptions]\r\n * Options for {@link module:ol/control/Attribution~Attribution}.\r\n * @property {boolean} [rotate=true] Include\r\n * {@link module:ol/control/Rotate~Rotate}.\r\n * @property {import(\"./Rotate.js\").Options} [rotateOptions] Options\r\n * for {@link module:ol/control/Rotate~Rotate}.\r\n * @property {boolean} [zoom] Include {@link module:ol/control/Zoom~Zoom}.\r\n * @property {import(\"./Zoom.js\").Options} [zoomOptions] Options for\r\n * {@link module:ol/control/Zoom~Zoom}.\r\n */\r\n\r\n/**\r\n * Set of controls included in maps by default. Unless configured otherwise,\r\n * this returns a collection containing an instance of each of the following\r\n * controls:\r\n * {@link module:ol/control/Zoom~Zoom}\r\n * {@link module:ol/control/Rotate~Rotate}\r\n * {@link module:ol/control/Attribution~Attribution}\r\n *\r\n * @param {DefaultsOptions} [options] Options for the default controls.\r\n * @return {Collection<import(\"./Control.js\").default>} A collection of controls\r\n * to be used with the {@link module:ol/Map~Map} constructor's `controls` option.\r\n * @api\r\n */\r\nexport function defaults(options) {\r\n  options = options ? options : {};\r\n\r\n  /** @type {Collection<import(\"./Control.js\").default>} */\r\n  const controls = new Collection();\r\n\r\n  const zoomControl = options.zoom !== undefined ? options.zoom : true;\r\n  if (zoomControl) {\r\n    controls.push(new Zoom(options.zoomOptions));\r\n  }\r\n\r\n  const rotateControl = options.rotate !== undefined ? options.rotate : true;\r\n  if (rotateControl) {\r\n    controls.push(new Rotate(options.rotateOptions));\r\n  }\r\n\r\n  const attributionControl =\r\n    options.attribution !== undefined ? options.attribution : true;\r\n  if (attributionControl) {\r\n    controls.push(new Attribution(options.attributionOptions));\r\n  }\r\n\r\n  return controls;\r\n}\r\n","/**\r\n * @module ol/control/Attribution\r\n */\r\nimport {equals} from '../array.js';\r\nimport {CLASS_COLLAPSED, CLASS_CONTROL, CLASS_UNSELECTABLE} from '../css.js';\r\nimport {removeChildren, replaceNode} from '../dom.js';\r\nimport EventType from '../events/EventType.js';\r\nimport {toPromise} from '../functions.js';\r\nimport Control from './Control.js';\r\n\r\n/**\r\n * @typedef {Object} Options\r\n * @property {string} [className='ol-attribution'] CSS class name.\r\n * @property {HTMLElement|string} [target] Specify a target if you\r\n * want the control to be rendered outside of the map's\r\n * viewport.\r\n * @property {boolean} [collapsible] Specify if attributions can\r\n * be collapsed. If not specified, sources control this behavior with their\r\n * `attributionsCollapsible` setting.\r\n * @property {boolean} [collapsed=true] Specify if attributions should\r\n * be collapsed at startup.\r\n * @property {string} [tipLabel='Attributions'] Text label to use for the button tip.\r\n * @property {string|HTMLElement} [label='i'] Text label to use for the\r\n * collapsed attributions button.\r\n * Instead of text, also an element (e.g. a `span` element) can be used.\r\n * @property {string} [expandClassName=className + '-expand'] CSS class name for the\r\n * collapsed attributions button.\r\n * @property {string|HTMLElement} [collapseLabel='›'] Text label to use\r\n * for the expanded attributions button.\r\n * Instead of text, also an element (e.g. a `span` element) can be used.\r\n * @property {string} [collapseClassName=className + '-collapse'] CSS class name for the\r\n * expanded attributions button.\r\n * @property {function(import(\"../MapEvent.js\").default):void} [render] Function called when\r\n * the control should be re-rendered. This is called in a `requestAnimationFrame`\r\n * callback.\r\n * @property {string|Array<string>|undefined} [attributions] Optional attribution(s) that will always be\r\n * displayed regardless of the layers rendered\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * Control to show all the attributions associated with the layer sources\r\n * in the map. This control is one of the default controls included in maps.\r\n * By default it will show in the bottom right portion of the map, but this can\r\n * be changed by using a css selector for `.ol-attribution`.\r\n *\r\n * @api\r\n */\r\nclass Attribution extends Control {\r\n  /**\r\n   * @param {Options} [options] Attribution options.\r\n   */\r\n  constructor(options) {\r\n    options = options ? options : {};\r\n\r\n    super({\r\n      element: document.createElement('div'),\r\n      render: options.render,\r\n      target: options.target,\r\n    });\r\n\r\n    /**\r\n     * @private\r\n     * @type {HTMLElement}\r\n     */\r\n    this.ulElement_ = document.createElement('ul');\r\n\r\n    /**\r\n     * @private\r\n     * @type {boolean}\r\n     */\r\n    this.collapsed_ =\r\n      options.collapsed !== undefined ? options.collapsed : true;\r\n\r\n    /**\r\n     * @private\r\n     * @type {boolean}\r\n     */\r\n    this.userCollapsed_ = this.collapsed_;\r\n\r\n    /**\r\n     * @private\r\n     * @type {boolean}\r\n     */\r\n    this.overrideCollapsible_ = options.collapsible !== undefined;\r\n\r\n    /**\r\n     * @private\r\n     * @type {boolean}\r\n     */\r\n    this.collapsible_ =\r\n      options.collapsible !== undefined ? options.collapsible : true;\r\n\r\n    if (!this.collapsible_) {\r\n      this.collapsed_ = false;\r\n    }\r\n\r\n    /**\r\n     * @private\r\n     * @type {string | Array<string> | undefined}\r\n     */\r\n    this.attributions_ = options.attributions;\r\n\r\n    const className =\r\n      options.className !== undefined ? options.className : 'ol-attribution';\r\n\r\n    const tipLabel =\r\n      options.tipLabel !== undefined ? options.tipLabel : 'Attributions';\r\n\r\n    const expandClassName =\r\n      options.expandClassName !== undefined\r\n        ? options.expandClassName\r\n        : className + '-expand';\r\n\r\n    const collapseLabel =\r\n      options.collapseLabel !== undefined ? options.collapseLabel : '\\u203A';\r\n\r\n    const collapseClassName =\r\n      options.collapseClassName !== undefined\r\n        ? options.collapseClassName\r\n        : className + '-collapse';\r\n\r\n    if (typeof collapseLabel === 'string') {\r\n      /**\r\n       * @private\r\n       * @type {HTMLElement}\r\n       */\r\n      this.collapseLabel_ = document.createElement('span');\r\n      this.collapseLabel_.textContent = collapseLabel;\r\n      this.collapseLabel_.className = collapseClassName;\r\n    } else {\r\n      this.collapseLabel_ = collapseLabel;\r\n    }\r\n\r\n    const label = options.label !== undefined ? options.label : 'i';\r\n\r\n    if (typeof label === 'string') {\r\n      /**\r\n       * @private\r\n       * @type {HTMLElement}\r\n       */\r\n      this.label_ = document.createElement('span');\r\n      this.label_.textContent = label;\r\n      this.label_.className = expandClassName;\r\n    } else {\r\n      this.label_ = label;\r\n    }\r\n\r\n    const activeLabel =\r\n      this.collapsible_ && !this.collapsed_ ? this.collapseLabel_ : this.label_;\r\n\r\n    /**\r\n     * @private\r\n     * @type {HTMLElement}\r\n     */\r\n    this.toggleButton_ = document.createElement('button');\r\n    this.toggleButton_.setAttribute('type', 'button');\r\n    this.toggleButton_.setAttribute('aria-expanded', String(!this.collapsed_));\r\n    this.toggleButton_.title = tipLabel;\r\n    this.toggleButton_.appendChild(activeLabel);\r\n\r\n    this.toggleButton_.addEventListener(\r\n      EventType.CLICK,\r\n      this.handleClick_.bind(this),\r\n      false,\r\n    );\r\n\r\n    const cssClasses =\r\n      className +\r\n      ' ' +\r\n      CLASS_UNSELECTABLE +\r\n      ' ' +\r\n      CLASS_CONTROL +\r\n      (this.collapsed_ && this.collapsible_ ? ' ' + CLASS_COLLAPSED : '') +\r\n      (this.collapsible_ ? '' : ' ol-uncollapsible');\r\n    const element = this.element;\r\n    element.className = cssClasses;\r\n    element.appendChild(this.toggleButton_);\r\n    element.appendChild(this.ulElement_);\r\n\r\n    /**\r\n     * A list of currently rendered resolutions.\r\n     * @type {Array<string>}\r\n     * @private\r\n     */\r\n    this.renderedAttributions_ = [];\r\n\r\n    /**\r\n     * @private\r\n     * @type {boolean}\r\n     */\r\n    this.renderedVisible_ = true;\r\n  }\r\n\r\n  /**\r\n   * Collect a list of visible attributions and set the collapsible state.\r\n   * @param {import(\"../Map.js\").FrameState} frameState Frame state.\r\n   * @return {Array<string>} Attributions.\r\n   * @private\r\n   */\r\n  collectSourceAttributions_(frameState) {\r\n    const layers = this.getMap().getAllLayers();\r\n    const visibleAttributions = new Set(\r\n      layers.flatMap((layer) => layer.getAttributions(frameState)),\r\n    );\r\n    if (this.attributions_ !== undefined) {\r\n      Array.isArray(this.attributions_)\r\n        ? this.attributions_.forEach((item) => visibleAttributions.add(item))\r\n        : visibleAttributions.add(this.attributions_);\r\n    }\r\n\r\n    if (!this.overrideCollapsible_) {\r\n      const collapsible = !layers.some(\r\n        (layer) => layer.getSource()?.getAttributionsCollapsible() === false,\r\n      );\r\n      this.setCollapsible(collapsible);\r\n    }\r\n    return Array.from(visibleAttributions);\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {?import(\"../Map.js\").FrameState} frameState Frame state.\r\n   */\r\n  async updateElement_(frameState) {\r\n    if (!frameState) {\r\n      if (this.renderedVisible_) {\r\n        this.element.style.display = 'none';\r\n        this.renderedVisible_ = false;\r\n      }\r\n      return;\r\n    }\r\n\r\n    const attributions = await Promise.all(\r\n      this.collectSourceAttributions_(frameState).map((attribution) =>\r\n        toPromise(() => attribution),\r\n      ),\r\n    );\r\n\r\n    const visible = attributions.length > 0;\r\n    if (this.renderedVisible_ != visible) {\r\n      this.element.style.display = visible ? '' : 'none';\r\n      this.renderedVisible_ = visible;\r\n    }\r\n\r\n    if (equals(attributions, this.renderedAttributions_)) {\r\n      return;\r\n    }\r\n\r\n    removeChildren(this.ulElement_);\r\n\r\n    // append the attributions\r\n    for (let i = 0, ii = attributions.length; i < ii; ++i) {\r\n      const element = document.createElement('li');\r\n      element.innerHTML = attributions[i];\r\n      this.ulElement_.appendChild(element);\r\n    }\r\n\r\n    this.renderedAttributions_ = attributions;\r\n  }\r\n\r\n  /**\r\n   * @param {MouseEvent} event The event to handle\r\n   * @private\r\n   */\r\n  handleClick_(event) {\r\n    event.preventDefault();\r\n    this.handleToggle_();\r\n    this.userCollapsed_ = this.collapsed_;\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  handleToggle_() {\r\n    this.element.classList.toggle(CLASS_COLLAPSED);\r\n    if (this.collapsed_) {\r\n      replaceNode(this.collapseLabel_, this.label_);\r\n    } else {\r\n      replaceNode(this.label_, this.collapseLabel_);\r\n    }\r\n    this.collapsed_ = !this.collapsed_;\r\n    this.toggleButton_.setAttribute('aria-expanded', String(!this.collapsed_));\r\n  }\r\n\r\n  /**\r\n   * Return `true` if the attribution is collapsible, `false` otherwise.\r\n   * @return {boolean} True if the widget is collapsible.\r\n   * @api\r\n   */\r\n  getCollapsible() {\r\n    return this.collapsible_;\r\n  }\r\n\r\n  /**\r\n   * Set whether the attribution should be collapsible.\r\n   * @param {boolean} collapsible True if the widget is collapsible.\r\n   * @api\r\n   */\r\n  setCollapsible(collapsible) {\r\n    if (this.collapsible_ === collapsible) {\r\n      return;\r\n    }\r\n    this.collapsible_ = collapsible;\r\n    this.element.classList.toggle('ol-uncollapsible');\r\n    if (this.userCollapsed_) {\r\n      this.handleToggle_();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Collapse or expand the attribution according to the passed parameter. Will\r\n   * not do anything if the attribution isn't collapsible or if the current\r\n   * collapsed state is already the one requested.\r\n   * @param {boolean} collapsed True if the widget is collapsed.\r\n   * @api\r\n   */\r\n  setCollapsed(collapsed) {\r\n    this.userCollapsed_ = collapsed;\r\n    if (!this.collapsible_ || this.collapsed_ === collapsed) {\r\n      return;\r\n    }\r\n    this.handleToggle_();\r\n  }\r\n\r\n  /**\r\n   * Return `true` when the attribution is currently collapsed or `false`\r\n   * otherwise.\r\n   * @return {boolean} True if the widget is collapsed.\r\n   * @api\r\n   */\r\n  getCollapsed() {\r\n    return this.collapsed_;\r\n  }\r\n\r\n  /**\r\n   * Update the attribution element.\r\n   * @param {import(\"../MapEvent.js\").default} mapEvent Map event.\r\n   * @override\r\n   */\r\n  render(mapEvent) {\r\n    this.updateElement_(mapEvent.frameState);\r\n  }\r\n}\r\n\r\nexport default Attribution;\r\n","/**\r\n * @module ol/css\r\n */\r\n\r\n/**\r\n * @typedef {Object} FontParameters\r\n * @property {string} style Style.\r\n * @property {string} variant Variant.\r\n * @property {string} weight Weight.\r\n * @property {string} size Size.\r\n * @property {string} lineHeight LineHeight.\r\n * @property {string} family Family.\r\n * @property {Array<string>} families Families.\r\n */\r\n\r\n/**\r\n * The CSS class for hidden feature.\r\n *\r\n * @const\r\n * @type {string}\r\n */\r\nexport const CLASS_HIDDEN = 'ol-hidden';\r\n\r\n/**\r\n * The CSS class that we'll give the DOM elements to have them selectable.\r\n *\r\n * @const\r\n * @type {string}\r\n */\r\nexport const CLASS_SELECTABLE = 'ol-selectable';\r\n\r\n/**\r\n * The CSS class that we'll give the DOM elements to have them unselectable.\r\n *\r\n * @const\r\n * @type {string}\r\n */\r\nexport const CLASS_UNSELECTABLE = 'ol-unselectable';\r\n\r\n/**\r\n * The CSS class for unsupported feature.\r\n *\r\n * @const\r\n * @type {string}\r\n */\r\nexport const CLASS_UNSUPPORTED = 'ol-unsupported';\r\n\r\n/**\r\n * The CSS class for controls.\r\n *\r\n * @const\r\n * @type {string}\r\n */\r\nexport const CLASS_CONTROL = 'ol-control';\r\n\r\n/**\r\n * The CSS class that we'll give the DOM elements that are collapsed, i.e.\r\n * to those elements which usually can be expanded.\r\n *\r\n * @const\r\n * @type {string}\r\n */\r\nexport const CLASS_COLLAPSED = 'ol-collapsed';\r\n\r\n/**\r\n * From https://stackoverflow.com/questions/10135697/regex-to-parse-any-css-font\r\n * @type {RegExp}\r\n */\r\nconst fontRegEx = new RegExp(\r\n  [\r\n    '^\\\\s*(?=(?:(?:[-a-z]+\\\\s*){0,2}(italic|oblique))?)',\r\n    '(?=(?:(?:[-a-z]+\\\\s*){0,2}(small-caps))?)',\r\n    '(?=(?:(?:[-a-z]+\\\\s*){0,2}(bold(?:er)?|lighter|[1-9]00 ))?)',\r\n    '(?:(?:normal|\\\\1|\\\\2|\\\\3)\\\\s*){0,3}((?:xx?-)?',\r\n    '(?:small|large)|medium|smaller|larger|[\\\\.\\\\d]+(?:\\\\%|in|[cem]m|ex|p[ctx]))',\r\n    '(?:\\\\s*\\\\/\\\\s*(normal|[\\\\.\\\\d]+(?:\\\\%|in|[cem]m|ex|p[ctx])?))',\r\n    '?\\\\s*([-,\\\\\"\\\\\\'\\\\sa-z0-9]+?)\\\\s*$',\r\n  ].join(''),\r\n  'i',\r\n);\r\n/** @type {Array<'style'|'variant'|'weight'|'size'|'lineHeight'|'family'>} */\r\nconst fontRegExMatchIndex = [\r\n  'style',\r\n  'variant',\r\n  'weight',\r\n  'size',\r\n  'lineHeight',\r\n  'family',\r\n];\r\n\r\n/**\r\n * Get the list of font families from a font spec.  Note that this doesn't work\r\n * for font families that have commas in them.\r\n * @param {string} fontSpec The CSS font property.\r\n * @return {FontParameters|null} The font parameters (or null if the input spec is invalid).\r\n */\r\nexport const getFontParameters = function (fontSpec) {\r\n  const match = fontSpec.match(fontRegEx);\r\n  if (!match) {\r\n    return null;\r\n  }\r\n  const style = /** @type {FontParameters} */ ({\r\n    lineHeight: 'normal',\r\n    size: '1.2em',\r\n    style: 'normal',\r\n    weight: 'normal',\r\n    variant: 'normal',\r\n  });\r\n  for (let i = 0, ii = fontRegExMatchIndex.length; i < ii; ++i) {\r\n    const value = match[i + 1];\r\n    if (value !== undefined) {\r\n      style[fontRegExMatchIndex[i]] = value;\r\n    }\r\n  }\r\n  style.families = style.family.split(/,\\s?/);\r\n  return style;\r\n};\r\n","import {WORKER_OFFSCREEN_CANVAS} from './has.js';\r\n\r\n/**\r\n * @module ol/dom\r\n */\r\n\r\n//FIXME Move this function to the canvas module\r\n/**\r\n * Create an html canvas element and returns its 2d context.\r\n * @param {number} [width] Canvas width.\r\n * @param {number} [height] Canvas height.\r\n * @param {Array<HTMLCanvasElement>} [canvasPool] Canvas pool to take existing canvas from.\r\n * @param {CanvasRenderingContext2DSettings} [settings] CanvasRenderingContext2DSettings\r\n * @return {CanvasRenderingContext2D} The context.\r\n */\r\nexport function createCanvasContext2D(width, height, canvasPool, settings) {\r\n  /** @type {HTMLCanvasElement|OffscreenCanvas} */\r\n  let canvas;\r\n  if (canvasPool && canvasPool.length) {\r\n    canvas = /** @type {HTMLCanvasElement} */ (canvasPool.shift());\r\n  } else if (WORKER_OFFSCREEN_CANVAS) {\r\n    canvas = new OffscreenCanvas(width || 300, height || 300);\r\n  } else {\r\n    canvas = document.createElement('canvas');\r\n  }\r\n  if (width) {\r\n    canvas.width = width;\r\n  }\r\n  if (height) {\r\n    canvas.height = height;\r\n  }\r\n  //FIXME Allow OffscreenCanvasRenderingContext2D as return type\r\n  return /** @type {CanvasRenderingContext2D} */ (\r\n    canvas.getContext('2d', settings)\r\n  );\r\n}\r\n\r\n/** @type {CanvasRenderingContext2D} */\r\nlet sharedCanvasContext;\r\n\r\n/**\r\n * @return {CanvasRenderingContext2D} Shared canvas context.\r\n */\r\nexport function getSharedCanvasContext2D() {\r\n  if (!sharedCanvasContext) {\r\n    sharedCanvasContext = createCanvasContext2D(1, 1);\r\n  }\r\n  return sharedCanvasContext;\r\n}\r\n\r\n/**\r\n * Releases canvas memory to avoid exceeding memory limits in Safari.\r\n * See https://pqina.nl/blog/total-canvas-memory-use-exceeds-the-maximum-limit/\r\n * @param {CanvasRenderingContext2D} context Context.\r\n */\r\nexport function releaseCanvas(context) {\r\n  const canvas = context.canvas;\r\n  canvas.width = 1;\r\n  canvas.height = 1;\r\n  context.clearRect(0, 0, 1, 1);\r\n}\r\n\r\n/**\r\n * Get the current computed width for the given element including margin,\r\n * padding and border.\r\n * Equivalent to jQuery's `$(el).outerWidth(true)`.\r\n * @param {!HTMLElement} element Element.\r\n * @return {number} The width.\r\n */\r\nexport function outerWidth(element) {\r\n  let width = element.offsetWidth;\r\n  const style = getComputedStyle(element);\r\n  width += parseInt(style.marginLeft, 10) + parseInt(style.marginRight, 10);\r\n\r\n  return width;\r\n}\r\n\r\n/**\r\n * Get the current computed height for the given element including margin,\r\n * padding and border.\r\n * Equivalent to jQuery's `$(el).outerHeight(true)`.\r\n * @param {!HTMLElement} element Element.\r\n * @return {number} The height.\r\n */\r\nexport function outerHeight(element) {\r\n  let height = element.offsetHeight;\r\n  const style = getComputedStyle(element);\r\n  height += parseInt(style.marginTop, 10) + parseInt(style.marginBottom, 10);\r\n\r\n  return height;\r\n}\r\n\r\n/**\r\n * @param {Node} newNode Node to replace old node\r\n * @param {Node} oldNode The node to be replaced\r\n */\r\nexport function replaceNode(newNode, oldNode) {\r\n  const parent = oldNode.parentNode;\r\n  if (parent) {\r\n    parent.replaceChild(newNode, oldNode);\r\n  }\r\n}\r\n\r\n/**\r\n * @param {Node} node The node to remove the children from.\r\n */\r\nexport function removeChildren(node) {\r\n  while (node.lastChild) {\r\n    node.lastChild.remove();\r\n  }\r\n}\r\n\r\n/**\r\n * Transform the children of a parent node so they match the\r\n * provided list of children.  This function aims to efficiently\r\n * remove, add, and reorder child nodes while maintaining a simple\r\n * implementation (it is not guaranteed to minimize DOM operations).\r\n * @param {Node} node The parent node whose children need reworking.\r\n * @param {Array<Node>} children The desired children.\r\n */\r\nexport function replaceChildren(node, children) {\r\n  const oldChildren = node.childNodes;\r\n\r\n  for (let i = 0; true; ++i) {\r\n    const oldChild = oldChildren[i];\r\n    const newChild = children[i];\r\n\r\n    // check if our work is done\r\n    if (!oldChild && !newChild) {\r\n      break;\r\n    }\r\n\r\n    // check if children match\r\n    if (oldChild === newChild) {\r\n      continue;\r\n    }\r\n\r\n    // check if a new child needs to be added\r\n    if (!oldChild) {\r\n      node.appendChild(newChild);\r\n      continue;\r\n    }\r\n\r\n    // check if an old child needs to be removed\r\n    if (!newChild) {\r\n      node.removeChild(oldChild);\r\n      --i;\r\n      continue;\r\n    }\r\n\r\n    // reorder\r\n    node.insertBefore(newChild, oldChild);\r\n  }\r\n}\r\n","/**\r\n * @module ol/control/Control\r\n */\r\nimport MapEventType from '../MapEventType.js';\r\nimport BaseObject from '../Object.js';\r\nimport {listen, unlistenByKey} from '../events.js';\r\nimport {VOID} from '../functions.js';\r\n\r\n/**\r\n * @typedef {Object} Options\r\n * @property {HTMLElement} [element] The element is the control's\r\n * container element. This only needs to be specified if you're developing\r\n * a custom control.\r\n * @property {function(import(\"../MapEvent.js\").default):void} [render] Function called when\r\n * the control should be re-rendered. This is called in a `requestAnimationFrame`\r\n * callback.\r\n * @property {HTMLElement|string} [target] Specify a target if you want\r\n * the control to be rendered outside of the map's viewport.\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * A control is a visible widget with a DOM element in a fixed position on the\r\n * screen. They can involve user input (buttons), or be informational only;\r\n * the position is determined using CSS. By default these are placed in the\r\n * container with CSS class name `ol-overlaycontainer-stopevent`, but can use\r\n * any outside DOM element.\r\n *\r\n * This is the base class for controls. You can use it for simple custom\r\n * controls by creating the element with listeners, creating an instance:\r\n * ```js\r\n * const myControl = new Control({element: myElement});\r\n * ```\r\n * and then adding this to the map.\r\n *\r\n * The main advantage of having this as a control rather than a simple separate\r\n * DOM element is that preventing propagation is handled for you. Controls\r\n * will also be objects in a {@link module:ol/Collection~Collection}, so you can use their methods.\r\n *\r\n * You can also extend this base for your own control class. See\r\n * examples/custom-controls for an example of how to do this.\r\n *\r\n * @api\r\n */\r\nclass Control extends BaseObject {\r\n  /**\r\n   * @param {Options} options Control options.\r\n   */\r\n  constructor(options) {\r\n    super();\r\n\r\n    const element = options.element;\r\n    if (element && !options.target && !element.style.pointerEvents) {\r\n      element.style.pointerEvents = 'auto';\r\n    }\r\n\r\n    /**\r\n     * @protected\r\n     * @type {HTMLElement}\r\n     */\r\n    this.element = element ? element : null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {HTMLElement}\r\n     */\r\n    this.target_ = null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"../Map.js\").default|null}\r\n     */\r\n    this.map_ = null;\r\n\r\n    /**\r\n     * @protected\r\n     * @type {!Array<import(\"../events.js\").EventsKey>}\r\n     */\r\n    this.listenerKeys = [];\r\n\r\n    if (options.render) {\r\n      this.render = options.render;\r\n    }\r\n\r\n    if (options.target) {\r\n      this.setTarget(options.target);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Clean up.\r\n   * @override\r\n   */\r\n  disposeInternal() {\r\n    this.element?.remove();\r\n    super.disposeInternal();\r\n  }\r\n\r\n  /**\r\n   * Get the map associated with this control.\r\n   * @return {import(\"../Map.js\").default|null} Map.\r\n   * @api\r\n   */\r\n  getMap() {\r\n    return this.map_;\r\n  }\r\n\r\n  /**\r\n   * Remove the control from its current map and attach it to the new map.\r\n   * Pass `null` to just remove the control from the current map.\r\n   * Subclasses may set up event handlers to get notified about changes to\r\n   * the map here.\r\n   * @param {import(\"../Map.js\").default|null} map Map.\r\n   * @api\r\n   */\r\n  setMap(map) {\r\n    if (this.map_) {\r\n      this.element?.remove();\r\n    }\r\n    for (let i = 0, ii = this.listenerKeys.length; i < ii; ++i) {\r\n      unlistenByKey(this.listenerKeys[i]);\r\n    }\r\n    this.listenerKeys.length = 0;\r\n    this.map_ = map;\r\n    if (map) {\r\n      const target = this.target_ ?? map.getOverlayContainerStopEvent();\r\n      if (this.element) {\r\n        target.appendChild(this.element);\r\n      }\r\n      if (this.render !== VOID) {\r\n        this.listenerKeys.push(\r\n          listen(map, MapEventType.POSTRENDER, this.render, this),\r\n        );\r\n      }\r\n      map.render();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Renders the control.\r\n   * @param {import(\"../MapEvent.js\").default} mapEvent Map event.\r\n   * @api\r\n   */\r\n  render(mapEvent) {}\r\n\r\n  /**\r\n   * This function is used to set a target element for the control. It has no\r\n   * effect if it is called after the control has been added to the map (i.e.\r\n   * after `setMap` is called on the control). If no `target` is set in the\r\n   * options passed to the control constructor and if `setTarget` is not called\r\n   * then the control is added to the map's overlay container.\r\n   * @param {HTMLElement|string} target Target.\r\n   * @api\r\n   */\r\n  setTarget(target) {\r\n    this.target_ =\r\n      typeof target === 'string' ? document.getElementById(target) : target;\r\n  }\r\n}\r\n\r\nexport default Control;\r\n","/**\r\n * @module ol/control/Rotate\r\n */\r\nimport {CLASS_CONTROL, CLASS_HIDDEN, CLASS_UNSELECTABLE} from '../css.js';\r\nimport {easeOut} from '../easing.js';\r\nimport EventType from '../events/EventType.js';\r\nimport Control from './Control.js';\r\n\r\n/**\r\n * @typedef {Object} Options\r\n * @property {string} [className='ol-rotate'] CSS class name.\r\n * @property {string|HTMLElement} [label='⇧'] Text label to use for the rotate button.\r\n * Instead of text, also an element (e.g. a `span` element) can be used.\r\n * @property {string} [tipLabel='Reset rotation'] Text label to use for the rotate tip.\r\n * @property {string} [compassClassName='ol-compass'] CSS class name for the compass.\r\n * @property {number} [duration=250] Animation duration in milliseconds.\r\n * @property {boolean} [autoHide=true] Hide the control when rotation is 0.\r\n * @property {function(import(\"../MapEvent.js\").default):void} [render] Function called when the control should\r\n * be re-rendered. This is called in a `requestAnimationFrame` callback.\r\n * @property {function():void} [resetNorth] Function called when the control is clicked.\r\n * This will override the default `resetNorth`.\r\n * @property {HTMLElement|string} [target] Specify a target if you want the control to be\r\n * rendered outside of the map's viewport.\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * A button control to reset rotation to 0.\r\n * To style this control use css selector `.ol-rotate`. A `.ol-hidden` css\r\n * selector is added to the button when the rotation is 0.\r\n *\r\n * @api\r\n */\r\nclass Rotate extends Control {\r\n  /**\r\n   * @param {Options} [options] Rotate options.\r\n   */\r\n  constructor(options) {\r\n    options = options ? options : {};\r\n\r\n    super({\r\n      element: document.createElement('div'),\r\n      render: options.render,\r\n      target: options.target,\r\n    });\r\n\r\n    const className =\r\n      options.className !== undefined ? options.className : 'ol-rotate';\r\n\r\n    const label = options.label !== undefined ? options.label : '\\u21E7';\r\n\r\n    const compassClassName =\r\n      options.compassClassName !== undefined\r\n        ? options.compassClassName\r\n        : 'ol-compass';\r\n\r\n    /**\r\n     * @type {HTMLElement}\r\n     * @private\r\n     */\r\n    this.label_ = null;\r\n\r\n    if (typeof label === 'string') {\r\n      this.label_ = document.createElement('span');\r\n      this.label_.className = compassClassName;\r\n      this.label_.textContent = label;\r\n    } else {\r\n      this.label_ = label;\r\n      this.label_.classList.add(compassClassName);\r\n    }\r\n\r\n    const tipLabel = options.tipLabel ? options.tipLabel : 'Reset rotation';\r\n\r\n    const button = document.createElement('button');\r\n    button.className = className + '-reset';\r\n    button.setAttribute('type', 'button');\r\n    button.title = tipLabel;\r\n    button.appendChild(this.label_);\r\n\r\n    button.addEventListener(\r\n      EventType.CLICK,\r\n      this.handleClick_.bind(this),\r\n      false,\r\n    );\r\n\r\n    const cssClasses =\r\n      className + ' ' + CLASS_UNSELECTABLE + ' ' + CLASS_CONTROL;\r\n    const element = this.element;\r\n    element.className = cssClasses;\r\n    element.appendChild(button);\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    this.callResetNorth_ = options.resetNorth ? options.resetNorth : undefined;\r\n\r\n    /**\r\n     * @type {number}\r\n     * @private\r\n     */\r\n    this.duration_ = options.duration !== undefined ? options.duration : 250;\r\n\r\n    /**\r\n     * @type {boolean}\r\n     * @private\r\n     */\r\n    this.autoHide_ = options.autoHide !== undefined ? options.autoHide : true;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number|undefined}\r\n     */\r\n    this.rotation_ = undefined;\r\n\r\n    if (this.autoHide_) {\r\n      this.element.classList.add(CLASS_HIDDEN);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {MouseEvent} event The event to handle\r\n   * @private\r\n   */\r\n  handleClick_(event) {\r\n    event.preventDefault();\r\n    if (this.callResetNorth_ !== undefined) {\r\n      this.callResetNorth_();\r\n    } else {\r\n      this.resetNorth_();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  resetNorth_() {\r\n    const map = this.getMap();\r\n    const view = map.getView();\r\n    if (!view) {\r\n      // the map does not have a view, so we can't act\r\n      // upon it\r\n      return;\r\n    }\r\n    const rotation = view.getRotation();\r\n    if (rotation !== undefined) {\r\n      if (this.duration_ > 0 && rotation % (2 * Math.PI) !== 0) {\r\n        view.animate({\r\n          rotation: 0,\r\n          duration: this.duration_,\r\n          easing: easeOut,\r\n        });\r\n      } else {\r\n        view.setRotation(0);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Update the rotate control element.\r\n   * @param {import(\"../MapEvent.js\").default} mapEvent Map event.\r\n   * @override\r\n   */\r\n  render(mapEvent) {\r\n    const frameState = mapEvent.frameState;\r\n    if (!frameState) {\r\n      return;\r\n    }\r\n    const rotation = frameState.viewState.rotation;\r\n    if (rotation != this.rotation_) {\r\n      const transform = 'rotate(' + rotation + 'rad)';\r\n      if (this.autoHide_) {\r\n        const contains = this.element.classList.contains(CLASS_HIDDEN);\r\n        if (!contains && rotation === 0) {\r\n          this.element.classList.add(CLASS_HIDDEN);\r\n        } else if (contains && rotation !== 0) {\r\n          this.element.classList.remove(CLASS_HIDDEN);\r\n        }\r\n      }\r\n      this.label_.style.transform = transform;\r\n    }\r\n    this.rotation_ = rotation;\r\n  }\r\n}\r\n\r\nexport default Rotate;\r\n","/**\r\n * @module ol/control/Zoom\r\n */\r\nimport {CLASS_CONTROL, CLASS_UNSELECTABLE} from '../css.js';\r\nimport {easeOut} from '../easing.js';\r\nimport EventType from '../events/EventType.js';\r\nimport Control from './Control.js';\r\n\r\n/**\r\n * @typedef {Object} Options\r\n * @property {number} [duration=250] Animation duration in milliseconds.\r\n * @property {string} [className='ol-zoom'] CSS class name.\r\n * @property {string} [zoomInClassName=className + '-in'] CSS class name for the zoom-in button.\r\n * @property {string} [zoomOutClassName=className + '-out'] CSS class name for the zoom-out button.\r\n * @property {string|HTMLElement} [zoomInLabel='+'] Text label to use for the zoom-in\r\n * button. Instead of text, also an element (e.g. a `span` element) can be used.\r\n * @property {string|HTMLElement} [zoomOutLabel='–'] Text label to use for the zoom-out button.\r\n * Instead of text, also an element (e.g. a `span` element) can be used.\r\n * @property {string} [zoomInTipLabel='Zoom in'] Text label to use for the button tip.\r\n * @property {string} [zoomOutTipLabel='Zoom out'] Text label to use for the button tip.\r\n * @property {number} [delta=1] The zoom delta applied on each click.\r\n * @property {HTMLElement|string} [target] Specify a target if you want the control to be\r\n * rendered outside of the map's viewport.\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * A control with 2 buttons, one for zoom in and one for zoom out.\r\n * This control is one of the default controls of a map. To style this control\r\n * use css selectors `.ol-zoom-in` and `.ol-zoom-out`.\r\n *\r\n * @api\r\n */\r\nclass Zoom extends Control {\r\n  /**\r\n   * @param {Options} [options] Zoom options.\r\n   */\r\n  constructor(options) {\r\n    options = options ? options : {};\r\n\r\n    super({\r\n      element: document.createElement('div'),\r\n      target: options.target,\r\n    });\r\n\r\n    const className =\r\n      options.className !== undefined ? options.className : 'ol-zoom';\r\n\r\n    const delta = options.delta !== undefined ? options.delta : 1;\r\n\r\n    const zoomInClassName =\r\n      options.zoomInClassName !== undefined\r\n        ? options.zoomInClassName\r\n        : className + '-in';\r\n\r\n    const zoomOutClassName =\r\n      options.zoomOutClassName !== undefined\r\n        ? options.zoomOutClassName\r\n        : className + '-out';\r\n\r\n    const zoomInLabel =\r\n      options.zoomInLabel !== undefined ? options.zoomInLabel : '+';\r\n    const zoomOutLabel =\r\n      options.zoomOutLabel !== undefined ? options.zoomOutLabel : '\\u2013';\r\n\r\n    const zoomInTipLabel =\r\n      options.zoomInTipLabel !== undefined ? options.zoomInTipLabel : 'Zoom in';\r\n    const zoomOutTipLabel =\r\n      options.zoomOutTipLabel !== undefined\r\n        ? options.zoomOutTipLabel\r\n        : 'Zoom out';\r\n\r\n    const inElement = document.createElement('button');\r\n    inElement.className = zoomInClassName;\r\n    inElement.setAttribute('type', 'button');\r\n    inElement.title = zoomInTipLabel;\r\n    inElement.appendChild(\r\n      typeof zoomInLabel === 'string'\r\n        ? document.createTextNode(zoomInLabel)\r\n        : zoomInLabel,\r\n    );\r\n\r\n    inElement.addEventListener(\r\n      EventType.CLICK,\r\n      this.handleClick_.bind(this, delta),\r\n      false,\r\n    );\r\n\r\n    const outElement = document.createElement('button');\r\n    outElement.className = zoomOutClassName;\r\n    outElement.setAttribute('type', 'button');\r\n    outElement.title = zoomOutTipLabel;\r\n    outElement.appendChild(\r\n      typeof zoomOutLabel === 'string'\r\n        ? document.createTextNode(zoomOutLabel)\r\n        : zoomOutLabel,\r\n    );\r\n\r\n    outElement.addEventListener(\r\n      EventType.CLICK,\r\n      this.handleClick_.bind(this, -delta),\r\n      false,\r\n    );\r\n\r\n    const cssClasses =\r\n      className + ' ' + CLASS_UNSELECTABLE + ' ' + CLASS_CONTROL;\r\n    const element = this.element;\r\n    element.className = cssClasses;\r\n    element.appendChild(inElement);\r\n    element.appendChild(outElement);\r\n\r\n    /**\r\n     * @type {number}\r\n     * @private\r\n     */\r\n    this.duration_ = options.duration !== undefined ? options.duration : 250;\r\n  }\r\n\r\n  /**\r\n   * @param {number} delta Zoom delta.\r\n   * @param {MouseEvent} event The event to handle\r\n   * @private\r\n   */\r\n  handleClick_(delta, event) {\r\n    event.preventDefault();\r\n    this.zoomByDelta_(delta);\r\n  }\r\n\r\n  /**\r\n   * @param {number} delta Zoom delta.\r\n   * @private\r\n   */\r\n  zoomByDelta_(delta) {\r\n    const map = this.getMap();\r\n    const view = map.getView();\r\n    if (!view) {\r\n      // the map does not have a view, so we can't act\r\n      // upon it\r\n      return;\r\n    }\r\n    const currentZoom = view.getZoom();\r\n    if (currentZoom !== undefined) {\r\n      const newZoom = view.getConstrainedZoom(currentZoom + delta);\r\n      if (this.duration_ > 0) {\r\n        if (view.getAnimating()) {\r\n          view.cancelAnimations();\r\n        }\r\n        view.animate({\r\n          zoom: newZoom,\r\n          duration: this.duration_,\r\n          easing: easeOut,\r\n        });\r\n      } else {\r\n        view.setZoom(newZoom);\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport default Zoom;\r\n","/**\r\n * @module ol/interaction/defaults\r\n */\r\nimport Collection from '../Collection.js';\r\nimport Kinetic from '../Kinetic.js';\r\nimport DoubleClickZoom from './DoubleClickZoom.js';\r\nimport DragPan from './DragPan.js';\r\nimport DragRotate from './DragRotate.js';\r\nimport DragZoom from './DragZoom.js';\r\nimport KeyboardPan from './KeyboardPan.js';\r\nimport KeyboardZoom from './KeyboardZoom.js';\r\nimport MouseWheelZoom from './MouseWheelZoom.js';\r\nimport PinchRotate from './PinchRotate.js';\r\nimport PinchZoom from './PinchZoom.js';\r\n\r\n/**\r\n * @typedef {Object} DefaultsOptions\r\n * @property {boolean} [altShiftDragRotate=true] Whether Alt-Shift-drag rotate is\r\n * desired.\r\n * @property {boolean} [onFocusOnly=false] Interact only when the map has the\r\n * focus. This affects the `MouseWheelZoom` and `DragPan` interactions and is\r\n * useful when page scroll is desired for maps that do not have the browser's\r\n * focus.\r\n * @property {boolean} [doubleClickZoom=true] Whether double click zoom is\r\n * desired.\r\n * @property {boolean} [keyboard=true] Whether keyboard interaction is desired.\r\n * @property {boolean} [mouseWheelZoom=true] Whether mousewheel zoom is desired.\r\n * @property {boolean} [shiftDragZoom=true] Whether Shift-drag zoom is desired.\r\n * @property {boolean} [dragPan=true] Whether drag pan is desired.\r\n * @property {boolean} [pinchRotate=true] Whether pinch rotate is desired.\r\n * @property {boolean} [pinchZoom=true] Whether pinch zoom is desired.\r\n * @property {number} [zoomDelta] Zoom level delta when using keyboard or double click zoom.\r\n * @property {number} [zoomDuration] Duration of the zoom animation in\r\n * milliseconds.\r\n */\r\n\r\n/**\r\n * Set of interactions included in maps by default. Specific interactions can be\r\n * excluded by setting the appropriate option to false in the constructor\r\n * options, but the order of the interactions is fixed.  If you want to specify\r\n * a different order for interactions, you will need to create your own\r\n * {@link module:ol/interaction/Interaction~Interaction} instances and insert\r\n * them into a {@link module:ol/Collection~Collection} in the order you want\r\n * before creating your {@link module:ol/Map~Map} instance. Changing the order can\r\n * be of interest if the event propagation needs to be stopped at a point.\r\n * The default set of interactions, in sequence, is:\r\n * {@link module:ol/interaction/DragRotate~DragRotate}\r\n * {@link module:ol/interaction/DoubleClickZoom~DoubleClickZoom}\r\n * {@link module:ol/interaction/DragPan~DragPan}\r\n * {@link module:ol/interaction/PinchRotate~PinchRotate}\r\n * {@link module:ol/interaction/PinchZoom~PinchZoom}\r\n * {@link module:ol/interaction/KeyboardPan~KeyboardPan}\r\n * {@link module:ol/interaction/KeyboardZoom~KeyboardZoom}\r\n * {@link module:ol/interaction/MouseWheelZoom~MouseWheelZoom}\r\n * {@link module:ol/interaction/DragZoom~DragZoom}\r\n *\r\n * @param {DefaultsOptions} [options] Defaults options.\r\n * @return {Collection<import(\"./Interaction.js\").default>}\r\n * A collection of interactions to be used with the {@link module:ol/Map~Map}\r\n * constructor's `interactions` option.\r\n * @api\r\n */\r\nexport function defaults(options) {\r\n  options = options ? options : {};\r\n\r\n  /** @type {Collection<import(\"./Interaction.js\").default>} */\r\n  const interactions = new Collection();\r\n\r\n  const kinetic = new Kinetic(-0.005, 0.05, 100);\r\n\r\n  const altShiftDragRotate =\r\n    options.altShiftDragRotate !== undefined\r\n      ? options.altShiftDragRotate\r\n      : true;\r\n  if (altShiftDragRotate) {\r\n    interactions.push(new DragRotate());\r\n  }\r\n\r\n  const doubleClickZoom =\r\n    options.doubleClickZoom !== undefined ? options.doubleClickZoom : true;\r\n  if (doubleClickZoom) {\r\n    interactions.push(\r\n      new DoubleClickZoom({\r\n        delta: options.zoomDelta,\r\n        duration: options.zoomDuration,\r\n      }),\r\n    );\r\n  }\r\n\r\n  const dragPan = options.dragPan !== undefined ? options.dragPan : true;\r\n  if (dragPan) {\r\n    interactions.push(\r\n      new DragPan({\r\n        onFocusOnly: options.onFocusOnly,\r\n        kinetic: kinetic,\r\n      }),\r\n    );\r\n  }\r\n\r\n  const pinchRotate =\r\n    options.pinchRotate !== undefined ? options.pinchRotate : true;\r\n  if (pinchRotate) {\r\n    interactions.push(new PinchRotate());\r\n  }\r\n\r\n  const pinchZoom = options.pinchZoom !== undefined ? options.pinchZoom : true;\r\n  if (pinchZoom) {\r\n    interactions.push(\r\n      new PinchZoom({\r\n        duration: options.zoomDuration,\r\n      }),\r\n    );\r\n  }\r\n\r\n  const keyboard = options.keyboard !== undefined ? options.keyboard : true;\r\n  if (keyboard) {\r\n    interactions.push(new KeyboardPan());\r\n    interactions.push(\r\n      new KeyboardZoom({\r\n        delta: options.zoomDelta,\r\n        duration: options.zoomDuration,\r\n      }),\r\n    );\r\n  }\r\n\r\n  const mouseWheelZoom =\r\n    options.mouseWheelZoom !== undefined ? options.mouseWheelZoom : true;\r\n  if (mouseWheelZoom) {\r\n    interactions.push(\r\n      new MouseWheelZoom({\r\n        onFocusOnly: options.onFocusOnly,\r\n        duration: options.zoomDuration,\r\n      }),\r\n    );\r\n  }\r\n\r\n  const shiftDragZoom =\r\n    options.shiftDragZoom !== undefined ? options.shiftDragZoom : true;\r\n  if (shiftDragZoom) {\r\n    interactions.push(\r\n      new DragZoom({\r\n        duration: options.zoomDuration,\r\n      }),\r\n    );\r\n  }\r\n\r\n  return interactions;\r\n}\r\n","/**\r\n * @module ol/Kinetic\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * Implementation of inertial deceleration for map movement.\r\n *\r\n * @api\r\n */\r\nclass Kinetic {\r\n  /**\r\n   * @param {number} decay Rate of decay (must be negative).\r\n   * @param {number} minVelocity Minimum velocity (pixels/millisecond).\r\n   * @param {number} delay Delay to consider to calculate the kinetic\r\n   *     initial values (milliseconds).\r\n   */\r\n  constructor(decay, minVelocity, delay) {\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.decay_ = decay;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.minVelocity_ = minVelocity;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.delay_ = delay;\r\n\r\n    /**\r\n     * @private\r\n     * @type {Array<number>}\r\n     */\r\n    this.points_ = [];\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.angle_ = 0;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.initialVelocity_ = 0;\r\n  }\r\n\r\n  /**\r\n   * FIXME empty description for jsdoc\r\n   */\r\n  begin() {\r\n    this.points_.length = 0;\r\n    this.angle_ = 0;\r\n    this.initialVelocity_ = 0;\r\n  }\r\n\r\n  /**\r\n   * @param {number} x X.\r\n   * @param {number} y Y.\r\n   */\r\n  update(x, y) {\r\n    this.points_.push(x, y, Date.now());\r\n  }\r\n\r\n  /**\r\n   * @return {boolean} Whether we should do kinetic animation.\r\n   */\r\n  end() {\r\n    if (this.points_.length < 6) {\r\n      // at least 2 points are required (i.e. there must be at least 6 elements\r\n      // in the array)\r\n      return false;\r\n    }\r\n    const delay = Date.now() - this.delay_;\r\n    const lastIndex = this.points_.length - 3;\r\n    if (this.points_[lastIndex + 2] < delay) {\r\n      // the last tracked point is too old, which means that the user stopped\r\n      // panning before releasing the map\r\n      return false;\r\n    }\r\n\r\n    // get the first point which still falls into the delay time\r\n    let firstIndex = lastIndex - 3;\r\n    while (firstIndex > 0 && this.points_[firstIndex + 2] > delay) {\r\n      firstIndex -= 3;\r\n    }\r\n\r\n    const duration = this.points_[lastIndex + 2] - this.points_[firstIndex + 2];\r\n    // we don't want a duration of 0 (divide by zero)\r\n    // we also make sure the user panned for a duration of at least one frame\r\n    // (1/60s) to compute sane displacement values\r\n    if (duration < 1000 / 60) {\r\n      return false;\r\n    }\r\n\r\n    const dx = this.points_[lastIndex] - this.points_[firstIndex];\r\n    const dy = this.points_[lastIndex + 1] - this.points_[firstIndex + 1];\r\n    this.angle_ = Math.atan2(dy, dx);\r\n    this.initialVelocity_ = Math.sqrt(dx * dx + dy * dy) / duration;\r\n    return this.initialVelocity_ > this.minVelocity_;\r\n  }\r\n\r\n  /**\r\n   * @return {number} Total distance travelled (pixels).\r\n   */\r\n  getDistance() {\r\n    return (this.minVelocity_ - this.initialVelocity_) / this.decay_;\r\n  }\r\n\r\n  /**\r\n   * @return {number} Angle of the kinetic panning animation (radians).\r\n   */\r\n  getAngle() {\r\n    return this.angle_;\r\n  }\r\n}\r\n\r\nexport default Kinetic;\r\n","/**\r\n * @module ol/interaction/DoubleClickZoom\r\n */\r\nimport MapBrowserEventType from '../MapBrowserEventType.js';\r\nimport Interaction, {zoomByDelta} from './Interaction.js';\r\n\r\n/**\r\n * @typedef {Object} Options\r\n * @property {number} [duration=250] Animation duration in milliseconds.\r\n * @property {number} [delta=1] The zoom delta applied on each double click.\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * Allows the user to zoom by double-clicking on the map.\r\n * @api\r\n */\r\nclass DoubleClickZoom extends Interaction {\r\n  /**\r\n   * @param {Options} [options] Options.\r\n   */\r\n  constructor(options) {\r\n    super();\r\n\r\n    options = options ? options : {};\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.delta_ = options.delta ? options.delta : 1;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.duration_ = options.duration !== undefined ? options.duration : 250;\r\n  }\r\n\r\n  /**\r\n   * Handles the {@link module:ol/MapBrowserEvent~MapBrowserEvent map browser event} (if it was a\r\n   * doubleclick) and eventually zooms the map.\r\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\r\n   * @return {boolean} `false` to stop event propagation.\r\n   * @override\r\n   */\r\n  handleEvent(mapBrowserEvent) {\r\n    let stopEvent = false;\r\n    if (mapBrowserEvent.type == MapBrowserEventType.DBLCLICK) {\r\n      const browserEvent = /** @type {MouseEvent} */ (\r\n        mapBrowserEvent.originalEvent\r\n      );\r\n      const map = mapBrowserEvent.map;\r\n      const anchor = mapBrowserEvent.coordinate;\r\n      const delta = browserEvent.shiftKey ? -this.delta_ : this.delta_;\r\n      const view = map.getView();\r\n      zoomByDelta(view, delta, anchor, this.duration_);\r\n      browserEvent.preventDefault();\r\n      stopEvent = true;\r\n    }\r\n    return !stopEvent;\r\n  }\r\n}\r\n\r\nexport default DoubleClickZoom;\r\n","/**\r\n * @module ol/interaction/Interaction\r\n */\r\nimport BaseObject from '../Object.js';\r\nimport {easeOut, linear} from '../easing.js';\r\nimport InteractionProperty from './Property.js';\r\n\r\n/***\r\n * @template Return\r\n * @typedef {import(\"../Observable\").OnSignature<import(\"../Observable\").EventTypes, import(\"../events/Event.js\").default, Return> &\r\n *   import(\"../Observable\").OnSignature<import(\"../ObjectEventType\").Types|\r\n *     'change:active', import(\"../Object\").ObjectEvent, Return> &\r\n *   import(\"../Observable\").CombinedOnSignature<import(\"../Observable\").EventTypes|import(\"../ObjectEventType\").Types|\r\n *     'change:active', Return>} InteractionOnSignature\r\n */\r\n\r\n/**\r\n * Object literal with config options for interactions.\r\n * @typedef {Object} InteractionOptions\r\n * @property {function(import(\"../MapBrowserEvent.js\").default):boolean} [handleEvent]\r\n * Method called by the map to notify the interaction that a browser event was\r\n * dispatched to the map. If the function returns a falsy value, propagation of\r\n * the event to other interactions in the map's interactions chain will be\r\n * prevented (this includes functions with no explicit return). The interactions\r\n * are traversed in reverse order of the interactions collection of the map.\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * Abstract base class; normally only used for creating subclasses and not\r\n * instantiated in apps.\r\n * User actions that change the state of the map. Some are similar to controls,\r\n * but are not associated with a DOM element.\r\n * For example, {@link module:ol/interaction/KeyboardZoom~KeyboardZoom} is\r\n * functionally the same as {@link module:ol/control/Zoom~Zoom}, but triggered\r\n * by a keyboard event not a button element event.\r\n * Although interactions do not have a DOM element, some of them do render\r\n * vectors and so are visible on the screen.\r\n * @api\r\n */\r\nclass Interaction extends BaseObject {\r\n  /**\r\n   * @param {InteractionOptions} [options] Options.\r\n   */\r\n  constructor(options) {\r\n    super();\r\n\r\n    /***\r\n     * @type {InteractionOnSignature<import(\"../events\").EventsKey>}\r\n     */\r\n    this.on;\r\n\r\n    /***\r\n     * @type {InteractionOnSignature<import(\"../events\").EventsKey>}\r\n     */\r\n    this.once;\r\n\r\n    /***\r\n     * @type {InteractionOnSignature<void>}\r\n     */\r\n    this.un;\r\n\r\n    if (options && options.handleEvent) {\r\n      this.handleEvent = options.handleEvent;\r\n    }\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"../Map.js\").default|null}\r\n     */\r\n    this.map_ = null;\r\n\r\n    this.setActive(true);\r\n  }\r\n\r\n  /**\r\n   * Return whether the interaction is currently active.\r\n   * @return {boolean} `true` if the interaction is active, `false` otherwise.\r\n   * @observable\r\n   * @api\r\n   */\r\n  getActive() {\r\n    return /** @type {boolean} */ (this.get(InteractionProperty.ACTIVE));\r\n  }\r\n\r\n  /**\r\n   * Get the map associated with this interaction.\r\n   * @return {import(\"../Map.js\").default|null} Map.\r\n   * @api\r\n   */\r\n  getMap() {\r\n    return this.map_;\r\n  }\r\n\r\n  /**\r\n   * Handles the {@link module:ol/MapBrowserEvent~MapBrowserEvent map browser event}.\r\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\r\n   * @return {boolean} `false` to stop event propagation.\r\n   * @api\r\n   */\r\n  handleEvent(mapBrowserEvent) {\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Activate or deactivate the interaction.\r\n   * @param {boolean} active Active.\r\n   * @observable\r\n   * @api\r\n   */\r\n  setActive(active) {\r\n    this.set(InteractionProperty.ACTIVE, active);\r\n  }\r\n\r\n  /**\r\n   * Remove the interaction from its current map and attach it to the new map.\r\n   * Subclasses may set up event handlers to get notified about changes to\r\n   * the map here.\r\n   * @param {import(\"../Map.js\").default|null} map Map.\r\n   */\r\n  setMap(map) {\r\n    this.map_ = map;\r\n  }\r\n}\r\n\r\n/**\r\n * @param {import(\"../View.js\").default} view View.\r\n * @param {import(\"../coordinate.js\").Coordinate} delta Delta.\r\n * @param {number} [duration] Duration.\r\n */\r\nexport function pan(view, delta, duration) {\r\n  const currentCenter = view.getCenterInternal();\r\n  if (currentCenter) {\r\n    const center = [currentCenter[0] + delta[0], currentCenter[1] + delta[1]];\r\n    view.animateInternal({\r\n      duration: duration !== undefined ? duration : 250,\r\n      easing: linear,\r\n      center: view.getConstrainedCenter(center),\r\n    });\r\n  }\r\n}\r\n\r\n/**\r\n * @param {import(\"../View.js\").default} view View.\r\n * @param {number} delta Delta from previous zoom level.\r\n * @param {import(\"../coordinate.js\").Coordinate} [anchor] Anchor coordinate in the user projection.\r\n * @param {number} [duration] Duration.\r\n */\r\nexport function zoomByDelta(view, delta, anchor, duration) {\r\n  const currentZoom = view.getZoom();\r\n\r\n  if (currentZoom === undefined) {\r\n    return;\r\n  }\r\n\r\n  const newZoom = view.getConstrainedZoom(currentZoom + delta);\r\n  const newResolution = view.getResolutionForZoom(newZoom);\r\n\r\n  if (view.getAnimating()) {\r\n    view.cancelAnimations();\r\n  }\r\n  view.animate({\r\n    resolution: newResolution,\r\n    anchor: anchor,\r\n    duration: duration !== undefined ? duration : 250,\r\n    easing: easeOut,\r\n  });\r\n}\r\n\r\nexport default Interaction;\r\n","/**\r\n * @module ol/interaction/Property\r\n */\r\n\r\n/**\r\n * @enum {string}\r\n */\r\nexport default {\r\n  ACTIVE: 'active',\r\n};\r\n","/**\r\n * @module ol/interaction/DragPan\r\n */\r\nimport {\r\n  rotate as rotateCoordinate,\r\n  scale as scaleCoordinate,\r\n} from '../coordinate.js';\r\nimport {easeOut} from '../easing.js';\r\nimport {\r\n  all,\r\n  focusWithTabindex,\r\n  noModifierKeys,\r\n  primaryAction,\r\n} from '../events/condition.js';\r\nimport {FALSE} from '../functions.js';\r\nimport PointerInteraction, {\r\n  centroid as centroidFromPointers,\r\n} from './Pointer.js';\r\n\r\n/**\r\n * @typedef {Object} Options\r\n * @property {import(\"../events/condition.js\").Condition} [condition] A function that takes a {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a boolean\r\n * to indicate whether that event should be handled.\r\n * Default is {@link module:ol/events/condition.noModifierKeys} and {@link module:ol/events/condition.primaryAction}.\r\n * @property {boolean} [onFocusOnly=false] When the map's target has a `tabindex` attribute set,\r\n * the interaction will only handle events when the map has the focus.\r\n * @property {import(\"../Kinetic.js\").default} [kinetic] Kinetic inertia to apply to the pan.\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * Allows the user to pan the map by dragging the map.\r\n * @api\r\n */\r\nclass DragPan extends PointerInteraction {\r\n  /**\r\n   * @param {Options} [options] Options.\r\n   */\r\n  constructor(options) {\r\n    super({\r\n      stopDown: FALSE,\r\n    });\r\n\r\n    options = options ? options : {};\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"../Kinetic.js\").default|undefined}\r\n     */\r\n    this.kinetic_ = options.kinetic;\r\n\r\n    /**\r\n     * @type {import(\"../pixel.js\").Pixel}\r\n     */\r\n    this.lastCentroid = null;\r\n\r\n    /**\r\n     * @type {number}\r\n     * @private\r\n     */\r\n    this.lastPointersCount_;\r\n\r\n    /**\r\n     * @type {boolean}\r\n     * @private\r\n     */\r\n    this.panning_ = false;\r\n\r\n    const condition = options.condition\r\n      ? options.condition\r\n      : all(noModifierKeys, primaryAction);\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"../events/condition.js\").Condition}\r\n     */\r\n    this.condition_ = options.onFocusOnly\r\n      ? all(focusWithTabindex, condition)\r\n      : condition;\r\n\r\n    /**\r\n     * @private\r\n     * @type {boolean}\r\n     */\r\n    this.noKinetic_ = false;\r\n  }\r\n\r\n  /**\r\n   * Handle pointer drag events.\r\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\r\n   * @override\r\n   */\r\n  handleDragEvent(mapBrowserEvent) {\r\n    const map = mapBrowserEvent.map;\r\n    if (!this.panning_) {\r\n      this.panning_ = true;\r\n      map.getView().beginInteraction();\r\n    }\r\n    const targetPointers = this.targetPointers;\r\n    const centroid = map.getEventPixel(centroidFromPointers(targetPointers));\r\n    if (targetPointers.length == this.lastPointersCount_) {\r\n      if (this.kinetic_) {\r\n        this.kinetic_.update(centroid[0], centroid[1]);\r\n      }\r\n      if (this.lastCentroid) {\r\n        const delta = [\r\n          this.lastCentroid[0] - centroid[0],\r\n          centroid[1] - this.lastCentroid[1],\r\n        ];\r\n        const map = mapBrowserEvent.map;\r\n        const view = map.getView();\r\n        scaleCoordinate(delta, view.getResolution());\r\n        rotateCoordinate(delta, view.getRotation());\r\n        view.adjustCenterInternal(delta);\r\n      }\r\n    } else if (this.kinetic_) {\r\n      // reset so we don't overestimate the kinetic energy after\r\n      // after one finger down, tiny drag, second finger down\r\n      this.kinetic_.begin();\r\n    }\r\n    this.lastCentroid = centroid;\r\n    this.lastPointersCount_ = targetPointers.length;\r\n    mapBrowserEvent.originalEvent.preventDefault();\r\n  }\r\n\r\n  /**\r\n   * Handle pointer up events.\r\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\r\n   * @return {boolean} If the event was consumed.\r\n   * @override\r\n   */\r\n  handleUpEvent(mapBrowserEvent) {\r\n    const map = mapBrowserEvent.map;\r\n    const view = map.getView();\r\n    if (this.targetPointers.length === 0) {\r\n      if (!this.noKinetic_ && this.kinetic_ && this.kinetic_.end()) {\r\n        const distance = this.kinetic_.getDistance();\r\n        const angle = this.kinetic_.getAngle();\r\n        const center = view.getCenterInternal();\r\n        const centerpx = map.getPixelFromCoordinateInternal(center);\r\n        const dest = map.getCoordinateFromPixelInternal([\r\n          centerpx[0] - distance * Math.cos(angle),\r\n          centerpx[1] - distance * Math.sin(angle),\r\n        ]);\r\n        view.animateInternal({\r\n          center: view.getConstrainedCenter(dest),\r\n          duration: 500,\r\n          easing: easeOut,\r\n        });\r\n      }\r\n      if (this.panning_) {\r\n        this.panning_ = false;\r\n        view.endInteraction();\r\n      }\r\n      return false;\r\n    }\r\n    if (this.kinetic_) {\r\n      // reset so we don't overestimate the kinetic energy after\r\n      // after one finger up, tiny drag, second finger up\r\n      this.kinetic_.begin();\r\n    }\r\n    this.lastCentroid = null;\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Handle pointer down events.\r\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\r\n   * @return {boolean} If the event was consumed.\r\n   * @override\r\n   */\r\n  handleDownEvent(mapBrowserEvent) {\r\n    if (this.targetPointers.length > 0 && this.condition_(mapBrowserEvent)) {\r\n      const map = mapBrowserEvent.map;\r\n      const view = map.getView();\r\n      this.lastCentroid = null;\r\n      // stop any current animation\r\n      if (view.getAnimating()) {\r\n        view.cancelAnimations();\r\n      }\r\n      if (this.kinetic_) {\r\n        this.kinetic_.begin();\r\n      }\r\n      // No kinetic as soon as more than one pointer on the screen is\r\n      // detected. This is to prevent nasty pans after pinch.\r\n      this.noKinetic_ = this.targetPointers.length > 1;\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n}\r\n\r\nexport default DragPan;\r\n","/**\r\n * @module ol/events/condition\r\n */\r\nimport MapBrowserEventType from '../MapBrowserEventType.js';\r\nimport {FALSE, TRUE} from '../functions.js';\r\nimport {MAC, WEBKIT} from '../has.js';\r\n\r\n/**\r\n * A function that takes a {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a\r\n * `{boolean}`. If the condition is met, true should be returned.\r\n *\r\n * @typedef {function(this: ?, import(\"../MapBrowserEvent.js\").default): boolean} Condition\r\n */\r\n\r\n/**\r\n * Creates a condition function that passes when all provided conditions pass.\r\n * @param {...Condition} var_args Conditions to check.\r\n * @return {Condition} Condition function.\r\n */\r\nexport function all(var_args) {\r\n  const conditions = arguments;\r\n  /**\r\n   * @param {import(\"../MapBrowserEvent.js\").default} event Event.\r\n   * @return {boolean} All conditions passed.\r\n   */\r\n  return function (event) {\r\n    let pass = true;\r\n    for (let i = 0, ii = conditions.length; i < ii; ++i) {\r\n      pass = pass && conditions[i](event);\r\n      if (!pass) {\r\n        break;\r\n      }\r\n    }\r\n    return pass;\r\n  };\r\n}\r\n\r\n/**\r\n * Return `true` if only the alt-key is pressed, `false` otherwise (e.g. when\r\n * additionally the shift-key is pressed).\r\n *\r\n * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\r\n * @return {boolean} True if only the alt key is pressed.\r\n * @api\r\n */\r\nexport const altKeyOnly = function (mapBrowserEvent) {\r\n  const originalEvent = mapBrowserEvent.originalEvent;\r\n  return (\r\n    originalEvent.altKey &&\r\n    !(originalEvent.metaKey || originalEvent.ctrlKey) &&\r\n    !originalEvent.shiftKey\r\n  );\r\n};\r\n\r\n/**\r\n * Return `true` if only the alt-key and shift-key is pressed, `false` otherwise\r\n * (e.g. when additionally the platform-modifier-key is pressed).\r\n *\r\n * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\r\n * @return {boolean} True if only the alt and shift keys are pressed.\r\n * @api\r\n */\r\nexport const altShiftKeysOnly = function (mapBrowserEvent) {\r\n  const originalEvent = mapBrowserEvent.originalEvent;\r\n  return (\r\n    originalEvent.altKey &&\r\n    !(originalEvent.metaKey || originalEvent.ctrlKey) &&\r\n    originalEvent.shiftKey\r\n  );\r\n};\r\n\r\n/**\r\n * Return `true` if the map has the focus. This condition requires a map target\r\n * element with a `tabindex` attribute, e.g. `<div id=\"map\" tabindex=\"1\">`.\r\n *\r\n * @param {import(\"../MapBrowserEvent.js\").default} event Map browser event.\r\n * @return {boolean} The map has the focus.\r\n * @api\r\n */\r\nexport const focus = function (event) {\r\n  const targetElement = event.map.getTargetElement();\r\n  const rootNode = targetElement.getRootNode();\r\n  const activeElement = event.map.getOwnerDocument().activeElement;\r\n\r\n  return rootNode instanceof ShadowRoot\r\n    ? rootNode.host.contains(activeElement)\r\n    : targetElement.contains(activeElement);\r\n};\r\n\r\n/**\r\n * Return `true` if the map has the focus or no 'tabindex' attribute set.\r\n *\r\n * @param {import(\"../MapBrowserEvent.js\").default} event Map browser event.\r\n * @return {boolean} The map container has the focus or no 'tabindex' attribute.\r\n */\r\nexport const focusWithTabindex = function (event) {\r\n  const targetElement = event.map.getTargetElement();\r\n  const rootNode = targetElement.getRootNode();\r\n  const tabIndexCandidate =\r\n    rootNode instanceof ShadowRoot ? rootNode.host : targetElement;\r\n\r\n  return tabIndexCandidate.hasAttribute('tabindex') ? focus(event) : true;\r\n};\r\n\r\n/**\r\n * Return always true.\r\n *\r\n * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\r\n * @return {boolean} True.\r\n * @api\r\n */\r\nexport const always = TRUE;\r\n\r\n/**\r\n * Return `true` if the event is a `click` event, `false` otherwise.\r\n *\r\n * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\r\n * @return {boolean} True if the event is a map `click` event.\r\n * @api\r\n */\r\nexport const click = function (mapBrowserEvent) {\r\n  return mapBrowserEvent.type == MapBrowserEventType.CLICK;\r\n};\r\n\r\n/**\r\n * Return `true` if the event has an \"action\"-producing mouse button.\r\n *\r\n * By definition, this includes left-click on windows/linux, and left-click\r\n * without the ctrl key on Macs.\r\n *\r\n * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\r\n * @return {boolean} The result.\r\n */\r\nexport const mouseActionButton = function (mapBrowserEvent) {\r\n  const originalEvent = mapBrowserEvent.originalEvent;\r\n  return (\r\n    originalEvent instanceof PointerEvent &&\r\n    originalEvent.button == 0 &&\r\n    !(WEBKIT && MAC && originalEvent.ctrlKey)\r\n  );\r\n};\r\n\r\n/**\r\n * Return always false.\r\n *\r\n * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\r\n * @return {boolean} False.\r\n * @api\r\n */\r\nexport const never = FALSE;\r\n\r\n/**\r\n * Return `true` if the browser event is a `pointermove` event, `false`\r\n * otherwise.\r\n *\r\n * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\r\n * @return {boolean} True if the browser event is a `pointermove` event.\r\n * @api\r\n */\r\nexport const pointerMove = function (mapBrowserEvent) {\r\n  return mapBrowserEvent.type == 'pointermove';\r\n};\r\n\r\n/**\r\n * Return `true` if the event is a map `singleclick` event, `false` otherwise.\r\n *\r\n * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\r\n * @return {boolean} True if the event is a map `singleclick` event.\r\n * @api\r\n */\r\nexport const singleClick = function (mapBrowserEvent) {\r\n  return mapBrowserEvent.type == MapBrowserEventType.SINGLECLICK;\r\n};\r\n\r\n/**\r\n * Return `true` if the event is a map `dblclick` event, `false` otherwise.\r\n *\r\n * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\r\n * @return {boolean} True if the event is a map `dblclick` event.\r\n * @api\r\n */\r\nexport const doubleClick = function (mapBrowserEvent) {\r\n  return mapBrowserEvent.type == MapBrowserEventType.DBLCLICK;\r\n};\r\n\r\n/**\r\n * Return `true` if no modifier key (alt-, shift- or platform-modifier-key) is\r\n * pressed.\r\n *\r\n * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\r\n * @return {boolean} True only if there no modifier keys are pressed.\r\n * @api\r\n */\r\nexport const noModifierKeys = function (mapBrowserEvent) {\r\n  const originalEvent = /** @type {KeyboardEvent|MouseEvent|TouchEvent} */ (\r\n    mapBrowserEvent.originalEvent\r\n  );\r\n  return (\r\n    !originalEvent.altKey &&\r\n    !(originalEvent.metaKey || originalEvent.ctrlKey) &&\r\n    !originalEvent.shiftKey\r\n  );\r\n};\r\n\r\n/**\r\n * Return `true` if only the platform-modifier-key (the meta-key on Mac,\r\n * ctrl-key otherwise) is pressed, `false` otherwise (e.g. when additionally\r\n * the shift-key is pressed).\r\n *\r\n * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\r\n * @return {boolean} True if only the platform modifier key is pressed.\r\n * @api\r\n */\r\nexport const platformModifierKeyOnly = function (mapBrowserEvent) {\r\n  const originalEvent = mapBrowserEvent.originalEvent;\r\n  return (\r\n    !originalEvent.altKey &&\r\n    (MAC ? originalEvent.metaKey : originalEvent.ctrlKey) &&\r\n    !originalEvent.shiftKey\r\n  );\r\n};\r\n\r\n/**\r\n * Return `true` if the platform-modifier-key (the meta-key on Mac,\r\n * ctrl-key otherwise) is pressed.\r\n *\r\n * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\r\n * @return {boolean} True if the platform modifier key is pressed.\r\n * @api\r\n */\r\nexport const platformModifierKey = function (mapBrowserEvent) {\r\n  const originalEvent = mapBrowserEvent.originalEvent;\r\n  return MAC ? originalEvent.metaKey : originalEvent.ctrlKey;\r\n};\r\n\r\n/**\r\n * Return `true` if only the shift-key is pressed, `false` otherwise (e.g. when\r\n * additionally the alt-key is pressed).\r\n *\r\n * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\r\n * @return {boolean} True if only the shift key is pressed.\r\n * @api\r\n */\r\nexport const shiftKeyOnly = function (mapBrowserEvent) {\r\n  const originalEvent = mapBrowserEvent.originalEvent;\r\n  return (\r\n    !originalEvent.altKey &&\r\n    !(originalEvent.metaKey || originalEvent.ctrlKey) &&\r\n    originalEvent.shiftKey\r\n  );\r\n};\r\n\r\n/**\r\n * Return `true` if the target element is not editable, i.e. not an `input`,\r\n * `select`, or `textarea` element and no `contenteditable` attribute is\r\n * set or inherited, `false` otherwise.\r\n *\r\n * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\r\n * @return {boolean} True only if the target element is not editable.\r\n * @api\r\n */\r\nexport const targetNotEditable = function (mapBrowserEvent) {\r\n  const originalEvent = mapBrowserEvent.originalEvent;\r\n  const tagName = /** @type {Element} */ (originalEvent.target).tagName;\r\n  return (\r\n    tagName !== 'INPUT' &&\r\n    tagName !== 'SELECT' &&\r\n    tagName !== 'TEXTAREA' &&\r\n    // `isContentEditable` is only available on `HTMLElement`, but it may also be a\r\n    // different type like `SVGElement`.\r\n    // @ts-ignore\r\n    !originalEvent.target.isContentEditable\r\n  );\r\n};\r\n\r\n/**\r\n * Return `true` if the event originates from a mouse device.\r\n *\r\n * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\r\n * @return {boolean} True if the event originates from a mouse device.\r\n * @api\r\n */\r\nexport const mouseOnly = function (mapBrowserEvent) {\r\n  const pointerEvent = mapBrowserEvent.originalEvent;\r\n  // see https://www.w3.org/TR/pointerevents/#widl-PointerEvent-pointerType\r\n  return (\r\n    pointerEvent instanceof PointerEvent && pointerEvent.pointerType == 'mouse'\r\n  );\r\n};\r\n\r\n/**\r\n * Return `true` if the event originates from a touchable device.\r\n *\r\n * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\r\n * @return {boolean} True if the event originates from a touchable device.\r\n * @api\r\n */\r\nexport const touchOnly = function (mapBrowserEvent) {\r\n  const pointerEvt = mapBrowserEvent.originalEvent;\r\n  // see https://www.w3.org/TR/pointerevents/#widl-PointerEvent-pointerType\r\n  return (\r\n    pointerEvt instanceof PointerEvent && pointerEvt.pointerType === 'touch'\r\n  );\r\n};\r\n\r\n/**\r\n * Return `true` if the event originates from a digital pen.\r\n *\r\n * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\r\n * @return {boolean} True if the event originates from a digital pen.\r\n * @api\r\n */\r\nexport const penOnly = function (mapBrowserEvent) {\r\n  const pointerEvt = mapBrowserEvent.originalEvent;\r\n  // see https://www.w3.org/TR/pointerevents/#widl-PointerEvent-pointerType\r\n  return pointerEvt instanceof PointerEvent && pointerEvt.pointerType === 'pen';\r\n};\r\n\r\n/**\r\n * Return `true` if the event originates from a primary pointer in\r\n * contact with the surface or if the left mouse button is pressed.\r\n * See https://www.w3.org/TR/pointerevents/#button-states.\r\n *\r\n * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\r\n * @return {boolean} True if the event originates from a primary pointer.\r\n * @api\r\n */\r\nexport const primaryAction = function (mapBrowserEvent) {\r\n  const pointerEvent = mapBrowserEvent.originalEvent;\r\n  return (\r\n    pointerEvent instanceof PointerEvent &&\r\n    pointerEvent.isPrimary &&\r\n    pointerEvent.button === 0\r\n  );\r\n};\r\n","/**\r\n * @module ol/interaction/Pointer\r\n */\r\nimport MapBrowserEventType from '../MapBrowserEventType.js';\r\nimport Interaction from './Interaction.js';\r\n\r\n/**\r\n * @typedef {Object} Options\r\n * @property {function(import(\"../MapBrowserEvent.js\").default):boolean} [handleDownEvent]\r\n * Function handling \"down\" events. If the function returns `true` then a drag\r\n * sequence is started.\r\n * @property {function(import(\"../MapBrowserEvent.js\").default):void} [handleDragEvent]\r\n * Function handling \"drag\" events. This function is called on \"move\" events\r\n * during a drag sequence.\r\n * @property {function(import(\"../MapBrowserEvent.js\").default):boolean} [handleEvent]\r\n * Method called by the map to notify the interaction that a browser event was\r\n * dispatched to the map. The function may return `false` to prevent the\r\n * propagation of the event to other interactions in the map's interactions\r\n * chain.\r\n * @property {function(import(\"../MapBrowserEvent.js\").default):void} [handleMoveEvent]\r\n * Function handling \"move\" events. This function is called on \"move\" events.\r\n * This functions is also called during a drag sequence, so during a drag\r\n * sequence both the `handleDragEvent` function and this function are called.\r\n * If `handleDownEvent` is defined and it returns true this function will not\r\n * be called during a drag sequence.\r\n * @property {function(import(\"../MapBrowserEvent.js\").default):boolean} [handleUpEvent]\r\n *  Function handling \"up\" events. If the function returns `false` then the\r\n * current drag sequence is stopped.\r\n * @property {function(boolean):boolean} [stopDown]\r\n * Should the down event be propagated to other interactions, or should be\r\n * stopped?\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * Base class that calls user-defined functions on `down`, `move` and `up`\r\n * events. This class also manages \"drag sequences\".\r\n *\r\n * When the `handleDownEvent` user function returns `true` a drag sequence is\r\n * started. During a drag sequence the `handleDragEvent` user function is\r\n * called on `move` events. The drag sequence ends when the `handleUpEvent`\r\n * user function is called and returns `false`.\r\n * @api\r\n */\r\nclass PointerInteraction extends Interaction {\r\n  /**\r\n   * @param {Options} [options] Options.\r\n   */\r\n  constructor(options) {\r\n    options = options ? options : {};\r\n\r\n    super(\r\n      /** @type {import(\"./Interaction.js\").InteractionOptions} */ (options),\r\n    );\r\n\r\n    if (options.handleDownEvent) {\r\n      this.handleDownEvent = options.handleDownEvent;\r\n    }\r\n\r\n    if (options.handleDragEvent) {\r\n      this.handleDragEvent = options.handleDragEvent;\r\n    }\r\n\r\n    if (options.handleMoveEvent) {\r\n      this.handleMoveEvent = options.handleMoveEvent;\r\n    }\r\n\r\n    if (options.handleUpEvent) {\r\n      this.handleUpEvent = options.handleUpEvent;\r\n    }\r\n\r\n    if (options.stopDown) {\r\n      this.stopDown = options.stopDown;\r\n    }\r\n\r\n    /**\r\n     * @type {boolean}\r\n     * @protected\r\n     */\r\n    this.handlingDownUpSequence = false;\r\n\r\n    /**\r\n     * @type {Array<PointerEvent>}\r\n     * @protected\r\n     */\r\n    this.targetPointers = [];\r\n  }\r\n\r\n  /**\r\n   * Returns the current number of pointers involved in the interaction,\r\n   * e.g. `2` when two fingers are used.\r\n   * @return {number} The number of pointers.\r\n   * @api\r\n   */\r\n  getPointerCount() {\r\n    return this.targetPointers.length;\r\n  }\r\n\r\n  /**\r\n   * Handle pointer down events.\r\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\r\n   * @return {boolean} If the event was consumed.\r\n   * @protected\r\n   */\r\n  handleDownEvent(mapBrowserEvent) {\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Handle pointer drag events.\r\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\r\n   * @protected\r\n   */\r\n  handleDragEvent(mapBrowserEvent) {}\r\n\r\n  /**\r\n   * Handles the {@link module:ol/MapBrowserEvent~MapBrowserEvent map browser event} and may call into\r\n   * other functions, if event sequences like e.g. 'drag' or 'down-up' etc. are\r\n   * detected.\r\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\r\n   * @return {boolean} `false` to stop event propagation.\r\n   * @api\r\n   * @override\r\n   */\r\n  handleEvent(mapBrowserEvent) {\r\n    if (!mapBrowserEvent.originalEvent) {\r\n      return true;\r\n    }\r\n\r\n    let stopEvent = false;\r\n    this.updateTrackedPointers_(mapBrowserEvent);\r\n    if (this.handlingDownUpSequence) {\r\n      if (mapBrowserEvent.type == MapBrowserEventType.POINTERDRAG) {\r\n        this.handleDragEvent(mapBrowserEvent);\r\n        // prevent page scrolling during dragging\r\n        mapBrowserEvent.originalEvent.preventDefault();\r\n      } else if (mapBrowserEvent.type == MapBrowserEventType.POINTERUP) {\r\n        const handledUp = this.handleUpEvent(mapBrowserEvent);\r\n        this.handlingDownUpSequence =\r\n          handledUp && this.targetPointers.length > 0;\r\n      }\r\n    } else {\r\n      if (mapBrowserEvent.type == MapBrowserEventType.POINTERDOWN) {\r\n        const handled = this.handleDownEvent(mapBrowserEvent);\r\n        this.handlingDownUpSequence = handled;\r\n        stopEvent = this.stopDown(handled);\r\n      } else if (mapBrowserEvent.type == MapBrowserEventType.POINTERMOVE) {\r\n        this.handleMoveEvent(mapBrowserEvent);\r\n      }\r\n    }\r\n    return !stopEvent;\r\n  }\r\n\r\n  /**\r\n   * Handle pointer move events.\r\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\r\n   * @protected\r\n   */\r\n  handleMoveEvent(mapBrowserEvent) {}\r\n\r\n  /**\r\n   * Handle pointer up events.\r\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\r\n   * @return {boolean} If the event was consumed.\r\n   * @protected\r\n   */\r\n  handleUpEvent(mapBrowserEvent) {\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * This function is used to determine if \"down\" events should be propagated\r\n   * to other interactions or should be stopped.\r\n   * @param {boolean} handled Was the event handled by the interaction?\r\n   * @return {boolean} Should the `down` event be stopped?\r\n   */\r\n  stopDown(handled) {\r\n    return handled;\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\r\n   * @private\r\n   */\r\n  updateTrackedPointers_(mapBrowserEvent) {\r\n    if (mapBrowserEvent.activePointers) {\r\n      this.targetPointers = mapBrowserEvent.activePointers;\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * @param {Array<PointerEvent>} pointerEvents List of events.\r\n * @return {{clientX: number, clientY: number}} Centroid pixel.\r\n */\r\nexport function centroid(pointerEvents) {\r\n  const length = pointerEvents.length;\r\n  let clientX = 0;\r\n  let clientY = 0;\r\n  for (let i = 0; i < length; i++) {\r\n    clientX += pointerEvents[i].clientX;\r\n    clientY += pointerEvents[i].clientY;\r\n  }\r\n  return {clientX: clientX / length, clientY: clientY / length};\r\n}\r\n\r\nexport default PointerInteraction;\r\n","/**\r\n * @module ol/interaction/DragRotate\r\n */\r\nimport {\r\n  altShiftKeysOnly,\r\n  mouseActionButton,\r\n  mouseOnly,\r\n} from '../events/condition.js';\r\nimport {FALSE} from '../functions.js';\r\nimport {disable} from '../rotationconstraint.js';\r\nimport PointerInteraction from './Pointer.js';\r\n\r\n/**\r\n * @typedef {Object} Options\r\n * @property {import(\"../events/condition.js\").Condition} [condition] A function that takes a\r\n * {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a boolean\r\n * to indicate whether that event should be handled.\r\n * Default is {@link module:ol/events/condition.altShiftKeysOnly}.\r\n * @property {number} [duration=250] Animation duration in milliseconds.\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * Allows the user to rotate the map by clicking and dragging on the map,\r\n * normally combined with a {@link module:ol/events/condition} that limits\r\n * it to when the alt and shift keys are held down.\r\n *\r\n * This interaction is only supported for mouse devices.\r\n * @api\r\n */\r\nclass DragRotate extends PointerInteraction {\r\n  /**\r\n   * @param {Options} [options] Options.\r\n   */\r\n  constructor(options) {\r\n    options = options ? options : {};\r\n\r\n    super({\r\n      stopDown: FALSE,\r\n    });\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"../events/condition.js\").Condition}\r\n     */\r\n    this.condition_ = options.condition ? options.condition : altShiftKeysOnly;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number|undefined}\r\n     */\r\n    this.lastAngle_ = undefined;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.duration_ = options.duration !== undefined ? options.duration : 250;\r\n  }\r\n\r\n  /**\r\n   * Handle pointer drag events.\r\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\r\n   * @override\r\n   */\r\n  handleDragEvent(mapBrowserEvent) {\r\n    if (!mouseOnly(mapBrowserEvent)) {\r\n      return;\r\n    }\r\n\r\n    const map = mapBrowserEvent.map;\r\n    const view = map.getView();\r\n    if (view.getConstraints().rotation === disable) {\r\n      return;\r\n    }\r\n    const size = map.getSize();\r\n    const offset = mapBrowserEvent.pixel;\r\n    const theta = Math.atan2(size[1] / 2 - offset[1], offset[0] - size[0] / 2);\r\n    if (this.lastAngle_ !== undefined) {\r\n      const delta = theta - this.lastAngle_;\r\n      view.adjustRotationInternal(-delta);\r\n    }\r\n    this.lastAngle_ = theta;\r\n  }\r\n\r\n  /**\r\n   * Handle pointer up events.\r\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\r\n   * @return {boolean} If the event was consumed.\r\n   * @override\r\n   */\r\n  handleUpEvent(mapBrowserEvent) {\r\n    if (!mouseOnly(mapBrowserEvent)) {\r\n      return true;\r\n    }\r\n\r\n    const map = mapBrowserEvent.map;\r\n    const view = map.getView();\r\n    view.endInteraction(this.duration_);\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Handle pointer down events.\r\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\r\n   * @return {boolean} If the event was consumed.\r\n   * @override\r\n   */\r\n  handleDownEvent(mapBrowserEvent) {\r\n    if (!mouseOnly(mapBrowserEvent)) {\r\n      return false;\r\n    }\r\n\r\n    if (\r\n      mouseActionButton(mapBrowserEvent) &&\r\n      this.condition_(mapBrowserEvent)\r\n    ) {\r\n      const map = mapBrowserEvent.map;\r\n      map.getView().beginInteraction();\r\n      this.lastAngle_ = undefined;\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n}\r\n\r\nexport default DragRotate;\r\n","/**\r\n * @module ol/interaction/DragZoom\r\n */\r\nimport {easeOut} from '../easing.js';\r\nimport {shiftKeyOnly} from '../events/condition.js';\r\nimport DragBox from './DragBox.js';\r\n\r\n/**\r\n * @typedef {Object} Options\r\n * @property {string} [className='ol-dragzoom'] CSS class name for styling the\r\n * box.\r\n * @property {import(\"../events/condition.js\").Condition} [condition] A function that\r\n * takes a {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a\r\n * boolean to indicate whether that event should be handled.\r\n * Default is {@link module:ol/events/condition.shiftKeyOnly}.\r\n * @property {number} [duration=200] Animation duration in milliseconds.\r\n * @property {boolean} [out=false] Use interaction for zooming out.\r\n * @property {number} [minArea=64] The minimum area of the box in pixel, this value is used by the parent default\r\n * `boxEndCondition` function.\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * Allows the user to zoom the map by clicking and dragging on the map,\r\n * normally combined with a {@link module:ol/events/condition} that limits\r\n * it to when a key, shift by default, is held down.\r\n *\r\n * To change the style of the box, use CSS and the `.ol-dragzoom` selector, or\r\n * your custom one configured with `className`.\r\n * @api\r\n */\r\nclass DragZoom extends DragBox {\r\n  /**\r\n   * @param {Options} [options] Options.\r\n   */\r\n  constructor(options) {\r\n    options = options ? options : {};\r\n\r\n    const condition = options.condition ? options.condition : shiftKeyOnly;\r\n\r\n    super({\r\n      condition: condition,\r\n      className: options.className || 'ol-dragzoom',\r\n      minArea: options.minArea,\r\n    });\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.duration_ = options.duration !== undefined ? options.duration : 200;\r\n\r\n    /**\r\n     * @private\r\n     * @type {boolean}\r\n     */\r\n    this.out_ = options.out !== undefined ? options.out : false;\r\n  }\r\n\r\n  /**\r\n   * Function to execute just before `onboxend` is fired\r\n   * @param {import(\"../MapBrowserEvent.js\").default} event Event.\r\n   * @override\r\n   */\r\n  onBoxEnd(event) {\r\n    const map = this.getMap();\r\n    const view = /** @type {!import(\"../View.js\").default} */ (map.getView());\r\n    let geometry = this.getGeometry();\r\n\r\n    if (this.out_) {\r\n      const rotatedExtent = view.rotatedExtentForGeometry(geometry);\r\n      const resolution = view.getResolutionForExtentInternal(rotatedExtent);\r\n      const factor = view.getResolution() / resolution;\r\n      geometry = geometry.clone();\r\n      geometry.scale(factor * factor);\r\n    }\r\n\r\n    view.fitInternal(geometry, {\r\n      duration: this.duration_,\r\n      easing: easeOut,\r\n    });\r\n  }\r\n}\r\n\r\nexport default DragZoom;\r\n","/**\r\n * @module ol/interaction/DragBox\r\n */\r\n// FIXME draw drag box\r\nimport Event from '../events/Event.js';\r\nimport {mouseActionButton} from '../events/condition.js';\r\nimport RenderBox from '../render/Box.js';\r\nimport PointerInteraction from './Pointer.js';\r\n\r\n/**\r\n * A function that takes a {@link module:ol/MapBrowserEvent~MapBrowserEvent} and two\r\n * {@link module:ol/pixel~Pixel}s and returns a `{boolean}`. If the condition is met,\r\n * true should be returned.\r\n * @typedef {function(this: ?, import(\"../MapBrowserEvent.js\").default, import(\"../pixel.js\").Pixel, import(\"../pixel.js\").Pixel):boolean} EndCondition\r\n */\r\n\r\n/**\r\n * @typedef {Object} Options\r\n * @property {string} [className='ol-dragbox'] CSS class name for styling the box.\r\n * @property {import(\"../events/condition.js\").Condition} [condition] A function that takes a {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a boolean\r\n * to indicate whether that event should be handled.\r\n * Default is {@link ol/events/condition~mouseActionButton}.\r\n * @property {number} [minArea=64] The minimum area of the box in pixel, this value is used by the default\r\n * `boxEndCondition` function.\r\n * @property {EndCondition} [boxEndCondition] A function that takes a {@link module:ol/MapBrowserEvent~MapBrowserEvent} and two\r\n * {@link module:ol/pixel~Pixel}s to indicate whether a `boxend` event should be fired.\r\n * Default is `true` if the area of the box is bigger than the `minArea` option.\r\n * @property {function(this:DragBox, import(\"../MapBrowserEvent.js\").default):void} [onBoxEnd] Code to execute just\r\n * before `boxend` is fired.\r\n */\r\n\r\n/**\r\n * @enum {string}\r\n */\r\nconst DragBoxEventType = {\r\n  /**\r\n   * Triggered upon drag box start.\r\n   * @event DragBoxEvent#boxstart\r\n   * @api\r\n   */\r\n  BOXSTART: 'boxstart',\r\n\r\n  /**\r\n   * Triggered on drag when box is active.\r\n   * @event DragBoxEvent#boxdrag\r\n   * @api\r\n   */\r\n  BOXDRAG: 'boxdrag',\r\n\r\n  /**\r\n   * Triggered upon drag box end.\r\n   * @event DragBoxEvent#boxend\r\n   * @api\r\n   */\r\n  BOXEND: 'boxend',\r\n\r\n  /**\r\n   * Triggered upon drag box canceled.\r\n   * @event DragBoxEvent#boxcancel\r\n   * @api\r\n   */\r\n  BOXCANCEL: 'boxcancel',\r\n};\r\n\r\n/**\r\n * @classdesc\r\n * Events emitted by {@link module:ol/interaction/DragBox~DragBox} instances are instances of\r\n * this type.\r\n */\r\nexport class DragBoxEvent extends Event {\r\n  /**\r\n   * @param {string} type The event type.\r\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate The event coordinate.\r\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Originating event.\r\n   */\r\n  constructor(type, coordinate, mapBrowserEvent) {\r\n    super(type);\r\n\r\n    /**\r\n     * The coordinate of the drag event.\r\n     * @const\r\n     * @type {import(\"../coordinate.js\").Coordinate}\r\n     * @api\r\n     */\r\n    this.coordinate = coordinate;\r\n\r\n    /**\r\n     * @const\r\n     * @type {import(\"../MapBrowserEvent.js\").default}\r\n     * @api\r\n     */\r\n    this.mapBrowserEvent = mapBrowserEvent;\r\n  }\r\n}\r\n\r\n/***\r\n * @template Return\r\n * @typedef {import(\"../Observable\").OnSignature<import(\"../Observable\").EventTypes, import(\"../events/Event.js\").default, Return> &\r\n *   import(\"../Observable\").OnSignature<import(\"../ObjectEventType\").Types|\r\n *     'change:active', import(\"../Object\").ObjectEvent, Return> &\r\n *   import(\"../Observable\").OnSignature<'boxcancel'|'boxdrag'|'boxend'|'boxstart', DragBoxEvent, Return> &\r\n *   import(\"../Observable\").CombinedOnSignature<import(\"../Observable\").EventTypes|import(\"../ObjectEventType\").Types|\r\n *     'change:active'|'boxcancel'|'boxdrag'|'boxend', Return>} DragBoxOnSignature\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * Allows the user to draw a vector box by clicking and dragging on the map,\r\n * normally combined with a {@link module:ol/events/condition} that limits\r\n * it to when the shift or other key is held down. This is used, for example,\r\n * for zooming to a specific area of the map\r\n * (see {@link module:ol/interaction/DragZoom~DragZoom} and\r\n * {@link module:ol/interaction/DragRotateAndZoom~DragRotateAndZoom}).\r\n *\r\n * @fires DragBoxEvent\r\n * @api\r\n */\r\nclass DragBox extends PointerInteraction {\r\n  /**\r\n   * @param {Options} [options] Options.\r\n   */\r\n  constructor(options) {\r\n    super();\r\n\r\n    /***\r\n     * @type {DragBoxOnSignature<import(\"../events\").EventsKey>}\r\n     */\r\n    this.on;\r\n\r\n    /***\r\n     * @type {DragBoxOnSignature<import(\"../events\").EventsKey>}\r\n     */\r\n    this.once;\r\n\r\n    /***\r\n     * @type {DragBoxOnSignature<void>}\r\n     */\r\n    this.un;\r\n\r\n    options = options ?? {};\r\n\r\n    /**\r\n     * @type {import(\"../render/Box.js\").default}\r\n     * @private\r\n     */\r\n    this.box_ = new RenderBox(options.className || 'ol-dragbox');\r\n\r\n    /**\r\n     * @type {number}\r\n     * @private\r\n     */\r\n    this.minArea_ = options.minArea ?? 64;\r\n\r\n    if (options.onBoxEnd) {\r\n      this.onBoxEnd = options.onBoxEnd;\r\n    }\r\n\r\n    /**\r\n     * @type {import(\"../pixel.js\").Pixel}\r\n     * @private\r\n     */\r\n    this.startPixel_ = null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"../events/condition.js\").Condition}\r\n     */\r\n    this.condition_ = options.condition ?? mouseActionButton;\r\n\r\n    /**\r\n     * @private\r\n     * @type {EndCondition}\r\n     */\r\n    this.boxEndCondition_ =\r\n      options.boxEndCondition ?? this.defaultBoxEndCondition;\r\n  }\r\n\r\n  /**\r\n   * The default condition for determining whether the boxend event\r\n   * should fire.\r\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent The originating MapBrowserEvent\r\n   *     leading to the box end.\r\n   * @param {import(\"../pixel.js\").Pixel} startPixel The starting pixel of the box.\r\n   * @param {import(\"../pixel.js\").Pixel} endPixel The end pixel of the box.\r\n   * @return {boolean} Whether or not the boxend condition should be fired.\r\n   */\r\n  defaultBoxEndCondition(mapBrowserEvent, startPixel, endPixel) {\r\n    const width = endPixel[0] - startPixel[0];\r\n    const height = endPixel[1] - startPixel[1];\r\n    return width * width + height * height >= this.minArea_;\r\n  }\r\n\r\n  /**\r\n   * Returns geometry of last drawn box.\r\n   * @return {import(\"../geom/Polygon.js\").default} Geometry.\r\n   * @api\r\n   */\r\n  getGeometry() {\r\n    return this.box_.getGeometry();\r\n  }\r\n\r\n  /**\r\n   * Handle pointer drag events.\r\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\r\n   * @override\r\n   */\r\n  handleDragEvent(mapBrowserEvent) {\r\n    if (!this.startPixel_) {\r\n      return;\r\n    }\r\n\r\n    this.box_.setPixels(this.startPixel_, mapBrowserEvent.pixel);\r\n\r\n    this.dispatchEvent(\r\n      new DragBoxEvent(\r\n        DragBoxEventType.BOXDRAG,\r\n        mapBrowserEvent.coordinate,\r\n        mapBrowserEvent,\r\n      ),\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Handle pointer up events.\r\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\r\n   * @return {boolean} If the event was consumed.\r\n   * @override\r\n   */\r\n  handleUpEvent(mapBrowserEvent) {\r\n    if (!this.startPixel_) {\r\n      return false;\r\n    }\r\n\r\n    const completeBox = this.boxEndCondition_(\r\n      mapBrowserEvent,\r\n      this.startPixel_,\r\n      mapBrowserEvent.pixel,\r\n    );\r\n    if (completeBox) {\r\n      this.onBoxEnd(mapBrowserEvent);\r\n    }\r\n    this.dispatchEvent(\r\n      new DragBoxEvent(\r\n        completeBox ? DragBoxEventType.BOXEND : DragBoxEventType.BOXCANCEL,\r\n        mapBrowserEvent.coordinate,\r\n        mapBrowserEvent,\r\n      ),\r\n    );\r\n\r\n    this.box_.setMap(null);\r\n    this.startPixel_ = null;\r\n\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Handle pointer down events.\r\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\r\n   * @return {boolean} If the event was consumed.\r\n   * @override\r\n   */\r\n  handleDownEvent(mapBrowserEvent) {\r\n    if (this.condition_(mapBrowserEvent)) {\r\n      this.startPixel_ = mapBrowserEvent.pixel;\r\n      this.box_.setMap(mapBrowserEvent.map);\r\n      this.box_.setPixels(this.startPixel_, this.startPixel_);\r\n      this.dispatchEvent(\r\n        new DragBoxEvent(\r\n          DragBoxEventType.BOXSTART,\r\n          mapBrowserEvent.coordinate,\r\n          mapBrowserEvent,\r\n        ),\r\n      );\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Function to execute just before `onboxend` is fired\r\n   * @param {import(\"../MapBrowserEvent.js\").default} event Event.\r\n   */\r\n  onBoxEnd(event) {}\r\n\r\n  /**\r\n   * Activate or deactivate the interaction.\r\n   * @param {boolean} active Active.\r\n   * @observable\r\n   * @api\r\n   * @override\r\n   */\r\n  setActive(active) {\r\n    if (!active) {\r\n      this.box_.setMap(null);\r\n      if (this.startPixel_) {\r\n        this.dispatchEvent(\r\n          new DragBoxEvent(DragBoxEventType.BOXCANCEL, this.startPixel_, null),\r\n        );\r\n        this.startPixel_ = null;\r\n      }\r\n    }\r\n\r\n    super.setActive(active);\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../Map.js\").default|null} map Map.\r\n   * @override\r\n   */\r\n  setMap(map) {\r\n    const oldMap = this.getMap();\r\n\r\n    if (oldMap) {\r\n      this.box_.setMap(null);\r\n\r\n      if (this.startPixel_) {\r\n        this.dispatchEvent(\r\n          new DragBoxEvent(DragBoxEventType.BOXCANCEL, this.startPixel_, null),\r\n        );\r\n        this.startPixel_ = null;\r\n      }\r\n    }\r\n\r\n    super.setMap(map);\r\n  }\r\n}\r\n\r\nexport default DragBox;\r\n","/**\r\n * @module ol/render/Box\r\n */\r\n\r\nimport Disposable from '../Disposable.js';\r\nimport Polygon from '../geom/Polygon.js';\r\n\r\nclass RenderBox extends Disposable {\r\n  /**\r\n   * @param {string} className CSS class name.\r\n   */\r\n  constructor(className) {\r\n    super();\r\n\r\n    /**\r\n     * @type {import(\"../geom/Polygon.js\").default}\r\n     * @private\r\n     */\r\n    this.geometry_ = null;\r\n\r\n    /**\r\n     * @type {HTMLDivElement}\r\n     * @private\r\n     */\r\n    this.element_ = document.createElement('div');\r\n    this.element_.style.position = 'absolute';\r\n    this.element_.style.pointerEvents = 'auto';\r\n    this.element_.className = 'ol-box ' + className;\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"../Map.js\").default|null}\r\n     */\r\n    this.map_ = null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"../pixel.js\").Pixel}\r\n     */\r\n    this.startPixel_ = null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"../pixel.js\").Pixel}\r\n     */\r\n    this.endPixel_ = null;\r\n  }\r\n\r\n  /**\r\n   * Clean up.\r\n   * @override\r\n   */\r\n  disposeInternal() {\r\n    this.setMap(null);\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  render_() {\r\n    const startPixel = this.startPixel_;\r\n    const endPixel = this.endPixel_;\r\n    const px = 'px';\r\n    const style = this.element_.style;\r\n    style.left = Math.min(startPixel[0], endPixel[0]) + px;\r\n    style.top = Math.min(startPixel[1], endPixel[1]) + px;\r\n    style.width = Math.abs(endPixel[0] - startPixel[0]) + px;\r\n    style.height = Math.abs(endPixel[1] - startPixel[1]) + px;\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../Map.js\").default|null} map Map.\r\n   */\r\n  setMap(map) {\r\n    if (this.map_) {\r\n      this.map_.getOverlayContainer().removeChild(this.element_);\r\n      const style = this.element_.style;\r\n      style.left = 'inherit';\r\n      style.top = 'inherit';\r\n      style.width = 'inherit';\r\n      style.height = 'inherit';\r\n    }\r\n    this.map_ = map;\r\n    if (this.map_) {\r\n      this.map_.getOverlayContainer().appendChild(this.element_);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../pixel.js\").Pixel} startPixel Start pixel.\r\n   * @param {import(\"../pixel.js\").Pixel} endPixel End pixel.\r\n   */\r\n  setPixels(startPixel, endPixel) {\r\n    this.startPixel_ = startPixel;\r\n    this.endPixel_ = endPixel;\r\n    this.createOrUpdateGeometry();\r\n    this.render_();\r\n  }\r\n\r\n  /**\r\n   * Creates or updates the cached geometry.\r\n   */\r\n  createOrUpdateGeometry() {\r\n    if (!this.map_) {\r\n      return;\r\n    }\r\n\r\n    const startPixel = this.startPixel_;\r\n    const endPixel = this.endPixel_;\r\n    const pixels = [\r\n      startPixel,\r\n      [startPixel[0], endPixel[1]],\r\n      endPixel,\r\n      [endPixel[0], startPixel[1]],\r\n    ];\r\n    const coordinates = pixels.map(\r\n      this.map_.getCoordinateFromPixelInternal,\r\n      this.map_,\r\n    );\r\n    // close the polygon\r\n    coordinates[4] = coordinates[0].slice();\r\n    if (!this.geometry_) {\r\n      this.geometry_ = new Polygon([coordinates]);\r\n    } else {\r\n      this.geometry_.setCoordinates([coordinates]);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @return {import(\"../geom/Polygon.js\").default} Geometry.\r\n   */\r\n  getGeometry() {\r\n    return this.geometry_;\r\n  }\r\n}\r\n\r\nexport default RenderBox;\r\n","/**\r\n * @module ol/interaction/KeyboardPan\r\n */\r\nimport {rotate as rotateCoordinate} from '../coordinate.js';\r\nimport EventType from '../events/EventType.js';\r\nimport Key from '../events/Key.js';\r\nimport {noModifierKeys, targetNotEditable} from '../events/condition.js';\r\nimport Interaction, {pan} from './Interaction.js';\r\n\r\n/**\r\n * @typedef {Object} Options\r\n * @property {import(\"../events/condition.js\").Condition} [condition] A function that\r\n * takes a {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a\r\n * boolean to indicate whether that event should be handled. Default is\r\n * {@link module:ol/events/condition.noModifierKeys} and\r\n * {@link module:ol/events/condition.targetNotEditable}.\r\n * @property {number} [duration=100] Animation duration in milliseconds.\r\n * @property {number} [pixelDelta=128] The amount of pixels to pan on each key\r\n * press.\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * Allows the user to pan the map using keyboard arrows.\r\n * Note that, although this interaction is by default included in maps,\r\n * the keys can only be used when browser focus is on the element to which\r\n * the keyboard events are attached. By default, this is the map div,\r\n * though you can change this with the `keyboardEventTarget` in\r\n * {@link module:ol/Map~Map}. `document` never loses focus but, for any other\r\n * element, focus will have to be on, and returned to, this element if the keys\r\n * are to function.\r\n * See also {@link module:ol/interaction/KeyboardZoom~KeyboardZoom}.\r\n * @api\r\n */\r\nclass KeyboardPan extends Interaction {\r\n  /**\r\n   * @param {Options} [options] Options.\r\n   */\r\n  constructor(options) {\r\n    super();\r\n\r\n    options = options || {};\r\n\r\n    /**\r\n     * @private\r\n     * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Browser event.\r\n     * @return {boolean} Combined condition result.\r\n     */\r\n    this.defaultCondition_ = function (mapBrowserEvent) {\r\n      return (\r\n        noModifierKeys(mapBrowserEvent) && targetNotEditable(mapBrowserEvent)\r\n      );\r\n    };\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"../events/condition.js\").Condition}\r\n     */\r\n    this.condition_ =\r\n      options.condition !== undefined\r\n        ? options.condition\r\n        : this.defaultCondition_;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.duration_ = options.duration !== undefined ? options.duration : 100;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.pixelDelta_ =\r\n      options.pixelDelta !== undefined ? options.pixelDelta : 128;\r\n  }\r\n\r\n  /**\r\n   * Handles the {@link module:ol/MapBrowserEvent~MapBrowserEvent map browser event} if it was a\r\n   * `KeyEvent`, and decides the direction to pan to (if an arrow key was\r\n   * pressed).\r\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\r\n   * @return {boolean} `false` to stop event propagation.\r\n   * @override\r\n   */\r\n  handleEvent(mapBrowserEvent) {\r\n    let stopEvent = false;\r\n    if (mapBrowserEvent.type == EventType.KEYDOWN) {\r\n      const keyEvent = /** @type {KeyboardEvent} */ (\r\n        mapBrowserEvent.originalEvent\r\n      );\r\n      const key = keyEvent.key;\r\n      if (\r\n        this.condition_(mapBrowserEvent) &&\r\n        (key == Key.DOWN ||\r\n          key == Key.LEFT ||\r\n          key == Key.RIGHT ||\r\n          key == Key.UP)\r\n      ) {\r\n        const map = mapBrowserEvent.map;\r\n        const view = map.getView();\r\n        const mapUnitsDelta = view.getResolution() * this.pixelDelta_;\r\n        let deltaX = 0,\r\n          deltaY = 0;\r\n        if (key == Key.DOWN) {\r\n          deltaY = -mapUnitsDelta;\r\n        } else if (key == Key.LEFT) {\r\n          deltaX = -mapUnitsDelta;\r\n        } else if (key == Key.RIGHT) {\r\n          deltaX = mapUnitsDelta;\r\n        } else {\r\n          deltaY = mapUnitsDelta;\r\n        }\r\n        const delta = [deltaX, deltaY];\r\n        rotateCoordinate(delta, view.getRotation());\r\n        pan(view, delta, this.duration_);\r\n        keyEvent.preventDefault();\r\n        stopEvent = true;\r\n      }\r\n    }\r\n    return !stopEvent;\r\n  }\r\n}\r\n\r\nexport default KeyboardPan;\r\n","/**\r\n * @module ol/events/Key\r\n */\r\n\r\n/**\r\n * @enum {string}\r\n * @const\r\n */\r\nexport default {\r\n  LEFT: 'ArrowLeft',\r\n  UP: 'ArrowUp',\r\n  RIGHT: 'ArrowRight',\r\n  DOWN: 'ArrowDown',\r\n};\r\n","/**\r\n * @module ol/interaction/KeyboardZoom\r\n */\r\nimport EventType from '../events/EventType.js';\r\nimport {platformModifierKey, targetNotEditable} from '../events/condition.js';\r\nimport Interaction, {zoomByDelta} from './Interaction.js';\r\n\r\n/**\r\n * @typedef {Object} Options\r\n * @property {number} [duration=100] Animation duration in milliseconds.\r\n * @property {import(\"../events/condition.js\").Condition} [condition] A function that\r\n * takes a {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a\r\n * boolean to indicate whether that event should be handled. The default condition is\r\n * that {@link module:ol/events/condition.targetNotEditable} is fulfilled and that\r\n * the platform modifier key isn't pressed\r\n * (!{@link module:ol/events/condition.platformModifierKey}).\r\n * @property {number} [delta=1] The zoom level delta on each key press.\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * Allows the user to zoom the map using keyboard + and -.\r\n * Note that, although this interaction is by default included in maps,\r\n * the keys can only be used when browser focus is on the element to which\r\n * the keyboard events are attached. By default, this is the map div,\r\n * though you can change this with the `keyboardEventTarget` in\r\n * {@link module:ol/Map~Map}. `document` never loses focus but, for any other\r\n * element, focus will have to be on, and returned to, this element if the keys\r\n * are to function.\r\n * See also {@link module:ol/interaction/KeyboardPan~KeyboardPan}.\r\n * @api\r\n */\r\nclass KeyboardZoom extends Interaction {\r\n  /**\r\n   * @param {Options} [options] Options.\r\n   */\r\n  constructor(options) {\r\n    super();\r\n\r\n    options = options ? options : {};\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"../events/condition.js\").Condition}\r\n     */\r\n    this.condition_ = options.condition\r\n      ? options.condition\r\n      : function (mapBrowserEvent) {\r\n          return (\r\n            !platformModifierKey(mapBrowserEvent) &&\r\n            targetNotEditable(mapBrowserEvent)\r\n          );\r\n        };\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.delta_ = options.delta ? options.delta : 1;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.duration_ = options.duration !== undefined ? options.duration : 100;\r\n  }\r\n\r\n  /**\r\n   * Handles the {@link module:ol/MapBrowserEvent~MapBrowserEvent map browser event} if it was a\r\n   * `KeyEvent`, and decides whether to zoom in or out (depending on whether the\r\n   * key pressed was '+' or '-').\r\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\r\n   * @return {boolean} `false` to stop event propagation.\r\n   * @override\r\n   */\r\n  handleEvent(mapBrowserEvent) {\r\n    let stopEvent = false;\r\n    if (\r\n      mapBrowserEvent.type == EventType.KEYDOWN ||\r\n      mapBrowserEvent.type == EventType.KEYPRESS\r\n    ) {\r\n      const keyEvent = /** @type {KeyboardEvent} */ (\r\n        mapBrowserEvent.originalEvent\r\n      );\r\n      const key = keyEvent.key;\r\n      if (this.condition_(mapBrowserEvent) && (key === '+' || key === '-')) {\r\n        const map = mapBrowserEvent.map;\r\n        const delta = key === '+' ? this.delta_ : -this.delta_;\r\n        const view = map.getView();\r\n        zoomByDelta(view, delta, undefined, this.duration_);\r\n        keyEvent.preventDefault();\r\n        stopEvent = true;\r\n      }\r\n    }\r\n    return !stopEvent;\r\n  }\r\n}\r\n\r\nexport default KeyboardZoom;\r\n","/**\r\n * @module ol/interaction/MouseWheelZoom\r\n */\r\nimport EventType from '../events/EventType.js';\r\nimport {all, always, focusWithTabindex} from '../events/condition.js';\r\nimport {clamp} from '../math.js';\r\nimport Interaction, {zoomByDelta} from './Interaction.js';\r\n\r\n/**\r\n * @typedef {'trackpad' | 'wheel'} Mode\r\n */\r\n\r\n/**\r\n * @typedef {Object} Options\r\n * @property {import(\"../events/condition.js\").Condition} [condition] A function that\r\n * takes a {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a\r\n * boolean to indicate whether that event should be handled. Default is\r\n * {@link module:ol/events/condition.always}.\r\n * @property {boolean} [onFocusOnly=false] When the map's target has a `tabindex` attribute set,\r\n * the interaction will only handle events when the map has the focus.\r\n * @property {number} [maxDelta=1] Maximum mouse wheel delta.\r\n * @property {number} [duration=250] Animation duration in milliseconds.\r\n * @property {number} [timeout=80] Mouse wheel timeout duration in milliseconds.\r\n * @property {boolean} [useAnchor=true] Enable zooming using the mouse's\r\n * location as the anchor. When set to `false`, zooming in and out will zoom to\r\n * the center of the screen instead of zooming on the mouse's location.\r\n * @property {boolean} [constrainResolution=false] If true, the mouse wheel zoom\r\n * event will always animate to the closest zoom level after an interaction;\r\n * false means intermediary zoom levels are allowed.\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * Allows the user to zoom the map by scrolling the mouse wheel.\r\n * @api\r\n */\r\nclass MouseWheelZoom extends Interaction {\r\n  /**\r\n   * @param {Options} [options] Options.\r\n   */\r\n  constructor(options) {\r\n    options = options ? options : {};\r\n\r\n    super(\r\n      /** @type {import(\"./Interaction.js\").InteractionOptions} */ (options),\r\n    );\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.totalDelta_ = 0;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.lastDelta_ = 0;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.maxDelta_ = options.maxDelta !== undefined ? options.maxDelta : 1;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.duration_ = options.duration !== undefined ? options.duration : 250;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.timeout_ = options.timeout !== undefined ? options.timeout : 80;\r\n\r\n    /**\r\n     * @private\r\n     * @type {boolean}\r\n     */\r\n    this.useAnchor_ =\r\n      options.useAnchor !== undefined ? options.useAnchor : true;\r\n\r\n    /**\r\n     * @private\r\n     * @type {boolean}\r\n     */\r\n    this.constrainResolution_ =\r\n      options.constrainResolution !== undefined\r\n        ? options.constrainResolution\r\n        : false;\r\n\r\n    const condition = options.condition ? options.condition : always;\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"../events/condition.js\").Condition}\r\n     */\r\n    this.condition_ = options.onFocusOnly\r\n      ? all(focusWithTabindex, condition)\r\n      : condition;\r\n\r\n    /**\r\n     * @private\r\n     * @type {?import(\"../pixel.js\").Pixel}\r\n     */\r\n    this.lastAnchor_ = null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number|undefined}\r\n     */\r\n    this.startTime_ = undefined;\r\n\r\n    /**\r\n     * @private\r\n     * @type {ReturnType<typeof setTimeout>}\r\n     */\r\n    this.timeoutId_;\r\n\r\n    /**\r\n     * @private\r\n     * @type {Mode|undefined}\r\n     */\r\n    this.mode_ = undefined;\r\n\r\n    /**\r\n     * Trackpad events separated by this delay will be considered separate\r\n     * interactions.\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.trackpadEventGap_ = 400;\r\n\r\n    /**\r\n     * @private\r\n     * @type {ReturnType<typeof setTimeout>}\r\n     */\r\n    this.trackpadTimeoutId_;\r\n\r\n    /**\r\n     * The number of delta values per zoom level\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.deltaPerZoom_ = 300;\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  endInteraction_() {\r\n    this.trackpadTimeoutId_ = undefined;\r\n    const map = this.getMap();\r\n    if (!map) {\r\n      return;\r\n    }\r\n    const view = map.getView();\r\n    view.endInteraction(\r\n      undefined,\r\n      this.lastDelta_ ? (this.lastDelta_ > 0 ? 1 : -1) : 0,\r\n      this.lastAnchor_ ? map.getCoordinateFromPixel(this.lastAnchor_) : null,\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Handles the {@link module:ol/MapBrowserEvent~MapBrowserEvent map browser event} (if it was a mousewheel-event) and eventually\r\n   * zooms the map.\r\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\r\n   * @return {boolean} `false` to stop event propagation.\r\n   * @override\r\n   */\r\n  handleEvent(mapBrowserEvent) {\r\n    if (!this.condition_(mapBrowserEvent)) {\r\n      return true;\r\n    }\r\n    const type = mapBrowserEvent.type;\r\n    if (type !== EventType.WHEEL) {\r\n      return true;\r\n    }\r\n\r\n    const map = mapBrowserEvent.map;\r\n    const wheelEvent = /** @type {WheelEvent} */ (\r\n      mapBrowserEvent.originalEvent\r\n    );\r\n    wheelEvent.preventDefault();\r\n\r\n    if (this.useAnchor_) {\r\n      this.lastAnchor_ = mapBrowserEvent.pixel;\r\n    }\r\n\r\n    // Delta normalisation inspired by\r\n    // https://github.com/mapbox/mapbox-gl-js/blob/001c7b9/js/ui/handler/scroll_zoom.js\r\n    let delta;\r\n    if (mapBrowserEvent.type == EventType.WHEEL) {\r\n      delta = wheelEvent.deltaY;\r\n      if (wheelEvent.deltaMode === WheelEvent.DOM_DELTA_LINE) {\r\n        delta *= 40;\r\n      }\r\n    }\r\n\r\n    if (delta === 0) {\r\n      return false;\r\n    }\r\n    this.lastDelta_ = delta;\r\n\r\n    const now = Date.now();\r\n\r\n    if (this.startTime_ === undefined) {\r\n      this.startTime_ = now;\r\n    }\r\n\r\n    if (!this.mode_ || now - this.startTime_ > this.trackpadEventGap_) {\r\n      this.mode_ = Math.abs(delta) < 4 ? 'trackpad' : 'wheel';\r\n    }\r\n\r\n    const view = map.getView();\r\n    if (\r\n      this.mode_ === 'trackpad' &&\r\n      !(view.getConstrainResolution() || this.constrainResolution_)\r\n    ) {\r\n      if (this.trackpadTimeoutId_) {\r\n        clearTimeout(this.trackpadTimeoutId_);\r\n      } else {\r\n        if (view.getAnimating()) {\r\n          view.cancelAnimations();\r\n        }\r\n        view.beginInteraction();\r\n      }\r\n      this.trackpadTimeoutId_ = setTimeout(\r\n        this.endInteraction_.bind(this),\r\n        this.timeout_,\r\n      );\r\n      view.adjustZoom(\r\n        -delta / this.deltaPerZoom_,\r\n        this.lastAnchor_ ? map.getCoordinateFromPixel(this.lastAnchor_) : null,\r\n      );\r\n      this.startTime_ = now;\r\n      return false;\r\n    }\r\n\r\n    this.totalDelta_ += delta;\r\n\r\n    const timeLeft = Math.max(this.timeout_ - (now - this.startTime_), 0);\r\n\r\n    clearTimeout(this.timeoutId_);\r\n    this.timeoutId_ = setTimeout(\r\n      this.handleWheelZoom_.bind(this, map),\r\n      timeLeft,\r\n    );\r\n\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {import(\"../Map.js\").default} map Map.\r\n   */\r\n  handleWheelZoom_(map) {\r\n    const view = map.getView();\r\n    if (view.getAnimating()) {\r\n      view.cancelAnimations();\r\n    }\r\n    let delta =\r\n      -clamp(\r\n        this.totalDelta_,\r\n        -this.maxDelta_ * this.deltaPerZoom_,\r\n        this.maxDelta_ * this.deltaPerZoom_,\r\n      ) / this.deltaPerZoom_;\r\n    if (view.getConstrainResolution() || this.constrainResolution_) {\r\n      // view has a zoom constraint, zoom by 1\r\n      delta = delta ? (delta > 0 ? 1 : -1) : 0;\r\n    }\r\n    zoomByDelta(\r\n      view,\r\n      delta,\r\n      this.lastAnchor_ ? map.getCoordinateFromPixel(this.lastAnchor_) : null,\r\n      this.duration_,\r\n    );\r\n\r\n    this.mode_ = undefined;\r\n    this.totalDelta_ = 0;\r\n    this.lastAnchor_ = null;\r\n    this.startTime_ = undefined;\r\n    this.timeoutId_ = undefined;\r\n  }\r\n\r\n  /**\r\n   * Enable or disable using the mouse's location as an anchor when zooming\r\n   * @param {boolean} useAnchor true to zoom to the mouse's location, false\r\n   * to zoom to the center of the map\r\n   * @api\r\n   */\r\n  setMouseAnchor(useAnchor) {\r\n    this.useAnchor_ = useAnchor;\r\n    if (!useAnchor) {\r\n      this.lastAnchor_ = null;\r\n    }\r\n  }\r\n}\r\n\r\nexport default MouseWheelZoom;\r\n","/**\r\n * @module ol/interaction/PinchRotate\r\n */\r\nimport {FALSE} from '../functions.js';\r\nimport {disable} from '../rotationconstraint.js';\r\nimport PointerInteraction, {\r\n  centroid as centroidFromPointers,\r\n} from './Pointer.js';\r\n\r\n/**\r\n * @typedef {Object} Options\r\n * @property {number} [duration=250] The duration of the animation in\r\n * milliseconds.\r\n * @property {number} [threshold=0.3] Minimal angle in radians to start a rotation.\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * Allows the user to rotate the map by twisting with two fingers\r\n * on a touch screen.\r\n * @api\r\n */\r\nclass PinchRotate extends PointerInteraction {\r\n  /**\r\n   * @param {Options} [options] Options.\r\n   */\r\n  constructor(options) {\r\n    options = options ? options : {};\r\n\r\n    const pointerOptions = /** @type {import(\"./Pointer.js\").Options} */ (\r\n      options\r\n    );\r\n\r\n    if (!pointerOptions.stopDown) {\r\n      pointerOptions.stopDown = FALSE;\r\n    }\r\n\r\n    super(pointerOptions);\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"../coordinate.js\").Coordinate}\r\n     */\r\n    this.anchor_ = null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number|undefined}\r\n     */\r\n    this.lastAngle_ = undefined;\r\n\r\n    /**\r\n     * @private\r\n     * @type {boolean}\r\n     */\r\n    this.rotating_ = false;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.rotationDelta_ = 0.0;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.threshold_ = options.threshold !== undefined ? options.threshold : 0.3;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.duration_ = options.duration !== undefined ? options.duration : 250;\r\n  }\r\n\r\n  /**\r\n   * Handle pointer drag events.\r\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\r\n   * @override\r\n   */\r\n  handleDragEvent(mapBrowserEvent) {\r\n    let rotationDelta = 0.0;\r\n\r\n    const touch0 = this.targetPointers[0];\r\n    const touch1 = this.targetPointers[1];\r\n\r\n    // angle between touches\r\n    const angle = Math.atan2(\r\n      touch1.clientY - touch0.clientY,\r\n      touch1.clientX - touch0.clientX,\r\n    );\r\n\r\n    if (this.lastAngle_ !== undefined) {\r\n      const delta = angle - this.lastAngle_;\r\n      this.rotationDelta_ += delta;\r\n      if (!this.rotating_ && Math.abs(this.rotationDelta_) > this.threshold_) {\r\n        this.rotating_ = true;\r\n      }\r\n      rotationDelta = delta;\r\n    }\r\n    this.lastAngle_ = angle;\r\n\r\n    const map = mapBrowserEvent.map;\r\n    const view = map.getView();\r\n    if (view.getConstraints().rotation === disable) {\r\n      return;\r\n    }\r\n\r\n    // rotate anchor point.\r\n    // FIXME: should be the intersection point between the lines:\r\n    //     touch0,touch1 and previousTouch0,previousTouch1\r\n    this.anchor_ = map.getCoordinateFromPixelInternal(\r\n      map.getEventPixel(centroidFromPointers(this.targetPointers)),\r\n    );\r\n\r\n    // rotate\r\n    if (this.rotating_) {\r\n      map.render();\r\n      view.adjustRotationInternal(rotationDelta, this.anchor_);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handle pointer up events.\r\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\r\n   * @return {boolean} If the event was consumed.\r\n   * @override\r\n   */\r\n  handleUpEvent(mapBrowserEvent) {\r\n    if (this.targetPointers.length < 2) {\r\n      const map = mapBrowserEvent.map;\r\n      const view = map.getView();\r\n      view.endInteraction(this.duration_);\r\n      return false;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Handle pointer down events.\r\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\r\n   * @return {boolean} If the event was consumed.\r\n   * @override\r\n   */\r\n  handleDownEvent(mapBrowserEvent) {\r\n    if (this.targetPointers.length >= 2) {\r\n      const map = mapBrowserEvent.map;\r\n      this.anchor_ = null;\r\n      this.lastAngle_ = undefined;\r\n      this.rotating_ = false;\r\n      this.rotationDelta_ = 0.0;\r\n      if (!this.handlingDownUpSequence) {\r\n        map.getView().beginInteraction();\r\n      }\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n}\r\n\r\nexport default PinchRotate;\r\n","/**\r\n * @module ol/interaction/PinchZoom\r\n */\r\nimport {FALSE} from '../functions.js';\r\nimport PointerInteraction, {\r\n  centroid as centroidFromPointers,\r\n} from './Pointer.js';\r\n\r\n/**\r\n * @typedef {Object} Options\r\n * @property {number} [duration=400] Animation duration in milliseconds.\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * Allows the user to zoom the map by pinching with two fingers\r\n * on a touch screen.\r\n * @api\r\n */\r\nclass PinchZoom extends PointerInteraction {\r\n  /**\r\n   * @param {Options} [options] Options.\r\n   */\r\n  constructor(options) {\r\n    options = options ? options : {};\r\n\r\n    const pointerOptions = /** @type {import(\"./Pointer.js\").Options} */ (\r\n      options\r\n    );\r\n\r\n    if (!pointerOptions.stopDown) {\r\n      pointerOptions.stopDown = FALSE;\r\n    }\r\n\r\n    super(pointerOptions);\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"../coordinate.js\").Coordinate}\r\n     */\r\n    this.anchor_ = null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.duration_ = options.duration !== undefined ? options.duration : 400;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number|undefined}\r\n     */\r\n    this.lastDistance_ = undefined;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.lastScaleDelta_ = 1;\r\n  }\r\n\r\n  /**\r\n   * Handle pointer drag events.\r\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\r\n   * @override\r\n   */\r\n  handleDragEvent(mapBrowserEvent) {\r\n    let scaleDelta = 1.0;\r\n\r\n    const touch0 = this.targetPointers[0];\r\n    const touch1 = this.targetPointers[1];\r\n    const dx = touch0.clientX - touch1.clientX;\r\n    const dy = touch0.clientY - touch1.clientY;\r\n\r\n    // distance between touches\r\n    const distance = Math.sqrt(dx * dx + dy * dy);\r\n\r\n    if (this.lastDistance_ !== undefined) {\r\n      scaleDelta = this.lastDistance_ / distance;\r\n    }\r\n    this.lastDistance_ = distance;\r\n\r\n    const map = mapBrowserEvent.map;\r\n    const view = map.getView();\r\n\r\n    if (scaleDelta != 1.0) {\r\n      this.lastScaleDelta_ = scaleDelta;\r\n    }\r\n\r\n    // scale anchor point.\r\n    this.anchor_ = map.getCoordinateFromPixelInternal(\r\n      map.getEventPixel(centroidFromPointers(this.targetPointers)),\r\n    );\r\n\r\n    // scale, bypass the resolution constraint\r\n    map.render();\r\n    view.adjustResolutionInternal(scaleDelta, this.anchor_);\r\n  }\r\n\r\n  /**\r\n   * Handle pointer up events.\r\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\r\n   * @return {boolean} If the event was consumed.\r\n   * @override\r\n   */\r\n  handleUpEvent(mapBrowserEvent) {\r\n    if (this.targetPointers.length < 2) {\r\n      const map = mapBrowserEvent.map;\r\n      const view = map.getView();\r\n      const direction = this.lastScaleDelta_ > 1 ? 1 : -1;\r\n      view.endInteraction(this.duration_, direction);\r\n      return false;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Handle pointer down events.\r\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\r\n   * @return {boolean} If the event was consumed.\r\n   * @override\r\n   */\r\n  handleDownEvent(mapBrowserEvent) {\r\n    if (this.targetPointers.length >= 2) {\r\n      const map = mapBrowserEvent.map;\r\n      this.anchor_ = null;\r\n      this.lastDistance_ = undefined;\r\n      this.lastScaleDelta_ = 1;\r\n      if (!this.handlingDownUpSequence) {\r\n        map.getView().beginInteraction();\r\n      }\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n}\r\n\r\nexport default PinchZoom;\r\n","/**\r\n * @module ol/layer/Group\r\n */\r\nimport Collection from '../Collection.js';\r\nimport CollectionEventType from '../CollectionEventType.js';\r\nimport ObjectEventType from '../ObjectEventType.js';\r\nimport {assert} from '../asserts.js';\r\nimport Event from '../events/Event.js';\r\nimport EventType from '../events/EventType.js';\r\nimport {listen, unlistenByKey} from '../events.js';\r\nimport {getIntersection} from '../extent.js';\r\nimport {clear} from '../obj.js';\r\nimport {getUid} from '../util.js';\r\nimport BaseLayer from './Base.js';\r\n\r\n/**\r\n * @typedef {'addlayer'|'removelayer'} GroupEventType\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * A layer group triggers 'addlayer' and 'removelayer' events when layers are added to or removed from\r\n * the group or one of its child groups.  When a layer group is added to or removed from another layer group,\r\n * a single event will be triggered (instead of one per layer in the group added or removed).\r\n */\r\nexport class GroupEvent extends Event {\r\n  /**\r\n   * @param {GroupEventType} type The event type.\r\n   * @param {BaseLayer} layer The layer.\r\n   */\r\n  constructor(type, layer) {\r\n    super(type);\r\n\r\n    /**\r\n     * The added or removed layer.\r\n     * @type {BaseLayer}\r\n     * @api\r\n     */\r\n    this.layer = layer;\r\n  }\r\n}\r\n\r\n/***\r\n * @template Return\r\n * @typedef {import(\"../Observable\").OnSignature<import(\"../Observable\").EventTypes, import(\"../events/Event.js\").default, Return> &\r\n *   import(\"../Observable\").OnSignature<import(\"./Base\").BaseLayerObjectEventTypes|\r\n *     'change:layers', import(\"../Object\").ObjectEvent, Return> &\r\n *   import(\"../Observable\").CombinedOnSignature<import(\"../Observable\").EventTypes|import(\"./Base\").BaseLayerObjectEventTypes|'change:layers', Return>} GroupOnSignature\r\n */\r\n\r\n/**\r\n * @typedef {Object} Options\r\n * @property {number} [opacity=1] Opacity (0, 1).\r\n * @property {boolean} [visible=true] Visibility.\r\n * @property {import(\"../extent.js\").Extent} [extent] The bounding extent for layer rendering.  The layer will not be\r\n * rendered outside of this extent.\r\n * @property {number} [zIndex] The z-index for layer rendering.  At rendering time, the layers\r\n * will be ordered, first by Z-index and then by position. When `undefined`, a `zIndex` of 0 is assumed\r\n * for layers that are added to the map's `layers` collection, or `Infinity` when the layer's `setMap()`\r\n * method was used.\r\n * @property {number} [minResolution] The minimum resolution (inclusive) at which this layer will be\r\n * visible.\r\n * @property {number} [maxResolution] The maximum resolution (exclusive) below which this layer will\r\n * be visible.\r\n * @property {number} [minZoom] The minimum view zoom level (exclusive) above which this layer will be\r\n * visible.\r\n * @property {number} [maxZoom] The maximum view zoom level (inclusive) at which this layer will\r\n * be visible.\r\n * @property {Array<import(\"./Base.js\").default>|Collection<import(\"./Base.js\").default>} [layers] Child layers.\r\n * @property {Object<string, *>} [properties] Arbitrary observable properties. Can be accessed with `#get()` and `#set()`.\r\n */\r\n\r\n/**\r\n * @enum {string}\r\n * @private\r\n */\r\nconst Property = {\r\n  LAYERS: 'layers',\r\n};\r\n\r\n/**\r\n * @classdesc\r\n * A {@link module:ol/Collection~Collection} of layers that are handled together.\r\n *\r\n * A generic `change` event is triggered when the group/Collection changes.\r\n *\r\n * @api\r\n */\r\nclass LayerGroup extends BaseLayer {\r\n  /**\r\n   * @param {Options} [options] Layer options.\r\n   */\r\n  constructor(options) {\r\n    options = options || {};\r\n    const baseOptions = /** @type {Options} */ (Object.assign({}, options));\r\n    delete baseOptions.layers;\r\n\r\n    let layers = options.layers;\r\n\r\n    super(baseOptions);\r\n\r\n    /***\r\n     * @type {GroupOnSignature<import(\"../events\").EventsKey>}\r\n     */\r\n    this.on;\r\n\r\n    /***\r\n     * @type {GroupOnSignature<import(\"../events\").EventsKey>}\r\n     */\r\n    this.once;\r\n\r\n    /***\r\n     * @type {GroupOnSignature<void>}\r\n     */\r\n    this.un;\r\n\r\n    /**\r\n     * @private\r\n     * @type {Array<import(\"../events.js\").EventsKey>}\r\n     */\r\n    this.layersListenerKeys_ = [];\r\n\r\n    /**\r\n     * @private\r\n     * @type {Object<string, Array<import(\"../events.js\").EventsKey>>}\r\n     */\r\n    this.listenerKeys_ = {};\r\n\r\n    this.addChangeListener(Property.LAYERS, this.handleLayersChanged_);\r\n\r\n    if (layers) {\r\n      if (Array.isArray(layers)) {\r\n        layers = new Collection(layers.slice(), {unique: true});\r\n      } else {\r\n        assert(\r\n          typeof (/** @type {?} */ (layers).getArray) === 'function',\r\n          'Expected `layers` to be an array or a `Collection`',\r\n        );\r\n      }\r\n    } else {\r\n      layers = new Collection(undefined, {unique: true});\r\n    }\r\n\r\n    this.setLayers(layers);\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  handleLayerChange_() {\r\n    this.changed();\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  handleLayersChanged_() {\r\n    this.layersListenerKeys_.forEach(unlistenByKey);\r\n    this.layersListenerKeys_.length = 0;\r\n\r\n    const layers = this.getLayers();\r\n    this.layersListenerKeys_.push(\r\n      listen(layers, CollectionEventType.ADD, this.handleLayersAdd_, this),\r\n      listen(\r\n        layers,\r\n        CollectionEventType.REMOVE,\r\n        this.handleLayersRemove_,\r\n        this,\r\n      ),\r\n    );\r\n\r\n    for (const id in this.listenerKeys_) {\r\n      this.listenerKeys_[id].forEach(unlistenByKey);\r\n    }\r\n    clear(this.listenerKeys_);\r\n\r\n    const layersArray = layers.getArray();\r\n    for (let i = 0, ii = layersArray.length; i < ii; i++) {\r\n      const layer = layersArray[i];\r\n      this.registerLayerListeners_(layer);\r\n      this.dispatchEvent(new GroupEvent('addlayer', layer));\r\n    }\r\n    this.changed();\r\n  }\r\n\r\n  /**\r\n   * @param {BaseLayer} layer The layer.\r\n   */\r\n  registerLayerListeners_(layer) {\r\n    const listenerKeys = [\r\n      listen(\r\n        layer,\r\n        ObjectEventType.PROPERTYCHANGE,\r\n        this.handleLayerChange_,\r\n        this,\r\n      ),\r\n      listen(layer, EventType.CHANGE, this.handleLayerChange_, this),\r\n    ];\r\n\r\n    if (layer instanceof LayerGroup) {\r\n      listenerKeys.push(\r\n        listen(layer, 'addlayer', this.handleLayerGroupAdd_, this),\r\n        listen(layer, 'removelayer', this.handleLayerGroupRemove_, this),\r\n      );\r\n    }\r\n\r\n    this.listenerKeys_[getUid(layer)] = listenerKeys;\r\n  }\r\n\r\n  /**\r\n   * @param {GroupEvent} event The layer group event.\r\n   */\r\n  handleLayerGroupAdd_(event) {\r\n    this.dispatchEvent(new GroupEvent('addlayer', event.layer));\r\n  }\r\n\r\n  /**\r\n   * @param {GroupEvent} event The layer group event.\r\n   */\r\n  handleLayerGroupRemove_(event) {\r\n    this.dispatchEvent(new GroupEvent('removelayer', event.layer));\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../Collection.js\").CollectionEvent<import(\"./Base.js\").default>} collectionEvent CollectionEvent.\r\n   * @private\r\n   */\r\n  handleLayersAdd_(collectionEvent) {\r\n    const layer = collectionEvent.element;\r\n    this.registerLayerListeners_(layer);\r\n    this.dispatchEvent(new GroupEvent('addlayer', layer));\r\n    this.changed();\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../Collection.js\").CollectionEvent<import(\"./Base.js\").default>} collectionEvent CollectionEvent.\r\n   * @private\r\n   */\r\n  handleLayersRemove_(collectionEvent) {\r\n    const layer = collectionEvent.element;\r\n    const key = getUid(layer);\r\n    this.listenerKeys_[key].forEach(unlistenByKey);\r\n    delete this.listenerKeys_[key];\r\n    this.dispatchEvent(new GroupEvent('removelayer', layer));\r\n    this.changed();\r\n  }\r\n\r\n  /**\r\n   * Returns the {@link module:ol/Collection~Collection collection} of {@link module:ol/layer/Layer~Layer layers}\r\n   * in this group.\r\n   * @return {!Collection<import(\"./Base.js\").default>} Collection of\r\n   *   {@link module:ol/layer/Base~BaseLayer layers} that are part of this group.\r\n   * @observable\r\n   * @api\r\n   */\r\n  getLayers() {\r\n    return /** @type {!Collection<import(\"./Base.js\").default>} */ (\r\n      this.get(Property.LAYERS)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Set the {@link module:ol/Collection~Collection collection} of {@link module:ol/layer/Layer~Layer layers}\r\n   * in this group.\r\n   * @param {!Collection<import(\"./Base.js\").default>} layers Collection of\r\n   *   {@link module:ol/layer/Base~BaseLayer layers} that are part of this group.\r\n   * @observable\r\n   * @api\r\n   */\r\n  setLayers(layers) {\r\n    const collection = this.getLayers();\r\n    if (collection) {\r\n      const currentLayers = collection.getArray();\r\n      for (let i = 0, ii = currentLayers.length; i < ii; ++i) {\r\n        this.dispatchEvent(new GroupEvent('removelayer', currentLayers[i]));\r\n      }\r\n    }\r\n\r\n    this.set(Property.LAYERS, layers);\r\n  }\r\n\r\n  /**\r\n   * @param {Array<import(\"./Layer.js\").default>} [array] Array of layers (to be modified in place).\r\n   * @return {Array<import(\"./Layer.js\").default>} Array of layers.\r\n   * @override\r\n   */\r\n  getLayersArray(array) {\r\n    array = array !== undefined ? array : [];\r\n    this.getLayers().forEach(function (layer) {\r\n      layer.getLayersArray(array);\r\n    });\r\n    return array;\r\n  }\r\n\r\n  /**\r\n   * Get the layer states list and use this groups z-index as the default\r\n   * for all layers in this and nested groups, if it is unset at this point.\r\n   * If dest is not provided and this group's z-index is undefined\r\n   * 0 is used a the default z-index.\r\n   * @param {Array<import(\"./Layer.js\").State>} [dest] Optional list\r\n   * of layer states (to be modified in place).\r\n   * @return {Array<import(\"./Layer.js\").State>} List of layer states.\r\n   * @override\r\n   */\r\n  getLayerStatesArray(dest) {\r\n    const states = dest !== undefined ? dest : [];\r\n    const pos = states.length;\r\n\r\n    this.getLayers().forEach(function (layer) {\r\n      layer.getLayerStatesArray(states);\r\n    });\r\n\r\n    const ownLayerState = this.getLayerState();\r\n    let defaultZIndex = ownLayerState.zIndex;\r\n    if (!dest && ownLayerState.zIndex === undefined) {\r\n      defaultZIndex = 0;\r\n    }\r\n    for (let i = pos, ii = states.length; i < ii; i++) {\r\n      const layerState = states[i];\r\n      layerState.opacity *= ownLayerState.opacity;\r\n      layerState.visible = layerState.visible && ownLayerState.visible;\r\n      layerState.maxResolution = Math.min(\r\n        layerState.maxResolution,\r\n        ownLayerState.maxResolution,\r\n      );\r\n      layerState.minResolution = Math.max(\r\n        layerState.minResolution,\r\n        ownLayerState.minResolution,\r\n      );\r\n      layerState.minZoom = Math.max(layerState.minZoom, ownLayerState.minZoom);\r\n      layerState.maxZoom = Math.min(layerState.maxZoom, ownLayerState.maxZoom);\r\n      if (ownLayerState.extent !== undefined) {\r\n        if (layerState.extent !== undefined) {\r\n          layerState.extent = getIntersection(\r\n            layerState.extent,\r\n            ownLayerState.extent,\r\n          );\r\n        } else {\r\n          layerState.extent = ownLayerState.extent;\r\n        }\r\n      }\r\n      if (layerState.zIndex === undefined) {\r\n        layerState.zIndex = defaultZIndex;\r\n      }\r\n    }\r\n\r\n    return states;\r\n  }\r\n\r\n  /**\r\n   * @return {import(\"../source/Source.js\").State} Source state.\r\n   * @override\r\n   */\r\n  getSourceState() {\r\n    return 'ready';\r\n  }\r\n}\r\n\r\nexport default LayerGroup;\r\n","/**\r\n * @module ol/layer/Base\r\n */\r\nimport BaseObject from '../Object.js';\r\nimport {assert} from '../asserts.js';\r\nimport {clamp} from '../math.js';\r\nimport {abstract} from '../util.js';\r\nimport LayerProperty from './Property.js';\r\n\r\n/**\r\n * A css color, or a function called with a view resolution returning a css color.\r\n *\r\n * @typedef {string|function(number):string} BackgroundColor\r\n * @api\r\n */\r\n\r\n/**\r\n * @typedef {import(\"../ObjectEventType\").Types|'change:extent'|'change:maxResolution'|'change:maxZoom'|\r\n *    'change:minResolution'|'change:minZoom'|'change:opacity'|'change:visible'|'change:zIndex'} BaseLayerObjectEventTypes\r\n */\r\n\r\n/***\r\n * @template Return\r\n * @typedef {import(\"../Observable\").OnSignature<import(\"../Observable\").EventTypes, import(\"../events/Event.js\").default, Return> &\r\n *   import(\"../Observable\").OnSignature<BaseLayerObjectEventTypes, import(\"../Object\").ObjectEvent, Return> &\r\n *   import(\"../Observable\").CombinedOnSignature<import(\"../Observable\").EventTypes|BaseLayerObjectEventTypes, Return>} BaseLayerOnSignature\r\n */\r\n\r\n/**\r\n * @typedef {Object} Options\r\n * @property {string} [className='ol-layer'] A CSS class name to set to the layer element.\r\n * @property {number} [opacity=1] Opacity (0, 1).\r\n * @property {boolean} [visible=true] Visibility.\r\n * @property {import(\"../extent.js\").Extent} [extent] The bounding extent for layer rendering.  The layer will not be\r\n * rendered outside of this extent.\r\n * @property {number | undefined} [zIndex] The z-index for layer rendering.  At rendering time, the layers\r\n * will be ordered, first by Z-index and then by position. When `undefined`, a `zIndex` of 0 is assumed\r\n * for layers that are added to the map's `layers` collection, or `Infinity` when the layer's `setMap()`\r\n * method was used.\r\n * @property {number} [minResolution] The minimum resolution (inclusive) at which this layer will be\r\n * visible.\r\n * @property {number} [maxResolution] The maximum resolution (exclusive) below which this layer will\r\n * be visible.\r\n * @property {number} [minZoom] The minimum view zoom level (exclusive) above which this layer will be\r\n * visible.\r\n * @property {number} [maxZoom] The maximum view zoom level (inclusive) at which this layer will\r\n * be visible.\r\n * @property {BackgroundColor} [background] Background color for the layer. If not specified, no background\r\n * will be rendered.\r\n * @property {Object<string, *>} [properties] Arbitrary observable properties. Can be accessed with `#get()` and `#set()`.\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * Abstract base class; normally only used for creating subclasses and not\r\n * instantiated in apps.\r\n * Note that with {@link module:ol/layer/Base~BaseLayer} and all its subclasses, any property set in\r\n * the options is set as a {@link module:ol/Object~BaseObject} property on the layer object, so\r\n * is observable, and has get/set accessors.\r\n *\r\n * @api\r\n */\r\nclass BaseLayer extends BaseObject {\r\n  /**\r\n   * @param {Options} options Layer options.\r\n   */\r\n  constructor(options) {\r\n    super();\r\n\r\n    /***\r\n     * @type {BaseLayerOnSignature<import(\"../events\").EventsKey>}\r\n     */\r\n    this.on;\r\n\r\n    /***\r\n     * @type {BaseLayerOnSignature<import(\"../events\").EventsKey>}\r\n     */\r\n    this.once;\r\n\r\n    /***\r\n     * @type {BaseLayerOnSignature<void>}\r\n     */\r\n    this.un;\r\n\r\n    /**\r\n     * @type {BackgroundColor|false}\r\n     * @private\r\n     */\r\n    this.background_ = options.background;\r\n\r\n    /**\r\n     * @type {Object<string, *>}\r\n     */\r\n    const properties = Object.assign({}, options);\r\n    if (typeof options.properties === 'object') {\r\n      delete properties.properties;\r\n      Object.assign(properties, options.properties);\r\n    }\r\n\r\n    properties[LayerProperty.OPACITY] =\r\n      options.opacity !== undefined ? options.opacity : 1;\r\n    assert(\r\n      typeof properties[LayerProperty.OPACITY] === 'number',\r\n      'Layer opacity must be a number',\r\n    );\r\n\r\n    properties[LayerProperty.VISIBLE] =\r\n      options.visible !== undefined ? options.visible : true;\r\n    properties[LayerProperty.Z_INDEX] = options.zIndex;\r\n    properties[LayerProperty.MAX_RESOLUTION] =\r\n      options.maxResolution !== undefined ? options.maxResolution : Infinity;\r\n    properties[LayerProperty.MIN_RESOLUTION] =\r\n      options.minResolution !== undefined ? options.minResolution : 0;\r\n    properties[LayerProperty.MIN_ZOOM] =\r\n      options.minZoom !== undefined ? options.minZoom : -Infinity;\r\n    properties[LayerProperty.MAX_ZOOM] =\r\n      options.maxZoom !== undefined ? options.maxZoom : Infinity;\r\n\r\n    /**\r\n     * @type {string}\r\n     * @private\r\n     */\r\n    this.className_ =\r\n      properties.className !== undefined ? properties.className : 'ol-layer';\r\n    delete properties.className;\r\n\r\n    this.setProperties(properties);\r\n\r\n    /**\r\n     * @type {import(\"./Layer.js\").State}\r\n     * @private\r\n     */\r\n    this.state_ = null;\r\n  }\r\n\r\n  /**\r\n   * Get the background for this layer.\r\n   * @return {BackgroundColor|false} Layer background.\r\n   */\r\n  getBackground() {\r\n    return this.background_;\r\n  }\r\n\r\n  /**\r\n   * @return {string} CSS class name.\r\n   */\r\n  getClassName() {\r\n    return this.className_;\r\n  }\r\n\r\n  /**\r\n   * This method is not meant to be called by layers or layer renderers because the state\r\n   * is incorrect if the layer is included in a layer group.\r\n   *\r\n   * @param {boolean} [managed] Layer is managed.\r\n   * @return {import(\"./Layer.js\").State} Layer state.\r\n   */\r\n  getLayerState(managed) {\r\n    /** @type {import(\"./Layer.js\").State} */\r\n    const state =\r\n      this.state_ ||\r\n      /** @type {?} */ ({\r\n        layer: this,\r\n        managed: managed === undefined ? true : managed,\r\n      });\r\n    const zIndex = this.getZIndex();\r\n    state.opacity = clamp(Math.round(this.getOpacity() * 100) / 100, 0, 1);\r\n    state.visible = this.getVisible();\r\n    state.extent = this.getExtent();\r\n    state.zIndex = zIndex === undefined && !state.managed ? Infinity : zIndex;\r\n    state.maxResolution = this.getMaxResolution();\r\n    state.minResolution = Math.max(this.getMinResolution(), 0);\r\n    state.minZoom = this.getMinZoom();\r\n    state.maxZoom = this.getMaxZoom();\r\n    this.state_ = state;\r\n\r\n    return state;\r\n  }\r\n\r\n  /**\r\n   * @abstract\r\n   * @param {Array<import(\"./Layer.js\").default>} [array] Array of layers (to be\r\n   *     modified in place).\r\n   * @return {Array<import(\"./Layer.js\").default>} Array of layers.\r\n   */\r\n  getLayersArray(array) {\r\n    return abstract();\r\n  }\r\n\r\n  /**\r\n   * @abstract\r\n   * @param {Array<import(\"./Layer.js\").State>} [states] Optional list of layer\r\n   *     states (to be modified in place).\r\n   * @return {Array<import(\"./Layer.js\").State>} List of layer states.\r\n   */\r\n  getLayerStatesArray(states) {\r\n    return abstract();\r\n  }\r\n\r\n  /**\r\n   * Return the {@link module:ol/extent~Extent extent} of the layer or `undefined` if it\r\n   * will be visible regardless of extent.\r\n   * @return {import(\"../extent.js\").Extent|undefined} The layer extent.\r\n   * @observable\r\n   * @api\r\n   */\r\n  getExtent() {\r\n    return /** @type {import(\"../extent.js\").Extent|undefined} */ (\r\n      this.get(LayerProperty.EXTENT)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Return the maximum resolution of the layer. Returns Infinity if\r\n   * the layer has no maximum resolution set.\r\n   * @return {number} The maximum resolution of the layer.\r\n   * @observable\r\n   * @api\r\n   */\r\n  getMaxResolution() {\r\n    return /** @type {number} */ (this.get(LayerProperty.MAX_RESOLUTION));\r\n  }\r\n\r\n  /**\r\n   * Return the minimum resolution of the layer. Returns 0 if\r\n   * the layer has no minimum resolution set.\r\n   * @return {number} The minimum resolution of the layer.\r\n   * @observable\r\n   * @api\r\n   */\r\n  getMinResolution() {\r\n    return /** @type {number} */ (this.get(LayerProperty.MIN_RESOLUTION));\r\n  }\r\n\r\n  /**\r\n   * Return the minimum zoom level of the layer. Returns -Infinity if\r\n   * the layer has no minimum zoom set.\r\n   * @return {number} The minimum zoom level of the layer.\r\n   * @observable\r\n   * @api\r\n   */\r\n  getMinZoom() {\r\n    return /** @type {number} */ (this.get(LayerProperty.MIN_ZOOM));\r\n  }\r\n\r\n  /**\r\n   * Return the maximum zoom level of the layer. Returns Infinity if\r\n   * the layer has no maximum zoom set.\r\n   * @return {number} The maximum zoom level of the layer.\r\n   * @observable\r\n   * @api\r\n   */\r\n  getMaxZoom() {\r\n    return /** @type {number} */ (this.get(LayerProperty.MAX_ZOOM));\r\n  }\r\n\r\n  /**\r\n   * Return the opacity of the layer (between 0 and 1).\r\n   * @return {number} The opacity of the layer.\r\n   * @observable\r\n   * @api\r\n   */\r\n  getOpacity() {\r\n    return /** @type {number} */ (this.get(LayerProperty.OPACITY));\r\n  }\r\n\r\n  /**\r\n   * @abstract\r\n   * @return {import(\"../source/Source.js\").State} Source state.\r\n   */\r\n  getSourceState() {\r\n    return abstract();\r\n  }\r\n\r\n  /**\r\n   * Return the value of this layer's `visible` property. To find out whether the layer\r\n   * is visible on a map, use `isVisible()` instead.\r\n   * @return {boolean} The value of the `visible` property of the layer.\r\n   * @observable\r\n   * @api\r\n   */\r\n  getVisible() {\r\n    return /** @type {boolean} */ (this.get(LayerProperty.VISIBLE));\r\n  }\r\n\r\n  /**\r\n   * Return the Z-index of the layer, which is used to order layers before\r\n   * rendering. Returns undefined if the layer is unmanaged.\r\n   * @return {number|undefined} The Z-index of the layer.\r\n   * @observable\r\n   * @api\r\n   */\r\n  getZIndex() {\r\n    return /** @type {number|undefined} */ (this.get(LayerProperty.Z_INDEX));\r\n  }\r\n\r\n  /**\r\n   * Sets the background color.\r\n   * @param {BackgroundColor} [background] Background color.\r\n   */\r\n  setBackground(background) {\r\n    this.background_ = background;\r\n    this.changed();\r\n  }\r\n\r\n  /**\r\n   * Set the extent at which the layer is visible.  If `undefined`, the layer\r\n   * will be visible at all extents.\r\n   * @param {import(\"../extent.js\").Extent|undefined} extent The extent of the layer.\r\n   * @observable\r\n   * @api\r\n   */\r\n  setExtent(extent) {\r\n    this.set(LayerProperty.EXTENT, extent);\r\n  }\r\n\r\n  /**\r\n   * Set the maximum resolution at which the layer is visible.\r\n   * @param {number} maxResolution The maximum resolution of the layer.\r\n   * @observable\r\n   * @api\r\n   */\r\n  setMaxResolution(maxResolution) {\r\n    this.set(LayerProperty.MAX_RESOLUTION, maxResolution);\r\n  }\r\n\r\n  /**\r\n   * Set the minimum resolution at which the layer is visible.\r\n   * @param {number} minResolution The minimum resolution of the layer.\r\n   * @observable\r\n   * @api\r\n   */\r\n  setMinResolution(minResolution) {\r\n    this.set(LayerProperty.MIN_RESOLUTION, minResolution);\r\n  }\r\n\r\n  /**\r\n   * Set the maximum zoom (exclusive) at which the layer is visible.\r\n   * Note that the zoom levels for layer visibility are based on the\r\n   * view zoom level, which may be different from a tile source zoom level.\r\n   * @param {number} maxZoom The maximum zoom of the layer.\r\n   * @observable\r\n   * @api\r\n   */\r\n  setMaxZoom(maxZoom) {\r\n    this.set(LayerProperty.MAX_ZOOM, maxZoom);\r\n  }\r\n\r\n  /**\r\n   * Set the minimum zoom (inclusive) at which the layer is visible.\r\n   * Note that the zoom levels for layer visibility are based on the\r\n   * view zoom level, which may be different from a tile source zoom level.\r\n   * @param {number} minZoom The minimum zoom of the layer.\r\n   * @observable\r\n   * @api\r\n   */\r\n  setMinZoom(minZoom) {\r\n    this.set(LayerProperty.MIN_ZOOM, minZoom);\r\n  }\r\n\r\n  /**\r\n   * Set the opacity of the layer, allowed values range from 0 to 1.\r\n   * @param {number} opacity The opacity of the layer.\r\n   * @observable\r\n   * @api\r\n   */\r\n  setOpacity(opacity) {\r\n    assert(typeof opacity === 'number', 'Layer opacity must be a number');\r\n    this.set(LayerProperty.OPACITY, opacity);\r\n  }\r\n\r\n  /**\r\n   * Set the visibility of the layer (`true` or `false`).\r\n   * @param {boolean} visible The visibility of the layer.\r\n   * @observable\r\n   * @api\r\n   */\r\n  setVisible(visible) {\r\n    this.set(LayerProperty.VISIBLE, visible);\r\n  }\r\n\r\n  /**\r\n   * Set Z-index of the layer, which is used to order layers before rendering.\r\n   * The default Z-index is 0.\r\n   * @param {number} zindex The z-index of the layer.\r\n   * @observable\r\n   * @api\r\n   */\r\n  setZIndex(zindex) {\r\n    this.set(LayerProperty.Z_INDEX, zindex);\r\n  }\r\n\r\n  /**\r\n   * Clean up.\r\n   * @override\r\n   */\r\n  disposeInternal() {\r\n    if (this.state_) {\r\n      this.state_.layer = null;\r\n      this.state_ = null;\r\n    }\r\n    super.disposeInternal();\r\n  }\r\n}\r\n\r\nexport default BaseLayer;\r\n","/**\r\n * @module ol/layer/Property\r\n */\r\n\r\n/**\r\n * @enum {string}\r\n */\r\nexport default {\r\n  OPACITY: 'opacity',\r\n  VISIBLE: 'visible',\r\n  EXTENT: 'extent',\r\n  Z_INDEX: 'zIndex',\r\n  MAX_RESOLUTION: 'maxResolution',\r\n  MIN_RESOLUTION: 'minResolution',\r\n  MAX_ZOOM: 'maxZoom',\r\n  MIN_ZOOM: 'minZoom',\r\n  SOURCE: 'source',\r\n  MAP: 'map',\r\n};\r\n","/**\r\n * @module ol/layer/Layer\r\n */\r\nimport View from '../View.js';\r\nimport {assert} from '../asserts.js';\r\nimport EventType from '../events/EventType.js';\r\nimport {listen, unlistenByKey} from '../events.js';\r\nimport {intersects} from '../extent.js';\r\nimport RenderEventType from '../render/EventType.js';\r\nimport BaseLayer from './Base.js';\r\nimport LayerProperty from './Property.js';\r\n\r\n/**\r\n * @typedef {function(import(\"../Map.js\").FrameState):HTMLElement} RenderFunction\r\n */\r\n\r\n/**\r\n * @typedef {'sourceready'|'change:source'} LayerEventType\r\n */\r\n\r\n/***\r\n * @template Return\r\n * @typedef {import(\"../Observable\").OnSignature<import(\"../Observable\").EventTypes, import(\"../events/Event.js\").default, Return> &\r\n *   import(\"../Observable\").OnSignature<import(\"./Base\").BaseLayerObjectEventTypes|\r\n *     LayerEventType, import(\"../Object\").ObjectEvent, Return> &\r\n *   import(\"../Observable\").OnSignature<import(\"../render/EventType\").LayerRenderEventTypes, import(\"../render/Event\").default, Return> &\r\n *   import(\"../Observable\").CombinedOnSignature<import(\"../Observable\").EventTypes|import(\"./Base\").BaseLayerObjectEventTypes|LayerEventType|\r\n *     import(\"../render/EventType\").LayerRenderEventTypes, Return>} LayerOnSignature\r\n */\r\n\r\n/**\r\n * @template {import(\"../source/Source.js\").default} [SourceType=import(\"../source/Source.js\").default]\r\n * @typedef {Object} Options\r\n * @property {string} [className='ol-layer'] A CSS class name to set to the layer element.\r\n * @property {number} [opacity=1] Opacity (0, 1).\r\n * @property {boolean} [visible=true] Visibility.\r\n * @property {import(\"../extent.js\").Extent} [extent] The bounding extent for layer rendering.  The layer will not be\r\n * rendered outside of this extent.\r\n * @property {number} [zIndex] The z-index for layer rendering.  At rendering time, the layers\r\n * will be ordered, first by Z-index and then by position. When `undefined`, a `zIndex` of 0 is assumed\r\n * for layers that are added to the map's `layers` collection, or `Infinity` when the layer's `setMap()`\r\n * method was used.\r\n * @property {number} [minResolution] The minimum resolution (inclusive) at which this layer will be\r\n * visible.\r\n * @property {number} [maxResolution] The maximum resolution (exclusive) below which this layer will\r\n * be visible.\r\n * @property {number} [minZoom] The minimum view zoom level (exclusive) above which this layer will be\r\n * visible.\r\n * @property {number} [maxZoom] The maximum view zoom level (inclusive) at which this layer will\r\n * be visible.\r\n * @property {SourceType} [source] Source for this layer.  If not provided to the constructor,\r\n * the source can be set by calling {@link module:ol/layer/Layer~Layer#setSource layer.setSource(source)} after\r\n * construction.\r\n * @property {import(\"../Map.js\").default|null} [map] Map.\r\n * @property {RenderFunction} [render] Render function. Takes the frame state as input and is expected to return an\r\n * HTML element. Will overwrite the default rendering for the layer.\r\n * @property {Object<string, *>} [properties] Arbitrary observable properties. Can be accessed with `#get()` and `#set()`.\r\n */\r\n\r\n/**\r\n * @typedef {Object} State\r\n * @property {import(\"./Layer.js\").default} layer Layer.\r\n * @property {number} opacity Opacity, the value is rounded to two digits to appear after the decimal point.\r\n * @property {boolean} visible Visible.\r\n * @property {boolean} managed Managed.\r\n * @property {import(\"../extent.js\").Extent} [extent] Extent.\r\n * @property {number} zIndex ZIndex.\r\n * @property {number} maxResolution Maximum resolution.\r\n * @property {number} minResolution Minimum resolution.\r\n * @property {number} minZoom Minimum zoom.\r\n * @property {number} maxZoom Maximum zoom.\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * Base class from which all layer types are derived. This should only be instantiated\r\n * in the case where a custom layer is added to the map with a custom `render` function.\r\n * Such a function can be specified in the `options` object, and is expected to return an HTML element.\r\n *\r\n * A visual representation of raster or vector map data.\r\n * Layers group together those properties that pertain to how the data is to be\r\n * displayed, irrespective of the source of that data.\r\n *\r\n * Layers are usually added to a map with [map.addLayer()]{@link import(\"../Map.js\").default#addLayer}.\r\n * Components like {@link module:ol/interaction/Draw~Draw} use unmanaged layers\r\n * internally. These unmanaged layers are associated with the map using\r\n * [layer.setMap()]{@link module:ol/layer/Layer~Layer#setMap} instead.\r\n *\r\n * A generic `change` event is fired when the state of the source changes.\r\n * A `sourceready` event is fired when the layer's source is ready.\r\n *\r\n * @fires import(\"../render/Event.js\").RenderEvent#prerender\r\n * @fires import(\"../render/Event.js\").RenderEvent#postrender\r\n * @fires import(\"../events/Event.js\").BaseEvent#sourceready\r\n *\r\n * @template {import(\"../source/Source.js\").default} [SourceType=import(\"../source/Source.js\").default]\r\n * @template {import(\"../renderer/Layer.js\").default} [RendererType=import(\"../renderer/Layer.js\").default]\r\n * @api\r\n */\r\nclass Layer extends BaseLayer {\r\n  /**\r\n   * @param {Options<SourceType>} options Layer options.\r\n   */\r\n  constructor(options) {\r\n    const baseOptions = Object.assign({}, options);\r\n    delete baseOptions.source;\r\n\r\n    super(baseOptions);\r\n\r\n    /***\r\n     * @type {LayerOnSignature<import(\"../events\").EventsKey>}\r\n     */\r\n    this.on;\r\n\r\n    /***\r\n     * @type {LayerOnSignature<import(\"../events\").EventsKey>}\r\n     */\r\n    this.once;\r\n\r\n    /***\r\n     * @type {LayerOnSignature<void>}\r\n     */\r\n    this.un;\r\n\r\n    /**\r\n     * @private\r\n     * @type {?import(\"../events.js\").EventsKey}\r\n     */\r\n    this.mapPrecomposeKey_ = null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {?import(\"../events.js\").EventsKey}\r\n     */\r\n    this.mapRenderKey_ = null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {?import(\"../events.js\").EventsKey}\r\n     */\r\n    this.sourceChangeKey_ = null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {RendererType}\r\n     */\r\n    this.renderer_ = null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {boolean}\r\n     */\r\n    this.sourceReady_ = false;\r\n\r\n    /**\r\n     * @protected\r\n     * @type {boolean}\r\n     */\r\n    this.rendered = false;\r\n\r\n    // Overwrite default render method with a custom one\r\n    if (options.render) {\r\n      this.render = options.render;\r\n    }\r\n\r\n    if (options.map) {\r\n      this.setMap(options.map);\r\n    }\r\n\r\n    this.addChangeListener(\r\n      LayerProperty.SOURCE,\r\n      this.handleSourcePropertyChange_,\r\n    );\r\n\r\n    const source = options.source\r\n      ? /** @type {SourceType} */ (options.source)\r\n      : null;\r\n    this.setSource(source);\r\n  }\r\n\r\n  /**\r\n   * @param {Array<import(\"./Layer.js\").default>} [array] Array of layers (to be modified in place).\r\n   * @return {Array<import(\"./Layer.js\").default>} Array of layers.\r\n   * @override\r\n   */\r\n  getLayersArray(array) {\r\n    array = array ? array : [];\r\n    array.push(this);\r\n    return array;\r\n  }\r\n\r\n  /**\r\n   * @param {Array<import(\"./Layer.js\").State>} [states] Optional list of layer states (to be modified in place).\r\n   * @return {Array<import(\"./Layer.js\").State>} List of layer states.\r\n   * @override\r\n   */\r\n  getLayerStatesArray(states) {\r\n    states = states ? states : [];\r\n    states.push(this.getLayerState());\r\n    return states;\r\n  }\r\n\r\n  /**\r\n   * Get the layer source.\r\n   * @return {SourceType|null} The layer source (or `null` if not yet set).\r\n   * @observable\r\n   * @api\r\n   */\r\n  getSource() {\r\n    return /** @type {SourceType} */ (this.get(LayerProperty.SOURCE)) || null;\r\n  }\r\n\r\n  /**\r\n   * @return {SourceType|null} The source being rendered.\r\n   */\r\n  getRenderSource() {\r\n    return this.getSource();\r\n  }\r\n\r\n  /**\r\n   * @return {import(\"../source/Source.js\").State} Source state.\r\n   * @override\r\n   */\r\n  getSourceState() {\r\n    const source = this.getSource();\r\n    return !source ? 'undefined' : source.getState();\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  handleSourceChange_() {\r\n    this.changed();\r\n    if (this.sourceReady_ || this.getSource().getState() !== 'ready') {\r\n      return;\r\n    }\r\n    this.sourceReady_ = true;\r\n    this.dispatchEvent('sourceready');\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  handleSourcePropertyChange_() {\r\n    if (this.sourceChangeKey_) {\r\n      unlistenByKey(this.sourceChangeKey_);\r\n      this.sourceChangeKey_ = null;\r\n    }\r\n    this.sourceReady_ = false;\r\n    const source = this.getSource();\r\n    if (source) {\r\n      this.sourceChangeKey_ = listen(\r\n        source,\r\n        EventType.CHANGE,\r\n        this.handleSourceChange_,\r\n        this,\r\n      );\r\n      if (source.getState() === 'ready') {\r\n        this.sourceReady_ = true;\r\n        setTimeout(() => {\r\n          this.dispatchEvent('sourceready');\r\n        }, 0);\r\n      }\r\n      this.clearRenderer();\r\n    }\r\n    this.changed();\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../pixel\").Pixel} pixel Pixel.\r\n   * @return {Promise<Array<import(\"../Feature\").FeatureLike>>} Promise that resolves with\r\n   * an array of features.\r\n   */\r\n  getFeatures(pixel) {\r\n    if (!this.renderer_) {\r\n      return Promise.resolve([]);\r\n    }\r\n    return this.renderer_.getFeatures(pixel);\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../pixel\").Pixel} pixel Pixel.\r\n   * @return {Uint8ClampedArray|Uint8Array|Float32Array|DataView|null} Pixel data.\r\n   */\r\n  getData(pixel) {\r\n    if (!this.renderer_ || !this.rendered) {\r\n      return null;\r\n    }\r\n    return this.renderer_.getData(pixel);\r\n  }\r\n\r\n  /**\r\n   * The layer is visible on the map view, i.e. within its min/max resolution or zoom and\r\n   * extent, not set to `visible: false`, and not inside a layer group that is set\r\n   * to `visible: false`.\r\n   * @param {View|import(\"../View.js\").ViewStateLayerStateExtent} [view] View or {@link import(\"../Map.js\").FrameState}.\r\n   * Only required when the layer is not added to a map.\r\n   * @return {boolean} The layer is visible in the map view.\r\n   * @api\r\n   */\r\n  isVisible(view) {\r\n    let frameState;\r\n    const map = this.getMapInternal();\r\n    if (!view && map) {\r\n      view = map.getView();\r\n    }\r\n    if (view instanceof View) {\r\n      frameState = {\r\n        viewState: view.getState(),\r\n        extent: view.calculateExtent(),\r\n      };\r\n    } else {\r\n      frameState = view;\r\n    }\r\n    if (!frameState.layerStatesArray && map) {\r\n      frameState.layerStatesArray = map.getLayerGroup().getLayerStatesArray();\r\n    }\r\n    let layerState;\r\n    if (frameState.layerStatesArray) {\r\n      layerState = frameState.layerStatesArray.find(\r\n        (layerState) => layerState.layer === this,\r\n      );\r\n      if (!layerState) {\r\n        return false;\r\n      }\r\n    } else {\r\n      layerState = this.getLayerState();\r\n    }\r\n\r\n    const layerExtent = this.getExtent();\r\n\r\n    return (\r\n      inView(layerState, frameState.viewState) &&\r\n      (!layerExtent || intersects(layerExtent, frameState.extent))\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Get the attributions of the source of this layer for the given view.\r\n   * @param {View|import(\"../View.js\").ViewStateLayerStateExtent} [view] View or {@link import(\"../Map.js\").FrameState}.\r\n   * Only required when the layer is not added to a map.\r\n   * @return {Array<string>} Attributions for this layer at the given view.\r\n   * @api\r\n   */\r\n  getAttributions(view) {\r\n    if (!this.isVisible(view)) {\r\n      return [];\r\n    }\r\n    const getAttributions = this.getSource()?.getAttributions();\r\n    if (!getAttributions) {\r\n      return [];\r\n    }\r\n    const frameState =\r\n      view instanceof View ? view.getViewStateAndExtent() : view;\r\n    let attributions = getAttributions(frameState);\r\n    if (!Array.isArray(attributions)) {\r\n      attributions = [attributions];\r\n    }\r\n    return attributions;\r\n  }\r\n\r\n  /**\r\n   * In charge to manage the rendering of the layer. One layer type is\r\n   * bounded with one layer renderer.\r\n   * @param {?import(\"../Map.js\").FrameState} frameState Frame state.\r\n   * @param {HTMLElement} target Target which the renderer may (but need not) use\r\n   * for rendering its content.\r\n   * @return {HTMLElement|null} The rendered element.\r\n   */\r\n  render(frameState, target) {\r\n    const layerRenderer = this.getRenderer();\r\n\r\n    if (layerRenderer.prepareFrame(frameState)) {\r\n      this.rendered = true;\r\n      return layerRenderer.renderFrame(frameState, target);\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * Called when a layer is not visible during a map render.\r\n   */\r\n  unrender() {\r\n    this.rendered = false;\r\n  }\r\n\r\n  /** @return {string} Declutter */\r\n  getDeclutter() {\r\n    return undefined;\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../Map.js\").FrameState} frameState Frame state.\r\n   * @param {import(\"../layer/Layer.js\").State} layerState Layer state.\r\n   */\r\n  renderDeclutter(frameState, layerState) {}\r\n\r\n  /**\r\n   * When the renderer follows a layout -> render approach, do the final rendering here.\r\n   * @param {import('../Map.js').FrameState} frameState Frame state\r\n   */\r\n  renderDeferred(frameState) {\r\n    const layerRenderer = this.getRenderer();\r\n    if (!layerRenderer) {\r\n      return;\r\n    }\r\n    layerRenderer.renderDeferred(frameState);\r\n  }\r\n\r\n  /**\r\n   * For use inside the library only.\r\n   * @param {import(\"../Map.js\").default|null} map Map.\r\n   */\r\n  setMapInternal(map) {\r\n    if (!map) {\r\n      this.unrender();\r\n    }\r\n    this.set(LayerProperty.MAP, map);\r\n  }\r\n\r\n  /**\r\n   * For use inside the library only.\r\n   * @return {import(\"../Map.js\").default|null} Map.\r\n   */\r\n  getMapInternal() {\r\n    return this.get(LayerProperty.MAP);\r\n  }\r\n\r\n  /**\r\n   * Sets the layer to be rendered on top of other layers on a map. The map will\r\n   * not manage this layer in its layers collection. This\r\n   * is useful for temporary layers. To remove an unmanaged layer from the map,\r\n   * use `#setMap(null)`.\r\n   *\r\n   * To add the layer to a map and have it managed by the map, use\r\n   * {@link module:ol/Map~Map#addLayer} instead.\r\n   * @param {import(\"../Map.js\").default|null} map Map.\r\n   * @api\r\n   */\r\n  setMap(map) {\r\n    if (this.mapPrecomposeKey_) {\r\n      unlistenByKey(this.mapPrecomposeKey_);\r\n      this.mapPrecomposeKey_ = null;\r\n    }\r\n    if (!map) {\r\n      this.changed();\r\n    }\r\n    if (this.mapRenderKey_) {\r\n      unlistenByKey(this.mapRenderKey_);\r\n      this.mapRenderKey_ = null;\r\n    }\r\n    if (map) {\r\n      this.mapPrecomposeKey_ = listen(\r\n        map,\r\n        RenderEventType.PRECOMPOSE,\r\n        this.handlePrecompose_,\r\n        this,\r\n      );\r\n      this.mapRenderKey_ = listen(this, EventType.CHANGE, map.render, map);\r\n      this.changed();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../events/Event.js\").default} renderEvent Render event\r\n   * @private\r\n   */\r\n  handlePrecompose_(renderEvent) {\r\n    const layerStatesArray =\r\n      /** @type {import(\"../render/Event.js\").default} */ (renderEvent)\r\n        .frameState.layerStatesArray;\r\n    const layerState = this.getLayerState(false);\r\n    assert(\r\n      !layerStatesArray.some(\r\n        (arrayLayerState) => arrayLayerState.layer === layerState.layer,\r\n      ),\r\n      'A layer can only be added to the map once. Use either `layer.setMap()` or `map.addLayer()`, not both.',\r\n    );\r\n    layerStatesArray.push(layerState);\r\n  }\r\n\r\n  /**\r\n   * Set the layer source.\r\n   * @param {SourceType|null} source The layer source.\r\n   * @observable\r\n   * @api\r\n   */\r\n  setSource(source) {\r\n    this.set(LayerProperty.SOURCE, source);\r\n  }\r\n\r\n  /**\r\n   * Get the renderer for this layer.\r\n   * @return {RendererType|null} The layer renderer.\r\n   */\r\n  getRenderer() {\r\n    if (!this.renderer_) {\r\n      this.renderer_ = this.createRenderer();\r\n    }\r\n    return this.renderer_;\r\n  }\r\n\r\n  /**\r\n   * @return {boolean} The layer has a renderer.\r\n   */\r\n  hasRenderer() {\r\n    return !!this.renderer_;\r\n  }\r\n\r\n  /**\r\n   * Create a renderer for this layer.\r\n   * @return {RendererType} A layer renderer.\r\n   * @protected\r\n   */\r\n  createRenderer() {\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * This will clear the renderer so that a new one can be created next time it is needed\r\n   */\r\n  clearRenderer() {\r\n    if (this.renderer_) {\r\n      this.renderer_.dispose();\r\n      delete this.renderer_;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Clean up.\r\n   * @override\r\n   */\r\n  disposeInternal() {\r\n    this.clearRenderer();\r\n    this.setSource(null);\r\n    super.disposeInternal();\r\n  }\r\n}\r\n\r\n/**\r\n * Return `true` if the layer is visible and if the provided view state\r\n * has resolution and zoom levels that are in range of the layer's min/max.\r\n * @param {State} layerState Layer state.\r\n * @param {import(\"../View.js\").State} viewState View state.\r\n * @return {boolean} The layer is visible at the given view state.\r\n */\r\nexport function inView(layerState, viewState) {\r\n  if (!layerState.visible) {\r\n    return false;\r\n  }\r\n  const resolution = viewState.resolution;\r\n  if (\r\n    resolution < layerState.minResolution ||\r\n    resolution >= layerState.maxResolution\r\n  ) {\r\n    return false;\r\n  }\r\n  const zoom = viewState.zoom;\r\n  return zoom > layerState.minZoom && zoom <= layerState.maxZoom;\r\n}\r\n\r\nexport default Layer;\r\n","/**\r\n * @module ol/render/EventType\r\n */\r\n\r\n/**\r\n * @enum {string}\r\n */\r\nexport default {\r\n  /**\r\n   * Triggered before a layer is rendered.\r\n   * @event module:ol/render/Event~RenderEvent#prerender\r\n   * @api\r\n   */\r\n  PRERENDER: 'prerender',\r\n\r\n  /**\r\n   * Triggered after a layer is rendered.\r\n   * @event module:ol/render/Event~RenderEvent#postrender\r\n   * @api\r\n   */\r\n  POSTRENDER: 'postrender',\r\n\r\n  /**\r\n   * Triggered before layers are composed.  When dispatched by the map, the event object will not have\r\n   * a `context` set.  When dispatched by a layer, the event object will have a `context` set.  Only\r\n   * WebGL layers currently dispatch this event.\r\n   * @event module:ol/render/Event~RenderEvent#precompose\r\n   * @api\r\n   */\r\n  PRECOMPOSE: 'precompose',\r\n\r\n  /**\r\n   * Triggered after layers are composed.  When dispatched by the map, the event object will not have\r\n   * a `context` set.  When dispatched by a layer, the event object will have a `context` set.  Only\r\n   * WebGL layers currently dispatch this event.\r\n   * @event module:ol/render/Event~RenderEvent#postcompose\r\n   * @api\r\n   */\r\n  POSTCOMPOSE: 'postcompose',\r\n\r\n  /**\r\n   * Triggered when rendering is complete, i.e. all sources and tiles have\r\n   * finished loading for the current viewport, and all tiles are faded in.\r\n   * The event object will not have a `context` set.\r\n   * @event module:ol/render/Event~RenderEvent#rendercomplete\r\n   * @api\r\n   */\r\n  RENDERCOMPLETE: 'rendercomplete',\r\n};\r\n\r\n/**\r\n * @typedef {'postrender'|'precompose'|'postcompose'|'rendercomplete'} MapRenderEventTypes\r\n */\r\n\r\n/**\r\n * @typedef {'postrender'|'prerender'} LayerRenderEventTypes\r\n */\r\n","/**\r\n * @module ol/renderer/Composite\r\n */\r\nimport ObjectEventType from '../ObjectEventType.js';\r\nimport {CLASS_UNSELECTABLE} from '../css.js';\r\nimport {replaceChildren} from '../dom.js';\r\nimport {listen, unlistenByKey} from '../events.js';\r\nimport BaseVectorLayer from '../layer/BaseVector.js';\r\nimport {inView} from '../layer/Layer.js';\r\nimport RenderEvent from '../render/Event.js';\r\nimport RenderEventType from '../render/EventType.js';\r\nimport {checkedFonts} from '../render/canvas.js';\r\nimport MapRenderer from './Map.js';\r\n\r\n/**\r\n * @classdesc\r\n * Canvas map renderer.\r\n * @api\r\n */\r\nclass CompositeMapRenderer extends MapRenderer {\r\n  /**\r\n   * @param {import(\"../Map.js\").default} map Map.\r\n   */\r\n  constructor(map) {\r\n    super(map);\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"../events.js\").EventsKey}\r\n     */\r\n    this.fontChangeListenerKey_ = listen(\r\n      checkedFonts,\r\n      ObjectEventType.PROPERTYCHANGE,\r\n      map.redrawText,\r\n      map,\r\n    );\r\n\r\n    /**\r\n     * @private\r\n     * @type {HTMLDivElement}\r\n     */\r\n    this.element_ = document.createElement('div');\r\n    const style = this.element_.style;\r\n    style.position = 'absolute';\r\n    style.width = '100%';\r\n    style.height = '100%';\r\n    style.zIndex = '0';\r\n\r\n    this.element_.className = CLASS_UNSELECTABLE + ' ol-layers';\r\n\r\n    const container = map.getViewport();\r\n    container.insertBefore(this.element_, container.firstChild || null);\r\n\r\n    /**\r\n     * @private\r\n     * @type {Array<HTMLElement>}\r\n     */\r\n    this.children_ = [];\r\n\r\n    /**\r\n     * @private\r\n     * @type {boolean}\r\n     */\r\n    this.renderedVisible_ = true;\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../render/EventType.js\").default} type Event type.\r\n   * @param {import(\"../Map.js\").FrameState} frameState Frame state.\r\n   * @override\r\n   */\r\n  dispatchRenderEvent(type, frameState) {\r\n    const map = this.getMap();\r\n    if (map.hasListener(type)) {\r\n      const event = new RenderEvent(type, undefined, frameState);\r\n      map.dispatchEvent(event);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @override\r\n   */\r\n  disposeInternal() {\r\n    unlistenByKey(this.fontChangeListenerKey_);\r\n    this.element_.remove();\r\n    super.disposeInternal();\r\n  }\r\n\r\n  /**\r\n   * Render.\r\n   * @param {?import(\"../Map.js\").FrameState} frameState Frame state.\r\n   * @override\r\n   */\r\n  renderFrame(frameState) {\r\n    if (!frameState) {\r\n      if (this.renderedVisible_) {\r\n        this.element_.style.display = 'none';\r\n        this.renderedVisible_ = false;\r\n      }\r\n      return;\r\n    }\r\n\r\n    this.calculateMatrices2D(frameState);\r\n    this.dispatchRenderEvent(RenderEventType.PRECOMPOSE, frameState);\r\n\r\n    const layerStatesArray = frameState.layerStatesArray.sort(\r\n      (a, b) => a.zIndex - b.zIndex,\r\n    );\r\n    const declutter = layerStatesArray.some(\r\n      (layerState) =>\r\n        layerState.layer instanceof BaseVectorLayer &&\r\n        layerState.layer.getDeclutter(),\r\n    );\r\n    if (declutter) {\r\n      // Some layers need decluttering, turn on deferred rendering hint\r\n      frameState.declutter = {};\r\n    }\r\n    const viewState = frameState.viewState;\r\n\r\n    this.children_.length = 0;\r\n\r\n    const renderedLayerStates = [];\r\n    let previousElement = null;\r\n    for (let i = 0, ii = layerStatesArray.length; i < ii; ++i) {\r\n      const layerState = layerStatesArray[i];\r\n      frameState.layerIndex = i;\r\n\r\n      const layer = layerState.layer;\r\n      const sourceState = layer.getSourceState();\r\n      if (\r\n        !inView(layerState, viewState) ||\r\n        (sourceState != 'ready' && sourceState != 'undefined')\r\n      ) {\r\n        layer.unrender();\r\n        continue;\r\n      }\r\n\r\n      const element = layer.render(frameState, previousElement);\r\n      if (!element) {\r\n        continue;\r\n      }\r\n      if (element !== previousElement) {\r\n        this.children_.push(element);\r\n        previousElement = element;\r\n      }\r\n\r\n      renderedLayerStates.push(layerState);\r\n    }\r\n\r\n    this.declutter(frameState, renderedLayerStates);\r\n\r\n    replaceChildren(this.element_, this.children_);\r\n\r\n    this.dispatchRenderEvent(RenderEventType.POSTCOMPOSE, frameState);\r\n\r\n    if (!this.renderedVisible_) {\r\n      this.element_.style.display = '';\r\n      this.renderedVisible_ = true;\r\n    }\r\n\r\n    this.scheduleExpireIconCache(frameState);\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../Map.js\").FrameState} frameState Frame state.\r\n   * @param {Array<import('../layer/Layer.js').State>} layerStates Layers.\r\n   */\r\n  declutter(frameState, layerStates) {\r\n    if (!frameState.declutter) {\r\n      return;\r\n    }\r\n    for (let i = layerStates.length - 1; i >= 0; --i) {\r\n      const layerState = layerStates[i];\r\n      const layer = layerState.layer;\r\n      if (layer.getDeclutter()) {\r\n        layer.renderDeclutter(frameState, layerState);\r\n      }\r\n    }\r\n    layerStates.forEach((layerState) =>\r\n      layerState.layer.renderDeferred(frameState),\r\n    );\r\n  }\r\n}\r\n\r\nexport default CompositeMapRenderer;\r\n","/**\r\n * @module ol/layer/BaseVector\r\n */\r\nimport RBush from 'rbush';\r\nimport {\r\n  flatStylesToStyleFunction,\r\n  rulesToStyleFunction,\r\n} from '../render/canvas/style.js';\r\nimport Style, {\r\n  createDefaultStyle,\r\n  toFunction as toStyleFunction,\r\n} from '../style/Style.js';\r\nimport Layer from './Layer.js';\r\n\r\n/***\r\n * @template T\r\n * @typedef {T extends import(\"../source/Vector.js\").default<infer U extends import(\"../Feature.js\").FeatureLike> ? U : never} ExtractedFeatureType\r\n */\r\n\r\n/**\r\n * @template {import('../Feature').FeatureLike} FeatureType\r\n * @template {import(\"../source/Vector.js\").default<FeatureType>|import(\"../source/VectorTile.js\").default<FeatureType>} VectorSourceType<FeatureType>\r\n * @typedef {Object} Options\r\n * @property {string} [className='ol-layer'] A CSS class name to set to the layer element.\r\n * @property {number} [opacity=1] Opacity (0, 1).\r\n * @property {boolean} [visible=true] Visibility.\r\n * @property {import(\"../extent.js\").Extent} [extent] The bounding extent for layer rendering.  The layer will not be\r\n * rendered outside of this extent.\r\n * @property {number} [zIndex] The z-index for layer rendering.  At rendering time, the layers\r\n * will be ordered, first by Z-index and then by position. When `undefined`, a `zIndex` of 0 is assumed\r\n * for layers that are added to the map's `layers` collection, or `Infinity` when the layer's `setMap()`\r\n * method was used.\r\n * @property {number} [minResolution] The minimum resolution (inclusive) at which this layer will be\r\n * visible.\r\n * @property {number} [maxResolution] The maximum resolution (exclusive) below which this layer will\r\n * be visible.\r\n * @property {number} [minZoom] The minimum view zoom level (exclusive) above which this layer will be\r\n * visible.\r\n * @property {number} [maxZoom] The maximum view zoom level (inclusive) at which this layer will\r\n * be visible.\r\n * @property {import(\"../render.js\").OrderFunction} [renderOrder] Render order. Function to be used when sorting\r\n * features before rendering. By default features are drawn in the order that they are created. Use\r\n * `null` to avoid the sort, but get an undefined draw order.\r\n * @property {number} [renderBuffer=100] The buffer in pixels around the viewport extent used by the\r\n * renderer when getting features from the vector source for the rendering or hit-detection.\r\n * Recommended value: the size of the largest symbol, line width or label.\r\n * @property {VectorSourceType} [source] Source.\r\n * @property {import(\"../Map.js\").default} [map] Sets the layer as overlay on a map. The map will not manage\r\n * this layer in its layers collection, and the layer will be rendered on top. This is useful for\r\n * temporary layers. The standard way to add a layer to a map and have it managed by the map is to\r\n * use [map.addLayer()]{@link import(\"../Map.js\").default#addLayer}.\r\n * @property {boolean|string|number} [declutter=false] Declutter images and text. Any truthy value will enable\r\n * decluttering. Within a layer, a feature rendered before another has higher priority. All layers with the\r\n * same `declutter` value will be decluttered together. The priority is determined by the drawing order of the\r\n * layers with the same `declutter` value. Higher in the layer stack means higher priority. To declutter distinct\r\n * layers or groups of layers separately, use different truthy values for `declutter`.\r\n * @property {import(\"../style/Style.js\").StyleLike|import(\"../style/flat.js\").FlatStyleLike|null} [style] Layer style. When set to `null`, only\r\n * features that have their own style will be rendered. See {@link module:ol/style/Style~Style} for the default style\r\n * which will be used if this is not set.\r\n * @property {import(\"./Base.js\").BackgroundColor} [background] Background color for the layer. If not specified, no background\r\n * will be rendered.\r\n * @property {boolean} [updateWhileAnimating=false] When set to `true`, feature batches will\r\n * be recreated during animations. This means that no vectors will be shown clipped, but the\r\n * setting will have a performance impact for large amounts of vector data. When set to `false`,\r\n * batches will be recreated when no animation is active.\r\n * @property {boolean} [updateWhileInteracting=false] When set to `true`, feature batches will\r\n * be recreated during interactions. See also `updateWhileAnimating`.\r\n * @property {Object<string, *>} [properties] Arbitrary observable properties. Can be accessed with `#get()` and `#set()`.\r\n */\r\n\r\n/**\r\n * @enum {string}\r\n * @private\r\n */\r\nconst Property = {\r\n  RENDER_ORDER: 'renderOrder',\r\n};\r\n\r\n/**\r\n * @classdesc\r\n * Vector data that is rendered client-side.\r\n * Note that any property set in the options is set as a {@link module:ol/Object~BaseObject}\r\n * property on the layer object; for example, setting `title: 'My Title'` in the\r\n * options means that `title` is observable, and has get/set accessors.\r\n *\r\n * @template {import('../Feature').FeatureLike} FeatureType\r\n * @template {import(\"../source/Vector.js\").default<FeatureType>|import(\"../source/VectorTile.js\").default<FeatureType>} VectorSourceType<FeatureType>\r\n * @extends {Layer<VectorSourceType, RendererType>}\r\n * @template {import(\"../renderer/canvas/VectorLayer.js\").default|import(\"../renderer/canvas/VectorTileLayer.js\").default|import(\"../renderer/canvas/VectorImageLayer.js\").default|import(\"../renderer/webgl/VectorLayer.js\").default|import(\"../renderer/webgl/PointsLayer.js\").default} RendererType\r\n * @api\r\n */\r\nclass BaseVectorLayer extends Layer {\r\n  /**\r\n   * @param {Options<FeatureType, VectorSourceType>} [options] Options.\r\n   */\r\n  constructor(options) {\r\n    options = options ? options : {};\r\n\r\n    const baseOptions = Object.assign({}, options);\r\n\r\n    delete baseOptions.style;\r\n    delete baseOptions.renderBuffer;\r\n    delete baseOptions.updateWhileAnimating;\r\n    delete baseOptions.updateWhileInteracting;\r\n    super(baseOptions);\r\n\r\n    /**\r\n     * @private\r\n     * @type {string}\r\n     */\r\n    this.declutter_ = options.declutter ? String(options.declutter) : undefined;\r\n\r\n    /**\r\n     * @type {number}\r\n     * @private\r\n     */\r\n    this.renderBuffer_ =\r\n      options.renderBuffer !== undefined ? options.renderBuffer : 100;\r\n\r\n    /**\r\n     * User provided style.\r\n     * @type {import(\"../style/Style.js\").StyleLike|import(\"../style/flat.js\").FlatStyleLike}\r\n     * @private\r\n     */\r\n    this.style_ = null;\r\n\r\n    /**\r\n     * Style function for use within the library.\r\n     * @type {import(\"../style/Style.js\").StyleFunction|undefined}\r\n     * @private\r\n     */\r\n    this.styleFunction_ = undefined;\r\n\r\n    this.setStyle(options.style);\r\n\r\n    /**\r\n     * @type {boolean}\r\n     * @private\r\n     */\r\n    this.updateWhileAnimating_ =\r\n      options.updateWhileAnimating !== undefined\r\n        ? options.updateWhileAnimating\r\n        : false;\r\n\r\n    /**\r\n     * @type {boolean}\r\n     * @private\r\n     */\r\n    this.updateWhileInteracting_ =\r\n      options.updateWhileInteracting !== undefined\r\n        ? options.updateWhileInteracting\r\n        : false;\r\n  }\r\n\r\n  /**\r\n   * @return {string} Declutter group.\r\n   * @override\r\n   */\r\n  getDeclutter() {\r\n    return this.declutter_;\r\n  }\r\n\r\n  /**\r\n   * Get the topmost feature that intersects the given pixel on the viewport. Returns a promise\r\n   * that resolves with an array of features. The array will either contain the topmost feature\r\n   * when a hit was detected, or it will be empty.\r\n   *\r\n   * The hit detection algorithm used for this method is optimized for performance, but is less\r\n   * accurate than the one used in [map.getFeaturesAtPixel()]{@link import(\"../Map.js\").default#getFeaturesAtPixel}.\r\n   * Text is not considered, and icons are only represented by their bounding box instead of the exact\r\n   * image.\r\n   *\r\n   * @param {import(\"../pixel.js\").Pixel} pixel Pixel.\r\n   * @return {Promise<Array<import(\"../Feature\").FeatureLike>>} Promise that resolves with an array of features.\r\n   * @api\r\n   * @override\r\n   */\r\n  getFeatures(pixel) {\r\n    return super.getFeatures(pixel);\r\n  }\r\n\r\n  /**\r\n   * @return {number|undefined} Render buffer.\r\n   */\r\n  getRenderBuffer() {\r\n    return this.renderBuffer_;\r\n  }\r\n\r\n  /**\r\n   * @return {import(\"../render.js\").OrderFunction|null|undefined} Render order.\r\n   */\r\n  getRenderOrder() {\r\n    return /** @type {import(\"../render.js\").OrderFunction|null|undefined} */ (\r\n      this.get(Property.RENDER_ORDER)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Get the style for features.  This returns whatever was passed to the `style`\r\n   * option at construction or to the `setStyle` method.\r\n   * @return {import(\"../style/Style.js\").StyleLike|import(\"../style/flat.js\").FlatStyleLike|null|undefined} Layer style.\r\n   * @api\r\n   */\r\n  getStyle() {\r\n    return this.style_;\r\n  }\r\n\r\n  /**\r\n   * Get the style function.\r\n   * @return {import(\"../style/Style.js\").StyleFunction|undefined} Layer style function.\r\n   * @api\r\n   */\r\n  getStyleFunction() {\r\n    return this.styleFunction_;\r\n  }\r\n\r\n  /**\r\n   * @return {boolean} Whether the rendered layer should be updated while\r\n   *     animating.\r\n   */\r\n  getUpdateWhileAnimating() {\r\n    return this.updateWhileAnimating_;\r\n  }\r\n\r\n  /**\r\n   * @return {boolean} Whether the rendered layer should be updated while\r\n   *     interacting.\r\n   */\r\n  getUpdateWhileInteracting() {\r\n    return this.updateWhileInteracting_;\r\n  }\r\n\r\n  /**\r\n   * Render declutter items for this layer\r\n   * @param {import(\"../Map.js\").FrameState} frameState Frame state.\r\n   * @param {import(\"../layer/Layer.js\").State} layerState Layer state.\r\n   * @override\r\n   */\r\n  renderDeclutter(frameState, layerState) {\r\n    const declutterGroup = this.getDeclutter();\r\n    if (declutterGroup in frameState.declutter === false) {\r\n      frameState.declutter[declutterGroup] = new RBush(9);\r\n    }\r\n    this.getRenderer().renderDeclutter(frameState, layerState);\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../render.js\").OrderFunction|null|undefined} renderOrder\r\n   *     Render order.\r\n   */\r\n  setRenderOrder(renderOrder) {\r\n    this.set(Property.RENDER_ORDER, renderOrder);\r\n  }\r\n\r\n  /**\r\n   * Set the style for features.  This can be a single style object, an array\r\n   * of styles, or a function that takes a feature and resolution and returns\r\n   * an array of styles. If set to `null`, the layer has no style (a `null` style),\r\n   * so only features that have their own styles will be rendered in the layer. Call\r\n   * `setStyle()` without arguments to reset to the default style. See\r\n   * [the ol/style/Style module]{@link module:ol/style/Style~Style} for information on the default style.\r\n   *\r\n   * If your layer has a static style, you can use [flat style]{@link module:ol/style/flat~FlatStyle} object\r\n   * literals instead of using the `Style` and symbolizer constructors (`Fill`, `Stroke`, etc.):\r\n   * ```js\r\n   * vectorLayer.setStyle({\r\n   *   \"fill-color\": \"yellow\",\r\n   *   \"stroke-color\": \"black\",\r\n   *   \"stroke-width\": 4\r\n   * })\r\n   * ```\r\n   *\r\n   * @param {import(\"../style/Style.js\").StyleLike|import(\"../style/flat.js\").FlatStyleLike|null} [style] Layer style.\r\n   * @api\r\n   */\r\n  setStyle(style) {\r\n    this.style_ = style === undefined ? createDefaultStyle : style;\r\n    const styleLike = toStyleLike(style);\r\n    this.styleFunction_ =\r\n      style === null ? undefined : toStyleFunction(styleLike);\r\n    this.changed();\r\n  }\r\n\r\n  /**\r\n   * @param {boolean|string|number} declutter Declutter images and text.\r\n   * @api\r\n   */\r\n  setDeclutter(declutter) {\r\n    this.declutter_ = declutter ? String(declutter) : undefined;\r\n    this.changed();\r\n  }\r\n}\r\n\r\n/**\r\n * Coerce the allowed style types into a shorter list of types.  Flat styles, arrays of flat\r\n * styles, and arrays of rules are converted into style functions.\r\n *\r\n * @param {import(\"../style/Style.js\").StyleLike|import(\"../style/flat.js\").FlatStyleLike|null} [style] Layer style.\r\n * @return {import(\"../style/Style.js\").StyleLike|null} The style.\r\n */\r\nfunction toStyleLike(style) {\r\n  if (style === undefined) {\r\n    return createDefaultStyle;\r\n  }\r\n  if (!style) {\r\n    return null;\r\n  }\r\n  if (typeof style === 'function') {\r\n    return style;\r\n  }\r\n  if (style instanceof Style) {\r\n    return style;\r\n  }\r\n  if (!Array.isArray(style)) {\r\n    return flatStylesToStyleFunction([style]);\r\n  }\r\n  if (style.length === 0) {\r\n    return [];\r\n  }\r\n\r\n  const length = style.length;\r\n  const first = style[0];\r\n\r\n  if (first instanceof Style) {\r\n    /**\r\n     * @type {Array<Style>}\r\n     */\r\n    const styles = new Array(length);\r\n    for (let i = 0; i < length; ++i) {\r\n      const candidate = style[i];\r\n      if (!(candidate instanceof Style)) {\r\n        throw new Error('Expected a list of style instances');\r\n      }\r\n      styles[i] = candidate;\r\n    }\r\n    return styles;\r\n  }\r\n\r\n  if ('style' in first) {\r\n    /**\r\n     * @type {Array<import(\"../style/flat.js\").Rule>}\r\n     */\r\n    const rules = new Array(length);\r\n    for (let i = 0; i < length; ++i) {\r\n      const candidate = style[i];\r\n      if (!('style' in candidate)) {\r\n        throw new Error('Expected a list of rules with a style property');\r\n      }\r\n      rules[i] = candidate;\r\n    }\r\n    return rulesToStyleFunction(rules);\r\n  }\r\n\r\n  const flatStyles =\r\n    /** @type {Array<import(\"../style/flat.js\").FlatStyle>} */ (style);\r\n  return flatStylesToStyleFunction(flatStyles);\r\n}\r\n\r\nexport default BaseVectorLayer;\r\n","!function(t,i){\"object\"==typeof exports&&\"undefined\"!=typeof module?module.exports=i():\"function\"==typeof define&&define.amd?define(i):(t=\"undefined\"!=typeof globalThis?globalThis:t||self).RBush=i()}(this,(function(){\"use strict\";function t(e,h,r=0,s=e.length-1,a=n){for(;s>r;){if(s-r>600){const i=s-r+1,n=h-r+1,o=Math.log(i),l=.5*Math.exp(2*o/3),c=.5*Math.sqrt(o*l*(i-l)/i)*(n-i/2<0?-1:1);t(e,h,Math.max(r,Math.floor(h-n*l/i+c)),Math.min(s,Math.floor(h+(i-n)*l/i+c)),a)}const n=e[h];let o=r,l=s;for(i(e,r,h),a(e[s],n)>0&&i(e,r,s);o<l;){for(i(e,o,l),o++,l--;a(e[o],n)<0;)o++;for(;a(e[l],n)>0;)l--}0===a(e[r],n)?i(e,r,l):(l++,i(e,l,s)),l<=h&&(r=l+1),h<=l&&(s=l-1)}}function i(t,i,n){const e=t[i];t[i]=t[n],t[n]=e}function n(t,i){return t<i?-1:t>i?1:0}function e(t,i,n){if(!n)return i.indexOf(t);for(let e=0;e<i.length;e++)if(n(t,i[e]))return e;return-1}function h(t,i){r(t,0,t.children.length,i,t)}function r(t,i,n,e,h){h||(h=d(null)),h.minX=1/0,h.minY=1/0,h.maxX=-1/0,h.maxY=-1/0;for(let r=i;r<n;r++){const i=t.children[r];s(h,t.leaf?e(i):i)}return h}function s(t,i){return t.minX=Math.min(t.minX,i.minX),t.minY=Math.min(t.minY,i.minY),t.maxX=Math.max(t.maxX,i.maxX),t.maxY=Math.max(t.maxY,i.maxY),t}function a(t,i){return t.minX-i.minX}function o(t,i){return t.minY-i.minY}function l(t){return(t.maxX-t.minX)*(t.maxY-t.minY)}function c(t){return t.maxX-t.minX+(t.maxY-t.minY)}function m(t,i){const n=Math.max(t.minX,i.minX),e=Math.max(t.minY,i.minY),h=Math.min(t.maxX,i.maxX),r=Math.min(t.maxY,i.maxY);return Math.max(0,h-n)*Math.max(0,r-e)}function f(t,i){return t.minX<=i.minX&&t.minY<=i.minY&&i.maxX<=t.maxX&&i.maxY<=t.maxY}function u(t,i){return i.minX<=t.maxX&&i.minY<=t.maxY&&i.maxX>=t.minX&&i.maxY>=t.minY}function d(t){return{children:t,height:1,leaf:!0,minX:1/0,minY:1/0,maxX:-1/0,maxY:-1/0}}function x(i,n,e,h,r){const s=[n,e];for(;s.length;){if((e=s.pop())-(n=s.pop())<=h)continue;const a=n+Math.ceil((e-n)/h/2)*h;t(i,a,n,e,r),s.push(n,a,a,e)}}return class{constructor(t=9){this._maxEntries=Math.max(4,t),this._minEntries=Math.max(2,Math.ceil(.4*this._maxEntries)),this.clear()}all(){return this._all(this.data,[])}search(t){let i=this.data;const n=[];if(!u(t,i))return n;const e=this.toBBox,h=[];for(;i;){for(let r=0;r<i.children.length;r++){const s=i.children[r],a=i.leaf?e(s):s;u(t,a)&&(i.leaf?n.push(s):f(t,a)?this._all(s,n):h.push(s))}i=h.pop()}return n}collides(t){let i=this.data;if(!u(t,i))return!1;const n=[];for(;i;){for(let e=0;e<i.children.length;e++){const h=i.children[e],r=i.leaf?this.toBBox(h):h;if(u(t,r)){if(i.leaf||f(t,r))return!0;n.push(h)}}i=n.pop()}return!1}load(t){if(!t||!t.length)return this;if(t.length<this._minEntries){for(let i=0;i<t.length;i++)this.insert(t[i]);return this}let i=this._build(t.slice(),0,t.length-1,0);if(this.data.children.length)if(this.data.height===i.height)this._splitRoot(this.data,i);else{if(this.data.height<i.height){const t=this.data;this.data=i,i=t}this._insert(i,this.data.height-i.height-1,!0)}else this.data=i;return this}insert(t){return t&&this._insert(t,this.data.height-1),this}clear(){return this.data=d([]),this}remove(t,i){if(!t)return this;let n=this.data;const h=this.toBBox(t),r=[],s=[];let a,o,l;for(;n||r.length;){if(n||(n=r.pop(),o=r[r.length-1],a=s.pop(),l=!0),n.leaf){const h=e(t,n.children,i);if(-1!==h)return n.children.splice(h,1),r.push(n),this._condense(r),this}l||n.leaf||!f(n,h)?o?(a++,n=o.children[a],l=!1):n=null:(r.push(n),s.push(a),a=0,o=n,n=n.children[0])}return this}toBBox(t){return t}compareMinX(t,i){return t.minX-i.minX}compareMinY(t,i){return t.minY-i.minY}toJSON(){return this.data}fromJSON(t){return this.data=t,this}_all(t,i){const n=[];for(;t;)t.leaf?i.push(...t.children):n.push(...t.children),t=n.pop();return i}_build(t,i,n,e){const r=n-i+1;let s,a=this._maxEntries;if(r<=a)return s=d(t.slice(i,n+1)),h(s,this.toBBox),s;e||(e=Math.ceil(Math.log(r)/Math.log(a)),a=Math.ceil(r/Math.pow(a,e-1))),s=d([]),s.leaf=!1,s.height=e;const o=Math.ceil(r/a),l=o*Math.ceil(Math.sqrt(a));x(t,i,n,l,this.compareMinX);for(let h=i;h<=n;h+=l){const i=Math.min(h+l-1,n);x(t,h,i,o,this.compareMinY);for(let n=h;n<=i;n+=o){const h=Math.min(n+o-1,i);s.children.push(this._build(t,n,h,e-1))}}return h(s,this.toBBox),s}_chooseSubtree(t,i,n,e){for(;e.push(i),!i.leaf&&e.length-1!==n;){let n,e=1/0,s=1/0;for(let a=0;a<i.children.length;a++){const o=i.children[a],c=l(o),m=(h=t,r=o,(Math.max(r.maxX,h.maxX)-Math.min(r.minX,h.minX))*(Math.max(r.maxY,h.maxY)-Math.min(r.minY,h.minY))-c);m<s?(s=m,e=c<e?c:e,n=o):m===s&&c<e&&(e=c,n=o)}i=n||i.children[0]}var h,r;return i}_insert(t,i,n){const e=n?t:this.toBBox(t),h=[],r=this._chooseSubtree(e,this.data,i,h);for(r.children.push(t),s(r,e);i>=0&&h[i].children.length>this._maxEntries;)this._split(h,i),i--;this._adjustParentBBoxes(e,h,i)}_split(t,i){const n=t[i],e=n.children.length,r=this._minEntries;this._chooseSplitAxis(n,r,e);const s=this._chooseSplitIndex(n,r,e),a=d(n.children.splice(s,n.children.length-s));a.height=n.height,a.leaf=n.leaf,h(n,this.toBBox),h(a,this.toBBox),i?t[i-1].children.push(a):this._splitRoot(n,a)}_splitRoot(t,i){this.data=d([t,i]),this.data.height=t.height+1,this.data.leaf=!1,h(this.data,this.toBBox)}_chooseSplitIndex(t,i,n){let e,h=1/0,s=1/0;for(let a=i;a<=n-i;a++){const i=r(t,0,a,this.toBBox),o=r(t,a,n,this.toBBox),c=m(i,o),f=l(i)+l(o);c<h?(h=c,e=a,s=f<s?f:s):c===h&&f<s&&(s=f,e=a)}return e||n-i}_chooseSplitAxis(t,i,n){const e=t.leaf?this.compareMinX:a,h=t.leaf?this.compareMinY:o;this._allDistMargin(t,i,n,e)<this._allDistMargin(t,i,n,h)&&t.children.sort(e)}_allDistMargin(t,i,n,e){t.children.sort(e);const h=this.toBBox,a=r(t,0,i,h),o=r(t,n-i,n,h);let l=c(a)+c(o);for(let e=i;e<n-i;e++){const i=t.children[e];s(a,t.leaf?h(i):i),l+=c(a)}for(let e=n-i-1;e>=i;e--){const i=t.children[e];s(o,t.leaf?h(i):i),l+=c(o)}return l}_adjustParentBBoxes(t,i,n){for(let e=n;e>=0;e--)s(i[e],t)}_condense(t){for(let i,n=t.length-1;n>=0;n--)0===t[n].children.length?n>0?(i=t[n-1].children,i.splice(i.indexOf(t[n]),1)):this.clear():h(t[n],this.toBBox)}}}));\r\n","/**\r\n * @module ol/render/canvas/style\r\n */\r\n\r\nimport {NO_COLOR} from '../../color.js';\r\nimport {buildExpression, newEvaluationContext} from '../../expr/cpu.js';\r\nimport {\r\n  BooleanType,\r\n  ColorType,\r\n  NumberArrayType,\r\n  NumberType,\r\n  StringType,\r\n  computeGeometryType,\r\n  newParsingContext,\r\n} from '../../expr/expression.js';\r\nimport {isEmpty} from '../../obj.js';\r\nimport {toSize} from '../../size.js';\r\nimport Circle from '../../style/Circle.js';\r\nimport Fill from '../../style/Fill.js';\r\nimport Icon from '../../style/Icon.js';\r\nimport RegularShape from '../../style/RegularShape.js';\r\nimport Stroke from '../../style/Stroke.js';\r\nimport Style from '../../style/Style.js';\r\nimport Text from '../../style/Text.js';\r\n\r\n/**\r\n * @fileoverview This module includes functions to build styles for the canvas renderer.  Building\r\n * is composed of two steps: parsing and compiling.  The parsing step takes an encoded expression\r\n * and returns an instance of one of the expression classes.  The compiling step takes the\r\n * expression instance and returns a function that can be evaluated to return a literal value.  The\r\n * evaluator function should do as little allocation and work as possible.\r\n */\r\n\r\n/**\r\n * @typedef {import(\"../../style/flat.js\").FlatStyle} FlatStyle\r\n */\r\n\r\n/**\r\n * @typedef {import(\"../../expr/expression.js\").EncodedExpression} EncodedExpression\r\n */\r\n\r\n/**\r\n * @typedef {import(\"../../expr/expression.js\").ParsingContext} ParsingContext\r\n */\r\n\r\n/**\r\n * @typedef {import(\"../../expr/expression.js\").CallExpression} CallExpression\r\n */\r\n\r\n/**\r\n * @typedef {import(\"../../expr/cpu.js\").EvaluationContext} EvaluationContext\r\n */\r\n\r\n/**\r\n * @typedef {import(\"../../expr/cpu.js\").ExpressionEvaluator} ExpressionEvaluator\r\n */\r\n\r\n/**\r\n * @param {EvaluationContext} context The evaluation context.\r\n * @return {boolean} Always true.\r\n */\r\nfunction always(context) {\r\n  return true;\r\n}\r\n\r\n/**\r\n * This function adapts a rule evaluator to the existing style function interface.\r\n * After we have deprecated the style function, we can use the compiled rules directly\r\n * and pass a more complete evaluation context (variables, zoom, time, etc.).\r\n *\r\n * @param {Array<import('../../style/flat.js').Rule>} rules The rules.\r\n * @return {import('../../style/Style.js').StyleFunction} A style function.\r\n */\r\nexport function rulesToStyleFunction(rules) {\r\n  const parsingContext = newParsingContext();\r\n  const evaluator = buildRuleSet(rules, parsingContext);\r\n  const evaluationContext = newEvaluationContext();\r\n  return function (feature, resolution) {\r\n    evaluationContext.properties = feature.getPropertiesInternal();\r\n    evaluationContext.resolution = resolution;\r\n    if (parsingContext.featureId) {\r\n      const id = feature.getId();\r\n      if (id !== undefined) {\r\n        evaluationContext.featureId = id;\r\n      } else {\r\n        evaluationContext.featureId = null;\r\n      }\r\n    }\r\n    if (parsingContext.geometryType) {\r\n      evaluationContext.geometryType = computeGeometryType(\r\n        feature.getGeometry(),\r\n      );\r\n    }\r\n    return evaluator(evaluationContext);\r\n  };\r\n}\r\n\r\n/**\r\n * This function adapts a style evaluator to the existing style function interface.\r\n * After we have deprecated the style function, we can use the compiled rules directly\r\n * and pass a more complete evaluation context (variables, zoom, time, etc.).\r\n *\r\n * @param {Array<import('../../style/flat.js').FlatStyle>} flatStyles The flat styles.\r\n * @return {import('../../style/Style.js').StyleFunction} A style function.\r\n */\r\nexport function flatStylesToStyleFunction(flatStyles) {\r\n  const parsingContext = newParsingContext();\r\n  const length = flatStyles.length;\r\n\r\n  /**\r\n   * @type {Array<StyleEvaluator>}\r\n   */\r\n  const evaluators = new Array(length);\r\n  for (let i = 0; i < length; ++i) {\r\n    evaluators[i] = buildStyle(flatStyles[i], parsingContext);\r\n  }\r\n  const evaluationContext = newEvaluationContext();\r\n\r\n  /**\r\n   * @type {Array<Style>}\r\n   */\r\n  const styles = new Array(length);\r\n\r\n  return function (feature, resolution) {\r\n    evaluationContext.properties = feature.getPropertiesInternal();\r\n    evaluationContext.resolution = resolution;\r\n    if (parsingContext.featureId) {\r\n      const id = feature.getId();\r\n      if (id !== undefined) {\r\n        evaluationContext.featureId = id;\r\n      } else {\r\n        evaluationContext.featureId = null;\r\n      }\r\n    }\r\n    let nonNullCount = 0;\r\n    for (let i = 0; i < length; ++i) {\r\n      const style = evaluators[i](evaluationContext);\r\n      if (style) {\r\n        styles[nonNullCount] = style;\r\n        nonNullCount += 1;\r\n      }\r\n    }\r\n    styles.length = nonNullCount;\r\n    return styles;\r\n  };\r\n}\r\n\r\n/**\r\n * @typedef {function(EvaluationContext):Array<Style>} RuleSetEvaluator\r\n */\r\n\r\n/**\r\n * @typedef {Object} CompiledRule\r\n * @property {ExpressionEvaluator} filter The compiled filter evaluator.\r\n * @property {Array<StyleEvaluator>} styles The list of compiled style evaluators.\r\n */\r\n\r\n/**\r\n * @param {Array<import('../../style/flat.js').Rule>} rules The rules.\r\n * @param {ParsingContext} context The parsing context.\r\n * @return {RuleSetEvaluator} The evaluator function.\r\n */\r\nexport function buildRuleSet(rules, context) {\r\n  const length = rules.length;\r\n\r\n  /**\r\n   * @type {Array<CompiledRule>}\r\n   */\r\n  const compiledRules = new Array(length);\r\n\r\n  for (let i = 0; i < length; ++i) {\r\n    const rule = rules[i];\r\n    const filter =\r\n      'filter' in rule\r\n        ? buildExpression(rule.filter, BooleanType, context)\r\n        : always;\r\n\r\n    /**\r\n     * @type {Array<StyleEvaluator>}\r\n     */\r\n    let styles;\r\n    if (Array.isArray(rule.style)) {\r\n      const styleLength = rule.style.length;\r\n      styles = new Array(styleLength);\r\n      for (let j = 0; j < styleLength; ++j) {\r\n        styles[j] = buildStyle(rule.style[j], context);\r\n      }\r\n    } else {\r\n      styles = [buildStyle(rule.style, context)];\r\n    }\r\n\r\n    compiledRules[i] = {filter, styles};\r\n  }\r\n\r\n  return function (context) {\r\n    /**\r\n     * @type {Array<Style>}\r\n     */\r\n    const styles = [];\r\n\r\n    let someMatched = false;\r\n    for (let i = 0; i < length; ++i) {\r\n      const filterEvaluator = compiledRules[i].filter;\r\n      if (!filterEvaluator(context)) {\r\n        continue;\r\n      }\r\n      if (rules[i].else && someMatched) {\r\n        continue;\r\n      }\r\n      someMatched = true;\r\n      for (const styleEvaluator of compiledRules[i].styles) {\r\n        const style = styleEvaluator(context);\r\n        if (!style) {\r\n          continue;\r\n        }\r\n        styles.push(style);\r\n      }\r\n    }\r\n\r\n    return styles;\r\n  };\r\n}\r\n\r\n/**\r\n * @typedef {function(EvaluationContext):Style|null} StyleEvaluator\r\n */\r\n\r\n/**\r\n * @param {FlatStyle} flatStyle A flat style literal.\r\n * @param {ParsingContext} context The parsing context.\r\n * @return {StyleEvaluator} A function that evaluates to a style.  The style returned by\r\n * this function will be reused between invocations.\r\n */\r\nexport function buildStyle(flatStyle, context) {\r\n  const evaluateFill = buildFill(flatStyle, '', context);\r\n  const evaluateStroke = buildStroke(flatStyle, '', context);\r\n  const evaluateText = buildText(flatStyle, context);\r\n  const evaluateImage = buildImage(flatStyle, context);\r\n  const evaluateZIndex = numberEvaluator(flatStyle, 'z-index', context);\r\n\r\n  if (\r\n    !evaluateFill &&\r\n    !evaluateStroke &&\r\n    !evaluateText &&\r\n    !evaluateImage &&\r\n    !isEmpty(flatStyle)\r\n  ) {\r\n    // assume this is a user error\r\n    // would be nice to check the properties and suggest \"did you mean...\"\r\n    throw new Error(\r\n      'No fill, stroke, point, or text symbolizer properties in style: ' +\r\n        JSON.stringify(flatStyle),\r\n    );\r\n  }\r\n\r\n  const style = new Style();\r\n  return function (context) {\r\n    let empty = true;\r\n    if (evaluateFill) {\r\n      const fill = evaluateFill(context);\r\n      if (fill) {\r\n        empty = false;\r\n      }\r\n      style.setFill(fill);\r\n    }\r\n    if (evaluateStroke) {\r\n      const stroke = evaluateStroke(context);\r\n      if (stroke) {\r\n        empty = false;\r\n      }\r\n      style.setStroke(stroke);\r\n    }\r\n    if (evaluateText) {\r\n      const text = evaluateText(context);\r\n      if (text) {\r\n        empty = false;\r\n      }\r\n      style.setText(text);\r\n    }\r\n    if (evaluateImage) {\r\n      const image = evaluateImage(context);\r\n      if (image) {\r\n        empty = false;\r\n      }\r\n      style.setImage(image);\r\n    }\r\n    if (evaluateZIndex) {\r\n      style.setZIndex(evaluateZIndex(context));\r\n    }\r\n    if (empty) {\r\n      return null;\r\n    }\r\n    return style;\r\n  };\r\n}\r\n\r\n/**\r\n * @typedef {function(EvaluationContext):Fill|null} FillEvaluator\r\n */\r\n\r\n/**\r\n * @param {FlatStyle} flatStyle The flat style.\r\n * @param {string} prefix The property prefix.\r\n * @param {ParsingContext} context The parsing context.\r\n * @return {FillEvaluator?} A function that evaluates to a fill.\r\n */\r\nfunction buildFill(flatStyle, prefix, context) {\r\n  let evaluateColor;\r\n  if (prefix + 'fill-pattern-src' in flatStyle) {\r\n    evaluateColor = patternEvaluator(flatStyle, prefix + 'fill-', context);\r\n  } else {\r\n    if (flatStyle[prefix + 'fill-color'] === 'none') {\r\n      // avoids hit detection\r\n      return (context) => null;\r\n    }\r\n\r\n    evaluateColor = colorLikeEvaluator(\r\n      flatStyle,\r\n      prefix + 'fill-color',\r\n      context,\r\n    );\r\n  }\r\n  if (!evaluateColor) {\r\n    return null;\r\n  }\r\n\r\n  const fill = new Fill();\r\n  return function (context) {\r\n    const color = evaluateColor(context);\r\n    if (color === NO_COLOR) {\r\n      return null;\r\n    }\r\n    fill.setColor(color);\r\n    return fill;\r\n  };\r\n}\r\n\r\n/**\r\n * @typedef {function(EvaluationContext):Stroke|null} StrokeEvaluator\r\n */\r\n\r\n/**\r\n * @param {FlatStyle} flatStyle The flat style.\r\n * @param {string} prefix The property prefix.\r\n * @param {ParsingContext} context The parsing context.\r\n * @return {StrokeEvaluator?} A function the evaluates to a stroke.\r\n */\r\nfunction buildStroke(flatStyle, prefix, context) {\r\n  const evaluateWidth = numberEvaluator(\r\n    flatStyle,\r\n    prefix + 'stroke-width',\r\n    context,\r\n  );\r\n\r\n  const evaluateColor = colorLikeEvaluator(\r\n    flatStyle,\r\n    prefix + 'stroke-color',\r\n    context,\r\n  );\r\n\r\n  if (!evaluateWidth && !evaluateColor) {\r\n    return null;\r\n  }\r\n\r\n  const evaluateLineCap = stringEvaluator(\r\n    flatStyle,\r\n    prefix + 'stroke-line-cap',\r\n    context,\r\n  );\r\n\r\n  const evaluateLineJoin = stringEvaluator(\r\n    flatStyle,\r\n    prefix + 'stroke-line-join',\r\n    context,\r\n  );\r\n\r\n  const evaluateLineDash = numberArrayEvaluator(\r\n    flatStyle,\r\n    prefix + 'stroke-line-dash',\r\n    context,\r\n  );\r\n\r\n  const evaluateLineDashOffset = numberEvaluator(\r\n    flatStyle,\r\n    prefix + 'stroke-line-dash-offset',\r\n    context,\r\n  );\r\n\r\n  const evaluateMiterLimit = numberEvaluator(\r\n    flatStyle,\r\n    prefix + 'stroke-miter-limit',\r\n    context,\r\n  );\r\n\r\n  const stroke = new Stroke();\r\n  return function (context) {\r\n    if (evaluateColor) {\r\n      const color = evaluateColor(context);\r\n      if (color === NO_COLOR) {\r\n        return null;\r\n      }\r\n      stroke.setColor(color);\r\n    }\r\n\r\n    if (evaluateWidth) {\r\n      stroke.setWidth(evaluateWidth(context));\r\n    }\r\n\r\n    if (evaluateLineCap) {\r\n      const lineCap = evaluateLineCap(context);\r\n      if (lineCap !== 'butt' && lineCap !== 'round' && lineCap !== 'square') {\r\n        throw new Error('Expected butt, round, or square line cap');\r\n      }\r\n      stroke.setLineCap(lineCap);\r\n    }\r\n\r\n    if (evaluateLineJoin) {\r\n      const lineJoin = evaluateLineJoin(context);\r\n      if (\r\n        lineJoin !== 'bevel' &&\r\n        lineJoin !== 'round' &&\r\n        lineJoin !== 'miter'\r\n      ) {\r\n        throw new Error('Expected bevel, round, or miter line join');\r\n      }\r\n      stroke.setLineJoin(lineJoin);\r\n    }\r\n\r\n    if (evaluateLineDash) {\r\n      stroke.setLineDash(evaluateLineDash(context));\r\n    }\r\n\r\n    if (evaluateLineDashOffset) {\r\n      stroke.setLineDashOffset(evaluateLineDashOffset(context));\r\n    }\r\n\r\n    if (evaluateMiterLimit) {\r\n      stroke.setMiterLimit(evaluateMiterLimit(context));\r\n    }\r\n\r\n    return stroke;\r\n  };\r\n}\r\n\r\n/**\r\n * @typedef {function(EvaluationContext):Text} TextEvaluator\r\n */\r\n\r\n/**\r\n * @param {FlatStyle} flatStyle The flat style.\r\n * @param {ParsingContext} context The parsing context.\r\n * @return {TextEvaluator?} A function that evaluates to a text symbolizer.\r\n */\r\nfunction buildText(flatStyle, context) {\r\n  const prefix = 'text-';\r\n\r\n  // Currently, an Array<string> may be used for rich text support.  This doesn't\r\n  // work with our expression syntax where arrays of strings are interpreted as\r\n  // call expressions.  To support rich text, we could add a 'strings' operator\r\n  // where all the following arguments would be string values.\r\n  const evaluateValue = stringEvaluator(flatStyle, prefix + 'value', context);\r\n  if (!evaluateValue) {\r\n    return null;\r\n  }\r\n\r\n  const evaluateFill = buildFill(flatStyle, prefix, context);\r\n\r\n  const evaluateBackgroundFill = buildFill(\r\n    flatStyle,\r\n    prefix + 'background-',\r\n    context,\r\n  );\r\n\r\n  const evaluateStroke = buildStroke(flatStyle, prefix, context);\r\n\r\n  const evaluateBackgroundStroke = buildStroke(\r\n    flatStyle,\r\n    prefix + 'background-',\r\n    context,\r\n  );\r\n\r\n  const evaluateFont = stringEvaluator(flatStyle, prefix + 'font', context);\r\n\r\n  const evaluateMaxAngle = numberEvaluator(\r\n    flatStyle,\r\n    prefix + 'max-angle',\r\n    context,\r\n  );\r\n\r\n  const evaluateOffsetX = numberEvaluator(\r\n    flatStyle,\r\n    prefix + 'offset-x',\r\n    context,\r\n  );\r\n\r\n  const evaluateOffsetY = numberEvaluator(\r\n    flatStyle,\r\n    prefix + 'offset-y',\r\n    context,\r\n  );\r\n\r\n  const evaluateOverflow = booleanEvaluator(\r\n    flatStyle,\r\n    prefix + 'overflow',\r\n    context,\r\n  );\r\n\r\n  const evaluatePlacement = stringEvaluator(\r\n    flatStyle,\r\n    prefix + 'placement',\r\n    context,\r\n  );\r\n\r\n  const evaluateRepeat = numberEvaluator(flatStyle, prefix + 'repeat', context);\r\n\r\n  const evaluateScale = sizeLikeEvaluator(flatStyle, prefix + 'scale', context);\r\n\r\n  const evaluateRotateWithView = booleanEvaluator(\r\n    flatStyle,\r\n    prefix + 'rotate-with-view',\r\n    context,\r\n  );\r\n\r\n  const evaluateRotation = numberEvaluator(\r\n    flatStyle,\r\n    prefix + 'rotation',\r\n    context,\r\n  );\r\n\r\n  const evaluateAlign = stringEvaluator(flatStyle, prefix + 'align', context);\r\n\r\n  const evaluateJustify = stringEvaluator(\r\n    flatStyle,\r\n    prefix + 'justify',\r\n    context,\r\n  );\r\n\r\n  const evaluateBaseline = stringEvaluator(\r\n    flatStyle,\r\n    prefix + 'baseline',\r\n    context,\r\n  );\r\n\r\n  const evaluateKeepUpright = booleanEvaluator(\r\n    flatStyle,\r\n    prefix + 'keep-upright',\r\n    context,\r\n  );\r\n\r\n  const evaluatePadding = numberArrayEvaluator(\r\n    flatStyle,\r\n    prefix + 'padding',\r\n    context,\r\n  );\r\n\r\n  // The following properties are not currently settable\r\n  const declutterMode = optionalDeclutterMode(\r\n    flatStyle,\r\n    prefix + 'declutter-mode',\r\n  );\r\n\r\n  const text = new Text({declutterMode});\r\n\r\n  return function (context) {\r\n    text.setText(evaluateValue(context));\r\n\r\n    if (evaluateFill) {\r\n      text.setFill(evaluateFill(context));\r\n    }\r\n\r\n    if (evaluateBackgroundFill) {\r\n      text.setBackgroundFill(evaluateBackgroundFill(context));\r\n    }\r\n\r\n    if (evaluateStroke) {\r\n      text.setStroke(evaluateStroke(context));\r\n    }\r\n\r\n    if (evaluateBackgroundStroke) {\r\n      text.setBackgroundStroke(evaluateBackgroundStroke(context));\r\n    }\r\n\r\n    if (evaluateFont) {\r\n      text.setFont(evaluateFont(context));\r\n    }\r\n\r\n    if (evaluateMaxAngle) {\r\n      text.setMaxAngle(evaluateMaxAngle(context));\r\n    }\r\n\r\n    if (evaluateOffsetX) {\r\n      text.setOffsetX(evaluateOffsetX(context));\r\n    }\r\n\r\n    if (evaluateOffsetY) {\r\n      text.setOffsetY(evaluateOffsetY(context));\r\n    }\r\n\r\n    if (evaluateOverflow) {\r\n      text.setOverflow(evaluateOverflow(context));\r\n    }\r\n\r\n    if (evaluatePlacement) {\r\n      const placement = evaluatePlacement(context);\r\n      if (placement !== 'point' && placement !== 'line') {\r\n        throw new Error('Expected point or line for text-placement');\r\n      }\r\n      text.setPlacement(placement);\r\n    }\r\n\r\n    if (evaluateRepeat) {\r\n      text.setRepeat(evaluateRepeat(context));\r\n    }\r\n\r\n    if (evaluateScale) {\r\n      text.setScale(evaluateScale(context));\r\n    }\r\n\r\n    if (evaluateRotateWithView) {\r\n      text.setRotateWithView(evaluateRotateWithView(context));\r\n    }\r\n\r\n    if (evaluateRotation) {\r\n      text.setRotation(evaluateRotation(context));\r\n    }\r\n\r\n    if (evaluateAlign) {\r\n      const textAlign = evaluateAlign(context);\r\n      if (\r\n        textAlign !== 'left' &&\r\n        textAlign !== 'center' &&\r\n        textAlign !== 'right' &&\r\n        textAlign !== 'end' &&\r\n        textAlign !== 'start'\r\n      ) {\r\n        throw new Error(\r\n          'Expected left, right, center, start, or end for text-align',\r\n        );\r\n      }\r\n      text.setTextAlign(textAlign);\r\n    }\r\n\r\n    if (evaluateJustify) {\r\n      const justify = evaluateJustify(context);\r\n      if (justify !== 'left' && justify !== 'right' && justify !== 'center') {\r\n        throw new Error('Expected left, right, or center for text-justify');\r\n      }\r\n      text.setJustify(justify);\r\n    }\r\n\r\n    if (evaluateBaseline) {\r\n      const textBaseline = evaluateBaseline(context);\r\n      if (\r\n        textBaseline !== 'bottom' &&\r\n        textBaseline !== 'top' &&\r\n        textBaseline !== 'middle' &&\r\n        textBaseline !== 'alphabetic' &&\r\n        textBaseline !== 'hanging'\r\n      ) {\r\n        throw new Error(\r\n          'Expected bottom, top, middle, alphabetic, or hanging for text-baseline',\r\n        );\r\n      }\r\n      text.setTextBaseline(textBaseline);\r\n    }\r\n\r\n    if (evaluatePadding) {\r\n      text.setPadding(evaluatePadding(context));\r\n    }\r\n\r\n    if (evaluateKeepUpright) {\r\n      text.setKeepUpright(evaluateKeepUpright(context));\r\n    }\r\n\r\n    return text;\r\n  };\r\n}\r\n\r\n/**\r\n * @typedef {function(EvaluationContext):import(\"../../style/Image.js\").default} ImageEvaluator\r\n */\r\n\r\n/**\r\n * @param {FlatStyle} flatStyle The flat style.\r\n * @param {ParsingContext} context The parsing context.\r\n * @return {ImageEvaluator?} A function that evaluates to an image symbolizer.\r\n */\r\nfunction buildImage(flatStyle, context) {\r\n  if ('icon-src' in flatStyle) {\r\n    return buildIcon(flatStyle, context);\r\n  }\r\n\r\n  if ('shape-points' in flatStyle) {\r\n    return buildShape(flatStyle, context);\r\n  }\r\n\r\n  if ('circle-radius' in flatStyle) {\r\n    return buildCircle(flatStyle, context);\r\n  }\r\n\r\n  return null;\r\n}\r\n\r\n/**\r\n * @param {FlatStyle} flatStyle The flat style.\r\n * @param {ParsingContext} context The parsing context.\r\n * @return {ImageEvaluator} A function that evaluates to an image symbolizer.\r\n */\r\nfunction buildIcon(flatStyle, context) {\r\n  const prefix = 'icon-';\r\n\r\n  // required property\r\n  const srcName = prefix + 'src';\r\n  const src = requireString(flatStyle[srcName], srcName);\r\n\r\n  // settable properties\r\n  const evaluateAnchor = coordinateEvaluator(\r\n    flatStyle,\r\n    prefix + 'anchor',\r\n    context,\r\n  );\r\n\r\n  const evaluateScale = sizeLikeEvaluator(flatStyle, prefix + 'scale', context);\r\n\r\n  const evaluateOpacity = numberEvaluator(\r\n    flatStyle,\r\n    prefix + 'opacity',\r\n    context,\r\n  );\r\n\r\n  const evaluateDisplacement = coordinateEvaluator(\r\n    flatStyle,\r\n    prefix + 'displacement',\r\n    context,\r\n  );\r\n\r\n  const evaluateRotation = numberEvaluator(\r\n    flatStyle,\r\n    prefix + 'rotation',\r\n    context,\r\n  );\r\n\r\n  const evaluateRotateWithView = booleanEvaluator(\r\n    flatStyle,\r\n    prefix + 'rotate-with-view',\r\n    context,\r\n  );\r\n\r\n  // the remaining symbolizer properties are not currently settable\r\n  const anchorOrigin = optionalIconOrigin(flatStyle, prefix + 'anchor-origin');\r\n  const anchorXUnits = optionalIconAnchorUnits(\r\n    flatStyle,\r\n    prefix + 'anchor-x-units',\r\n  );\r\n  const anchorYUnits = optionalIconAnchorUnits(\r\n    flatStyle,\r\n    prefix + 'anchor-y-units',\r\n  );\r\n  const color = optionalColorLike(flatStyle, prefix + 'color');\r\n  const crossOrigin = optionalString(flatStyle, prefix + 'cross-origin');\r\n  const offset = optionalNumberArray(flatStyle, prefix + 'offset');\r\n  const offsetOrigin = optionalIconOrigin(flatStyle, prefix + 'offset-origin');\r\n  const width = optionalNumber(flatStyle, prefix + 'width');\r\n  const height = optionalNumber(flatStyle, prefix + 'height');\r\n  const size = optionalSize(flatStyle, prefix + 'size');\r\n  const declutterMode = optionalDeclutterMode(\r\n    flatStyle,\r\n    prefix + 'declutter-mode',\r\n  );\r\n\r\n  const icon = new Icon({\r\n    src,\r\n    anchorOrigin,\r\n    anchorXUnits,\r\n    anchorYUnits,\r\n    color,\r\n    crossOrigin,\r\n    offset,\r\n    offsetOrigin,\r\n    height,\r\n    width,\r\n    size,\r\n    declutterMode,\r\n  });\r\n\r\n  return function (context) {\r\n    if (evaluateOpacity) {\r\n      icon.setOpacity(evaluateOpacity(context));\r\n    }\r\n\r\n    if (evaluateDisplacement) {\r\n      icon.setDisplacement(evaluateDisplacement(context));\r\n    }\r\n\r\n    if (evaluateRotation) {\r\n      icon.setRotation(evaluateRotation(context));\r\n    }\r\n\r\n    if (evaluateRotateWithView) {\r\n      icon.setRotateWithView(evaluateRotateWithView(context));\r\n    }\r\n\r\n    if (evaluateScale) {\r\n      icon.setScale(evaluateScale(context));\r\n    }\r\n\r\n    if (evaluateAnchor) {\r\n      icon.setAnchor(evaluateAnchor(context));\r\n    }\r\n    return icon;\r\n  };\r\n}\r\n\r\n/**\r\n * @param {FlatStyle} flatStyle The flat style.\r\n * @param {ParsingContext} context The parsing context.\r\n * @return {ImageEvaluator} A function that evaluates to an icon symbolizer.\r\n */\r\nfunction buildShape(flatStyle, context) {\r\n  const prefix = 'shape-';\r\n\r\n  // required property\r\n  const pointsName = prefix + 'points';\r\n  const radiusName = prefix + 'radius';\r\n  const points = requireNumber(flatStyle[pointsName], pointsName);\r\n  const radius = requireNumber(flatStyle[radiusName], radiusName);\r\n\r\n  // settable properties\r\n  const evaluateFill = buildFill(flatStyle, prefix, context);\r\n  const evaluateStroke = buildStroke(flatStyle, prefix, context);\r\n  const evaluateScale = sizeLikeEvaluator(flatStyle, prefix + 'scale', context);\r\n  const evaluateDisplacement = coordinateEvaluator(\r\n    flatStyle,\r\n    prefix + 'displacement',\r\n    context,\r\n  );\r\n  const evaluateRotation = numberEvaluator(\r\n    flatStyle,\r\n    prefix + 'rotation',\r\n    context,\r\n  );\r\n  const evaluateRotateWithView = booleanEvaluator(\r\n    flatStyle,\r\n    prefix + 'rotate-with-view',\r\n    context,\r\n  );\r\n\r\n  // the remaining properties are not currently settable\r\n  const radius2 = optionalNumber(flatStyle, prefix + 'radius2');\r\n  const angle = optionalNumber(flatStyle, prefix + 'angle');\r\n  const declutterMode = optionalDeclutterMode(\r\n    flatStyle,\r\n    prefix + 'declutter-mode',\r\n  );\r\n\r\n  const shape = new RegularShape({\r\n    points,\r\n    radius,\r\n    radius2,\r\n    angle,\r\n    declutterMode,\r\n  });\r\n\r\n  return function (context) {\r\n    if (evaluateFill) {\r\n      shape.setFill(evaluateFill(context));\r\n    }\r\n    if (evaluateStroke) {\r\n      shape.setStroke(evaluateStroke(context));\r\n    }\r\n    if (evaluateDisplacement) {\r\n      shape.setDisplacement(evaluateDisplacement(context));\r\n    }\r\n    if (evaluateRotation) {\r\n      shape.setRotation(evaluateRotation(context));\r\n    }\r\n    if (evaluateRotateWithView) {\r\n      shape.setRotateWithView(evaluateRotateWithView(context));\r\n    }\r\n    if (evaluateScale) {\r\n      shape.setScale(evaluateScale(context));\r\n    }\r\n\r\n    return shape;\r\n  };\r\n}\r\n\r\n/**\r\n * @param {FlatStyle} flatStyle The flat style.\r\n * @param {ParsingContext} context The parsing context.\r\n * @return {ImageEvaluator} A function that evaluates to a circle symbolizer.\r\n */\r\nfunction buildCircle(flatStyle, context) {\r\n  const prefix = 'circle-';\r\n\r\n  // settable properties\r\n  const evaluateFill = buildFill(flatStyle, prefix, context);\r\n  const evaluateStroke = buildStroke(flatStyle, prefix, context);\r\n  const evaluateRadius = numberEvaluator(flatStyle, prefix + 'radius', context);\r\n  const evaluateScale = sizeLikeEvaluator(flatStyle, prefix + 'scale', context);\r\n  const evaluateDisplacement = coordinateEvaluator(\r\n    flatStyle,\r\n    prefix + 'displacement',\r\n    context,\r\n  );\r\n  const evaluateRotation = numberEvaluator(\r\n    flatStyle,\r\n    prefix + 'rotation',\r\n    context,\r\n  );\r\n  const evaluateRotateWithView = booleanEvaluator(\r\n    flatStyle,\r\n    prefix + 'rotate-with-view',\r\n    context,\r\n  );\r\n\r\n  // the remaining properties are not currently settable\r\n  const declutterMode = optionalDeclutterMode(\r\n    flatStyle,\r\n    prefix + 'declutter-mode',\r\n  );\r\n\r\n  const circle = new Circle({\r\n    radius: 5, // this is arbitrary, but required - the evaluated radius is used below\r\n    declutterMode,\r\n  });\r\n\r\n  return function (context) {\r\n    if (evaluateRadius) {\r\n      circle.setRadius(evaluateRadius(context));\r\n    }\r\n    if (evaluateFill) {\r\n      circle.setFill(evaluateFill(context));\r\n    }\r\n    if (evaluateStroke) {\r\n      circle.setStroke(evaluateStroke(context));\r\n    }\r\n    if (evaluateDisplacement) {\r\n      circle.setDisplacement(evaluateDisplacement(context));\r\n    }\r\n    if (evaluateRotation) {\r\n      circle.setRotation(evaluateRotation(context));\r\n    }\r\n    if (evaluateRotateWithView) {\r\n      circle.setRotateWithView(evaluateRotateWithView(context));\r\n    }\r\n    if (evaluateScale) {\r\n      circle.setScale(evaluateScale(context));\r\n    }\r\n\r\n    return circle;\r\n  };\r\n}\r\n\r\n/**\r\n * @param {FlatStyle} flatStyle The flat style.\r\n * @param {string} name The property name.\r\n * @param {ParsingContext} context The parsing context.\r\n * @return {import('../../expr/cpu.js').NumberEvaluator|undefined} The expression evaluator or undefined.\r\n */\r\nfunction numberEvaluator(flatStyle, name, context) {\r\n  if (!(name in flatStyle)) {\r\n    return undefined;\r\n  }\r\n  const evaluator = buildExpression(flatStyle[name], NumberType, context);\r\n  return function (context) {\r\n    return requireNumber(evaluator(context), name);\r\n  };\r\n}\r\n\r\n/**\r\n * @param {FlatStyle} flatStyle The flat style.\r\n * @param {string} name The property name.\r\n * @param {ParsingContext} context The parsing context.\r\n * @return {import('../../expr/cpu.js').StringEvaluator?} The expression evaluator.\r\n */\r\nfunction stringEvaluator(flatStyle, name, context) {\r\n  if (!(name in flatStyle)) {\r\n    return null;\r\n  }\r\n  const evaluator = buildExpression(flatStyle[name], StringType, context);\r\n  return function (context) {\r\n    return requireString(evaluator(context), name);\r\n  };\r\n}\r\n\r\nfunction patternEvaluator(flatStyle, prefix, context) {\r\n  const srcEvaluator = stringEvaluator(\r\n    flatStyle,\r\n    prefix + 'pattern-src',\r\n    context,\r\n  );\r\n  const offsetEvaluator = sizeEvaluator(\r\n    flatStyle,\r\n    prefix + 'pattern-offset',\r\n    context,\r\n  );\r\n  const patternSizeEvaluator = sizeEvaluator(\r\n    flatStyle,\r\n    prefix + 'pattern-size',\r\n    context,\r\n  );\r\n  const colorEvaluator = colorLikeEvaluator(\r\n    flatStyle,\r\n    prefix + 'color',\r\n    context,\r\n  );\r\n  return function (context) {\r\n    return {\r\n      src: srcEvaluator(context),\r\n      offset: offsetEvaluator && offsetEvaluator(context),\r\n      size: patternSizeEvaluator && patternSizeEvaluator(context),\r\n      color: colorEvaluator && colorEvaluator(context),\r\n    };\r\n  };\r\n}\r\n\r\n/**\r\n * @param {FlatStyle} flatStyle The flat style.\r\n * @param {string} name The property name.\r\n * @param {ParsingContext} context The parsing context.\r\n * @return {import('../../expr/cpu.js').BooleanEvaluator?} The expression evaluator.\r\n */\r\nfunction booleanEvaluator(flatStyle, name, context) {\r\n  if (!(name in flatStyle)) {\r\n    return null;\r\n  }\r\n  const evaluator = buildExpression(flatStyle[name], BooleanType, context);\r\n  return function (context) {\r\n    const value = evaluator(context);\r\n    if (typeof value !== 'boolean') {\r\n      throw new Error(`Expected a boolean for ${name}`);\r\n    }\r\n    return value;\r\n  };\r\n}\r\n\r\n/**\r\n * @param {FlatStyle} flatStyle The flat style.\r\n * @param {string} name The property name.\r\n * @param {ParsingContext} context The parsing context.\r\n * @return {import('../../expr/cpu.js').ColorLikeEvaluator?} The expression evaluator.\r\n */\r\nfunction colorLikeEvaluator(flatStyle, name, context) {\r\n  if (!(name in flatStyle)) {\r\n    return null;\r\n  }\r\n  const evaluator = buildExpression(flatStyle[name], ColorType, context);\r\n  return function (context) {\r\n    return requireColorLike(evaluator(context), name);\r\n  };\r\n}\r\n\r\n/**\r\n * @param {FlatStyle} flatStyle The flat style.\r\n * @param {string} name The property name.\r\n * @param {ParsingContext} context The parsing context.\r\n * @return {import('../../expr/cpu.js').NumberArrayEvaluator?} The expression evaluator.\r\n */\r\nfunction numberArrayEvaluator(flatStyle, name, context) {\r\n  if (!(name in flatStyle)) {\r\n    return null;\r\n  }\r\n  const evaluator = buildExpression(flatStyle[name], NumberArrayType, context);\r\n  return function (context) {\r\n    return requireNumberArray(evaluator(context), name);\r\n  };\r\n}\r\n\r\n/**\r\n * @param {FlatStyle} flatStyle The flat style.\r\n * @param {string} name The property name.\r\n * @param {ParsingContext} context The parsing context.\r\n * @return {import('../../expr/cpu.js').CoordinateEvaluator?} The expression evaluator.\r\n */\r\nfunction coordinateEvaluator(flatStyle, name, context) {\r\n  if (!(name in flatStyle)) {\r\n    return null;\r\n  }\r\n  const evaluator = buildExpression(flatStyle[name], NumberArrayType, context);\r\n  return function (context) {\r\n    const array = requireNumberArray(evaluator(context), name);\r\n    if (array.length !== 2) {\r\n      throw new Error(`Expected two numbers for ${name}`);\r\n    }\r\n    return array;\r\n  };\r\n}\r\n\r\n/**\r\n * @param {FlatStyle} flatStyle The flat style.\r\n * @param {string} name The property name.\r\n * @param {ParsingContext} context The parsing context.\r\n * @return {import('../../expr/cpu.js').SizeEvaluator?} The expression evaluator.\r\n */\r\nfunction sizeEvaluator(flatStyle, name, context) {\r\n  if (!(name in flatStyle)) {\r\n    return null;\r\n  }\r\n  const evaluator = buildExpression(flatStyle[name], NumberArrayType, context);\r\n  return function (context) {\r\n    return requireSize(evaluator(context), name);\r\n  };\r\n}\r\n\r\n/**\r\n * @param {FlatStyle} flatStyle The flat style.\r\n * @param {string} name The property name.\r\n * @param {ParsingContext} context The parsing context.\r\n * @return {import('../../expr/cpu.js').SizeLikeEvaluator?} The expression evaluator.\r\n */\r\nfunction sizeLikeEvaluator(flatStyle, name, context) {\r\n  if (!(name in flatStyle)) {\r\n    return null;\r\n  }\r\n  const evaluator = buildExpression(\r\n    flatStyle[name],\r\n    NumberArrayType | NumberType,\r\n    context,\r\n  );\r\n  return function (context) {\r\n    return requireSizeLike(evaluator(context), name);\r\n  };\r\n}\r\n\r\n/**\r\n * @param {FlatStyle} flatStyle The flat style.\r\n * @param {string} property The symbolizer property.\r\n * @return {number|undefined} A number or undefined.\r\n */\r\nfunction optionalNumber(flatStyle, property) {\r\n  const value = flatStyle[property];\r\n  if (value === undefined) {\r\n    return undefined;\r\n  }\r\n  if (typeof value !== 'number') {\r\n    throw new Error(`Expected a number for ${property}`);\r\n  }\r\n  return value;\r\n}\r\n\r\n/**\r\n * @param {FlatStyle} flatStyle The flat style.\r\n * @param {string} property The symbolizer property.\r\n * @return {import(\"../../size.js\").Size|undefined} A size or undefined.\r\n */\r\nfunction optionalSize(flatStyle, property) {\r\n  const encoded = flatStyle[property];\r\n  if (encoded === undefined) {\r\n    return undefined;\r\n  }\r\n  if (typeof encoded === 'number') {\r\n    return toSize(encoded);\r\n  }\r\n  if (!Array.isArray(encoded)) {\r\n    throw new Error(`Expected a number or size array for ${property}`);\r\n  }\r\n  if (\r\n    encoded.length !== 2 ||\r\n    typeof encoded[0] !== 'number' ||\r\n    typeof encoded[1] !== 'number'\r\n  ) {\r\n    throw new Error(`Expected a number or size array for ${property}`);\r\n  }\r\n  return encoded;\r\n}\r\n\r\n/**\r\n * @param {FlatStyle} flatStyle The flat style.\r\n * @param {string} property The symbolizer property.\r\n * @return {string|undefined} A string or undefined.\r\n */\r\nfunction optionalString(flatStyle, property) {\r\n  const encoded = flatStyle[property];\r\n  if (encoded === undefined) {\r\n    return undefined;\r\n  }\r\n  if (typeof encoded !== 'string') {\r\n    throw new Error(`Expected a string for ${property}`);\r\n  }\r\n  return encoded;\r\n}\r\n\r\n/**\r\n * @param {FlatStyle} flatStyle The flat style.\r\n * @param {string} property The symbolizer property.\r\n * @return {import(\"../../style/Icon.js\").IconOrigin|undefined} An icon origin or undefined.\r\n */\r\nfunction optionalIconOrigin(flatStyle, property) {\r\n  const encoded = flatStyle[property];\r\n  if (encoded === undefined) {\r\n    return undefined;\r\n  }\r\n  if (\r\n    encoded !== 'bottom-left' &&\r\n    encoded !== 'bottom-right' &&\r\n    encoded !== 'top-left' &&\r\n    encoded !== 'top-right'\r\n  ) {\r\n    throw new Error(\r\n      `Expected bottom-left, bottom-right, top-left, or top-right for ${property}`,\r\n    );\r\n  }\r\n  return encoded;\r\n}\r\n\r\n/**\r\n * @param {FlatStyle} flatStyle The flat style.\r\n * @param {string} property The symbolizer property.\r\n * @return {import(\"../../style/Icon.js\").IconAnchorUnits|undefined} Icon anchor units or undefined.\r\n */\r\nfunction optionalIconAnchorUnits(flatStyle, property) {\r\n  const encoded = flatStyle[property];\r\n  if (encoded === undefined) {\r\n    return undefined;\r\n  }\r\n  if (encoded !== 'pixels' && encoded !== 'fraction') {\r\n    throw new Error(`Expected pixels or fraction for ${property}`);\r\n  }\r\n  return encoded;\r\n}\r\n\r\n/**\r\n * @param {FlatStyle} flatStyle The flat style.\r\n * @param {string} property The symbolizer property.\r\n * @return {Array<number>|undefined} An array of numbers or undefined.\r\n */\r\nfunction optionalNumberArray(flatStyle, property) {\r\n  const encoded = flatStyle[property];\r\n  if (encoded === undefined) {\r\n    return undefined;\r\n  }\r\n  return requireNumberArray(encoded, property);\r\n}\r\n\r\n/**\r\n * @param {FlatStyle} flatStyle The flat style.\r\n * @param {string} property The symbolizer property.\r\n * @return {import('../../style/Style.js').DeclutterMode} Icon declutter mode.\r\n */\r\nfunction optionalDeclutterMode(flatStyle, property) {\r\n  const encoded = flatStyle[property];\r\n  if (encoded === undefined) {\r\n    return undefined;\r\n  }\r\n  if (typeof encoded !== 'string') {\r\n    throw new Error(`Expected a string for ${property}`);\r\n  }\r\n  if (encoded !== 'declutter' && encoded !== 'obstacle' && encoded !== 'none') {\r\n    throw new Error(`Expected declutter, obstacle, or none for ${property}`);\r\n  }\r\n  return encoded;\r\n}\r\n\r\n/**\r\n * @param {FlatStyle} flatStyle The flat style.\r\n * @param {string} property The symbolizer property.\r\n * @return {string|Array<number>|undefined} A string or an array of color values or undefined.\r\n */\r\nfunction optionalColorLike(flatStyle, property) {\r\n  const encoded = flatStyle[property];\r\n  if (encoded === undefined) {\r\n    return undefined;\r\n  }\r\n  return requireColorLike(encoded, property);\r\n}\r\n\r\n/**\r\n * @param {any} value The value.\r\n * @param {string} property The property.\r\n * @return {Array<number>} An array of numbers.\r\n */\r\nfunction requireNumberArray(value, property) {\r\n  if (!Array.isArray(value)) {\r\n    throw new Error(`Expected an array for ${property}`);\r\n  }\r\n  const length = value.length;\r\n  for (let i = 0; i < length; ++i) {\r\n    if (typeof value[i] !== 'number') {\r\n      throw new Error(`Expected an array of numbers for ${property}`);\r\n    }\r\n  }\r\n  return value;\r\n}\r\n\r\n/**\r\n * @param {any} value The value.\r\n * @param {string} property The property.\r\n * @return {string} A string.\r\n */\r\nfunction requireString(value, property) {\r\n  if (typeof value !== 'string') {\r\n    throw new Error(`Expected a string for ${property}`);\r\n  }\r\n  return value;\r\n}\r\n\r\n/**\r\n * @param {any} value The value.\r\n * @param {string} property The property.\r\n * @return {number} A number.\r\n */\r\nfunction requireNumber(value, property) {\r\n  if (typeof value !== 'number') {\r\n    throw new Error(`Expected a number for ${property}`);\r\n  }\r\n  return value;\r\n}\r\n\r\n/**\r\n * @param {any} value The value.\r\n * @param {string} property The property.\r\n * @return {Array<number>|string} A color.\r\n */\r\nfunction requireColorLike(value, property) {\r\n  if (typeof value === 'string') {\r\n    return value;\r\n  }\r\n  const array = requireNumberArray(value, property);\r\n  const length = array.length;\r\n  if (length < 3 || length > 4) {\r\n    throw new Error(`Expected a color with 3 or 4 values for ${property}`);\r\n  }\r\n  return array;\r\n}\r\n\r\n/**\r\n * @param {any} value The value.\r\n * @param {string} property The property.\r\n * @return {Array<number>} A number or an array of two numbers.\r\n */\r\nfunction requireSize(value, property) {\r\n  const size = requireNumberArray(value, property);\r\n  if (size.length !== 2) {\r\n    throw new Error(`Expected an array of two numbers for ${property}`);\r\n  }\r\n  return size;\r\n}\r\n\r\n/**\r\n * @param {any} value The value.\r\n * @param {string} property The property.\r\n * @return {number|Array<number>} A number or an array of two numbers.\r\n */\r\nfunction requireSizeLike(value, property) {\r\n  if (typeof value === 'number') {\r\n    return value;\r\n  }\r\n  return requireSize(value, property);\r\n}\r\n","/**\r\n * @module ol/color\r\n */\r\nimport {createCanvasContext2D} from './dom.js';\r\nimport {clamp, toFixed} from './math.js';\r\n\r\n/**\r\n * A color represented as a short array [red, green, blue, alpha].\r\n * red, green, and blue should be integers in the range 0..255 inclusive.\r\n * alpha should be a float in the range 0..1 inclusive. If no alpha value is\r\n * given then `1` will be used.\r\n * @typedef {Array<number>} Color\r\n * @api\r\n */\r\n\r\n/**\r\n * Color to indicate that no color should be rendered. This is meant to be used for per-reference\r\n * comparisons only.\r\n * @type {Color}\r\n */\r\nexport const NO_COLOR = [NaN, NaN, NaN, 0];\r\n\r\nlet colorParseContext;\r\n/**\r\n * @return {CanvasRenderingContext2D} The color parse context\r\n */\r\nfunction getColorParseContext() {\r\n  if (!colorParseContext) {\r\n    colorParseContext = createCanvasContext2D(1, 1, undefined, {\r\n      willReadFrequently: true,\r\n      desynchronized: true,\r\n    });\r\n  }\r\n  return colorParseContext;\r\n}\r\n\r\nconst rgbModernRegEx =\r\n  /^rgba?\\(\\s*(\\d+%?)\\s+(\\d+%?)\\s+(\\d+%?)(?:\\s*\\/\\s*(\\d+%|\\d*\\.\\d+|[01]))?\\s*\\)$/i;\r\nconst rgbLegacyAbsoluteRegEx =\r\n  /^rgba?\\(\\s*(\\d+)\\s*,\\s*(\\d+)\\s*,\\s*(\\d+)(?:\\s*,\\s*(\\d+%|\\d*\\.\\d+|[01]))?\\s*\\)$/i;\r\nconst rgbLegacyPercentageRegEx =\r\n  /^rgba?\\(\\s*(\\d+%)\\s*,\\s*(\\d+%)\\s*,\\s*(\\d+%)(?:\\s*,\\s*(\\d+%|\\d*\\.\\d+|[01]))?\\s*\\)$/i;\r\nconst hexRegEx = /^#([\\da-f]{3,4}|[\\da-f]{6}|[\\da-f]{8})$/i;\r\n\r\n/**\r\n * @param {string} s Color component as number or percentage.\r\n * @param {number} divider Divider for percentage.\r\n * @return {number} Color component.\r\n */\r\nfunction toColorComponent(s, divider) {\r\n  return s.endsWith('%')\r\n    ? Number(s.substring(0, s.length - 1)) / divider\r\n    : Number(s);\r\n}\r\n\r\n/**\r\n * @param {string} color Color string.\r\n */\r\nfunction throwInvalidColor(color) {\r\n  throw new Error('failed to parse \"' + color + '\" as color');\r\n}\r\n\r\n/**\r\n * @param {string} color Color string.\r\n * @return {Color} RGBa color array.\r\n */\r\nfunction parseRgba(color) {\r\n  // Fast lane for rgb(a) colors\r\n  if (color.toLowerCase().startsWith('rgb')) {\r\n    const rgb =\r\n      color.match(rgbLegacyAbsoluteRegEx) ||\r\n      color.match(rgbModernRegEx) ||\r\n      color.match(rgbLegacyPercentageRegEx);\r\n    if (rgb) {\r\n      const alpha = rgb[4];\r\n      const rgbDivider = 100 / 255;\r\n      return [\r\n        clamp((toColorComponent(rgb[1], rgbDivider) + 0.5) | 0, 0, 255),\r\n        clamp((toColorComponent(rgb[2], rgbDivider) + 0.5) | 0, 0, 255),\r\n        clamp((toColorComponent(rgb[3], rgbDivider) + 0.5) | 0, 0, 255),\r\n        alpha !== undefined ? clamp(toColorComponent(alpha, 100), 0, 1) : 1,\r\n      ];\r\n    }\r\n    throwInvalidColor(color);\r\n  }\r\n  // Fast lane for hex colors (also with alpha)\r\n  if (color.startsWith('#')) {\r\n    if (hexRegEx.test(color)) {\r\n      const hex = color.substring(1);\r\n      const step = hex.length <= 4 ? 1 : 2;\r\n      const colorFromHex = [0, 0, 0, 255];\r\n      for (let i = 0, ii = hex.length; i < ii; i += step) {\r\n        let colorComponent = parseInt(hex.substring(i, i + step), 16);\r\n        if (step === 1) {\r\n          colorComponent += colorComponent << 4;\r\n        }\r\n        colorFromHex[i / step] = colorComponent;\r\n      }\r\n      colorFromHex[3] = colorFromHex[3] / 255;\r\n      return colorFromHex;\r\n    }\r\n    throwInvalidColor(color);\r\n  }\r\n  // Use canvas color serialization to parse the color into hex or rgba\r\n  // See https://www.w3.org/TR/2021/SPSD-2dcontext-20210128/#serialization-of-a-color\r\n  const context = getColorParseContext();\r\n  context.fillStyle = '#abcdef';\r\n  let invalidCheckFillStyle = context.fillStyle;\r\n  context.fillStyle = color;\r\n  if (context.fillStyle === invalidCheckFillStyle) {\r\n    context.fillStyle = '#fedcba';\r\n    invalidCheckFillStyle = context.fillStyle;\r\n    context.fillStyle = color;\r\n    if (context.fillStyle === invalidCheckFillStyle) {\r\n      throwInvalidColor(color);\r\n    }\r\n  }\r\n  const colorString = context.fillStyle;\r\n  if (colorString.startsWith('#') || colorString.startsWith('rgba')) {\r\n    return parseRgba(colorString);\r\n  }\r\n  context.clearRect(0, 0, 1, 1);\r\n  context.fillRect(0, 0, 1, 1);\r\n  const colorFromImage = Array.from(context.getImageData(0, 0, 1, 1).data);\r\n  colorFromImage[3] = toFixed(colorFromImage[3] / 255, 3);\r\n  return colorFromImage;\r\n}\r\n\r\n/**\r\n * Return the color as an rgba string.\r\n * @param {Color|string} color Color.\r\n * @return {string} Rgba string.\r\n * @api\r\n */\r\nexport function asString(color) {\r\n  if (typeof color === 'string') {\r\n    return color;\r\n  }\r\n  return toString(color);\r\n}\r\n\r\n/**\r\n * @type {number}\r\n */\r\nconst MAX_CACHE_SIZE = 1024;\r\n\r\n/**\r\n * We maintain a small cache of parsed strings.  Whenever the cache grows too large,\r\n * we delete an arbitrary set of the entries.\r\n *\r\n * @type {Object<string, Color>}\r\n */\r\nconst cache = {};\r\n\r\n/**\r\n * @type {number}\r\n */\r\nlet cacheSize = 0;\r\n\r\n/**\r\n * @param {Color} color A color that may or may not have an alpha channel.\r\n * @return {Color} The input color with an alpha channel.  If the input color has\r\n * an alpha channel, the input color will be returned unchanged.  Otherwise, a new\r\n * array will be returned with the input color and an alpha channel of 1.\r\n */\r\nexport function withAlpha(color) {\r\n  if (color.length === 4) {\r\n    return color;\r\n  }\r\n  const output = color.slice();\r\n  output[3] = 1;\r\n  return output;\r\n}\r\n\r\n// The functions b1, b2, a1, a2, rgbaToLcha and lchaToRgba below are adapted from\r\n// https://stackoverflow.com/a/67219995/2389327\r\n\r\n/**\r\n * @param {number} v Input value.\r\n * @return {number} Output value.\r\n */\r\nfunction b1(v) {\r\n  return v > 0.0031308 ? Math.pow(v, 1 / 2.4) * 269.025 - 14.025 : v * 3294.6;\r\n}\r\n\r\n/**\r\n * @param {number} v Input value.\r\n * @return {number} Output value.\r\n */\r\nfunction b2(v) {\r\n  return v > 0.2068965 ? Math.pow(v, 3) : (v - 4 / 29) * (108 / 841);\r\n}\r\n\r\n/**\r\n * @param {number} v Input value.\r\n * @return {number} Output value.\r\n */\r\nfunction a1(v) {\r\n  return v > 10.314724 ? Math.pow((v + 14.025) / 269.025, 2.4) : v / 3294.6;\r\n}\r\n\r\n/**\r\n * @param {number} v Input value.\r\n * @return {number} Output value.\r\n */\r\nfunction a2(v) {\r\n  return v > 0.0088564 ? Math.pow(v, 1 / 3) : v / (108 / 841) + 4 / 29;\r\n}\r\n\r\n/**\r\n * @param {Color} color RGBA color.\r\n * @return {Color} LCHuv color with alpha.\r\n */\r\nexport function rgbaToLcha(color) {\r\n  const r = a1(color[0]);\r\n  const g = a1(color[1]);\r\n  const b = a1(color[2]);\r\n  const y = a2(r * 0.222488403 + g * 0.716873169 + b * 0.06060791);\r\n  const l = 500 * (a2(r * 0.452247074 + g * 0.399439023 + b * 0.148375274) - y);\r\n  const q = 200 * (y - a2(r * 0.016863605 + g * 0.117638439 + b * 0.865350722));\r\n  const h = Math.atan2(q, l) * (180 / Math.PI);\r\n  return [\r\n    116 * y - 16,\r\n    Math.sqrt(l * l + q * q),\r\n    h < 0 ? h + 360 : h,\r\n    color[3],\r\n  ];\r\n}\r\n\r\n/**\r\n * @param {Color} color LCHuv color with alpha.\r\n * @return {Color} RGBA color.\r\n */\r\nexport function lchaToRgba(color) {\r\n  const l = (color[0] + 16) / 116;\r\n  const c = color[1];\r\n  const h = (color[2] * Math.PI) / 180;\r\n  const y = b2(l);\r\n  const x = b2(l + (c / 500) * Math.cos(h));\r\n  const z = b2(l - (c / 200) * Math.sin(h));\r\n  const r = b1(x * 3.021973625 - y * 1.617392459 - z * 0.404875592);\r\n  const g = b1(x * -0.943766287 + y * 1.916279586 + z * 0.027607165);\r\n  const b = b1(x * 0.069407491 - y * 0.22898585 + z * 1.159737864);\r\n  return [\r\n    clamp((r + 0.5) | 0, 0, 255),\r\n    clamp((g + 0.5) | 0, 0, 255),\r\n    clamp((b + 0.5) | 0, 0, 255),\r\n    color[3],\r\n  ];\r\n}\r\n\r\n/**\r\n * @param {string} s String.\r\n * @return {Color} Color.\r\n */\r\nexport function fromString(s) {\r\n  if (s === 'none') {\r\n    return NO_COLOR;\r\n  }\r\n  if (cache.hasOwnProperty(s)) {\r\n    return cache[s];\r\n  }\r\n  if (cacheSize >= MAX_CACHE_SIZE) {\r\n    let i = 0;\r\n    for (const key in cache) {\r\n      if ((i++ & 3) === 0) {\r\n        delete cache[key];\r\n        --cacheSize;\r\n      }\r\n    }\r\n  }\r\n\r\n  const color = parseRgba(s);\r\n  if (color.length !== 4) {\r\n    throwInvalidColor(s);\r\n  }\r\n  for (const c of color) {\r\n    if (isNaN(c)) {\r\n      throwInvalidColor(s);\r\n    }\r\n  }\r\n  cache[s] = color;\r\n  ++cacheSize;\r\n  return color;\r\n}\r\n\r\n/**\r\n * Return the color as an array. This function maintains a cache of calculated\r\n * arrays which means the result should not be modified.\r\n * @param {Color|string} color Color.\r\n * @return {Color} Color.\r\n * @api\r\n */\r\nexport function asArray(color) {\r\n  if (Array.isArray(color)) {\r\n    return color;\r\n  }\r\n  return fromString(color);\r\n}\r\n\r\n/**\r\n * @param {Color} color Color.\r\n * @return {string} String.\r\n */\r\nexport function toString(color) {\r\n  let r = color[0];\r\n  if (r != (r | 0)) {\r\n    r = (r + 0.5) | 0;\r\n  }\r\n  let g = color[1];\r\n  if (g != (g | 0)) {\r\n    g = (g + 0.5) | 0;\r\n  }\r\n  let b = color[2];\r\n  if (b != (b | 0)) {\r\n    b = (b + 0.5) | 0;\r\n  }\r\n  const a = color[3] === undefined ? 1 : Math.round(color[3] * 1000) / 1000;\r\n  return 'rgba(' + r + ',' + g + ',' + b + ',' + a + ')';\r\n}\r\n\r\n/**\r\n * @param {string} s String.\r\n * @return {boolean} Whether the string is actually a valid color\r\n */\r\nexport function isStringColor(s) {\r\n  try {\r\n    fromString(s);\r\n    return true;\r\n  } catch {\r\n    return false;\r\n  }\r\n}\r\n","/**\r\n * @module ol/expr/cpu\r\n */\r\n\r\nimport {\r\n  fromString,\r\n  lchaToRgba,\r\n  rgbaToLcha,\r\n  toString,\r\n  withAlpha,\r\n} from '../color.js';\r\nimport {ColorType, LiteralExpression, Ops, parse} from './expression.js';\r\n\r\n/**\r\n * @fileoverview This module includes functions to build expressions for evaluation on the CPU.\r\n * Building is composed of two steps: parsing and compiling.  The parsing step takes an encoded\r\n * expression and returns an instance of one of the expression classes.  The compiling step takes\r\n * the expression instance and returns a function that can be evaluated in to return a literal\r\n * value.  The evaluator function should do as little allocation and work as possible.\r\n */\r\n\r\n/**\r\n * @typedef {Object} EvaluationContext\r\n * @property {Object} properties The values for properties used in 'get' expressions.\r\n * @property {Object} variables The values for variables used in 'var' expressions.\r\n * @property {number} resolution The map resolution.\r\n * @property {string|number|null} featureId The feature id.\r\n * @property {string} geometryType Geometry type of the current object.\r\n */\r\n\r\n/**\r\n * @return {EvaluationContext} A new evaluation context.\r\n */\r\nexport function newEvaluationContext() {\r\n  return {\r\n    variables: {},\r\n    properties: {},\r\n    resolution: NaN,\r\n    featureId: null,\r\n    geometryType: '',\r\n  };\r\n}\r\n\r\n/**\r\n * @typedef {function(EvaluationContext):import(\"./expression.js\").LiteralValue} ExpressionEvaluator\r\n */\r\n\r\n/**\r\n * @typedef {function(EvaluationContext):boolean} BooleanEvaluator\r\n */\r\n\r\n/**\r\n * @typedef {function(EvaluationContext):number} NumberEvaluator\r\n */\r\n\r\n/**\r\n * @typedef {function(EvaluationContext):string} StringEvaluator\r\n */\r\n\r\n/**\r\n * @typedef {function(EvaluationContext):(Array<number>|string)} ColorLikeEvaluator\r\n */\r\n\r\n/**\r\n * @typedef {function(EvaluationContext):Array<number>} NumberArrayEvaluator\r\n */\r\n\r\n/**\r\n * @typedef {function(EvaluationContext):Array<number>} CoordinateEvaluator\r\n */\r\n\r\n/**\r\n * @typedef {function(EvaluationContext):(Array<number>)} SizeEvaluator\r\n */\r\n\r\n/**\r\n * @typedef {function(EvaluationContext):(Array<number>|number)} SizeLikeEvaluator\r\n */\r\n\r\n/**\r\n * @param {import('./expression.js').EncodedExpression} encoded The encoded expression.\r\n * @param {number} type The expected type.\r\n * @param {import('./expression.js').ParsingContext} context The parsing context.\r\n * @return {ExpressionEvaluator} The expression evaluator.\r\n */\r\nexport function buildExpression(encoded, type, context) {\r\n  const expression = parse(encoded, type, context);\r\n  return compileExpression(expression, context);\r\n}\r\n\r\n/**\r\n * @param {import(\"./expression.js\").Expression} expression The expression.\r\n * @param {import('./expression.js').ParsingContext} context The parsing context.\r\n * @return {ExpressionEvaluator} The evaluator function.\r\n */\r\nfunction compileExpression(expression, context) {\r\n  if (expression instanceof LiteralExpression) {\r\n    // convert colors to array if possible\r\n    if (expression.type === ColorType && typeof expression.value === 'string') {\r\n      const colorValue = fromString(expression.value);\r\n      return function () {\r\n        return colorValue;\r\n      };\r\n    }\r\n    return function () {\r\n      return expression.value;\r\n    };\r\n  }\r\n  const operator = expression.operator;\r\n  switch (operator) {\r\n    case Ops.Number:\r\n    case Ops.String:\r\n    case Ops.Coalesce: {\r\n      return compileAssertionExpression(expression, context);\r\n    }\r\n    case Ops.Get:\r\n    case Ops.Var:\r\n    case Ops.Has: {\r\n      return compileAccessorExpression(expression, context);\r\n    }\r\n    case Ops.Id: {\r\n      return (context) => context.featureId;\r\n    }\r\n    case Ops.GeometryType: {\r\n      return (context) => context.geometryType;\r\n    }\r\n    case Ops.Concat: {\r\n      const args = expression.args.map((e) => compileExpression(e, context));\r\n      return (context) =>\r\n        ''.concat(...args.map((arg) => arg(context).toString()));\r\n    }\r\n    case Ops.Resolution: {\r\n      return (context) => context.resolution;\r\n    }\r\n    case Ops.Any:\r\n    case Ops.All:\r\n    case Ops.Between:\r\n    case Ops.In:\r\n    case Ops.Not: {\r\n      return compileLogicalExpression(expression, context);\r\n    }\r\n    case Ops.Equal:\r\n    case Ops.NotEqual:\r\n    case Ops.LessThan:\r\n    case Ops.LessThanOrEqualTo:\r\n    case Ops.GreaterThan:\r\n    case Ops.GreaterThanOrEqualTo: {\r\n      return compileComparisonExpression(expression, context);\r\n    }\r\n    case Ops.Multiply:\r\n    case Ops.Divide:\r\n    case Ops.Add:\r\n    case Ops.Subtract:\r\n    case Ops.Clamp:\r\n    case Ops.Mod:\r\n    case Ops.Pow:\r\n    case Ops.Abs:\r\n    case Ops.Floor:\r\n    case Ops.Ceil:\r\n    case Ops.Round:\r\n    case Ops.Sin:\r\n    case Ops.Cos:\r\n    case Ops.Atan:\r\n    case Ops.Sqrt: {\r\n      return compileNumericExpression(expression, context);\r\n    }\r\n    case Ops.Case: {\r\n      return compileCaseExpression(expression, context);\r\n    }\r\n    case Ops.Match: {\r\n      return compileMatchExpression(expression, context);\r\n    }\r\n    case Ops.Interpolate: {\r\n      return compileInterpolateExpression(expression, context);\r\n    }\r\n    case Ops.ToString: {\r\n      return compileConvertExpression(expression, context);\r\n    }\r\n    default: {\r\n      throw new Error(`Unsupported operator ${operator}`);\r\n    }\r\n    // TODO: unimplemented\r\n    // Ops.Zoom\r\n    // Ops.Time\r\n    // Ops.Array\r\n    // Ops.Color\r\n    // Ops.Band\r\n    // Ops.Palette\r\n  }\r\n}\r\n\r\n/**\r\n * @param {import('./expression.js').CallExpression} expression The call expression.\r\n * @param {import('./expression.js').ParsingContext} context The parsing context.\r\n * @return {ExpressionEvaluator} The evaluator function.\r\n */\r\nfunction compileAssertionExpression(expression, context) {\r\n  const type = expression.operator;\r\n  const length = expression.args.length;\r\n\r\n  const args = new Array(length);\r\n  for (let i = 0; i < length; ++i) {\r\n    args[i] = compileExpression(expression.args[i], context);\r\n  }\r\n  switch (type) {\r\n    case Ops.Coalesce: {\r\n      return (context) => {\r\n        for (let i = 0; i < length; ++i) {\r\n          const value = args[i](context);\r\n          if (typeof value !== 'undefined' && value !== null) {\r\n            return value;\r\n          }\r\n        }\r\n        throw new Error('Expected one of the values to be non-null');\r\n      };\r\n    }\r\n    case Ops.Number:\r\n    case Ops.String: {\r\n      return (context) => {\r\n        for (let i = 0; i < length; ++i) {\r\n          const value = args[i](context);\r\n          if (typeof value === type) {\r\n            return value;\r\n          }\r\n        }\r\n        throw new Error(`Expected one of the values to be a ${type}`);\r\n      };\r\n    }\r\n    default: {\r\n      throw new Error(`Unsupported assertion operator ${type}`);\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * @param {import('./expression.js').CallExpression} expression The call expression.\r\n * @param {import('./expression.js').ParsingContext} context The parsing context.\r\n * @return {ExpressionEvaluator} The evaluator function.\r\n */\r\nfunction compileAccessorExpression(expression, context) {\r\n  const nameExpression = /** @type {LiteralExpression} */ (expression.args[0]);\r\n  const name = /** @type {string} */ (nameExpression.value);\r\n  switch (expression.operator) {\r\n    case Ops.Get: {\r\n      return (context) => {\r\n        const args = expression.args;\r\n        let value = context.properties[name];\r\n        for (let i = 1, ii = args.length; i < ii; ++i) {\r\n          const keyExpression = /** @type {LiteralExpression} */ (args[i]);\r\n          const key = /** @type {string|number} */ (keyExpression.value);\r\n          value = value[key];\r\n        }\r\n        return value;\r\n      };\r\n    }\r\n    case Ops.Var: {\r\n      return (context) => context.variables[name];\r\n    }\r\n    case Ops.Has: {\r\n      return (context) => {\r\n        const args = expression.args;\r\n        if (!(name in context.properties)) {\r\n          return false;\r\n        }\r\n        let value = context.properties[name];\r\n        for (let i = 1, ii = args.length; i < ii; ++i) {\r\n          const keyExpression = /** @type {LiteralExpression} */ (args[i]);\r\n          const key = /** @type {string|number} */ (keyExpression.value);\r\n          if (!value || !Object.hasOwn(value, key)) {\r\n            return false;\r\n          }\r\n          value = value[key];\r\n        }\r\n        return true;\r\n      };\r\n    }\r\n    default: {\r\n      throw new Error(`Unsupported accessor operator ${expression.operator}`);\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * @param {import('./expression.js').CallExpression} expression The call expression.\r\n * @param {import('./expression.js').ParsingContext} context The parsing context.\r\n * @return {BooleanEvaluator} The evaluator function.\r\n */\r\nfunction compileComparisonExpression(expression, context) {\r\n  const op = expression.operator;\r\n  const left = compileExpression(expression.args[0], context);\r\n  const right = compileExpression(expression.args[1], context);\r\n  switch (op) {\r\n    case Ops.Equal: {\r\n      return (context) => left(context) === right(context);\r\n    }\r\n    case Ops.NotEqual: {\r\n      return (context) => left(context) !== right(context);\r\n    }\r\n    case Ops.LessThan: {\r\n      return (context) => left(context) < right(context);\r\n    }\r\n    case Ops.LessThanOrEqualTo: {\r\n      return (context) => left(context) <= right(context);\r\n    }\r\n    case Ops.GreaterThan: {\r\n      return (context) => left(context) > right(context);\r\n    }\r\n    case Ops.GreaterThanOrEqualTo: {\r\n      return (context) => left(context) >= right(context);\r\n    }\r\n    default: {\r\n      throw new Error(`Unsupported comparison operator ${op}`);\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * @param {import('./expression.js').CallExpression} expression The call expression.\r\n * @param {import('./expression.js').ParsingContext} context The parsing context.\r\n * @return {BooleanEvaluator} The evaluator function.\r\n */\r\nfunction compileLogicalExpression(expression, context) {\r\n  const op = expression.operator;\r\n  const length = expression.args.length;\r\n\r\n  const args = new Array(length);\r\n  for (let i = 0; i < length; ++i) {\r\n    args[i] = compileExpression(expression.args[i], context);\r\n  }\r\n  switch (op) {\r\n    case Ops.Any: {\r\n      return (context) => {\r\n        for (let i = 0; i < length; ++i) {\r\n          if (args[i](context)) {\r\n            return true;\r\n          }\r\n        }\r\n        return false;\r\n      };\r\n    }\r\n    case Ops.All: {\r\n      return (context) => {\r\n        for (let i = 0; i < length; ++i) {\r\n          if (!args[i](context)) {\r\n            return false;\r\n          }\r\n        }\r\n        return true;\r\n      };\r\n    }\r\n    case Ops.Between: {\r\n      return (context) => {\r\n        const value = args[0](context);\r\n        const min = args[1](context);\r\n        const max = args[2](context);\r\n        return value >= min && value <= max;\r\n      };\r\n    }\r\n    case Ops.In: {\r\n      return (context) => {\r\n        const value = args[0](context);\r\n        for (let i = 1; i < length; ++i) {\r\n          if (value === args[i](context)) {\r\n            return true;\r\n          }\r\n        }\r\n        return false;\r\n      };\r\n    }\r\n    case Ops.Not: {\r\n      return (context) => !args[0](context);\r\n    }\r\n    default: {\r\n      throw new Error(`Unsupported logical operator ${op}`);\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * @param {import('./expression.js').CallExpression} expression The call expression.\r\n * @param {import('./expression.js').ParsingContext} context The parsing context.\r\n * @return {NumberEvaluator} The evaluator function.\r\n */\r\nfunction compileNumericExpression(expression, context) {\r\n  const op = expression.operator;\r\n  const length = expression.args.length;\r\n\r\n  const args = new Array(length);\r\n  for (let i = 0; i < length; ++i) {\r\n    args[i] = compileExpression(expression.args[i], context);\r\n  }\r\n  switch (op) {\r\n    case Ops.Multiply: {\r\n      return (context) => {\r\n        let value = 1;\r\n        for (let i = 0; i < length; ++i) {\r\n          value *= args[i](context);\r\n        }\r\n        return value;\r\n      };\r\n    }\r\n    case Ops.Divide: {\r\n      return (context) => args[0](context) / args[1](context);\r\n    }\r\n    case Ops.Add: {\r\n      return (context) => {\r\n        let value = 0;\r\n        for (let i = 0; i < length; ++i) {\r\n          value += args[i](context);\r\n        }\r\n        return value;\r\n      };\r\n    }\r\n    case Ops.Subtract: {\r\n      return (context) => args[0](context) - args[1](context);\r\n    }\r\n    case Ops.Clamp: {\r\n      return (context) => {\r\n        const value = args[0](context);\r\n        const min = args[1](context);\r\n        if (value < min) {\r\n          return min;\r\n        }\r\n        const max = args[2](context);\r\n        if (value > max) {\r\n          return max;\r\n        }\r\n        return value;\r\n      };\r\n    }\r\n    case Ops.Mod: {\r\n      return (context) => args[0](context) % args[1](context);\r\n    }\r\n    case Ops.Pow: {\r\n      return (context) => Math.pow(args[0](context), args[1](context));\r\n    }\r\n    case Ops.Abs: {\r\n      return (context) => Math.abs(args[0](context));\r\n    }\r\n    case Ops.Floor: {\r\n      return (context) => Math.floor(args[0](context));\r\n    }\r\n    case Ops.Ceil: {\r\n      return (context) => Math.ceil(args[0](context));\r\n    }\r\n    case Ops.Round: {\r\n      return (context) => Math.round(args[0](context));\r\n    }\r\n    case Ops.Sin: {\r\n      return (context) => Math.sin(args[0](context));\r\n    }\r\n    case Ops.Cos: {\r\n      return (context) => Math.cos(args[0](context));\r\n    }\r\n    case Ops.Atan: {\r\n      if (length === 2) {\r\n        return (context) => Math.atan2(args[0](context), args[1](context));\r\n      }\r\n      return (context) => Math.atan(args[0](context));\r\n    }\r\n    case Ops.Sqrt: {\r\n      return (context) => Math.sqrt(args[0](context));\r\n    }\r\n    default: {\r\n      throw new Error(`Unsupported numeric operator ${op}`);\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * @param {import('./expression.js').CallExpression} expression The call expression.\r\n * @param {import('./expression.js').ParsingContext} context The parsing context.\r\n * @return {ExpressionEvaluator} The evaluator function.\r\n */\r\nfunction compileCaseExpression(expression, context) {\r\n  const length = expression.args.length;\r\n  const args = new Array(length);\r\n  for (let i = 0; i < length; ++i) {\r\n    args[i] = compileExpression(expression.args[i], context);\r\n  }\r\n  return (context) => {\r\n    for (let i = 0; i < length - 1; i += 2) {\r\n      const condition = args[i](context);\r\n      if (condition) {\r\n        return args[i + 1](context);\r\n      }\r\n    }\r\n    return args[length - 1](context);\r\n  };\r\n}\r\n\r\n/**\r\n * @param {import('./expression.js').CallExpression} expression The call expression.\r\n * @param {import('./expression.js').ParsingContext} context The parsing context.\r\n * @return {ExpressionEvaluator} The evaluator function.\r\n */\r\nfunction compileMatchExpression(expression, context) {\r\n  const length = expression.args.length;\r\n  const args = new Array(length);\r\n  for (let i = 0; i < length; ++i) {\r\n    args[i] = compileExpression(expression.args[i], context);\r\n  }\r\n  return (context) => {\r\n    const value = args[0](context);\r\n    for (let i = 1; i < length - 1; i += 2) {\r\n      if (value === args[i](context)) {\r\n        return args[i + 1](context);\r\n      }\r\n    }\r\n    return args[length - 1](context);\r\n  };\r\n}\r\n\r\n/**\r\n * @param {import('./expression.js').CallExpression} expression The call expression.\r\n * @param {import('./expression.js').ParsingContext} context The parsing context.\r\n * @return {ExpressionEvaluator} The evaluator function.\r\n */\r\nfunction compileInterpolateExpression(expression, context) {\r\n  const length = expression.args.length;\r\n  const args = new Array(length);\r\n  for (let i = 0; i < length; ++i) {\r\n    args[i] = compileExpression(expression.args[i], context);\r\n  }\r\n  return (context) => {\r\n    const base = args[0](context);\r\n    const value = args[1](context);\r\n\r\n    let previousInput;\r\n    let previousOutput;\r\n    for (let i = 2; i < length; i += 2) {\r\n      const input = args[i](context);\r\n      let output = args[i + 1](context);\r\n      const isColor = Array.isArray(output);\r\n      if (isColor) {\r\n        output = withAlpha(output);\r\n      }\r\n      if (input >= value) {\r\n        if (i === 2) {\r\n          return output;\r\n        }\r\n        if (isColor) {\r\n          return interpolateColor(\r\n            base,\r\n            value,\r\n            previousInput,\r\n            previousOutput,\r\n            input,\r\n            output,\r\n          );\r\n        }\r\n        return interpolateNumber(\r\n          base,\r\n          value,\r\n          previousInput,\r\n          previousOutput,\r\n          input,\r\n          output,\r\n        );\r\n      }\r\n      previousInput = input;\r\n      previousOutput = output;\r\n    }\r\n    return previousOutput;\r\n  };\r\n}\r\n\r\n/**\r\n * @param {import('./expression.js').CallExpression} expression The call expression.\r\n * @param {import('./expression.js').ParsingContext} context The parsing context.\r\n * @return {ExpressionEvaluator} The evaluator function.\r\n */\r\nfunction compileConvertExpression(expression, context) {\r\n  const op = expression.operator;\r\n  const length = expression.args.length;\r\n\r\n  const args = new Array(length);\r\n  for (let i = 0; i < length; ++i) {\r\n    args[i] = compileExpression(expression.args[i], context);\r\n  }\r\n  switch (op) {\r\n    case Ops.ToString: {\r\n      return (context) => {\r\n        const value = args[0](context);\r\n        if (expression.args[0].type === ColorType) {\r\n          return toString(value);\r\n        }\r\n        return value.toString();\r\n      };\r\n    }\r\n    default: {\r\n      throw new Error(`Unsupported convert operator ${op}`);\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * @param {number} base The base.\r\n * @param {number} value The value.\r\n * @param {number} input1 The first input value.\r\n * @param {number} output1 The first output value.\r\n * @param {number} input2 The second input value.\r\n * @param {number} output2 The second output value.\r\n * @return {number} The interpolated value.\r\n */\r\nfunction interpolateNumber(base, value, input1, output1, input2, output2) {\r\n  const delta = input2 - input1;\r\n  if (delta === 0) {\r\n    return output1;\r\n  }\r\n  const along = value - input1;\r\n  const factor =\r\n    base === 1\r\n      ? along / delta\r\n      : (Math.pow(base, along) - 1) / (Math.pow(base, delta) - 1);\r\n  return output1 + factor * (output2 - output1);\r\n}\r\n\r\n/**\r\n * @param {number} base The base.\r\n * @param {number} value The value.\r\n * @param {number} input1 The first input value.\r\n * @param {import('../color.js').Color} rgba1 The first output value.\r\n * @param {number} input2 The second input value.\r\n * @param {import('../color.js').Color} rgba2 The second output value.\r\n * @return {import('../color.js').Color} The interpolated color.\r\n */\r\nfunction interpolateColor(base, value, input1, rgba1, input2, rgba2) {\r\n  const delta = input2 - input1;\r\n  if (delta === 0) {\r\n    return rgba1;\r\n  }\r\n  const lcha1 = rgbaToLcha(rgba1);\r\n  const lcha2 = rgbaToLcha(rgba2);\r\n  let deltaHue = lcha2[2] - lcha1[2];\r\n  if (deltaHue > 180) {\r\n    deltaHue -= 360;\r\n  } else if (deltaHue < -180) {\r\n    deltaHue += 360;\r\n  }\r\n\r\n  const lcha = [\r\n    interpolateNumber(base, value, input1, lcha1[0], input2, lcha2[0]),\r\n    interpolateNumber(base, value, input1, lcha1[1], input2, lcha2[1]),\r\n    lcha1[2] + interpolateNumber(base, value, input1, 0, input2, deltaHue),\r\n    interpolateNumber(base, value, input1, rgba1[3], input2, rgba2[3]),\r\n  ];\r\n  return lchaToRgba(lcha);\r\n}\r\n","/**\r\n * @module ol/expr/expression\r\n */\r\nimport {ascending} from '../array.js';\r\nimport {fromString as colorFromString} from '../color.js';\r\nimport {toSize} from '../size.js';\r\n\r\n/**\r\n * @fileoverview This module includes types and functions for parsing array encoded expressions.\r\n * The result of parsing an encoded expression is one of the specific expression classes.\r\n * During parsing, information is added to the parsing context about the data accessed by the\r\n * expression.\r\n */\r\n\r\n/**\r\n * Base type used for literal style parameters; can be a number literal or the output of an operator,\r\n * which in turns takes {@link import(\"./expression.js\").ExpressionValue} arguments.\r\n *\r\n * See below for details on the available operators (with notes for those that are WebGL or Canvas only).\r\n *\r\n * Reading operators:\r\n *   `['band', bandIndex, xOffset, yOffset]` For tile layers only. Fetches pixel values from band\r\n *     `bandIndex` of the source's data. The first `bandIndex` of the source data is `1`. Fetched values\r\n *     are in the 0..1 range. {@link import(\"../source/TileImage.js\").default} sources have 4 bands: red,\r\n *     green, blue and alpha. {@link import(\"../source/DataTile.js\").default} sources can have any number\r\n *     of bands, depending on the underlying data source and\r\n *     {@link import(\"../source/GeoTIFF.js\").Options configuration}. `xOffset` and `yOffset` are optional\r\n *     and allow specifying pixel offsets for x and y. This is used for sampling data from neighboring pixels (WebGL only).\r\n *   `['get', attributeName]` fetches a feature property value, similar to `feature.get('attributeName')`.\r\n *   `['get', attributeName, keyOrArrayIndex, ...]` (Canvas only) Access nested properties and array items of a\r\n *     feature property. The result is `undefined` when there is nothing at the specified key or index.\r\n *   `['geometry-type']` returns a feature's geometry type as string, either: 'LineString', 'Point' or 'Polygon'\r\n *     `Multi*` values are returned as their singular equivalent\r\n *     `Circle` geometries are returned as 'Polygon'\r\n *     `GeometryCollection` geometries are returned as the type of the first geometry found in the collection (WebGL only).\r\n *   `['resolution']` returns the current resolution\r\n *   `['time']` The time in seconds since the creation of the layer (WebGL only).\r\n *   `['var', 'varName']` fetches a value from the style variables; will throw an error if that variable is undefined\r\n *   `['zoom']` The current zoom level (WebGL only).\r\n *   `['line-metric']` returns the M component of the current point on a line (WebGL only); in case where the geometry layout of the line\r\n *      does not contain an M component (e.g. XY or XYZ), 0 is returned; 0 is also returned for geometries other than lines.\r\n *      Please note that the M component will be linearly interpolated between the two points composing a segment.\r\n *\r\n * Math operators:\r\n *   `['*', value1, value2, ...]` multiplies the values (either numbers or colors)\r\n *   `['/', value1, value2]` divides `value1` by `value2`\r\n *   `['+', value1, value2, ...]` adds the values\r\n *   `['-', value1, value2]` subtracts `value2` from `value1`\r\n *   `['clamp', value, low, high]` clamps `value` between `low` and `high`\r\n *   `['%', value1, value2]` returns the result of `value1 % value2` (modulo)\r\n *   `['^', value1, value2]` returns the value of `value1` raised to the `value2` power\r\n *   `['abs', value1]` returns the absolute value of `value1`\r\n *   `['floor', value1]` returns the nearest integer less than or equal to `value1`\r\n *   * `['round', value1]` returns the nearest integer to `value1`\r\n *   * `['ceil', value1]` returns the nearest integer greater than or equal to `value1`\r\n *   * `['sin', value1]` returns the sine of `value1`\r\n *   * `['cos', value1]` returns the cosine of `value1`\r\n *   * `['atan', value1, value2]` returns `atan2(value1, value2)`. If `value2` is not provided, returns `atan(value1)`\r\n *   * `['sqrt', value1]` returns the square root of `value1`\r\n *\r\n * * Transform operators:\r\n *   * `['case', condition1, output1, ...conditionN, outputN, fallback]` selects the first output whose corresponding\r\n *     condition evaluates to `true`. If no match is found, returns the `fallback` value.\r\n *     All conditions should be `boolean`, output and fallback can be any kind.\r\n *   * `['match', input, match1, output1, ...matchN, outputN, fallback]` compares the `input` value against all\r\n *     provided `matchX` values, returning the output associated with the first valid match. If no match is found,\r\n *     returns the `fallback` value.\r\n *     `input` and `matchX` values must all be of the same type, and can be `number` or `string`. `outputX` and\r\n *     `fallback` values must be of the same type, and can be of any kind.\r\n *   * `['interpolate', interpolation, input, stop1, output1, ...stopN, outputN]` returns a value by interpolating between\r\n *     pairs of inputs and outputs; `interpolation` can either be `['linear']` or `['exponential', base]` where `base` is\r\n *     the rate of increase from stop A to stop B (i.e. power to which the interpolation ratio is raised); a value\r\n *     of 1 is equivalent to `['linear']`.\r\n *     `input` and `stopX` values must all be of type `number`. `outputX` values can be `number` or `color` values.\r\n *     Note: `input` will be clamped between `stop1` and `stopN`, meaning that all output values will be comprised\r\n *     between `output1` and `outputN`.\r\n *   * `['string', value1, value2, ...]` returns the first value in the list that evaluates to a string.\r\n *     An example would be to provide a default value for get: `['string', ['get', 'propertyname'], 'default value']]`\r\n *     (Canvas only).\r\n *   * `['number', value1, value2, ...]` returns the first value in the list that evaluates to a number.\r\n *     An example would be to provide a default value for get: `['string', ['get', 'propertyname'], 42]]`\r\n *     (Canvas only).\r\n *   * `['coalesce', value1, value2, ...]` returns the first value in the list which is not null or undefined.\r\n *     An example would be to provide a default value for get: `['coalesce', ['get','propertyname'], 'default value']]`\r\n *     (Canvas only).\r\n *\r\n * * Logical operators:\r\n *   * `['<', value1, value2]` returns `true` if `value1` is strictly lower than `value2`, or `false` otherwise.\r\n *   * `['<=', value1, value2]` returns `true` if `value1` is lower than or equals `value2`, or `false` otherwise.\r\n *   * `['>', value1, value2]` returns `true` if `value1` is strictly greater than `value2`, or `false` otherwise.\r\n *   * `['>=', value1, value2]` returns `true` if `value1` is greater than or equals `value2`, or `false` otherwise.\r\n *   * `['==', value1, value2]` returns `true` if `value1` equals `value2`, or `false` otherwise.\r\n *   * `['!=', value1, value2]` returns `true` if `value1` does not equal `value2`, or `false` otherwise.\r\n *   * `['!', value1]` returns `false` if `value1` is `true` or greater than `0`, or `true` otherwise.\r\n *   * `['all', value1, value2, ...]` returns `true` if all the inputs are `true`, `false` otherwise.\r\n *   * `['any', value1, value2, ...]` returns `true` if any of the inputs are `true`, `false` otherwise.\r\n *   * `['has', attributeName, keyOrArrayIndex, ...]` returns `true` if feature properties include the (nested) key `attributeName`,\r\n *     `false` otherwise.\r\n *     Note that for WebGL layers, the hardcoded value `-9999999` is used to distinguish when a property is not defined.\r\n *   * `['between', value1, value2, value3]` returns `true` if `value1` is contained between `value2` and `value3`\r\n *     (inclusively), or `false` otherwise.\r\n *   * `['in', needle, haystack]` returns `true` if `needle` is found in `haystack`, and\r\n *     `false` otherwise.\r\n *     This operator has the following limitations:\r\n *     * `haystack` has to be an array of numbers or strings (searching for a substring in a string is not supported yet)\r\n *     * Only literal arrays are supported as `haystack` for now; this means that `haystack` cannot be the result of an\r\n *     expression. If `haystack` is an array of strings, use the `literal` operator to disambiguate from an expression:\r\n *     `['literal', ['abc', 'def', 'ghi']]`\r\n *\r\n * * Conversion operators:\r\n *   * `['array', value1, ...valueN]` creates a numerical array from `number` values; please note that the amount of\r\n *     values can currently only be 2, 3 or 4 (WebGL only).\r\n *   * `['color', red, green, blue, alpha]` or `['color', shade, alpha]` creates a `color` value from `number` values;\r\n *     the `alpha` parameter is optional; if not specified, it will be set to 1 (WebGL only).\r\n *     Note: `red`, `green` and `blue` or `shade` components must be values between 0 and 255; `alpha` between 0 and 1.\r\n *   * `['palette', index, colors]` picks a `color` value from an array of colors using the given index; the `index`\r\n *     expression must evaluate to a number; the items in the `colors` array must be strings with hex colors\r\n *     (e.g. `'#86A136'`), colors using the rgba[a] functional notation (e.g. `'rgb(134, 161, 54)'` or `'rgba(134, 161, 54, 1)'`),\r\n *     named colors (e.g. `'red'`), or array literals with 3 ([r, g, b]) or 4 ([r, g, b, a]) values (with r, g, and b\r\n *     in the 0-255 range and a in the 0-1 range) (WebGL only).\r\n *   * `['to-string', value]` converts the input value to a string. If the input is a boolean, the result is \"true\" or \"false\".\r\n *     If the input is a number, it is converted to a string as specified by the \"NumberToString\" algorithm of the ECMAScript\r\n *     Language Specification. If the input is a color, it is converted to a string of the form \"rgba(r,g,b,a)\". (Canvas only)\r\n *\r\n * Values can either be literals or another operator, as they will be evaluated recursively.\r\n * Literal values can be of the following types:\r\n * * `boolean`\r\n * * `number`\r\n * * `number[]` (number arrays can only have a length of 2, 3 or 4)\r\n * * `string`\r\n * * {@link module:ol/color~Color}\r\n *\r\n * @typedef {Array<*>|import(\"../color.js\").Color|string|number|boolean} ExpressionValue\r\n * @api\r\n */\r\n\r\nlet numTypes = 0;\r\nexport const NoneType = 0;\r\nexport const BooleanType = 1 << numTypes++;\r\nexport const NumberType = 1 << numTypes++;\r\nexport const StringType = 1 << numTypes++;\r\nexport const ColorType = 1 << numTypes++;\r\nexport const NumberArrayType = 1 << numTypes++;\r\nexport const SizeType = 1 << numTypes++;\r\nexport const AnyType = Math.pow(2, numTypes) - 1;\r\n\r\nconst typeNames = {\r\n  [BooleanType]: 'boolean',\r\n  [NumberType]: 'number',\r\n  [StringType]: 'string',\r\n  [ColorType]: 'color',\r\n  [NumberArrayType]: 'number[]',\r\n  [SizeType]: 'size',\r\n};\r\n\r\nconst namedTypes = Object.keys(typeNames).map(Number).sort(ascending);\r\n\r\n/**\r\n * @param {number} type The type.\r\n * @return {boolean} The type is one of the specific types (not any or a union type).\r\n */\r\nfunction isSpecific(type) {\r\n  return type in typeNames;\r\n}\r\n\r\n/**\r\n * Get a string representation for a type.\r\n * @param {number} type The type.\r\n * @return {string} The type name.\r\n */\r\nexport function typeName(type) {\r\n  const names = [];\r\n  for (const namedType of namedTypes) {\r\n    if (includesType(type, namedType)) {\r\n      names.push(typeNames[namedType]);\r\n    }\r\n  }\r\n  if (names.length === 0) {\r\n    return 'untyped';\r\n  }\r\n  if (names.length < 3) {\r\n    return names.join(' or ');\r\n  }\r\n  return names.slice(0, -1).join(', ') + ', or ' + names[names.length - 1];\r\n}\r\n\r\n/**\r\n * @param {number} broad The broad type.\r\n * @param {number} specific The specific type.\r\n * @return {boolean} The broad type includes the specific type.\r\n */\r\nexport function includesType(broad, specific) {\r\n  return (broad & specific) === specific;\r\n}\r\n\r\n/**\r\n * @param {number} oneType One type.\r\n * @param {number} otherType Another type.\r\n * @return {boolean} The set of types overlap (share a common specific type)\r\n */\r\nexport function overlapsType(oneType, otherType) {\r\n  return !!(oneType & otherType);\r\n}\r\n\r\n/**\r\n * @param {number} type The type.\r\n * @param {number} expected The expected type.\r\n * @return {boolean} The given type is exactly the expected type.\r\n */\r\nexport function isType(type, expected) {\r\n  return type === expected;\r\n}\r\n\r\n/**\r\n * @typedef {boolean|number|string|Array<number>} LiteralValue\r\n */\r\n\r\nexport class LiteralExpression {\r\n  /**\r\n   * @param {number} type The value type.\r\n   * @param {LiteralValue} value The literal value.\r\n   */\r\n  constructor(type, value) {\r\n    if (!isSpecific(type)) {\r\n      throw new Error(\r\n        `literal expressions must have a specific type, got ${typeName(type)}`,\r\n      );\r\n    }\r\n    this.type = type;\r\n    this.value = value;\r\n  }\r\n}\r\n\r\nexport class CallExpression {\r\n  /**\r\n   * @param {number} type The return type.\r\n   * @param {string} operator The operator.\r\n   * @param {...Expression} args The arguments.\r\n   */\r\n  constructor(type, operator, ...args) {\r\n    this.type = type;\r\n    this.operator = operator;\r\n    this.args = args;\r\n  }\r\n}\r\n\r\n/**\r\n * @typedef {LiteralExpression|CallExpression} Expression\r\n */\r\n\r\n/**\r\n * @typedef {Object} ParsingContext\r\n * @property {Set<string>} variables Variables referenced with the 'var' operator.\r\n * @property {Set<string>} properties Properties referenced with the 'get' operator.\r\n * @property {boolean} featureId The style uses the feature id.\r\n * @property {boolean} geometryType The style uses the feature geometry type.\r\n * @property {boolean} mapState The style uses the map state (view state or time elapsed).\r\n */\r\n\r\n/**\r\n * @return {ParsingContext} A new parsing context.\r\n */\r\nexport function newParsingContext() {\r\n  return {\r\n    variables: new Set(),\r\n    properties: new Set(),\r\n    featureId: false,\r\n    geometryType: false,\r\n    mapState: false,\r\n  };\r\n}\r\n\r\n/**\r\n * @typedef {LiteralValue|Array} EncodedExpression\r\n */\r\n\r\n/**\r\n * @param {EncodedExpression} encoded The encoded expression.\r\n * @param {number} expectedType The expected type.\r\n * @param {ParsingContext} context The parsing context.\r\n * @return {Expression} The parsed expression result.\r\n */\r\nexport function parse(encoded, expectedType, context) {\r\n  switch (typeof encoded) {\r\n    case 'boolean': {\r\n      if (isType(expectedType, StringType)) {\r\n        return new LiteralExpression(StringType, encoded ? 'true' : 'false');\r\n      }\r\n      if (!includesType(expectedType, BooleanType)) {\r\n        throw new Error(\r\n          `got a boolean, but expected ${typeName(expectedType)}`,\r\n        );\r\n      }\r\n      return new LiteralExpression(BooleanType, encoded);\r\n    }\r\n    case 'number': {\r\n      if (isType(expectedType, SizeType)) {\r\n        return new LiteralExpression(SizeType, toSize(encoded));\r\n      }\r\n      if (isType(expectedType, BooleanType)) {\r\n        return new LiteralExpression(BooleanType, !!encoded);\r\n      }\r\n      if (isType(expectedType, StringType)) {\r\n        return new LiteralExpression(StringType, encoded.toString());\r\n      }\r\n      if (!includesType(expectedType, NumberType)) {\r\n        throw new Error(`got a number, but expected ${typeName(expectedType)}`);\r\n      }\r\n      return new LiteralExpression(NumberType, encoded);\r\n    }\r\n    case 'string': {\r\n      if (isType(expectedType, ColorType)) {\r\n        return new LiteralExpression(ColorType, colorFromString(encoded));\r\n      }\r\n      if (isType(expectedType, BooleanType)) {\r\n        return new LiteralExpression(BooleanType, !!encoded);\r\n      }\r\n      if (!includesType(expectedType, StringType)) {\r\n        throw new Error(`got a string, but expected ${typeName(expectedType)}`);\r\n      }\r\n      return new LiteralExpression(StringType, encoded);\r\n    }\r\n    default: {\r\n      // pass\r\n    }\r\n  }\r\n\r\n  if (!Array.isArray(encoded)) {\r\n    throw new Error('expression must be an array or a primitive value');\r\n  }\r\n\r\n  if (encoded.length === 0) {\r\n    throw new Error('empty expression');\r\n  }\r\n\r\n  if (typeof encoded[0] === 'string') {\r\n    return parseCallExpression(encoded, expectedType, context);\r\n  }\r\n\r\n  for (const item of encoded) {\r\n    if (typeof item !== 'number') {\r\n      throw new Error('expected an array of numbers');\r\n    }\r\n  }\r\n\r\n  if (isType(expectedType, SizeType)) {\r\n    if (encoded.length !== 2) {\r\n      throw new Error(\r\n        `expected an array of two values for a size, got ${encoded.length}`,\r\n      );\r\n    }\r\n    return new LiteralExpression(SizeType, encoded);\r\n  }\r\n\r\n  if (isType(expectedType, ColorType)) {\r\n    if (encoded.length === 3) {\r\n      return new LiteralExpression(ColorType, [...encoded, 1]);\r\n    }\r\n    if (encoded.length === 4) {\r\n      return new LiteralExpression(ColorType, encoded);\r\n    }\r\n    throw new Error(\r\n      `expected an array of 3 or 4 values for a color, got ${encoded.length}`,\r\n    );\r\n  }\r\n\r\n  if (!includesType(expectedType, NumberArrayType)) {\r\n    throw new Error(\r\n      `got an array of numbers, but expected ${typeName(expectedType)}`,\r\n    );\r\n  }\r\n\r\n  return new LiteralExpression(NumberArrayType, encoded);\r\n}\r\n\r\n/**\r\n * @type {Object<string, string>}\r\n */\r\nexport const Ops = {\r\n  Get: 'get',\r\n  Var: 'var',\r\n  Concat: 'concat',\r\n  GeometryType: 'geometry-type',\r\n  LineMetric: 'line-metric',\r\n  Any: 'any',\r\n  All: 'all',\r\n  Not: '!',\r\n  Resolution: 'resolution',\r\n  Zoom: 'zoom',\r\n  Time: 'time',\r\n  Equal: '==',\r\n  NotEqual: '!=',\r\n  GreaterThan: '>',\r\n  GreaterThanOrEqualTo: '>=',\r\n  LessThan: '<',\r\n  LessThanOrEqualTo: '<=',\r\n  Multiply: '*',\r\n  Divide: '/',\r\n  Add: '+',\r\n  Subtract: '-',\r\n  Clamp: 'clamp',\r\n  Mod: '%',\r\n  Pow: '^',\r\n  Abs: 'abs',\r\n  Floor: 'floor',\r\n  Ceil: 'ceil',\r\n  Round: 'round',\r\n  Sin: 'sin',\r\n  Cos: 'cos',\r\n  Atan: 'atan',\r\n  Sqrt: 'sqrt',\r\n  Match: 'match',\r\n  Between: 'between',\r\n  Interpolate: 'interpolate',\r\n  Coalesce: 'coalesce',\r\n  Case: 'case',\r\n  In: 'in',\r\n  Number: 'number',\r\n  String: 'string',\r\n  Array: 'array',\r\n  Color: 'color',\r\n  Id: 'id',\r\n  Band: 'band',\r\n  Palette: 'palette',\r\n  ToString: 'to-string',\r\n  Has: 'has',\r\n};\r\n\r\n/**\r\n * @typedef {function(Array, number, ParsingContext):Expression} Parser\r\n *\r\n * Second argument is the expected type.\r\n */\r\n\r\n/**\r\n * @type {Object<string, Parser>}\r\n */\r\nconst parsers = {\r\n  [Ops.Get]: createCallExpressionParser(hasArgsCount(1, Infinity), withGetArgs),\r\n  [Ops.Var]: createCallExpressionParser(hasArgsCount(1, 1), withVarArgs),\r\n  [Ops.Has]: createCallExpressionParser(hasArgsCount(1, Infinity), withGetArgs),\r\n  [Ops.Id]: createCallExpressionParser(usesFeatureId, withNoArgs),\r\n  [Ops.Concat]: createCallExpressionParser(\r\n    hasArgsCount(2, Infinity),\r\n    withArgsOfType(StringType),\r\n  ),\r\n  [Ops.GeometryType]: createCallExpressionParser(usesGeometryType, withNoArgs),\r\n  [Ops.LineMetric]: createCallExpressionParser(withNoArgs),\r\n  [Ops.Resolution]: createCallExpressionParser(usesMapState, withNoArgs),\r\n  [Ops.Zoom]: createCallExpressionParser(usesMapState, withNoArgs),\r\n  [Ops.Time]: createCallExpressionParser(usesMapState, withNoArgs),\r\n  [Ops.Any]: createCallExpressionParser(\r\n    hasArgsCount(2, Infinity),\r\n    withArgsOfType(BooleanType),\r\n  ),\r\n  [Ops.All]: createCallExpressionParser(\r\n    hasArgsCount(2, Infinity),\r\n    withArgsOfType(BooleanType),\r\n  ),\r\n  [Ops.Not]: createCallExpressionParser(\r\n    hasArgsCount(1, 1),\r\n    withArgsOfType(BooleanType),\r\n  ),\r\n  [Ops.Equal]: createCallExpressionParser(\r\n    hasArgsCount(2, 2),\r\n    withArgsOfType(AnyType),\r\n  ),\r\n  [Ops.NotEqual]: createCallExpressionParser(\r\n    hasArgsCount(2, 2),\r\n    withArgsOfType(AnyType),\r\n  ),\r\n  [Ops.GreaterThan]: createCallExpressionParser(\r\n    hasArgsCount(2, 2),\r\n    withArgsOfType(NumberType),\r\n  ),\r\n  [Ops.GreaterThanOrEqualTo]: createCallExpressionParser(\r\n    hasArgsCount(2, 2),\r\n    withArgsOfType(NumberType),\r\n  ),\r\n  [Ops.LessThan]: createCallExpressionParser(\r\n    hasArgsCount(2, 2),\r\n    withArgsOfType(NumberType),\r\n  ),\r\n  [Ops.LessThanOrEqualTo]: createCallExpressionParser(\r\n    hasArgsCount(2, 2),\r\n    withArgsOfType(NumberType),\r\n  ),\r\n  [Ops.Multiply]: createCallExpressionParser(\r\n    hasArgsCount(2, Infinity),\r\n    withArgsOfReturnType,\r\n  ),\r\n  [Ops.Coalesce]: createCallExpressionParser(\r\n    hasArgsCount(2, Infinity),\r\n    withArgsOfReturnType,\r\n  ),\r\n  [Ops.Divide]: createCallExpressionParser(\r\n    hasArgsCount(2, 2),\r\n    withArgsOfType(NumberType),\r\n  ),\r\n  [Ops.Add]: createCallExpressionParser(\r\n    hasArgsCount(2, Infinity),\r\n    withArgsOfType(NumberType),\r\n  ),\r\n  [Ops.Subtract]: createCallExpressionParser(\r\n    hasArgsCount(2, 2),\r\n    withArgsOfType(NumberType),\r\n  ),\r\n  [Ops.Clamp]: createCallExpressionParser(\r\n    hasArgsCount(3, 3),\r\n    withArgsOfType(NumberType),\r\n  ),\r\n  [Ops.Mod]: createCallExpressionParser(\r\n    hasArgsCount(2, 2),\r\n    withArgsOfType(NumberType),\r\n  ),\r\n  [Ops.Pow]: createCallExpressionParser(\r\n    hasArgsCount(2, 2),\r\n    withArgsOfType(NumberType),\r\n  ),\r\n  [Ops.Abs]: createCallExpressionParser(\r\n    hasArgsCount(1, 1),\r\n    withArgsOfType(NumberType),\r\n  ),\r\n  [Ops.Floor]: createCallExpressionParser(\r\n    hasArgsCount(1, 1),\r\n    withArgsOfType(NumberType),\r\n  ),\r\n  [Ops.Ceil]: createCallExpressionParser(\r\n    hasArgsCount(1, 1),\r\n    withArgsOfType(NumberType),\r\n  ),\r\n  [Ops.Round]: createCallExpressionParser(\r\n    hasArgsCount(1, 1),\r\n    withArgsOfType(NumberType),\r\n  ),\r\n  [Ops.Sin]: createCallExpressionParser(\r\n    hasArgsCount(1, 1),\r\n    withArgsOfType(NumberType),\r\n  ),\r\n  [Ops.Cos]: createCallExpressionParser(\r\n    hasArgsCount(1, 1),\r\n    withArgsOfType(NumberType),\r\n  ),\r\n  [Ops.Atan]: createCallExpressionParser(\r\n    hasArgsCount(1, 2),\r\n    withArgsOfType(NumberType),\r\n  ),\r\n  [Ops.Sqrt]: createCallExpressionParser(\r\n    hasArgsCount(1, 1),\r\n    withArgsOfType(NumberType),\r\n  ),\r\n  [Ops.Match]: createCallExpressionParser(\r\n    hasArgsCount(4, Infinity),\r\n    hasEvenArgs,\r\n    withMatchArgs,\r\n  ),\r\n  [Ops.Between]: createCallExpressionParser(\r\n    hasArgsCount(3, 3),\r\n    withArgsOfType(NumberType),\r\n  ),\r\n  [Ops.Interpolate]: createCallExpressionParser(\r\n    hasArgsCount(6, Infinity),\r\n    hasEvenArgs,\r\n    withInterpolateArgs,\r\n  ),\r\n  [Ops.Case]: createCallExpressionParser(\r\n    hasArgsCount(3, Infinity),\r\n    hasOddArgs,\r\n    withCaseArgs,\r\n  ),\r\n  [Ops.In]: createCallExpressionParser(hasArgsCount(2, 2), withInArgs),\r\n  [Ops.Number]: createCallExpressionParser(\r\n    hasArgsCount(1, Infinity),\r\n    withArgsOfType(AnyType),\r\n  ),\r\n  [Ops.String]: createCallExpressionParser(\r\n    hasArgsCount(1, Infinity),\r\n    withArgsOfType(AnyType),\r\n  ),\r\n  [Ops.Array]: createCallExpressionParser(\r\n    hasArgsCount(1, Infinity),\r\n    withArgsOfType(NumberType),\r\n  ),\r\n  [Ops.Color]: createCallExpressionParser(\r\n    hasArgsCount(1, 4),\r\n    withArgsOfType(NumberType),\r\n  ),\r\n  [Ops.Band]: createCallExpressionParser(\r\n    hasArgsCount(1, 3),\r\n    withArgsOfType(NumberType),\r\n  ),\r\n  [Ops.Palette]: createCallExpressionParser(\r\n    hasArgsCount(2, 2),\r\n    withPaletteArgs,\r\n  ),\r\n  [Ops.ToString]: createCallExpressionParser(\r\n    hasArgsCount(1, 1),\r\n    withArgsOfType(BooleanType | NumberType | StringType | ColorType),\r\n  ),\r\n};\r\n\r\n/**\r\n * @typedef {function(Array<EncodedExpression>, number, ParsingContext):Array<Expression>|void} ArgValidator\r\n *\r\n * An argument validator applies various checks to an encoded expression arguments and\r\n * returns the parsed arguments if any.  The second argument is the return type of the call expression.\r\n */\r\n\r\n/**\r\n * @type {ArgValidator}\r\n */\r\nfunction withGetArgs(encoded, returnType, context) {\r\n  const argsCount = encoded.length - 1;\r\n  const args = new Array(argsCount);\r\n  for (let i = 0; i < argsCount; ++i) {\r\n    const key = encoded[i + 1];\r\n    switch (typeof key) {\r\n      case 'number': {\r\n        args[i] = new LiteralExpression(NumberType, key);\r\n        break;\r\n      }\r\n      case 'string': {\r\n        args[i] = new LiteralExpression(StringType, key);\r\n        break;\r\n      }\r\n      default: {\r\n        throw new Error(\r\n          `expected a string key or numeric array index for a get operation, got ${key}`,\r\n        );\r\n      }\r\n    }\r\n    if (i === 0) {\r\n      context.properties.add(String(key));\r\n    }\r\n  }\r\n  return args;\r\n}\r\n\r\n/**\r\n * @type {ArgValidator}\r\n */\r\nfunction withVarArgs(encoded, returnType, context) {\r\n  const name = encoded[1];\r\n  if (typeof name !== 'string') {\r\n    throw new Error('expected a string argument for var operation');\r\n  }\r\n  context.variables.add(name);\r\n\r\n  return [new LiteralExpression(StringType, name)];\r\n}\r\n\r\n/**\r\n * @type {ArgValidator}\r\n */\r\nfunction usesFeatureId(encoded, returnType, context) {\r\n  context.featureId = true;\r\n}\r\n\r\n/**\r\n * @type {ArgValidator}\r\n */\r\nfunction usesGeometryType(encoded, returnType, context) {\r\n  context.geometryType = true;\r\n}\r\n\r\n/**\r\n * @type {ArgValidator}\r\n */\r\nfunction usesMapState(encoded, returnType, context) {\r\n  context.mapState = true;\r\n}\r\n\r\n/**\r\n * @type {ArgValidator}\r\n */\r\nfunction withNoArgs(encoded, returnType, context) {\r\n  const operation = encoded[0];\r\n  if (encoded.length !== 1) {\r\n    throw new Error(`expected no arguments for ${operation} operation`);\r\n  }\r\n  return [];\r\n}\r\n\r\n/**\r\n * @param {number} minArgs The minimum number of arguments.\r\n * @param {number} maxArgs The maximum number of arguments.\r\n * @return {ArgValidator} The argument validator\r\n */\r\nfunction hasArgsCount(minArgs, maxArgs) {\r\n  return function (encoded, returnType, context) {\r\n    const operation = encoded[0];\r\n    const argCount = encoded.length - 1;\r\n    if (minArgs === maxArgs) {\r\n      if (argCount !== minArgs) {\r\n        const plural = minArgs === 1 ? '' : 's';\r\n        throw new Error(\r\n          `expected ${minArgs} argument${plural} for ${operation}, got ${argCount}`,\r\n        );\r\n      }\r\n    } else if (argCount < minArgs || argCount > maxArgs) {\r\n      const range =\r\n        maxArgs === Infinity\r\n          ? `${minArgs} or more`\r\n          : `${minArgs} to ${maxArgs}`;\r\n      throw new Error(\r\n        `expected ${range} arguments for ${operation}, got ${argCount}`,\r\n      );\r\n    }\r\n  };\r\n}\r\n\r\n/**\r\n * @type {ArgValidator}\r\n */\r\nfunction withArgsOfReturnType(encoded, returnType, context) {\r\n  const argCount = encoded.length - 1;\r\n  /**\r\n   * @type {Array<Expression>}\r\n   */\r\n  const args = new Array(argCount);\r\n  for (let i = 0; i < argCount; ++i) {\r\n    const expression = parse(encoded[i + 1], returnType, context);\r\n    args[i] = expression;\r\n  }\r\n  return args;\r\n}\r\n\r\n/**\r\n * @param {number} argType The argument type.\r\n * @return {ArgValidator} The argument validator\r\n */\r\nfunction withArgsOfType(argType) {\r\n  return function (encoded, returnType, context) {\r\n    const argCount = encoded.length - 1;\r\n    /**\r\n     * @type {Array<Expression>}\r\n     */\r\n    const args = new Array(argCount);\r\n    for (let i = 0; i < argCount; ++i) {\r\n      const expression = parse(encoded[i + 1], argType, context);\r\n      args[i] = expression;\r\n    }\r\n    return args;\r\n  };\r\n}\r\n\r\n/**\r\n * @type {ArgValidator}\r\n */\r\nfunction hasOddArgs(encoded, returnType, context) {\r\n  const operation = encoded[0];\r\n  const argCount = encoded.length - 1;\r\n  if (argCount % 2 === 0) {\r\n    throw new Error(\r\n      `expected an odd number of arguments for ${operation}, got ${argCount} instead`,\r\n    );\r\n  }\r\n}\r\n\r\n/**\r\n * @type {ArgValidator}\r\n */\r\nfunction hasEvenArgs(encoded, returnType, context) {\r\n  const operation = encoded[0];\r\n  const argCount = encoded.length - 1;\r\n  if (argCount % 2 === 1) {\r\n    throw new Error(\r\n      `expected an even number of arguments for operation ${operation}, got ${argCount} instead`,\r\n    );\r\n  }\r\n}\r\n\r\n/**\r\n * @type {ArgValidator}\r\n */\r\nfunction withMatchArgs(encoded, returnType, context) {\r\n  const argsCount = encoded.length - 1;\r\n\r\n  const inputType = StringType | NumberType | BooleanType;\r\n\r\n  const input = parse(encoded[1], inputType, context);\r\n\r\n  const fallback = parse(encoded[encoded.length - 1], returnType, context);\r\n\r\n  const args = new Array(argsCount - 2);\r\n  for (let i = 0; i < argsCount - 2; i += 2) {\r\n    try {\r\n      const match = parse(encoded[i + 2], input.type, context);\r\n      args[i] = match;\r\n    } catch (err) {\r\n      throw new Error(\r\n        `failed to parse argument ${i + 1} of match expression: ${err.message}`,\r\n      );\r\n    }\r\n    try {\r\n      const output = parse(encoded[i + 3], fallback.type, context);\r\n      args[i + 1] = output;\r\n    } catch (err) {\r\n      throw new Error(\r\n        `failed to parse argument ${i + 2} of match expression: ${err.message}`,\r\n      );\r\n    }\r\n  }\r\n\r\n  return [input, ...args, fallback];\r\n}\r\n\r\n/**\r\n * @type {ArgValidator}\r\n */\r\nfunction withInterpolateArgs(encoded, returnType, context) {\r\n  const interpolationType = encoded[1];\r\n  /**\r\n   * @type {number}\r\n   */\r\n  let base;\r\n  switch (interpolationType[0]) {\r\n    case 'linear':\r\n      base = 1;\r\n      break;\r\n    case 'exponential':\r\n      const b = interpolationType[1];\r\n      if (typeof b !== 'number' || b <= 0) {\r\n        throw new Error(\r\n          `expected a number base for exponential interpolation` +\r\n            `, got ${JSON.stringify(b)} instead`,\r\n        );\r\n      }\r\n      base = b;\r\n      break;\r\n    default:\r\n      throw new Error(\r\n        `invalid interpolation type: ${JSON.stringify(interpolationType)}`,\r\n      );\r\n  }\r\n\r\n  const interpolation = new LiteralExpression(NumberType, base);\r\n\r\n  let input;\r\n  try {\r\n    input = parse(encoded[2], NumberType, context);\r\n  } catch (err) {\r\n    throw new Error(\r\n      `failed to parse argument 1 in interpolate expression: ${err.message}`,\r\n    );\r\n  }\r\n\r\n  const args = new Array(encoded.length - 3);\r\n  for (let i = 0; i < args.length; i += 2) {\r\n    try {\r\n      const stop = parse(encoded[i + 3], NumberType, context);\r\n      args[i] = stop;\r\n    } catch (err) {\r\n      throw new Error(\r\n        `failed to parse argument ${i + 2} for interpolate expression: ${err.message}`,\r\n      );\r\n    }\r\n    try {\r\n      const output = parse(encoded[i + 4], returnType, context);\r\n      args[i + 1] = output;\r\n    } catch (err) {\r\n      throw new Error(\r\n        `failed to parse argument ${i + 3} for interpolate expression: ${err.message}`,\r\n      );\r\n    }\r\n  }\r\n\r\n  return [interpolation, input, ...args];\r\n}\r\n\r\n/**\r\n * @type {ArgValidator}\r\n */\r\nfunction withCaseArgs(encoded, returnType, context) {\r\n  const fallback = parse(encoded[encoded.length - 1], returnType, context);\r\n\r\n  const args = new Array(encoded.length - 1);\r\n  for (let i = 0; i < args.length - 1; i += 2) {\r\n    try {\r\n      const condition = parse(encoded[i + 1], BooleanType, context);\r\n      args[i] = condition;\r\n    } catch (err) {\r\n      throw new Error(\r\n        `failed to parse argument ${i} of case expression: ${err.message}`,\r\n      );\r\n    }\r\n    try {\r\n      const output = parse(encoded[i + 2], fallback.type, context);\r\n      args[i + 1] = output;\r\n    } catch (err) {\r\n      throw new Error(\r\n        `failed to parse argument ${i + 1} of case expression: ${err.message}`,\r\n      );\r\n    }\r\n  }\r\n\r\n  args[args.length - 1] = fallback;\r\n  return args;\r\n}\r\n\r\n/**\r\n * @type {ArgValidator}\r\n */\r\nfunction withInArgs(encoded, returnType, context) {\r\n  let haystack = encoded[2];\r\n  if (!Array.isArray(haystack)) {\r\n    throw new Error(\r\n      `the second argument for the \"in\" operator must be an array`,\r\n    );\r\n  }\r\n  /**\r\n   * @type {number}\r\n   */\r\n  let needleType;\r\n  if (typeof haystack[0] === 'string') {\r\n    if (haystack[0] !== 'literal') {\r\n      throw new Error(\r\n        `for the \"in\" operator, a string array should be wrapped in a \"literal\" operator to disambiguate from expressions`,\r\n      );\r\n    }\r\n    if (!Array.isArray(haystack[1])) {\r\n      throw new Error(\r\n        `failed to parse \"in\" expression: the literal operator must be followed by an array`,\r\n      );\r\n    }\r\n    haystack = haystack[1];\r\n    needleType = StringType;\r\n  } else {\r\n    needleType = NumberType;\r\n  }\r\n\r\n  const args = new Array(haystack.length);\r\n  for (let i = 0; i < args.length; i++) {\r\n    try {\r\n      const arg = parse(haystack[i], needleType, context);\r\n      args[i] = arg;\r\n    } catch (err) {\r\n      throw new Error(\r\n        `failed to parse haystack item ${i} for \"in\" expression: ${err.message}`,\r\n      );\r\n    }\r\n  }\r\n\r\n  const needle = parse(encoded[1], needleType, context);\r\n  return [needle, ...args];\r\n}\r\n\r\n/**\r\n * @type {ArgValidator}\r\n */\r\nfunction withPaletteArgs(encoded, returnType, context) {\r\n  let index;\r\n  try {\r\n    index = parse(encoded[1], NumberType, context);\r\n  } catch (err) {\r\n    throw new Error(\r\n      `failed to parse first argument in palette expression: ${err.message}`,\r\n    );\r\n  }\r\n  const colors = encoded[2];\r\n  if (!Array.isArray(colors)) {\r\n    throw new Error('the second argument of palette must be an array');\r\n  }\r\n  const parsedColors = new Array(colors.length);\r\n  for (let i = 0; i < parsedColors.length; i++) {\r\n    let color;\r\n    try {\r\n      color = parse(colors[i], ColorType, context);\r\n    } catch (err) {\r\n      throw new Error(\r\n        `failed to parse color at index ${i} in palette expression: ${err.message}`,\r\n      );\r\n    }\r\n    if (!(color instanceof LiteralExpression)) {\r\n      throw new Error(\r\n        `the palette color at index ${i} must be a literal value`,\r\n      );\r\n    }\r\n    parsedColors[i] = color;\r\n  }\r\n  return [index, ...parsedColors];\r\n}\r\n\r\n/**\r\n * @param {Array<ArgValidator>} validators A chain of argument validators.  The last validator is expected\r\n * to return the parsed arguments.\r\n * @return {Parser} The parser.\r\n */\r\nfunction createCallExpressionParser(...validators) {\r\n  return function (encoded, returnType, context) {\r\n    const operator = encoded[0];\r\n\r\n    /**\r\n     * @type {Array<Expression>}\r\n     */\r\n    let args;\r\n    for (let i = 0; i < validators.length; i++) {\r\n      const parsed = validators[i](encoded, returnType, context);\r\n      if (i == validators.length - 1) {\r\n        if (!parsed) {\r\n          throw new Error(\r\n            'expected last argument validator to return the parsed args',\r\n          );\r\n        }\r\n        args = parsed;\r\n      }\r\n    }\r\n    return new CallExpression(returnType, operator, ...args);\r\n  };\r\n}\r\n\r\n/**\r\n * @param {Array} encoded The encoded expression.\r\n * @param {number} returnType The expected return type of the call expression.\r\n * @param {ParsingContext} context The parsing context.\r\n * @return {Expression} The parsed expression.\r\n */\r\nfunction parseCallExpression(encoded, returnType, context) {\r\n  const operator = encoded[0];\r\n\r\n  const parser = parsers[operator];\r\n  if (!parser) {\r\n    throw new Error(`unknown operator: ${operator}`);\r\n  }\r\n  return parser(encoded, returnType, context);\r\n}\r\n\r\n/**\r\n * Returns a simplified geometry type suited for the `geometry-type` operator\r\n * @param {import('../geom/Geometry.js').default|import('../render/Feature.js').default} geometry Geometry object\r\n * @return {'Point'|'LineString'|'Polygon'|''} Simplified geometry type; empty string of no geometry found\r\n */\r\nexport function computeGeometryType(geometry) {\r\n  if (!geometry) {\r\n    return '';\r\n  }\r\n  const type = geometry.getType();\r\n  switch (type) {\r\n    case 'Point':\r\n    case 'LineString':\r\n    case 'Polygon':\r\n      return type;\r\n    case 'MultiPoint':\r\n    case 'MultiLineString':\r\n    case 'MultiPolygon':\r\n      return /** @type {'Point'|'LineString'|'Polygon'} */ (type.substring(5));\r\n    case 'Circle':\r\n      return 'Polygon';\r\n    case 'GeometryCollection':\r\n      return computeGeometryType(\r\n        /** @type {import(\"../geom/GeometryCollection.js\").default} */ (\r\n          geometry\r\n        ).getGeometries()[0],\r\n      );\r\n    default:\r\n      return '';\r\n  }\r\n}\r\n","/**\r\n * @module ol/size\r\n */\r\n\r\n/**\r\n * An array of numbers representing a size: `[width, height]`.\r\n * @typedef {Array<number>} Size\r\n * @api\r\n */\r\n\r\n/**\r\n * Returns a buffered size.\r\n * @param {Size} size Size.\r\n * @param {number} num The amount by which to buffer.\r\n * @param {Size} [dest] Optional reusable size array.\r\n * @return {Size} The buffered size.\r\n */\r\nexport function buffer(size, num, dest) {\r\n  if (dest === undefined) {\r\n    dest = [0, 0];\r\n  }\r\n  dest[0] = size[0] + 2 * num;\r\n  dest[1] = size[1] + 2 * num;\r\n  return dest;\r\n}\r\n\r\n/**\r\n * Determines if a size has a positive area.\r\n * @param {Size} size The size to test.\r\n * @return {boolean} The size has a positive area.\r\n */\r\nexport function hasArea(size) {\r\n  return size[0] > 0 && size[1] > 0;\r\n}\r\n\r\n/**\r\n * Returns a size scaled by a ratio. The result will be an array of integers.\r\n * @param {Size} size Size.\r\n * @param {number} ratio Ratio.\r\n * @param {Size} [dest] Optional reusable size array.\r\n * @return {Size} The scaled size.\r\n */\r\nexport function scale(size, ratio, dest) {\r\n  if (dest === undefined) {\r\n    dest = [0, 0];\r\n  }\r\n  dest[0] = (size[0] * ratio + 0.5) | 0;\r\n  dest[1] = (size[1] * ratio + 0.5) | 0;\r\n  return dest;\r\n}\r\n\r\n/**\r\n * Returns an `Size` array for the passed in number (meaning: square) or\r\n * `Size` array.\r\n * (meaning: non-square),\r\n * @param {number|Size} size Width and height.\r\n * @param {Size} [dest] Optional reusable size array.\r\n * @return {Size} Size.\r\n * @api\r\n */\r\nexport function toSize(size, dest) {\r\n  if (Array.isArray(size)) {\r\n    return size;\r\n  }\r\n  if (dest === undefined) {\r\n    dest = [size, size];\r\n  } else {\r\n    dest[0] = size;\r\n    dest[1] = size;\r\n  }\r\n  return dest;\r\n}\r\n","/**\r\n * @module ol/style/Circle\r\n */\r\n\r\nimport RegularShape from './RegularShape.js';\r\n\r\n/**\r\n * @typedef {Object} Options\r\n * @property {import(\"./Fill.js\").default} [fill] Fill style.\r\n * @property {number} radius Circle radius.\r\n * @property {import(\"./Stroke.js\").default} [stroke] Stroke style.\r\n * @property {Array<number>} [displacement=[0,0]] displacement\r\n * @property {number|import(\"../size.js\").Size} [scale=1] Scale. A two dimensional scale will produce an ellipse.\r\n * Unless two dimensional scaling is required a better result may be obtained with an appropriate setting for `radius`.\r\n * @property {number} [rotation=0] Rotation in radians\r\n * (positive rotation clockwise, meaningful only when used in conjunction with a two dimensional scale).\r\n * @property {boolean} [rotateWithView=false] Whether to rotate the shape with the view\r\n * (meaningful only when used in conjunction with a two dimensional scale).\r\n * @property {import('./Style.js').DeclutterMode} [declutterMode] Declutter mode\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * Set circle style for vector features.\r\n * @api\r\n */\r\nclass CircleStyle extends RegularShape {\r\n  /**\r\n   * @param {Options} [options] Options.\r\n   */\r\n  constructor(options) {\r\n    options = options ? options : {radius: 5};\r\n\r\n    super({\r\n      points: Infinity,\r\n      fill: options.fill,\r\n      radius: options.radius,\r\n      stroke: options.stroke,\r\n      scale: options.scale !== undefined ? options.scale : 1,\r\n      rotation: options.rotation !== undefined ? options.rotation : 0,\r\n      rotateWithView:\r\n        options.rotateWithView !== undefined ? options.rotateWithView : false,\r\n      displacement:\r\n        options.displacement !== undefined ? options.displacement : [0, 0],\r\n      declutterMode: options.declutterMode,\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Clones the style.\r\n   * @return {CircleStyle} The cloned style.\r\n   * @api\r\n   * @override\r\n   */\r\n  clone() {\r\n    const scale = this.getScale();\r\n    const style = new CircleStyle({\r\n      fill: this.getFill() ? this.getFill().clone() : undefined,\r\n      stroke: this.getStroke() ? this.getStroke().clone() : undefined,\r\n      radius: this.getRadius(),\r\n      scale: Array.isArray(scale) ? scale.slice() : scale,\r\n      rotation: this.getRotation(),\r\n      rotateWithView: this.getRotateWithView(),\r\n      displacement: this.getDisplacement().slice(),\r\n      declutterMode: this.getDeclutterMode(),\r\n    });\r\n    style.setOpacity(this.getOpacity());\r\n    return style;\r\n  }\r\n\r\n  /**\r\n   * Set the circle radius.\r\n   *\r\n   * @param {number} radius Circle radius.\r\n   * @api\r\n   */\r\n  setRadius(radius) {\r\n    this.radius = radius;\r\n    this.render();\r\n  }\r\n}\r\n\r\nexport default CircleStyle;\r\n","/**\r\n * @module ol/style/RegularShape\r\n */\r\n\r\nimport ImageState from '../ImageState.js';\r\nimport {asArray} from '../color.js';\r\nimport {asColorLike} from '../colorlike.js';\r\nimport {createCanvasContext2D} from '../dom.js';\r\nimport {\r\n  defaultFillStyle,\r\n  defaultLineCap,\r\n  defaultLineJoin,\r\n  defaultLineWidth,\r\n  defaultMiterLimit,\r\n  defaultStrokeStyle,\r\n} from '../render/canvas.js';\r\nimport IconImage from './IconImage.js';\r\nimport {shared as iconImageCache} from './IconImageCache.js';\r\nimport ImageStyle from './Image.js';\r\n\r\n/**\r\n * Specify radius for regular polygons, or both radius and radius2 for stars.\r\n * @typedef {Object} Options\r\n * @property {import(\"./Fill.js\").default} [fill] Fill style.\r\n * @property {number} points Number of points for stars and regular polygons. In case of a polygon, the number of points\r\n * is the number of sides.\r\n * @property {number} radius Radius of a regular polygon.\r\n * @property {number} [radius2] Second radius to make a star instead of a regular polygon.\r\n * @property {number} [angle=0] Shape's angle in radians. A value of 0 will have one of the shape's points facing up.\r\n * @property {Array<number>} [displacement=[0, 0]] Displacement of the shape in pixels.\r\n * Positive values will shift the shape right and up.\r\n * @property {import(\"./Stroke.js\").default} [stroke] Stroke style.\r\n * @property {number} [rotation=0] Rotation in radians (positive rotation clockwise).\r\n * @property {boolean} [rotateWithView=false] Whether to rotate the shape with the view.\r\n * @property {number|import(\"../size.js\").Size} [scale=1] Scale. Unless two dimensional scaling is required a better\r\n * result may be obtained with appropriate settings for `radius` and `radius2`.\r\n * @property {import('./Style.js').DeclutterMode} [declutterMode] Declutter mode.\r\n */\r\n\r\n/**\r\n * @typedef {Object} RenderOptions\r\n * @property {import(\"../colorlike.js\").ColorLike|undefined} strokeStyle StrokeStyle.\r\n * @property {number} strokeWidth StrokeWidth.\r\n * @property {number} size Size.\r\n * @property {CanvasLineCap} lineCap LineCap.\r\n * @property {Array<number>|null} lineDash LineDash.\r\n * @property {number} lineDashOffset LineDashOffset.\r\n * @property {CanvasLineJoin} lineJoin LineJoin.\r\n * @property {number} miterLimit MiterLimit.\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * Set regular shape style for vector features. The resulting shape will be\r\n * a regular polygon when `radius` is provided, or a star when both `radius` and\r\n * `radius2` are provided.\r\n * @api\r\n */\r\nclass RegularShape extends ImageStyle {\r\n  /**\r\n   * @param {Options} options Options.\r\n   */\r\n  constructor(options) {\r\n    super({\r\n      opacity: 1,\r\n      rotateWithView:\r\n        options.rotateWithView !== undefined ? options.rotateWithView : false,\r\n      rotation: options.rotation !== undefined ? options.rotation : 0,\r\n      scale: options.scale !== undefined ? options.scale : 1,\r\n      displacement:\r\n        options.displacement !== undefined ? options.displacement : [0, 0],\r\n      declutterMode: options.declutterMode,\r\n    });\r\n\r\n    /**\r\n     * @private\r\n     * @type {HTMLCanvasElement|null}\r\n     */\r\n    this.hitDetectionCanvas_ = null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"./Fill.js\").default|null}\r\n     */\r\n    this.fill_ = options.fill !== undefined ? options.fill : null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {Array<number>}\r\n     */\r\n    this.origin_ = [0, 0];\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.points_ = options.points;\r\n\r\n    /**\r\n     * @protected\r\n     * @type {number}\r\n     */\r\n    this.radius = options.radius;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number|undefined}\r\n     */\r\n    this.radius2_ = options.radius2;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.angle_ = options.angle !== undefined ? options.angle : 0;\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"./Stroke.js\").default|null}\r\n     */\r\n    this.stroke_ = options.stroke !== undefined ? options.stroke : null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"../size.js\").Size}\r\n     */\r\n    this.size_;\r\n\r\n    /**\r\n     * @private\r\n     * @type {RenderOptions}\r\n     */\r\n    this.renderOptions_;\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    this.imageState_ =\r\n      this.fill_ && this.fill_.loading()\r\n        ? ImageState.LOADING\r\n        : ImageState.LOADED;\r\n    if (this.imageState_ === ImageState.LOADING) {\r\n      this.ready().then(() => (this.imageState_ = ImageState.LOADED));\r\n    }\r\n    this.render();\r\n  }\r\n\r\n  /**\r\n   * Clones the style.\r\n   * @return {RegularShape} The cloned style.\r\n   * @api\r\n   * @override\r\n   */\r\n  clone() {\r\n    const scale = this.getScale();\r\n    const style = new RegularShape({\r\n      fill: this.getFill() ? this.getFill().clone() : undefined,\r\n      points: this.getPoints(),\r\n      radius: this.getRadius(),\r\n      radius2: this.getRadius2(),\r\n      angle: this.getAngle(),\r\n      stroke: this.getStroke() ? this.getStroke().clone() : undefined,\r\n      rotation: this.getRotation(),\r\n      rotateWithView: this.getRotateWithView(),\r\n      scale: Array.isArray(scale) ? scale.slice() : scale,\r\n      displacement: this.getDisplacement().slice(),\r\n      declutterMode: this.getDeclutterMode(),\r\n    });\r\n    style.setOpacity(this.getOpacity());\r\n    return style;\r\n  }\r\n\r\n  /**\r\n   * Get the anchor point in pixels. The anchor determines the center point for the\r\n   * symbolizer.\r\n   * @return {Array<number>} Anchor.\r\n   * @api\r\n   * @override\r\n   */\r\n  getAnchor() {\r\n    const size = this.size_;\r\n    const displacement = this.getDisplacement();\r\n    const scale = this.getScaleArray();\r\n    // anchor is scaled by renderer but displacement should not be scaled\r\n    // so divide by scale here\r\n    return [\r\n      size[0] / 2 - displacement[0] / scale[0],\r\n      size[1] / 2 + displacement[1] / scale[1],\r\n    ];\r\n  }\r\n\r\n  /**\r\n   * Get the angle used in generating the shape.\r\n   * @return {number} Shape's rotation in radians.\r\n   * @api\r\n   */\r\n  getAngle() {\r\n    return this.angle_;\r\n  }\r\n\r\n  /**\r\n   * Get the fill style for the shape.\r\n   * @return {import(\"./Fill.js\").default|null} Fill style.\r\n   * @api\r\n   */\r\n  getFill() {\r\n    return this.fill_;\r\n  }\r\n\r\n  /**\r\n   * Set the fill style.\r\n   * @param {import(\"./Fill.js\").default|null} fill Fill style.\r\n   * @api\r\n   */\r\n  setFill(fill) {\r\n    this.fill_ = fill;\r\n    this.render();\r\n  }\r\n\r\n  /**\r\n   * @return {HTMLCanvasElement} Image element.\r\n   * @override\r\n   */\r\n  getHitDetectionImage() {\r\n    if (!this.hitDetectionCanvas_) {\r\n      this.hitDetectionCanvas_ = this.createHitDetectionCanvas_(\r\n        this.renderOptions_,\r\n      );\r\n    }\r\n    return this.hitDetectionCanvas_;\r\n  }\r\n\r\n  /**\r\n   * Get the image icon.\r\n   * @param {number} pixelRatio Pixel ratio.\r\n   * @return {HTMLCanvasElement} Image or Canvas element.\r\n   * @api\r\n   * @override\r\n   */\r\n  getImage(pixelRatio) {\r\n    const fillKey = this.fill_?.getKey();\r\n    const cacheKey =\r\n      `${pixelRatio},${this.angle_},${this.radius},${this.radius2_},${this.points_},${fillKey}` +\r\n      Object.values(this.renderOptions_).join(',');\r\n    let image = /** @type {HTMLCanvasElement} */ (\r\n      iconImageCache.get(cacheKey, null, null)?.getImage(1)\r\n    );\r\n    if (!image) {\r\n      const renderOptions = this.renderOptions_;\r\n      const size = Math.ceil(renderOptions.size * pixelRatio);\r\n      const context = createCanvasContext2D(size, size);\r\n      this.draw_(renderOptions, context, pixelRatio);\r\n\r\n      image = context.canvas;\r\n      iconImageCache.set(\r\n        cacheKey,\r\n        null,\r\n        null,\r\n        new IconImage(image, undefined, null, ImageState.LOADED, null),\r\n      );\r\n    }\r\n    return image;\r\n  }\r\n\r\n  /**\r\n   * Get the image pixel ratio.\r\n   * @param {number} pixelRatio Pixel ratio.\r\n   * @return {number} Pixel ratio.\r\n   * @override\r\n   */\r\n  getPixelRatio(pixelRatio) {\r\n    return pixelRatio;\r\n  }\r\n\r\n  /**\r\n   * @return {import(\"../size.js\").Size} Image size.\r\n   * @override\r\n   */\r\n  getImageSize() {\r\n    return this.size_;\r\n  }\r\n\r\n  /**\r\n   * @return {import(\"../ImageState.js\").default} Image state.\r\n   * @override\r\n   */\r\n  getImageState() {\r\n    return this.imageState_;\r\n  }\r\n\r\n  /**\r\n   * Get the origin of the symbolizer.\r\n   * @return {Array<number>} Origin.\r\n   * @api\r\n   * @override\r\n   */\r\n  getOrigin() {\r\n    return this.origin_;\r\n  }\r\n\r\n  /**\r\n   * Get the number of points for generating the shape.\r\n   * @return {number} Number of points for stars and regular polygons.\r\n   * @api\r\n   */\r\n  getPoints() {\r\n    return this.points_;\r\n  }\r\n\r\n  /**\r\n   * Get the (primary) radius for the shape.\r\n   * @return {number} Radius.\r\n   * @api\r\n   */\r\n  getRadius() {\r\n    return this.radius;\r\n  }\r\n\r\n  /**\r\n   * Get the secondary radius for the shape.\r\n   * @return {number|undefined} Radius2.\r\n   * @api\r\n   */\r\n  getRadius2() {\r\n    return this.radius2_;\r\n  }\r\n\r\n  /**\r\n   * Get the size of the symbolizer (in pixels).\r\n   * @return {import(\"../size.js\").Size} Size.\r\n   * @api\r\n   * @override\r\n   */\r\n  getSize() {\r\n    return this.size_;\r\n  }\r\n\r\n  /**\r\n   * Get the stroke style for the shape.\r\n   * @return {import(\"./Stroke.js\").default|null} Stroke style.\r\n   * @api\r\n   */\r\n  getStroke() {\r\n    return this.stroke_;\r\n  }\r\n\r\n  /**\r\n   * Set the stroke style.\r\n   * @param {import(\"./Stroke.js\").default|null} stroke Stroke style.\r\n   * @api\r\n   */\r\n  setStroke(stroke) {\r\n    this.stroke_ = stroke;\r\n    this.render();\r\n  }\r\n\r\n  /**\r\n   * @param {function(import(\"../events/Event.js\").default): void} listener Listener function.\r\n   * @override\r\n   */\r\n  listenImageChange(listener) {}\r\n\r\n  /**\r\n   * Load not yet loaded URI.\r\n   * @override\r\n   */\r\n  load() {}\r\n\r\n  /**\r\n   * @param {function(import(\"../events/Event.js\").default): void} listener Listener function.\r\n   * @override\r\n   */\r\n  unlistenImageChange(listener) {}\r\n\r\n  /**\r\n   * Calculate additional canvas size needed for the miter.\r\n   * @param {string} lineJoin Line join\r\n   * @param {number} strokeWidth Stroke width\r\n   * @param {number} miterLimit Miter limit\r\n   * @return {number} Additional canvas size needed\r\n   * @private\r\n   */\r\n  calculateLineJoinSize_(lineJoin, strokeWidth, miterLimit) {\r\n    if (\r\n      strokeWidth === 0 ||\r\n      this.points_ === Infinity ||\r\n      (lineJoin !== 'bevel' && lineJoin !== 'miter')\r\n    ) {\r\n      return strokeWidth;\r\n    }\r\n    // m  | ^\r\n    // i  | |\\                  .\r\n    // t >|  #\\\r\n    // e  | |\\ \\              .\r\n    // r      \\s\\\r\n    //      |  \\t\\          .                 .\r\n    //          \\r\\                      .   .\r\n    //      |    \\o\\      .          .  . . .\r\n    //          e \\k\\            .  .    . .\r\n    //      |      \\e\\  .    .  .       . .\r\n    //       d      \\ \\  .  .          . .\r\n    //      | _ _a_ _\\#  .            . .\r\n    //   r1          / `             . .\r\n    //      |                       . .\r\n    //       b     /               . .\r\n    //      |                     . .\r\n    //           / r2            . .\r\n    //      |                        .   .\r\n    //         /                           .   .\r\n    //      |α                                   .   .\r\n    //       /                                         .   .\r\n    //      ° center\r\n    let r1 = this.radius;\r\n    let r2 = this.radius2_ === undefined ? r1 : this.radius2_;\r\n    if (r1 < r2) {\r\n      const tmp = r1;\r\n      r1 = r2;\r\n      r2 = tmp;\r\n    }\r\n    const points =\r\n      this.radius2_ === undefined ? this.points_ : this.points_ * 2;\r\n    const alpha = (2 * Math.PI) / points;\r\n    const a = r2 * Math.sin(alpha);\r\n    const b = Math.sqrt(r2 * r2 - a * a);\r\n    const d = r1 - b;\r\n    const e = Math.sqrt(a * a + d * d);\r\n    const miterRatio = e / a;\r\n    if (lineJoin === 'miter' && miterRatio <= miterLimit) {\r\n      return miterRatio * strokeWidth;\r\n    }\r\n    // Calculate the distance from center to the stroke corner where\r\n    // it was cut short because of the miter limit.\r\n    //              l\r\n    //        ----+---- <= distance from center to here is maxr\r\n    //       /####|k ##\\\r\n    //      /#####^#####\\\r\n    //     /#### /+\\# s #\\\r\n    //    /### h/+++\\# t #\\\r\n    //   /### t/+++++\\# r #\\\r\n    //  /### a/+++++++\\# o #\\\r\n    // /### p/++ fill +\\# k #\\\r\n    ///#### /+++++^+++++\\# e #\\\r\n    //#####/+++++/+\\+++++\\#####\\\r\n    const k = strokeWidth / 2 / miterRatio;\r\n    const l = (strokeWidth / 2) * (d / e);\r\n    const maxr = Math.sqrt((r1 + k) * (r1 + k) + l * l);\r\n    const bevelAdd = maxr - r1;\r\n    if (this.radius2_ === undefined || lineJoin === 'bevel') {\r\n      return bevelAdd * 2;\r\n    }\r\n    // If outer miter is over the miter limit the inner miter may reach through the\r\n    // center and be longer than the bevel, same calculation as above but swap r1 / r2.\r\n    const aa = r1 * Math.sin(alpha);\r\n    const bb = Math.sqrt(r1 * r1 - aa * aa);\r\n    const dd = r2 - bb;\r\n    const ee = Math.sqrt(aa * aa + dd * dd);\r\n    const innerMiterRatio = ee / aa;\r\n    if (innerMiterRatio <= miterLimit) {\r\n      const innerLength = (innerMiterRatio * strokeWidth) / 2 - r2 - r1;\r\n      return 2 * Math.max(bevelAdd, innerLength);\r\n    }\r\n    return bevelAdd * 2;\r\n  }\r\n\r\n  /**\r\n   * @return {RenderOptions}  The render options\r\n   * @protected\r\n   */\r\n  createRenderOptions() {\r\n    let lineCap = defaultLineCap;\r\n    let lineJoin = defaultLineJoin;\r\n    let miterLimit = 0;\r\n    let lineDash = null;\r\n    let lineDashOffset = 0;\r\n    let strokeStyle;\r\n    let strokeWidth = 0;\r\n\r\n    if (this.stroke_) {\r\n      strokeStyle = asColorLike(this.stroke_.getColor() ?? defaultStrokeStyle);\r\n      strokeWidth = this.stroke_.getWidth() ?? defaultLineWidth;\r\n      lineDash = this.stroke_.getLineDash();\r\n      lineDashOffset = this.stroke_.getLineDashOffset() ?? 0;\r\n      lineJoin = this.stroke_.getLineJoin() ?? defaultLineJoin;\r\n      lineCap = this.stroke_.getLineCap() ?? defaultLineCap;\r\n      miterLimit = this.stroke_.getMiterLimit() ?? defaultMiterLimit;\r\n    }\r\n\r\n    const add = this.calculateLineJoinSize_(lineJoin, strokeWidth, miterLimit);\r\n    const maxRadius = Math.max(this.radius, this.radius2_ || 0);\r\n    const size = Math.ceil(2 * maxRadius + add);\r\n\r\n    return {\r\n      strokeStyle: strokeStyle,\r\n      strokeWidth: strokeWidth,\r\n      size: size,\r\n      lineCap: lineCap,\r\n      lineDash: lineDash,\r\n      lineDashOffset: lineDashOffset,\r\n      lineJoin: lineJoin,\r\n      miterLimit: miterLimit,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * @protected\r\n   */\r\n  render() {\r\n    this.renderOptions_ = this.createRenderOptions();\r\n    const size = this.renderOptions_.size;\r\n    this.hitDetectionCanvas_ = null;\r\n    this.size_ = [size, size];\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {RenderOptions} renderOptions Render options.\r\n   * @param {CanvasRenderingContext2D} context The rendering context.\r\n   * @param {number} pixelRatio The pixel ratio.\r\n   */\r\n  draw_(renderOptions, context, pixelRatio) {\r\n    context.scale(pixelRatio, pixelRatio);\r\n    // set origin to canvas center\r\n    context.translate(renderOptions.size / 2, renderOptions.size / 2);\r\n\r\n    this.createPath_(context);\r\n\r\n    if (this.fill_) {\r\n      let color = this.fill_.getColor();\r\n      if (color === null) {\r\n        color = defaultFillStyle;\r\n      }\r\n      context.fillStyle = asColorLike(color);\r\n      context.fill();\r\n    }\r\n    if (renderOptions.strokeStyle) {\r\n      context.strokeStyle = renderOptions.strokeStyle;\r\n      context.lineWidth = renderOptions.strokeWidth;\r\n      if (renderOptions.lineDash) {\r\n        context.setLineDash(renderOptions.lineDash);\r\n        context.lineDashOffset = renderOptions.lineDashOffset;\r\n      }\r\n      context.lineCap = renderOptions.lineCap;\r\n      context.lineJoin = renderOptions.lineJoin;\r\n      context.miterLimit = renderOptions.miterLimit;\r\n      context.stroke();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {RenderOptions} renderOptions Render options.\r\n   * @return {HTMLCanvasElement} Canvas containing the icon\r\n   */\r\n  createHitDetectionCanvas_(renderOptions) {\r\n    let context;\r\n    if (this.fill_) {\r\n      let color = this.fill_.getColor();\r\n\r\n      // determine if fill is transparent (or pattern or gradient)\r\n      let opacity = 0;\r\n      if (typeof color === 'string') {\r\n        color = asArray(color);\r\n      }\r\n      if (color === null) {\r\n        opacity = 1;\r\n      } else if (Array.isArray(color)) {\r\n        opacity = color.length === 4 ? color[3] : 1;\r\n      }\r\n      if (opacity === 0) {\r\n        // if a transparent fill style is set, create an extra hit-detection image\r\n        // with a default fill style\r\n        context = createCanvasContext2D(renderOptions.size, renderOptions.size);\r\n        this.drawHitDetectionCanvas_(renderOptions, context);\r\n      }\r\n    }\r\n    return context ? context.canvas : this.getImage(1);\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {CanvasRenderingContext2D} context The context to draw in.\r\n   */\r\n  createPath_(context) {\r\n    let points = this.points_;\r\n    const radius = this.radius;\r\n    if (points === Infinity) {\r\n      context.arc(0, 0, radius, 0, 2 * Math.PI);\r\n    } else {\r\n      const radius2 = this.radius2_ === undefined ? radius : this.radius2_;\r\n      if (this.radius2_ !== undefined) {\r\n        points *= 2;\r\n      }\r\n      const startAngle = this.angle_ - Math.PI / 2;\r\n      const step = (2 * Math.PI) / points;\r\n      for (let i = 0; i < points; i++) {\r\n        const angle0 = startAngle + i * step;\r\n        const radiusC = i % 2 === 0 ? radius : radius2;\r\n        context.lineTo(radiusC * Math.cos(angle0), radiusC * Math.sin(angle0));\r\n      }\r\n      context.closePath();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {RenderOptions} renderOptions Render options.\r\n   * @param {CanvasRenderingContext2D} context The context.\r\n   */\r\n  drawHitDetectionCanvas_(renderOptions, context) {\r\n    // set origin to canvas center\r\n    context.translate(renderOptions.size / 2, renderOptions.size / 2);\r\n\r\n    this.createPath_(context);\r\n\r\n    context.fillStyle = defaultFillStyle;\r\n    context.fill();\r\n    if (renderOptions.strokeStyle) {\r\n      context.strokeStyle = renderOptions.strokeStyle;\r\n      context.lineWidth = renderOptions.strokeWidth;\r\n      if (renderOptions.lineDash) {\r\n        context.setLineDash(renderOptions.lineDash);\r\n        context.lineDashOffset = renderOptions.lineDashOffset;\r\n      }\r\n      context.lineJoin = renderOptions.lineJoin;\r\n      context.miterLimit = renderOptions.miterLimit;\r\n      context.stroke();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @override\r\n   */\r\n  ready() {\r\n    return this.fill_ ? this.fill_.ready() : Promise.resolve();\r\n  }\r\n}\r\n\r\nexport default RegularShape;\r\n","/**\r\n * @module ol/ImageState\r\n */\r\n\r\n/**\r\n * @enum {number}\r\n */\r\nexport default {\r\n  IDLE: 0,\r\n  LOADING: 1,\r\n  LOADED: 2,\r\n  ERROR: 3,\r\n  EMPTY: 4,\r\n};\r\n","/**\r\n * @module ol/colorlike\r\n */\r\nimport ImageState from './ImageState.js';\r\nimport {toString} from './color.js';\r\nimport {createCanvasContext2D} from './dom.js';\r\nimport {get as getIconImage} from './style/IconImage.js';\r\nimport {shared as iconCache} from './style/IconImageCache.js';\r\n\r\n/**\r\n * @typedef {Object} PatternDescriptor\r\n * @property {string} src Pattern image URL\r\n * @property {import(\"./color.js\").Color|string} [color] Color to tint the pattern with.\r\n * @property {import(\"./size.js\").Size} [size] Size of the desired slice from the pattern image.\r\n * Use this together with `offset` when the pattern image is a sprite sheet.\r\n * @property {import(\"./size.js\").Size} [offset] Offset of the desired slice from the pattern image.\r\n * Use this together with `size` when the pattern image is a sprite sheet.\r\n */\r\n\r\n/**\r\n * A type accepted by CanvasRenderingContext2D.fillStyle\r\n * or CanvasRenderingContext2D.strokeStyle.\r\n * Represents a color, [CanvasPattern](https://developer.mozilla.org/en-US/docs/Web/API/CanvasPattern),\r\n * or [CanvasGradient](https://developer.mozilla.org/en-US/docs/Web/API/CanvasGradient). The origin for\r\n * patterns and gradients as fill style is an increment of 512 css pixels from map coordinate\r\n * `[0, 0]`. For seamless repeat patterns, width and height of the pattern image\r\n * must be a factor of two (2, 4, 8, ..., 512).\r\n *\r\n * @typedef {string|CanvasPattern|CanvasGradient} ColorLike\r\n * @api\r\n */\r\n\r\n/**\r\n * @param {import(\"./color.js\").Color|ColorLike|PatternDescriptor|null} color Color.\r\n * @return {ColorLike|null} The color as an {@link ol/colorlike~ColorLike}.\r\n * @api\r\n */\r\nexport function asColorLike(color) {\r\n  if (!color) {\r\n    return null;\r\n  }\r\n  if (Array.isArray(color)) {\r\n    return toString(color);\r\n  }\r\n  if (typeof color === 'object' && 'src' in color) {\r\n    return asCanvasPattern(color);\r\n  }\r\n  return color;\r\n}\r\n\r\n/**\r\n * @param {PatternDescriptor} pattern Pattern descriptor.\r\n * @return {CanvasPattern|null} Canvas pattern or null if the pattern referenced in the\r\n * PatternDescriptor was not found in the icon image cache.\r\n */\r\nfunction asCanvasPattern(pattern) {\r\n  if (!pattern.offset || !pattern.size) {\r\n    return iconCache.getPattern(pattern.src, 'anonymous', pattern.color);\r\n  }\r\n\r\n  const cacheKey = pattern.src + ':' + pattern.offset;\r\n\r\n  const canvasPattern = iconCache.getPattern(\r\n    cacheKey,\r\n    undefined,\r\n    pattern.color,\r\n  );\r\n  if (canvasPattern) {\r\n    return canvasPattern;\r\n  }\r\n\r\n  const iconImage = iconCache.get(pattern.src, 'anonymous', null);\r\n  if (iconImage.getImageState() !== ImageState.LOADED) {\r\n    return null;\r\n  }\r\n  const patternCanvasContext = createCanvasContext2D(\r\n    pattern.size[0],\r\n    pattern.size[1],\r\n  );\r\n  patternCanvasContext.drawImage(\r\n    iconImage.getImage(1),\r\n    pattern.offset[0],\r\n    pattern.offset[1],\r\n    pattern.size[0],\r\n    pattern.size[1],\r\n    0,\r\n    0,\r\n    pattern.size[0],\r\n    pattern.size[1],\r\n  );\r\n  getIconImage(\r\n    patternCanvasContext.canvas,\r\n    cacheKey,\r\n    undefined,\r\n    ImageState.LOADED,\r\n    pattern.color,\r\n    true,\r\n  );\r\n  return iconCache.getPattern(cacheKey, undefined, pattern.color);\r\n}\r\n","/**\r\n * @module ol/style/IconImage\r\n */\r\n\r\nimport {decodeFallback} from '../Image.js';\r\nimport ImageState from '../ImageState.js';\r\nimport {asString} from '../color.js';\r\nimport {createCanvasContext2D} from '../dom.js';\r\nimport EventType from '../events/EventType.js';\r\nimport EventTarget from '../events/Target.js';\r\nimport {shared as iconImageCache} from './IconImageCache.js';\r\n\r\n/**\r\n * @type {CanvasRenderingContext2D}\r\n */\r\nlet taintedTestContext = null;\r\n\r\nclass IconImage extends EventTarget {\r\n  /**\r\n   * @param {HTMLImageElement|HTMLCanvasElement|ImageBitmap|null} image Image.\r\n   * @param {string|undefined} src Src.\r\n   * @param {?string} crossOrigin Cross origin.\r\n   * @param {import(\"../ImageState.js\").default|undefined} imageState Image state.\r\n   * @param {import(\"../color.js\").Color|string|null} color Color.\r\n   */\r\n  constructor(image, src, crossOrigin, imageState, color) {\r\n    super();\r\n\r\n    /**\r\n     * @private\r\n     * @type {HTMLImageElement|HTMLCanvasElement|ImageBitmap}\r\n     */\r\n    this.hitDetectionImage_ = null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {HTMLImageElement|HTMLCanvasElement|ImageBitmap|null}\r\n     */\r\n    this.image_ = image;\r\n\r\n    /**\r\n     * @private\r\n     * @type {string|null}\r\n     */\r\n    this.crossOrigin_ = crossOrigin;\r\n\r\n    /**\r\n     * @private\r\n     * @type {Object<number, HTMLCanvasElement>}\r\n     */\r\n    this.canvas_ = {};\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"../color.js\").Color|string|null}\r\n     */\r\n    this.color_ = color;\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"../ImageState.js\").default}\r\n     */\r\n    this.imageState_ = imageState === undefined ? ImageState.IDLE : imageState;\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"../size.js\").Size|null}\r\n     */\r\n    this.size_ =\r\n      image && image.width && image.height ? [image.width, image.height] : null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {string|undefined}\r\n     */\r\n    this.src_ = src;\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    this.tainted_;\r\n\r\n    /**\r\n     * @private\r\n     * @type {Promise<void>|null}\r\n     */\r\n    this.ready_ = null;\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  initializeImage_() {\r\n    this.image_ = new Image();\r\n    if (this.crossOrigin_ !== null) {\r\n      this.image_.crossOrigin = this.crossOrigin_;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @return {boolean} The image canvas is tainted.\r\n   */\r\n  isTainted_() {\r\n    if (this.tainted_ === undefined && this.imageState_ === ImageState.LOADED) {\r\n      if (!taintedTestContext) {\r\n        taintedTestContext = createCanvasContext2D(1, 1, undefined, {\r\n          willReadFrequently: true,\r\n        });\r\n      }\r\n      taintedTestContext.drawImage(this.image_, 0, 0);\r\n      try {\r\n        taintedTestContext.getImageData(0, 0, 1, 1);\r\n        this.tainted_ = false;\r\n      } catch {\r\n        taintedTestContext = null;\r\n        this.tainted_ = true;\r\n      }\r\n    }\r\n    return this.tainted_ === true;\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  dispatchChangeEvent_() {\r\n    this.dispatchEvent(EventType.CHANGE);\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  handleImageError_() {\r\n    this.imageState_ = ImageState.ERROR;\r\n    this.dispatchChangeEvent_();\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  handleImageLoad_() {\r\n    this.imageState_ = ImageState.LOADED;\r\n    this.size_ = [this.image_.width, this.image_.height];\r\n    this.dispatchChangeEvent_();\r\n  }\r\n\r\n  /**\r\n   * @param {number} pixelRatio Pixel ratio.\r\n   * @return {HTMLImageElement|HTMLCanvasElement|ImageBitmap} Image or Canvas element or image bitmap.\r\n   */\r\n  getImage(pixelRatio) {\r\n    if (!this.image_) {\r\n      this.initializeImage_();\r\n    }\r\n    this.replaceColor_(pixelRatio);\r\n    return this.canvas_[pixelRatio] ? this.canvas_[pixelRatio] : this.image_;\r\n  }\r\n\r\n  /**\r\n   * @param {number} pixelRatio Pixel ratio.\r\n   * @return {number} Image or Canvas element.\r\n   */\r\n  getPixelRatio(pixelRatio) {\r\n    this.replaceColor_(pixelRatio);\r\n    return this.canvas_[pixelRatio] ? pixelRatio : 1;\r\n  }\r\n\r\n  /**\r\n   * @return {import(\"../ImageState.js\").default} Image state.\r\n   */\r\n  getImageState() {\r\n    return this.imageState_;\r\n  }\r\n\r\n  /**\r\n   * @return {HTMLImageElement|HTMLCanvasElement|ImageBitmap} Image element.\r\n   */\r\n  getHitDetectionImage() {\r\n    if (!this.image_) {\r\n      this.initializeImage_();\r\n    }\r\n    if (!this.hitDetectionImage_) {\r\n      if (this.isTainted_()) {\r\n        const width = this.size_[0];\r\n        const height = this.size_[1];\r\n        const context = createCanvasContext2D(width, height);\r\n        context.fillRect(0, 0, width, height);\r\n        this.hitDetectionImage_ = context.canvas;\r\n      } else {\r\n        this.hitDetectionImage_ = this.image_;\r\n      }\r\n    }\r\n    return this.hitDetectionImage_;\r\n  }\r\n\r\n  /**\r\n   * Get the size of the icon (in pixels).\r\n   * @return {import(\"../size.js\").Size} Image size.\r\n   */\r\n  getSize() {\r\n    return this.size_;\r\n  }\r\n\r\n  /**\r\n   * @return {string|undefined} Image src.\r\n   */\r\n  getSrc() {\r\n    return this.src_;\r\n  }\r\n\r\n  /**\r\n   * Load not yet loaded URI.\r\n   */\r\n  load() {\r\n    if (this.imageState_ !== ImageState.IDLE) {\r\n      return;\r\n    }\r\n    if (!this.image_) {\r\n      this.initializeImage_();\r\n    }\r\n\r\n    this.imageState_ = ImageState.LOADING;\r\n    try {\r\n      if (this.src_ !== undefined) {\r\n        /** @type {HTMLImageElement} */ (this.image_).src = this.src_;\r\n      }\r\n    } catch {\r\n      this.handleImageError_();\r\n    }\r\n    if (this.image_ instanceof HTMLImageElement) {\r\n      decodeFallback(this.image_, this.src_)\r\n        .then((image) => {\r\n          this.image_ = image;\r\n          this.handleImageLoad_();\r\n        })\r\n        .catch(this.handleImageError_.bind(this));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {number} pixelRatio Pixel ratio.\r\n   * @private\r\n   */\r\n  replaceColor_(pixelRatio) {\r\n    if (\r\n      !this.color_ ||\r\n      this.canvas_[pixelRatio] ||\r\n      this.imageState_ !== ImageState.LOADED\r\n    ) {\r\n      return;\r\n    }\r\n\r\n    const image = this.image_;\r\n    const ctx = createCanvasContext2D(\r\n      Math.ceil(image.width * pixelRatio),\r\n      Math.ceil(image.height * pixelRatio),\r\n    );\r\n    const canvas = ctx.canvas;\r\n\r\n    ctx.scale(pixelRatio, pixelRatio);\r\n    ctx.drawImage(image, 0, 0);\r\n\r\n    ctx.globalCompositeOperation = 'multiply';\r\n    ctx.fillStyle = asString(this.color_);\r\n    ctx.fillRect(0, 0, canvas.width / pixelRatio, canvas.height / pixelRatio);\r\n\r\n    ctx.globalCompositeOperation = 'destination-in';\r\n    ctx.drawImage(image, 0, 0);\r\n\r\n    this.canvas_[pixelRatio] = canvas;\r\n  }\r\n\r\n  /**\r\n   * @return {Promise<void>} Promise that resolves when the image is loaded.\r\n   */\r\n  ready() {\r\n    if (!this.ready_) {\r\n      this.ready_ = new Promise((resolve) => {\r\n        if (\r\n          this.imageState_ === ImageState.LOADED ||\r\n          this.imageState_ === ImageState.ERROR\r\n        ) {\r\n          resolve();\r\n        } else {\r\n          const onChange = () => {\r\n            if (\r\n              this.imageState_ === ImageState.LOADED ||\r\n              this.imageState_ === ImageState.ERROR\r\n            ) {\r\n              this.removeEventListener(EventType.CHANGE, onChange);\r\n              resolve();\r\n            }\r\n          };\r\n          this.addEventListener(EventType.CHANGE, onChange);\r\n        }\r\n      });\r\n    }\r\n    return this.ready_;\r\n  }\r\n}\r\n\r\n/**\r\n * @param {HTMLImageElement|HTMLCanvasElement|ImageBitmap|null} image Image.\r\n * @param {string|undefined} cacheKey Src.\r\n * @param {?string} crossOrigin Cross origin.\r\n * @param {import(\"../ImageState.js\").default|undefined} imageState Image state.\r\n * @param {import(\"../color.js\").Color|string|null} color Color.\r\n * @param {boolean} [pattern] Also cache a `repeat` pattern with the icon image.\r\n * @return {IconImage} Icon image.\r\n */\r\nexport function get(image, cacheKey, crossOrigin, imageState, color, pattern) {\r\n  let iconImage =\r\n    cacheKey === undefined\r\n      ? undefined\r\n      : iconImageCache.get(cacheKey, crossOrigin, color);\r\n  if (!iconImage) {\r\n    iconImage = new IconImage(\r\n      image,\r\n      image && 'src' in image ? image.src || undefined : cacheKey,\r\n      crossOrigin,\r\n      imageState,\r\n      color,\r\n    );\r\n    iconImageCache.set(cacheKey, crossOrigin, color, iconImage, pattern);\r\n  }\r\n  if (\r\n    pattern &&\r\n    iconImage &&\r\n    !iconImageCache.getPattern(cacheKey, crossOrigin, color)\r\n  ) {\r\n    iconImageCache.set(cacheKey, crossOrigin, color, iconImage, pattern);\r\n  }\r\n  return iconImage;\r\n}\r\n\r\nexport default IconImage;\r\n","/**\r\n * @module ol/Image\r\n */\r\nimport ImageState from './ImageState.js';\r\nimport EventType from './events/EventType.js';\r\nimport EventTarget from './events/Target.js';\r\nimport {listenOnce, unlistenByKey} from './events.js';\r\nimport {toPromise} from './functions.js';\r\nimport {CREATE_IMAGE_BITMAP, IMAGE_DECODE} from './has.js';\r\n\r\n/**\r\n * A function that takes an {@link module:ol/Image~ImageWrapper} for the image and a\r\n * `{string}` for the src as arguments. It is supposed to make it so the\r\n * underlying image {@link module:ol/Image~ImageWrapper#getImage} is assigned the\r\n * content specified by the src. If not specified, the default is\r\n *\r\n *     function(image, src) {\r\n *       image.getImage().src = src;\r\n *     }\r\n *\r\n * Providing a custom `imageLoadFunction` can be useful to load images with\r\n * post requests or - in general - through XHR requests, where the src of the\r\n * image element would be set to a data URI when the content is loaded.\r\n *\r\n * @typedef {function(import(\"./Image.js\").default, string): void} LoadFunction\r\n * @api\r\n */\r\n\r\n/**\r\n * @typedef {Object} ImageObject\r\n * @property {import(\"./extent.js\").Extent} [extent] Extent, if different from the requested one.\r\n * @property {import(\"./resolution.js\").ResolutionLike} [resolution] Resolution, if different from the requested one.\r\n * When x and y resolution are different, use the array type (`[xResolution, yResolution]`).\r\n * @property {number} [pixelRatio] Pixel ratio, if different from the requested one.\r\n * @property {import('./DataTile.js').ImageLike} image Image.\r\n */\r\n\r\n/**\r\n * Loader function used for image sources. Receives extent, resolution and pixel ratio as arguments.\r\n * For images that cover any extent and resolution (static images), the loader function should not accept\r\n * any arguments. The function returns an {@link import(\"./DataTile.js\").ImageLike image}, an\r\n * {@link import(\"./Image.js\").ImageObject image object}, or a promise for the same.\r\n * For loaders that generate images, the promise should not resolve until the image is loaded.\r\n * If the returned image does not match the extent, resolution or pixel ratio passed to the loader,\r\n * it has to return an {@link import(\"./Image.js\").ImageObject image object} with the `image` and the\r\n * correct `extent`, `resolution` and `pixelRatio`.\r\n *\r\n * @typedef {function(import(\"./extent.js\").Extent, number, number, (function(HTMLImageElement, string): void)=): import(\"./DataTile.js\").ImageLike|ImageObject|Promise<import(\"./DataTile.js\").ImageLike|ImageObject>} Loader\r\n * @api\r\n */\r\n\r\n/**\r\n * Loader function used for image sources. Receives extent, resolution and pixel ratio as arguments.\r\n * The function returns a promise for an  {@link import(\"./Image.js\").ImageObject image object}.\r\n *\r\n * @typedef {function(import(\"./extent.js\").Extent, number, number, (function(HTMLImageElement, string): void)=): Promise<import(\"./DataTile.js\").ImageLike|ImageObject>} ImageObjectPromiseLoader\r\n */\r\n\r\nclass ImageWrapper extends EventTarget {\r\n  /**\r\n   * @param {import(\"./extent.js\").Extent} extent Extent.\r\n   * @param {number|Array<number>|undefined} resolution Resolution. If provided as array, x and y\r\n   * resolution will be assumed.\r\n   * @param {number} pixelRatio Pixel ratio.\r\n   * @param {import(\"./ImageState.js\").default|Loader} stateOrLoader State.\r\n   */\r\n  constructor(extent, resolution, pixelRatio, stateOrLoader) {\r\n    super();\r\n\r\n    /**\r\n     * @protected\r\n     * @type {import(\"./extent.js\").Extent}\r\n     */\r\n    this.extent = extent;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.pixelRatio_ = pixelRatio;\r\n\r\n    /**\r\n     * @protected\r\n     * @type {number|Array<number>|undefined}\r\n     */\r\n    this.resolution = resolution;\r\n\r\n    /**\r\n     * @protected\r\n     * @type {import(\"./ImageState.js\").default}\r\n     */\r\n    this.state =\r\n      typeof stateOrLoader === 'function' ? ImageState.IDLE : stateOrLoader;\r\n\r\n    /**\r\n     * @private\r\n     * @type {import('./DataTile.js').ImageLike|null}\r\n     */\r\n    this.image_ = null;\r\n\r\n    /**\r\n     * @protected\r\n     * @type {Loader|null}\r\n     */\r\n    this.loader = typeof stateOrLoader === 'function' ? stateOrLoader : null;\r\n  }\r\n\r\n  /**\r\n   * @protected\r\n   */\r\n  changed() {\r\n    this.dispatchEvent(EventType.CHANGE);\r\n  }\r\n\r\n  /**\r\n   * @return {import(\"./extent.js\").Extent} Extent.\r\n   */\r\n  getExtent() {\r\n    return this.extent;\r\n  }\r\n\r\n  /**\r\n   * @return {import('./DataTile.js').ImageLike} Image.\r\n   */\r\n  getImage() {\r\n    return this.image_;\r\n  }\r\n\r\n  /**\r\n   * @return {number} PixelRatio.\r\n   */\r\n  getPixelRatio() {\r\n    return this.pixelRatio_;\r\n  }\r\n\r\n  /**\r\n   * @return {number|Array<number>} Resolution.\r\n   */\r\n  getResolution() {\r\n    return /** @type {number} */ (this.resolution);\r\n  }\r\n\r\n  /**\r\n   * @return {import(\"./ImageState.js\").default} State.\r\n   */\r\n  getState() {\r\n    return this.state;\r\n  }\r\n\r\n  /**\r\n   * Load not yet loaded URI.\r\n   */\r\n  load() {\r\n    if (this.state == ImageState.IDLE) {\r\n      if (this.loader) {\r\n        this.state = ImageState.LOADING;\r\n        this.changed();\r\n        const resolution = this.getResolution();\r\n        const requestResolution = Array.isArray(resolution)\r\n          ? resolution[0]\r\n          : resolution;\r\n        toPromise(() =>\r\n          this.loader(\r\n            this.getExtent(),\r\n            requestResolution,\r\n            this.getPixelRatio(),\r\n          ),\r\n        )\r\n          .then((image) => {\r\n            if ('image' in image) {\r\n              this.image_ = image.image;\r\n            }\r\n            if ('extent' in image) {\r\n              this.extent = image.extent;\r\n            }\r\n            if ('resolution' in image) {\r\n              this.resolution = image.resolution;\r\n            }\r\n            if ('pixelRatio' in image) {\r\n              this.pixelRatio_ = image.pixelRatio;\r\n            }\r\n            if (\r\n              image instanceof HTMLImageElement ||\r\n              (CREATE_IMAGE_BITMAP && image instanceof ImageBitmap) ||\r\n              image instanceof HTMLCanvasElement ||\r\n              image instanceof HTMLVideoElement\r\n            ) {\r\n              this.image_ = image;\r\n            }\r\n            this.state = ImageState.LOADED;\r\n          })\r\n          .catch((error) => {\r\n            this.state = ImageState.ERROR;\r\n            console.error(error); // eslint-disable-line no-console\r\n          })\r\n          .finally(() => this.changed());\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {import('./DataTile.js').ImageLike} image The image.\r\n   */\r\n  setImage(image) {\r\n    this.image_ = image;\r\n  }\r\n\r\n  /**\r\n   * @param {number|Array<number>} resolution Resolution.\r\n   */\r\n  setResolution(resolution) {\r\n    this.resolution = resolution;\r\n  }\r\n}\r\n\r\n/**\r\n * @param {import('./DataTile.js').ImageLike} image Image element.\r\n * @param {function():any} loadHandler Load callback function.\r\n * @param {function():any} errorHandler Error callback function.\r\n * @return {function():void} Callback to stop listening.\r\n */\r\nexport function listenImage(image, loadHandler, errorHandler) {\r\n  const img = /** @type {HTMLImageElement} */ (image);\r\n  let listening = true;\r\n  let decoding = false;\r\n  let loaded = false;\r\n\r\n  const listenerKeys = [\r\n    listenOnce(img, EventType.LOAD, function () {\r\n      loaded = true;\r\n      if (!decoding) {\r\n        loadHandler();\r\n      }\r\n    }),\r\n  ];\r\n\r\n  if (img.src && IMAGE_DECODE) {\r\n    decoding = true;\r\n    img\r\n      .decode()\r\n      .then(function () {\r\n        if (listening) {\r\n          loadHandler();\r\n        }\r\n      })\r\n      .catch(function (error) {\r\n        if (listening) {\r\n          if (loaded) {\r\n            loadHandler();\r\n          } else {\r\n            errorHandler();\r\n          }\r\n        }\r\n      });\r\n  } else {\r\n    listenerKeys.push(listenOnce(img, EventType.ERROR, errorHandler));\r\n  }\r\n\r\n  return function unlisten() {\r\n    listening = false;\r\n    listenerKeys.forEach(unlistenByKey);\r\n  };\r\n}\r\n\r\n/**\r\n * Loads an image.\r\n * @param {HTMLImageElement} image Image, not yet loaded.\r\n * @param {string} [src] `src` attribute of the image. Optional, not required if already present.\r\n * @return {Promise<HTMLImageElement>} Promise resolving to an `HTMLImageElement`.\r\n * @api\r\n */\r\nexport function load(image, src) {\r\n  return new Promise((resolve, reject) => {\r\n    function handleLoad() {\r\n      unlisten();\r\n      resolve(image);\r\n    }\r\n    function handleError() {\r\n      unlisten();\r\n      reject(new Error('Image load error'));\r\n    }\r\n    function unlisten() {\r\n      image.removeEventListener('load', handleLoad);\r\n      image.removeEventListener('error', handleError);\r\n    }\r\n    image.addEventListener('load', handleLoad);\r\n    image.addEventListener('error', handleError);\r\n    if (src) {\r\n      image.src = src;\r\n    }\r\n  });\r\n}\r\n\r\n/**\r\n * @param {HTMLImageElement} image Image, not yet loaded.\r\n * @param {string} [src] `src` attribute of the image. Optional, not required if already present.\r\n * @return {Promise<HTMLImageElement>} Promise resolving to an `HTMLImageElement`.\r\n */\r\nexport function decodeFallback(image, src) {\r\n  if (src) {\r\n    image.src = src;\r\n  }\r\n  return image.src && IMAGE_DECODE\r\n    ? new Promise((resolve, reject) =>\r\n        image\r\n          .decode()\r\n          .then(() => resolve(image))\r\n          .catch((e) =>\r\n            image.complete && image.width ? resolve(image) : reject(e),\r\n          ),\r\n      )\r\n    : load(image);\r\n}\r\n\r\n/**\r\n * Loads an image and decodes it to an `ImageBitmap` if `createImageBitmap()` is supported. Returns\r\n * the loaded image otherwise.\r\n * @param {HTMLImageElement} image Image, not yet loaded.\r\n * @param {string} [src] `src` attribute of the image. Optional, not required if already present.\r\n * @return {Promise<ImageBitmap|HTMLImageElement>} Promise resolving to an `ImageBitmap` or an\r\n * `HTMLImageElement` if `createImageBitmap()` is not supported.\r\n * @api\r\n */\r\nexport function decode(image, src) {\r\n  if (src) {\r\n    image.src = src;\r\n  }\r\n  return image.src && IMAGE_DECODE && CREATE_IMAGE_BITMAP\r\n    ? image\r\n        .decode()\r\n        .then(() => createImageBitmap(image))\r\n        .catch((e) => {\r\n          if (image.complete && image.width) {\r\n            return image;\r\n          }\r\n          throw e;\r\n        })\r\n    : decodeFallback(image);\r\n}\r\n\r\nexport default ImageWrapper;\r\n","/**\r\n * @module ol/style/IconImageCache\r\n */\r\nimport ImageState from '../ImageState.js';\r\nimport {asArray} from '../color.js';\r\nimport {getSharedCanvasContext2D} from '../dom.js';\r\n\r\n/**\r\n * @classdesc\r\n * Singleton class. Available through {@link module:ol/style/IconImageCache.shared}.\r\n */\r\nclass IconImageCache {\r\n  constructor() {\r\n    /**\r\n     * @type {!Object<string, import(\"./IconImage.js\").default>}\r\n     * @private\r\n     */\r\n    this.cache_ = {};\r\n\r\n    /**\r\n     * @type {!Object<string, CanvasPattern>}\r\n     * @private\r\n     */\r\n    this.patternCache_ = {};\r\n\r\n    /**\r\n     * @type {number}\r\n     * @private\r\n     */\r\n    this.cacheSize_ = 0;\r\n\r\n    /**\r\n     * @type {number}\r\n     * @private\r\n     */\r\n    this.maxCacheSize_ = 1024;\r\n  }\r\n\r\n  /**\r\n   * FIXME empty description for jsdoc\r\n   */\r\n  clear() {\r\n    this.cache_ = {};\r\n    this.patternCache_ = {};\r\n    this.cacheSize_ = 0;\r\n  }\r\n\r\n  /**\r\n   * @return {boolean} Can expire cache.\r\n   */\r\n  canExpireCache() {\r\n    return this.cacheSize_ > this.maxCacheSize_;\r\n  }\r\n\r\n  /**\r\n   * FIXME empty description for jsdoc\r\n   */\r\n  expire() {\r\n    if (this.canExpireCache()) {\r\n      let i = 0;\r\n      for (const key in this.cache_) {\r\n        const iconImage = this.cache_[key];\r\n        if ((i++ & 3) === 0 && !iconImage.hasListener()) {\r\n          delete this.cache_[key];\r\n          delete this.patternCache_[key];\r\n          --this.cacheSize_;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {string} src Src.\r\n   * @param {?string} crossOrigin Cross origin.\r\n   * @param {import(\"../color.js\").Color|string|null} color Color.\r\n   * @return {import(\"./IconImage.js\").default} Icon image.\r\n   */\r\n  get(src, crossOrigin, color) {\r\n    const key = getCacheKey(src, crossOrigin, color);\r\n    return key in this.cache_ ? this.cache_[key] : null;\r\n  }\r\n\r\n  /**\r\n   * @param {string} src Src.\r\n   * @param {?string} crossOrigin Cross origin.\r\n   * @param {import(\"../color.js\").Color|string|null} color Color.\r\n   * @return {CanvasPattern} Icon image.\r\n   */\r\n  getPattern(src, crossOrigin, color) {\r\n    const key = getCacheKey(src, crossOrigin, color);\r\n    return key in this.patternCache_ ? this.patternCache_[key] : null;\r\n  }\r\n\r\n  /**\r\n   * @param {string} src Src.\r\n   * @param {?string} crossOrigin Cross origin.\r\n   * @param {import(\"../color.js\").Color|string|null} color Color.\r\n   * @param {import(\"./IconImage.js\").default|null} iconImage Icon image.\r\n   * @param {boolean} [pattern] Also cache a `'repeat'` pattern with this `iconImage`.\r\n   */\r\n  set(src, crossOrigin, color, iconImage, pattern) {\r\n    const key = getCacheKey(src, crossOrigin, color);\r\n    const update = key in this.cache_;\r\n    this.cache_[key] = iconImage;\r\n    if (pattern) {\r\n      if (iconImage.getImageState() === ImageState.IDLE) {\r\n        iconImage.load();\r\n      }\r\n      if (iconImage.getImageState() === ImageState.LOADING) {\r\n        iconImage.ready().then(() => {\r\n          this.patternCache_[key] = getSharedCanvasContext2D().createPattern(\r\n            iconImage.getImage(1),\r\n            'repeat',\r\n          );\r\n        });\r\n      } else {\r\n        this.patternCache_[key] = getSharedCanvasContext2D().createPattern(\r\n          iconImage.getImage(1),\r\n          'repeat',\r\n        );\r\n      }\r\n    }\r\n    if (!update) {\r\n      ++this.cacheSize_;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Set the cache size of the icon cache. Default is `1024`. Change this value when\r\n   * your map uses more than 1024 different icon images and you are not caching icon\r\n   * styles on the application level.\r\n   * @param {number} maxCacheSize Cache max size.\r\n   * @api\r\n   */\r\n  setSize(maxCacheSize) {\r\n    this.maxCacheSize_ = maxCacheSize;\r\n    this.expire();\r\n  }\r\n}\r\n\r\n/**\r\n * @param {string} src Src.\r\n * @param {?string} crossOrigin Cross origin.\r\n * @param {import(\"../color.js\").Color|string|null} color Color.\r\n * @return {string} Cache key.\r\n */\r\nexport function getCacheKey(src, crossOrigin, color) {\r\n  const colorString = color ? asArray(color) : 'null';\r\n  return crossOrigin + ':' + src + ':' + colorString;\r\n}\r\n\r\nexport default IconImageCache;\r\n\r\n/**\r\n * The {@link module:ol/style/IconImageCache~IconImageCache} for\r\n * {@link module:ol/style/Icon~Icon} images.\r\n * @api\r\n */\r\nexport const shared = new IconImageCache();\r\n","/**\r\n * @module ol/render/canvas\r\n */\r\nimport BaseObject from '../Object.js';\r\nimport {getFontParameters} from '../css.js';\r\nimport {createCanvasContext2D} from '../dom.js';\r\nimport {WORKER_OFFSCREEN_CANVAS} from '../has.js';\r\nimport {clear} from '../obj.js';\r\n\r\n/**\r\n * @typedef {'Circle' | 'Image' | 'LineString' | 'Polygon' | 'Text' | 'Default'} BuilderType\r\n */\r\n\r\n/**\r\n * @typedef {Object} FillState\r\n * @property {import(\"../colorlike.js\").ColorLike} fillStyle FillStyle.\r\n */\r\n\r\n/**\r\n * @typedef Label\r\n * @property {number} width Width.\r\n * @property {number} height Height.\r\n * @property {Array<string|number>} contextInstructions ContextInstructions.\r\n */\r\n\r\n/**\r\n * @typedef {Object} FillStrokeState\r\n * @property {import(\"../colorlike.js\").ColorLike} [currentFillStyle] Current FillStyle.\r\n * @property {import(\"../colorlike.js\").ColorLike} [currentStrokeStyle] Current StrokeStyle.\r\n * @property {CanvasLineCap} [currentLineCap] Current LineCap.\r\n * @property {Array<number>} currentLineDash Current LineDash.\r\n * @property {number} [currentLineDashOffset] Current LineDashOffset.\r\n * @property {CanvasLineJoin} [currentLineJoin] Current LineJoin.\r\n * @property {number} [currentLineWidth] Current LineWidth.\r\n * @property {number} [currentMiterLimit] Current MiterLimit.\r\n * @property {number} [lastStroke] Last stroke.\r\n * @property {import(\"../colorlike.js\").ColorLike} [fillStyle] FillStyle.\r\n * @property {import(\"../colorlike.js\").ColorLike} [strokeStyle] StrokeStyle.\r\n * @property {CanvasLineCap} [lineCap] LineCap.\r\n * @property {Array<number>} lineDash LineDash.\r\n * @property {number} [lineDashOffset] LineDashOffset.\r\n * @property {CanvasLineJoin} [lineJoin] LineJoin.\r\n * @property {number} [lineWidth] LineWidth.\r\n * @property {number} [miterLimit] MiterLimit.\r\n * @property {number} [fillPatternScale] Fill pattern scale.\r\n */\r\n\r\n/**\r\n * @typedef {Object} StrokeState\r\n * @property {CanvasLineCap} lineCap LineCap.\r\n * @property {Array<number>} lineDash LineDash.\r\n * @property {number} lineDashOffset LineDashOffset.\r\n * @property {CanvasLineJoin} lineJoin LineJoin.\r\n * @property {number} lineWidth LineWidth.\r\n * @property {number} miterLimit MiterLimit.\r\n * @property {import(\"../colorlike.js\").ColorLike} strokeStyle StrokeStyle.\r\n */\r\n\r\n/**\r\n * @typedef {Object} TextState\r\n * @property {string} font Font.\r\n * @property {CanvasTextAlign} [textAlign] TextAlign.\r\n * @property {number} [repeat] Repeat.\r\n * @property {import(\"../style/Text.js\").TextJustify} [justify] Justify.\r\n * @property {CanvasTextBaseline} textBaseline TextBaseline.\r\n * @property {import(\"../style/Text.js\").TextPlacement} [placement] Placement.\r\n * @property {number} [maxAngle] MaxAngle.\r\n * @property {boolean} [overflow] Overflow.\r\n * @property {import(\"../style/Fill.js\").default} [backgroundFill] BackgroundFill.\r\n * @property {import(\"../style/Stroke.js\").default} [backgroundStroke] BackgroundStroke.\r\n * @property {import(\"../size.js\").Size} [scale] Scale.\r\n * @property {Array<number>} [padding] Padding.\r\n */\r\n\r\n/**\r\n * @typedef {Object} SerializableInstructions\r\n * @property {Array<*>} instructions The rendering instructions.\r\n * @property {Array<*>} hitDetectionInstructions The rendering hit detection instructions.\r\n * @property {Array<number>} coordinates The array of all coordinates.\r\n * @property {!Object<string, TextState>} [textStates] The text states (decluttering).\r\n * @property {!Object<string, FillState>} [fillStates] The fill states (decluttering).\r\n * @property {!Object<string, StrokeState>} [strokeStates] The stroke states (decluttering).\r\n */\r\n\r\n/**\r\n * @typedef {Object<number, import(\"./canvas/Executor.js\").ReplayImageOrLabelArgs>} DeclutterImageWithText\r\n */\r\n\r\n/**\r\n * @const\r\n * @type {string}\r\n */\r\nexport const defaultFont = '10px sans-serif';\r\n\r\n/**\r\n * @const\r\n * @type {string}\r\n */\r\nexport const defaultFillStyle = '#000';\r\n\r\n/**\r\n * @const\r\n * @type {CanvasLineCap}\r\n */\r\nexport const defaultLineCap = 'round';\r\n\r\n/**\r\n * @const\r\n * @type {Array<number>}\r\n */\r\nexport const defaultLineDash = [];\r\n\r\n/**\r\n * @const\r\n * @type {number}\r\n */\r\nexport const defaultLineDashOffset = 0;\r\n\r\n/**\r\n * @const\r\n * @type {CanvasLineJoin}\r\n */\r\nexport const defaultLineJoin = 'round';\r\n\r\n/**\r\n * @const\r\n * @type {number}\r\n */\r\nexport const defaultMiterLimit = 10;\r\n\r\n/**\r\n * @const\r\n * @type {import(\"../colorlike.js\").ColorLike}\r\n */\r\nexport const defaultStrokeStyle = '#000';\r\n\r\n/**\r\n * @const\r\n * @type {CanvasTextAlign}\r\n */\r\nexport const defaultTextAlign = 'center';\r\n\r\n/**\r\n * @const\r\n * @type {CanvasTextBaseline}\r\n */\r\nexport const defaultTextBaseline = 'middle';\r\n\r\n/**\r\n * @const\r\n * @type {Array<number>}\r\n */\r\nexport const defaultPadding = [0, 0, 0, 0];\r\n\r\n/**\r\n * @const\r\n * @type {number}\r\n */\r\nexport const defaultLineWidth = 1;\r\n\r\n/**\r\n * @type {BaseObject}\r\n */\r\nexport const checkedFonts = new BaseObject();\r\n\r\n/**\r\n * @type {CanvasRenderingContext2D}\r\n */\r\nlet measureContext = null;\r\n\r\n/**\r\n * @type {string}\r\n */\r\nlet measureFont;\r\n\r\n/**\r\n * @type {!Object<string, number>}\r\n */\r\nexport const textHeights = {};\r\n\r\n/**\r\n * Clears the label cache when a font becomes available.\r\n * @param {string} fontSpec CSS font spec.\r\n */\r\nexport const registerFont = (function () {\r\n  const retries = 100;\r\n  const size = '32px ';\r\n  const referenceFonts = ['monospace', 'serif'];\r\n  const len = referenceFonts.length;\r\n  const text = 'wmytzilWMYTZIL@#/&?$%10\\uF013';\r\n  let interval, referenceWidth;\r\n\r\n  /**\r\n   * @param {string} fontStyle Css font-style\r\n   * @param {string} fontWeight Css font-weight\r\n   * @param {*} fontFamily Css font-family\r\n   * @return {boolean} Font with style and weight is available\r\n   */\r\n  function isAvailable(fontStyle, fontWeight, fontFamily) {\r\n    let available = true;\r\n    for (let i = 0; i < len; ++i) {\r\n      const referenceFont = referenceFonts[i];\r\n      referenceWidth = measureTextWidth(\r\n        fontStyle + ' ' + fontWeight + ' ' + size + referenceFont,\r\n        text,\r\n      );\r\n      if (fontFamily != referenceFont) {\r\n        const width = measureTextWidth(\r\n          fontStyle +\r\n            ' ' +\r\n            fontWeight +\r\n            ' ' +\r\n            size +\r\n            fontFamily +\r\n            ',' +\r\n            referenceFont,\r\n          text,\r\n        );\r\n        // If width and referenceWidth are the same, then the fallback was used\r\n        // instead of the font we wanted, so the font is not available.\r\n        available = available && width != referenceWidth;\r\n      }\r\n    }\r\n    if (available) {\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  function check() {\r\n    let done = true;\r\n    const fonts = checkedFonts.getKeys();\r\n    for (let i = 0, ii = fonts.length; i < ii; ++i) {\r\n      const font = fonts[i];\r\n      if (checkedFonts.get(font) < retries) {\r\n        const [style, weight, family] = font.split('\\n');\r\n        if (isAvailable(style, weight, family)) {\r\n          clear(textHeights);\r\n          // Make sure that loaded fonts are picked up by Safari\r\n          measureContext = null;\r\n          measureFont = undefined;\r\n          checkedFonts.set(font, retries);\r\n        } else {\r\n          checkedFonts.set(font, checkedFonts.get(font) + 1, true);\r\n          done = false;\r\n        }\r\n      }\r\n    }\r\n    if (done) {\r\n      clearInterval(interval);\r\n      interval = undefined;\r\n    }\r\n  }\r\n\r\n  return function (fontSpec) {\r\n    const font = getFontParameters(fontSpec);\r\n    if (!font) {\r\n      return;\r\n    }\r\n    const families = font.families;\r\n    for (let i = 0, ii = families.length; i < ii; ++i) {\r\n      const family = families[i];\r\n      const key = font.style + '\\n' + font.weight + '\\n' + family;\r\n      if (checkedFonts.get(key) === undefined) {\r\n        checkedFonts.set(key, retries, true);\r\n        if (!isAvailable(font.style, font.weight, family)) {\r\n          checkedFonts.set(key, 0, true);\r\n          if (interval === undefined) {\r\n            interval = setInterval(check, 32);\r\n          }\r\n        }\r\n      }\r\n    }\r\n  };\r\n})();\r\n\r\n/**\r\n * @param {string} font Font to use for measuring.\r\n * @return {import(\"../size.js\").Size} Measurement.\r\n */\r\nexport const measureTextHeight = (function () {\r\n  /**\r\n   * @type {HTMLDivElement}\r\n   */\r\n  let measureElement;\r\n  return function (fontSpec) {\r\n    let height = textHeights[fontSpec];\r\n    if (height == undefined) {\r\n      if (WORKER_OFFSCREEN_CANVAS) {\r\n        const font = getFontParameters(fontSpec);\r\n        const metrics = measureText(fontSpec, 'Žg');\r\n        const lineHeight = isNaN(Number(font.lineHeight))\r\n          ? 1.2\r\n          : Number(font.lineHeight);\r\n        height =\r\n          lineHeight *\r\n          (metrics.actualBoundingBoxAscent + metrics.actualBoundingBoxDescent);\r\n      } else {\r\n        if (!measureElement) {\r\n          measureElement = document.createElement('div');\r\n          measureElement.innerHTML = 'M';\r\n          measureElement.style.minHeight = '0';\r\n          measureElement.style.maxHeight = 'none';\r\n          measureElement.style.height = 'auto';\r\n          measureElement.style.padding = '0';\r\n          measureElement.style.border = 'none';\r\n          measureElement.style.position = 'absolute';\r\n          measureElement.style.display = 'block';\r\n          measureElement.style.left = '-99999px';\r\n        }\r\n        measureElement.style.font = fontSpec;\r\n        document.body.appendChild(measureElement);\r\n        height = measureElement.offsetHeight;\r\n        document.body.removeChild(measureElement);\r\n      }\r\n      textHeights[fontSpec] = height;\r\n    }\r\n    return height;\r\n  };\r\n})();\r\n\r\n/**\r\n * @param {string} font Font.\r\n * @param {string} text Text.\r\n * @return {TextMetrics} Text metrics.\r\n */\r\nfunction measureText(font, text) {\r\n  if (!measureContext) {\r\n    measureContext = createCanvasContext2D(1, 1);\r\n  }\r\n  if (font != measureFont) {\r\n    measureContext.font = font;\r\n    measureFont = measureContext.font;\r\n  }\r\n  return measureContext.measureText(text);\r\n}\r\n\r\n/**\r\n * @param {string} font Font.\r\n * @param {string} text Text.\r\n * @return {number} Width.\r\n */\r\nexport function measureTextWidth(font, text) {\r\n  return measureText(font, text).width;\r\n}\r\n\r\n/**\r\n * Measure text width using a cache.\r\n * @param {string} font The font.\r\n * @param {string} text The text to measure.\r\n * @param {Object<string, number>} cache A lookup of cached widths by text.\r\n * @return {number} The text width.\r\n */\r\nexport function measureAndCacheTextWidth(font, text, cache) {\r\n  if (text in cache) {\r\n    return cache[text];\r\n  }\r\n  const width = text\r\n    .split('\\n')\r\n    .reduce((prev, curr) => Math.max(prev, measureTextWidth(font, curr)), 0);\r\n  cache[text] = width;\r\n  return width;\r\n}\r\n\r\n/**\r\n * @param {TextState} baseStyle Base style.\r\n * @param {Array<string>} chunks Text chunks to measure.\r\n * @return {{width: number, height: number, widths: Array<number>, heights: Array<number>, lineWidths: Array<number>}}} Text metrics.\r\n */\r\nexport function getTextDimensions(baseStyle, chunks) {\r\n  const widths = [];\r\n  const heights = [];\r\n  const lineWidths = [];\r\n  let width = 0;\r\n  let lineWidth = 0;\r\n  let height = 0;\r\n  let lineHeight = 0;\r\n  for (let i = 0, ii = chunks.length; i <= ii; i += 2) {\r\n    const text = chunks[i];\r\n    if (text === '\\n' || i === ii) {\r\n      width = Math.max(width, lineWidth);\r\n      lineWidths.push(lineWidth);\r\n      lineWidth = 0;\r\n      height += lineHeight;\r\n      lineHeight = 0;\r\n      continue;\r\n    }\r\n    const font = chunks[i + 1] || baseStyle.font;\r\n    const currentWidth = measureTextWidth(font, text);\r\n    widths.push(currentWidth);\r\n    lineWidth += currentWidth;\r\n    const currentHeight = measureTextHeight(font);\r\n    heights.push(currentHeight);\r\n    lineHeight = Math.max(lineHeight, currentHeight);\r\n  }\r\n  return {width, height, widths, heights, lineWidths};\r\n}\r\n\r\n/**\r\n * @param {CanvasRenderingContext2D} context Context.\r\n * @param {number} rotation Rotation.\r\n * @param {number} offsetX X offset.\r\n * @param {number} offsetY Y offset.\r\n */\r\nexport function rotateAtOffset(context, rotation, offsetX, offsetY) {\r\n  if (rotation !== 0) {\r\n    context.translate(offsetX, offsetY);\r\n    context.rotate(rotation);\r\n    context.translate(-offsetX, -offsetY);\r\n  }\r\n}\r\n\r\n/**\r\n * @param {CanvasRenderingContext2D|import(\"../render/canvas/ZIndexContext.js\").ZIndexContextProxy} context Context.\r\n * @param {import(\"../transform.js\").Transform|null} transform Transform.\r\n * @param {number} opacity Opacity.\r\n * @param {Label|HTMLCanvasElement|HTMLImageElement|HTMLVideoElement} labelOrImage Label.\r\n * @param {number} originX Origin X.\r\n * @param {number} originY Origin Y.\r\n * @param {number} w Width.\r\n * @param {number} h Height.\r\n * @param {number} x X.\r\n * @param {number} y Y.\r\n * @param {import(\"../size.js\").Size} scale Scale.\r\n */\r\nexport function drawImageOrLabel(\r\n  context,\r\n  transform,\r\n  opacity,\r\n  labelOrImage,\r\n  originX,\r\n  originY,\r\n  w,\r\n  h,\r\n  x,\r\n  y,\r\n  scale,\r\n) {\r\n  context.save();\r\n\r\n  if (opacity !== 1) {\r\n    if (context.globalAlpha === undefined) {\r\n      context.globalAlpha = (context) => (context.globalAlpha *= opacity);\r\n    } else {\r\n      context.globalAlpha *= opacity;\r\n    }\r\n  }\r\n  if (transform) {\r\n    context.transform.apply(context, transform);\r\n  }\r\n\r\n  if (/** @type {*} */ (labelOrImage).contextInstructions) {\r\n    // label\r\n    context.translate(x, y);\r\n    context.scale(scale[0], scale[1]);\r\n    executeLabelInstructions(/** @type {Label} */ (labelOrImage), context);\r\n  } else if (scale[0] < 0 || scale[1] < 0) {\r\n    // flipped image\r\n    context.translate(x, y);\r\n    context.scale(scale[0], scale[1]);\r\n    context.drawImage(\r\n      /** @type {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement} */ (\r\n        labelOrImage\r\n      ),\r\n      originX,\r\n      originY,\r\n      w,\r\n      h,\r\n      0,\r\n      0,\r\n      w,\r\n      h,\r\n    );\r\n  } else {\r\n    // if image not flipped translate and scale can be avoided\r\n    context.drawImage(\r\n      /** @type {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement} */ (\r\n        labelOrImage\r\n      ),\r\n      originX,\r\n      originY,\r\n      w,\r\n      h,\r\n      x,\r\n      y,\r\n      w * scale[0],\r\n      h * scale[1],\r\n    );\r\n  }\r\n\r\n  context.restore();\r\n}\r\n\r\n/**\r\n * @param {Label} label Label.\r\n * @param {CanvasRenderingContext2D} context Context.\r\n */\r\nfunction executeLabelInstructions(label, context) {\r\n  const contextInstructions = label.contextInstructions;\r\n  for (let i = 0, ii = contextInstructions.length; i < ii; i += 2) {\r\n    if (Array.isArray(contextInstructions[i + 1])) {\r\n      context[contextInstructions[i]].apply(\r\n        context,\r\n        contextInstructions[i + 1],\r\n      );\r\n    } else {\r\n      context[contextInstructions[i]] = contextInstructions[i + 1];\r\n    }\r\n  }\r\n}\r\n","/**\r\n * @module ol/style/Image\r\n */\r\nimport {toSize} from '../size.js';\r\nimport {abstract} from '../util.js';\r\n\r\n/**\r\n * @typedef {Object} Options\r\n * @property {number} opacity Opacity.\r\n * @property {boolean} rotateWithView If the image should get rotated with the view.\r\n * @property {number} rotation Rotation.\r\n * @property {number|import(\"../size.js\").Size} scale Scale.\r\n * @property {Array<number>} displacement Displacement.\r\n * @property {import('../style/Style.js').DeclutterMode} declutterMode Declutter mode: `declutter`, `obstacle`, `none`.\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * A base class used for creating subclasses and not instantiated in\r\n * apps. Base class for {@link module:ol/style/Icon~Icon}, {@link module:ol/style/Circle~CircleStyle} and\r\n * {@link module:ol/style/RegularShape~RegularShape}.\r\n * @abstract\r\n * @api\r\n */\r\nclass ImageStyle {\r\n  /**\r\n   * @param {Options} options Options.\r\n   */\r\n  constructor(options) {\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.opacity_ = options.opacity;\r\n\r\n    /**\r\n     * @private\r\n     * @type {boolean}\r\n     */\r\n    this.rotateWithView_ = options.rotateWithView;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.rotation_ = options.rotation;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number|import(\"../size.js\").Size}\r\n     */\r\n    this.scale_ = options.scale;\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"../size.js\").Size}\r\n     */\r\n    this.scaleArray_ = toSize(options.scale);\r\n\r\n    /**\r\n     * @private\r\n     * @type {Array<number>}\r\n     */\r\n    this.displacement_ = options.displacement;\r\n\r\n    /**\r\n     * @private\r\n     * @type {import('../style/Style.js').DeclutterMode}\r\n     */\r\n    this.declutterMode_ = options.declutterMode;\r\n  }\r\n\r\n  /**\r\n   * Clones the style.\r\n   * @return {ImageStyle} The cloned style.\r\n   * @api\r\n   */\r\n  clone() {\r\n    const scale = this.getScale();\r\n    return new ImageStyle({\r\n      opacity: this.getOpacity(),\r\n      scale: Array.isArray(scale) ? scale.slice() : scale,\r\n      rotation: this.getRotation(),\r\n      rotateWithView: this.getRotateWithView(),\r\n      displacement: this.getDisplacement().slice(),\r\n      declutterMode: this.getDeclutterMode(),\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Get the symbolizer opacity.\r\n   * @return {number} Opacity.\r\n   * @api\r\n   */\r\n  getOpacity() {\r\n    return this.opacity_;\r\n  }\r\n\r\n  /**\r\n   * Determine whether the symbolizer rotates with the map.\r\n   * @return {boolean} Rotate with map.\r\n   * @api\r\n   */\r\n  getRotateWithView() {\r\n    return this.rotateWithView_;\r\n  }\r\n\r\n  /**\r\n   * Get the symoblizer rotation.\r\n   * @return {number} Rotation.\r\n   * @api\r\n   */\r\n  getRotation() {\r\n    return this.rotation_;\r\n  }\r\n\r\n  /**\r\n   * Get the symbolizer scale.\r\n   * @return {number|import(\"../size.js\").Size} Scale.\r\n   * @api\r\n   */\r\n  getScale() {\r\n    return this.scale_;\r\n  }\r\n\r\n  /**\r\n   * Get the symbolizer scale array.\r\n   * @return {import(\"../size.js\").Size} Scale array.\r\n   */\r\n  getScaleArray() {\r\n    return this.scaleArray_;\r\n  }\r\n\r\n  /**\r\n   * Get the displacement of the shape\r\n   * @return {Array<number>} Shape's center displacement\r\n   * @api\r\n   */\r\n  getDisplacement() {\r\n    return this.displacement_;\r\n  }\r\n\r\n  /**\r\n   * Get the declutter mode of the shape\r\n   * @return {import(\"./Style.js\").DeclutterMode} Shape's declutter mode\r\n   * @api\r\n   */\r\n  getDeclutterMode() {\r\n    return this.declutterMode_;\r\n  }\r\n\r\n  /**\r\n   * Get the anchor point in pixels. The anchor determines the center point for the\r\n   * symbolizer.\r\n   * @abstract\r\n   * @return {Array<number>} Anchor.\r\n   */\r\n  getAnchor() {\r\n    return abstract();\r\n  }\r\n\r\n  /**\r\n   * Get the image element for the symbolizer.\r\n   * @abstract\r\n   * @param {number} pixelRatio Pixel ratio.\r\n   * @return {import('../DataTile.js').ImageLike} Image element.\r\n   */\r\n  getImage(pixelRatio) {\r\n    return abstract();\r\n  }\r\n\r\n  /**\r\n   * @abstract\r\n   * @return {import('../DataTile.js').ImageLike} Image element.\r\n   */\r\n  getHitDetectionImage() {\r\n    return abstract();\r\n  }\r\n\r\n  /**\r\n   * Get the image pixel ratio.\r\n   * @param {number} pixelRatio Pixel ratio.\r\n   * @return {number} Pixel ratio.\r\n   */\r\n  getPixelRatio(pixelRatio) {\r\n    return 1;\r\n  }\r\n\r\n  /**\r\n   * @abstract\r\n   * @return {import(\"../ImageState.js\").default} Image state.\r\n   */\r\n  getImageState() {\r\n    return abstract();\r\n  }\r\n\r\n  /**\r\n   * @abstract\r\n   * @return {import(\"../size.js\").Size} Image size.\r\n   */\r\n  getImageSize() {\r\n    return abstract();\r\n  }\r\n\r\n  /**\r\n   * Get the origin of the symbolizer.\r\n   * @abstract\r\n   * @return {Array<number>} Origin.\r\n   */\r\n  getOrigin() {\r\n    return abstract();\r\n  }\r\n\r\n  /**\r\n   * Get the size of the symbolizer (in pixels).\r\n   * @abstract\r\n   * @return {import(\"../size.js\").Size} Size.\r\n   */\r\n  getSize() {\r\n    return abstract();\r\n  }\r\n\r\n  /**\r\n   * Set the displacement.\r\n   *\r\n   * @param {Array<number>} displacement Displacement.\r\n   * @api\r\n   */\r\n  setDisplacement(displacement) {\r\n    this.displacement_ = displacement;\r\n  }\r\n\r\n  /**\r\n   * Set the opacity.\r\n   *\r\n   * @param {number} opacity Opacity.\r\n   * @api\r\n   */\r\n  setOpacity(opacity) {\r\n    this.opacity_ = opacity;\r\n  }\r\n\r\n  /**\r\n   * Set whether to rotate the style with the view.\r\n   *\r\n   * @param {boolean} rotateWithView Rotate with map.\r\n   * @api\r\n   */\r\n  setRotateWithView(rotateWithView) {\r\n    this.rotateWithView_ = rotateWithView;\r\n  }\r\n\r\n  /**\r\n   * Set the rotation.\r\n   *\r\n   * @param {number} rotation Rotation.\r\n   * @api\r\n   */\r\n  setRotation(rotation) {\r\n    this.rotation_ = rotation;\r\n  }\r\n\r\n  /**\r\n   * Set the scale.\r\n   *\r\n   * @param {number|import(\"../size.js\").Size} scale Scale.\r\n   * @api\r\n   */\r\n  setScale(scale) {\r\n    this.scale_ = scale;\r\n    this.scaleArray_ = toSize(scale);\r\n  }\r\n\r\n  /**\r\n   * @abstract\r\n   * @param {function(import(\"../events/Event.js\").default): void} listener Listener function.\r\n   */\r\n  listenImageChange(listener) {\r\n    abstract();\r\n  }\r\n\r\n  /**\r\n   * Load not yet loaded URI.\r\n   * @abstract\r\n   */\r\n  load() {\r\n    abstract();\r\n  }\r\n\r\n  /**\r\n   * @abstract\r\n   * @param {function(import(\"../events/Event.js\").default): void} listener Listener function.\r\n   */\r\n  unlistenImageChange(listener) {\r\n    abstract();\r\n  }\r\n\r\n  /**\r\n   * @return {Promise<void>} `false` or Promise that resolves when the style is ready to use.\r\n   */\r\n  ready() {\r\n    return Promise.resolve();\r\n  }\r\n}\r\n\r\nexport default ImageStyle;\r\n","/**\r\n * @module ol/style/Fill\r\n */\r\n\r\nimport ImageState from '../ImageState.js';\r\nimport {asArray} from '../color.js';\r\nimport {getUid} from '../util.js';\r\nimport {get as getIconImage} from './IconImage.js';\r\n\r\n/**\r\n * @typedef {Object} Options\r\n * @property {import(\"../color.js\").Color|import(\"../colorlike.js\").ColorLike|import('../colorlike.js').PatternDescriptor|null} [color=null] A color,\r\n * gradient or pattern.\r\n * See {@link module:ol/color~Color} and {@link module:ol/colorlike~ColorLike} for possible formats. For polygon fills (not for {@link import(\"./RegularShape.js\").default} fills),\r\n * a pattern can also be provided as {@link module:ol/colorlike~PatternDescriptor}.\r\n * Default null; if null, the Canvas/renderer default black will be used.\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * Set fill style for vector features.\r\n * @api\r\n */\r\nclass Fill {\r\n  /**\r\n   * @param {Options} [options] Options.\r\n   */\r\n  constructor(options) {\r\n    options = options || {};\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"./IconImage.js\").default|null}\r\n     */\r\n    this.patternImage_ = null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"../color.js\").Color|import(\"../colorlike.js\").ColorLike|import('../colorlike.js').PatternDescriptor|null}\r\n     */\r\n    this.color_ = null;\r\n    if (options.color !== undefined) {\r\n      this.setColor(options.color);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Clones the style. The color is not cloned if it is a {@link module:ol/colorlike~ColorLike}.\r\n   * @return {Fill} The cloned style.\r\n   * @api\r\n   */\r\n  clone() {\r\n    const color = this.getColor();\r\n    return new Fill({\r\n      color: Array.isArray(color) ? color.slice() : color || undefined,\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Get the fill color.\r\n   * @return {import(\"../color.js\").Color|import(\"../colorlike.js\").ColorLike|import('../colorlike.js').PatternDescriptor|null} Color.\r\n   * @api\r\n   */\r\n  getColor() {\r\n    return this.color_;\r\n  }\r\n\r\n  /**\r\n   * Set the color.\r\n   *\r\n   * @param {import(\"../color.js\").Color|import(\"../colorlike.js\").ColorLike|import('../colorlike.js').PatternDescriptor|null} color Color.\r\n   * @api\r\n   */\r\n  setColor(color) {\r\n    if (color !== null && typeof color === 'object' && 'src' in color) {\r\n      const patternImage = getIconImage(\r\n        null,\r\n        color.src,\r\n        'anonymous',\r\n        undefined,\r\n        color.offset ? null : color.color ? color.color : null,\r\n        !(color.offset && color.size),\r\n      );\r\n      patternImage.ready().then(() => {\r\n        this.patternImage_ = null;\r\n      });\r\n      if (patternImage.getImageState() === ImageState.IDLE) {\r\n        patternImage.load();\r\n      }\r\n      if (patternImage.getImageState() === ImageState.LOADING) {\r\n        this.patternImage_ = patternImage;\r\n      }\r\n    }\r\n    this.color_ = color;\r\n  }\r\n\r\n  /**\r\n   * @return {string} Key of the fill for cache lookup.\r\n   */\r\n  getKey() {\r\n    const fill = this.getColor();\r\n    if (!fill) {\r\n      return '';\r\n    }\r\n    return fill instanceof CanvasPattern || fill instanceof CanvasGradient\r\n      ? getUid(fill)\r\n      : typeof fill === 'object' && 'src' in fill\r\n        ? fill.src + ':' + fill.offset\r\n        : asArray(fill).toString();\r\n  }\r\n\r\n  /**\r\n   * @return {boolean} The fill style is loading an image pattern.\r\n   */\r\n  loading() {\r\n    return !!this.patternImage_;\r\n  }\r\n\r\n  /**\r\n   * @return {Promise<void>} `false` or a promise that resolves when the style is ready to use.\r\n   */\r\n  ready() {\r\n    return this.patternImage_ ? this.patternImage_.ready() : Promise.resolve();\r\n  }\r\n}\r\n\r\nexport default Fill;\r\n","/**\r\n * @module ol/style/Icon\r\n */\r\nimport ImageState from '../ImageState.js';\r\nimport {assert} from '../asserts.js';\r\nimport {asArray} from '../color.js';\r\nimport EventType from '../events/EventType.js';\r\nimport {getUid} from '../util.js';\r\nimport {get as getIconImage} from './IconImage.js';\r\nimport ImageStyle from './Image.js';\r\n\r\n/**\r\n * @typedef {'fraction' | 'pixels'} IconAnchorUnits\r\n * Anchor unit can be either a fraction of the icon size or in pixels.\r\n */\r\n\r\n/**\r\n * @typedef {'bottom-left' | 'bottom-right' | 'top-left' | 'top-right'} IconOrigin\r\n * Icon origin. One of 'bottom-left', 'bottom-right', 'top-left', 'top-right'.\r\n */\r\n\r\n/**\r\n * @typedef {Object} Options\r\n * @property {Array<number>} [anchor=[0.5, 0.5]] Anchor. Default value is the icon center.\r\n * @property {IconOrigin} [anchorOrigin='top-left'] Origin of the anchor: `bottom-left`, `bottom-right`,\r\n * `top-left` or `top-right`.\r\n * @property {IconAnchorUnits} [anchorXUnits='fraction'] Units in which the anchor x value is\r\n * specified. A value of `'fraction'` indicates the x value is a fraction of the icon. A value of `'pixels'` indicates\r\n * the x value in pixels.\r\n * @property {IconAnchorUnits} [anchorYUnits='fraction'] Units in which the anchor y value is\r\n * specified. A value of `'fraction'` indicates the y value is a fraction of the icon. A value of `'pixels'` indicates\r\n * the y value in pixels.\r\n * @property {import(\"../color.js\").Color|string} [color] Color to tint the icon. If not specified,\r\n * the icon will be left as is.\r\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images. Note that you must provide a\r\n * `crossOrigin` value if you want to access pixel data with the Canvas renderer.\r\n * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\r\n * @property {HTMLImageElement|HTMLCanvasElement|ImageBitmap} [img] Image object for the icon.\r\n * @property {Array<number>} [displacement=[0, 0]] Displacement of the icon in pixels.\r\n * Positive values will shift the icon right and up.\r\n * @property {number} [opacity=1] Opacity of the icon.\r\n * @property {number} [width] The width of the icon in pixels. This can't be used together with `scale`.\r\n * @property {number} [height] The height of the icon in pixels. This can't be used together with `scale`.\r\n * @property {number|import(\"../size.js\").Size} [scale=1] Scale.\r\n * @property {boolean} [rotateWithView=false] Whether to rotate the icon with the view.\r\n * @property {number} [rotation=0] Rotation in radians (positive rotation clockwise).\r\n * @property {Array<number>} [offset=[0, 0]] Offset which, together with `size` and `offsetOrigin`, defines the\r\n * sub-rectangle to use from the original (sprite) image.\r\n * @property {IconOrigin} [offsetOrigin='top-left'] Origin of the offset: `bottom-left`, `bottom-right`,\r\n * `top-left` or `top-right`.\r\n * @property {import(\"../size.js\").Size} [size] Icon size in pixels. Used together with `offset` to define the\r\n * sub-rectangle to use from the original (sprite) image.\r\n * @property {string} [src] Image source URI.\r\n * @property {import(\"./Style.js\").DeclutterMode} [declutterMode] Declutter mode.\r\n */\r\n\r\n/**\r\n * @param {number} width The width.\r\n * @param {number} height The height.\r\n * @param {number|undefined} wantedWidth The wanted width.\r\n * @param {number|undefined} wantedHeight The wanted height.\r\n * @return {number|Array<number>} The scale.\r\n */\r\nfunction calculateScale(width, height, wantedWidth, wantedHeight) {\r\n  if (wantedWidth !== undefined && wantedHeight !== undefined) {\r\n    return [wantedWidth / width, wantedHeight / height];\r\n  }\r\n  if (wantedWidth !== undefined) {\r\n    return wantedWidth / width;\r\n  }\r\n  if (wantedHeight !== undefined) {\r\n    return wantedHeight / height;\r\n  }\r\n  return 1;\r\n}\r\n\r\n/**\r\n * @classdesc\r\n * Set icon style for vector features.\r\n * @api\r\n */\r\nclass Icon extends ImageStyle {\r\n  /**\r\n   * @param {Options} [options] Options.\r\n   */\r\n  constructor(options) {\r\n    options = options || {};\r\n\r\n    /**\r\n     * @type {number}\r\n     */\r\n    const opacity = options.opacity !== undefined ? options.opacity : 1;\r\n\r\n    /**\r\n     * @type {number}\r\n     */\r\n    const rotation = options.rotation !== undefined ? options.rotation : 0;\r\n\r\n    /**\r\n     * @type {number|import(\"../size.js\").Size}\r\n     */\r\n    const scale = options.scale !== undefined ? options.scale : 1;\r\n\r\n    /**\r\n     * @type {boolean}\r\n     */\r\n    const rotateWithView =\r\n      options.rotateWithView !== undefined ? options.rotateWithView : false;\r\n\r\n    super({\r\n      opacity: opacity,\r\n      rotation: rotation,\r\n      scale: scale,\r\n      displacement:\r\n        options.displacement !== undefined ? options.displacement : [0, 0],\r\n      rotateWithView: rotateWithView,\r\n      declutterMode: options.declutterMode,\r\n    });\r\n\r\n    /**\r\n     * @private\r\n     * @type {Array<number>}\r\n     */\r\n    this.anchor_ = options.anchor !== undefined ? options.anchor : [0.5, 0.5];\r\n\r\n    /**\r\n     * @private\r\n     * @type {Array<number>}\r\n     */\r\n    this.normalizedAnchor_ = null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {IconOrigin}\r\n     */\r\n    this.anchorOrigin_ =\r\n      options.anchorOrigin !== undefined ? options.anchorOrigin : 'top-left';\r\n\r\n    /**\r\n     * @private\r\n     * @type {IconAnchorUnits}\r\n     */\r\n    this.anchorXUnits_ =\r\n      options.anchorXUnits !== undefined ? options.anchorXUnits : 'fraction';\r\n\r\n    /**\r\n     * @private\r\n     * @type {IconAnchorUnits}\r\n     */\r\n    this.anchorYUnits_ =\r\n      options.anchorYUnits !== undefined ? options.anchorYUnits : 'fraction';\r\n\r\n    /**\r\n     * @private\r\n     * @type {?string}\r\n     */\r\n    this.crossOrigin_ =\r\n      options.crossOrigin !== undefined ? options.crossOrigin : null;\r\n\r\n    const image = options.img !== undefined ? options.img : null;\r\n\r\n    let cacheKey = options.src;\r\n\r\n    assert(\r\n      !(cacheKey !== undefined && image),\r\n      '`image` and `src` cannot be provided at the same time',\r\n    );\r\n\r\n    if ((cacheKey === undefined || cacheKey.length === 0) && image) {\r\n      cacheKey = /** @type {HTMLImageElement} */ (image).src || getUid(image);\r\n    }\r\n    assert(\r\n      cacheKey !== undefined && cacheKey.length > 0,\r\n      'A defined and non-empty `src` or `image` must be provided',\r\n    );\r\n\r\n    assert(\r\n      !(\r\n        (options.width !== undefined || options.height !== undefined) &&\r\n        options.scale !== undefined\r\n      ),\r\n      '`width` or `height` cannot be provided together with `scale`',\r\n    );\r\n\r\n    let imageState;\r\n    if (options.src !== undefined) {\r\n      imageState = ImageState.IDLE;\r\n    } else if (image !== undefined) {\r\n      if ('complete' in image) {\r\n        if (image.complete) {\r\n          imageState = image.src ? ImageState.LOADED : ImageState.IDLE;\r\n        } else {\r\n          imageState = ImageState.LOADING;\r\n        }\r\n      } else {\r\n        imageState = ImageState.LOADED;\r\n      }\r\n    }\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"../color.js\").Color}\r\n     */\r\n    this.color_ = options.color !== undefined ? asArray(options.color) : null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"./IconImage.js\").default}\r\n     */\r\n    this.iconImage_ = getIconImage(\r\n      image,\r\n      /** @type {string} */ (cacheKey),\r\n      this.crossOrigin_,\r\n      imageState,\r\n      this.color_,\r\n    );\r\n\r\n    /**\r\n     * @private\r\n     * @type {Array<number>}\r\n     */\r\n    this.offset_ = options.offset !== undefined ? options.offset : [0, 0];\r\n    /**\r\n     * @private\r\n     * @type {IconOrigin}\r\n     */\r\n    this.offsetOrigin_ =\r\n      options.offsetOrigin !== undefined ? options.offsetOrigin : 'top-left';\r\n\r\n    /**\r\n     * @private\r\n     * @type {Array<number>}\r\n     */\r\n    this.origin_ = null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"../size.js\").Size}\r\n     */\r\n    this.size_ = options.size !== undefined ? options.size : null;\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    this.initialOptions_;\r\n\r\n    /**\r\n     * Calculate the scale if width or height were given.\r\n     */\r\n    if (options.width !== undefined || options.height !== undefined) {\r\n      let width, height;\r\n      if (options.size) {\r\n        [width, height] = options.size;\r\n      } else {\r\n        const image = this.getImage(1);\r\n        if (image.width && image.height) {\r\n          width = image.width;\r\n          height = image.height;\r\n        } else if (image instanceof HTMLImageElement) {\r\n          this.initialOptions_ = options;\r\n          const onload = () => {\r\n            this.unlistenImageChange(onload);\r\n            if (!this.initialOptions_) {\r\n              return;\r\n            }\r\n            const imageSize = this.iconImage_.getSize();\r\n            this.setScale(\r\n              calculateScale(\r\n                imageSize[0],\r\n                imageSize[1],\r\n                options.width,\r\n                options.height,\r\n              ),\r\n            );\r\n          };\r\n          this.listenImageChange(onload);\r\n          return;\r\n        }\r\n      }\r\n      if (width !== undefined) {\r\n        this.setScale(\r\n          calculateScale(width, height, options.width, options.height),\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Clones the style. The underlying Image/HTMLCanvasElement is not cloned.\r\n   * @return {Icon} The cloned style.\r\n   * @api\r\n   * @override\r\n   */\r\n  clone() {\r\n    let scale, width, height;\r\n    if (this.initialOptions_) {\r\n      width = this.initialOptions_.width;\r\n      height = this.initialOptions_.height;\r\n    } else {\r\n      scale = this.getScale();\r\n      scale = Array.isArray(scale) ? scale.slice() : scale;\r\n    }\r\n    return new Icon({\r\n      anchor: this.anchor_.slice(),\r\n      anchorOrigin: this.anchorOrigin_,\r\n      anchorXUnits: this.anchorXUnits_,\r\n      anchorYUnits: this.anchorYUnits_,\r\n      color:\r\n        this.color_ && this.color_.slice\r\n          ? this.color_.slice()\r\n          : this.color_ || undefined,\r\n      crossOrigin: this.crossOrigin_,\r\n      offset: this.offset_.slice(),\r\n      offsetOrigin: this.offsetOrigin_,\r\n      opacity: this.getOpacity(),\r\n      rotateWithView: this.getRotateWithView(),\r\n      rotation: this.getRotation(),\r\n      scale,\r\n      width,\r\n      height,\r\n      size: this.size_ !== null ? this.size_.slice() : undefined,\r\n      src: this.getSrc(),\r\n      displacement: this.getDisplacement().slice(),\r\n      declutterMode: this.getDeclutterMode(),\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Get the anchor point in pixels. The anchor determines the center point for the\r\n   * symbolizer.\r\n   * @return {Array<number>} Anchor.\r\n   * @api\r\n   * @override\r\n   */\r\n  getAnchor() {\r\n    let anchor = this.normalizedAnchor_;\r\n    if (!anchor) {\r\n      anchor = this.anchor_;\r\n      const size = this.getSize();\r\n      if (\r\n        this.anchorXUnits_ == 'fraction' ||\r\n        this.anchorYUnits_ == 'fraction'\r\n      ) {\r\n        if (!size) {\r\n          return null;\r\n        }\r\n        anchor = this.anchor_.slice();\r\n        if (this.anchorXUnits_ == 'fraction') {\r\n          anchor[0] *= size[0];\r\n        }\r\n        if (this.anchorYUnits_ == 'fraction') {\r\n          anchor[1] *= size[1];\r\n        }\r\n      }\r\n\r\n      if (this.anchorOrigin_ != 'top-left') {\r\n        if (!size) {\r\n          return null;\r\n        }\r\n        if (anchor === this.anchor_) {\r\n          anchor = this.anchor_.slice();\r\n        }\r\n        if (\r\n          this.anchorOrigin_ == 'top-right' ||\r\n          this.anchorOrigin_ == 'bottom-right'\r\n        ) {\r\n          anchor[0] = -anchor[0] + size[0];\r\n        }\r\n        if (\r\n          this.anchorOrigin_ == 'bottom-left' ||\r\n          this.anchorOrigin_ == 'bottom-right'\r\n        ) {\r\n          anchor[1] = -anchor[1] + size[1];\r\n        }\r\n      }\r\n      this.normalizedAnchor_ = anchor;\r\n    }\r\n    const displacement = this.getDisplacement();\r\n    const scale = this.getScaleArray();\r\n    // anchor is scaled by renderer but displacement should not be scaled\r\n    // so divide by scale here\r\n    return [\r\n      anchor[0] - displacement[0] / scale[0],\r\n      anchor[1] + displacement[1] / scale[1],\r\n    ];\r\n  }\r\n\r\n  /**\r\n   * Set the anchor point. The anchor determines the center point for the\r\n   * symbolizer.\r\n   *\r\n   * @param {Array<number>} anchor Anchor.\r\n   * @api\r\n   */\r\n  setAnchor(anchor) {\r\n    this.anchor_ = anchor;\r\n    this.normalizedAnchor_ = null;\r\n  }\r\n\r\n  /**\r\n   * Get the icon color.\r\n   * @return {import(\"../color.js\").Color} Color.\r\n   * @api\r\n   */\r\n  getColor() {\r\n    return this.color_;\r\n  }\r\n\r\n  /**\r\n   * Get the image icon.\r\n   * @param {number} pixelRatio Pixel ratio.\r\n   * @return {HTMLImageElement|HTMLCanvasElement|ImageBitmap} Image or Canvas element. If the Icon\r\n   * style was configured with `src` or with a not let loaded `img`, an `ImageBitmap` will be returned.\r\n   * @api\r\n   * @override\r\n   */\r\n  getImage(pixelRatio) {\r\n    return this.iconImage_.getImage(pixelRatio);\r\n  }\r\n\r\n  /**\r\n   * Get the pixel ratio.\r\n   * @param {number} pixelRatio Pixel ratio.\r\n   * @return {number} The pixel ratio of the image.\r\n   * @api\r\n   * @override\r\n   */\r\n  getPixelRatio(pixelRatio) {\r\n    return this.iconImage_.getPixelRatio(pixelRatio);\r\n  }\r\n\r\n  /**\r\n   * @return {import(\"../size.js\").Size} Image size.\r\n   * @override\r\n   */\r\n  getImageSize() {\r\n    return this.iconImage_.getSize();\r\n  }\r\n\r\n  /**\r\n   * @return {import(\"../ImageState.js\").default} Image state.\r\n   * @override\r\n   */\r\n  getImageState() {\r\n    return this.iconImage_.getImageState();\r\n  }\r\n\r\n  /**\r\n   * @return {HTMLImageElement|HTMLCanvasElement|ImageBitmap} Image element.\r\n   * @override\r\n   */\r\n  getHitDetectionImage() {\r\n    return this.iconImage_.getHitDetectionImage();\r\n  }\r\n\r\n  /**\r\n   * Get the origin of the symbolizer.\r\n   * @return {Array<number>} Origin.\r\n   * @api\r\n   * @override\r\n   */\r\n  getOrigin() {\r\n    if (this.origin_) {\r\n      return this.origin_;\r\n    }\r\n    let offset = this.offset_;\r\n\r\n    if (this.offsetOrigin_ != 'top-left') {\r\n      const size = this.getSize();\r\n      const iconImageSize = this.iconImage_.getSize();\r\n      if (!size || !iconImageSize) {\r\n        return null;\r\n      }\r\n      offset = offset.slice();\r\n      if (\r\n        this.offsetOrigin_ == 'top-right' ||\r\n        this.offsetOrigin_ == 'bottom-right'\r\n      ) {\r\n        offset[0] = iconImageSize[0] - size[0] - offset[0];\r\n      }\r\n      if (\r\n        this.offsetOrigin_ == 'bottom-left' ||\r\n        this.offsetOrigin_ == 'bottom-right'\r\n      ) {\r\n        offset[1] = iconImageSize[1] - size[1] - offset[1];\r\n      }\r\n    }\r\n    this.origin_ = offset;\r\n    return this.origin_;\r\n  }\r\n\r\n  /**\r\n   * Get the image URL.\r\n   * @return {string|undefined} Image src.\r\n   * @api\r\n   */\r\n  getSrc() {\r\n    return this.iconImage_.getSrc();\r\n  }\r\n\r\n  /**\r\n   * Get the size of the icon (in pixels).\r\n   * @return {import(\"../size.js\").Size} Image size.\r\n   * @api\r\n   * @override\r\n   */\r\n  getSize() {\r\n    return !this.size_ ? this.iconImage_.getSize() : this.size_;\r\n  }\r\n\r\n  /**\r\n   * Get the width of the icon (in pixels). Will return undefined when the icon image is not yet loaded.\r\n   * @return {number} Icon width (in pixels).\r\n   * @api\r\n   */\r\n  getWidth() {\r\n    const scale = this.getScaleArray();\r\n    if (this.size_) {\r\n      return this.size_[0] * scale[0];\r\n    }\r\n    if (this.iconImage_.getImageState() == ImageState.LOADED) {\r\n      return this.iconImage_.getSize()[0] * scale[0];\r\n    }\r\n    return undefined;\r\n  }\r\n\r\n  /**\r\n   * Get the height of the icon (in pixels). Will return undefined when the icon image is not yet loaded.\r\n   * @return {number} Icon height (in pixels).\r\n   * @api\r\n   */\r\n  getHeight() {\r\n    const scale = this.getScaleArray();\r\n    if (this.size_) {\r\n      return this.size_[1] * scale[1];\r\n    }\r\n    if (this.iconImage_.getImageState() == ImageState.LOADED) {\r\n      return this.iconImage_.getSize()[1] * scale[1];\r\n    }\r\n    return undefined;\r\n  }\r\n\r\n  /**\r\n   * Set the scale.\r\n   *\r\n   * @param {number|import(\"../size.js\").Size} scale Scale.\r\n   * @api\r\n   * @override\r\n   */\r\n  setScale(scale) {\r\n    delete this.initialOptions_;\r\n    super.setScale(scale);\r\n  }\r\n\r\n  /**\r\n   * @param {function(import(\"../events/Event.js\").default): void} listener Listener function.\r\n   * @override\r\n   */\r\n  listenImageChange(listener) {\r\n    this.iconImage_.addEventListener(EventType.CHANGE, listener);\r\n  }\r\n\r\n  /**\r\n   * Load not yet loaded URI.\r\n   * When rendering a feature with an icon style, the vector renderer will\r\n   * automatically call this method. However, you might want to call this\r\n   * method yourself for preloading or other purposes.\r\n   * @api\r\n   * @override\r\n   */\r\n  load() {\r\n    this.iconImage_.load();\r\n  }\r\n\r\n  /**\r\n   * @param {function(import(\"../events/Event.js\").default): void} listener Listener function.\r\n   * @override\r\n   */\r\n  unlistenImageChange(listener) {\r\n    this.iconImage_.removeEventListener(EventType.CHANGE, listener);\r\n  }\r\n\r\n  /**\r\n   * @override\r\n   */\r\n  ready() {\r\n    return this.iconImage_.ready();\r\n  }\r\n}\r\n\r\nexport default Icon;\r\n","/**\r\n * @module ol/style/Stroke\r\n */\r\n\r\n/**\r\n * @typedef {Object} Options\r\n * @property {import(\"../color.js\").Color|import(\"../colorlike.js\").ColorLike} [color] A color, gradient or pattern.\r\n * See {@link module:ol/color~Color} and {@link module:ol/colorlike~ColorLike} for possible formats.\r\n * Default null; if null, the Canvas/renderer default black will be used.\r\n * @property {CanvasLineCap} [lineCap='round'] Line cap style: `butt`, `round`, or `square`.\r\n * @property {CanvasLineJoin} [lineJoin='round'] Line join style: `bevel`, `round`, or `miter`.\r\n * @property {Array<number>} [lineDash] Line dash pattern. Default is `null` (no dash).\r\n * @property {number} [lineDashOffset=0] Line dash offset.\r\n * @property {number} [miterLimit=10] Miter limit.\r\n * @property {number} [width] Width.\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * Set stroke style for vector features.\r\n * Note that the defaults given are the Canvas defaults, which will be used if\r\n * option is not defined. The `get` functions return whatever was entered in\r\n * the options; they will not return the default.\r\n * @api\r\n */\r\nclass Stroke {\r\n  /**\r\n   * @param {Options} [options] Options.\r\n   */\r\n  constructor(options) {\r\n    options = options || {};\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"../color.js\").Color|import(\"../colorlike.js\").ColorLike}\r\n     */\r\n    this.color_ = options.color !== undefined ? options.color : null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {CanvasLineCap|undefined}\r\n     */\r\n    this.lineCap_ = options.lineCap;\r\n\r\n    /**\r\n     * @private\r\n     * @type {Array<number>|null}\r\n     */\r\n    this.lineDash_ = options.lineDash !== undefined ? options.lineDash : null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number|undefined}\r\n     */\r\n    this.lineDashOffset_ = options.lineDashOffset;\r\n\r\n    /**\r\n     * @private\r\n     * @type {CanvasLineJoin|undefined}\r\n     */\r\n    this.lineJoin_ = options.lineJoin;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number|undefined}\r\n     */\r\n    this.miterLimit_ = options.miterLimit;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number|undefined}\r\n     */\r\n    this.width_ = options.width;\r\n  }\r\n\r\n  /**\r\n   * Clones the style.\r\n   * @return {Stroke} The cloned style.\r\n   * @api\r\n   */\r\n  clone() {\r\n    const color = this.getColor();\r\n    return new Stroke({\r\n      color: Array.isArray(color) ? color.slice() : color || undefined,\r\n      lineCap: this.getLineCap(),\r\n      lineDash: this.getLineDash() ? this.getLineDash().slice() : undefined,\r\n      lineDashOffset: this.getLineDashOffset(),\r\n      lineJoin: this.getLineJoin(),\r\n      miterLimit: this.getMiterLimit(),\r\n      width: this.getWidth(),\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Get the stroke color.\r\n   * @return {import(\"../color.js\").Color|import(\"../colorlike.js\").ColorLike} Color.\r\n   * @api\r\n   */\r\n  getColor() {\r\n    return this.color_;\r\n  }\r\n\r\n  /**\r\n   * Get the line cap type for the stroke.\r\n   * @return {CanvasLineCap|undefined} Line cap.\r\n   * @api\r\n   */\r\n  getLineCap() {\r\n    return this.lineCap_;\r\n  }\r\n\r\n  /**\r\n   * Get the line dash style for the stroke.\r\n   * @return {Array<number>|null} Line dash.\r\n   * @api\r\n   */\r\n  getLineDash() {\r\n    return this.lineDash_;\r\n  }\r\n\r\n  /**\r\n   * Get the line dash offset for the stroke.\r\n   * @return {number|undefined} Line dash offset.\r\n   * @api\r\n   */\r\n  getLineDashOffset() {\r\n    return this.lineDashOffset_;\r\n  }\r\n\r\n  /**\r\n   * Get the line join type for the stroke.\r\n   * @return {CanvasLineJoin|undefined} Line join.\r\n   * @api\r\n   */\r\n  getLineJoin() {\r\n    return this.lineJoin_;\r\n  }\r\n\r\n  /**\r\n   * Get the miter limit for the stroke.\r\n   * @return {number|undefined} Miter limit.\r\n   * @api\r\n   */\r\n  getMiterLimit() {\r\n    return this.miterLimit_;\r\n  }\r\n\r\n  /**\r\n   * Get the stroke width.\r\n   * @return {number|undefined} Width.\r\n   * @api\r\n   */\r\n  getWidth() {\r\n    return this.width_;\r\n  }\r\n\r\n  /**\r\n   * Set the color.\r\n   *\r\n   * @param {import(\"../color.js\").Color|import(\"../colorlike.js\").ColorLike} color Color.\r\n   * @api\r\n   */\r\n  setColor(color) {\r\n    this.color_ = color;\r\n  }\r\n\r\n  /**\r\n   * Set the line cap.\r\n   *\r\n   * @param {CanvasLineCap|undefined} lineCap Line cap.\r\n   * @api\r\n   */\r\n  setLineCap(lineCap) {\r\n    this.lineCap_ = lineCap;\r\n  }\r\n\r\n  /**\r\n   * Set the line dash.\r\n   *\r\n   * @param {Array<number>|null} lineDash Line dash.\r\n   * @api\r\n   */\r\n  setLineDash(lineDash) {\r\n    this.lineDash_ = lineDash;\r\n  }\r\n\r\n  /**\r\n   * Set the line dash offset.\r\n   *\r\n   * @param {number|undefined} lineDashOffset Line dash offset.\r\n   * @api\r\n   */\r\n  setLineDashOffset(lineDashOffset) {\r\n    this.lineDashOffset_ = lineDashOffset;\r\n  }\r\n\r\n  /**\r\n   * Set the line join.\r\n   *\r\n   * @param {CanvasLineJoin|undefined} lineJoin Line join.\r\n   * @api\r\n   */\r\n  setLineJoin(lineJoin) {\r\n    this.lineJoin_ = lineJoin;\r\n  }\r\n\r\n  /**\r\n   * Set the miter limit.\r\n   *\r\n   * @param {number|undefined} miterLimit Miter limit.\r\n   * @api\r\n   */\r\n  setMiterLimit(miterLimit) {\r\n    this.miterLimit_ = miterLimit;\r\n  }\r\n\r\n  /**\r\n   * Set the width.\r\n   *\r\n   * @param {number|undefined} width Width.\r\n   * @api\r\n   */\r\n  setWidth(width) {\r\n    this.width_ = width;\r\n  }\r\n}\r\n\r\nexport default Stroke;\r\n","/**\r\n * @module ol/style/Style\r\n */\r\n\r\nimport {assert} from '../asserts.js';\r\nimport CircleStyle from './Circle.js';\r\nimport Fill from './Fill.js';\r\nimport Stroke from './Stroke.js';\r\n\r\n/**\r\n * Defines how symbols and text are decluttered on layers ith `declutter` set to `true`\r\n * **declutter**: Overlapping symbols and text are decluttered.\r\n * **obstacle**: Symbols and text are rendered, but serve as obstacle for subsequent attempts\r\n *   to place a symbol or text at the same location.\r\n * **none**: No decluttering is done.\r\n *\r\n * @typedef {\"declutter\"|\"obstacle\"|\"none\"} DeclutterMode\r\n */\r\n\r\n/**\r\n * A function that takes a {@link module:ol/Feature~Feature} and a `{number}`\r\n * representing the view's resolution. The function should return a\r\n * {@link module:ol/style/Style~Style} or an array of them. This way e.g. a\r\n * vector layer can be styled. If the function returns `undefined`, the\r\n * feature will not be rendered.\r\n *\r\n * @typedef {function(import(\"../Feature.js\").FeatureLike, number):(Style|Array<Style>|void)} StyleFunction\r\n */\r\n\r\n/**\r\n * A {@link Style}, an array of {@link Style}, or a {@link StyleFunction}.\r\n * @typedef {Style|Array<Style>|StyleFunction} StyleLike\r\n */\r\n\r\n/**\r\n * A function that takes a {@link module:ol/Feature~Feature} as argument and returns an\r\n * {@link module:ol/geom/Geometry~Geometry} that will be rendered and styled for the feature.\r\n *\r\n * @typedef {function(import(\"../Feature.js\").FeatureLike):\r\n *     (import(\"../geom/Geometry.js\").default|import(\"../render/Feature.js\").default|undefined)} GeometryFunction\r\n */\r\n\r\n/**\r\n * Custom renderer function. Takes two arguments:\r\n *\r\n * 1. The pixel coordinates of the geometry in GeoJSON notation.\r\n * 2. The {@link module:ol/render~State} of the layer renderer.\r\n *\r\n * @typedef {function((import(\"../coordinate.js\").Coordinate|Array<import(\"../coordinate.js\").Coordinate>|Array<Array<import(\"../coordinate.js\").Coordinate>>|Array<Array<Array<import(\"../coordinate.js\").Coordinate>>>),import(\"../render.js\").State): void} RenderFunction\r\n */\r\n\r\n/**\r\n * @typedef {Object} Options\r\n * @property {string|import(\"../geom/Geometry.js\").default|GeometryFunction} [geometry] Feature property or geometry\r\n * or function returning a geometry to render for this style.\r\n * @property {import(\"./Fill.js\").default} [fill] Fill style.\r\n * @property {import(\"./Image.js\").default} [image] Image style.\r\n * @property {RenderFunction} [renderer] Custom renderer. When configured, `fill`, `stroke` and `image` will be\r\n * ignored, and the provided function will be called with each render frame for each geometry.\r\n * @property {RenderFunction} [hitDetectionRenderer] Custom renderer for hit detection. If provided will be used\r\n * in hit detection rendering.\r\n * @property {import(\"./Stroke.js\").default} [stroke] Stroke style.\r\n * @property {import(\"./Text.js\").default} [text] Text style.\r\n * @property {number} [zIndex] Z index.\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * Container for vector feature rendering styles. Any changes made to the style\r\n * or its children through `set*()` methods will not take effect until the\r\n * feature or layer that uses the style is re-rendered.\r\n *\r\n * ## Feature styles\r\n *\r\n * If no style is defined, the following default style is used:\r\n * ```js\r\n *  import {Circle, Fill, Stroke, Style} from 'ol/style.js';\r\n *\r\n *  const fill = new Fill({\r\n *    color: 'rgba(255,255,255,0.4)',\r\n *  });\r\n *  const stroke = new Stroke({\r\n *    color: '#3399CC',\r\n *    width: 1.25,\r\n *  });\r\n *  const styles = [\r\n *    new Style({\r\n *      image: new Circle({\r\n *        fill: fill,\r\n *        stroke: stroke,\r\n *        radius: 5,\r\n *      }),\r\n *      fill: fill,\r\n *      stroke: stroke,\r\n *    }),\r\n *  ];\r\n * ```\r\n *\r\n * A separate editing style has the following defaults:\r\n * ```js\r\n *  import {Circle, Fill, Stroke, Style} from 'ol/style.js';\r\n *\r\n *  const styles = {};\r\n *  const white = [255, 255, 255, 1];\r\n *  const blue = [0, 153, 255, 1];\r\n *  const width = 3;\r\n *  styles['Polygon'] = [\r\n *    new Style({\r\n *      fill: new Fill({\r\n *        color: [255, 255, 255, 0.5],\r\n *      }),\r\n *    }),\r\n *  ];\r\n *  styles['MultiPolygon'] =\r\n *      styles['Polygon'];\r\n *  styles['LineString'] = [\r\n *    new Style({\r\n *      stroke: new Stroke({\r\n *        color: white,\r\n *        width: width + 2,\r\n *      }),\r\n *    }),\r\n *    new Style({\r\n *      stroke: new Stroke({\r\n *        color: blue,\r\n *        width: width,\r\n *      }),\r\n *    }),\r\n *  ];\r\n *  styles['MultiLineString'] = styles['LineString'];\r\n *\r\n *  styles['Circle'] = styles['Polygon'].concat(\r\n *    styles['LineString']\r\n *  );\r\n *\r\n *  styles['Point'] = [\r\n *    new Style({\r\n *      image: new Circle({\r\n *        radius: width * 2,\r\n *        fill: new Fill({\r\n *          color: blue,\r\n *        }),\r\n *        stroke: new Stroke({\r\n *          color: white,\r\n *          width: width / 2,\r\n *        }),\r\n *      }),\r\n *      zIndex: Infinity,\r\n *    }),\r\n *  ];\r\n *  styles['MultiPoint'] =\r\n *      styles['Point'];\r\n *  styles['GeometryCollection'] =\r\n *      styles['Polygon'].concat(\r\n *          styles['LineString'],\r\n *          styles['Point']\r\n *      );\r\n * ```\r\n *\r\n * @api\r\n */\r\nclass Style {\r\n  /**\r\n   * @param {Options} [options] Style options.\r\n   */\r\n  constructor(options) {\r\n    options = options || {};\r\n\r\n    /**\r\n     * @private\r\n     * @type {string|import(\"../geom/Geometry.js\").default|GeometryFunction|null}\r\n     */\r\n    this.geometry_ = null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {!GeometryFunction}\r\n     */\r\n    this.geometryFunction_ = defaultGeometryFunction;\r\n\r\n    if (options.geometry !== undefined) {\r\n      this.setGeometry(options.geometry);\r\n    }\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"./Fill.js\").default|null}\r\n     */\r\n    this.fill_ = options.fill !== undefined ? options.fill : null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"./Image.js\").default|null}\r\n     */\r\n    this.image_ = options.image !== undefined ? options.image : null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {RenderFunction|null}\r\n     */\r\n    this.renderer_ = options.renderer !== undefined ? options.renderer : null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {RenderFunction|null}\r\n     */\r\n    this.hitDetectionRenderer_ =\r\n      options.hitDetectionRenderer !== undefined\r\n        ? options.hitDetectionRenderer\r\n        : null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"./Stroke.js\").default|null}\r\n     */\r\n    this.stroke_ = options.stroke !== undefined ? options.stroke : null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"./Text.js\").default|null}\r\n     */\r\n    this.text_ = options.text !== undefined ? options.text : null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number|undefined}\r\n     */\r\n    this.zIndex_ = options.zIndex;\r\n  }\r\n\r\n  /**\r\n   * Clones the style.\r\n   * @return {Style} The cloned style.\r\n   * @api\r\n   */\r\n  clone() {\r\n    let geometry = this.getGeometry();\r\n    if (geometry && typeof geometry === 'object') {\r\n      geometry = /** @type {import(\"../geom/Geometry.js\").default} */ (\r\n        geometry\r\n      ).clone();\r\n    }\r\n    return new Style({\r\n      geometry: geometry ?? undefined,\r\n      fill: this.getFill() ? this.getFill().clone() : undefined,\r\n      image: this.getImage() ? this.getImage().clone() : undefined,\r\n      renderer: this.getRenderer() ?? undefined,\r\n      stroke: this.getStroke() ? this.getStroke().clone() : undefined,\r\n      text: this.getText() ? this.getText().clone() : undefined,\r\n      zIndex: this.getZIndex(),\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Get the custom renderer function that was configured with\r\n   * {@link #setRenderer} or the `renderer` constructor option.\r\n   * @return {RenderFunction|null} Custom renderer function.\r\n   * @api\r\n   */\r\n  getRenderer() {\r\n    return this.renderer_;\r\n  }\r\n\r\n  /**\r\n   * Sets a custom renderer function for this style. When set, `fill`, `stroke`\r\n   * and `image` options of the style will be ignored.\r\n   * @param {RenderFunction|null} renderer Custom renderer function.\r\n   * @api\r\n   */\r\n  setRenderer(renderer) {\r\n    this.renderer_ = renderer;\r\n  }\r\n\r\n  /**\r\n   * Sets a custom renderer function for this style used\r\n   * in hit detection.\r\n   * @param {RenderFunction|null} renderer Custom renderer function.\r\n   * @api\r\n   */\r\n  setHitDetectionRenderer(renderer) {\r\n    this.hitDetectionRenderer_ = renderer;\r\n  }\r\n\r\n  /**\r\n   * Get the custom renderer function that was configured with\r\n   * {@link #setHitDetectionRenderer} or the `hitDetectionRenderer` constructor option.\r\n   * @return {RenderFunction|null} Custom renderer function.\r\n   * @api\r\n   */\r\n  getHitDetectionRenderer() {\r\n    return this.hitDetectionRenderer_;\r\n  }\r\n\r\n  /**\r\n   * Get the geometry to be rendered.\r\n   * @return {string|import(\"../geom/Geometry.js\").default|GeometryFunction|null}\r\n   * Feature property or geometry or function that returns the geometry that will\r\n   * be rendered with this style.\r\n   * @api\r\n   */\r\n  getGeometry() {\r\n    return this.geometry_;\r\n  }\r\n\r\n  /**\r\n   * Get the function used to generate a geometry for rendering.\r\n   * @return {!GeometryFunction} Function that is called with a feature\r\n   * and returns the geometry to render instead of the feature's geometry.\r\n   * @api\r\n   */\r\n  getGeometryFunction() {\r\n    return this.geometryFunction_;\r\n  }\r\n\r\n  /**\r\n   * Get the fill style.\r\n   * @return {import(\"./Fill.js\").default|null} Fill style.\r\n   * @api\r\n   */\r\n  getFill() {\r\n    return this.fill_;\r\n  }\r\n\r\n  /**\r\n   * Set the fill style.\r\n   * @param {import(\"./Fill.js\").default|null} fill Fill style.\r\n   * @api\r\n   */\r\n  setFill(fill) {\r\n    this.fill_ = fill;\r\n  }\r\n\r\n  /**\r\n   * Get the image style.\r\n   * @return {import(\"./Image.js\").default|null} Image style.\r\n   * @api\r\n   */\r\n  getImage() {\r\n    return this.image_;\r\n  }\r\n\r\n  /**\r\n   * Set the image style.\r\n   * @param {import(\"./Image.js\").default} image Image style.\r\n   * @api\r\n   */\r\n  setImage(image) {\r\n    this.image_ = image;\r\n  }\r\n\r\n  /**\r\n   * Get the stroke style.\r\n   * @return {import(\"./Stroke.js\").default|null} Stroke style.\r\n   * @api\r\n   */\r\n  getStroke() {\r\n    return this.stroke_;\r\n  }\r\n\r\n  /**\r\n   * Set the stroke style.\r\n   * @param {import(\"./Stroke.js\").default|null} stroke Stroke style.\r\n   * @api\r\n   */\r\n  setStroke(stroke) {\r\n    this.stroke_ = stroke;\r\n  }\r\n\r\n  /**\r\n   * Get the text style.\r\n   * @return {import(\"./Text.js\").default|null} Text style.\r\n   * @api\r\n   */\r\n  getText() {\r\n    return this.text_;\r\n  }\r\n\r\n  /**\r\n   * Set the text style.\r\n   * @param {import(\"./Text.js\").default} text Text style.\r\n   * @api\r\n   */\r\n  setText(text) {\r\n    this.text_ = text;\r\n  }\r\n\r\n  /**\r\n   * Get the z-index for the style.\r\n   * @return {number|undefined} ZIndex.\r\n   * @api\r\n   */\r\n  getZIndex() {\r\n    return this.zIndex_;\r\n  }\r\n\r\n  /**\r\n   * Set a geometry that is rendered instead of the feature's geometry.\r\n   *\r\n   * @param {string|import(\"../geom/Geometry.js\").default|GeometryFunction|null} geometry\r\n   *     Feature property or geometry or function returning a geometry to render\r\n   *     for this style.\r\n   * @api\r\n   */\r\n  setGeometry(geometry) {\r\n    if (typeof geometry === 'function') {\r\n      this.geometryFunction_ = geometry;\r\n    } else if (typeof geometry === 'string') {\r\n      this.geometryFunction_ = function (feature) {\r\n        return /** @type {import(\"../geom/Geometry.js\").default} */ (\r\n          feature.get(geometry)\r\n        );\r\n      };\r\n    } else if (!geometry) {\r\n      this.geometryFunction_ = defaultGeometryFunction;\r\n    } else if (geometry !== undefined) {\r\n      this.geometryFunction_ = function () {\r\n        return /** @type {import(\"../geom/Geometry.js\").default} */ (geometry);\r\n      };\r\n    }\r\n    this.geometry_ = geometry;\r\n  }\r\n\r\n  /**\r\n   * Set the z-index.\r\n   *\r\n   * @param {number|undefined} zIndex ZIndex.\r\n   * @api\r\n   */\r\n  setZIndex(zIndex) {\r\n    this.zIndex_ = zIndex;\r\n  }\r\n}\r\n\r\n/**\r\n * Convert the provided object into a style function.  Functions passed through\r\n * unchanged.  Arrays of Style or single style objects wrapped in a\r\n * new style function.\r\n * @param {StyleFunction|Array<Style>|Style} obj\r\n *     A style function, a single style, or an array of styles.\r\n * @return {StyleFunction} A style function.\r\n */\r\nexport function toFunction(obj) {\r\n  let styleFunction;\r\n\r\n  if (typeof obj === 'function') {\r\n    styleFunction = obj;\r\n  } else {\r\n    /**\r\n     * @type {Array<Style>}\r\n     */\r\n    let styles;\r\n    if (Array.isArray(obj)) {\r\n      styles = obj;\r\n    } else {\r\n      assert(\r\n        typeof (/** @type {?} */ (obj).getZIndex) === 'function',\r\n        'Expected an `Style` or an array of `Style`',\r\n      );\r\n      const style = /** @type {Style} */ (obj);\r\n      styles = [style];\r\n    }\r\n    styleFunction = function () {\r\n      return styles;\r\n    };\r\n  }\r\n  return styleFunction;\r\n}\r\n\r\n/**\r\n * @type {Array<Style>|null}\r\n */\r\nlet defaultStyles = null;\r\n\r\n/**\r\n * @param {import(\"../Feature.js\").FeatureLike} feature Feature.\r\n * @param {number} resolution Resolution.\r\n * @return {Array<Style>} Style.\r\n */\r\nexport function createDefaultStyle(feature, resolution) {\r\n  // We don't use an immediately-invoked function\r\n  // and a closure so we don't get an error at script evaluation time in\r\n  // browsers that do not support Canvas. (import(\"./Circle.js\").CircleStyle does\r\n  // canvas.getContext('2d') at construction time, which will cause an.error\r\n  // in such browsers.)\r\n  if (!defaultStyles) {\r\n    const fill = new Fill({\r\n      color: 'rgba(255,255,255,0.4)',\r\n    });\r\n    const stroke = new Stroke({\r\n      color: '#3399CC',\r\n      width: 1.25,\r\n    });\r\n    defaultStyles = [\r\n      new Style({\r\n        image: new CircleStyle({\r\n          fill: fill,\r\n          stroke: stroke,\r\n          radius: 5,\r\n        }),\r\n        fill: fill,\r\n        stroke: stroke,\r\n      }),\r\n    ];\r\n  }\r\n  return defaultStyles;\r\n}\r\n\r\n/**\r\n * Default styles for editing features.\r\n * @return {Object<import(\"../geom/Geometry.js\").Type, Array<Style>>} Styles\r\n */\r\nexport function createEditingStyle() {\r\n  /** @type {Object<import(\"../geom/Geometry.js\").Type, Array<Style>>} */\r\n  const styles = {};\r\n  const white = [255, 255, 255, 1];\r\n  const blue = [0, 153, 255, 1];\r\n  const width = 3;\r\n  styles['Polygon'] = [\r\n    new Style({\r\n      fill: new Fill({\r\n        color: [255, 255, 255, 0.5],\r\n      }),\r\n    }),\r\n  ];\r\n  styles['MultiPolygon'] = styles['Polygon'];\r\n\r\n  styles['LineString'] = [\r\n    new Style({\r\n      stroke: new Stroke({\r\n        color: white,\r\n        width: width + 2,\r\n      }),\r\n    }),\r\n    new Style({\r\n      stroke: new Stroke({\r\n        color: blue,\r\n        width: width,\r\n      }),\r\n    }),\r\n  ];\r\n  styles['MultiLineString'] = styles['LineString'];\r\n\r\n  styles['Circle'] = styles['Polygon'].concat(styles['LineString']);\r\n\r\n  styles['Point'] = [\r\n    new Style({\r\n      image: new CircleStyle({\r\n        radius: width * 2,\r\n        fill: new Fill({\r\n          color: blue,\r\n        }),\r\n        stroke: new Stroke({\r\n          color: white,\r\n          width: width / 2,\r\n        }),\r\n      }),\r\n      zIndex: Infinity,\r\n    }),\r\n  ];\r\n  styles['MultiPoint'] = styles['Point'];\r\n\r\n  styles['GeometryCollection'] = styles['Polygon'].concat(\r\n    styles['LineString'],\r\n    styles['Point'],\r\n  );\r\n\r\n  return styles;\r\n}\r\n\r\n/**\r\n * Function that is called with a feature and returns its default geometry.\r\n * @param {import(\"../Feature.js\").FeatureLike} feature Feature to get the geometry for.\r\n * @return {import(\"../geom/Geometry.js\").default|import(\"../render/Feature.js\").default|undefined} Geometry to render.\r\n */\r\nfunction defaultGeometryFunction(feature) {\r\n  return feature.getGeometry();\r\n}\r\n\r\nexport default Style;\r\n","/**\r\n * @module ol/style/Text\r\n */\r\nimport {toSize} from '../size.js';\r\nimport Fill from './Fill.js';\r\n\r\n/**\r\n * @typedef {'point' | 'line'} TextPlacement\r\n * Default text placement is `'point'`. Note that\r\n * `'line'` requires the underlying geometry to be a {@link module:ol/geom/LineString~LineString},\r\n * {@link module:ol/geom/Polygon~Polygon}, {@link module:ol/geom/MultiLineString~MultiLineString} or\r\n * {@link module:ol/geom/MultiPolygon~MultiPolygon}.\r\n */\r\n\r\n/**\r\n * @typedef {'left' | 'center' | 'right'} TextJustify\r\n */\r\n\r\n/**\r\n * The default fill color to use if no fill was set at construction time; a\r\n * blackish `#333`.\r\n *\r\n * @const {string}\r\n */\r\nconst DEFAULT_FILL_COLOR = '#333';\r\n\r\n/**\r\n * @typedef {Object} Options\r\n * @property {string} [font] Font style as CSS `font` value, see:\r\n * https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/font. Default is `'10px sans-serif'`\r\n * @property {number} [maxAngle=Math.PI/4] When `placement` is set to `'line'`, allow a maximum angle between adjacent characters.\r\n * The expected value is in radians, and the default is 45° (`Math.PI / 4`).\r\n * @property {number} [offsetX=0] Horizontal text offset in pixels. A positive will shift the text right.\r\n * @property {number} [offsetY=0] Vertical text offset in pixels. A positive will shift the text down.\r\n * @property {boolean} [overflow=false] For polygon labels or when `placement` is set to `'line'`, allow text to exceed\r\n * the width of the polygon at the label position or the length of the path that it follows.\r\n * @property {TextPlacement} [placement='point'] Text placement.\r\n * @property {number} [repeat] Repeat interval. When set, the text will be repeated at this interval, which specifies\r\n * the distance between two text anchors in pixels. Only available when `placement` is set to `'line'`. Overrides 'textAlign'.\r\n * @property {number|import(\"../size.js\").Size} [scale] Scale.\r\n * @property {boolean} [rotateWithView=false] Whether to rotate the text with the view.\r\n * @property {boolean} [keepUpright=true] Whether the text can be rotated 180° to prevent being rendered upside down.\r\n * @property {number} [rotation=0] Rotation in radians (positive rotation clockwise).\r\n * @property {string|Array<string>} [text] Text content or rich text content. For plain text provide a string, which can\r\n * contain line breaks (`\\n`). For rich text provide an array of text/font tuples. A tuple consists of the text to\r\n * render and the font to use (or `''` to use the text style's font). A line break has to be a separate tuple (i.e. `'\\n', ''`).\r\n * **Example:** `['foo', 'bold 10px sans-serif', ' bar', 'italic 10px sans-serif', ' baz', '']` will yield \"**foo** *bar* baz\".\r\n * **Note:** Rich text is not supported for `placement: 'line'` or the immediate rendering API.\r\n * @property {CanvasTextAlign} [textAlign] Text alignment. Possible values: `'left'`, `'right'`, `'center'`, `'end'` or `'start'`.\r\n * Default is `'center'` for `placement: 'point'`. For `placement: 'line'`, the default is to let the renderer choose a\r\n * placement where `maxAngle` is not exceeded.\r\n * @property {TextJustify} [justify] Text justification within the text box.\r\n * If not set, text is justified towards the `textAlign` anchor.\r\n * Otherwise, use options `'left'`, `'center'`, or `'right'` to justify the text within the text box.\r\n * **Note:** `justify` is ignored for immediate rendering and also for `placement: 'line'`.\r\n * @property {CanvasTextBaseline} [textBaseline='middle'] Text base line. Possible values: `'bottom'`, `'top'`, `'middle'`, `'alphabetic'`,\r\n * `'hanging'`, `'ideographic'`.\r\n * @property {import(\"./Fill.js\").default|null} [fill] Fill style. If none is provided, we'll use a dark fill-style (#333). Specify `null` for no fill.\r\n * @property {import(\"./Stroke.js\").default} [stroke] Stroke style.\r\n * @property {import(\"./Fill.js\").default} [backgroundFill] Fill style for the text background when `placement` is\r\n * `'point'`. Default is no fill.\r\n * @property {import(\"./Stroke.js\").default} [backgroundStroke] Stroke style for the text background  when `placement`\r\n * is `'point'`. Default is no stroke.\r\n * @property {Array<number>} [padding=[0, 0, 0, 0]] Padding in pixels around the text for decluttering and background. The order of\r\n * values in the array is `[top, right, bottom, left]`.\r\n * @property {import('../style/Style.js').DeclutterMode} [declutterMode] Declutter mode: `declutter`, `obstacle`, `none`\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * Set text style for vector features.\r\n * @api\r\n */\r\nclass Text {\r\n  /**\r\n   * @param {Options} [options] Options.\r\n   */\r\n  constructor(options) {\r\n    options = options || {};\r\n\r\n    /**\r\n     * @private\r\n     * @type {string|undefined}\r\n     */\r\n    this.font_ = options.font;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number|undefined}\r\n     */\r\n    this.rotation_ = options.rotation;\r\n\r\n    /**\r\n     * @private\r\n     * @type {boolean|undefined}\r\n     */\r\n    this.rotateWithView_ = options.rotateWithView;\r\n\r\n    /**\r\n     * @private\r\n     * @type {boolean|undefined}\r\n     */\r\n    this.keepUpright_ = options.keepUpright;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number|import(\"../size.js\").Size|undefined}\r\n     */\r\n    this.scale_ = options.scale;\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"../size.js\").Size}\r\n     */\r\n    this.scaleArray_ = toSize(options.scale !== undefined ? options.scale : 1);\r\n\r\n    /**\r\n     * @private\r\n     * @type {string|Array<string>|undefined}\r\n     */\r\n    this.text_ = options.text;\r\n\r\n    /**\r\n     * @private\r\n     * @type {CanvasTextAlign|undefined}\r\n     */\r\n    this.textAlign_ = options.textAlign;\r\n\r\n    /**\r\n     * @private\r\n     * @type {TextJustify|undefined}\r\n     */\r\n    this.justify_ = options.justify;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number|undefined}\r\n     */\r\n    this.repeat_ = options.repeat;\r\n\r\n    /**\r\n     * @private\r\n     * @type {CanvasTextBaseline|undefined}\r\n     */\r\n    this.textBaseline_ = options.textBaseline;\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"./Fill.js\").default|null}\r\n     */\r\n    this.fill_ =\r\n      options.fill !== undefined\r\n        ? options.fill\r\n        : new Fill({color: DEFAULT_FILL_COLOR});\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.maxAngle_ =\r\n      options.maxAngle !== undefined ? options.maxAngle : Math.PI / 4;\r\n\r\n    /**\r\n     * @private\r\n     * @type {TextPlacement}\r\n     */\r\n    this.placement_ =\r\n      options.placement !== undefined ? options.placement : 'point';\r\n\r\n    /**\r\n     * @private\r\n     * @type {boolean}\r\n     */\r\n    this.overflow_ = !!options.overflow;\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"./Stroke.js\").default|null}\r\n     */\r\n    this.stroke_ = options.stroke !== undefined ? options.stroke : null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.offsetX_ = options.offsetX !== undefined ? options.offsetX : 0;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.offsetY_ = options.offsetY !== undefined ? options.offsetY : 0;\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"./Fill.js\").default|null}\r\n     */\r\n    this.backgroundFill_ = options.backgroundFill\r\n      ? options.backgroundFill\r\n      : null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"./Stroke.js\").default|null}\r\n     */\r\n    this.backgroundStroke_ = options.backgroundStroke\r\n      ? options.backgroundStroke\r\n      : null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {Array<number>|null}\r\n     */\r\n    this.padding_ = options.padding === undefined ? null : options.padding;\r\n\r\n    /**\r\n     * @private\r\n     * @type {import('../style/Style.js').DeclutterMode}\r\n     */\r\n    this.declutterMode_ = options.declutterMode;\r\n  }\r\n\r\n  /**\r\n   * Clones the style.\r\n   * @return {Text} The cloned style.\r\n   * @api\r\n   */\r\n  clone() {\r\n    const scale = this.getScale();\r\n    return new Text({\r\n      font: this.getFont(),\r\n      placement: this.getPlacement(),\r\n      repeat: this.getRepeat(),\r\n      maxAngle: this.getMaxAngle(),\r\n      overflow: this.getOverflow(),\r\n      rotation: this.getRotation(),\r\n      rotateWithView: this.getRotateWithView(),\r\n      keepUpright: this.getKeepUpright(),\r\n      scale: Array.isArray(scale) ? scale.slice() : scale,\r\n      text: this.getText(),\r\n      textAlign: this.getTextAlign(),\r\n      justify: this.getJustify(),\r\n      textBaseline: this.getTextBaseline(),\r\n      fill: this.getFill() ? this.getFill().clone() : undefined,\r\n      stroke: this.getStroke() ? this.getStroke().clone() : undefined,\r\n      offsetX: this.getOffsetX(),\r\n      offsetY: this.getOffsetY(),\r\n      backgroundFill: this.getBackgroundFill()\r\n        ? this.getBackgroundFill().clone()\r\n        : undefined,\r\n      backgroundStroke: this.getBackgroundStroke()\r\n        ? this.getBackgroundStroke().clone()\r\n        : undefined,\r\n      padding: this.getPadding() || undefined,\r\n      declutterMode: this.getDeclutterMode(),\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Get the `overflow` configuration.\r\n   * @return {boolean} Let text overflow the length of the path they follow.\r\n   * @api\r\n   */\r\n  getOverflow() {\r\n    return this.overflow_;\r\n  }\r\n\r\n  /**\r\n   * Get the font name.\r\n   * @return {string|undefined} Font.\r\n   * @api\r\n   */\r\n  getFont() {\r\n    return this.font_;\r\n  }\r\n\r\n  /**\r\n   * Get the maximum angle between adjacent characters.\r\n   * @return {number} Angle in radians.\r\n   * @api\r\n   */\r\n  getMaxAngle() {\r\n    return this.maxAngle_;\r\n  }\r\n\r\n  /**\r\n   * Get the label placement.\r\n   * @return {TextPlacement} Text placement.\r\n   * @api\r\n   */\r\n  getPlacement() {\r\n    return this.placement_;\r\n  }\r\n\r\n  /**\r\n   * Get the repeat interval of the text.\r\n   * @return {number|undefined} Repeat interval in pixels.\r\n   * @api\r\n   */\r\n  getRepeat() {\r\n    return this.repeat_;\r\n  }\r\n\r\n  /**\r\n   * Get the x-offset for the text.\r\n   * @return {number} Horizontal text offset.\r\n   * @api\r\n   */\r\n  getOffsetX() {\r\n    return this.offsetX_;\r\n  }\r\n\r\n  /**\r\n   * Get the y-offset for the text.\r\n   * @return {number} Vertical text offset.\r\n   * @api\r\n   */\r\n  getOffsetY() {\r\n    return this.offsetY_;\r\n  }\r\n\r\n  /**\r\n   * Get the fill style for the text.\r\n   * @return {import(\"./Fill.js\").default|null} Fill style.\r\n   * @api\r\n   */\r\n  getFill() {\r\n    return this.fill_;\r\n  }\r\n\r\n  /**\r\n   * Determine whether the text rotates with the map.\r\n   * @return {boolean|undefined} Rotate with map.\r\n   * @api\r\n   */\r\n  getRotateWithView() {\r\n    return this.rotateWithView_;\r\n  }\r\n\r\n  /**\r\n   * Determine whether the text can be rendered upside down.\r\n   * @return {boolean|undefined} Keep text upright.\r\n   * @api\r\n   */\r\n  getKeepUpright() {\r\n    return this.keepUpright_;\r\n  }\r\n\r\n  /**\r\n   * Get the text rotation.\r\n   * @return {number|undefined} Rotation.\r\n   * @api\r\n   */\r\n  getRotation() {\r\n    return this.rotation_;\r\n  }\r\n\r\n  /**\r\n   * Get the text scale.\r\n   * @return {number|import(\"../size.js\").Size|undefined} Scale.\r\n   * @api\r\n   */\r\n  getScale() {\r\n    return this.scale_;\r\n  }\r\n\r\n  /**\r\n   * Get the symbolizer scale array.\r\n   * @return {import(\"../size.js\").Size} Scale array.\r\n   */\r\n  getScaleArray() {\r\n    return this.scaleArray_;\r\n  }\r\n\r\n  /**\r\n   * Get the stroke style for the text.\r\n   * @return {import(\"./Stroke.js\").default|null} Stroke style.\r\n   * @api\r\n   */\r\n  getStroke() {\r\n    return this.stroke_;\r\n  }\r\n\r\n  /**\r\n   * Get the text to be rendered.\r\n   * @return {string|Array<string>|undefined} Text.\r\n   * @api\r\n   */\r\n  getText() {\r\n    return this.text_;\r\n  }\r\n\r\n  /**\r\n   * Get the text alignment.\r\n   * @return {CanvasTextAlign|undefined} Text align.\r\n   * @api\r\n   */\r\n  getTextAlign() {\r\n    return this.textAlign_;\r\n  }\r\n\r\n  /**\r\n   * Get the justification.\r\n   * @return {TextJustify|undefined} Justification.\r\n   * @api\r\n   */\r\n  getJustify() {\r\n    return this.justify_;\r\n  }\r\n\r\n  /**\r\n   * Get the text baseline.\r\n   * @return {CanvasTextBaseline|undefined} Text baseline.\r\n   * @api\r\n   */\r\n  getTextBaseline() {\r\n    return this.textBaseline_;\r\n  }\r\n\r\n  /**\r\n   * Get the background fill style for the text.\r\n   * @return {import(\"./Fill.js\").default|null} Fill style.\r\n   * @api\r\n   */\r\n  getBackgroundFill() {\r\n    return this.backgroundFill_;\r\n  }\r\n\r\n  /**\r\n   * Get the background stroke style for the text.\r\n   * @return {import(\"./Stroke.js\").default|null} Stroke style.\r\n   * @api\r\n   */\r\n  getBackgroundStroke() {\r\n    return this.backgroundStroke_;\r\n  }\r\n\r\n  /**\r\n   * Get the padding for the text.\r\n   * @return {Array<number>|null} Padding.\r\n   * @api\r\n   */\r\n  getPadding() {\r\n    return this.padding_;\r\n  }\r\n\r\n  /**\r\n   * Get the declutter mode of the shape\r\n   * @return {import(\"./Style.js\").DeclutterMode} Shape's declutter mode\r\n   * @api\r\n   */\r\n  getDeclutterMode() {\r\n    return this.declutterMode_;\r\n  }\r\n\r\n  /**\r\n   * Set the `overflow` property.\r\n   *\r\n   * @param {boolean} overflow Let text overflow the path that it follows.\r\n   * @api\r\n   */\r\n  setOverflow(overflow) {\r\n    this.overflow_ = overflow;\r\n  }\r\n\r\n  /**\r\n   * Set the font.\r\n   *\r\n   * @param {string|undefined} font Font.\r\n   * @api\r\n   */\r\n  setFont(font) {\r\n    this.font_ = font;\r\n  }\r\n\r\n  /**\r\n   * Set the maximum angle between adjacent characters.\r\n   *\r\n   * @param {number} maxAngle Angle in radians.\r\n   * @api\r\n   */\r\n  setMaxAngle(maxAngle) {\r\n    this.maxAngle_ = maxAngle;\r\n  }\r\n\r\n  /**\r\n   * Set the x offset.\r\n   *\r\n   * @param {number} offsetX Horizontal text offset.\r\n   * @api\r\n   */\r\n  setOffsetX(offsetX) {\r\n    this.offsetX_ = offsetX;\r\n  }\r\n\r\n  /**\r\n   * Set the y offset.\r\n   *\r\n   * @param {number} offsetY Vertical text offset.\r\n   * @api\r\n   */\r\n  setOffsetY(offsetY) {\r\n    this.offsetY_ = offsetY;\r\n  }\r\n\r\n  /**\r\n   * Set the text placement.\r\n   *\r\n   * @param {TextPlacement} placement Placement.\r\n   * @api\r\n   */\r\n  setPlacement(placement) {\r\n    this.placement_ = placement;\r\n  }\r\n\r\n  /**\r\n   * Set the repeat interval of the text.\r\n   * @param {number|undefined} [repeat] Repeat interval in pixels.\r\n   * @api\r\n   */\r\n  setRepeat(repeat) {\r\n    this.repeat_ = repeat;\r\n  }\r\n\r\n  /**\r\n   * Set whether to rotate the text with the view.\r\n   *\r\n   * @param {boolean} rotateWithView Rotate with map.\r\n   * @api\r\n   */\r\n  setRotateWithView(rotateWithView) {\r\n    this.rotateWithView_ = rotateWithView;\r\n  }\r\n\r\n  /**\r\n   * Set whether the text can be rendered upside down.\r\n   *\r\n   * @param {boolean} keepUpright Keep text upright.\r\n   * @api\r\n   */\r\n  setKeepUpright(keepUpright) {\r\n    this.keepUpright_ = keepUpright;\r\n  }\r\n\r\n  /**\r\n   * Set the fill.\r\n   *\r\n   * @param {import(\"./Fill.js\").default|null} fill Fill style.\r\n   * @api\r\n   */\r\n  setFill(fill) {\r\n    this.fill_ = fill;\r\n  }\r\n\r\n  /**\r\n   * Set the rotation.\r\n   *\r\n   * @param {number|undefined} rotation Rotation.\r\n   * @api\r\n   */\r\n  setRotation(rotation) {\r\n    this.rotation_ = rotation;\r\n  }\r\n\r\n  /**\r\n   * Set the scale.\r\n   *\r\n   * @param {number|import(\"../size.js\").Size|undefined} scale Scale.\r\n   * @api\r\n   */\r\n  setScale(scale) {\r\n    this.scale_ = scale;\r\n    this.scaleArray_ = toSize(scale !== undefined ? scale : 1);\r\n  }\r\n\r\n  /**\r\n   * Set the stroke.\r\n   *\r\n   * @param {import(\"./Stroke.js\").default|null} stroke Stroke style.\r\n   * @api\r\n   */\r\n  setStroke(stroke) {\r\n    this.stroke_ = stroke;\r\n  }\r\n\r\n  /**\r\n   * Set the text.\r\n   *\r\n   * @param {string|Array<string>|undefined} text Text.\r\n   * @api\r\n   */\r\n  setText(text) {\r\n    this.text_ = text;\r\n  }\r\n\r\n  /**\r\n   * Set the text alignment.\r\n   *\r\n   * @param {CanvasTextAlign|undefined} textAlign Text align.\r\n   * @api\r\n   */\r\n  setTextAlign(textAlign) {\r\n    this.textAlign_ = textAlign;\r\n  }\r\n\r\n  /**\r\n   * Set the justification.\r\n   *\r\n   * @param {TextJustify|undefined} justify Justification.\r\n   * @api\r\n   */\r\n  setJustify(justify) {\r\n    this.justify_ = justify;\r\n  }\r\n\r\n  /**\r\n   * Set the text baseline.\r\n   *\r\n   * @param {CanvasTextBaseline|undefined} textBaseline Text baseline.\r\n   * @api\r\n   */\r\n  setTextBaseline(textBaseline) {\r\n    this.textBaseline_ = textBaseline;\r\n  }\r\n\r\n  /**\r\n   * Set the background fill.\r\n   *\r\n   * @param {import(\"./Fill.js\").default|null} fill Fill style.\r\n   * @api\r\n   */\r\n  setBackgroundFill(fill) {\r\n    this.backgroundFill_ = fill;\r\n  }\r\n\r\n  /**\r\n   * Set the background stroke.\r\n   *\r\n   * @param {import(\"./Stroke.js\").default|null} stroke Stroke style.\r\n   * @api\r\n   */\r\n  setBackgroundStroke(stroke) {\r\n    this.backgroundStroke_ = stroke;\r\n  }\r\n\r\n  /**\r\n   * Set the padding (`[top, right, bottom, left]`).\r\n   *\r\n   * @param {Array<number>|null} padding Padding.\r\n   * @api\r\n   */\r\n  setPadding(padding) {\r\n    this.padding_ = padding;\r\n  }\r\n}\r\n\r\nexport default Text;\r\n","/**\r\n * @module ol/render/Event\r\n */\r\n\r\nimport Event from '../events/Event.js';\r\n\r\nclass RenderEvent extends Event {\r\n  /**\r\n   * @param {import(\"./EventType.js\").default} type Type.\r\n   * @param {import(\"../transform.js\").Transform} [inversePixelTransform] Transform for\r\n   *     CSS pixels to rendered pixels.\r\n   * @param {import(\"../Map.js\").FrameState} [frameState] Frame state.\r\n   * @param {?(CanvasRenderingContext2D|WebGLRenderingContext)} [context] Context.\r\n   */\r\n  constructor(type, inversePixelTransform, frameState, context) {\r\n    super(type);\r\n\r\n    /**\r\n     * Transform from CSS pixels (relative to the top-left corner of the map viewport)\r\n     * to rendered pixels on this event's `context`. Only available when a Canvas renderer is used, null otherwise.\r\n     * @type {import(\"../transform.js\").Transform|undefined}\r\n     * @api\r\n     */\r\n    this.inversePixelTransform = inversePixelTransform;\r\n\r\n    /**\r\n     * An object representing the current render frame state.\r\n     * @type {import(\"../Map.js\").FrameState|undefined}\r\n     * @api\r\n     */\r\n    this.frameState = frameState;\r\n\r\n    /**\r\n     * Canvas context. Not available when the event is dispatched by the map. For Canvas 2D layers,\r\n     * the context will be the 2D rendering context.  For WebGL layers, the context will be the WebGL\r\n     * context.\r\n     * @type {CanvasRenderingContext2D|WebGLRenderingContext|undefined}\r\n     * @api\r\n     */\r\n    this.context = context;\r\n  }\r\n}\r\n\r\nexport default RenderEvent;\r\n","/**\r\n * @module ol/renderer/Map\r\n */\r\nimport Disposable from '../Disposable.js';\r\nimport {wrapX} from '../coordinate.js';\r\nimport {getWidth} from '../extent.js';\r\nimport {TRUE} from '../functions.js';\r\nimport {inView} from '../layer/Layer.js';\r\nimport {shared as iconImageCache} from '../style/IconImageCache.js';\r\nimport {compose as composeTransform, makeInverse} from '../transform.js';\r\nimport {abstract} from '../util.js';\r\n\r\n/**\r\n * @template T\r\n * @typedef HitMatch\r\n * @property {import(\"../Feature.js\").FeatureLike} feature Feature.\r\n * @property {import(\"../layer/Layer.js\").default} layer Layer.\r\n * @property {import(\"../geom/SimpleGeometry.js\").default} geometry Geometry.\r\n * @property {number} distanceSq Squared distance.\r\n * @property {import(\"./vector.js\").FeatureCallback<T>} callback Callback.\r\n */\r\n\r\n/**\r\n * @abstract\r\n */\r\nclass MapRenderer extends Disposable {\r\n  /**\r\n   * @param {import(\"../Map.js\").default} map Map.\r\n   */\r\n  constructor(map) {\r\n    super();\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"../Map.js\").default}\r\n     */\r\n    this.map_ = map;\r\n  }\r\n\r\n  /**\r\n   * @abstract\r\n   * @param {import(\"../render/EventType.js\").default} type Event type.\r\n   * @param {import(\"../Map.js\").FrameState} frameState Frame state.\r\n   */\r\n  dispatchRenderEvent(type, frameState) {\r\n    abstract();\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../Map.js\").FrameState} frameState FrameState.\r\n   * @protected\r\n   */\r\n  calculateMatrices2D(frameState) {\r\n    const viewState = frameState.viewState;\r\n    const coordinateToPixelTransform = frameState.coordinateToPixelTransform;\r\n    const pixelToCoordinateTransform = frameState.pixelToCoordinateTransform;\r\n\r\n    composeTransform(\r\n      coordinateToPixelTransform,\r\n      frameState.size[0] / 2,\r\n      frameState.size[1] / 2,\r\n      1 / viewState.resolution,\r\n      -1 / viewState.resolution,\r\n      -viewState.rotation,\r\n      -viewState.center[0],\r\n      -viewState.center[1],\r\n    );\r\n\r\n    makeInverse(pixelToCoordinateTransform, coordinateToPixelTransform);\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\r\n   * @param {import(\"../Map.js\").FrameState} frameState FrameState.\r\n   * @param {number} hitTolerance Hit tolerance in pixels.\r\n   * @param {boolean} checkWrapped Check for wrapped geometries.\r\n   * @param {import(\"./vector.js\").FeatureCallback<T>} callback Feature callback.\r\n   * @param {S} thisArg Value to use as `this` when executing `callback`.\r\n   * @param {function(this: U, import(\"../layer/Layer.js\").default): boolean} layerFilter Layer filter\r\n   *     function, only layers which are visible and for which this function\r\n   *     returns `true` will be tested for features.  By default, all visible\r\n   *     layers will be tested.\r\n   * @param {U} thisArg2 Value to use as `this` when executing `layerFilter`.\r\n   * @return {T|undefined} Callback result.\r\n   * @template S,T,U\r\n   */\r\n  forEachFeatureAtCoordinate(\r\n    coordinate,\r\n    frameState,\r\n    hitTolerance,\r\n    checkWrapped,\r\n    callback,\r\n    thisArg,\r\n    layerFilter,\r\n    thisArg2,\r\n  ) {\r\n    let result;\r\n    const viewState = frameState.viewState;\r\n\r\n    /**\r\n     * @param {boolean} managed Managed layer.\r\n     * @param {import(\"../Feature.js\").FeatureLike} feature Feature.\r\n     * @param {import(\"../layer/Layer.js\").default} layer Layer.\r\n     * @param {import(\"../geom/Geometry.js\").default} geometry Geometry.\r\n     * @return {T|undefined} Callback result.\r\n     */\r\n    function forEachFeatureAtCoordinate(managed, feature, layer, geometry) {\r\n      return callback.call(thisArg, feature, managed ? layer : null, geometry);\r\n    }\r\n\r\n    const projection = viewState.projection;\r\n\r\n    const translatedCoordinate = wrapX(coordinate.slice(), projection);\r\n    const offsets = [[0, 0]];\r\n    if (projection.canWrapX() && checkWrapped) {\r\n      const projectionExtent = projection.getExtent();\r\n      const worldWidth = getWidth(projectionExtent);\r\n      offsets.push([-worldWidth, 0], [worldWidth, 0]);\r\n    }\r\n\r\n    const layerStates = frameState.layerStatesArray;\r\n    const numLayers = layerStates.length;\r\n\r\n    const matches = /** @type {Array<HitMatch<T>>} */ ([]);\r\n    const tmpCoord = [];\r\n    for (let i = 0; i < offsets.length; i++) {\r\n      for (let j = numLayers - 1; j >= 0; --j) {\r\n        const layerState = layerStates[j];\r\n        const layer = layerState.layer;\r\n        if (\r\n          layer.hasRenderer() &&\r\n          inView(layerState, viewState) &&\r\n          layerFilter.call(thisArg2, layer)\r\n        ) {\r\n          const layerRenderer = layer.getRenderer();\r\n          const source = layer.getSource();\r\n          if (layerRenderer && source) {\r\n            const coordinates = source.getWrapX()\r\n              ? translatedCoordinate\r\n              : coordinate;\r\n            const callback = forEachFeatureAtCoordinate.bind(\r\n              null,\r\n              layerState.managed,\r\n            );\r\n            tmpCoord[0] = coordinates[0] + offsets[i][0];\r\n            tmpCoord[1] = coordinates[1] + offsets[i][1];\r\n            result = layerRenderer.forEachFeatureAtCoordinate(\r\n              tmpCoord,\r\n              frameState,\r\n              hitTolerance,\r\n              callback,\r\n              matches,\r\n            );\r\n          }\r\n          if (result) {\r\n            return result;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    if (matches.length === 0) {\r\n      return undefined;\r\n    }\r\n    const order = 1 / matches.length;\r\n    matches.forEach((m, i) => (m.distanceSq += i * order));\r\n    matches.sort((a, b) => a.distanceSq - b.distanceSq);\r\n    matches.some((m) => {\r\n      return (result = m.callback(m.feature, m.layer, m.geometry));\r\n    });\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\r\n   * @param {import(\"../Map.js\").FrameState} frameState FrameState.\r\n   * @param {number} hitTolerance Hit tolerance in pixels.\r\n   * @param {boolean} checkWrapped Check for wrapped geometries.\r\n   * @param {function(this: U, import(\"../layer/Layer.js\").default): boolean} layerFilter Layer filter\r\n   *     function, only layers which are visible and for which this function\r\n   *     returns `true` will be tested for features.  By default, all visible\r\n   *     layers will be tested.\r\n   * @param {U} thisArg Value to use as `this` when executing `layerFilter`.\r\n   * @return {boolean} Is there a feature at the given coordinate?\r\n   * @template U\r\n   */\r\n  hasFeatureAtCoordinate(\r\n    coordinate,\r\n    frameState,\r\n    hitTolerance,\r\n    checkWrapped,\r\n    layerFilter,\r\n    thisArg,\r\n  ) {\r\n    const hasFeature = this.forEachFeatureAtCoordinate(\r\n      coordinate,\r\n      frameState,\r\n      hitTolerance,\r\n      checkWrapped,\r\n      TRUE,\r\n      this,\r\n      layerFilter,\r\n      thisArg,\r\n    );\r\n\r\n    return hasFeature !== undefined;\r\n  }\r\n\r\n  /**\r\n   * @return {import(\"../Map.js\").default} Map.\r\n   */\r\n  getMap() {\r\n    return this.map_;\r\n  }\r\n\r\n  /**\r\n   * Render.\r\n   * @abstract\r\n   * @param {?import(\"../Map.js\").FrameState} frameState Frame state.\r\n   */\r\n  renderFrame(frameState) {\r\n    abstract();\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../Map.js\").FrameState} frameState Frame state.\r\n   * @protected\r\n   */\r\n  scheduleExpireIconCache(frameState) {\r\n    if (iconImageCache.canExpireCache()) {\r\n      frameState.postRenderFunctions.push(expireIconCache);\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * @param {import(\"../Map.js\").default} map Map.\r\n * @param {import(\"../Map.js\").FrameState} frameState Frame state.\r\n */\r\nfunction expireIconCache(map, frameState) {\r\n  iconImageCache.expire();\r\n}\r\n\r\nexport default MapRenderer;\r\n","/**\r\n * @module ol/format/GeoJSON\r\n */\r\n\r\nimport Feature from '../Feature.js';\r\nimport {getLayoutForStride} from '../geom/SimpleGeometry.js';\r\nimport {\r\n  deflateCoordinatesArray,\r\n  deflateMultiCoordinatesArray,\r\n} from '../geom/flat/deflate.js';\r\nimport {isEmpty} from '../obj.js';\r\nimport {get as getProjection} from '../proj.js';\r\nimport RenderFeature from '../render/Feature.js';\r\nimport {\r\n  createGeometry,\r\n  createRenderFeature,\r\n  transformGeometryWithOptions,\r\n} from './Feature.js';\r\nimport JSONFeature from './JSONFeature.js';\r\n\r\n/**\r\n * @typedef {import(\"geojson\").GeoJSON} GeoJSONObject\r\n * @typedef {import(\"geojson\").Feature} GeoJSONFeature\r\n * @typedef {import(\"geojson\").FeatureCollection} GeoJSONFeatureCollection\r\n * @typedef {import(\"geojson\").Geometry} GeoJSONGeometry\r\n * @typedef {import(\"geojson\").Point} GeoJSONPoint\r\n * @typedef {import(\"geojson\").LineString} GeoJSONLineString\r\n * @typedef {import(\"geojson\").Polygon} GeoJSONPolygon\r\n * @typedef {import(\"geojson\").MultiPoint} GeoJSONMultiPoint\r\n * @typedef {import(\"geojson\").MultiLineString} GeoJSONMultiLineString\r\n * @typedef {import(\"geojson\").MultiPolygon} GeoJSONMultiPolygon\r\n * @typedef {import(\"geojson\").GeometryCollection} GeoJSONGeometryCollection\r\n */\r\n\r\n/**\r\n * @template {import(\"../Feature.js\").FeatureLike} [FeatureType=import(\"../Feature.js\").default]\r\n * @typedef {Object} Options\r\n *\r\n * @property {import(\"../proj.js\").ProjectionLike} [dataProjection='EPSG:4326'] Default data projection.\r\n * @property {import(\"../proj.js\").ProjectionLike} [featureProjection] Projection for features read or\r\n * written by the format.  Options passed to read or write methods will take precedence.\r\n * @property {string} [geometryName] Geometry name to use when creating features.\r\n * @property {boolean} [extractGeometryName=false] Certain GeoJSON providers include\r\n * the geometry_name field in the feature GeoJSON. If set to `true` the GeoJSON reader\r\n * will look for that field to set the geometry name. If both this field is set to `true`\r\n * and a `geometryName` is provided, the `geometryName` will take precedence.\r\n * @property {import('./Feature.js').FeatureToFeatureClass<FeatureType>} [featureClass] Feature class\r\n * to be used when reading features. The default is {@link module:ol/Feature~Feature}. If performance is\r\n * the primary concern, and features are not going to be modified or round-tripped through the format,\r\n * consider using {@link module:ol/render/Feature~RenderFeature}\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * Feature format for reading and writing data in the GeoJSON format.\r\n *\r\n * @template {import('../Feature.js').FeatureLike} [FeatureType=import(\"../Feature.js\").default]\r\n * @extends {JSONFeature<FeatureType>}\r\n * @api\r\n */\r\nclass GeoJSON extends JSONFeature {\r\n  /**\r\n   * @param {Options<FeatureType>} [options] Options.\r\n   */\r\n  constructor(options) {\r\n    options = options ? options : {};\r\n\r\n    super();\r\n\r\n    /**\r\n     * @type {import(\"../proj/Projection.js\").default}\r\n     */\r\n    this.dataProjection = getProjection(\r\n      options.dataProjection ? options.dataProjection : 'EPSG:4326',\r\n    );\r\n\r\n    if (options.featureProjection) {\r\n      /**\r\n       * @type {import(\"../proj/Projection.js\").default}\r\n       */\r\n      this.defaultFeatureProjection = getProjection(options.featureProjection);\r\n    }\r\n\r\n    if (options.featureClass) {\r\n      this.featureClass = options.featureClass;\r\n    }\r\n\r\n    /**\r\n     * Name of the geometry attribute for features.\r\n     * @type {string|undefined}\r\n     * @private\r\n     */\r\n    this.geometryName_ = options.geometryName;\r\n\r\n    /**\r\n     * Look for the `geometry_name` in the feature GeoJSON\r\n     * @type {boolean|undefined}\r\n     * @private\r\n     */\r\n    this.extractGeometryName_ = options.extractGeometryName;\r\n\r\n    this.supportedMediaTypes = [\r\n      'application/geo+json',\r\n      'application/vnd.geo+json',\r\n    ];\r\n  }\r\n\r\n  /**\r\n   * @param {Object} object Object.\r\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\r\n   * @protected\r\n   * @return {FeatureType|Array<FeatureType>} Feature.\r\n   * @override\r\n   */\r\n  readFeatureFromObject(object, options) {\r\n    /**\r\n     * @type {GeoJSONFeature}\r\n     */\r\n    let geoJSONFeature = null;\r\n    if (object['type'] === 'Feature') {\r\n      geoJSONFeature = /** @type {GeoJSONFeature} */ (object);\r\n    } else {\r\n      geoJSONFeature = {\r\n        'type': 'Feature',\r\n        'geometry': /** @type {GeoJSONGeometry} */ (object),\r\n        'properties': null,\r\n      };\r\n    }\r\n\r\n    const geometry = readGeometryInternal(geoJSONFeature['geometry'], options);\r\n    if (this.featureClass === RenderFeature) {\r\n      return /** @type {FeatureType|Array<FeatureType>} */ (\r\n        createRenderFeature(\r\n          {\r\n            geometry,\r\n            id: geoJSONFeature['id'],\r\n            properties: geoJSONFeature['properties'],\r\n          },\r\n          options,\r\n        )\r\n      );\r\n    }\r\n\r\n    const feature = new Feature();\r\n    if (this.geometryName_) {\r\n      feature.setGeometryName(this.geometryName_);\r\n    } else if (this.extractGeometryName_ && geoJSONFeature['geometry_name']) {\r\n      feature.setGeometryName(geoJSONFeature['geometry_name']);\r\n    }\r\n    feature.setGeometry(createGeometry(geometry, options));\r\n\r\n    if ('id' in geoJSONFeature) {\r\n      feature.setId(geoJSONFeature['id']);\r\n    }\r\n\r\n    if (geoJSONFeature['properties']) {\r\n      feature.setProperties(geoJSONFeature['properties'], true);\r\n    }\r\n    return /** @type {FeatureType|Array<FeatureType>} */ (feature);\r\n  }\r\n\r\n  /**\r\n   * @param {Object} object Object.\r\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\r\n   * @protected\r\n   * @return {Array<FeatureType>} Features.\r\n   * @override\r\n   */\r\n  readFeaturesFromObject(object, options) {\r\n    const geoJSONObject = /** @type {GeoJSONObject} */ (object);\r\n    let features = null;\r\n    if (geoJSONObject['type'] === 'FeatureCollection') {\r\n      const geoJSONFeatureCollection = /** @type {GeoJSONFeatureCollection} */ (\r\n        object\r\n      );\r\n      features = [];\r\n      const geoJSONFeatures = geoJSONFeatureCollection['features'];\r\n      for (let i = 0, ii = geoJSONFeatures.length; i < ii; ++i) {\r\n        const featureObject = this.readFeatureFromObject(\r\n          geoJSONFeatures[i],\r\n          options,\r\n        );\r\n        if (!featureObject) {\r\n          continue;\r\n        }\r\n        features.push(featureObject);\r\n      }\r\n    } else {\r\n      features = [this.readFeatureFromObject(object, options)];\r\n    }\r\n    return /** @type {Array<FeatureType>} */ (features.flat());\r\n  }\r\n\r\n  /**\r\n   * @param {GeoJSONGeometry} object Object.\r\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\r\n   * @protected\r\n   * @return {import(\"../geom/Geometry.js\").default} Geometry.\r\n   * @override\r\n   */\r\n  readGeometryFromObject(object, options) {\r\n    return readGeometry(object, options);\r\n  }\r\n\r\n  /**\r\n   * @param {Object} object Object.\r\n   * @protected\r\n   * @return {import(\"../proj/Projection.js\").default} Projection.\r\n   * @override\r\n   */\r\n  readProjectionFromObject(object) {\r\n    const crs = object['crs'];\r\n    let projection;\r\n    if (crs) {\r\n      if (crs['type'] == 'name') {\r\n        projection = getProjection(crs['properties']['name']);\r\n      } else if (crs['type'] === 'EPSG') {\r\n        projection = getProjection('EPSG:' + crs['properties']['code']);\r\n      } else {\r\n        throw new Error('Unknown SRS type');\r\n      }\r\n    } else {\r\n      projection = this.dataProjection;\r\n    }\r\n    return /** @type {import(\"../proj/Projection.js\").default} */ (projection);\r\n  }\r\n\r\n  /**\r\n   * Encode a feature as a GeoJSON Feature object.\r\n   *\r\n   * @param {import(\"../Feature.js\").default} feature Feature.\r\n   * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\r\n   * @return {GeoJSONFeature} Object.\r\n   * @api\r\n   * @override\r\n   */\r\n  writeFeatureObject(feature, options) {\r\n    options = this.adaptOptions(options);\r\n\r\n    /** @type {GeoJSONFeature} */\r\n    const object = {\r\n      'type': 'Feature',\r\n      geometry: null,\r\n      properties: null,\r\n    };\r\n\r\n    const id = feature.getId();\r\n    if (id !== undefined) {\r\n      object.id = id;\r\n    }\r\n\r\n    if (!feature.hasProperties()) {\r\n      return object;\r\n    }\r\n\r\n    const properties = feature.getProperties();\r\n    const geometry = feature.getGeometry();\r\n    if (geometry) {\r\n      object.geometry = writeGeometry(geometry, options);\r\n\r\n      delete properties[feature.getGeometryName()];\r\n    }\r\n\r\n    if (!isEmpty(properties)) {\r\n      object.properties = properties;\r\n    }\r\n\r\n    return object;\r\n  }\r\n\r\n  /**\r\n   * Encode an array of features as a GeoJSON object.\r\n   *\r\n   * @param {Array<import(\"../Feature.js\").default>} features Features.\r\n   * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\r\n   * @return {GeoJSONFeatureCollection} GeoJSON Object.\r\n   * @api\r\n   * @override\r\n   */\r\n  writeFeaturesObject(features, options) {\r\n    options = this.adaptOptions(options);\r\n    const objects = [];\r\n    for (let i = 0, ii = features.length; i < ii; ++i) {\r\n      objects.push(this.writeFeatureObject(features[i], options));\r\n    }\r\n    return {\r\n      type: 'FeatureCollection',\r\n      features: objects,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Encode a geometry as a GeoJSON object.\r\n   *\r\n   * @param {import(\"../geom/Geometry.js\").default} geometry Geometry.\r\n   * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\r\n   * @return {GeoJSONGeometry|GeoJSONGeometryCollection} Object.\r\n   * @api\r\n   * @override\r\n   */\r\n  writeGeometryObject(geometry, options) {\r\n    return writeGeometry(geometry, this.adaptOptions(options));\r\n  }\r\n}\r\n\r\n/**\r\n * @param {GeoJSONGeometry|GeoJSONGeometryCollection} object Object.\r\n * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\r\n * @return {import(\"./Feature.js\").GeometryObject} Geometry.\r\n */\r\nfunction readGeometryInternal(object, options) {\r\n  if (!object) {\r\n    return null;\r\n  }\r\n\r\n  /** @type {import(\"./Feature.js\").GeometryObject} */\r\n  let geometry;\r\n  switch (object['type']) {\r\n    case 'Point': {\r\n      geometry = readPointGeometry(/** @type {GeoJSONPoint} */ (object));\r\n      break;\r\n    }\r\n    case 'LineString': {\r\n      geometry = readLineStringGeometry(\r\n        /** @type {GeoJSONLineString} */ (object),\r\n      );\r\n      break;\r\n    }\r\n    case 'Polygon': {\r\n      geometry = readPolygonGeometry(/** @type {GeoJSONPolygon} */ (object));\r\n      break;\r\n    }\r\n    case 'MultiPoint': {\r\n      geometry = readMultiPointGeometry(\r\n        /** @type {GeoJSONMultiPoint} */ (object),\r\n      );\r\n      break;\r\n    }\r\n    case 'MultiLineString': {\r\n      geometry = readMultiLineStringGeometry(\r\n        /** @type {GeoJSONMultiLineString} */ (object),\r\n      );\r\n      break;\r\n    }\r\n    case 'MultiPolygon': {\r\n      geometry = readMultiPolygonGeometry(\r\n        /** @type {GeoJSONMultiPolygon} */ (object),\r\n      );\r\n      break;\r\n    }\r\n    case 'GeometryCollection': {\r\n      geometry = readGeometryCollectionGeometry(\r\n        /** @type {GeoJSONGeometryCollection} */ (object),\r\n      );\r\n      break;\r\n    }\r\n    default: {\r\n      throw new Error('Unsupported GeoJSON type: ' + object['type']);\r\n    }\r\n  }\r\n  return geometry;\r\n}\r\n\r\n/**\r\n * @param {GeoJSONGeometry|GeoJSONGeometryCollection} object Object.\r\n * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\r\n * @return {import(\"../geom/Geometry.js\").default} Geometry.\r\n */\r\nfunction readGeometry(object, options) {\r\n  const geometryObject = readGeometryInternal(object, options);\r\n  return createGeometry(geometryObject, options);\r\n}\r\n\r\n/**\r\n * @param {GeoJSONGeometryCollection} object Object.\r\n * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\r\n * @return {import(\"./Feature.js\").GeometryCollectionObject} Geometry collection.\r\n */\r\nfunction readGeometryCollectionGeometry(object, options) {\r\n  const geometries = object['geometries'].map(\r\n    /**\r\n     * @param {GeoJSONGeometry} geometry Geometry.\r\n     * @return {import(\"./Feature.js\").GeometryObject} geometry Geometry.\r\n     */\r\n    function (geometry) {\r\n      return readGeometryInternal(geometry, options);\r\n    },\r\n  );\r\n  return geometries;\r\n}\r\n\r\n/**\r\n * @param {GeoJSONPoint} object Input object.\r\n * @return {import(\"./Feature.js\").GeometryObject} Point geometry.\r\n */\r\nfunction readPointGeometry(object) {\r\n  const flatCoordinates = object['coordinates'];\r\n  return {\r\n    type: 'Point',\r\n    flatCoordinates,\r\n    layout: getLayoutForStride(flatCoordinates.length),\r\n  };\r\n}\r\n\r\n/**\r\n * @param {GeoJSONLineString} object Object.\r\n * @return {import(\"./Feature.js\").GeometryObject} LineString geometry.\r\n */\r\nfunction readLineStringGeometry(object) {\r\n  const coordinates = object['coordinates'];\r\n  const flatCoordinates = coordinates.flat();\r\n  return {\r\n    type: 'LineString',\r\n    flatCoordinates,\r\n    ends: [flatCoordinates.length],\r\n    layout: getLayoutForStride(coordinates[0]?.length || 2),\r\n  };\r\n}\r\n\r\n/**\r\n * @param {GeoJSONMultiLineString} object Object.\r\n * @return {import(\"./Feature.js\").GeometryObject} MultiLineString geometry.\r\n */\r\nfunction readMultiLineStringGeometry(object) {\r\n  const coordinates = object['coordinates'];\r\n  const stride = coordinates[0]?.[0]?.length || 2;\r\n  const flatCoordinates = [];\r\n  const ends = deflateCoordinatesArray(flatCoordinates, 0, coordinates, stride);\r\n  return {\r\n    type: 'MultiLineString',\r\n    flatCoordinates,\r\n    ends,\r\n    layout: getLayoutForStride(stride),\r\n  };\r\n}\r\n\r\n/**\r\n * @param {GeoJSONMultiPoint} object Object.\r\n * @return {import(\"./Feature.js\").GeometryObject} MultiPoint geometry.\r\n */\r\nfunction readMultiPointGeometry(object) {\r\n  const coordinates = object['coordinates'];\r\n  return {\r\n    type: 'MultiPoint',\r\n    flatCoordinates: coordinates.flat(),\r\n    layout: getLayoutForStride(coordinates[0]?.length || 2),\r\n  };\r\n}\r\n\r\n/**\r\n * @param {GeoJSONMultiPolygon} object Object.\r\n * @return {import(\"./Feature.js\").GeometryObject} MultiPolygon geometry.\r\n */\r\nfunction readMultiPolygonGeometry(object) {\r\n  const coordinates = object['coordinates'];\r\n  const flatCoordinates = [];\r\n  const stride = coordinates[0]?.[0]?.[0].length || 2;\r\n  const endss = deflateMultiCoordinatesArray(\r\n    flatCoordinates,\r\n    0,\r\n    coordinates,\r\n    stride,\r\n  );\r\n  return {\r\n    type: 'MultiPolygon',\r\n    flatCoordinates,\r\n    ends: endss,\r\n    layout: getLayoutForStride(stride),\r\n  };\r\n}\r\n\r\n/**\r\n * @param {GeoJSONPolygon} object Object.\r\n * @return {import(\"./Feature.js\").GeometryObject} Polygon.\r\n */\r\nfunction readPolygonGeometry(object) {\r\n  const coordinates = object['coordinates'];\r\n  const flatCoordinates = [];\r\n  const stride = coordinates[0]?.[0]?.length;\r\n  const ends = deflateCoordinatesArray(flatCoordinates, 0, coordinates, stride);\r\n  return {\r\n    type: 'Polygon',\r\n    flatCoordinates,\r\n    ends,\r\n    layout: getLayoutForStride(stride),\r\n  };\r\n}\r\n\r\n/**\r\n * @param {import(\"../geom/Geometry.js\").default} geometry Geometry.\r\n * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\r\n * @return {GeoJSONGeometry} GeoJSON geometry.\r\n */\r\nfunction writeGeometry(geometry, options) {\r\n  geometry = transformGeometryWithOptions(geometry, true, options);\r\n\r\n  const type = geometry.getType();\r\n\r\n  /** @type {GeoJSONGeometry} */\r\n  let geoJSON;\r\n  switch (type) {\r\n    case 'Point': {\r\n      geoJSON = writePointGeometry(\r\n        /** @type {import(\"../geom/Point.js\").default} */ (geometry),\r\n        options,\r\n      );\r\n      break;\r\n    }\r\n    case 'LineString': {\r\n      geoJSON = writeLineStringGeometry(\r\n        /** @type {import(\"../geom/LineString.js\").default} */ (geometry),\r\n        options,\r\n      );\r\n      break;\r\n    }\r\n    case 'Polygon': {\r\n      geoJSON = writePolygonGeometry(\r\n        /** @type {import(\"../geom/Polygon.js\").default} */ (geometry),\r\n        options,\r\n      );\r\n      break;\r\n    }\r\n    case 'MultiPoint': {\r\n      geoJSON = writeMultiPointGeometry(\r\n        /** @type {import(\"../geom/MultiPoint.js\").default} */ (geometry),\r\n        options,\r\n      );\r\n      break;\r\n    }\r\n    case 'MultiLineString': {\r\n      geoJSON = writeMultiLineStringGeometry(\r\n        /** @type {import(\"../geom/MultiLineString.js\").default} */ (geometry),\r\n        options,\r\n      );\r\n      break;\r\n    }\r\n    case 'MultiPolygon': {\r\n      geoJSON = writeMultiPolygonGeometry(\r\n        /** @type {import(\"../geom/MultiPolygon.js\").default} */ (geometry),\r\n        options,\r\n      );\r\n      break;\r\n    }\r\n    case 'GeometryCollection': {\r\n      geoJSON = writeGeometryCollectionGeometry(\r\n        /** @type {import(\"../geom/GeometryCollection.js\").default} */ (\r\n          geometry\r\n        ),\r\n        options,\r\n      );\r\n      break;\r\n    }\r\n    case 'Circle': {\r\n      geoJSON = {\r\n        type: 'GeometryCollection',\r\n        geometries: [],\r\n      };\r\n      break;\r\n    }\r\n    default: {\r\n      throw new Error('Unsupported geometry type: ' + type);\r\n    }\r\n  }\r\n  return geoJSON;\r\n}\r\n\r\n/**\r\n * @param {import(\"../geom/GeometryCollection.js\").default} geometry Geometry.\r\n * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\r\n * @return {GeoJSONGeometryCollection} GeoJSON geometry collection.\r\n */\r\nfunction writeGeometryCollectionGeometry(geometry, options) {\r\n  options = Object.assign({}, options);\r\n  delete options.featureProjection;\r\n  const geometries = geometry.getGeometriesArray().map(function (geometry) {\r\n    return writeGeometry(geometry, options);\r\n  });\r\n  return {\r\n    type: 'GeometryCollection',\r\n    geometries: geometries,\r\n  };\r\n}\r\n\r\n/**\r\n * @param {import(\"../geom/LineString.js\").default} geometry Geometry.\r\n * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\r\n * @return {GeoJSONGeometry} GeoJSON geometry.\r\n */\r\nfunction writeLineStringGeometry(geometry, options) {\r\n  return {\r\n    type: 'LineString',\r\n    coordinates: geometry.getCoordinates(),\r\n  };\r\n}\r\n\r\n/**\r\n * @param {import(\"../geom/MultiLineString.js\").default} geometry Geometry.\r\n * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\r\n * @return {GeoJSONGeometry} GeoJSON geometry.\r\n */\r\nfunction writeMultiLineStringGeometry(geometry, options) {\r\n  return {\r\n    type: 'MultiLineString',\r\n    coordinates: geometry.getCoordinates(),\r\n  };\r\n}\r\n\r\n/**\r\n * @param {import(\"../geom/MultiPoint.js\").default} geometry Geometry.\r\n * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\r\n * @return {GeoJSONGeometry} GeoJSON geometry.\r\n */\r\nfunction writeMultiPointGeometry(geometry, options) {\r\n  return {\r\n    type: 'MultiPoint',\r\n    coordinates: geometry.getCoordinates(),\r\n  };\r\n}\r\n\r\n/**\r\n * @param {import(\"../geom/MultiPolygon.js\").default} geometry Geometry.\r\n * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\r\n * @return {GeoJSONGeometry} GeoJSON geometry.\r\n */\r\nfunction writeMultiPolygonGeometry(geometry, options) {\r\n  let right;\r\n  if (options) {\r\n    right = options.rightHanded;\r\n  }\r\n  return {\r\n    type: 'MultiPolygon',\r\n    coordinates: geometry.getCoordinates(right),\r\n  };\r\n}\r\n\r\n/**\r\n * @param {import(\"../geom/Point.js\").default} geometry Geometry.\r\n * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\r\n * @return {GeoJSONGeometry} GeoJSON geometry.\r\n */\r\nfunction writePointGeometry(geometry, options) {\r\n  return {\r\n    type: 'Point',\r\n    coordinates: geometry.getCoordinates(),\r\n  };\r\n}\r\n\r\n/**\r\n * @param {import(\"../geom/Polygon.js\").default} geometry Geometry.\r\n * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\r\n * @return {GeoJSONGeometry} GeoJSON geometry.\r\n */\r\nfunction writePolygonGeometry(geometry, options) {\r\n  let right;\r\n  if (options) {\r\n    right = options.rightHanded;\r\n  }\r\n  return {\r\n    type: 'Polygon',\r\n    coordinates: geometry.getCoordinates(right),\r\n  };\r\n}\r\n\r\nexport default GeoJSON;\r\n","/**\r\n * @module ol/render/Feature\r\n */\r\nimport Feature from '../Feature.js';\r\nimport {extend} from '../array.js';\r\nimport {\r\n  createOrUpdateFromCoordinate,\r\n  createOrUpdateFromFlatCoordinates,\r\n  getCenter,\r\n  getHeight,\r\n} from '../extent.js';\r\nimport {memoizeOne} from '../functions.js';\r\nimport {linearRingss as linearRingssCenter} from '../geom/flat/center.js';\r\nimport {\r\n  getInteriorPointOfArray,\r\n  getInteriorPointsOfMultiArray,\r\n} from '../geom/flat/interiorpoint.js';\r\nimport {interpolatePoint} from '../geom/flat/interpolate.js';\r\nimport {inflateEnds} from '../geom/flat/orient.js';\r\nimport {\r\n  douglasPeucker,\r\n  douglasPeuckerArray,\r\n  quantizeArray,\r\n} from '../geom/flat/simplify.js';\r\nimport {transform2D} from '../geom/flat/transform.js';\r\nimport {\r\n  LineString,\r\n  MultiLineString,\r\n  MultiPoint,\r\n  MultiPolygon,\r\n  Point,\r\n  Polygon,\r\n} from '../geom.js';\r\nimport {get as getProjection} from '../proj.js';\r\nimport {\r\n  compose as composeTransform,\r\n  create as createTransform,\r\n} from '../transform.js';\r\n\r\n/**\r\n * @typedef {'Point' | 'LineString' | 'LinearRing' | 'Polygon' | 'MultiPoint' | 'MultiLineString'} Type\r\n * The geometry type.  One of `'Point'`, `'LineString'`, `'LinearRing'`,\r\n * `'Polygon'`, `'MultiPoint'` or 'MultiLineString'`.\r\n */\r\n\r\n/**\r\n * @type {import(\"../transform.js\").Transform}\r\n */\r\nconst tmpTransform = createTransform();\r\n\r\n/**\r\n * Lightweight, read-only, {@link module:ol/Feature~Feature} and {@link module:ol/geom/Geometry~Geometry} like\r\n * structure, optimized for vector tile rendering and styling. Geometry access\r\n * through the API is limited to getting the type and extent of the geometry.\r\n */\r\nclass RenderFeature {\r\n  /**\r\n   * @param {Type} type Geometry type.\r\n   * @param {Array<number>} flatCoordinates Flat coordinates. These always need\r\n   *     to be right-handed for polygons.\r\n   * @param {Array<number>} ends Ends.\r\n   * @param {number} stride Stride.\r\n   * @param {Object<string, *>} properties Properties.\r\n   * @param {number|string|undefined} id Feature id.\r\n   */\r\n  constructor(type, flatCoordinates, ends, stride, properties, id) {\r\n    /**\r\n     * @type {import(\"../style/Style.js\").StyleFunction|undefined}\r\n     */\r\n    this.styleFunction;\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"../extent.js\").Extent|undefined}\r\n     */\r\n    this.extent_;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number|string|undefined}\r\n     */\r\n    this.id_ = id;\r\n\r\n    /**\r\n     * @private\r\n     * @type {Type}\r\n     */\r\n    this.type_ = type;\r\n\r\n    /**\r\n     * @private\r\n     * @type {Array<number>}\r\n     */\r\n    this.flatCoordinates_ = flatCoordinates;\r\n\r\n    /**\r\n     * @private\r\n     * @type {Array<number>}\r\n     */\r\n    this.flatInteriorPoints_ = null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {Array<number>}\r\n     */\r\n    this.flatMidpoints_ = null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {Array<number>|null}\r\n     */\r\n    this.ends_ = ends || null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {Object<string, *>}\r\n     */\r\n    this.properties_ = properties;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.squaredTolerance_;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.stride_ = stride;\r\n\r\n    /**\r\n     * @private\r\n     * @type {RenderFeature}\r\n     */\r\n    this.simplifiedGeometry_;\r\n  }\r\n\r\n  /**\r\n   * Get a feature property by its key.\r\n   * @param {string} key Key\r\n   * @return {*} Value for the requested key.\r\n   * @api\r\n   */\r\n  get(key) {\r\n    return this.properties_[key];\r\n  }\r\n\r\n  /**\r\n   * Get the extent of this feature's geometry.\r\n   * @return {import(\"../extent.js\").Extent} Extent.\r\n   * @api\r\n   */\r\n  getExtent() {\r\n    if (!this.extent_) {\r\n      this.extent_ =\r\n        this.type_ === 'Point'\r\n          ? createOrUpdateFromCoordinate(this.flatCoordinates_)\r\n          : createOrUpdateFromFlatCoordinates(\r\n              this.flatCoordinates_,\r\n              0,\r\n              this.flatCoordinates_.length,\r\n              2,\r\n            );\r\n    }\r\n    return this.extent_;\r\n  }\r\n\r\n  /**\r\n   * @return {Array<number>} Flat interior points.\r\n   */\r\n  getFlatInteriorPoint() {\r\n    if (!this.flatInteriorPoints_) {\r\n      const flatCenter = getCenter(this.getExtent());\r\n      this.flatInteriorPoints_ = getInteriorPointOfArray(\r\n        this.flatCoordinates_,\r\n        0,\r\n        this.ends_,\r\n        2,\r\n        flatCenter,\r\n        0,\r\n      );\r\n    }\r\n    return this.flatInteriorPoints_;\r\n  }\r\n\r\n  /**\r\n   * @return {Array<number>} Flat interior points.\r\n   */\r\n  getFlatInteriorPoints() {\r\n    if (!this.flatInteriorPoints_) {\r\n      const ends = inflateEnds(this.flatCoordinates_, this.ends_);\r\n      const flatCenters = linearRingssCenter(this.flatCoordinates_, 0, ends, 2);\r\n      this.flatInteriorPoints_ = getInteriorPointsOfMultiArray(\r\n        this.flatCoordinates_,\r\n        0,\r\n        ends,\r\n        2,\r\n        flatCenters,\r\n      );\r\n    }\r\n    return this.flatInteriorPoints_;\r\n  }\r\n\r\n  /**\r\n   * @return {Array<number>} Flat midpoint.\r\n   */\r\n  getFlatMidpoint() {\r\n    if (!this.flatMidpoints_) {\r\n      this.flatMidpoints_ = interpolatePoint(\r\n        this.flatCoordinates_,\r\n        0,\r\n        this.flatCoordinates_.length,\r\n        2,\r\n        0.5,\r\n      );\r\n    }\r\n    return this.flatMidpoints_;\r\n  }\r\n\r\n  /**\r\n   * @return {Array<number>} Flat midpoints.\r\n   */\r\n  getFlatMidpoints() {\r\n    if (!this.flatMidpoints_) {\r\n      this.flatMidpoints_ = [];\r\n      const flatCoordinates = this.flatCoordinates_;\r\n      let offset = 0;\r\n      const ends = /** @type {Array<number>} */ (this.ends_);\r\n      for (let i = 0, ii = ends.length; i < ii; ++i) {\r\n        const end = ends[i];\r\n        const midpoint = interpolatePoint(flatCoordinates, offset, end, 2, 0.5);\r\n        extend(this.flatMidpoints_, midpoint);\r\n        offset = end;\r\n      }\r\n    }\r\n    return this.flatMidpoints_;\r\n  }\r\n\r\n  /**\r\n   * Get the feature identifier.  This is a stable identifier for the feature and\r\n   * is set when reading data from a remote source.\r\n   * @return {number|string|undefined} Id.\r\n   * @api\r\n   */\r\n  getId() {\r\n    return this.id_;\r\n  }\r\n\r\n  /**\r\n   * @return {Array<number>} Flat coordinates.\r\n   */\r\n  getOrientedFlatCoordinates() {\r\n    return this.flatCoordinates_;\r\n  }\r\n\r\n  /**\r\n   * For API compatibility with {@link module:ol/Feature~Feature}, this method is useful when\r\n   * determining the geometry type in style function (see {@link #getType}).\r\n   * @return {RenderFeature} Feature.\r\n   * @api\r\n   */\r\n  getGeometry() {\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @param {number} squaredTolerance Squared tolerance.\r\n   * @return {RenderFeature} Simplified geometry.\r\n   */\r\n  getSimplifiedGeometry(squaredTolerance) {\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Get a transformed and simplified version of the geometry.\r\n   * @param {number} squaredTolerance Squared tolerance.\r\n   * @param {import(\"../proj.js\").TransformFunction} [transform] Optional transform function.\r\n   * @return {RenderFeature} Simplified geometry.\r\n   */\r\n  simplifyTransformed(squaredTolerance, transform) {\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Get the feature properties.\r\n   * @return {Object<string, *>} Feature properties.\r\n   * @api\r\n   */\r\n  getProperties() {\r\n    return this.properties_;\r\n  }\r\n\r\n  /**\r\n   * Get an object of all property names and values.  This has the same behavior as getProperties,\r\n   * but is here to conform with the {@link module:ol/Feature~Feature} interface.\r\n   * @return {Object<string, *>?} Object.\r\n   */\r\n  getPropertiesInternal() {\r\n    return this.properties_;\r\n  }\r\n\r\n  /**\r\n   * @return {number} Stride.\r\n   */\r\n  getStride() {\r\n    return this.stride_;\r\n  }\r\n\r\n  /**\r\n   * @return {import('../style/Style.js').StyleFunction|undefined} Style\r\n   */\r\n  getStyleFunction() {\r\n    return this.styleFunction;\r\n  }\r\n\r\n  /**\r\n   * Get the type of this feature's geometry.\r\n   * @return {Type} Geometry type.\r\n   * @api\r\n   */\r\n  getType() {\r\n    return this.type_;\r\n  }\r\n\r\n  /**\r\n   * Transform geometry coordinates from tile pixel space to projected.\r\n   *\r\n   * @param {import(\"../proj.js\").ProjectionLike} projection The data projection\r\n   */\r\n  transform(projection) {\r\n    projection = getProjection(projection);\r\n    const pixelExtent = projection.getExtent();\r\n    const projectedExtent = projection.getWorldExtent();\r\n    if (pixelExtent && projectedExtent) {\r\n      const scale = getHeight(projectedExtent) / getHeight(pixelExtent);\r\n      composeTransform(\r\n        tmpTransform,\r\n        projectedExtent[0],\r\n        projectedExtent[3],\r\n        scale,\r\n        -scale,\r\n        0,\r\n        0,\r\n        0,\r\n      );\r\n      transform2D(\r\n        this.flatCoordinates_,\r\n        0,\r\n        this.flatCoordinates_.length,\r\n        2,\r\n        tmpTransform,\r\n        this.flatCoordinates_,\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Apply a transform function to the coordinates of the geometry.\r\n   * The geometry is modified in place.\r\n   * If you do not want the geometry modified in place, first `clone()` it and\r\n   * then use this function on the clone.\r\n   * @param {import(\"../proj.js\").TransformFunction} transformFn Transform function.\r\n   */\r\n  applyTransform(transformFn) {\r\n    transformFn(this.flatCoordinates_, this.flatCoordinates_, this.stride_);\r\n  }\r\n\r\n  /**\r\n   * @return {RenderFeature} A cloned render feature.\r\n   */\r\n  clone() {\r\n    return new RenderFeature(\r\n      this.type_,\r\n      this.flatCoordinates_.slice(),\r\n      this.ends_?.slice(),\r\n      this.stride_,\r\n      Object.assign({}, this.properties_),\r\n      this.id_,\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @return {Array<number>|null} Ends.\r\n   */\r\n  getEnds() {\r\n    return this.ends_;\r\n  }\r\n\r\n  /**\r\n   * Add transform and resolution based geometry simplification to this instance.\r\n   * @return {RenderFeature} This render feature.\r\n   */\r\n  enableSimplifyTransformed() {\r\n    this.simplifyTransformed = memoizeOne((squaredTolerance, transform) => {\r\n      if (squaredTolerance === this.squaredTolerance_) {\r\n        return this.simplifiedGeometry_;\r\n      }\r\n      this.simplifiedGeometry_ = this.clone();\r\n      if (transform) {\r\n        this.simplifiedGeometry_.applyTransform(transform);\r\n      }\r\n      const simplifiedFlatCoordinates =\r\n        this.simplifiedGeometry_.getFlatCoordinates();\r\n      let simplifiedEnds;\r\n      switch (this.type_) {\r\n        case 'LineString':\r\n          simplifiedFlatCoordinates.length = douglasPeucker(\r\n            simplifiedFlatCoordinates,\r\n            0,\r\n            this.simplifiedGeometry_.flatCoordinates_.length,\r\n            this.simplifiedGeometry_.stride_,\r\n            squaredTolerance,\r\n            simplifiedFlatCoordinates,\r\n            0,\r\n          );\r\n          simplifiedEnds = [simplifiedFlatCoordinates.length];\r\n          break;\r\n        case 'MultiLineString':\r\n          simplifiedEnds = [];\r\n          simplifiedFlatCoordinates.length = douglasPeuckerArray(\r\n            simplifiedFlatCoordinates,\r\n            0,\r\n            this.simplifiedGeometry_.ends_,\r\n            this.simplifiedGeometry_.stride_,\r\n            squaredTolerance,\r\n            simplifiedFlatCoordinates,\r\n            0,\r\n            simplifiedEnds,\r\n          );\r\n          break;\r\n        case 'Polygon':\r\n          simplifiedEnds = [];\r\n          simplifiedFlatCoordinates.length = quantizeArray(\r\n            simplifiedFlatCoordinates,\r\n            0,\r\n            this.simplifiedGeometry_.ends_,\r\n            this.simplifiedGeometry_.stride_,\r\n            Math.sqrt(squaredTolerance),\r\n            simplifiedFlatCoordinates,\r\n            0,\r\n            simplifiedEnds,\r\n          );\r\n          break;\r\n        default:\r\n      }\r\n      if (simplifiedEnds) {\r\n        this.simplifiedGeometry_ = new RenderFeature(\r\n          this.type_,\r\n          simplifiedFlatCoordinates,\r\n          simplifiedEnds,\r\n          2,\r\n          this.properties_,\r\n          this.id_,\r\n        );\r\n      }\r\n      this.squaredTolerance_ = squaredTolerance;\r\n      return this.simplifiedGeometry_;\r\n    });\r\n    return this;\r\n  }\r\n}\r\n\r\n/**\r\n * @return {Array<number>} Flat coordinates.\r\n */\r\nRenderFeature.prototype.getFlatCoordinates =\r\n  RenderFeature.prototype.getOrientedFlatCoordinates;\r\n\r\n/**\r\n * Create a geometry from an `ol/render/Feature`\r\n * @param {RenderFeature} renderFeature\r\n * Render Feature\r\n * @return {Point|MultiPoint|LineString|MultiLineString|Polygon|MultiPolygon}\r\n * New geometry instance.\r\n * @api\r\n */\r\nexport function toGeometry(renderFeature) {\r\n  const geometryType = renderFeature.getType();\r\n  switch (geometryType) {\r\n    case 'Point':\r\n      return new Point(renderFeature.getFlatCoordinates());\r\n    case 'MultiPoint':\r\n      return new MultiPoint(renderFeature.getFlatCoordinates(), 'XY');\r\n    case 'LineString':\r\n      return new LineString(renderFeature.getFlatCoordinates(), 'XY');\r\n    case 'MultiLineString':\r\n      return new MultiLineString(\r\n        renderFeature.getFlatCoordinates(),\r\n        'XY',\r\n        /** @type {Array<number>} */ (renderFeature.getEnds()),\r\n      );\r\n    case 'Polygon':\r\n      const flatCoordinates = renderFeature.getFlatCoordinates();\r\n      const ends = renderFeature.getEnds();\r\n      const endss = inflateEnds(flatCoordinates, ends);\r\n      return endss.length > 1\r\n        ? new MultiPolygon(flatCoordinates, 'XY', endss)\r\n        : new Polygon(flatCoordinates, 'XY', ends);\r\n    default:\r\n      throw new Error('Invalid geometry type:' + geometryType);\r\n  }\r\n}\r\n\r\n/**\r\n * Create an `ol/Feature` from an `ol/render/Feature`\r\n * @param {RenderFeature} renderFeature RenderFeature\r\n * @param {string} [geometryName] Geometry name to use\r\n * when creating the Feature.\r\n * @return {Feature} Newly constructed `ol/Feature` with properties,\r\n * geometry, and id copied over.\r\n * @api\r\n */\r\nexport function toFeature(renderFeature, geometryName) {\r\n  const id = renderFeature.getId();\r\n  const geometry = toGeometry(renderFeature);\r\n  const properties = renderFeature.getProperties();\r\n  const feature = new Feature();\r\n  if (geometryName !== undefined) {\r\n    feature.setGeometryName(geometryName);\r\n  }\r\n  feature.setGeometry(geometry);\r\n  if (id !== undefined) {\r\n    feature.setId(id);\r\n  }\r\n  feature.setProperties(properties, true);\r\n  return feature;\r\n}\r\n\r\nexport default RenderFeature;\r\n","/**\r\n * @module ol/geom/flat/center\r\n */\r\nimport {createEmpty, createOrUpdateFromFlatCoordinates} from '../../extent.js';\r\n\r\n/**\r\n * @param {Array<number>} flatCoordinates Flat coordinates.\r\n * @param {number} offset Offset.\r\n * @param {Array<Array<number>>} endss Endss.\r\n * @param {number} stride Stride.\r\n * @return {Array<number>} Flat centers.\r\n */\r\nexport function linearRingss(flatCoordinates, offset, endss, stride) {\r\n  const flatCenters = [];\r\n  let extent = createEmpty();\r\n  for (let i = 0, ii = endss.length; i < ii; ++i) {\r\n    const ends = endss[i];\r\n    extent = createOrUpdateFromFlatCoordinates(\r\n      flatCoordinates,\r\n      offset,\r\n      ends[0],\r\n      stride,\r\n    );\r\n    flatCenters.push((extent[0] + extent[2]) / 2, (extent[1] + extent[3]) / 2);\r\n    offset = ends[ends.length - 1];\r\n  }\r\n  return flatCenters;\r\n}\r\n","/**\r\n * @module ol/geom/flat/interpolate\r\n */\r\nimport {binarySearch} from '../../array.js';\r\nimport {lerp} from '../../math.js';\r\n\r\n/**\r\n * @param {Array<number>} flatCoordinates Flat coordinates.\r\n * @param {number} offset Offset.\r\n * @param {number} end End.\r\n * @param {number} stride Stride.\r\n * @param {number} fraction Fraction.\r\n * @param {Array<number>} [dest] Destination.\r\n * @param {number} [dimension] Destination dimension (default is `2`)\r\n * @return {Array<number>} Destination.\r\n */\r\nexport function interpolatePoint(\r\n  flatCoordinates,\r\n  offset,\r\n  end,\r\n  stride,\r\n  fraction,\r\n  dest,\r\n  dimension,\r\n) {\r\n  let o, t;\r\n  const n = (end - offset) / stride;\r\n  if (n === 1) {\r\n    o = offset;\r\n  } else if (n === 2) {\r\n    o = offset;\r\n    t = fraction;\r\n  } else if (n !== 0) {\r\n    let x1 = flatCoordinates[offset];\r\n    let y1 = flatCoordinates[offset + 1];\r\n    let length = 0;\r\n    const cumulativeLengths = [0];\r\n    for (let i = offset + stride; i < end; i += stride) {\r\n      const x2 = flatCoordinates[i];\r\n      const y2 = flatCoordinates[i + 1];\r\n      length += Math.sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1));\r\n      cumulativeLengths.push(length);\r\n      x1 = x2;\r\n      y1 = y2;\r\n    }\r\n    const target = fraction * length;\r\n    const index = binarySearch(cumulativeLengths, target);\r\n    if (index < 0) {\r\n      t =\r\n        (target - cumulativeLengths[-index - 2]) /\r\n        (cumulativeLengths[-index - 1] - cumulativeLengths[-index - 2]);\r\n      o = offset + (-index - 2) * stride;\r\n    } else {\r\n      o = offset + index * stride;\r\n    }\r\n  }\r\n  dimension = dimension > 1 ? dimension : 2;\r\n  dest = dest ? dest : new Array(dimension);\r\n  for (let i = 0; i < dimension; ++i) {\r\n    dest[i] =\r\n      o === undefined\r\n        ? NaN\r\n        : t === undefined\r\n          ? flatCoordinates[o + i]\r\n          : lerp(flatCoordinates[o + i], flatCoordinates[o + stride + i], t);\r\n  }\r\n  return dest;\r\n}\r\n\r\n/**\r\n * @param {Array<number>} flatCoordinates Flat coordinates.\r\n * @param {number} offset Offset.\r\n * @param {number} end End.\r\n * @param {number} stride Stride.\r\n * @param {number} m M.\r\n * @param {boolean} extrapolate Extrapolate.\r\n * @return {import(\"../../coordinate.js\").Coordinate|null} Coordinate.\r\n */\r\nexport function lineStringCoordinateAtM(\r\n  flatCoordinates,\r\n  offset,\r\n  end,\r\n  stride,\r\n  m,\r\n  extrapolate,\r\n) {\r\n  if (end == offset) {\r\n    return null;\r\n  }\r\n  let coordinate;\r\n  if (m < flatCoordinates[offset + stride - 1]) {\r\n    if (extrapolate) {\r\n      coordinate = flatCoordinates.slice(offset, offset + stride);\r\n      coordinate[stride - 1] = m;\r\n      return coordinate;\r\n    }\r\n    return null;\r\n  }\r\n  if (flatCoordinates[end - 1] < m) {\r\n    if (extrapolate) {\r\n      coordinate = flatCoordinates.slice(end - stride, end);\r\n      coordinate[stride - 1] = m;\r\n      return coordinate;\r\n    }\r\n    return null;\r\n  }\r\n  // FIXME use O(1) search\r\n  if (m == flatCoordinates[offset + stride - 1]) {\r\n    return flatCoordinates.slice(offset, offset + stride);\r\n  }\r\n  let lo = offset / stride;\r\n  let hi = end / stride;\r\n  while (lo < hi) {\r\n    const mid = (lo + hi) >> 1;\r\n    if (m < flatCoordinates[(mid + 1) * stride - 1]) {\r\n      hi = mid;\r\n    } else {\r\n      lo = mid + 1;\r\n    }\r\n  }\r\n  const m0 = flatCoordinates[lo * stride - 1];\r\n  if (m == m0) {\r\n    return flatCoordinates.slice((lo - 1) * stride, (lo - 1) * stride + stride);\r\n  }\r\n  const m1 = flatCoordinates[(lo + 1) * stride - 1];\r\n  const t = (m - m0) / (m1 - m0);\r\n  coordinate = [];\r\n  for (let i = 0; i < stride - 1; ++i) {\r\n    coordinate.push(\r\n      lerp(\r\n        flatCoordinates[(lo - 1) * stride + i],\r\n        flatCoordinates[lo * stride + i],\r\n        t,\r\n      ),\r\n    );\r\n  }\r\n  coordinate.push(m);\r\n  return coordinate;\r\n}\r\n\r\n/**\r\n * @param {Array<number>} flatCoordinates Flat coordinates.\r\n * @param {number} offset Offset.\r\n * @param {Array<number>} ends Ends.\r\n * @param {number} stride Stride.\r\n * @param {number} m M.\r\n * @param {boolean} extrapolate Extrapolate.\r\n * @param {boolean} interpolate Interpolate.\r\n * @return {import(\"../../coordinate.js\").Coordinate|null} Coordinate.\r\n */\r\nexport function lineStringsCoordinateAtM(\r\n  flatCoordinates,\r\n  offset,\r\n  ends,\r\n  stride,\r\n  m,\r\n  extrapolate,\r\n  interpolate,\r\n) {\r\n  if (interpolate) {\r\n    return lineStringCoordinateAtM(\r\n      flatCoordinates,\r\n      offset,\r\n      ends[ends.length - 1],\r\n      stride,\r\n      m,\r\n      extrapolate,\r\n    );\r\n  }\r\n  let coordinate;\r\n  if (m < flatCoordinates[stride - 1]) {\r\n    if (extrapolate) {\r\n      coordinate = flatCoordinates.slice(0, stride);\r\n      coordinate[stride - 1] = m;\r\n      return coordinate;\r\n    }\r\n    return null;\r\n  }\r\n  if (flatCoordinates[flatCoordinates.length - 1] < m) {\r\n    if (extrapolate) {\r\n      coordinate = flatCoordinates.slice(flatCoordinates.length - stride);\r\n      coordinate[stride - 1] = m;\r\n      return coordinate;\r\n    }\r\n    return null;\r\n  }\r\n  for (let i = 0, ii = ends.length; i < ii; ++i) {\r\n    const end = ends[i];\r\n    if (offset == end) {\r\n      continue;\r\n    }\r\n    if (m < flatCoordinates[offset + stride - 1]) {\r\n      return null;\r\n    }\r\n    if (m <= flatCoordinates[end - 1]) {\r\n      return lineStringCoordinateAtM(\r\n        flatCoordinates,\r\n        offset,\r\n        end,\r\n        stride,\r\n        m,\r\n        false,\r\n      );\r\n    }\r\n    offset = end;\r\n  }\r\n  return null;\r\n}\r\n","/**\r\n * @module ol/geom/LineString\r\n */\r\nimport {extend} from '../array.js';\r\nimport {closestSquaredDistanceXY} from '../extent.js';\r\nimport SimpleGeometry from './SimpleGeometry.js';\r\nimport {assignClosestPoint, maxSquaredDelta} from './flat/closest.js';\r\nimport {deflateCoordinates} from './flat/deflate.js';\r\nimport {inflateCoordinates} from './flat/inflate.js';\r\nimport {interpolatePoint, lineStringCoordinateAtM} from './flat/interpolate.js';\r\nimport {intersectsLineString} from './flat/intersectsextent.js';\r\nimport {lineStringLength} from './flat/length.js';\r\nimport {forEach as forEachSegment} from './flat/segments.js';\r\nimport {douglasPeucker} from './flat/simplify.js';\r\n\r\n/**\r\n * @classdesc\r\n * Linestring geometry.\r\n *\r\n * @api\r\n */\r\nclass LineString extends SimpleGeometry {\r\n  /**\r\n   * @param {Array<import(\"../coordinate.js\").Coordinate>|Array<number>} coordinates Coordinates.\r\n   *     For internal use, flat coordinates in combination with `layout` are also accepted.\r\n   * @param {import(\"./Geometry.js\").GeometryLayout} [layout] Layout.\r\n   */\r\n  constructor(coordinates, layout) {\r\n    super();\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"../coordinate.js\").Coordinate|null}\r\n     */\r\n    this.flatMidpoint_ = null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.flatMidpointRevision_ = -1;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.maxDelta_ = -1;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.maxDeltaRevision_ = -1;\r\n\r\n    if (layout !== undefined && !Array.isArray(coordinates[0])) {\r\n      this.setFlatCoordinates(\r\n        layout,\r\n        /** @type {Array<number>} */ (coordinates),\r\n      );\r\n    } else {\r\n      this.setCoordinates(\r\n        /** @type {Array<import(\"../coordinate.js\").Coordinate>} */ (\r\n          coordinates\r\n        ),\r\n        layout,\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Append the passed coordinate to the coordinates of the linestring.\r\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\r\n   * @api\r\n   */\r\n  appendCoordinate(coordinate) {\r\n    extend(this.flatCoordinates, coordinate);\r\n    this.changed();\r\n  }\r\n\r\n  /**\r\n   * Make a complete copy of the geometry.\r\n   * @return {!LineString} Clone.\r\n   * @api\r\n   * @override\r\n   */\r\n  clone() {\r\n    const lineString = new LineString(\r\n      this.flatCoordinates.slice(),\r\n      this.layout,\r\n    );\r\n    lineString.applyProperties(this);\r\n    return lineString;\r\n  }\r\n\r\n  /**\r\n   * @param {number} x X.\r\n   * @param {number} y Y.\r\n   * @param {import(\"../coordinate.js\").Coordinate} closestPoint Closest point.\r\n   * @param {number} minSquaredDistance Minimum squared distance.\r\n   * @return {number} Minimum squared distance.\r\n   * @override\r\n   */\r\n  closestPointXY(x, y, closestPoint, minSquaredDistance) {\r\n    if (minSquaredDistance < closestSquaredDistanceXY(this.getExtent(), x, y)) {\r\n      return minSquaredDistance;\r\n    }\r\n    if (this.maxDeltaRevision_ != this.getRevision()) {\r\n      this.maxDelta_ = Math.sqrt(\r\n        maxSquaredDelta(\r\n          this.flatCoordinates,\r\n          0,\r\n          this.flatCoordinates.length,\r\n          this.stride,\r\n          0,\r\n        ),\r\n      );\r\n      this.maxDeltaRevision_ = this.getRevision();\r\n    }\r\n    return assignClosestPoint(\r\n      this.flatCoordinates,\r\n      0,\r\n      this.flatCoordinates.length,\r\n      this.stride,\r\n      this.maxDelta_,\r\n      false,\r\n      x,\r\n      y,\r\n      closestPoint,\r\n      minSquaredDistance,\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Iterate over each segment, calling the provided callback.\r\n   * If the callback returns a truthy value the function returns that\r\n   * value immediately. Otherwise the function returns `false`.\r\n   *\r\n   * @param {function(this: S, import(\"../coordinate.js\").Coordinate, import(\"../coordinate.js\").Coordinate): T} callback Function\r\n   *     called for each segment. The function will receive two arguments, the start and end coordinates of the segment.\r\n   * @return {T|boolean} Value.\r\n   * @template T,S\r\n   * @api\r\n   */\r\n  forEachSegment(callback) {\r\n    return forEachSegment(\r\n      this.flatCoordinates,\r\n      0,\r\n      this.flatCoordinates.length,\r\n      this.stride,\r\n      callback,\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Returns the coordinate at `m` using linear interpolation, or `null` if no\r\n   * such coordinate exists.\r\n   *\r\n   * `extrapolate` controls extrapolation beyond the range of Ms in the\r\n   * MultiLineString. If `extrapolate` is `true` then Ms less than the first\r\n   * M will return the first coordinate and Ms greater than the last M will\r\n   * return the last coordinate.\r\n   *\r\n   * @param {number} m M.\r\n   * @param {boolean} [extrapolate] Extrapolate. Default is `false`.\r\n   * @return {import(\"../coordinate.js\").Coordinate|null} Coordinate.\r\n   * @api\r\n   */\r\n  getCoordinateAtM(m, extrapolate) {\r\n    if (this.layout != 'XYM' && this.layout != 'XYZM') {\r\n      return null;\r\n    }\r\n    extrapolate = extrapolate !== undefined ? extrapolate : false;\r\n    return lineStringCoordinateAtM(\r\n      this.flatCoordinates,\r\n      0,\r\n      this.flatCoordinates.length,\r\n      this.stride,\r\n      m,\r\n      extrapolate,\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Return the coordinates of the linestring.\r\n   * @return {Array<import(\"../coordinate.js\").Coordinate>} Coordinates.\r\n   * @api\r\n   * @override\r\n   */\r\n  getCoordinates() {\r\n    return inflateCoordinates(\r\n      this.flatCoordinates,\r\n      0,\r\n      this.flatCoordinates.length,\r\n      this.stride,\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Return the coordinate at the provided fraction along the linestring.\r\n   * The `fraction` is a number between 0 and 1, where 0 is the start of the\r\n   * linestring and 1 is the end.\r\n   * @param {number} fraction Fraction.\r\n   * @param {import(\"../coordinate.js\").Coordinate} [dest] Optional coordinate whose values will\r\n   *     be modified. If not provided, a new coordinate will be returned.\r\n   * @return {import(\"../coordinate.js\").Coordinate} Coordinate of the interpolated point.\r\n   * @api\r\n   */\r\n  getCoordinateAt(fraction, dest) {\r\n    return interpolatePoint(\r\n      this.flatCoordinates,\r\n      0,\r\n      this.flatCoordinates.length,\r\n      this.stride,\r\n      fraction,\r\n      dest,\r\n      this.stride,\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Return the length of the linestring on projected plane.\r\n   * @return {number} Length (on projected plane).\r\n   * @api\r\n   */\r\n  getLength() {\r\n    return lineStringLength(\r\n      this.flatCoordinates,\r\n      0,\r\n      this.flatCoordinates.length,\r\n      this.stride,\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @return {Array<number>} Flat midpoint.\r\n   */\r\n  getFlatMidpoint() {\r\n    if (this.flatMidpointRevision_ != this.getRevision()) {\r\n      this.flatMidpoint_ = this.getCoordinateAt(\r\n        0.5,\r\n        this.flatMidpoint_ ?? undefined,\r\n      );\r\n      this.flatMidpointRevision_ = this.getRevision();\r\n    }\r\n    return /** @type {Array<number>} */ (this.flatMidpoint_);\r\n  }\r\n\r\n  /**\r\n   * @param {number} squaredTolerance Squared tolerance.\r\n   * @return {LineString} Simplified LineString.\r\n   * @protected\r\n   * @override\r\n   */\r\n  getSimplifiedGeometryInternal(squaredTolerance) {\r\n    /** @type {Array<number>} */\r\n    const simplifiedFlatCoordinates = [];\r\n    simplifiedFlatCoordinates.length = douglasPeucker(\r\n      this.flatCoordinates,\r\n      0,\r\n      this.flatCoordinates.length,\r\n      this.stride,\r\n      squaredTolerance,\r\n      simplifiedFlatCoordinates,\r\n      0,\r\n    );\r\n    return new LineString(simplifiedFlatCoordinates, 'XY');\r\n  }\r\n\r\n  /**\r\n   * Get the type of this geometry.\r\n   * @return {import(\"./Geometry.js\").Type} Geometry type.\r\n   * @api\r\n   * @override\r\n   */\r\n  getType() {\r\n    return 'LineString';\r\n  }\r\n\r\n  /**\r\n   * Test if the geometry and the passed extent intersect.\r\n   * @param {import(\"../extent.js\").Extent} extent Extent.\r\n   * @return {boolean} `true` if the geometry and the extent intersect.\r\n   * @api\r\n   * @override\r\n   */\r\n  intersectsExtent(extent) {\r\n    return intersectsLineString(\r\n      this.flatCoordinates,\r\n      0,\r\n      this.flatCoordinates.length,\r\n      this.stride,\r\n      extent,\r\n      this.getExtent(),\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Set the coordinates of the linestring.\r\n   * @param {!Array<import(\"../coordinate.js\").Coordinate>} coordinates Coordinates.\r\n   * @param {import(\"./Geometry.js\").GeometryLayout} [layout] Layout.\r\n   * @api\r\n   * @override\r\n   */\r\n  setCoordinates(coordinates, layout) {\r\n    this.setLayout(layout, coordinates, 1);\r\n    if (!this.flatCoordinates) {\r\n      this.flatCoordinates = [];\r\n    }\r\n    this.flatCoordinates.length = deflateCoordinates(\r\n      this.flatCoordinates,\r\n      0,\r\n      coordinates,\r\n      this.stride,\r\n    );\r\n    this.changed();\r\n  }\r\n}\r\n\r\nexport default LineString;\r\n","/**\r\n * @module ol/geom/flat/length\r\n */\r\n\r\n/**\r\n * @param {Array<number>} flatCoordinates Flat coordinates.\r\n * @param {number} offset Offset.\r\n * @param {number} end End.\r\n * @param {number} stride Stride.\r\n * @return {number} Length.\r\n */\r\nexport function lineStringLength(flatCoordinates, offset, end, stride) {\r\n  let x1 = flatCoordinates[offset];\r\n  let y1 = flatCoordinates[offset + 1];\r\n  let length = 0;\r\n  for (let i = offset + stride; i < end; i += stride) {\r\n    const x2 = flatCoordinates[i];\r\n    const y2 = flatCoordinates[i + 1];\r\n    length += Math.sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1));\r\n    x1 = x2;\r\n    y1 = y2;\r\n  }\r\n  return length;\r\n}\r\n\r\n/**\r\n * @param {Array<number>} flatCoordinates Flat coordinates.\r\n * @param {number} offset Offset.\r\n * @param {number} end End.\r\n * @param {number} stride Stride.\r\n * @return {number} Perimeter.\r\n */\r\nexport function linearRingLength(flatCoordinates, offset, end, stride) {\r\n  let perimeter = lineStringLength(flatCoordinates, offset, end, stride);\r\n  const dx = flatCoordinates[end - stride] - flatCoordinates[offset];\r\n  const dy = flatCoordinates[end - stride + 1] - flatCoordinates[offset + 1];\r\n  perimeter += Math.sqrt(dx * dx + dy * dy);\r\n  return perimeter;\r\n}\r\n","/**\r\n * @module ol/geom/MultiLineString\r\n */\r\nimport {extend} from '../array.js';\r\nimport {closestSquaredDistanceXY} from '../extent.js';\r\nimport LineString from './LineString.js';\r\nimport SimpleGeometry from './SimpleGeometry.js';\r\nimport {arrayMaxSquaredDelta, assignClosestArrayPoint} from './flat/closest.js';\r\nimport {deflateCoordinatesArray} from './flat/deflate.js';\r\nimport {inflateCoordinatesArray} from './flat/inflate.js';\r\nimport {\r\n  interpolatePoint,\r\n  lineStringsCoordinateAtM,\r\n} from './flat/interpolate.js';\r\nimport {intersectsLineStringArray} from './flat/intersectsextent.js';\r\nimport {lineStringLength} from './flat/length.js';\r\nimport {douglasPeuckerArray} from './flat/simplify.js';\r\n\r\n/**\r\n * @classdesc\r\n * Multi-linestring geometry.\r\n *\r\n * @api\r\n */\r\nclass MultiLineString extends SimpleGeometry {\r\n  /**\r\n   * @param {Array<Array<import(\"../coordinate.js\").Coordinate>|LineString>|Array<number>} coordinates\r\n   *     Coordinates or LineString geometries. (For internal use, flat coordinates in\r\n   *     combination with `layout` and `ends` are also accepted.)\r\n   * @param {import(\"./Geometry.js\").GeometryLayout} [layout] Layout.\r\n   * @param {Array<number>} [ends] Flat coordinate ends for internal use.\r\n   */\r\n  constructor(coordinates, layout, ends) {\r\n    super();\r\n\r\n    /**\r\n     * @type {Array<number>}\r\n     * @private\r\n     */\r\n    this.ends_ = [];\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.maxDelta_ = -1;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.maxDeltaRevision_ = -1;\r\n\r\n    if (Array.isArray(coordinates[0])) {\r\n      this.setCoordinates(\r\n        /** @type {Array<Array<import(\"../coordinate.js\").Coordinate>>} */ (\r\n          coordinates\r\n        ),\r\n        layout,\r\n      );\r\n    } else if (layout !== undefined && ends) {\r\n      this.setFlatCoordinates(\r\n        layout,\r\n        /** @type {Array<number>} */ (coordinates),\r\n      );\r\n      this.ends_ = ends;\r\n    } else {\r\n      const lineStrings = /** @type {Array<LineString>} */ (coordinates);\r\n      /** @type {Array<number>} */\r\n      const flatCoordinates = [];\r\n      const ends = [];\r\n      for (let i = 0, ii = lineStrings.length; i < ii; ++i) {\r\n        const lineString = lineStrings[i];\r\n        extend(flatCoordinates, lineString.getFlatCoordinates());\r\n        ends.push(flatCoordinates.length);\r\n      }\r\n      const layout =\r\n        lineStrings.length === 0\r\n          ? this.getLayout()\r\n          : lineStrings[0].getLayout();\r\n      this.setFlatCoordinates(layout, flatCoordinates);\r\n      this.ends_ = ends;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Append the passed linestring to the multilinestring.\r\n   * @param {LineString} lineString LineString.\r\n   * @api\r\n   */\r\n  appendLineString(lineString) {\r\n    extend(this.flatCoordinates, lineString.getFlatCoordinates().slice());\r\n    this.ends_.push(this.flatCoordinates.length);\r\n    this.changed();\r\n  }\r\n\r\n  /**\r\n   * Make a complete copy of the geometry.\r\n   * @return {!MultiLineString} Clone.\r\n   * @api\r\n   * @override\r\n   */\r\n  clone() {\r\n    const multiLineString = new MultiLineString(\r\n      this.flatCoordinates.slice(),\r\n      this.layout,\r\n      this.ends_.slice(),\r\n    );\r\n    multiLineString.applyProperties(this);\r\n    return multiLineString;\r\n  }\r\n\r\n  /**\r\n   * @param {number} x X.\r\n   * @param {number} y Y.\r\n   * @param {import(\"../coordinate.js\").Coordinate} closestPoint Closest point.\r\n   * @param {number} minSquaredDistance Minimum squared distance.\r\n   * @return {number} Minimum squared distance.\r\n   * @override\r\n   */\r\n  closestPointXY(x, y, closestPoint, minSquaredDistance) {\r\n    if (minSquaredDistance < closestSquaredDistanceXY(this.getExtent(), x, y)) {\r\n      return minSquaredDistance;\r\n    }\r\n    if (this.maxDeltaRevision_ != this.getRevision()) {\r\n      this.maxDelta_ = Math.sqrt(\r\n        arrayMaxSquaredDelta(\r\n          this.flatCoordinates,\r\n          0,\r\n          this.ends_,\r\n          this.stride,\r\n          0,\r\n        ),\r\n      );\r\n      this.maxDeltaRevision_ = this.getRevision();\r\n    }\r\n    return assignClosestArrayPoint(\r\n      this.flatCoordinates,\r\n      0,\r\n      this.ends_,\r\n      this.stride,\r\n      this.maxDelta_,\r\n      false,\r\n      x,\r\n      y,\r\n      closestPoint,\r\n      minSquaredDistance,\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Returns the coordinate at `m` using linear interpolation, or `null` if no\r\n   * such coordinate exists.\r\n   *\r\n   * `extrapolate` controls extrapolation beyond the range of Ms in the\r\n   * MultiLineString. If `extrapolate` is `true` then Ms less than the first\r\n   * M will return the first coordinate and Ms greater than the last M will\r\n   * return the last coordinate.\r\n   *\r\n   * `interpolate` controls interpolation between consecutive LineStrings\r\n   * within the MultiLineString. If `interpolate` is `true` the coordinates\r\n   * will be linearly interpolated between the last coordinate of one LineString\r\n   * and the first coordinate of the next LineString.  If `interpolate` is\r\n   * `false` then the function will return `null` for Ms falling between\r\n   * LineStrings.\r\n   *\r\n   * @param {number} m M.\r\n   * @param {boolean} [extrapolate] Extrapolate. Default is `false`.\r\n   * @param {boolean} [interpolate] Interpolate. Default is `false`.\r\n   * @return {import(\"../coordinate.js\").Coordinate|null} Coordinate.\r\n   * @api\r\n   */\r\n  getCoordinateAtM(m, extrapolate, interpolate) {\r\n    if (\r\n      (this.layout != 'XYM' && this.layout != 'XYZM') ||\r\n      this.flatCoordinates.length === 0\r\n    ) {\r\n      return null;\r\n    }\r\n    extrapolate = extrapolate !== undefined ? extrapolate : false;\r\n    interpolate = interpolate !== undefined ? interpolate : false;\r\n    return lineStringsCoordinateAtM(\r\n      this.flatCoordinates,\r\n      0,\r\n      this.ends_,\r\n      this.stride,\r\n      m,\r\n      extrapolate,\r\n      interpolate,\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Return the coordinates of the multilinestring.\r\n   * @return {Array<Array<import(\"../coordinate.js\").Coordinate>>} Coordinates.\r\n   * @api\r\n   * @override\r\n   */\r\n  getCoordinates() {\r\n    return inflateCoordinatesArray(\r\n      this.flatCoordinates,\r\n      0,\r\n      this.ends_,\r\n      this.stride,\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @return {Array<number>} Ends.\r\n   */\r\n  getEnds() {\r\n    return this.ends_;\r\n  }\r\n\r\n  /**\r\n   * Return the linestring at the specified index.\r\n   * @param {number} index Index.\r\n   * @return {LineString} LineString.\r\n   * @api\r\n   */\r\n  getLineString(index) {\r\n    if (index < 0 || this.ends_.length <= index) {\r\n      return null;\r\n    }\r\n    return new LineString(\r\n      this.flatCoordinates.slice(\r\n        index === 0 ? 0 : this.ends_[index - 1],\r\n        this.ends_[index],\r\n      ),\r\n      this.layout,\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Return the linestrings of this multilinestring.\r\n   * @return {Array<LineString>} LineStrings.\r\n   * @api\r\n   */\r\n  getLineStrings() {\r\n    const flatCoordinates = this.flatCoordinates;\r\n    const ends = this.ends_;\r\n    const layout = this.layout;\r\n    /** @type {Array<LineString>} */\r\n    const lineStrings = [];\r\n    let offset = 0;\r\n    for (let i = 0, ii = ends.length; i < ii; ++i) {\r\n      const end = ends[i];\r\n      const lineString = new LineString(\r\n        flatCoordinates.slice(offset, end),\r\n        layout,\r\n      );\r\n      lineStrings.push(lineString);\r\n      offset = end;\r\n    }\r\n    return lineStrings;\r\n  }\r\n\r\n  /**\r\n   * Return the sum of all line string lengths\r\n   * @return {number} Length (on projected plane).\r\n   * @api\r\n   */\r\n  getLength() {\r\n    const ends = this.ends_;\r\n    let start = 0;\r\n    let length = 0;\r\n    for (let i = 0, ii = ends.length; i < ii; ++i) {\r\n      length += lineStringLength(\r\n        this.flatCoordinates,\r\n        start,\r\n        ends[i],\r\n        this.stride,\r\n      );\r\n      start = ends[i];\r\n    }\r\n    return length;\r\n  }\r\n\r\n  /**\r\n   * @return {Array<number>} Flat midpoints.\r\n   */\r\n  getFlatMidpoints() {\r\n    /** @type {Array<number>} */\r\n    const midpoints = [];\r\n    const flatCoordinates = this.flatCoordinates;\r\n    let offset = 0;\r\n    const ends = this.ends_;\r\n    const stride = this.stride;\r\n    for (let i = 0, ii = ends.length; i < ii; ++i) {\r\n      const end = ends[i];\r\n      const midpoint = interpolatePoint(\r\n        flatCoordinates,\r\n        offset,\r\n        end,\r\n        stride,\r\n        0.5,\r\n      );\r\n      extend(midpoints, midpoint);\r\n      offset = end;\r\n    }\r\n    return midpoints;\r\n  }\r\n\r\n  /**\r\n   * @param {number} squaredTolerance Squared tolerance.\r\n   * @return {MultiLineString} Simplified MultiLineString.\r\n   * @protected\r\n   * @override\r\n   */\r\n  getSimplifiedGeometryInternal(squaredTolerance) {\r\n    /** @type {Array<number>} */\r\n    const simplifiedFlatCoordinates = [];\r\n    /** @type {Array<number>} */\r\n    const simplifiedEnds = [];\r\n    simplifiedFlatCoordinates.length = douglasPeuckerArray(\r\n      this.flatCoordinates,\r\n      0,\r\n      this.ends_,\r\n      this.stride,\r\n      squaredTolerance,\r\n      simplifiedFlatCoordinates,\r\n      0,\r\n      simplifiedEnds,\r\n    );\r\n    return new MultiLineString(simplifiedFlatCoordinates, 'XY', simplifiedEnds);\r\n  }\r\n\r\n  /**\r\n   * Get the type of this geometry.\r\n   * @return {import(\"./Geometry.js\").Type} Geometry type.\r\n   * @api\r\n   * @override\r\n   */\r\n  getType() {\r\n    return 'MultiLineString';\r\n  }\r\n\r\n  /**\r\n   * Test if the geometry and the passed extent intersect.\r\n   * @param {import(\"../extent.js\").Extent} extent Extent.\r\n   * @return {boolean} `true` if the geometry and the extent intersect.\r\n   * @api\r\n   * @override\r\n   */\r\n  intersectsExtent(extent) {\r\n    return intersectsLineStringArray(\r\n      this.flatCoordinates,\r\n      0,\r\n      this.ends_,\r\n      this.stride,\r\n      extent,\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Set the coordinates of the multilinestring.\r\n   * @param {!Array<Array<import(\"../coordinate.js\").Coordinate>>} coordinates Coordinates.\r\n   * @param {import(\"./Geometry.js\").GeometryLayout} [layout] Layout.\r\n   * @api\r\n   * @override\r\n   */\r\n  setCoordinates(coordinates, layout) {\r\n    this.setLayout(layout, coordinates, 2);\r\n    if (!this.flatCoordinates) {\r\n      this.flatCoordinates = [];\r\n    }\r\n    const ends = deflateCoordinatesArray(\r\n      this.flatCoordinates,\r\n      0,\r\n      coordinates,\r\n      this.stride,\r\n      this.ends_,\r\n    );\r\n    this.flatCoordinates.length = ends.length === 0 ? 0 : ends[ends.length - 1];\r\n    this.changed();\r\n  }\r\n}\r\n\r\nexport default MultiLineString;\r\n","/**\r\n * @module ol/geom/MultiPoint\r\n */\r\nimport {extend} from '../array.js';\r\nimport {closestSquaredDistanceXY, containsXY} from '../extent.js';\r\nimport {squaredDistance as squaredDx} from '../math.js';\r\nimport Point from './Point.js';\r\nimport SimpleGeometry from './SimpleGeometry.js';\r\nimport {deflateCoordinates} from './flat/deflate.js';\r\nimport {inflateCoordinates} from './flat/inflate.js';\r\n\r\n/**\r\n * @classdesc\r\n * Multi-point geometry.\r\n *\r\n * @api\r\n */\r\nclass MultiPoint extends SimpleGeometry {\r\n  /**\r\n   * @param {Array<import(\"../coordinate.js\").Coordinate>|Array<number>} coordinates Coordinates.\r\n   *     For internal use, flat coordinates in combination with `layout` are also accepted.\r\n   * @param {import(\"./Geometry.js\").GeometryLayout} [layout] Layout.\r\n   */\r\n  constructor(coordinates, layout) {\r\n    super();\r\n    if (layout && !Array.isArray(coordinates[0])) {\r\n      this.setFlatCoordinates(\r\n        layout,\r\n        /** @type {Array<number>} */ (coordinates),\r\n      );\r\n    } else {\r\n      this.setCoordinates(\r\n        /** @type {Array<import(\"../coordinate.js\").Coordinate>} */ (\r\n          coordinates\r\n        ),\r\n        layout,\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Append the passed point to this multipoint.\r\n   * @param {Point} point Point.\r\n   * @api\r\n   */\r\n  appendPoint(point) {\r\n    extend(this.flatCoordinates, point.getFlatCoordinates());\r\n    this.changed();\r\n  }\r\n\r\n  /**\r\n   * Make a complete copy of the geometry.\r\n   * @return {!MultiPoint} Clone.\r\n   * @api\r\n   * @override\r\n   */\r\n  clone() {\r\n    const multiPoint = new MultiPoint(\r\n      this.flatCoordinates.slice(),\r\n      this.layout,\r\n    );\r\n    multiPoint.applyProperties(this);\r\n    return multiPoint;\r\n  }\r\n\r\n  /**\r\n   * @param {number} x X.\r\n   * @param {number} y Y.\r\n   * @param {import(\"../coordinate.js\").Coordinate} closestPoint Closest point.\r\n   * @param {number} minSquaredDistance Minimum squared distance.\r\n   * @return {number} Minimum squared distance.\r\n   * @override\r\n   */\r\n  closestPointXY(x, y, closestPoint, minSquaredDistance) {\r\n    if (minSquaredDistance < closestSquaredDistanceXY(this.getExtent(), x, y)) {\r\n      return minSquaredDistance;\r\n    }\r\n    const flatCoordinates = this.flatCoordinates;\r\n    const stride = this.stride;\r\n    for (let i = 0, ii = flatCoordinates.length; i < ii; i += stride) {\r\n      const squaredDistance = squaredDx(\r\n        x,\r\n        y,\r\n        flatCoordinates[i],\r\n        flatCoordinates[i + 1],\r\n      );\r\n      if (squaredDistance < minSquaredDistance) {\r\n        minSquaredDistance = squaredDistance;\r\n        for (let j = 0; j < stride; ++j) {\r\n          closestPoint[j] = flatCoordinates[i + j];\r\n        }\r\n        closestPoint.length = stride;\r\n      }\r\n    }\r\n    return minSquaredDistance;\r\n  }\r\n\r\n  /**\r\n   * Return the coordinates of the multipoint.\r\n   * @return {Array<import(\"../coordinate.js\").Coordinate>} Coordinates.\r\n   * @api\r\n   * @override\r\n   */\r\n  getCoordinates() {\r\n    return inflateCoordinates(\r\n      this.flatCoordinates,\r\n      0,\r\n      this.flatCoordinates.length,\r\n      this.stride,\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Return the point at the specified index.\r\n   * @param {number} index Index.\r\n   * @return {Point} Point.\r\n   * @api\r\n   */\r\n  getPoint(index) {\r\n    const n = this.flatCoordinates.length / this.stride;\r\n    if (index < 0 || n <= index) {\r\n      return null;\r\n    }\r\n    return new Point(\r\n      this.flatCoordinates.slice(\r\n        index * this.stride,\r\n        (index + 1) * this.stride,\r\n      ),\r\n      this.layout,\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Return the points of this multipoint.\r\n   * @return {Array<Point>} Points.\r\n   * @api\r\n   */\r\n  getPoints() {\r\n    const flatCoordinates = this.flatCoordinates;\r\n    const layout = this.layout;\r\n    const stride = this.stride;\r\n    /** @type {Array<Point>} */\r\n    const points = [];\r\n    for (let i = 0, ii = flatCoordinates.length; i < ii; i += stride) {\r\n      const point = new Point(flatCoordinates.slice(i, i + stride), layout);\r\n      points.push(point);\r\n    }\r\n    return points;\r\n  }\r\n\r\n  /**\r\n   * Get the type of this geometry.\r\n   * @return {import(\"./Geometry.js\").Type} Geometry type.\r\n   * @api\r\n   * @override\r\n   */\r\n  getType() {\r\n    return 'MultiPoint';\r\n  }\r\n\r\n  /**\r\n   * Test if the geometry and the passed extent intersect.\r\n   * @param {import(\"../extent.js\").Extent} extent Extent.\r\n   * @return {boolean} `true` if the geometry and the extent intersect.\r\n   * @api\r\n   * @override\r\n   */\r\n  intersectsExtent(extent) {\r\n    const flatCoordinates = this.flatCoordinates;\r\n    const stride = this.stride;\r\n    for (let i = 0, ii = flatCoordinates.length; i < ii; i += stride) {\r\n      const x = flatCoordinates[i];\r\n      const y = flatCoordinates[i + 1];\r\n      if (containsXY(extent, x, y)) {\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Set the coordinates of the multipoint.\r\n   * @param {!Array<import(\"../coordinate.js\").Coordinate>} coordinates Coordinates.\r\n   * @param {import(\"./Geometry.js\").GeometryLayout} [layout] Layout.\r\n   * @api\r\n   * @override\r\n   */\r\n  setCoordinates(coordinates, layout) {\r\n    this.setLayout(layout, coordinates, 1);\r\n    if (!this.flatCoordinates) {\r\n      this.flatCoordinates = [];\r\n    }\r\n    this.flatCoordinates.length = deflateCoordinates(\r\n      this.flatCoordinates,\r\n      0,\r\n      coordinates,\r\n      this.stride,\r\n    );\r\n    this.changed();\r\n  }\r\n}\r\n\r\nexport default MultiPoint;\r\n","/**\r\n * @module ol/geom/MultiPolygon\r\n */\r\nimport {extend} from '../array.js';\r\nimport {closestSquaredDistanceXY} from '../extent.js';\r\nimport MultiPoint from './MultiPoint.js';\r\nimport Polygon from './Polygon.js';\r\nimport SimpleGeometry from './SimpleGeometry.js';\r\nimport {linearRingss as linearRingssArea} from './flat/area.js';\r\nimport {linearRingss as linearRingssCenter} from './flat/center.js';\r\nimport {\r\n  assignClosestMultiArrayPoint,\r\n  multiArrayMaxSquaredDelta,\r\n} from './flat/closest.js';\r\nimport {linearRingssContainsXY} from './flat/contains.js';\r\nimport {deflateMultiCoordinatesArray} from './flat/deflate.js';\r\nimport {inflateMultiCoordinatesArray} from './flat/inflate.js';\r\nimport {getInteriorPointsOfMultiArray} from './flat/interiorpoint.js';\r\nimport {intersectsLinearRingMultiArray} from './flat/intersectsextent.js';\r\nimport {\r\n  linearRingssAreOriented,\r\n  orientLinearRingsArray,\r\n} from './flat/orient.js';\r\nimport {quantizeMultiArray} from './flat/simplify.js';\r\n\r\n/**\r\n * @classdesc\r\n * Multi-polygon geometry.\r\n *\r\n * @api\r\n */\r\nclass MultiPolygon extends SimpleGeometry {\r\n  /**\r\n   * @param {Array<Array<Array<import(\"../coordinate.js\").Coordinate>>|Polygon>|Array<number>} coordinates Coordinates.\r\n   *     For internal use, flat coordinates in combination with `layout` and `endss` are also accepted.\r\n   * @param {import(\"./Geometry.js\").GeometryLayout} [layout] Layout.\r\n   * @param {Array<Array<number>>} [endss] Array of ends for internal use with flat coordinates.\r\n   */\r\n  constructor(coordinates, layout, endss) {\r\n    super();\r\n\r\n    /**\r\n     * @type {Array<Array<number>>}\r\n     * @private\r\n     */\r\n    this.endss_ = [];\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.flatInteriorPointsRevision_ = -1;\r\n\r\n    /**\r\n     * @private\r\n     * @type {Array<number>|null}\r\n     */\r\n    this.flatInteriorPoints_ = null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.maxDelta_ = -1;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.maxDeltaRevision_ = -1;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.orientedRevision_ = -1;\r\n\r\n    /**\r\n     * @private\r\n     * @type {Array<number>|null}\r\n     */\r\n    this.orientedFlatCoordinates_ = null;\r\n\r\n    if (!endss && !Array.isArray(coordinates[0])) {\r\n      const polygons = /** @type {Array<Polygon>} */ (coordinates);\r\n      /** @type {Array<number>} */\r\n      const flatCoordinates = [];\r\n      const thisEndss = [];\r\n      for (let i = 0, ii = polygons.length; i < ii; ++i) {\r\n        const polygon = polygons[i];\r\n        const offset = flatCoordinates.length;\r\n        const ends = polygon.getEnds();\r\n        for (let j = 0, jj = ends.length; j < jj; ++j) {\r\n          ends[j] += offset;\r\n        }\r\n        extend(flatCoordinates, polygon.getFlatCoordinates());\r\n        thisEndss.push(ends);\r\n      }\r\n      layout =\r\n        polygons.length === 0 ? this.getLayout() : polygons[0].getLayout();\r\n      coordinates = flatCoordinates;\r\n      endss = thisEndss;\r\n    }\r\n    if (layout !== undefined && endss) {\r\n      this.setFlatCoordinates(\r\n        layout,\r\n        /** @type {Array<number>} */ (coordinates),\r\n      );\r\n      this.endss_ = endss;\r\n    } else {\r\n      this.setCoordinates(\r\n        /** @type {Array<Array<Array<import(\"../coordinate.js\").Coordinate>>>} */ (\r\n          coordinates\r\n        ),\r\n        layout,\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Append the passed polygon to this multipolygon.\r\n   * @param {Polygon} polygon Polygon.\r\n   * @api\r\n   */\r\n  appendPolygon(polygon) {\r\n    /** @type {Array<number>} */\r\n    let ends;\r\n    if (!this.flatCoordinates) {\r\n      this.flatCoordinates = polygon.getFlatCoordinates().slice();\r\n      ends = polygon.getEnds().slice();\r\n      this.endss_.push();\r\n    } else {\r\n      const offset = this.flatCoordinates.length;\r\n      extend(this.flatCoordinates, polygon.getFlatCoordinates());\r\n      ends = polygon.getEnds().slice();\r\n      for (let i = 0, ii = ends.length; i < ii; ++i) {\r\n        ends[i] += offset;\r\n      }\r\n    }\r\n    this.endss_.push(ends);\r\n    this.changed();\r\n  }\r\n\r\n  /**\r\n   * Make a complete copy of the geometry.\r\n   * @return {!MultiPolygon} Clone.\r\n   * @api\r\n   * @override\r\n   */\r\n  clone() {\r\n    const len = this.endss_.length;\r\n    const newEndss = new Array(len);\r\n    for (let i = 0; i < len; ++i) {\r\n      newEndss[i] = this.endss_[i].slice();\r\n    }\r\n\r\n    const multiPolygon = new MultiPolygon(\r\n      this.flatCoordinates.slice(),\r\n      this.layout,\r\n      newEndss,\r\n    );\r\n    multiPolygon.applyProperties(this);\r\n\r\n    return multiPolygon;\r\n  }\r\n\r\n  /**\r\n   * @param {number} x X.\r\n   * @param {number} y Y.\r\n   * @param {import(\"../coordinate.js\").Coordinate} closestPoint Closest point.\r\n   * @param {number} minSquaredDistance Minimum squared distance.\r\n   * @return {number} Minimum squared distance.\r\n   * @override\r\n   */\r\n  closestPointXY(x, y, closestPoint, minSquaredDistance) {\r\n    if (minSquaredDistance < closestSquaredDistanceXY(this.getExtent(), x, y)) {\r\n      return minSquaredDistance;\r\n    }\r\n    if (this.maxDeltaRevision_ != this.getRevision()) {\r\n      this.maxDelta_ = Math.sqrt(\r\n        multiArrayMaxSquaredDelta(\r\n          this.flatCoordinates,\r\n          0,\r\n          this.endss_,\r\n          this.stride,\r\n          0,\r\n        ),\r\n      );\r\n      this.maxDeltaRevision_ = this.getRevision();\r\n    }\r\n    return assignClosestMultiArrayPoint(\r\n      this.getOrientedFlatCoordinates(),\r\n      0,\r\n      this.endss_,\r\n      this.stride,\r\n      this.maxDelta_,\r\n      true,\r\n      x,\r\n      y,\r\n      closestPoint,\r\n      minSquaredDistance,\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @param {number} x X.\r\n   * @param {number} y Y.\r\n   * @return {boolean} Contains (x, y).\r\n   * @override\r\n   */\r\n  containsXY(x, y) {\r\n    return linearRingssContainsXY(\r\n      this.getOrientedFlatCoordinates(),\r\n      0,\r\n      this.endss_,\r\n      this.stride,\r\n      x,\r\n      y,\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Return the area of the multipolygon on projected plane.\r\n   * @return {number} Area (on projected plane).\r\n   * @api\r\n   */\r\n  getArea() {\r\n    return linearRingssArea(\r\n      this.getOrientedFlatCoordinates(),\r\n      0,\r\n      this.endss_,\r\n      this.stride,\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Get the coordinate array for this geometry.  This array has the structure\r\n   * of a GeoJSON coordinate array for multi-polygons.\r\n   *\r\n   * @param {boolean} [right] Orient coordinates according to the right-hand\r\n   *     rule (counter-clockwise for exterior and clockwise for interior rings).\r\n   *     If `false`, coordinates will be oriented according to the left-hand rule\r\n   *     (clockwise for exterior and counter-clockwise for interior rings).\r\n   *     By default, coordinate orientation will depend on how the geometry was\r\n   *     constructed.\r\n   * @return {Array<Array<Array<import(\"../coordinate.js\").Coordinate>>>} Coordinates.\r\n   * @api\r\n   * @override\r\n   */\r\n  getCoordinates(right) {\r\n    let flatCoordinates;\r\n    if (right !== undefined) {\r\n      flatCoordinates = this.getOrientedFlatCoordinates().slice();\r\n      orientLinearRingsArray(\r\n        flatCoordinates,\r\n        0,\r\n        this.endss_,\r\n        this.stride,\r\n        right,\r\n      );\r\n    } else {\r\n      flatCoordinates = this.flatCoordinates;\r\n    }\r\n\r\n    return inflateMultiCoordinatesArray(\r\n      flatCoordinates,\r\n      0,\r\n      this.endss_,\r\n      this.stride,\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @return {Array<Array<number>>} Endss.\r\n   */\r\n  getEndss() {\r\n    return this.endss_;\r\n  }\r\n\r\n  /**\r\n   * @return {Array<number>} Flat interior points.\r\n   */\r\n  getFlatInteriorPoints() {\r\n    if (this.flatInteriorPointsRevision_ != this.getRevision()) {\r\n      const flatCenters = linearRingssCenter(\r\n        this.flatCoordinates,\r\n        0,\r\n        this.endss_,\r\n        this.stride,\r\n      );\r\n      this.flatInteriorPoints_ = getInteriorPointsOfMultiArray(\r\n        this.getOrientedFlatCoordinates(),\r\n        0,\r\n        this.endss_,\r\n        this.stride,\r\n        flatCenters,\r\n      );\r\n      this.flatInteriorPointsRevision_ = this.getRevision();\r\n    }\r\n    return /** @type {Array<number>} */ (this.flatInteriorPoints_);\r\n  }\r\n\r\n  /**\r\n   * Return the interior points as {@link module:ol/geom/MultiPoint~MultiPoint multipoint}.\r\n   * @return {MultiPoint} Interior points as XYM coordinates, where M is\r\n   * the length of the horizontal intersection that the point belongs to.\r\n   * @api\r\n   */\r\n  getInteriorPoints() {\r\n    return new MultiPoint(this.getFlatInteriorPoints().slice(), 'XYM');\r\n  }\r\n\r\n  /**\r\n   * @return {Array<number>} Oriented flat coordinates.\r\n   */\r\n  getOrientedFlatCoordinates() {\r\n    if (this.orientedRevision_ != this.getRevision()) {\r\n      const flatCoordinates = this.flatCoordinates;\r\n      if (\r\n        linearRingssAreOriented(flatCoordinates, 0, this.endss_, this.stride)\r\n      ) {\r\n        this.orientedFlatCoordinates_ = flatCoordinates;\r\n      } else {\r\n        this.orientedFlatCoordinates_ = flatCoordinates.slice();\r\n        this.orientedFlatCoordinates_.length = orientLinearRingsArray(\r\n          this.orientedFlatCoordinates_,\r\n          0,\r\n          this.endss_,\r\n          this.stride,\r\n        );\r\n      }\r\n      this.orientedRevision_ = this.getRevision();\r\n    }\r\n    return /** @type {Array<number>} */ (this.orientedFlatCoordinates_);\r\n  }\r\n\r\n  /**\r\n   * @param {number} squaredTolerance Squared tolerance.\r\n   * @return {MultiPolygon} Simplified MultiPolygon.\r\n   * @protected\r\n   * @override\r\n   */\r\n  getSimplifiedGeometryInternal(squaredTolerance) {\r\n    /** @type {Array<number>} */\r\n    const simplifiedFlatCoordinates = [];\r\n    /** @type {Array<Array<number>>} */\r\n    const simplifiedEndss = [];\r\n    simplifiedFlatCoordinates.length = quantizeMultiArray(\r\n      this.flatCoordinates,\r\n      0,\r\n      this.endss_,\r\n      this.stride,\r\n      Math.sqrt(squaredTolerance),\r\n      simplifiedFlatCoordinates,\r\n      0,\r\n      simplifiedEndss,\r\n    );\r\n    return new MultiPolygon(simplifiedFlatCoordinates, 'XY', simplifiedEndss);\r\n  }\r\n\r\n  /**\r\n   * Return the polygon at the specified index.\r\n   * @param {number} index Index.\r\n   * @return {Polygon} Polygon.\r\n   * @api\r\n   */\r\n  getPolygon(index) {\r\n    if (index < 0 || this.endss_.length <= index) {\r\n      return null;\r\n    }\r\n    let offset;\r\n    if (index === 0) {\r\n      offset = 0;\r\n    } else {\r\n      const prevEnds = this.endss_[index - 1];\r\n      offset = prevEnds[prevEnds.length - 1];\r\n    }\r\n    const ends = this.endss_[index].slice();\r\n    const end = ends[ends.length - 1];\r\n    if (offset !== 0) {\r\n      for (let i = 0, ii = ends.length; i < ii; ++i) {\r\n        ends[i] -= offset;\r\n      }\r\n    }\r\n    return new Polygon(\r\n      this.flatCoordinates.slice(offset, end),\r\n      this.layout,\r\n      ends,\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Return the polygons of this multipolygon.\r\n   * @return {Array<Polygon>} Polygons.\r\n   * @api\r\n   */\r\n  getPolygons() {\r\n    const layout = this.layout;\r\n    const flatCoordinates = this.flatCoordinates;\r\n    const endss = this.endss_;\r\n    const polygons = [];\r\n    let offset = 0;\r\n    for (let i = 0, ii = endss.length; i < ii; ++i) {\r\n      const ends = endss[i].slice();\r\n      const end = ends[ends.length - 1];\r\n      if (offset !== 0) {\r\n        for (let j = 0, jj = ends.length; j < jj; ++j) {\r\n          ends[j] -= offset;\r\n        }\r\n      }\r\n      const polygon = new Polygon(\r\n        flatCoordinates.slice(offset, end),\r\n        layout,\r\n        ends,\r\n      );\r\n      polygons.push(polygon);\r\n      offset = end;\r\n    }\r\n    return polygons;\r\n  }\r\n\r\n  /**\r\n   * Get the type of this geometry.\r\n   * @return {import(\"./Geometry.js\").Type} Geometry type.\r\n   * @api\r\n   * @override\r\n   */\r\n  getType() {\r\n    return 'MultiPolygon';\r\n  }\r\n\r\n  /**\r\n   * Test if the geometry and the passed extent intersect.\r\n   * @param {import(\"../extent.js\").Extent} extent Extent.\r\n   * @return {boolean} `true` if the geometry and the extent intersect.\r\n   * @api\r\n   * @override\r\n   */\r\n  intersectsExtent(extent) {\r\n    return intersectsLinearRingMultiArray(\r\n      this.getOrientedFlatCoordinates(),\r\n      0,\r\n      this.endss_,\r\n      this.stride,\r\n      extent,\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Set the coordinates of the multipolygon.\r\n   * @param {!Array<Array<Array<import(\"../coordinate.js\").Coordinate>>>} coordinates Coordinates.\r\n   * @param {import(\"./Geometry.js\").GeometryLayout} [layout] Layout.\r\n   * @api\r\n   * @override\r\n   */\r\n  setCoordinates(coordinates, layout) {\r\n    this.setLayout(layout, coordinates, 3);\r\n    if (!this.flatCoordinates) {\r\n      this.flatCoordinates = [];\r\n    }\r\n    const endss = deflateMultiCoordinatesArray(\r\n      this.flatCoordinates,\r\n      0,\r\n      coordinates,\r\n      this.stride,\r\n      this.endss_,\r\n    );\r\n    if (endss.length === 0) {\r\n      this.flatCoordinates.length = 0;\r\n    } else {\r\n      const lastEnds = endss[endss.length - 1];\r\n      this.flatCoordinates.length =\r\n        lastEnds.length === 0 ? 0 : lastEnds[lastEnds.length - 1];\r\n    }\r\n    this.changed();\r\n  }\r\n}\r\n\r\nexport default MultiPolygon;\r\n","/**\r\n * @module ol/format/Feature\r\n */\r\nimport Feature from '../Feature.js';\r\nimport {\r\n  linearRingsAreOriented,\r\n  linearRingssAreOriented,\r\n  orientLinearRings,\r\n  orientLinearRingsArray,\r\n} from '../geom/flat/orient.js';\r\nimport {\r\n  GeometryCollection,\r\n  LineString,\r\n  MultiLineString,\r\n  MultiPoint,\r\n  MultiPolygon,\r\n  Point,\r\n  Polygon,\r\n} from '../geom.js';\r\nimport {\r\n  equivalent as equivalentProjection,\r\n  get as getProjection,\r\n  getTransform,\r\n  transformExtent,\r\n} from '../proj.js';\r\nimport RenderFeature from '../render/Feature.js';\r\nimport {abstract} from '../util.js';\r\n\r\n/**\r\n * @typedef {Object} ReadOptions\r\n * @property {import(\"../proj.js\").ProjectionLike} [dataProjection] Projection of the data we are reading.\r\n * If not provided, the projection will be derived from the data (where possible) or\r\n * the `dataProjection` of the format is assigned (where set). If the projection\r\n * can not be derived from the data and if no `dataProjection` is set for a format,\r\n * the features will not be reprojected.\r\n * @property {import(\"../extent.js\").Extent} [extent] Tile extent in map units of the tile being read.\r\n * This is only required when reading data with tile pixels as geometry units. When configured,\r\n * a `dataProjection` with `TILE_PIXELS` as `units` and the tile's pixel extent as `extent` needs to be\r\n * provided.\r\n * @property {import(\"../proj.js\").ProjectionLike} [featureProjection] Projection of the feature geometries\r\n * created by the format reader. If not provided, features will be returned in the\r\n * `dataProjection`.\r\n */\r\n\r\n/**\r\n * @typedef {Object} WriteOptions\r\n * @property {import(\"../proj.js\").ProjectionLike} [dataProjection] Projection of the data we are writing.\r\n * If not provided, the `dataProjection` of the format is assigned (where set).\r\n * If no `dataProjection` is set for a format, the features will be returned\r\n * in the `featureProjection`.\r\n * @property {import(\"../proj.js\").ProjectionLike} [featureProjection] Projection of the feature geometries\r\n * that will be serialized by the format writer. If not provided, geometries are assumed\r\n * to be in the `dataProjection` if that is set; in other words, they are not transformed.\r\n * @property {boolean} [rightHanded] When writing geometries, follow the right-hand\r\n * rule for linear ring orientation.  This means that polygons will have counter-clockwise\r\n * exterior rings and clockwise interior rings.  By default, coordinates are serialized\r\n * as they are provided at construction.  If `true`, the right-hand rule will\r\n * be applied.  If `false`, the left-hand rule will be applied (clockwise for\r\n * exterior and counter-clockwise for interior rings).  Note that not all\r\n * formats support this.  The GeoJSON format does use this property when writing\r\n * geometries.\r\n * @property {number} [decimals] Maximum number of decimal places for coordinates.\r\n * Coordinates are stored internally as floats, but floating-point arithmetic can create\r\n * coordinates with a large number of decimal places, not generally wanted on output.\r\n * Set a number here to round coordinates. Can also be used to ensure that\r\n * coordinates read in can be written back out with the same number of decimals.\r\n * Default is no rounding.\r\n */\r\n\r\n/**\r\n * @typedef {'arraybuffer' | 'json' | 'text' | 'xml'} Type\r\n */\r\n\r\n/**\r\n * @typedef {Object} SimpleGeometryObject\r\n * @property {import('../geom/Geometry.js').Type} type Type.\r\n * @property {Array<number>} flatCoordinates Flat coordinates.\r\n * @property {Array<number>|Array<Array<number>>} [ends] Ends or endss.\r\n * @property {import('../geom/Geometry.js').GeometryLayout} [layout] Layout.\r\n */\r\n\r\n/**\r\n * @typedef {Array<GeometryObject>} GeometryCollectionObject\r\n */\r\n\r\n/**\r\n * @typedef {SimpleGeometryObject|GeometryCollectionObject} GeometryObject\r\n */\r\n\r\n/**\r\n * @typedef {Object} FeatureObject\r\n * @property {string|number} [id] Id.\r\n * @property {GeometryObject} [geometry] Geometry.\r\n * @property {Object<string, *>} [properties] Properties.\r\n */\r\n\r\n/***\r\n * @template {import('../Feature.js').FeatureLike} T\r\n * @typedef {T extends RenderFeature ? typeof RenderFeature : typeof Feature} FeatureToFeatureClass\r\n */\r\n\r\n/***\r\n * @template {import(\"../Feature.js\").FeatureClass} T\r\n * @typedef {T[keyof T] extends RenderFeature ? RenderFeature : Feature} FeatureClassToFeature\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * Abstract base class; normally only used for creating subclasses and not\r\n * instantiated in apps.\r\n * Base class for feature formats.\r\n * {@link module:ol/format/Feature~FeatureFormat} subclasses provide the ability to decode and encode\r\n * {@link module:ol/Feature~Feature} objects from a variety of commonly used geospatial\r\n * file formats.  See the documentation for each format for more details.\r\n *\r\n * @template {import('../Feature.js').FeatureLike} [FeatureType=import(\"../Feature.js\").default]\r\n * @abstract\r\n * @api\r\n */\r\nclass FeatureFormat {\r\n  constructor() {\r\n    /**\r\n     * @protected\r\n     * @type {import(\"../proj/Projection.js\").default|undefined}\r\n     */\r\n    this.dataProjection = undefined;\r\n\r\n    /**\r\n     * @protected\r\n     * @type {import(\"../proj/Projection.js\").default|undefined}\r\n     */\r\n    this.defaultFeatureProjection = undefined;\r\n\r\n    /**\r\n     * @protected\r\n     * @type {FeatureToFeatureClass<FeatureType>}\r\n     */\r\n    this.featureClass = /** @type {FeatureToFeatureClass<FeatureType>} */ (\r\n      Feature\r\n    );\r\n\r\n    /**\r\n     * A list media types supported by the format in descending order of preference.\r\n     * @type {Array<string>}\r\n     */\r\n    this.supportedMediaTypes = null;\r\n  }\r\n\r\n  /**\r\n   * Adds the data projection to the read options.\r\n   * @param {Document|Element|Object|string} source Source.\r\n   * @param {ReadOptions} [options] Options.\r\n   * @return {ReadOptions|undefined} Options.\r\n   * @protected\r\n   */\r\n  getReadOptions(source, options) {\r\n    if (options) {\r\n      let dataProjection = options.dataProjection\r\n        ? getProjection(options.dataProjection)\r\n        : this.readProjection(source);\r\n      if (\r\n        options.extent &&\r\n        dataProjection &&\r\n        dataProjection.getUnits() === 'tile-pixels'\r\n      ) {\r\n        dataProjection = getProjection(dataProjection);\r\n        dataProjection.setWorldExtent(options.extent);\r\n      }\r\n      options = {\r\n        dataProjection: dataProjection,\r\n        featureProjection: options.featureProjection,\r\n      };\r\n    }\r\n    return this.adaptOptions(options);\r\n  }\r\n\r\n  /**\r\n   * Sets the `dataProjection` on the options, if no `dataProjection`\r\n   * is set.\r\n   * @param {WriteOptions|ReadOptions|undefined} options\r\n   *     Options.\r\n   * @protected\r\n   * @return {WriteOptions|ReadOptions|undefined}\r\n   *     Updated options.\r\n   */\r\n  adaptOptions(options) {\r\n    return Object.assign(\r\n      {\r\n        dataProjection: this.dataProjection,\r\n        featureProjection: this.defaultFeatureProjection,\r\n        featureClass: this.featureClass,\r\n      },\r\n      options,\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @abstract\r\n   * @return {Type} The format type.\r\n   */\r\n  getType() {\r\n    return abstract();\r\n  }\r\n\r\n  /**\r\n   * Read a single feature from a source.\r\n   *\r\n   * @abstract\r\n   * @param {Document|Element|Object|string} source Source.\r\n   * @param {ReadOptions} [options] Read options.\r\n   * @return {FeatureType|Array<FeatureType>} Feature.\r\n   */\r\n  readFeature(source, options) {\r\n    return abstract();\r\n  }\r\n\r\n  /**\r\n   * Read all features from a source.\r\n   *\r\n   * @abstract\r\n   * @param {Document|Element|ArrayBuffer|Object|string} source Source.\r\n   * @param {ReadOptions} [options] Read options.\r\n   * @return {Array<FeatureType>} Features.\r\n   */\r\n  readFeatures(source, options) {\r\n    return abstract();\r\n  }\r\n\r\n  /**\r\n   * Read a single geometry from a source.\r\n   *\r\n   * @abstract\r\n   * @param {Document|Element|Object|string} source Source.\r\n   * @param {ReadOptions} [options] Read options.\r\n   * @return {import(\"../geom/Geometry.js\").default} Geometry.\r\n   */\r\n  readGeometry(source, options) {\r\n    return abstract();\r\n  }\r\n\r\n  /**\r\n   * Read the projection from a source.\r\n   *\r\n   * @abstract\r\n   * @param {Document|Element|Object|string} source Source.\r\n   * @return {import(\"../proj/Projection.js\").default|undefined} Projection.\r\n   */\r\n  readProjection(source) {\r\n    return abstract();\r\n  }\r\n\r\n  /**\r\n   * Encode a feature in this format.\r\n   *\r\n   * @abstract\r\n   * @param {Feature} feature Feature.\r\n   * @param {WriteOptions} [options] Write options.\r\n   * @return {string|ArrayBuffer} Result.\r\n   */\r\n  writeFeature(feature, options) {\r\n    return abstract();\r\n  }\r\n\r\n  /**\r\n   * Encode an array of features in this format.\r\n   *\r\n   * @abstract\r\n   * @param {Array<Feature>} features Features.\r\n   * @param {WriteOptions} [options] Write options.\r\n   * @return {string|ArrayBuffer} Result.\r\n   */\r\n  writeFeatures(features, options) {\r\n    return abstract();\r\n  }\r\n\r\n  /**\r\n   * Write a single geometry in this format.\r\n   *\r\n   * @abstract\r\n   * @param {import(\"../geom/Geometry.js\").default} geometry Geometry.\r\n   * @param {WriteOptions} [options] Write options.\r\n   * @return {string|ArrayBuffer} Result.\r\n   */\r\n  writeGeometry(geometry, options) {\r\n    return abstract();\r\n  }\r\n}\r\n\r\nexport default FeatureFormat;\r\n\r\n/**\r\n * @template {import(\"../geom/Geometry.js\").default|RenderFeature} T\r\n * @param {T} geometry Geometry.\r\n * @param {boolean} write Set to true for writing, false for reading.\r\n * @param {WriteOptions|ReadOptions} [options] Options.\r\n * @return {T} Transformed geometry.\r\n */\r\nexport function transformGeometryWithOptions(geometry, write, options) {\r\n  const featureProjection = options\r\n    ? getProjection(options.featureProjection)\r\n    : null;\r\n  const dataProjection = options ? getProjection(options.dataProjection) : null;\r\n\r\n  let transformed = geometry;\r\n  if (\r\n    featureProjection &&\r\n    dataProjection &&\r\n    !equivalentProjection(featureProjection, dataProjection)\r\n  ) {\r\n    if (write) {\r\n      transformed = /** @type {T} */ (geometry.clone());\r\n    }\r\n    const fromProjection = write ? featureProjection : dataProjection;\r\n    const toProjection = write ? dataProjection : featureProjection;\r\n    if (fromProjection.getUnits() === 'tile-pixels') {\r\n      transformed.transform(fromProjection, toProjection);\r\n    } else {\r\n      transformed.applyTransform(getTransform(fromProjection, toProjection));\r\n    }\r\n  }\r\n  if (\r\n    write &&\r\n    options &&\r\n    /** @type {WriteOptions} */ (options).decimals !== undefined\r\n  ) {\r\n    const power = Math.pow(10, /** @type {WriteOptions} */ (options).decimals);\r\n    // if decimals option on write, round each coordinate appropriately\r\n    /**\r\n     * @param {Array<number>} coordinates Coordinates.\r\n     * @return {Array<number>} Transformed coordinates.\r\n     */\r\n    const transform = function (coordinates) {\r\n      for (let i = 0, ii = coordinates.length; i < ii; ++i) {\r\n        coordinates[i] = Math.round(coordinates[i] * power) / power;\r\n      }\r\n      return coordinates;\r\n    };\r\n    if (transformed === geometry) {\r\n      transformed = /** @type {T} */ (geometry.clone());\r\n    }\r\n    transformed.applyTransform(transform);\r\n  }\r\n  return transformed;\r\n}\r\n\r\n/**\r\n * @param {import(\"../extent.js\").Extent} extent Extent.\r\n * @param {ReadOptions} [options] Read options.\r\n * @return {import(\"../extent.js\").Extent} Transformed extent.\r\n */\r\nexport function transformExtentWithOptions(extent, options) {\r\n  const featureProjection = options\r\n    ? getProjection(options.featureProjection)\r\n    : null;\r\n  const dataProjection = options ? getProjection(options.dataProjection) : null;\r\n\r\n  if (\r\n    featureProjection &&\r\n    dataProjection &&\r\n    !equivalentProjection(featureProjection, dataProjection)\r\n  ) {\r\n    return transformExtent(extent, dataProjection, featureProjection);\r\n  }\r\n  return extent;\r\n}\r\n\r\nconst GeometryConstructor = {\r\n  Point: Point,\r\n  LineString: LineString,\r\n  Polygon: Polygon,\r\n  MultiPoint: MultiPoint,\r\n  MultiLineString: MultiLineString,\r\n  MultiPolygon: MultiPolygon,\r\n};\r\n\r\nfunction orientFlatCoordinates(flatCoordinates, ends, stride) {\r\n  if (Array.isArray(ends[0])) {\r\n    // MultiPolagon\r\n    if (!linearRingssAreOriented(flatCoordinates, 0, ends, stride)) {\r\n      flatCoordinates = flatCoordinates.slice();\r\n      orientLinearRingsArray(flatCoordinates, 0, ends, stride);\r\n    }\r\n    return flatCoordinates;\r\n  }\r\n  if (!linearRingsAreOriented(flatCoordinates, 0, ends, stride)) {\r\n    flatCoordinates = flatCoordinates.slice();\r\n    orientLinearRings(flatCoordinates, 0, ends, stride);\r\n  }\r\n  return flatCoordinates;\r\n}\r\n\r\n/**\r\n * @param {FeatureObject} object Feature object.\r\n * @param {WriteOptions|ReadOptions} [options] Options.\r\n * @return {RenderFeature|Array<RenderFeature>} Render feature.\r\n */\r\nexport function createRenderFeature(object, options) {\r\n  const geometry = object.geometry;\r\n  if (!geometry) {\r\n    return [];\r\n  }\r\n  if (Array.isArray(geometry)) {\r\n    return geometry\r\n      .map((geometry) => createRenderFeature({...object, geometry}))\r\n      .flat();\r\n  }\r\n\r\n  const geometryType =\r\n    geometry.type === 'MultiPolygon' ? 'Polygon' : geometry.type;\r\n  if (geometryType === 'GeometryCollection' || geometryType === 'Circle') {\r\n    throw new Error('Unsupported geometry type: ' + geometryType);\r\n  }\r\n\r\n  const stride = geometry.layout.length;\r\n  return transformGeometryWithOptions(\r\n    new RenderFeature(\r\n      geometryType,\r\n      geometryType === 'Polygon'\r\n        ? orientFlatCoordinates(geometry.flatCoordinates, geometry.ends, stride)\r\n        : geometry.flatCoordinates,\r\n      geometry.ends?.flat(),\r\n      stride,\r\n      object.properties || {},\r\n      object.id,\r\n    ).enableSimplifyTransformed(),\r\n    false,\r\n    options,\r\n  );\r\n}\r\n\r\n/**\r\n * @param {GeometryObject|null} object Geometry object.\r\n * @param {WriteOptions|ReadOptions} [options] Options.\r\n * @return {import(\"../geom/Geometry.js\").default} Geometry.\r\n */\r\nexport function createGeometry(object, options) {\r\n  if (!object) {\r\n    return null;\r\n  }\r\n  if (Array.isArray(object)) {\r\n    const geometries = object.map((geometry) =>\r\n      createGeometry(geometry, options),\r\n    );\r\n    return new GeometryCollection(geometries);\r\n  }\r\n  const Geometry = GeometryConstructor[object.type];\r\n  return transformGeometryWithOptions(\r\n    new Geometry(object.flatCoordinates, object.layout || 'XY', object.ends),\r\n    false,\r\n    options,\r\n  );\r\n}\r\n","/**\r\n * @module ol/geom/GeometryCollection\r\n */\r\nimport EventType from '../events/EventType.js';\r\nimport {listen, unlistenByKey} from '../events.js';\r\nimport {\r\n  closestSquaredDistanceXY,\r\n  createOrUpdateEmpty,\r\n  extend,\r\n  getCenter,\r\n} from '../extent.js';\r\nimport Geometry from './Geometry.js';\r\n\r\n/**\r\n * @classdesc\r\n * An array of {@link module:ol/geom/Geometry~Geometry} objects.\r\n *\r\n * @api\r\n */\r\nclass GeometryCollection extends Geometry {\r\n  /**\r\n   * @param {Array<Geometry>} geometries Geometries.\r\n   */\r\n  constructor(geometries) {\r\n    super();\r\n\r\n    /**\r\n     * @private\r\n     * @type {Array<Geometry>}\r\n     */\r\n    this.geometries_ = geometries;\r\n\r\n    /**\r\n     * @private\r\n     * @type {Array<import(\"../events.js\").EventsKey>}\r\n     */\r\n    this.changeEventsKeys_ = [];\r\n\r\n    this.listenGeometriesChange_();\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  unlistenGeometriesChange_() {\r\n    this.changeEventsKeys_.forEach(unlistenByKey);\r\n    this.changeEventsKeys_.length = 0;\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  listenGeometriesChange_() {\r\n    const geometries = this.geometries_;\r\n    for (let i = 0, ii = geometries.length; i < ii; ++i) {\r\n      this.changeEventsKeys_.push(\r\n        listen(geometries[i], EventType.CHANGE, this.changed, this),\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Make a complete copy of the geometry.\r\n   * @return {!GeometryCollection} Clone.\r\n   * @api\r\n   * @override\r\n   */\r\n  clone() {\r\n    const geometryCollection = new GeometryCollection(\r\n      cloneGeometries(this.geometries_),\r\n    );\r\n    geometryCollection.applyProperties(this);\r\n    return geometryCollection;\r\n  }\r\n\r\n  /**\r\n   * @param {number} x X.\r\n   * @param {number} y Y.\r\n   * @param {import(\"../coordinate.js\").Coordinate} closestPoint Closest point.\r\n   * @param {number} minSquaredDistance Minimum squared distance.\r\n   * @return {number} Minimum squared distance.\r\n   * @override\r\n   */\r\n  closestPointXY(x, y, closestPoint, minSquaredDistance) {\r\n    if (minSquaredDistance < closestSquaredDistanceXY(this.getExtent(), x, y)) {\r\n      return minSquaredDistance;\r\n    }\r\n    const geometries = this.geometries_;\r\n    for (let i = 0, ii = geometries.length; i < ii; ++i) {\r\n      minSquaredDistance = geometries[i].closestPointXY(\r\n        x,\r\n        y,\r\n        closestPoint,\r\n        minSquaredDistance,\r\n      );\r\n    }\r\n    return minSquaredDistance;\r\n  }\r\n\r\n  /**\r\n   * @param {number} x X.\r\n   * @param {number} y Y.\r\n   * @return {boolean} Contains (x, y).\r\n   * @override\r\n   */\r\n  containsXY(x, y) {\r\n    const geometries = this.geometries_;\r\n    for (let i = 0, ii = geometries.length; i < ii; ++i) {\r\n      if (geometries[i].containsXY(x, y)) {\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../extent.js\").Extent} extent Extent.\r\n   * @protected\r\n   * @return {import(\"../extent.js\").Extent} extent Extent.\r\n   * @override\r\n   */\r\n  computeExtent(extent) {\r\n    createOrUpdateEmpty(extent);\r\n    const geometries = this.geometries_;\r\n    for (let i = 0, ii = geometries.length; i < ii; ++i) {\r\n      extend(extent, geometries[i].getExtent());\r\n    }\r\n    return extent;\r\n  }\r\n\r\n  /**\r\n   * Return the geometries that make up this geometry collection.\r\n   * @return {Array<Geometry>} Geometries.\r\n   * @api\r\n   */\r\n  getGeometries() {\r\n    return cloneGeometries(this.geometries_);\r\n  }\r\n\r\n  /**\r\n   * @return {Array<Geometry>} Geometries.\r\n   */\r\n  getGeometriesArray() {\r\n    return this.geometries_;\r\n  }\r\n\r\n  /**\r\n   * @return {Array<Geometry>} Geometries.\r\n   */\r\n  getGeometriesArrayRecursive() {\r\n    /** @type {Array<Geometry>} */\r\n    let geometriesArray = [];\r\n    const geometries = this.geometries_;\r\n    for (let i = 0, ii = geometries.length; i < ii; ++i) {\r\n      if (geometries[i].getType() === this.getType()) {\r\n        geometriesArray = geometriesArray.concat(\r\n          /** @type {GeometryCollection} */ (\r\n            geometries[i]\r\n          ).getGeometriesArrayRecursive(),\r\n        );\r\n      } else {\r\n        geometriesArray.push(geometries[i]);\r\n      }\r\n    }\r\n    return geometriesArray;\r\n  }\r\n\r\n  /**\r\n   * Create a simplified version of this geometry using the Douglas Peucker algorithm.\r\n   * @param {number} squaredTolerance Squared tolerance.\r\n   * @return {GeometryCollection} Simplified GeometryCollection.\r\n   * @override\r\n   */\r\n  getSimplifiedGeometry(squaredTolerance) {\r\n    if (this.simplifiedGeometryRevision !== this.getRevision()) {\r\n      this.simplifiedGeometryMaxMinSquaredTolerance = 0;\r\n      this.simplifiedGeometryRevision = this.getRevision();\r\n    }\r\n    if (\r\n      squaredTolerance < 0 ||\r\n      (this.simplifiedGeometryMaxMinSquaredTolerance !== 0 &&\r\n        squaredTolerance < this.simplifiedGeometryMaxMinSquaredTolerance)\r\n    ) {\r\n      return this;\r\n    }\r\n\r\n    const simplifiedGeometries = [];\r\n    const geometries = this.geometries_;\r\n    let simplified = false;\r\n    for (let i = 0, ii = geometries.length; i < ii; ++i) {\r\n      const geometry = geometries[i];\r\n      const simplifiedGeometry =\r\n        geometry.getSimplifiedGeometry(squaredTolerance);\r\n      simplifiedGeometries.push(simplifiedGeometry);\r\n      if (simplifiedGeometry !== geometry) {\r\n        simplified = true;\r\n      }\r\n    }\r\n    if (simplified) {\r\n      const simplifiedGeometryCollection = new GeometryCollection(\r\n        simplifiedGeometries,\r\n      );\r\n      return simplifiedGeometryCollection;\r\n    }\r\n    this.simplifiedGeometryMaxMinSquaredTolerance = squaredTolerance;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Get the type of this geometry.\r\n   * @return {import(\"./Geometry.js\").Type} Geometry type.\r\n   * @api\r\n   * @override\r\n   */\r\n  getType() {\r\n    return 'GeometryCollection';\r\n  }\r\n\r\n  /**\r\n   * Test if the geometry and the passed extent intersect.\r\n   * @param {import(\"../extent.js\").Extent} extent Extent.\r\n   * @return {boolean} `true` if the geometry and the extent intersect.\r\n   * @api\r\n   * @override\r\n   */\r\n  intersectsExtent(extent) {\r\n    const geometries = this.geometries_;\r\n    for (let i = 0, ii = geometries.length; i < ii; ++i) {\r\n      if (geometries[i].intersectsExtent(extent)) {\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * @return {boolean} Is empty.\r\n   */\r\n  isEmpty() {\r\n    return this.geometries_.length === 0;\r\n  }\r\n\r\n  /**\r\n   * Rotate the geometry around a given coordinate. This modifies the geometry\r\n   * coordinates in place.\r\n   * @param {number} angle Rotation angle in radians.\r\n   * @param {import(\"../coordinate.js\").Coordinate} anchor The rotation center.\r\n   * @api\r\n   * @override\r\n   */\r\n  rotate(angle, anchor) {\r\n    const geometries = this.geometries_;\r\n    for (let i = 0, ii = geometries.length; i < ii; ++i) {\r\n      geometries[i].rotate(angle, anchor);\r\n    }\r\n    this.changed();\r\n  }\r\n\r\n  /**\r\n   * Scale the geometry (with an optional origin).  This modifies the geometry\r\n   * coordinates in place.\r\n   * @abstract\r\n   * @param {number} sx The scaling factor in the x-direction.\r\n   * @param {number} [sy] The scaling factor in the y-direction (defaults to sx).\r\n   * @param {import(\"../coordinate.js\").Coordinate} [anchor] The scale origin (defaults to the center\r\n   *     of the geometry extent).\r\n   * @api\r\n   * @override\r\n   */\r\n  scale(sx, sy, anchor) {\r\n    if (!anchor) {\r\n      anchor = getCenter(this.getExtent());\r\n    }\r\n    const geometries = this.geometries_;\r\n    for (let i = 0, ii = geometries.length; i < ii; ++i) {\r\n      geometries[i].scale(sx, sy, anchor);\r\n    }\r\n    this.changed();\r\n  }\r\n\r\n  /**\r\n   * Set the geometries that make up this geometry collection.\r\n   * @param {Array<Geometry>} geometries Geometries.\r\n   * @api\r\n   */\r\n  setGeometries(geometries) {\r\n    this.setGeometriesArray(cloneGeometries(geometries));\r\n  }\r\n\r\n  /**\r\n   * @param {Array<Geometry>} geometries Geometries.\r\n   */\r\n  setGeometriesArray(geometries) {\r\n    this.unlistenGeometriesChange_();\r\n    this.geometries_ = geometries;\r\n    this.listenGeometriesChange_();\r\n    this.changed();\r\n  }\r\n\r\n  /**\r\n   * Apply a transform function to the coordinates of the geometry.\r\n   * The geometry is modified in place.\r\n   * If you do not want the geometry modified in place, first `clone()` it and\r\n   * then use this function on the clone.\r\n   * @param {import(\"../proj.js\").TransformFunction} transformFn Transform function.\r\n   * Called with a flat array of geometry coordinates.\r\n   * @api\r\n   * @override\r\n   */\r\n  applyTransform(transformFn) {\r\n    const geometries = this.geometries_;\r\n    for (let i = 0, ii = geometries.length; i < ii; ++i) {\r\n      geometries[i].applyTransform(transformFn);\r\n    }\r\n    this.changed();\r\n  }\r\n\r\n  /**\r\n   * Translate the geometry.  This modifies the geometry coordinates in place.  If\r\n   * instead you want a new geometry, first `clone()` this geometry.\r\n   * @param {number} deltaX Delta X.\r\n   * @param {number} deltaY Delta Y.\r\n   * @api\r\n   * @override\r\n   */\r\n  translate(deltaX, deltaY) {\r\n    const geometries = this.geometries_;\r\n    for (let i = 0, ii = geometries.length; i < ii; ++i) {\r\n      geometries[i].translate(deltaX, deltaY);\r\n    }\r\n    this.changed();\r\n  }\r\n\r\n  /**\r\n   * Clean up.\r\n   * @override\r\n   */\r\n  disposeInternal() {\r\n    this.unlistenGeometriesChange_();\r\n    super.disposeInternal();\r\n  }\r\n}\r\n\r\n/**\r\n * @param {Array<Geometry>} geometries Geometries.\r\n * @return {Array<Geometry>} Cloned geometries.\r\n */\r\nfunction cloneGeometries(geometries) {\r\n  return geometries.map((geometry) => geometry.clone());\r\n}\r\n\r\nexport default GeometryCollection;\r\n","/**\r\n * @module ol/format/JSONFeature\r\n */\r\nimport {abstract} from '../util.js';\r\nimport FeatureFormat from './Feature.js';\r\n\r\n/**\r\n * @classdesc\r\n * Abstract base class; normally only used for creating subclasses and not\r\n * instantiated in apps.\r\n * Base class for JSON feature formats.\r\n *\r\n * @template {import('../Feature.js').FeatureLike} [FeatureType=import(\"../Feature.js\").default]\r\n * @extends {FeatureFormat<FeatureType>}\r\n * @abstract\r\n */\r\nclass JSONFeature extends FeatureFormat {\r\n  constructor() {\r\n    super();\r\n  }\r\n\r\n  /**\r\n   * @return {import(\"./Feature.js\").Type} Format.\r\n   * @override\r\n   */\r\n  getType() {\r\n    return 'json';\r\n  }\r\n\r\n  /**\r\n   * Read a feature.  Only works for a single feature. Use `readFeatures` to\r\n   * read a feature collection.\r\n   *\r\n   * @param {ArrayBuffer|Document|Element|Object|string} source Source.\r\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\r\n   * @return {FeatureType|Array<FeatureType>} Feature.\r\n   * @api\r\n   * @override\r\n   */\r\n  readFeature(source, options) {\r\n    return this.readFeatureFromObject(\r\n      getObject(source),\r\n      this.getReadOptions(source, options),\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Read all features.  Works with both a single feature and a feature\r\n   * collection.\r\n   *\r\n   * @param {ArrayBuffer|Document|Element|Object|string} source Source.\r\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\r\n   * @return {Array<FeatureType>} Features.\r\n   * @api\r\n   * @override\r\n   */\r\n  readFeatures(source, options) {\r\n    return this.readFeaturesFromObject(\r\n      getObject(source),\r\n      this.getReadOptions(source, options),\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @abstract\r\n   * @param {Object} object Object.\r\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\r\n   * @protected\r\n   * @return {FeatureType|Array<FeatureType>} Feature.\r\n   */\r\n  readFeatureFromObject(object, options) {\r\n    return abstract();\r\n  }\r\n\r\n  /**\r\n   * @abstract\r\n   * @param {Object} object Object.\r\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\r\n   * @protected\r\n   * @return {Array<FeatureType>} Features.\r\n   */\r\n  readFeaturesFromObject(object, options) {\r\n    return abstract();\r\n  }\r\n\r\n  /**\r\n   * Read a geometry.\r\n   *\r\n   * @param {ArrayBuffer|Document|Element|Object|string} source Source.\r\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\r\n   * @return {import(\"../geom/Geometry.js\").default} Geometry.\r\n   * @api\r\n   * @override\r\n   */\r\n  readGeometry(source, options) {\r\n    return this.readGeometryFromObject(\r\n      getObject(source),\r\n      this.getReadOptions(source, options),\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @abstract\r\n   * @param {Object} object Object.\r\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\r\n   * @protected\r\n   * @return {import(\"../geom/Geometry.js\").default} Geometry.\r\n   */\r\n  readGeometryFromObject(object, options) {\r\n    return abstract();\r\n  }\r\n\r\n  /**\r\n   * Read the projection.\r\n   *\r\n   * @param {ArrayBuffer|Document|Element|Object|string} source Source.\r\n   * @return {import(\"../proj/Projection.js\").default} Projection.\r\n   * @api\r\n   * @override\r\n   */\r\n  readProjection(source) {\r\n    return this.readProjectionFromObject(getObject(source));\r\n  }\r\n\r\n  /**\r\n   * @abstract\r\n   * @param {Object} object Object.\r\n   * @protected\r\n   * @return {import(\"../proj/Projection.js\").default} Projection.\r\n   */\r\n  readProjectionFromObject(object) {\r\n    return abstract();\r\n  }\r\n\r\n  /**\r\n   * Encode a feature as string.\r\n   *\r\n   * @param {import(\"../Feature.js\").default} feature Feature.\r\n   * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\r\n   * @return {string} Encoded feature.\r\n   * @api\r\n   * @override\r\n   */\r\n  writeFeature(feature, options) {\r\n    return JSON.stringify(this.writeFeatureObject(feature, options));\r\n  }\r\n\r\n  /**\r\n   * @abstract\r\n   * @param {import(\"../Feature.js\").default} feature Feature.\r\n   * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\r\n   * @return {Object} Object.\r\n   */\r\n  writeFeatureObject(feature, options) {\r\n    return abstract();\r\n  }\r\n\r\n  /**\r\n   * Encode an array of features as string.\r\n   *\r\n   * @param {Array<import(\"../Feature.js\").default>} features Features.\r\n   * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\r\n   * @return {string} Encoded features.\r\n   * @api\r\n   * @override\r\n   */\r\n  writeFeatures(features, options) {\r\n    return JSON.stringify(this.writeFeaturesObject(features, options));\r\n  }\r\n\r\n  /**\r\n   * @abstract\r\n   * @param {Array<import(\"../Feature.js\").default>} features Features.\r\n   * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\r\n   * @return {Object} Object.\r\n   */\r\n  writeFeaturesObject(features, options) {\r\n    return abstract();\r\n  }\r\n\r\n  /**\r\n   * Encode a geometry as string.\r\n   *\r\n   * @param {import(\"../geom/Geometry.js\").default} geometry Geometry.\r\n   * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\r\n   * @return {string} Encoded geometry.\r\n   * @api\r\n   * @override\r\n   */\r\n  writeGeometry(geometry, options) {\r\n    return JSON.stringify(this.writeGeometryObject(geometry, options));\r\n  }\r\n\r\n  /**\r\n   * @abstract\r\n   * @param {import(\"../geom/Geometry.js\").default} geometry Geometry.\r\n   * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\r\n   * @return {Object} Object.\r\n   */\r\n  writeGeometryObject(geometry, options) {\r\n    return abstract();\r\n  }\r\n}\r\n\r\n/**\r\n * @param {Document|Element|Object|string} source Source.\r\n * @return {Object} Object.\r\n */\r\nfunction getObject(source) {\r\n  if (typeof source === 'string') {\r\n    const object = JSON.parse(source);\r\n    return object ? /** @type {Object} */ (object) : null;\r\n  }\r\n  if (source !== null) {\r\n    return source;\r\n  }\r\n  return null;\r\n}\r\n\r\nexport default JSONFeature;\r\n","/**\r\n * @module ol/source/OSM\r\n */\r\n\r\nimport XYZ from './XYZ.js';\r\n\r\n/**\r\n * The attribution containing a link to the OpenStreetMap Copyright and License\r\n * page.\r\n * @const\r\n * @type {string}\r\n * @api\r\n */\r\nexport const ATTRIBUTION =\r\n  '&#169; ' +\r\n  '<a href=\"https://www.openstreetmap.org/copyright\" target=\"_blank\">OpenStreetMap</a> ' +\r\n  'contributors.';\r\n\r\n/**\r\n * @typedef {Object} Options\r\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\r\n * @property {number} [cacheSize] Deprecated.  Use the cacheSize option on the layer instead.\r\n * @property {null|string} [crossOrigin='anonymous'] The `crossOrigin` attribute for loaded images.  Note that\r\n * you must provide a `crossOrigin` value if you want to access pixel data with the Canvas renderer.\r\n * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\r\n * @property {boolean} [interpolate=true] Use interpolated values when resampling.  By default,\r\n * linear interpolation is used when resampling.  Set to false to use the nearest neighbor instead.\r\n * @property {number} [maxZoom=19] Max zoom.\r\n * @property {number} [reprojectionErrorThreshold=0.5] Maximum allowed reprojection error (in pixels).\r\n * Higher values can increase reprojection performance, but decrease precision.\r\n * @property {import(\"../Tile.js\").LoadFunction} [tileLoadFunction] Optional function to load a tile given a URL. The default is\r\n * ```js\r\n * function(imageTile, src) {\r\n *   imageTile.getImage().src = src;\r\n * };\r\n * ```\r\n * @property {number} [transition=250] Duration of the opacity transition for rendering.\r\n * To disable the opacity transition, pass `transition: 0`.\r\n * @property {string} [url='https://tile.openstreetmap.org/{z}/{x}/{y}.png'] URL template.\r\n * Must include `{x}`, `{y}` or `{-y}`, and `{z}` placeholders.\r\n * @property {boolean} [wrapX=true] Whether to wrap the world horizontally.\r\n * @property {number|import(\"../array.js\").NearestDirectionFunction} [zDirection=0]\r\n * Choose whether to use tiles with a higher or lower zoom level when between integer\r\n * zoom levels. See {@link module:ol/tilegrid/TileGrid~TileGrid#getZForResolution}.\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * Layer source for the OpenStreetMap tile server.\r\n * @api\r\n */\r\nclass OSM extends XYZ {\r\n  /**\r\n   * @param {Options} [options] Open Street Map options.\r\n   */\r\n  constructor(options) {\r\n    options = options || {};\r\n\r\n    let attributions;\r\n    if (options.attributions !== undefined) {\r\n      attributions = options.attributions;\r\n    } else {\r\n      attributions = [ATTRIBUTION];\r\n    }\r\n\r\n    const crossOrigin =\r\n      options.crossOrigin !== undefined ? options.crossOrigin : 'anonymous';\r\n\r\n    const url =\r\n      options.url !== undefined\r\n        ? options.url\r\n        : 'https://tile.openstreetmap.org/{z}/{x}/{y}.png';\r\n\r\n    super({\r\n      attributions: attributions,\r\n      attributionsCollapsible: false,\r\n      cacheSize: options.cacheSize,\r\n      crossOrigin: crossOrigin,\r\n      interpolate: options.interpolate,\r\n      maxZoom: options.maxZoom !== undefined ? options.maxZoom : 19,\r\n      reprojectionErrorThreshold: options.reprojectionErrorThreshold,\r\n      tileLoadFunction: options.tileLoadFunction,\r\n      transition: options.transition,\r\n      url: url,\r\n      wrapX: options.wrapX,\r\n      zDirection: options.zDirection,\r\n    });\r\n  }\r\n}\r\n\r\nexport default OSM;\r\n","/**\r\n * @module ol/source/XYZ\r\n */\r\n\r\nimport {createXYZ, extentFromProjection} from '../tilegrid.js';\r\nimport TileImage from './TileImage.js';\r\n\r\n/**\r\n * @typedef {Object} Options\r\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\r\n * @property {boolean} [attributionsCollapsible=true] Attributions are collapsible.\r\n * @property {number} [cacheSize] Deprecated.  Use the cacheSize option on the layer instead.\r\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that\r\n * you must provide a `crossOrigin` value if you want to access pixel data with the Canvas renderer.\r\n * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\r\n * @property {boolean} [interpolate=true] Use interpolated values when resampling.  By default,\r\n * linear interpolation is used when resampling.  Set to false to use the nearest neighbor instead.\r\n * @property {import(\"../proj.js\").ProjectionLike} [projection='EPSG:3857'] Projection.\r\n * @property {number} [reprojectionErrorThreshold=0.5] Maximum allowed reprojection error (in pixels).\r\n * Higher values can increase reprojection performance, but decrease precision.\r\n * @property {number} [maxZoom=42] Optional max zoom level. Not used if `tileGrid` is provided.\r\n * @property {number} [minZoom=0] Optional min zoom level. Not used if `tileGrid` is provided.\r\n * @property {number} [maxResolution] Optional tile grid resolution at level zero. Not used if `tileGrid` is provided.\r\n * @property {import(\"../tilegrid/TileGrid.js\").default} [tileGrid] Tile grid.\r\n * @property {import(\"../Tile.js\").LoadFunction} [tileLoadFunction] Deprecated.  Use an ImageTile source with a loader\r\n * instead.  Optional function to load a tile given a URL. The default is\r\n * ```js\r\n * function(imageTile, src) {\r\n *   imageTile.getImage().src = src;\r\n * };\r\n * ```\r\n * @property {number} [tilePixelRatio=1] The pixel ratio used by the tile service.\r\n * For example, if the tile service advertizes 256px by 256px tiles but actually sends 512px\r\n * by 512px images (for retina/hidpi devices) then `tilePixelRatio`\r\n * should be set to `2`.\r\n * @property {number|import(\"../size.js\").Size} [tileSize=[256, 256]] The tile size used by the tile service.\r\n * Not used if `tileGrid` is provided.\r\n * @property {number} [gutter=0] The size in pixels of the gutter around image tiles to ignore.\r\n * This allows artifacts of rendering at tile edges to be ignored.\r\n * Supported images should be wider and taller than the tile size by a value of `2 x gutter`.\r\n * @property {import(\"../Tile.js\").UrlFunction} [tileUrlFunction] Deprecated.  Use an ImageTile source and provide a function\r\n * for the url option instead.\r\n * @property {string} [url] URL template. Must include `{x}`, `{y}` or `{-y}`,\r\n * and `{z}` placeholders. A `{?-?}` template pattern, for example `subdomain{a-f}.domain.com`,\r\n * may be used instead of defining each one separately in the `urls` option.\r\n * @property {Array<string>} [urls] Deprecated.  Use an ImageTile source and provide an array of URLs for the\r\n * url option instead.\r\n * @property {boolean} [wrapX=true] Whether to wrap the world horizontally.\r\n * @property {number} [transition=250] Duration of the opacity transition for rendering.\r\n * To disable the opacity transition, pass `transition: 0`.\r\n * @property {number|import(\"../array.js\").NearestDirectionFunction} [zDirection=0]\r\n * Choose whether to use tiles with a higher or lower zoom level when between integer\r\n * zoom levels. See {@link module:ol/tilegrid/TileGrid~TileGrid#getZForResolution}.\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * Layer source for tile data with URLs in a set XYZ format that are\r\n * defined in a URL template. By default, this follows the widely-used\r\n * Google grid where `x` 0 and `y` 0 are in the top left. Grids like\r\n * TMS where `x` 0 and `y` 0 are in the bottom left can be used by\r\n * using the `{-y}` placeholder in the URL template, so long as the\r\n * source does not have a custom tile grid. In this case\r\n * a `tileUrlFunction` can be used, such as:\r\n * ```js\r\n *  tileUrlFunction: function(coordinate) {\r\n *    return 'http://mapserver.com/' + coordinate[0] + '/' +\r\n *      coordinate[1] + '/' + (-coordinate[2] - 1) + '.png';\r\n *  }\r\n * ```\r\n * @api\r\n */\r\nclass XYZ extends TileImage {\r\n  /**\r\n   * @param {Options} [options] XYZ options.\r\n   */\r\n  constructor(options) {\r\n    options = options || {};\r\n\r\n    const projection =\r\n      options.projection !== undefined ? options.projection : 'EPSG:3857';\r\n\r\n    const tileGrid =\r\n      options.tileGrid !== undefined\r\n        ? options.tileGrid\r\n        : createXYZ({\r\n            extent: extentFromProjection(projection),\r\n            maxResolution: options.maxResolution,\r\n            maxZoom: options.maxZoom,\r\n            minZoom: options.minZoom,\r\n            tileSize: options.tileSize,\r\n          });\r\n\r\n    super({\r\n      attributions: options.attributions,\r\n      cacheSize: options.cacheSize,\r\n      crossOrigin: options.crossOrigin,\r\n      interpolate: options.interpolate,\r\n      projection: projection,\r\n      reprojectionErrorThreshold: options.reprojectionErrorThreshold,\r\n      tileGrid: tileGrid,\r\n      tileLoadFunction: options.tileLoadFunction,\r\n      tilePixelRatio: options.tilePixelRatio,\r\n      tileUrlFunction: options.tileUrlFunction,\r\n      url: options.url,\r\n      urls: options.urls,\r\n      wrapX: options.wrapX !== undefined ? options.wrapX : true,\r\n      transition: options.transition,\r\n      attributionsCollapsible: options.attributionsCollapsible,\r\n      zDirection: options.zDirection,\r\n    });\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.gutter_ = options.gutter !== undefined ? options.gutter : 0;\r\n  }\r\n\r\n  /**\r\n   * @return {number} Gutter.\r\n   * @override\r\n   */\r\n  getGutter() {\r\n    return this.gutter_;\r\n  }\r\n}\r\n\r\nexport default XYZ;\r\n","/**\r\n * @module ol/tilegrid\r\n */\r\nimport {\r\n  containsCoordinate,\r\n  createOrUpdate,\r\n  getCorner,\r\n  getHeight,\r\n  getWidth,\r\n} from './extent.js';\r\nimport {METERS_PER_UNIT, get as getProjection} from './proj.js';\r\nimport {toSize} from './size.js';\r\nimport TileGrid from './tilegrid/TileGrid.js';\r\nimport {DEFAULT_MAX_ZOOM, DEFAULT_TILE_SIZE} from './tilegrid/common.js';\r\n\r\nexport {TileGrid};\r\nexport {default as WMTS} from './tilegrid/WMTS.js';\r\n\r\n/**\r\n * @param {import(\"./proj/Projection.js\").default} projection Projection.\r\n * @return {!TileGrid} Default tile grid for the\r\n * passed projection.\r\n */\r\nexport function getForProjection(projection) {\r\n  let tileGrid = projection.getDefaultTileGrid();\r\n  if (!tileGrid) {\r\n    tileGrid = createForProjection(projection);\r\n    projection.setDefaultTileGrid(tileGrid);\r\n  }\r\n  return tileGrid;\r\n}\r\n\r\n/**\r\n * @param {TileGrid} tileGrid Tile grid.\r\n * @param {import(\"./tilecoord.js\").TileCoord} tileCoord Tile coordinate.\r\n * @param {import(\"./proj/Projection.js\").default} projection Projection.\r\n * @return {import(\"./tilecoord.js\").TileCoord} Tile coordinate.\r\n */\r\nexport function wrapX(tileGrid, tileCoord, projection) {\r\n  const z = tileCoord[0];\r\n  const center = tileGrid.getTileCoordCenter(tileCoord);\r\n  const projectionExtent = extentFromProjection(projection);\r\n  if (!containsCoordinate(projectionExtent, center)) {\r\n    const worldWidth = getWidth(projectionExtent);\r\n    const worldsAway = Math.ceil(\r\n      (projectionExtent[0] - center[0]) / worldWidth,\r\n    );\r\n    center[0] += worldWidth * worldsAway;\r\n    return tileGrid.getTileCoordForCoordAndZ(center, z);\r\n  }\r\n  return tileCoord;\r\n}\r\n\r\n/**\r\n * @param {import(\"./extent.js\").Extent} extent Extent.\r\n * @param {number} [maxZoom] Maximum zoom level (default is\r\n *     DEFAULT_MAX_ZOOM).\r\n * @param {number|import(\"./size.js\").Size} [tileSize] Tile size (default uses\r\n *     DEFAULT_TILE_SIZE).\r\n * @param {import(\"./extent.js\").Corner} [corner] Extent corner (default is `'top-left'`).\r\n * @return {!TileGrid} TileGrid instance.\r\n */\r\nexport function createForExtent(extent, maxZoom, tileSize, corner) {\r\n  corner = corner !== undefined ? corner : 'top-left';\r\n\r\n  const resolutions = resolutionsFromExtent(extent, maxZoom, tileSize);\r\n\r\n  return new TileGrid({\r\n    extent: extent,\r\n    origin: getCorner(extent, corner),\r\n    resolutions: resolutions,\r\n    tileSize: tileSize,\r\n  });\r\n}\r\n\r\n/**\r\n * @typedef {Object} XYZOptions\r\n * @property {import(\"./extent.js\").Extent} [extent] Extent for the tile grid. The origin for an XYZ tile grid is the\r\n * top-left corner of the extent. If `maxResolution` is not provided the zero level of the grid is defined by the resolution\r\n * at which one tile fits in the provided extent. If not provided, the extent of the EPSG:3857 projection is used.\r\n * @property {number} [maxResolution] Resolution at level zero.\r\n * @property {number} [maxZoom] Maximum zoom. The default is `42`. This determines the number of levels\r\n * in the grid set. For example, a `maxZoom` of 21 means there are 22 levels in the grid set.\r\n * @property {number} [minZoom=0] Minimum zoom.\r\n * @property {number|import(\"./size.js\").Size} [tileSize=[256, 256]] Tile size in pixels.\r\n */\r\n\r\n/**\r\n * Creates a tile grid with a standard XYZ tiling scheme.\r\n * @param {XYZOptions} [options] Tile grid options.\r\n * @return {!TileGrid} Tile grid instance.\r\n * @api\r\n */\r\nexport function createXYZ(options) {\r\n  const xyzOptions = options || {};\r\n\r\n  const extent = xyzOptions.extent || getProjection('EPSG:3857').getExtent();\r\n\r\n  const gridOptions = {\r\n    extent: extent,\r\n    minZoom: xyzOptions.minZoom,\r\n    tileSize: xyzOptions.tileSize,\r\n    resolutions: resolutionsFromExtent(\r\n      extent,\r\n      xyzOptions.maxZoom,\r\n      xyzOptions.tileSize,\r\n      xyzOptions.maxResolution,\r\n    ),\r\n  };\r\n  return new TileGrid(gridOptions);\r\n}\r\n\r\n/**\r\n * Create a resolutions array from an extent.  A zoom factor of 2 is assumed.\r\n * @param {import(\"./extent.js\").Extent} extent Extent.\r\n * @param {number} [maxZoom] Maximum zoom level (default is\r\n *     DEFAULT_MAX_ZOOM).\r\n * @param {number|import(\"./size.js\").Size} [tileSize] Tile size (default uses\r\n *     DEFAULT_TILE_SIZE).\r\n * @param {number} [maxResolution] Resolution at level zero.\r\n * @return {!Array<number>} Resolutions array.\r\n */\r\nfunction resolutionsFromExtent(extent, maxZoom, tileSize, maxResolution) {\r\n  maxZoom = maxZoom !== undefined ? maxZoom : DEFAULT_MAX_ZOOM;\r\n  tileSize = toSize(tileSize !== undefined ? tileSize : DEFAULT_TILE_SIZE);\r\n\r\n  const height = getHeight(extent);\r\n  const width = getWidth(extent);\r\n\r\n  maxResolution =\r\n    maxResolution > 0\r\n      ? maxResolution\r\n      : Math.max(width / tileSize[0], height / tileSize[1]);\r\n\r\n  const length = maxZoom + 1;\r\n  const resolutions = new Array(length);\r\n  for (let z = 0; z < length; ++z) {\r\n    resolutions[z] = maxResolution / Math.pow(2, z);\r\n  }\r\n  return resolutions;\r\n}\r\n\r\n/**\r\n * @param {import(\"./proj.js\").ProjectionLike} projection Projection.\r\n * @param {number} [maxZoom] Maximum zoom level (default is\r\n *     DEFAULT_MAX_ZOOM).\r\n * @param {number|import(\"./size.js\").Size} [tileSize] Tile size (default uses\r\n *     DEFAULT_TILE_SIZE).\r\n * @param {import(\"./extent.js\").Corner} [corner] Extent corner (default is `'top-left'`).\r\n * @return {!TileGrid} TileGrid instance.\r\n */\r\nexport function createForProjection(projection, maxZoom, tileSize, corner) {\r\n  const extent = extentFromProjection(projection);\r\n  return createForExtent(extent, maxZoom, tileSize, corner);\r\n}\r\n\r\n/**\r\n * Generate a tile grid extent from a projection.  If the projection has an\r\n * extent, it is used.  If not, a global extent is assumed.\r\n * @param {import(\"./proj.js\").ProjectionLike} projection Projection.\r\n * @return {import(\"./extent.js\").Extent} Extent.\r\n */\r\nexport function extentFromProjection(projection) {\r\n  projection = getProjection(projection);\r\n  let extent = projection.getExtent();\r\n  if (!extent) {\r\n    const half =\r\n      (180 * METERS_PER_UNIT.degrees) / projection.getMetersPerUnit();\r\n    extent = createOrUpdate(-half, -half, half, half);\r\n  }\r\n  return extent;\r\n}\r\n","/**\r\n * @module ol/tilegrid/TileGrid\r\n */\r\nimport TileRange, {\r\n  createOrUpdate as createOrUpdateTileRange,\r\n} from '../TileRange.js';\r\nimport {isSorted, linearFindNearest} from '../array.js';\r\nimport {assert} from '../asserts.js';\r\nimport {createOrUpdate, getTopLeft} from '../extent.js';\r\nimport {intersectsLinearRing} from '../geom/flat/intersectsextent.js';\r\nimport {ceil, clamp, floor} from '../math.js';\r\nimport {toSize} from '../size.js';\r\nimport {createOrUpdate as createOrUpdateTileCoord} from '../tilecoord.js';\r\nimport {DEFAULT_TILE_SIZE} from './common.js';\r\n\r\n/**\r\n * @private\r\n * @type {import(\"../tilecoord.js\").TileCoord}\r\n */\r\nconst tmpTileCoord = [0, 0, 0];\r\n\r\n/**\r\n * Number of decimal digits to consider in integer values when rounding.\r\n * @type {number}\r\n */\r\nconst DECIMALS = 5;\r\n\r\n/**\r\n * @typedef {Object} Options\r\n * @property {import(\"../extent.js\").Extent} [extent] Extent for the tile grid. No tiles outside this\r\n * extent will be requested by {@link module:ol/source/Tile~TileSource} sources. When no `origin` or\r\n * `origins` are configured, the `origin` will be set to the top-left corner of the extent.\r\n * @property {number} [minZoom=0] Minimum zoom.\r\n * @property {import(\"../coordinate.js\").Coordinate} [origin] The tile grid origin, i.e. where the `x`\r\n * and `y` axes meet (`[z, 0, 0]`). Tile coordinates increase left to right and downwards. If not\r\n * specified, `extent` or `origins` must be provided.\r\n * @property {Array<import(\"../coordinate.js\").Coordinate>} [origins] Tile grid origins, i.e. where\r\n * the `x` and `y` axes meet (`[z, 0, 0]`), for each zoom level. If given, the array length\r\n * should match the length of the `resolutions` array, i.e. each resolution can have a different\r\n * origin. Tile coordinates increase left to right and downwards. If not specified, `extent` or\r\n * `origin` must be provided.\r\n * @property {!Array<number>} resolutions Resolutions. The array index of each resolution needs\r\n * to match the zoom level. This means that even if a `minZoom` is configured, the resolutions\r\n * array will have a length of `maxZoom + 1`.\r\n * @property {Array<import(\"../size.js\").Size>} [sizes] Number of tile rows and columns\r\n * of the grid for each zoom level. If specified the values\r\n * define each zoom level's extent together with the `origin` or `origins`.\r\n * A grid `extent` can be configured in addition, and will further limit the extent\r\n * for which tile requests are made by sources. If the bottom-left corner of\r\n * an extent is used as `origin` or `origins`, then the `y` value must be\r\n * negative because OpenLayers tile coordinates use the top left as the origin.\r\n * @property {number|import(\"../size.js\").Size} [tileSize] Tile size.\r\n * Default is `[256, 256]`.\r\n * @property {Array<number|import(\"../size.js\").Size>} [tileSizes] Tile sizes. If given, the array length\r\n * should match the length of the `resolutions` array, i.e. each resolution can have a different\r\n * tile size.\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * Base class for setting the grid pattern for sources accessing tiled-image\r\n * servers.\r\n * @api\r\n */\r\nclass TileGrid {\r\n  /**\r\n   * @param {Options} options Tile grid options.\r\n   */\r\n  constructor(options) {\r\n    /**\r\n     * @protected\r\n     * @type {number}\r\n     */\r\n    this.minZoom = options.minZoom !== undefined ? options.minZoom : 0;\r\n\r\n    /**\r\n     * @private\r\n     * @type {!Array<number>}\r\n     */\r\n    this.resolutions_ = options.resolutions;\r\n    assert(\r\n      isSorted(\r\n        this.resolutions_,\r\n        /**\r\n         * @param {number} a First resolution\r\n         * @param {number} b Second resolution\r\n         * @return {number} Comparison result\r\n         */\r\n        (a, b) => b - a,\r\n        true,\r\n      ),\r\n      '`resolutions` must be sorted in descending order',\r\n    );\r\n\r\n    // check if we've got a consistent zoom factor and origin\r\n    let zoomFactor;\r\n    if (!options.origins) {\r\n      for (let i = 0, ii = this.resolutions_.length - 1; i < ii; ++i) {\r\n        if (!zoomFactor) {\r\n          zoomFactor = this.resolutions_[i] / this.resolutions_[i + 1];\r\n        } else {\r\n          if (this.resolutions_[i] / this.resolutions_[i + 1] !== zoomFactor) {\r\n            zoomFactor = undefined;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    /**\r\n     * @private\r\n     * @type {number|undefined}\r\n     */\r\n    this.zoomFactor_ = zoomFactor;\r\n\r\n    /**\r\n     * @protected\r\n     * @type {number}\r\n     */\r\n    this.maxZoom = this.resolutions_.length - 1;\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"../coordinate.js\").Coordinate|null}\r\n     */\r\n    this.origin_ = options.origin !== undefined ? options.origin : null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {Array<import(\"../coordinate.js\").Coordinate>}\r\n     */\r\n    this.origins_ = null;\r\n    if (options.origins !== undefined) {\r\n      this.origins_ = options.origins;\r\n      assert(\r\n        this.origins_.length == this.resolutions_.length,\r\n        'Number of `origins` and `resolutions` must be equal',\r\n      );\r\n    }\r\n\r\n    const extent = options.extent;\r\n\r\n    if (extent !== undefined && !this.origin_ && !this.origins_) {\r\n      this.origin_ = getTopLeft(extent);\r\n    }\r\n\r\n    assert(\r\n      (!this.origin_ && this.origins_) || (this.origin_ && !this.origins_),\r\n      'Either `origin` or `origins` must be configured, never both',\r\n    );\r\n\r\n    /**\r\n     * @private\r\n     * @type {Array<number|import(\"../size.js\").Size>}\r\n     */\r\n    this.tileSizes_ = null;\r\n    if (options.tileSizes !== undefined) {\r\n      this.tileSizes_ = options.tileSizes;\r\n      assert(\r\n        this.tileSizes_.length == this.resolutions_.length,\r\n        'Number of `tileSizes` and `resolutions` must be equal',\r\n      );\r\n    }\r\n\r\n    /**\r\n     * @private\r\n     * @type {number|import(\"../size.js\").Size}\r\n     */\r\n    this.tileSize_ =\r\n      options.tileSize !== undefined\r\n        ? options.tileSize\r\n        : !this.tileSizes_\r\n          ? DEFAULT_TILE_SIZE\r\n          : null;\r\n    assert(\r\n      (!this.tileSize_ && this.tileSizes_) ||\r\n        (this.tileSize_ && !this.tileSizes_),\r\n      'Either `tileSize` or `tileSizes` must be configured, never both',\r\n    );\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"../extent.js\").Extent}\r\n     */\r\n    this.extent_ = extent !== undefined ? extent : null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {Array<import(\"../TileRange.js\").default>}\r\n     */\r\n    this.fullTileRanges_ = null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"../size.js\").Size}\r\n     */\r\n    this.tmpSize_ = [0, 0];\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"../extent.js\").Extent}\r\n     */\r\n    this.tmpExtent_ = [0, 0, 0, 0];\r\n\r\n    if (options.sizes !== undefined) {\r\n      this.fullTileRanges_ = options.sizes.map((size, z) => {\r\n        const tileRange = new TileRange(\r\n          Math.min(0, size[0]),\r\n          Math.max(size[0] - 1, -1),\r\n          Math.min(0, size[1]),\r\n          Math.max(size[1] - 1, -1),\r\n        );\r\n        if (extent) {\r\n          const restrictedTileRange = this.getTileRangeForExtentAndZ(extent, z);\r\n          tileRange.minX = Math.max(restrictedTileRange.minX, tileRange.minX);\r\n          tileRange.maxX = Math.min(restrictedTileRange.maxX, tileRange.maxX);\r\n          tileRange.minY = Math.max(restrictedTileRange.minY, tileRange.minY);\r\n          tileRange.maxY = Math.min(restrictedTileRange.maxY, tileRange.maxY);\r\n        }\r\n        return tileRange;\r\n      });\r\n    } else if (extent) {\r\n      this.calculateTileRanges_(extent);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Call a function with each tile coordinate for a given extent and zoom level.\r\n   *\r\n   * @param {import(\"../extent.js\").Extent} extent Extent.\r\n   * @param {number} zoom Integer zoom level.\r\n   * @param {function(import(\"../tilecoord.js\").TileCoord): void} callback Function called with each tile coordinate.\r\n   * @api\r\n   */\r\n  forEachTileCoord(extent, zoom, callback) {\r\n    const tileRange = this.getTileRangeForExtentAndZ(extent, zoom);\r\n    for (let i = tileRange.minX, ii = tileRange.maxX; i <= ii; ++i) {\r\n      for (let j = tileRange.minY, jj = tileRange.maxY; j <= jj; ++j) {\r\n        callback([zoom, i, j]);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\r\n   * @param {function(number, import(\"../TileRange.js\").default): boolean} callback Callback.\r\n   * @param {import(\"../TileRange.js\").default} [tempTileRange] Temporary import(\"../TileRange.js\").default object.\r\n   * @param {import(\"../extent.js\").Extent} [tempExtent] Temporary import(\"../extent.js\").Extent object.\r\n   * @return {boolean} Callback succeeded.\r\n   */\r\n  forEachTileCoordParentTileRange(\r\n    tileCoord,\r\n    callback,\r\n    tempTileRange,\r\n    tempExtent,\r\n  ) {\r\n    let tileRange, x, y;\r\n    let tileCoordExtent = null;\r\n    let z = tileCoord[0] - 1;\r\n    if (this.zoomFactor_ === 2) {\r\n      x = tileCoord[1];\r\n      y = tileCoord[2];\r\n    } else {\r\n      tileCoordExtent = this.getTileCoordExtent(tileCoord, tempExtent);\r\n    }\r\n    while (z >= this.minZoom) {\r\n      if (x !== undefined && y !== undefined) {\r\n        x = Math.floor(x / 2);\r\n        y = Math.floor(y / 2);\r\n        tileRange = createOrUpdateTileRange(x, x, y, y, tempTileRange);\r\n      } else {\r\n        tileRange = this.getTileRangeForExtentAndZ(\r\n          tileCoordExtent,\r\n          z,\r\n          tempTileRange,\r\n        );\r\n      }\r\n      if (callback(z, tileRange)) {\r\n        return true;\r\n      }\r\n      --z;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Get the extent for this tile grid, if it was configured.\r\n   * @return {import(\"../extent.js\").Extent} Extent.\r\n   * @api\r\n   */\r\n  getExtent() {\r\n    return this.extent_;\r\n  }\r\n\r\n  /**\r\n   * Get the maximum zoom level for the grid.\r\n   * @return {number} Max zoom.\r\n   * @api\r\n   */\r\n  getMaxZoom() {\r\n    return this.maxZoom;\r\n  }\r\n\r\n  /**\r\n   * Get the minimum zoom level for the grid.\r\n   * @return {number} Min zoom.\r\n   * @api\r\n   */\r\n  getMinZoom() {\r\n    return this.minZoom;\r\n  }\r\n\r\n  /**\r\n   * Get the origin for the grid at the given zoom level.\r\n   * @param {number} z Integer zoom level.\r\n   * @return {import(\"../coordinate.js\").Coordinate} Origin.\r\n   * @api\r\n   */\r\n  getOrigin(z) {\r\n    if (this.origin_) {\r\n      return this.origin_;\r\n    }\r\n    return this.origins_[z];\r\n  }\r\n\r\n  /**\r\n   * Get the resolution for the given zoom level.\r\n   * @param {number} z Integer zoom level.\r\n   * @return {number} Resolution.\r\n   * @api\r\n   */\r\n  getResolution(z) {\r\n    return this.resolutions_[z];\r\n  }\r\n\r\n  /**\r\n   * Get the list of resolutions for the tile grid.\r\n   * @return {Array<number>} Resolutions.\r\n   * @api\r\n   */\r\n  getResolutions() {\r\n    return this.resolutions_;\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\r\n   * @param {import(\"../TileRange.js\").default} [tempTileRange] Temporary import(\"../TileRange.js\").default object.\r\n   * @param {import(\"../extent.js\").Extent} [tempExtent] Temporary import(\"../extent.js\").Extent object.\r\n   * @return {import(\"../TileRange.js\").default|null} Tile range.\r\n   */\r\n  getTileCoordChildTileRange(tileCoord, tempTileRange, tempExtent) {\r\n    if (tileCoord[0] < this.maxZoom) {\r\n      if (this.zoomFactor_ === 2) {\r\n        const minX = tileCoord[1] * 2;\r\n        const minY = tileCoord[2] * 2;\r\n        return createOrUpdateTileRange(\r\n          minX,\r\n          minX + 1,\r\n          minY,\r\n          minY + 1,\r\n          tempTileRange,\r\n        );\r\n      }\r\n      const tileCoordExtent = this.getTileCoordExtent(\r\n        tileCoord,\r\n        tempExtent || this.tmpExtent_,\r\n      );\r\n      return this.getTileRangeForExtentAndZ(\r\n        tileCoordExtent,\r\n        tileCoord[0] + 1,\r\n        tempTileRange,\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\r\n   * @param {number} z Integer zoom level.\r\n   * @param {import(\"../TileRange.js\").default} [tempTileRange] Temporary import(\"../TileRange.js\").default object.\r\n   * @return {import(\"../TileRange.js\").default|null} Tile range.\r\n   */\r\n  getTileRangeForTileCoordAndZ(tileCoord, z, tempTileRange) {\r\n    if (z > this.maxZoom || z < this.minZoom) {\r\n      return null;\r\n    }\r\n\r\n    const tileCoordZ = tileCoord[0];\r\n    const tileCoordX = tileCoord[1];\r\n    const tileCoordY = tileCoord[2];\r\n\r\n    if (z === tileCoordZ) {\r\n      return createOrUpdateTileRange(\r\n        tileCoordX,\r\n        tileCoordY,\r\n        tileCoordX,\r\n        tileCoordY,\r\n        tempTileRange,\r\n      );\r\n    }\r\n\r\n    if (this.zoomFactor_) {\r\n      const factor = Math.pow(this.zoomFactor_, z - tileCoordZ);\r\n      const minX = Math.floor(tileCoordX * factor);\r\n      const minY = Math.floor(tileCoordY * factor);\r\n      if (z < tileCoordZ) {\r\n        return createOrUpdateTileRange(minX, minX, minY, minY, tempTileRange);\r\n      }\r\n\r\n      const maxX = Math.floor(factor * (tileCoordX + 1)) - 1;\r\n      const maxY = Math.floor(factor * (tileCoordY + 1)) - 1;\r\n      return createOrUpdateTileRange(minX, maxX, minY, maxY, tempTileRange);\r\n    }\r\n\r\n    const tileCoordExtent = this.getTileCoordExtent(tileCoord, this.tmpExtent_);\r\n    return this.getTileRangeForExtentAndZ(tileCoordExtent, z, tempTileRange);\r\n  }\r\n\r\n  /**\r\n   * Get a tile range for the given extent and integer zoom level.\r\n   * @param {import(\"../extent.js\").Extent} extent Extent.\r\n   * @param {number} z Integer zoom level.\r\n   * @param {import(\"../TileRange.js\").default} [tempTileRange] Temporary tile range object.\r\n   * @return {import(\"../TileRange.js\").default} Tile range.\r\n   */\r\n  getTileRangeForExtentAndZ(extent, z, tempTileRange) {\r\n    this.getTileCoordForXYAndZ_(extent[0], extent[3], z, false, tmpTileCoord);\r\n    const minX = tmpTileCoord[1];\r\n    const minY = tmpTileCoord[2];\r\n    this.getTileCoordForXYAndZ_(extent[2], extent[1], z, true, tmpTileCoord);\r\n    const maxX = tmpTileCoord[1];\r\n    const maxY = tmpTileCoord[2];\r\n    return createOrUpdateTileRange(minX, maxX, minY, maxY, tempTileRange);\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\r\n   * @return {import(\"../coordinate.js\").Coordinate} Tile center.\r\n   */\r\n  getTileCoordCenter(tileCoord) {\r\n    const origin = this.getOrigin(tileCoord[0]);\r\n    const resolution = this.getResolution(tileCoord[0]);\r\n    const tileSize = toSize(this.getTileSize(tileCoord[0]), this.tmpSize_);\r\n    return [\r\n      origin[0] + (tileCoord[1] + 0.5) * tileSize[0] * resolution,\r\n      origin[1] - (tileCoord[2] + 0.5) * tileSize[1] * resolution,\r\n    ];\r\n  }\r\n\r\n  /**\r\n   * Get the extent of a tile coordinate.\r\n   *\r\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\r\n   * @param {import(\"../extent.js\").Extent} [tempExtent] Temporary extent object.\r\n   * @return {import(\"../extent.js\").Extent} Extent.\r\n   * @api\r\n   */\r\n  getTileCoordExtent(tileCoord, tempExtent) {\r\n    const origin = this.getOrigin(tileCoord[0]);\r\n    const resolution = this.getResolution(tileCoord[0]);\r\n    const tileSize = toSize(this.getTileSize(tileCoord[0]), this.tmpSize_);\r\n    const minX = origin[0] + tileCoord[1] * tileSize[0] * resolution;\r\n    const minY = origin[1] - (tileCoord[2] + 1) * tileSize[1] * resolution;\r\n    const maxX = minX + tileSize[0] * resolution;\r\n    const maxY = minY + tileSize[1] * resolution;\r\n    return createOrUpdate(minX, minY, maxX, maxY, tempExtent);\r\n  }\r\n\r\n  /**\r\n   * Get the tile coordinate for the given map coordinate and resolution.  This\r\n   * method considers that coordinates that intersect tile boundaries should be\r\n   * assigned the higher tile coordinate.\r\n   *\r\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\r\n   * @param {number} resolution Resolution.\r\n   * @param {import(\"../tilecoord.js\").TileCoord} [opt_tileCoord] Destination import(\"../tilecoord.js\").TileCoord object.\r\n   * @return {import(\"../tilecoord.js\").TileCoord} Tile coordinate.\r\n   * @api\r\n   */\r\n  getTileCoordForCoordAndResolution(coordinate, resolution, opt_tileCoord) {\r\n    return this.getTileCoordForXYAndResolution_(\r\n      coordinate[0],\r\n      coordinate[1],\r\n      resolution,\r\n      false,\r\n      opt_tileCoord,\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Note that this method should not be called for resolutions that correspond\r\n   * to an integer zoom level.  Instead call the `getTileCoordForXYAndZ_` method.\r\n   * @param {number} x X.\r\n   * @param {number} y Y.\r\n   * @param {number} resolution Resolution (for a non-integer zoom level).\r\n   * @param {boolean} reverseIntersectionPolicy Instead of letting edge\r\n   *     intersections go to the higher tile coordinate, let edge intersections\r\n   *     go to the lower tile coordinate.\r\n   * @param {import(\"../tilecoord.js\").TileCoord} [opt_tileCoord] Temporary import(\"../tilecoord.js\").TileCoord object.\r\n   * @return {import(\"../tilecoord.js\").TileCoord} Tile coordinate.\r\n   * @private\r\n   */\r\n  getTileCoordForXYAndResolution_(\r\n    x,\r\n    y,\r\n    resolution,\r\n    reverseIntersectionPolicy,\r\n    opt_tileCoord,\r\n  ) {\r\n    const z = this.getZForResolution(resolution);\r\n    const scale = resolution / this.getResolution(z);\r\n    const origin = this.getOrigin(z);\r\n    const tileSize = toSize(this.getTileSize(z), this.tmpSize_);\r\n\r\n    let tileCoordX = (scale * (x - origin[0])) / resolution / tileSize[0];\r\n    let tileCoordY = (scale * (origin[1] - y)) / resolution / tileSize[1];\r\n\r\n    if (reverseIntersectionPolicy) {\r\n      tileCoordX = ceil(tileCoordX, DECIMALS) - 1;\r\n      tileCoordY = ceil(tileCoordY, DECIMALS) - 1;\r\n    } else {\r\n      tileCoordX = floor(tileCoordX, DECIMALS);\r\n      tileCoordY = floor(tileCoordY, DECIMALS);\r\n    }\r\n\r\n    return createOrUpdateTileCoord(z, tileCoordX, tileCoordY, opt_tileCoord);\r\n  }\r\n\r\n  /**\r\n   * Although there is repetition between this method and `getTileCoordForXYAndResolution_`,\r\n   * they should have separate implementations.  This method is for integer zoom\r\n   * levels.  The other method should only be called for resolutions corresponding\r\n   * to non-integer zoom levels.\r\n   * @param {number} x Map x coordinate.\r\n   * @param {number} y Map y coordinate.\r\n   * @param {number} z Integer zoom level.\r\n   * @param {boolean} reverseIntersectionPolicy Instead of letting edge\r\n   *     intersections go to the higher tile coordinate, let edge intersections\r\n   *     go to the lower tile coordinate.\r\n   * @param {import(\"../tilecoord.js\").TileCoord} [opt_tileCoord] Temporary import(\"../tilecoord.js\").TileCoord object.\r\n   * @return {import(\"../tilecoord.js\").TileCoord} Tile coordinate.\r\n   * @private\r\n   */\r\n  getTileCoordForXYAndZ_(x, y, z, reverseIntersectionPolicy, opt_tileCoord) {\r\n    const origin = this.getOrigin(z);\r\n    const resolution = this.getResolution(z);\r\n    const tileSize = toSize(this.getTileSize(z), this.tmpSize_);\r\n\r\n    let tileCoordX = (x - origin[0]) / resolution / tileSize[0];\r\n    let tileCoordY = (origin[1] - y) / resolution / tileSize[1];\r\n\r\n    if (reverseIntersectionPolicy) {\r\n      tileCoordX = ceil(tileCoordX, DECIMALS) - 1;\r\n      tileCoordY = ceil(tileCoordY, DECIMALS) - 1;\r\n    } else {\r\n      tileCoordX = floor(tileCoordX, DECIMALS);\r\n      tileCoordY = floor(tileCoordY, DECIMALS);\r\n    }\r\n\r\n    return createOrUpdateTileCoord(z, tileCoordX, tileCoordY, opt_tileCoord);\r\n  }\r\n\r\n  /**\r\n   * Get a tile coordinate given a map coordinate and zoom level.\r\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\r\n   * @param {number} z Integer zoom level, e.g. the result of a `getZForResolution()` method call\r\n   * @param {import(\"../tilecoord.js\").TileCoord} [opt_tileCoord] Destination import(\"../tilecoord.js\").TileCoord object.\r\n   * @return {import(\"../tilecoord.js\").TileCoord} Tile coordinate.\r\n   * @api\r\n   */\r\n  getTileCoordForCoordAndZ(coordinate, z, opt_tileCoord) {\r\n    return this.getTileCoordForXYAndZ_(\r\n      coordinate[0],\r\n      coordinate[1],\r\n      z,\r\n      false,\r\n      opt_tileCoord,\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\r\n   * @return {number} Tile resolution.\r\n   */\r\n  getTileCoordResolution(tileCoord) {\r\n    return this.resolutions_[tileCoord[0]];\r\n  }\r\n\r\n  /**\r\n   * Get the tile size for a zoom level. The type of the return value matches the\r\n   * `tileSize` or `tileSizes` that the tile grid was configured with. To always\r\n   * get an {@link import(\"../size.js\").Size}, run the result through {@link module:ol/size.toSize}.\r\n   * @param {number} z Z.\r\n   * @return {number|import(\"../size.js\").Size} Tile size.\r\n   * @api\r\n   */\r\n  getTileSize(z) {\r\n    if (this.tileSize_) {\r\n      return this.tileSize_;\r\n    }\r\n    return this.tileSizes_[z];\r\n  }\r\n\r\n  /**\r\n   * @param {number} z Zoom level.\r\n   * @return {import(\"../TileRange.js\").default|null} Extent tile range for the specified zoom level.\r\n   */\r\n  getFullTileRange(z) {\r\n    if (!this.fullTileRanges_) {\r\n      return this.extent_\r\n        ? this.getTileRangeForExtentAndZ(this.extent_, z)\r\n        : null;\r\n    }\r\n    return this.fullTileRanges_[z];\r\n  }\r\n\r\n  /**\r\n   * @param {number} resolution Resolution.\r\n   * @param {number|import(\"../array.js\").NearestDirectionFunction} [opt_direction]\r\n   *     If 0, the nearest resolution will be used.\r\n   *     If 1, the nearest higher resolution (lower Z) will be used. If -1, the\r\n   *     nearest lower resolution (higher Z) will be used. Default is 0.\r\n   *     Use a {@link module:ol/array~NearestDirectionFunction} for more precise control.\r\n   *\r\n   * For example to change tile Z at the midpoint of zoom levels\r\n   * ```js\r\n   * function(value, high, low) {\r\n   *   return value - low * Math.sqrt(high / low);\r\n   * }\r\n   * ```\r\n   * @return {number} Z.\r\n   * @api\r\n   */\r\n  getZForResolution(resolution, opt_direction) {\r\n    const z = linearFindNearest(\r\n      this.resolutions_,\r\n      resolution,\r\n      opt_direction || 0,\r\n    );\r\n    return clamp(z, this.minZoom, this.maxZoom);\r\n  }\r\n\r\n  /**\r\n   * The tile with the provided tile coordinate intersects the given viewport.\r\n   * @param {import('../tilecoord.js').TileCoord} tileCoord Tile coordinate.\r\n   * @param {Array<number>} viewport Viewport as returned from {@link module:ol/extent.getRotatedViewport}.\r\n   * @return {boolean} The tile with the provided tile coordinate intersects the given viewport.\r\n   */\r\n  tileCoordIntersectsViewport(tileCoord, viewport) {\r\n    return intersectsLinearRing(\r\n      viewport,\r\n      0,\r\n      viewport.length,\r\n      2,\r\n      this.getTileCoordExtent(tileCoord),\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @param {!import(\"../extent.js\").Extent} extent Extent for this tile grid.\r\n   * @private\r\n   */\r\n  calculateTileRanges_(extent) {\r\n    const length = this.resolutions_.length;\r\n    const fullTileRanges = new Array(length);\r\n    for (let z = this.minZoom; z < length; ++z) {\r\n      fullTileRanges[z] = this.getTileRangeForExtentAndZ(extent, z);\r\n    }\r\n    this.fullTileRanges_ = fullTileRanges;\r\n  }\r\n}\r\n\r\nexport default TileGrid;\r\n","/**\r\n * @module ol/TileRange\r\n */\r\n\r\n/**\r\n * A representation of a contiguous block of tiles.  A tile range is specified\r\n * by its min/max tile coordinates and is inclusive of coordinates.\r\n */\r\nclass TileRange {\r\n  /**\r\n   * @param {number} minX Minimum X.\r\n   * @param {number} maxX Maximum X.\r\n   * @param {number} minY Minimum Y.\r\n   * @param {number} maxY Maximum Y.\r\n   */\r\n  constructor(minX, maxX, minY, maxY) {\r\n    /**\r\n     * @type {number}\r\n     */\r\n    this.minX = minX;\r\n\r\n    /**\r\n     * @type {number}\r\n     */\r\n    this.maxX = maxX;\r\n\r\n    /**\r\n     * @type {number}\r\n     */\r\n    this.minY = minY;\r\n\r\n    /**\r\n     * @type {number}\r\n     */\r\n    this.maxY = maxY;\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"./tilecoord.js\").TileCoord} tileCoord Tile coordinate.\r\n   * @return {boolean} Contains tile coordinate.\r\n   */\r\n  contains(tileCoord) {\r\n    return this.containsXY(tileCoord[1], tileCoord[2]);\r\n  }\r\n\r\n  /**\r\n   * @param {TileRange} tileRange Tile range.\r\n   * @return {boolean} Contains.\r\n   */\r\n  containsTileRange(tileRange) {\r\n    return (\r\n      this.minX <= tileRange.minX &&\r\n      tileRange.maxX <= this.maxX &&\r\n      this.minY <= tileRange.minY &&\r\n      tileRange.maxY <= this.maxY\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @param {number} x Tile coordinate x.\r\n   * @param {number} y Tile coordinate y.\r\n   * @return {boolean} Contains coordinate.\r\n   */\r\n  containsXY(x, y) {\r\n    return this.minX <= x && x <= this.maxX && this.minY <= y && y <= this.maxY;\r\n  }\r\n\r\n  /**\r\n   * @param {TileRange} tileRange Tile range.\r\n   * @return {boolean} Equals.\r\n   */\r\n  equals(tileRange) {\r\n    return (\r\n      this.minX == tileRange.minX &&\r\n      this.minY == tileRange.minY &&\r\n      this.maxX == tileRange.maxX &&\r\n      this.maxY == tileRange.maxY\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @param {TileRange} tileRange Tile range.\r\n   */\r\n  extend(tileRange) {\r\n    if (tileRange.minX < this.minX) {\r\n      this.minX = tileRange.minX;\r\n    }\r\n    if (tileRange.maxX > this.maxX) {\r\n      this.maxX = tileRange.maxX;\r\n    }\r\n    if (tileRange.minY < this.minY) {\r\n      this.minY = tileRange.minY;\r\n    }\r\n    if (tileRange.maxY > this.maxY) {\r\n      this.maxY = tileRange.maxY;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @return {number} Height.\r\n   */\r\n  getHeight() {\r\n    return this.maxY - this.minY + 1;\r\n  }\r\n\r\n  /**\r\n   * @return {import(\"./size.js\").Size} Size.\r\n   */\r\n  getSize() {\r\n    return [this.getWidth(), this.getHeight()];\r\n  }\r\n\r\n  /**\r\n   * @return {number} Width.\r\n   */\r\n  getWidth() {\r\n    return this.maxX - this.minX + 1;\r\n  }\r\n\r\n  /**\r\n   * @param {TileRange} tileRange Tile range.\r\n   * @return {boolean} Intersects.\r\n   */\r\n  intersects(tileRange) {\r\n    return (\r\n      this.minX <= tileRange.maxX &&\r\n      this.maxX >= tileRange.minX &&\r\n      this.minY <= tileRange.maxY &&\r\n      this.maxY >= tileRange.minY\r\n    );\r\n  }\r\n}\r\n\r\n/**\r\n * @param {number} minX Minimum X.\r\n * @param {number} maxX Maximum X.\r\n * @param {number} minY Minimum Y.\r\n * @param {number} maxY Maximum Y.\r\n * @param {TileRange} [tileRange] TileRange.\r\n * @return {TileRange} Tile range.\r\n */\r\nexport function createOrUpdate(minX, maxX, minY, maxY, tileRange) {\r\n  if (tileRange !== undefined) {\r\n    tileRange.minX = minX;\r\n    tileRange.maxX = maxX;\r\n    tileRange.minY = minY;\r\n    tileRange.maxY = maxY;\r\n    return tileRange;\r\n  }\r\n  return new TileRange(minX, maxX, minY, maxY);\r\n}\r\n\r\nexport default TileRange;\r\n","/**\r\n * @module ol/tilecoord\r\n */\r\n\r\n/**\r\n * An array of three numbers representing the location of a tile in a tile\r\n * grid. The order is `z` (zoom level), `x` (column), and `y` (row).\r\n * @typedef {Array<number>} TileCoord\r\n * @api\r\n */\r\n\r\n/**\r\n * @param {number} z Z.\r\n * @param {number} x X.\r\n * @param {number} y Y.\r\n * @param {TileCoord} [tileCoord] Tile coordinate.\r\n * @return {TileCoord} Tile coordinate.\r\n */\r\nexport function createOrUpdate(z, x, y, tileCoord) {\r\n  if (tileCoord !== undefined) {\r\n    tileCoord[0] = z;\r\n    tileCoord[1] = x;\r\n    tileCoord[2] = y;\r\n    return tileCoord;\r\n  }\r\n  return [z, x, y];\r\n}\r\n\r\n/**\r\n * @param {number} z Z.\r\n * @param {number} x X.\r\n * @param {number} y Y.\r\n * @return {string} Key.\r\n */\r\nexport function getKeyZXY(z, x, y) {\r\n  return z + '/' + x + '/' + y;\r\n}\r\n\r\n/**\r\n * Get the key for a tile coord.\r\n * @param {TileCoord} tileCoord The tile coord.\r\n * @return {string} Key.\r\n */\r\nexport function getKey(tileCoord) {\r\n  return getKeyZXY(tileCoord[0], tileCoord[1], tileCoord[2]);\r\n}\r\n\r\n/**\r\n * Get the tile cache key for a tile key obtained through `tile.getKey()`.\r\n * @param {string} tileKey The tile key.\r\n * @return {string} The cache key.\r\n */\r\nexport function getCacheKeyForTileKey(tileKey) {\r\n  const [z, x, y] = tileKey\r\n    .substring(tileKey.lastIndexOf('/') + 1, tileKey.length)\r\n    .split(',')\r\n    .map(Number);\r\n  return getKeyZXY(z, x, y);\r\n}\r\n\r\n/**\r\n * Get a tile coord given a key.\r\n * @param {string} key The tile coord key.\r\n * @return {TileCoord} The tile coord.\r\n */\r\nexport function fromKey(key) {\r\n  return key.split('/').map(Number);\r\n}\r\n\r\n/**\r\n * @param {TileCoord} tileCoord Tile coord.\r\n * @return {number} Hash.\r\n */\r\nexport function hash(tileCoord) {\r\n  return hashZXY(tileCoord[0], tileCoord[1], tileCoord[2]);\r\n}\r\n\r\n/**\r\n * @param {number} z The tile z coordinate.\r\n * @param {number} x The tile x coordinate.\r\n * @param {number} y The tile y coordinate.\r\n * @return {number} Hash.\r\n */\r\nexport function hashZXY(z, x, y) {\r\n  return (x << z) + y;\r\n}\r\n\r\n/**\r\n * @param {TileCoord} tileCoord Tile coordinate.\r\n * @param {!import(\"./tilegrid/TileGrid.js\").default} tileGrid Tile grid.\r\n * @return {boolean} Tile coordinate is within extent and zoom level range.\r\n */\r\nexport function withinExtentAndZ(tileCoord, tileGrid) {\r\n  const z = tileCoord[0];\r\n  const x = tileCoord[1];\r\n  const y = tileCoord[2];\r\n\r\n  if (tileGrid.getMinZoom() > z || z > tileGrid.getMaxZoom()) {\r\n    return false;\r\n  }\r\n  const tileRange = tileGrid.getFullTileRange(z);\r\n  if (!tileRange) {\r\n    return true;\r\n  }\r\n  return tileRange.containsXY(x, y);\r\n}\r\n","/**\r\n * @module ol/source/TileImage\r\n */\r\nimport ImageTile from '../ImageTile.js';\r\nimport TileState from '../TileState.js';\r\nimport EventType from '../events/EventType.js';\r\nimport {equivalent, get as getProjection} from '../proj.js';\r\nimport ReprojTile from '../reproj/Tile.js';\r\nimport {getForProjection as getTileGridForProjection} from '../tilegrid.js';\r\nimport {getUid} from '../util.js';\r\nimport UrlTile from './UrlTile.js';\r\n\r\n/**\r\n * @typedef {Object} Options\r\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\r\n * @property {boolean} [attributionsCollapsible=true] Attributions are collapsible.\r\n * @property {number} [cacheSize] Deprecated.  Use the cacheSize option on the layer instead.\r\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that\r\n * you must provide a `crossOrigin` value if you want to access pixel data with the Canvas renderer.\r\n * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\r\n * @property {boolean} [interpolate=true] Use interpolated values when resampling.  By default,\r\n * linear interpolation is used when resampling.  Set to false to use the nearest neighbor instead.\r\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection. Default is the view projection.\r\n * @property {number} [reprojectionErrorThreshold=0.5] Maximum allowed reprojection error (in pixels).\r\n * Higher values can increase reprojection performance, but decrease precision.\r\n * @property {import(\"./Source.js\").State} [state] Source state.\r\n * @property {typeof import(\"../ImageTile.js\").default} [tileClass] Class used to instantiate image tiles.\r\n * Default is {@link module:ol/ImageTile~ImageTile}.\r\n * @property {import(\"../tilegrid/TileGrid.js\").default} [tileGrid] Tile grid.\r\n * @property {import(\"../Tile.js\").LoadFunction} [tileLoadFunction] Optional function to load a tile given a URL. The default is\r\n * ```js\r\n * function(imageTile, src) {\r\n *   imageTile.getImage().src = src;\r\n * };\r\n * ```\r\n * @property {number} [tilePixelRatio=1] The pixel ratio used by the tile service. For example, if the tile\r\n * service advertizes 256px by 256px tiles but actually sends 512px\r\n * by 512px images (for retina/hidpi devices) then `tilePixelRatio`\r\n * should be set to `2`.\r\n * @property {import(\"../Tile.js\").UrlFunction} [tileUrlFunction] Deprecated.  Use an ImageTile source and provide a function\r\n * for the url option instead.\r\n * @property {string} [url] URL template. Must include `{x}`, `{y}` or `{-y}`, and `{z}` placeholders.\r\n * A `{?-?}` template pattern, for example `subdomain{a-f}.domain.com`, may be\r\n * used instead of defining each one separately in the `urls` option.\r\n * @property {Array<string>} [urls] An array of URL templates.\r\n * @property {boolean} [wrapX] Whether to wrap the world horizontally. The default, is to\r\n * request out-of-bounds tiles from the server. When set to `false`, only one\r\n * world will be rendered. When set to `true`, tiles will be requested for one\r\n * world only, but they will be wrapped horizontally to render multiple worlds.\r\n * @property {number} [transition] Duration of the opacity transition for rendering.\r\n * To disable the opacity transition, pass `transition: 0`.\r\n * @property {string} [key] Optional tile key for proper cache fetching\r\n * @property {number|import(\"../array.js\").NearestDirectionFunction} [zDirection=0]\r\n * Choose whether to use tiles with a higher or lower zoom level when between integer\r\n * zoom levels. See {@link module:ol/tilegrid/TileGrid~TileGrid#getZForResolution}.\r\n */\r\n\r\n/**\r\n * @deprecated Use the ol/source/ImageTile.js instead.\r\n *\r\n * @fires import(\"./Tile.js\").TileSourceEvent\r\n * @api\r\n */\r\nclass TileImage extends UrlTile {\r\n  /**\r\n   * @param {!Options} options Image tile options.\r\n   */\r\n  constructor(options) {\r\n    super({\r\n      attributions: options.attributions,\r\n      cacheSize: options.cacheSize,\r\n      projection: options.projection,\r\n      state: options.state,\r\n      tileGrid: options.tileGrid,\r\n      tileLoadFunction: options.tileLoadFunction\r\n        ? options.tileLoadFunction\r\n        : defaultTileLoadFunction,\r\n      tilePixelRatio: options.tilePixelRatio,\r\n      tileUrlFunction: options.tileUrlFunction,\r\n      url: options.url,\r\n      urls: options.urls,\r\n      wrapX: options.wrapX,\r\n      transition: options.transition,\r\n      interpolate:\r\n        options.interpolate !== undefined ? options.interpolate : true,\r\n      key: options.key,\r\n      attributionsCollapsible: options.attributionsCollapsible,\r\n      zDirection: options.zDirection,\r\n    });\r\n\r\n    /**\r\n     * @protected\r\n     * @type {?string}\r\n     */\r\n    this.crossOrigin =\r\n      options.crossOrigin !== undefined ? options.crossOrigin : null;\r\n\r\n    /**\r\n     * @protected\r\n     * @type {typeof ImageTile}\r\n     */\r\n    this.tileClass =\r\n      options.tileClass !== undefined ? options.tileClass : ImageTile;\r\n\r\n    /**\r\n     * @protected\r\n     * @type {!Object<string, import(\"../tilegrid/TileGrid.js\").default>}\r\n     */\r\n    this.tileGridForProjection = {};\r\n\r\n    /**\r\n     * @private\r\n     * @type {number|undefined}\r\n     */\r\n    this.reprojectionErrorThreshold_ = options.reprojectionErrorThreshold;\r\n\r\n    /**\r\n     * @private\r\n     * @type {boolean}\r\n     */\r\n    this.renderReprojectionEdges_ = false;\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\r\n   * @return {number} Gutter.\r\n   * @override\r\n   */\r\n  getGutterForProjection(projection) {\r\n    if (\r\n      this.getProjection() &&\r\n      projection &&\r\n      !equivalent(this.getProjection(), projection)\r\n    ) {\r\n      return 0;\r\n    }\r\n    return this.getGutter();\r\n  }\r\n\r\n  /**\r\n   * @return {number} Gutter.\r\n   */\r\n  getGutter() {\r\n    return 0;\r\n  }\r\n\r\n  /**\r\n   * Return the key to be used for all tiles in the source.\r\n   * @return {string} The key for all tiles.\r\n   * @override\r\n   */\r\n  getKey() {\r\n    let key = super.getKey();\r\n    if (!this.getInterpolate()) {\r\n      key += ':disable-interpolation';\r\n    }\r\n    return key;\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\r\n   * @return {!import(\"../tilegrid/TileGrid.js\").default} Tile grid.\r\n   * @override\r\n   */\r\n  getTileGridForProjection(projection) {\r\n    const thisProj = this.getProjection();\r\n    if (this.tileGrid && (!thisProj || equivalent(thisProj, projection))) {\r\n      return this.tileGrid;\r\n    }\r\n    const projKey = getUid(projection);\r\n    if (!(projKey in this.tileGridForProjection)) {\r\n      this.tileGridForProjection[projKey] =\r\n        getTileGridForProjection(projection);\r\n    }\r\n    return this.tileGridForProjection[projKey];\r\n  }\r\n\r\n  /**\r\n   * @param {number} z Tile coordinate z.\r\n   * @param {number} x Tile coordinate x.\r\n   * @param {number} y Tile coordinate y.\r\n   * @param {number} pixelRatio Pixel ratio.\r\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\r\n   * @param {string} key The key set on the tile.\r\n   * @return {!ImageTile} Tile.\r\n   * @private\r\n   */\r\n  createTile_(z, x, y, pixelRatio, projection, key) {\r\n    const tileCoord = [z, x, y];\r\n    const urlTileCoord = this.getTileCoordForTileUrlFunction(\r\n      tileCoord,\r\n      projection,\r\n    );\r\n    const tileUrl = urlTileCoord\r\n      ? this.tileUrlFunction(urlTileCoord, pixelRatio, projection)\r\n      : undefined;\r\n    const tile = new this.tileClass(\r\n      tileCoord,\r\n      tileUrl !== undefined ? TileState.IDLE : TileState.EMPTY,\r\n      tileUrl !== undefined ? tileUrl : '',\r\n      this.crossOrigin,\r\n      this.tileLoadFunction,\r\n      this.tileOptions,\r\n    );\r\n    tile.key = key;\r\n    tile.addEventListener(EventType.CHANGE, this.handleTileChange.bind(this));\r\n    return tile;\r\n  }\r\n\r\n  /**\r\n   * @param {number} z Tile coordinate z.\r\n   * @param {number} x Tile coordinate x.\r\n   * @param {number} y Tile coordinate y.\r\n   * @param {number} pixelRatio Pixel ratio.\r\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\r\n   * @return {!(ImageTile|ReprojTile)} Tile.\r\n   * @override\r\n   */\r\n  getTile(z, x, y, pixelRatio, projection) {\r\n    const sourceProjection = this.getProjection();\r\n    if (\r\n      !sourceProjection ||\r\n      !projection ||\r\n      equivalent(sourceProjection, projection)\r\n    ) {\r\n      return this.getTileInternal(\r\n        z,\r\n        x,\r\n        y,\r\n        pixelRatio,\r\n        sourceProjection || projection,\r\n      );\r\n    }\r\n    const tileCoord = [z, x, y];\r\n    const key = this.getKey();\r\n    const sourceTileGrid = this.getTileGridForProjection(sourceProjection);\r\n    const targetTileGrid = this.getTileGridForProjection(projection);\r\n    const wrappedTileCoord = this.getTileCoordForTileUrlFunction(\r\n      tileCoord,\r\n      projection,\r\n    );\r\n    const tile = new ReprojTile(\r\n      sourceProjection,\r\n      sourceTileGrid,\r\n      projection,\r\n      targetTileGrid,\r\n      tileCoord,\r\n      wrappedTileCoord,\r\n      this.getTilePixelRatio(pixelRatio),\r\n      this.getGutter(),\r\n      (z, x, y, pixelRatio) =>\r\n        this.getTileInternal(z, x, y, pixelRatio, sourceProjection),\r\n      this.reprojectionErrorThreshold_,\r\n      this.renderReprojectionEdges_,\r\n      this.tileOptions,\r\n    );\r\n    tile.key = key;\r\n    return tile;\r\n  }\r\n\r\n  /**\r\n   * @param {number} z Tile coordinate z.\r\n   * @param {number} x Tile coordinate x.\r\n   * @param {number} y Tile coordinate y.\r\n   * @param {number} pixelRatio Pixel ratio.\r\n   * @param {!import(\"../proj/Projection.js\").default} projection Projection.\r\n   * @return {!ImageTile} Tile.\r\n   * @protected\r\n   */\r\n  getTileInternal(z, x, y, pixelRatio, projection) {\r\n    const key = this.getKey();\r\n    return this.createTile_(z, x, y, pixelRatio, projection, key);\r\n  }\r\n\r\n  /**\r\n   * Sets whether to render reprojection edges or not (usually for debugging).\r\n   * @param {boolean} render Render the edges.\r\n   * @api\r\n   */\r\n  setRenderReprojectionEdges(render) {\r\n    if (this.renderReprojectionEdges_ == render) {\r\n      return;\r\n    }\r\n    this.renderReprojectionEdges_ = render;\r\n    this.changed();\r\n  }\r\n\r\n  /**\r\n   * Sets the tile grid to use when reprojecting the tiles to the given\r\n   * projection instead of the default tile grid for the projection.\r\n   *\r\n   * This can be useful when the default tile grid cannot be created\r\n   * (e.g. projection has no extent defined) or\r\n   * for optimization reasons (custom tile size, resolutions, ...).\r\n   *\r\n   * @param {import(\"../proj.js\").ProjectionLike} projection Projection.\r\n   * @param {import(\"../tilegrid/TileGrid.js\").default} tilegrid Tile grid to use for the projection.\r\n   * @api\r\n   */\r\n  setTileGridForProjection(projection, tilegrid) {\r\n    const proj = getProjection(projection);\r\n    if (proj) {\r\n      const projKey = getUid(proj);\r\n      if (!(projKey in this.tileGridForProjection)) {\r\n        this.tileGridForProjection[projKey] = tilegrid;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * @param {ImageTile} imageTile Image tile.\r\n * @param {string} src Source.\r\n */\r\nfunction defaultTileLoadFunction(imageTile, src) {\r\n  /** @type {HTMLImageElement|HTMLVideoElement} */ (imageTile.getImage()).src =\r\n    src;\r\n}\r\n\r\nexport default TileImage;\r\n","/**\r\n * @module ol/ImageTile\r\n */\r\nimport {listenImage} from './Image.js';\r\nimport Tile from './Tile.js';\r\nimport TileState from './TileState.js';\r\nimport {createCanvasContext2D} from './dom.js';\r\n\r\nclass ImageTile extends Tile {\r\n  /**\r\n   * @param {import(\"./tilecoord.js\").TileCoord} tileCoord Tile coordinate.\r\n   * @param {import(\"./TileState.js\").default} state State.\r\n   * @param {string} src Image source URI.\r\n   * @param {?string} crossOrigin Cross origin.\r\n   * @param {import(\"./Tile.js\").LoadFunction} tileLoadFunction Tile load function.\r\n   * @param {import(\"./Tile.js\").Options} [options] Tile options.\r\n   */\r\n  constructor(tileCoord, state, src, crossOrigin, tileLoadFunction, options) {\r\n    super(tileCoord, state, options);\r\n\r\n    /**\r\n     * @private\r\n     * @type {?string}\r\n     */\r\n    this.crossOrigin_ = crossOrigin;\r\n\r\n    /**\r\n     * Image URI\r\n     *\r\n     * @private\r\n     * @type {string}\r\n     */\r\n    this.src_ = src;\r\n\r\n    this.key = src;\r\n\r\n    /**\r\n     * @private\r\n     * @type {HTMLImageElement|HTMLCanvasElement}\r\n     */\r\n    this.image_ = new Image();\r\n    if (crossOrigin !== null) {\r\n      this.image_.crossOrigin = crossOrigin;\r\n    }\r\n\r\n    /**\r\n     * @private\r\n     * @type {?function():void}\r\n     */\r\n    this.unlisten_ = null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"./Tile.js\").LoadFunction}\r\n     */\r\n    this.tileLoadFunction_ = tileLoadFunction;\r\n  }\r\n\r\n  /**\r\n   * Get the HTML image element for this tile (may be a Canvas, Image, or Video).\r\n   * @return {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement} Image.\r\n   * @api\r\n   */\r\n  getImage() {\r\n    return this.image_;\r\n  }\r\n\r\n  /**\r\n   * Sets an HTML image element for this tile (may be a Canvas or preloaded Image).\r\n   * @param {HTMLCanvasElement|HTMLImageElement} element Element.\r\n   */\r\n  setImage(element) {\r\n    this.image_ = element;\r\n    this.state = TileState.LOADED;\r\n    this.unlistenImage_();\r\n    this.changed();\r\n  }\r\n\r\n  /**\r\n   * Tracks loading or read errors.\r\n   *\r\n   * @private\r\n   */\r\n  handleImageError_() {\r\n    this.state = TileState.ERROR;\r\n    this.unlistenImage_();\r\n    this.image_ = getBlankImage();\r\n    this.changed();\r\n  }\r\n\r\n  /**\r\n   * Tracks successful image load.\r\n   *\r\n   * @private\r\n   */\r\n  handleImageLoad_() {\r\n    const image = /** @type {HTMLImageElement} */ (this.image_);\r\n    if (image.naturalWidth && image.naturalHeight) {\r\n      this.state = TileState.LOADED;\r\n    } else {\r\n      this.state = TileState.EMPTY;\r\n    }\r\n    this.unlistenImage_();\r\n    this.changed();\r\n  }\r\n\r\n  /**\r\n   * Load the image or retry if loading previously failed.\r\n   * Loading is taken care of by the tile queue, and calling this method is\r\n   * only needed for preloading or for reloading in case of an error.\r\n   *\r\n   * To retry loading tiles on failed requests, use a custom `tileLoadFunction`\r\n   * that checks for error status codes and reloads only when the status code is\r\n   * 408, 429, 500, 502, 503 and 504, and only when not too many retries have been\r\n   * made already:\r\n   *\r\n   * ```js\r\n   * const retryCodes = [408, 429, 500, 502, 503, 504];\r\n   * const retries = {};\r\n   * source.setTileLoadFunction((tile, src) => {\r\n   *   const image = tile.getImage();\r\n   *   fetch(src)\r\n   *     .then((response) => {\r\n   *       if (retryCodes.includes(response.status)) {\r\n   *         retries[src] = (retries[src] || 0) + 1;\r\n   *         if (retries[src] <= 3) {\r\n   *           setTimeout(() => tile.load(), retries[src] * 1000);\r\n   *         }\r\n   *         return Promise.reject();\r\n   *       }\r\n   *       return response.blob();\r\n   *     })\r\n   *     .then((blob) => {\r\n   *       const imageUrl = URL.createObjectURL(blob);\r\n   *       image.src = imageUrl;\r\n   *       setTimeout(() => URL.revokeObjectURL(imageUrl), 5000);\r\n   *     })\r\n   *     .catch(() => tile.setState(3)); // error\r\n   * });\r\n   * ```\r\n   * @api\r\n   * @override\r\n   */\r\n  load() {\r\n    if (this.state == TileState.ERROR) {\r\n      this.state = TileState.IDLE;\r\n      this.image_ = new Image();\r\n      if (this.crossOrigin_ !== null) {\r\n        this.image_.crossOrigin = this.crossOrigin_;\r\n      }\r\n    }\r\n    if (this.state == TileState.IDLE) {\r\n      this.state = TileState.LOADING;\r\n      this.changed();\r\n      this.tileLoadFunction_(this, this.src_);\r\n      this.unlisten_ = listenImage(\r\n        this.image_,\r\n        this.handleImageLoad_.bind(this),\r\n        this.handleImageError_.bind(this),\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Discards event handlers which listen for load completion or errors.\r\n   *\r\n   * @private\r\n   */\r\n  unlistenImage_() {\r\n    if (this.unlisten_) {\r\n      this.unlisten_();\r\n      this.unlisten_ = null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @override\r\n   */\r\n  disposeInternal() {\r\n    this.unlistenImage_();\r\n    this.image_ = null;\r\n    super.disposeInternal();\r\n  }\r\n}\r\n\r\n/**\r\n * Get a 1-pixel blank image.\r\n * @return {HTMLCanvasElement} Blank image.\r\n */\r\nfunction getBlankImage() {\r\n  const ctx = createCanvasContext2D(1, 1);\r\n  ctx.fillStyle = 'rgba(0,0,0,0)';\r\n  ctx.fillRect(0, 0, 1, 1);\r\n  return ctx.canvas;\r\n}\r\n\r\nexport default ImageTile;\r\n","/**\r\n * @module ol/Tile\r\n */\r\nimport TileState from './TileState.js';\r\nimport {easeIn} from './easing.js';\r\nimport EventType from './events/EventType.js';\r\nimport EventTarget from './events/Target.js';\r\nimport {abstract} from './util.js';\r\n\r\n/**\r\n * A function that takes a {@link module:ol/Tile~Tile} for the tile and a\r\n * `{string}` for the url as arguments. The default is\r\n * ```js\r\n * source.setTileLoadFunction(function(tile, src) {\r\n *   tile.getImage().src = src;\r\n * });\r\n * ```\r\n * For more fine grained control, the load function can use fetch or XMLHttpRequest and involve\r\n * error handling:\r\n *\r\n * ```js\r\n * import TileState from 'ol/TileState.js';\r\n *\r\n * source.setTileLoadFunction(function(tile, src) {\r\n *   const xhr = new XMLHttpRequest();\r\n *   xhr.responseType = 'blob';\r\n *   xhr.addEventListener('loadend', function (evt) {\r\n *     const data = this.response;\r\n *     if (data !== undefined) {\r\n *       tile.getImage().src = URL.createObjectURL(data);\r\n *     } else {\r\n *       tile.setState(TileState.ERROR);\r\n *     }\r\n *   });\r\n *   xhr.addEventListener('error', function () {\r\n *     tile.setState(TileState.ERROR);\r\n *   });\r\n *   xhr.open('GET', src);\r\n *   xhr.send();\r\n * });\r\n * ```\r\n *\r\n * @typedef {function(Tile, string): void} LoadFunction\r\n * @api\r\n */\r\n\r\n/**\r\n * {@link module:ol/source/Tile~TileSource} sources use a function of this type to get\r\n * the url that provides a tile for a given tile coordinate.\r\n *\r\n * This function takes a {@link module:ol/tilecoord~TileCoord} for the tile\r\n * coordinate, a `{number}` representing the pixel ratio and a\r\n * {@link module:ol/proj/Projection~Projection} for the projection  as arguments\r\n * and returns a `{string}` representing the tile URL, or undefined if no tile\r\n * should be requested for the passed tile coordinate.\r\n *\r\n * @typedef {function(import(\"./tilecoord.js\").TileCoord, number,\r\n *           import(\"./proj/Projection.js\").default): (string|undefined)} UrlFunction\r\n * @api\r\n */\r\n\r\n/**\r\n * @typedef {Object} Options\r\n * @property {number} [transition=250] A duration for tile opacity\r\n * transitions in milliseconds. A duration of 0 disables the opacity transition.\r\n * @property {boolean} [interpolate=false] Use interpolated values when resampling.  By default,\r\n * the nearest neighbor is used when resampling.\r\n * @api\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * Base class for tiles.\r\n *\r\n * @abstract\r\n */\r\nclass Tile extends EventTarget {\r\n  /**\r\n   * @param {import(\"./tilecoord.js\").TileCoord} tileCoord Tile coordinate.\r\n   * @param {import(\"./TileState.js\").default} state State.\r\n   * @param {Options} [options] Tile options.\r\n   */\r\n  constructor(tileCoord, state, options) {\r\n    super();\r\n\r\n    options = options ? options : {};\r\n\r\n    /**\r\n     * @type {import(\"./tilecoord.js\").TileCoord}\r\n     */\r\n    this.tileCoord = tileCoord;\r\n\r\n    /**\r\n     * @protected\r\n     * @type {import(\"./TileState.js\").default}\r\n     */\r\n    this.state = state;\r\n\r\n    /**\r\n     * A key assigned to the tile. This is used in conjunction with a source key\r\n     * to determine if a cached version of this tile may be used by the renderer.\r\n     * @type {string}\r\n     */\r\n    this.key = '';\r\n\r\n    /**\r\n     * The duration for the opacity transition.\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.transition_ =\r\n      options.transition === undefined ? 250 : options.transition;\r\n\r\n    /**\r\n     * Lookup of start times for rendering transitions.  If the start time is\r\n     * equal to -1, the transition is complete.\r\n     * @private\r\n     * @type {Object<string, number>}\r\n     */\r\n    this.transitionStarts_ = {};\r\n\r\n    /**\r\n     * @type {boolean}\r\n     */\r\n    this.interpolate = !!options.interpolate;\r\n  }\r\n\r\n  /**\r\n   * @protected\r\n   */\r\n  changed() {\r\n    this.dispatchEvent(EventType.CHANGE);\r\n  }\r\n\r\n  /**\r\n   * Called by the tile cache when the tile is removed from the cache due to expiry\r\n   */\r\n  release() {\r\n    // to remove the `change` listener on this tile in `ol/TileQueue#handleTileChange`\r\n    this.setState(TileState.EMPTY);\r\n  }\r\n\r\n  /**\r\n   * @return {string} Key.\r\n   */\r\n  getKey() {\r\n    return this.key + '/' + this.tileCoord;\r\n  }\r\n\r\n  /**\r\n   * Get the tile coordinate for this tile.\r\n   * @return {import(\"./tilecoord.js\").TileCoord} The tile coordinate.\r\n   * @api\r\n   */\r\n  getTileCoord() {\r\n    return this.tileCoord;\r\n  }\r\n\r\n  /**\r\n   * @return {import(\"./TileState.js\").default} State.\r\n   */\r\n  getState() {\r\n    return this.state;\r\n  }\r\n\r\n  /**\r\n   * Sets the state of this tile. If you write your own {@link module:ol/Tile~LoadFunction tileLoadFunction} ,\r\n   * it is important to set the state correctly to {@link module:ol/TileState~ERROR}\r\n   * when the tile cannot be loaded. Otherwise the tile cannot be removed from\r\n   * the tile queue and will block other requests.\r\n   * @param {import(\"./TileState.js\").default} state State.\r\n   * @api\r\n   */\r\n  setState(state) {\r\n    if (this.state === TileState.EMPTY) {\r\n      // no more state changes\r\n      return;\r\n    }\r\n    if (this.state !== TileState.ERROR && this.state > state) {\r\n      throw new Error('Tile load sequence violation');\r\n    }\r\n    this.state = state;\r\n    this.changed();\r\n  }\r\n\r\n  /**\r\n   * Load the image or retry if loading previously failed.\r\n   * Loading is taken care of by the tile queue, and calling this method is\r\n   * only needed for preloading or for reloading in case of an error.\r\n   * @abstract\r\n   * @api\r\n   */\r\n  load() {\r\n    abstract();\r\n  }\r\n\r\n  /**\r\n   * Get the alpha value for rendering.\r\n   * @param {string} id An id for the renderer.\r\n   * @param {number} time The render frame time.\r\n   * @return {number} A number between 0 and 1.\r\n   */\r\n  getAlpha(id, time) {\r\n    if (!this.transition_) {\r\n      return 1;\r\n    }\r\n\r\n    let start = this.transitionStarts_[id];\r\n    if (!start) {\r\n      start = time;\r\n      this.transitionStarts_[id] = start;\r\n    } else if (start === -1) {\r\n      return 1;\r\n    }\r\n\r\n    const delta = time - start + 1000 / 60; // avoid rendering at 0\r\n    if (delta >= this.transition_) {\r\n      return 1;\r\n    }\r\n    return easeIn(delta / this.transition_);\r\n  }\r\n\r\n  /**\r\n   * Determine if a tile is in an alpha transition.  A tile is considered in\r\n   * transition if tile.getAlpha() has not yet been called or has been called\r\n   * and returned 1.\r\n   * @param {string} id An id for the renderer.\r\n   * @return {boolean} The tile is in transition.\r\n   */\r\n  inTransition(id) {\r\n    if (!this.transition_) {\r\n      return false;\r\n    }\r\n    return this.transitionStarts_[id] !== -1;\r\n  }\r\n\r\n  /**\r\n   * Mark a transition as complete.\r\n   * @param {string} id An id for the renderer.\r\n   */\r\n  endTransition(id) {\r\n    if (this.transition_) {\r\n      this.transitionStarts_[id] = -1;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @override\r\n   */\r\n  disposeInternal() {\r\n    this.release();\r\n    super.disposeInternal();\r\n  }\r\n}\r\n\r\nexport default Tile;\r\n","/**\r\n * @module ol/reproj/Tile\r\n */\r\n\r\nimport Tile from '../Tile.js';\r\nimport TileState from '../TileState.js';\r\nimport {releaseCanvas} from '../dom.js';\r\nimport EventType from '../events/EventType.js';\r\nimport {listen, unlistenByKey} from '../events.js';\r\nimport {getArea, getIntersection, getWidth, wrapAndSliceX} from '../extent.js';\r\nimport {clamp} from '../math.js';\r\nimport {\r\n  calculateSourceExtentResolution,\r\n  canvasPool,\r\n  render as renderReprojected,\r\n} from '../reproj.js';\r\nimport Triangulation from './Triangulation.js';\r\nimport {ERROR_THRESHOLD} from './common.js';\r\n\r\n/**\r\n * @typedef {function(number, number, number, number) : (import(\"../ImageTile.js\").default)} FunctionType\r\n */\r\n\r\n/**\r\n * @typedef {Object} TileOffset\r\n * @property {import(\"../ImageTile.js\").default} tile Tile.\r\n * @property {number} offset Offset.\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * Class encapsulating single reprojected tile.\r\n * See {@link module:ol/source/TileImage~TileImage}.\r\n *\r\n */\r\nclass ReprojTile extends Tile {\r\n  /**\r\n   * @param {import(\"../proj/Projection.js\").default} sourceProj Source projection.\r\n   * @param {import(\"../tilegrid/TileGrid.js\").default} sourceTileGrid Source tile grid.\r\n   * @param {import(\"../proj/Projection.js\").default} targetProj Target projection.\r\n   * @param {import(\"../tilegrid/TileGrid.js\").default} targetTileGrid Target tile grid.\r\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Coordinate of the tile.\r\n   * @param {import(\"../tilecoord.js\").TileCoord} wrappedTileCoord Coordinate of the tile wrapped in X.\r\n   * @param {number} pixelRatio Pixel ratio.\r\n   * @param {number} gutter Gutter of the source tiles.\r\n   * @param {FunctionType} getTileFunction\r\n   *     Function returning source tiles (z, x, y, pixelRatio).\r\n   * @param {number} [errorThreshold] Acceptable reprojection error (in px).\r\n   * @param {boolean} [renderEdges] Render reprojection edges.\r\n   * @param {import(\"../Tile.js\").Options} [options] Tile options.\r\n   */\r\n  constructor(\r\n    sourceProj,\r\n    sourceTileGrid,\r\n    targetProj,\r\n    targetTileGrid,\r\n    tileCoord,\r\n    wrappedTileCoord,\r\n    pixelRatio,\r\n    gutter,\r\n    getTileFunction,\r\n    errorThreshold,\r\n    renderEdges,\r\n    options,\r\n  ) {\r\n    super(tileCoord, TileState.IDLE, options);\r\n\r\n    /**\r\n     * @private\r\n     * @type {boolean}\r\n     */\r\n    this.renderEdges_ = renderEdges !== undefined ? renderEdges : false;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.pixelRatio_ = pixelRatio;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.gutter_ = gutter;\r\n\r\n    /**\r\n     * @private\r\n     * @type {HTMLCanvasElement}\r\n     */\r\n    this.canvas_ = null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"../tilegrid/TileGrid.js\").default}\r\n     */\r\n    this.sourceTileGrid_ = sourceTileGrid;\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"../tilegrid/TileGrid.js\").default}\r\n     */\r\n    this.targetTileGrid_ = targetTileGrid;\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"../tilecoord.js\").TileCoord}\r\n     */\r\n    this.wrappedTileCoord_ = wrappedTileCoord ? wrappedTileCoord : tileCoord;\r\n\r\n    /**\r\n     * @private\r\n     * @type {!Array<TileOffset>}\r\n     */\r\n    this.sourceTiles_ = [];\r\n\r\n    /**\r\n     * @private\r\n     * @type {?Array<import(\"../events.js\").EventsKey>}\r\n     */\r\n    this.sourcesListenerKeys_ = null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.sourceZ_ = 0;\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"../extent.js\").Extent}\r\n     */\r\n    this.clipExtent_ = sourceProj.canWrapX()\r\n      ? sourceProj.getExtent()\r\n      : undefined;\r\n\r\n    const targetExtent = targetTileGrid.getTileCoordExtent(\r\n      this.wrappedTileCoord_,\r\n    );\r\n    const maxTargetExtent = this.targetTileGrid_.getExtent();\r\n    let maxSourceExtent = this.sourceTileGrid_.getExtent();\r\n\r\n    const limitedTargetExtent = maxTargetExtent\r\n      ? getIntersection(targetExtent, maxTargetExtent)\r\n      : targetExtent;\r\n\r\n    if (getArea(limitedTargetExtent) === 0) {\r\n      // Tile is completely outside range -> EMPTY\r\n      // TODO: is it actually correct that the source even creates the tile ?\r\n      this.state = TileState.EMPTY;\r\n      return;\r\n    }\r\n\r\n    const sourceProjExtent = sourceProj.getExtent();\r\n    if (sourceProjExtent) {\r\n      if (!maxSourceExtent) {\r\n        maxSourceExtent = sourceProjExtent;\r\n      } else {\r\n        maxSourceExtent = getIntersection(maxSourceExtent, sourceProjExtent);\r\n      }\r\n    }\r\n\r\n    const targetResolution = targetTileGrid.getResolution(\r\n      this.wrappedTileCoord_[0],\r\n    );\r\n\r\n    const sourceResolution = calculateSourceExtentResolution(\r\n      sourceProj,\r\n      targetProj,\r\n      limitedTargetExtent,\r\n      targetResolution,\r\n    );\r\n\r\n    if (!isFinite(sourceResolution) || sourceResolution <= 0) {\r\n      // invalid sourceResolution -> EMPTY\r\n      // probably edges of the projections when no extent is defined\r\n      this.state = TileState.EMPTY;\r\n      return;\r\n    }\r\n\r\n    const errorThresholdInPixels =\r\n      errorThreshold !== undefined ? errorThreshold : ERROR_THRESHOLD;\r\n\r\n    /**\r\n     * @private\r\n     * @type {!import(\"./Triangulation.js\").default}\r\n     */\r\n    this.triangulation_ = new Triangulation(\r\n      sourceProj,\r\n      targetProj,\r\n      limitedTargetExtent,\r\n      maxSourceExtent,\r\n      sourceResolution * errorThresholdInPixels,\r\n      targetResolution,\r\n    );\r\n\r\n    if (this.triangulation_.getTriangles().length === 0) {\r\n      // no valid triangles -> EMPTY\r\n      this.state = TileState.EMPTY;\r\n      return;\r\n    }\r\n\r\n    this.sourceZ_ = sourceTileGrid.getZForResolution(sourceResolution);\r\n    let sourceExtent = this.triangulation_.calculateSourceExtent();\r\n\r\n    if (maxSourceExtent) {\r\n      if (sourceProj.canWrapX()) {\r\n        sourceExtent[1] = clamp(\r\n          sourceExtent[1],\r\n          maxSourceExtent[1],\r\n          maxSourceExtent[3],\r\n        );\r\n        sourceExtent[3] = clamp(\r\n          sourceExtent[3],\r\n          maxSourceExtent[1],\r\n          maxSourceExtent[3],\r\n        );\r\n      } else {\r\n        sourceExtent = getIntersection(sourceExtent, maxSourceExtent);\r\n      }\r\n    }\r\n\r\n    if (!getArea(sourceExtent)) {\r\n      this.state = TileState.EMPTY;\r\n    } else {\r\n      let worldWidth = 0;\r\n      let worldsAway = 0;\r\n      if (sourceProj.canWrapX()) {\r\n        worldWidth = getWidth(sourceProjExtent);\r\n        worldsAway = Math.floor(\r\n          (sourceExtent[0] - sourceProjExtent[0]) / worldWidth,\r\n        );\r\n      }\r\n\r\n      const sourceExtents = wrapAndSliceX(\r\n        sourceExtent.slice(),\r\n        sourceProj,\r\n        true,\r\n      );\r\n      sourceExtents.forEach((extent) => {\r\n        const sourceRange = sourceTileGrid.getTileRangeForExtentAndZ(\r\n          extent,\r\n          this.sourceZ_,\r\n        );\r\n\r\n        for (let srcX = sourceRange.minX; srcX <= sourceRange.maxX; srcX++) {\r\n          for (let srcY = sourceRange.minY; srcY <= sourceRange.maxY; srcY++) {\r\n            const tile = getTileFunction(this.sourceZ_, srcX, srcY, pixelRatio);\r\n            if (tile) {\r\n              const offset = worldsAway * worldWidth;\r\n              this.sourceTiles_.push({tile, offset});\r\n            }\r\n          }\r\n        }\r\n        ++worldsAway;\r\n      });\r\n\r\n      if (this.sourceTiles_.length === 0) {\r\n        this.state = TileState.EMPTY;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get the HTML Canvas element for this tile.\r\n   * @return {HTMLCanvasElement} Canvas.\r\n   */\r\n  getImage() {\r\n    return this.canvas_;\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  reproject_() {\r\n    const sources = [];\r\n    this.sourceTiles_.forEach((source) => {\r\n      const tile = source.tile;\r\n      if (tile && tile.getState() == TileState.LOADED) {\r\n        const extent = this.sourceTileGrid_.getTileCoordExtent(tile.tileCoord);\r\n        extent[0] += source.offset;\r\n        extent[2] += source.offset;\r\n        const clipExtent = this.clipExtent_?.slice();\r\n        if (clipExtent) {\r\n          clipExtent[0] += source.offset;\r\n          clipExtent[2] += source.offset;\r\n        }\r\n        sources.push({\r\n          extent: extent,\r\n          clipExtent: clipExtent,\r\n          image: tile.getImage(),\r\n        });\r\n      }\r\n    });\r\n    this.sourceTiles_.length = 0;\r\n\r\n    if (sources.length === 0) {\r\n      this.state = TileState.ERROR;\r\n    } else {\r\n      const z = this.wrappedTileCoord_[0];\r\n      const size = this.targetTileGrid_.getTileSize(z);\r\n      const width = typeof size === 'number' ? size : size[0];\r\n      const height = typeof size === 'number' ? size : size[1];\r\n      const targetResolution = this.targetTileGrid_.getResolution(z);\r\n      const sourceResolution = this.sourceTileGrid_.getResolution(\r\n        this.sourceZ_,\r\n      );\r\n\r\n      const targetExtent = this.targetTileGrid_.getTileCoordExtent(\r\n        this.wrappedTileCoord_,\r\n      );\r\n\r\n      this.canvas_ = renderReprojected(\r\n        width,\r\n        height,\r\n        this.pixelRatio_,\r\n        sourceResolution,\r\n        this.sourceTileGrid_.getExtent(),\r\n        targetResolution,\r\n        targetExtent,\r\n        this.triangulation_,\r\n        sources,\r\n        this.gutter_,\r\n        this.renderEdges_,\r\n        this.interpolate,\r\n      );\r\n\r\n      this.state = TileState.LOADED;\r\n    }\r\n    this.changed();\r\n  }\r\n\r\n  /**\r\n   * Load not yet loaded URI.\r\n   * @override\r\n   */\r\n  load() {\r\n    if (this.state == TileState.IDLE) {\r\n      this.state = TileState.LOADING;\r\n      this.changed();\r\n\r\n      let leftToLoad = 0;\r\n\r\n      this.sourcesListenerKeys_ = [];\r\n      this.sourceTiles_.forEach(({tile}) => {\r\n        const state = tile.getState();\r\n        if (state == TileState.IDLE || state == TileState.LOADING) {\r\n          leftToLoad++;\r\n\r\n          const sourceListenKey = listen(tile, EventType.CHANGE, (e) => {\r\n            const state = tile.getState();\r\n            if (\r\n              state == TileState.LOADED ||\r\n              state == TileState.ERROR ||\r\n              state == TileState.EMPTY\r\n            ) {\r\n              unlistenByKey(sourceListenKey);\r\n              leftToLoad--;\r\n              if (leftToLoad === 0) {\r\n                this.unlistenSources_();\r\n                this.reproject_();\r\n              }\r\n            }\r\n          });\r\n          this.sourcesListenerKeys_.push(sourceListenKey);\r\n        }\r\n      });\r\n\r\n      if (leftToLoad === 0) {\r\n        setTimeout(this.reproject_.bind(this), 0);\r\n      } else {\r\n        this.sourceTiles_.forEach(function ({tile}, i, arr) {\r\n          const state = tile.getState();\r\n          if (state == TileState.IDLE) {\r\n            tile.load();\r\n          }\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  unlistenSources_() {\r\n    this.sourcesListenerKeys_.forEach(unlistenByKey);\r\n    this.sourcesListenerKeys_ = null;\r\n  }\r\n\r\n  /**\r\n   * Remove from the cache due to expiry\r\n   * @override\r\n   */\r\n  release() {\r\n    if (this.canvas_) {\r\n      releaseCanvas(this.canvas_.getContext('2d'));\r\n      canvasPool.push(this.canvas_);\r\n      this.canvas_ = null;\r\n    }\r\n    super.release();\r\n  }\r\n}\r\n\r\nexport default ReprojTile;\r\n","/**\r\n * @module ol/reproj\r\n */\r\nimport {createCanvasContext2D, releaseCanvas} from './dom.js';\r\nimport {\r\n  containsCoordinate,\r\n  createEmpty,\r\n  extend,\r\n  forEachCorner,\r\n  getCenter,\r\n  getHeight,\r\n  getTopLeft,\r\n  getWidth,\r\n} from './extent.js';\r\nimport {solveLinearSystem} from './math.js';\r\nimport {getPointResolution, transform} from './proj.js';\r\n\r\nlet brokenDiagonalRendering_;\r\n\r\n/**\r\n * @type {Array<HTMLCanvasElement>}\r\n */\r\nexport const canvasPool = [];\r\n\r\n/**\r\n * This draws a small triangle into a canvas by setting the triangle as the clip region\r\n * and then drawing a (too large) rectangle\r\n *\r\n * @param {CanvasRenderingContext2D} ctx The context in which to draw the triangle\r\n * @param {number} u1 The x-coordinate of the second point. The first point is 0,0.\r\n * @param {number} v1 The y-coordinate of the second point.\r\n * @param {number} u2 The x-coordinate of the third point.\r\n * @param {number} v2 The y-coordinate of the third point.\r\n */\r\nfunction drawTestTriangle(ctx, u1, v1, u2, v2) {\r\n  ctx.beginPath();\r\n  ctx.moveTo(0, 0);\r\n  ctx.lineTo(u1, v1);\r\n  ctx.lineTo(u2, v2);\r\n  ctx.closePath();\r\n  ctx.save();\r\n  ctx.clip();\r\n  ctx.fillRect(0, 0, Math.max(u1, u2) + 1, Math.max(v1, v2));\r\n  ctx.restore();\r\n}\r\n\r\n/**\r\n * Given the data from getImageData, see if the right values appear at the provided offset.\r\n * Returns true if either the color or transparency is off\r\n *\r\n * @param {Uint8ClampedArray} data The data returned from getImageData\r\n * @param {number} offset The pixel offset from the start of data.\r\n * @return {boolean} true if the diagonal rendering is broken\r\n */\r\nfunction verifyBrokenDiagonalRendering(data, offset) {\r\n  // the values ought to be close to the rgba(210, 0, 0, 0.75)\r\n  return (\r\n    Math.abs(data[offset * 4] - 210) > 2 ||\r\n    Math.abs(data[offset * 4 + 3] - 0.75 * 255) > 2\r\n  );\r\n}\r\n\r\n/**\r\n * Determines if the current browser configuration can render triangular clip regions correctly.\r\n * This value is cached so the function is only expensive the first time called.\r\n * Firefox on Windows (as of now) does not if HWA is enabled. See https://bugzilla.mozilla.org/show_bug.cgi?id=1606976\r\n * Chrome works, and everything seems to work on OSX and Android. This function caches the\r\n * result. I suppose that it is conceivably possible that a browser might flip modes while the app is\r\n * running, but lets hope not.\r\n *\r\n * @return {boolean} true if the Diagonal Rendering is broken.\r\n */\r\nfunction isBrokenDiagonalRendering() {\r\n  if (brokenDiagonalRendering_ === undefined) {\r\n    const ctx = createCanvasContext2D(6, 6, canvasPool);\r\n    ctx.globalCompositeOperation = 'lighter';\r\n    ctx.fillStyle = 'rgba(210, 0, 0, 0.75)';\r\n    drawTestTriangle(ctx, 4, 5, 4, 0);\r\n    drawTestTriangle(ctx, 4, 5, 0, 5);\r\n    const data = ctx.getImageData(0, 0, 3, 3).data;\r\n    brokenDiagonalRendering_ =\r\n      verifyBrokenDiagonalRendering(data, 0) ||\r\n      verifyBrokenDiagonalRendering(data, 4) ||\r\n      verifyBrokenDiagonalRendering(data, 8);\r\n    releaseCanvas(ctx);\r\n    canvasPool.push(ctx.canvas);\r\n  }\r\n\r\n  return brokenDiagonalRendering_;\r\n}\r\n\r\n/**\r\n * Calculates ideal resolution to use from the source in order to achieve\r\n * pixel mapping as close as possible to 1:1 during reprojection.\r\n * The resolution is calculated regardless of what resolutions\r\n * are actually available in the dataset (TileGrid, Image, ...).\r\n *\r\n * @param {import(\"./proj/Projection.js\").default} sourceProj Source projection.\r\n * @param {import(\"./proj/Projection.js\").default} targetProj Target projection.\r\n * @param {import(\"./coordinate.js\").Coordinate} targetCenter Target center.\r\n * @param {number} targetResolution Target resolution.\r\n * @return {number} The best resolution to use. Can be +-Infinity, NaN or 0.\r\n */\r\nexport function calculateSourceResolution(\r\n  sourceProj,\r\n  targetProj,\r\n  targetCenter,\r\n  targetResolution,\r\n) {\r\n  const sourceCenter = transform(targetCenter, targetProj, sourceProj);\r\n\r\n  // calculate the ideal resolution of the source data\r\n  let sourceResolution = getPointResolution(\r\n    targetProj,\r\n    targetResolution,\r\n    targetCenter,\r\n  );\r\n\r\n  const targetMetersPerUnit = targetProj.getMetersPerUnit();\r\n  if (targetMetersPerUnit !== undefined) {\r\n    sourceResolution *= targetMetersPerUnit;\r\n  }\r\n  const sourceMetersPerUnit = sourceProj.getMetersPerUnit();\r\n  if (sourceMetersPerUnit !== undefined) {\r\n    sourceResolution /= sourceMetersPerUnit;\r\n  }\r\n\r\n  // Based on the projection properties, the point resolution at the specified\r\n  // coordinates may be slightly different. We need to reverse-compensate this\r\n  // in order to achieve optimal results.\r\n\r\n  const sourceExtent = sourceProj.getExtent();\r\n  if (!sourceExtent || containsCoordinate(sourceExtent, sourceCenter)) {\r\n    const compensationFactor =\r\n      getPointResolution(sourceProj, sourceResolution, sourceCenter) /\r\n      sourceResolution;\r\n    if (isFinite(compensationFactor) && compensationFactor > 0) {\r\n      sourceResolution /= compensationFactor;\r\n    }\r\n  }\r\n\r\n  return sourceResolution;\r\n}\r\n\r\n/**\r\n * Calculates ideal resolution to use from the source in order to achieve\r\n * pixel mapping as close as possible to 1:1 during reprojection.\r\n * The resolution is calculated regardless of what resolutions\r\n * are actually available in the dataset (TileGrid, Image, ...).\r\n *\r\n * @param {import(\"./proj/Projection.js\").default} sourceProj Source projection.\r\n * @param {import(\"./proj/Projection.js\").default} targetProj Target projection.\r\n * @param {import(\"./extent.js\").Extent} targetExtent Target extent\r\n * @param {number} targetResolution Target resolution.\r\n * @return {number} The best resolution to use. Can be +-Infinity, NaN or 0.\r\n */\r\nexport function calculateSourceExtentResolution(\r\n  sourceProj,\r\n  targetProj,\r\n  targetExtent,\r\n  targetResolution,\r\n) {\r\n  const targetCenter = getCenter(targetExtent);\r\n  let sourceResolution = calculateSourceResolution(\r\n    sourceProj,\r\n    targetProj,\r\n    targetCenter,\r\n    targetResolution,\r\n  );\r\n\r\n  if (!isFinite(sourceResolution) || sourceResolution <= 0) {\r\n    forEachCorner(targetExtent, function (corner) {\r\n      sourceResolution = calculateSourceResolution(\r\n        sourceProj,\r\n        targetProj,\r\n        corner,\r\n        targetResolution,\r\n      );\r\n      return isFinite(sourceResolution) && sourceResolution > 0;\r\n    });\r\n  }\r\n\r\n  return sourceResolution;\r\n}\r\n\r\n/**\r\n * @typedef {Object} ImageExtent\r\n * @property {import(\"./extent.js\").Extent} extent Extent.\r\n * @property {import(\"./extent.js\").Extent} [clipExtent] Clip extent.\r\n * @property {import('./DataTile.js').ImageLike} image Image.\r\n */\r\n\r\n/**\r\n * Renders the source data into new canvas based on the triangulation.\r\n *\r\n * @param {number} width Width of the canvas.\r\n * @param {number} height Height of the canvas.\r\n * @param {number} pixelRatio Pixel ratio.\r\n * @param {number} sourceResolution Source resolution.\r\n * @param {import(\"./extent.js\").Extent} sourceExtent Extent of the data source.\r\n * @param {number} targetResolution Target resolution.\r\n * @param {import(\"./extent.js\").Extent} targetExtent Target extent.\r\n * @param {import(\"./reproj/Triangulation.js\").default} triangulation Calculated triangulation.\r\n * @param {Array<ImageExtent>} sources Array of sources.\r\n * @param {number} gutter Gutter of the sources.\r\n * @param {boolean} [renderEdges] Render reprojection edges.\r\n * @param {boolean} [interpolate] Use linear interpolation when resampling.\r\n * @param {boolean} [drawSingle] Draw single source images directly without stitchContext.\r\n * @param {boolean} [clipExtent] Clip stitchContext to sourceExtent.\r\n * @return {HTMLCanvasElement} Canvas with reprojected data.\r\n */\r\nexport function render(\r\n  width,\r\n  height,\r\n  pixelRatio,\r\n  sourceResolution,\r\n  sourceExtent,\r\n  targetResolution,\r\n  targetExtent,\r\n  triangulation,\r\n  sources,\r\n  gutter,\r\n  renderEdges,\r\n  interpolate,\r\n  drawSingle,\r\n  clipExtent,\r\n) {\r\n  const context = createCanvasContext2D(\r\n    Math.round(pixelRatio * width),\r\n    Math.round(pixelRatio * height),\r\n    canvasPool,\r\n  );\r\n\r\n  if (!interpolate) {\r\n    context.imageSmoothingEnabled = false;\r\n  }\r\n\r\n  if (sources.length === 0) {\r\n    return context.canvas;\r\n  }\r\n\r\n  context.scale(pixelRatio, pixelRatio);\r\n\r\n  function pixelRound(value) {\r\n    return Math.round(value * pixelRatio) / pixelRatio;\r\n  }\r\n\r\n  context.globalCompositeOperation = 'lighter';\r\n\r\n  const sourceDataExtent = createEmpty();\r\n  sources.forEach(function (src, i, arr) {\r\n    extend(sourceDataExtent, src.extent);\r\n  });\r\n\r\n  let stitchContext;\r\n  const stitchScale = pixelRatio / sourceResolution;\r\n  // Round up Float32 scale values to prevent interpolation in Firefox.\r\n  const inverseScale = (interpolate ? 1 : 1 + Math.pow(2, -24)) / stitchScale;\r\n\r\n  if (!drawSingle || sources.length !== 1 || gutter !== 0) {\r\n    stitchContext = createCanvasContext2D(\r\n      Math.round(getWidth(sourceDataExtent) * stitchScale),\r\n      Math.round(getHeight(sourceDataExtent) * stitchScale),\r\n      canvasPool,\r\n    );\r\n\r\n    if (!interpolate) {\r\n      stitchContext.imageSmoothingEnabled = false;\r\n    }\r\n    if (sourceExtent && clipExtent) {\r\n      const xPos = (sourceExtent[0] - sourceDataExtent[0]) * stitchScale;\r\n      const yPos = -(sourceExtent[3] - sourceDataExtent[3]) * stitchScale;\r\n      const width = getWidth(sourceExtent) * stitchScale;\r\n      const height = getHeight(sourceExtent) * stitchScale;\r\n      stitchContext.rect(xPos, yPos, width, height);\r\n      stitchContext.clip();\r\n    }\r\n\r\n    sources.forEach(function (src, i, arr) {\r\n      // This test should never fail -- but it does. Need to find a fix the upstream condition\r\n      if (src.image.width > 0 && src.image.height > 0) {\r\n        if (src.clipExtent) {\r\n          stitchContext.save();\r\n          const xPos = (src.clipExtent[0] - sourceDataExtent[0]) * stitchScale;\r\n          const yPos = -(src.clipExtent[3] - sourceDataExtent[3]) * stitchScale;\r\n          const width = getWidth(src.clipExtent) * stitchScale;\r\n          const height = getHeight(src.clipExtent) * stitchScale;\r\n          stitchContext.rect(\r\n            interpolate ? xPos : Math.round(xPos),\r\n            interpolate ? yPos : Math.round(yPos),\r\n            interpolate ? width : Math.round(xPos + width) - Math.round(xPos),\r\n            interpolate ? height : Math.round(yPos + height) - Math.round(yPos),\r\n          );\r\n          stitchContext.clip();\r\n        }\r\n\r\n        const xPos = (src.extent[0] - sourceDataExtent[0]) * stitchScale;\r\n        const yPos = -(src.extent[3] - sourceDataExtent[3]) * stitchScale;\r\n        const srcWidth = getWidth(src.extent) * stitchScale;\r\n        const srcHeight = getHeight(src.extent) * stitchScale;\r\n        stitchContext.drawImage(\r\n          src.image,\r\n          gutter,\r\n          gutter,\r\n          src.image.width - 2 * gutter,\r\n          src.image.height - 2 * gutter,\r\n          interpolate ? xPos : Math.round(xPos),\r\n          interpolate ? yPos : Math.round(yPos),\r\n          interpolate\r\n            ? srcWidth\r\n            : Math.round(xPos + srcWidth) - Math.round(xPos),\r\n          interpolate\r\n            ? srcHeight\r\n            : Math.round(yPos + srcHeight) - Math.round(yPos),\r\n        );\r\n\r\n        if (src.clipExtent) {\r\n          stitchContext.restore();\r\n        }\r\n      }\r\n    });\r\n  }\r\n  const targetTopLeft = getTopLeft(targetExtent);\r\n\r\n  triangulation.getTriangles().forEach(function (triangle, i, arr) {\r\n    /* Calculate affine transform (src -> dst)\r\n     * Resulting matrix can be used to transform coordinate\r\n     * from `sourceProjection` to destination pixels.\r\n     *\r\n     * To optimize number of context calls and increase numerical stability,\r\n     * we also do the following operations:\r\n     * trans(-topLeftExtentCorner), scale(1 / targetResolution), scale(1, -1)\r\n     * here before solving the linear system so [ui, vi] are pixel coordinates.\r\n     *\r\n     * Src points: xi, yi\r\n     * Dst points: ui, vi\r\n     * Affine coefficients: aij\r\n     *\r\n     * | x0 y0 1  0  0 0 |   |a00|   |u0|\r\n     * | x1 y1 1  0  0 0 |   |a01|   |u1|\r\n     * | x2 y2 1  0  0 0 | x |a02| = |u2|\r\n     * |  0  0 0 x0 y0 1 |   |a10|   |v0|\r\n     * |  0  0 0 x1 y1 1 |   |a11|   |v1|\r\n     * |  0  0 0 x2 y2 1 |   |a12|   |v2|\r\n     */\r\n    const source = triangle.source;\r\n    const target = triangle.target;\r\n    let x0 = source[0][0],\r\n      y0 = source[0][1];\r\n    let x1 = source[1][0],\r\n      y1 = source[1][1];\r\n    let x2 = source[2][0],\r\n      y2 = source[2][1];\r\n    // Make sure that everything is on pixel boundaries\r\n    const u0 = pixelRound((target[0][0] - targetTopLeft[0]) / targetResolution);\r\n    const v0 = pixelRound(\r\n      -(target[0][1] - targetTopLeft[1]) / targetResolution,\r\n    );\r\n    const u1 = pixelRound((target[1][0] - targetTopLeft[0]) / targetResolution);\r\n    const v1 = pixelRound(\r\n      -(target[1][1] - targetTopLeft[1]) / targetResolution,\r\n    );\r\n    const u2 = pixelRound((target[2][0] - targetTopLeft[0]) / targetResolution);\r\n    const v2 = pixelRound(\r\n      -(target[2][1] - targetTopLeft[1]) / targetResolution,\r\n    );\r\n\r\n    // Shift all the source points to improve numerical stability\r\n    // of all the subsequent calculations. The [x0, y0] is used here.\r\n    // This is also used to simplify the linear system.\r\n    const sourceNumericalShiftX = x0;\r\n    const sourceNumericalShiftY = y0;\r\n    x0 = 0;\r\n    y0 = 0;\r\n    x1 -= sourceNumericalShiftX;\r\n    y1 -= sourceNumericalShiftY;\r\n    x2 -= sourceNumericalShiftX;\r\n    y2 -= sourceNumericalShiftY;\r\n\r\n    const augmentedMatrix = [\r\n      [x1, y1, 0, 0, u1 - u0],\r\n      [x2, y2, 0, 0, u2 - u0],\r\n      [0, 0, x1, y1, v1 - v0],\r\n      [0, 0, x2, y2, v2 - v0],\r\n    ];\r\n    const affineCoefs = solveLinearSystem(augmentedMatrix);\r\n    if (!affineCoefs) {\r\n      return;\r\n    }\r\n\r\n    context.save();\r\n    context.beginPath();\r\n\r\n    if (isBrokenDiagonalRendering() || !interpolate) {\r\n      // Make sure that all lines are horizontal or vertical\r\n      context.moveTo(u1, v1);\r\n      // This is the diagonal line. Do it in 4 steps\r\n      const steps = 4;\r\n      const ud = u0 - u1;\r\n      const vd = v0 - v1;\r\n      for (let step = 0; step < steps; step++) {\r\n        // Go horizontally\r\n        context.lineTo(\r\n          u1 + pixelRound(((step + 1) * ud) / steps),\r\n          v1 + pixelRound((step * vd) / (steps - 1)),\r\n        );\r\n        // Go vertically\r\n        if (step != steps - 1) {\r\n          context.lineTo(\r\n            u1 + pixelRound(((step + 1) * ud) / steps),\r\n            v1 + pixelRound(((step + 1) * vd) / (steps - 1)),\r\n          );\r\n        }\r\n      }\r\n      // We are almost at u0r, v0r\r\n      context.lineTo(u2, v2);\r\n    } else {\r\n      context.moveTo(u1, v1);\r\n      context.lineTo(u0, v0);\r\n      context.lineTo(u2, v2);\r\n    }\r\n\r\n    context.clip();\r\n\r\n    context.transform(\r\n      affineCoefs[0],\r\n      affineCoefs[2],\r\n      affineCoefs[1],\r\n      affineCoefs[3],\r\n      u0,\r\n      v0,\r\n    );\r\n\r\n    context.translate(\r\n      sourceDataExtent[0] - sourceNumericalShiftX,\r\n      sourceDataExtent[3] - sourceNumericalShiftY,\r\n    );\r\n\r\n    let image;\r\n    if (stitchContext) {\r\n      image = stitchContext.canvas;\r\n      context.scale(inverseScale, -inverseScale);\r\n    } else {\r\n      const source = sources[0];\r\n      const extent = source.extent;\r\n      image = source.image;\r\n      context.scale(\r\n        getWidth(extent) / image.width,\r\n        -getHeight(extent) / image.height,\r\n      );\r\n    }\r\n\r\n    context.drawImage(image, 0, 0);\r\n    context.restore();\r\n  });\r\n\r\n  if (stitchContext) {\r\n    releaseCanvas(stitchContext);\r\n    canvasPool.push(stitchContext.canvas);\r\n  }\r\n\r\n  if (renderEdges) {\r\n    context.save();\r\n\r\n    context.globalCompositeOperation = 'source-over';\r\n    context.strokeStyle = 'black';\r\n    context.lineWidth = 1;\r\n\r\n    triangulation.getTriangles().forEach(function (triangle, i, arr) {\r\n      const target = triangle.target;\r\n      const u0 = (target[0][0] - targetTopLeft[0]) / targetResolution;\r\n      const v0 = -(target[0][1] - targetTopLeft[1]) / targetResolution;\r\n      const u1 = (target[1][0] - targetTopLeft[0]) / targetResolution;\r\n      const v1 = -(target[1][1] - targetTopLeft[1]) / targetResolution;\r\n      const u2 = (target[2][0] - targetTopLeft[0]) / targetResolution;\r\n      const v2 = -(target[2][1] - targetTopLeft[1]) / targetResolution;\r\n\r\n      context.beginPath();\r\n      context.moveTo(u1, v1);\r\n      context.lineTo(u0, v0);\r\n      context.lineTo(u2, v2);\r\n      context.closePath();\r\n      context.stroke();\r\n    });\r\n\r\n    context.restore();\r\n  }\r\n  return context.canvas;\r\n}\r\n","/**\r\n * @module ol/reproj/Triangulation\r\n */\r\nimport {\r\n  boundingExtent,\r\n  createEmpty,\r\n  extendCoordinate,\r\n  getArea,\r\n  getBottomLeft,\r\n  getBottomRight,\r\n  getTopLeft,\r\n  getTopRight,\r\n  getWidth,\r\n  intersects,\r\n} from '../extent.js';\r\nimport {modulo} from '../math.js';\r\nimport {\r\n  createTransformFromCoordinateTransform,\r\n  getTransform,\r\n  transform,\r\n} from '../proj.js';\r\nimport {apply as applyMatrix} from '../transform.js';\r\n\r\n/**\r\n * Single triangle; consists of 3 source points and 3 target points.\r\n * @typedef {Object} Triangle\r\n * @property {Array<import(\"../coordinate.js\").Coordinate>} source Source.\r\n * @property {Array<import(\"../coordinate.js\").Coordinate>} target Target.\r\n */\r\n\r\n/**\r\n * Maximum number of subdivision steps during raster reprojection triangulation.\r\n * Prevents high memory usage and large number of proj4 calls (for certain\r\n * transformations and areas). At most `2*(2^this)` triangles are created for\r\n * each triangulated extent (tile/image).\r\n * @type {number}\r\n */\r\nconst MAX_SUBDIVISION = 10;\r\n\r\n/**\r\n * Maximum allowed size of triangle relative to world width. When transforming\r\n * corners of world extent between certain projections, the resulting\r\n * triangulation seems to have zero error and no subdivision is performed. If\r\n * the triangle width is more than this (relative to world width; 0-1),\r\n * subdivison is forced (up to `MAX_SUBDIVISION`). Default is `0.25`.\r\n * @type {number}\r\n */\r\nconst MAX_TRIANGLE_WIDTH = 0.25;\r\n\r\n/**\r\n * @classdesc\r\n * Class containing triangulation of the given target extent.\r\n * Used for determining source data and the reprojection itself.\r\n */\r\nclass Triangulation {\r\n  /**\r\n   * @param {import(\"../proj/Projection.js\").default} sourceProj Source projection.\r\n   * @param {import(\"../proj/Projection.js\").default} targetProj Target projection.\r\n   * @param {import(\"../extent.js\").Extent} targetExtent Target extent to triangulate.\r\n   * @param {import(\"../extent.js\").Extent} maxSourceExtent Maximal source extent that can be used.\r\n   * @param {number} errorThreshold Acceptable error (in source units).\r\n   * @param {?number} destinationResolution The (optional) resolution of the destination.\r\n   * @param {import(\"../transform.js\").Transform} [sourceMatrix] Source transform matrix.\r\n   */\r\n  constructor(\r\n    sourceProj,\r\n    targetProj,\r\n    targetExtent,\r\n    maxSourceExtent,\r\n    errorThreshold,\r\n    destinationResolution,\r\n    sourceMatrix,\r\n  ) {\r\n    /**\r\n     * @type {import(\"../proj/Projection.js\").default}\r\n     * @private\r\n     */\r\n    this.sourceProj_ = sourceProj;\r\n\r\n    /**\r\n     * @type {import(\"../proj/Projection.js\").default}\r\n     * @private\r\n     */\r\n    this.targetProj_ = targetProj;\r\n\r\n    /** @type {!Object<string, import(\"../coordinate.js\").Coordinate>} */\r\n    let transformInvCache = {};\r\n    const transformInv = sourceMatrix\r\n      ? createTransformFromCoordinateTransform((input) =>\r\n          applyMatrix(\r\n            sourceMatrix,\r\n            transform(input, this.targetProj_, this.sourceProj_),\r\n          ),\r\n        )\r\n      : getTransform(this.targetProj_, this.sourceProj_);\r\n\r\n    /**\r\n     * @param {import(\"../coordinate.js\").Coordinate} c A coordinate.\r\n     * @return {import(\"../coordinate.js\").Coordinate} Transformed coordinate.\r\n     * @private\r\n     */\r\n    this.transformInv_ = function (c) {\r\n      const key = c[0] + '/' + c[1];\r\n      if (!transformInvCache[key]) {\r\n        transformInvCache[key] = transformInv(c);\r\n      }\r\n      return transformInvCache[key];\r\n    };\r\n\r\n    /**\r\n     * @type {import(\"../extent.js\").Extent}\r\n     * @private\r\n     */\r\n    this.maxSourceExtent_ = maxSourceExtent;\r\n\r\n    /**\r\n     * @type {number}\r\n     * @private\r\n     */\r\n    this.errorThresholdSquared_ = errorThreshold * errorThreshold;\r\n\r\n    /**\r\n     * @type {Array<Triangle>}\r\n     * @private\r\n     */\r\n    this.triangles_ = [];\r\n\r\n    /**\r\n     * Indicates that the triangulation crosses edge of the source projection.\r\n     * @type {boolean}\r\n     * @private\r\n     */\r\n    this.wrapsXInSource_ = false;\r\n\r\n    /**\r\n     * @type {boolean}\r\n     * @private\r\n     */\r\n    this.canWrapXInSource_ =\r\n      this.sourceProj_.canWrapX() &&\r\n      !!maxSourceExtent &&\r\n      !!this.sourceProj_.getExtent() &&\r\n      getWidth(maxSourceExtent) >= getWidth(this.sourceProj_.getExtent());\r\n\r\n    /**\r\n     * @type {?number}\r\n     * @private\r\n     */\r\n    this.sourceWorldWidth_ = this.sourceProj_.getExtent()\r\n      ? getWidth(this.sourceProj_.getExtent())\r\n      : null;\r\n\r\n    /**\r\n     * @type {?number}\r\n     * @private\r\n     */\r\n    this.targetWorldWidth_ = this.targetProj_.getExtent()\r\n      ? getWidth(this.targetProj_.getExtent())\r\n      : null;\r\n\r\n    const destinationTopLeft = getTopLeft(targetExtent);\r\n    const destinationTopRight = getTopRight(targetExtent);\r\n    const destinationBottomRight = getBottomRight(targetExtent);\r\n    const destinationBottomLeft = getBottomLeft(targetExtent);\r\n    const sourceTopLeft = this.transformInv_(destinationTopLeft);\r\n    const sourceTopRight = this.transformInv_(destinationTopRight);\r\n    const sourceBottomRight = this.transformInv_(destinationBottomRight);\r\n    const sourceBottomLeft = this.transformInv_(destinationBottomLeft);\r\n\r\n    /*\r\n     * The maxSubdivision controls how many splittings of the target area can\r\n     * be done. The idea here is to do a linear mapping of the target areas\r\n     * but the actual overall reprojection (can be) extremely non-linear. The\r\n     * default value of MAX_SUBDIVISION was chosen based on mapping a 256x256\r\n     * tile size. However this function is also called to remap canvas rendered\r\n     * layers which can be much larger. This calculation increases the maxSubdivision\r\n     * value by the right factor so that each 256x256 pixel area has\r\n     * MAX_SUBDIVISION divisions.\r\n     */\r\n    const maxSubdivision =\r\n      MAX_SUBDIVISION +\r\n      (destinationResolution\r\n        ? Math.max(\r\n            0,\r\n            Math.ceil(\r\n              Math.log2(\r\n                getArea(targetExtent) /\r\n                  (destinationResolution * destinationResolution * 256 * 256),\r\n              ),\r\n            ),\r\n          )\r\n        : 0);\r\n\r\n    this.addQuad_(\r\n      destinationTopLeft,\r\n      destinationTopRight,\r\n      destinationBottomRight,\r\n      destinationBottomLeft,\r\n      sourceTopLeft,\r\n      sourceTopRight,\r\n      sourceBottomRight,\r\n      sourceBottomLeft,\r\n      maxSubdivision,\r\n    );\r\n\r\n    if (this.wrapsXInSource_) {\r\n      let leftBound = Infinity;\r\n      this.triangles_.forEach(function (triangle, i, arr) {\r\n        leftBound = Math.min(\r\n          leftBound,\r\n          triangle.source[0][0],\r\n          triangle.source[1][0],\r\n          triangle.source[2][0],\r\n        );\r\n      });\r\n\r\n      // Shift triangles to be as close to `leftBound` as possible\r\n      // (if the distance is more than `worldWidth / 2` it can be closer.\r\n      this.triangles_.forEach((triangle) => {\r\n        if (\r\n          Math.max(\r\n            triangle.source[0][0],\r\n            triangle.source[1][0],\r\n            triangle.source[2][0],\r\n          ) -\r\n            leftBound >\r\n          this.sourceWorldWidth_ / 2\r\n        ) {\r\n          const newTriangle = [\r\n            [triangle.source[0][0], triangle.source[0][1]],\r\n            [triangle.source[1][0], triangle.source[1][1]],\r\n            [triangle.source[2][0], triangle.source[2][1]],\r\n          ];\r\n          if (newTriangle[0][0] - leftBound > this.sourceWorldWidth_ / 2) {\r\n            newTriangle[0][0] -= this.sourceWorldWidth_;\r\n          }\r\n          if (newTriangle[1][0] - leftBound > this.sourceWorldWidth_ / 2) {\r\n            newTriangle[1][0] -= this.sourceWorldWidth_;\r\n          }\r\n          if (newTriangle[2][0] - leftBound > this.sourceWorldWidth_ / 2) {\r\n            newTriangle[2][0] -= this.sourceWorldWidth_;\r\n          }\r\n\r\n          // Rarely (if the extent contains both the dateline and prime meridian)\r\n          // the shift can in turn break some triangles.\r\n          // Detect this here and don't shift in such cases.\r\n          const minX = Math.min(\r\n            newTriangle[0][0],\r\n            newTriangle[1][0],\r\n            newTriangle[2][0],\r\n          );\r\n          const maxX = Math.max(\r\n            newTriangle[0][0],\r\n            newTriangle[1][0],\r\n            newTriangle[2][0],\r\n          );\r\n          if (maxX - minX < this.sourceWorldWidth_ / 2) {\r\n            triangle.source = newTriangle;\r\n          }\r\n        }\r\n      });\r\n    }\r\n\r\n    transformInvCache = {};\r\n  }\r\n\r\n  /**\r\n   * Adds triangle to the triangulation.\r\n   * @param {import(\"../coordinate.js\").Coordinate} a The target a coordinate.\r\n   * @param {import(\"../coordinate.js\").Coordinate} b The target b coordinate.\r\n   * @param {import(\"../coordinate.js\").Coordinate} c The target c coordinate.\r\n   * @param {import(\"../coordinate.js\").Coordinate} aSrc The source a coordinate.\r\n   * @param {import(\"../coordinate.js\").Coordinate} bSrc The source b coordinate.\r\n   * @param {import(\"../coordinate.js\").Coordinate} cSrc The source c coordinate.\r\n   * @private\r\n   */\r\n  addTriangle_(a, b, c, aSrc, bSrc, cSrc) {\r\n    this.triangles_.push({\r\n      source: [aSrc, bSrc, cSrc],\r\n      target: [a, b, c],\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Adds quad (points in clock-wise order) to the triangulation\r\n   * (and reprojects the vertices) if valid.\r\n   * Performs quad subdivision if needed to increase precision.\r\n   *\r\n   * @param {import(\"../coordinate.js\").Coordinate} a The target a coordinate.\r\n   * @param {import(\"../coordinate.js\").Coordinate} b The target b coordinate.\r\n   * @param {import(\"../coordinate.js\").Coordinate} c The target c coordinate.\r\n   * @param {import(\"../coordinate.js\").Coordinate} d The target d coordinate.\r\n   * @param {import(\"../coordinate.js\").Coordinate} aSrc The source a coordinate.\r\n   * @param {import(\"../coordinate.js\").Coordinate} bSrc The source b coordinate.\r\n   * @param {import(\"../coordinate.js\").Coordinate} cSrc The source c coordinate.\r\n   * @param {import(\"../coordinate.js\").Coordinate} dSrc The source d coordinate.\r\n   * @param {number} maxSubdivision Maximal allowed subdivision of the quad.\r\n   * @private\r\n   */\r\n  addQuad_(a, b, c, d, aSrc, bSrc, cSrc, dSrc, maxSubdivision) {\r\n    const sourceQuadExtent = boundingExtent([aSrc, bSrc, cSrc, dSrc]);\r\n    const sourceCoverageX = this.sourceWorldWidth_\r\n      ? getWidth(sourceQuadExtent) / this.sourceWorldWidth_\r\n      : null;\r\n    const sourceWorldWidth = /** @type {number} */ (this.sourceWorldWidth_);\r\n\r\n    // when the quad is wrapped in the source projection\r\n    // it covers most of the projection extent, but not fully\r\n    const wrapsX =\r\n      this.sourceProj_.canWrapX() &&\r\n      sourceCoverageX > 0.5 &&\r\n      sourceCoverageX < 1;\r\n\r\n    let needsSubdivision = false;\r\n\r\n    if (maxSubdivision > 0) {\r\n      if (this.targetProj_.isGlobal() && this.targetWorldWidth_) {\r\n        const targetQuadExtent = boundingExtent([a, b, c, d]);\r\n        const targetCoverageX =\r\n          getWidth(targetQuadExtent) / this.targetWorldWidth_;\r\n        needsSubdivision =\r\n          targetCoverageX > MAX_TRIANGLE_WIDTH || needsSubdivision;\r\n      }\r\n      if (!wrapsX && this.sourceProj_.isGlobal() && sourceCoverageX) {\r\n        needsSubdivision =\r\n          sourceCoverageX > MAX_TRIANGLE_WIDTH || needsSubdivision;\r\n      }\r\n    }\r\n\r\n    if (!needsSubdivision && this.maxSourceExtent_) {\r\n      if (\r\n        isFinite(sourceQuadExtent[0]) &&\r\n        isFinite(sourceQuadExtent[1]) &&\r\n        isFinite(sourceQuadExtent[2]) &&\r\n        isFinite(sourceQuadExtent[3])\r\n      ) {\r\n        if (!intersects(sourceQuadExtent, this.maxSourceExtent_)) {\r\n          // whole quad outside source projection extent -> ignore\r\n          return;\r\n        }\r\n      }\r\n    }\r\n\r\n    let isNotFinite = 0;\r\n\r\n    if (!needsSubdivision) {\r\n      if (\r\n        !isFinite(aSrc[0]) ||\r\n        !isFinite(aSrc[1]) ||\r\n        !isFinite(bSrc[0]) ||\r\n        !isFinite(bSrc[1]) ||\r\n        !isFinite(cSrc[0]) ||\r\n        !isFinite(cSrc[1]) ||\r\n        !isFinite(dSrc[0]) ||\r\n        !isFinite(dSrc[1])\r\n      ) {\r\n        if (maxSubdivision > 0) {\r\n          needsSubdivision = true;\r\n        } else {\r\n          // It might be the case that only 1 of the points is infinite. In this case\r\n          // we can draw a single triangle with the other three points\r\n          isNotFinite =\r\n            (!isFinite(aSrc[0]) || !isFinite(aSrc[1]) ? 8 : 0) +\r\n            (!isFinite(bSrc[0]) || !isFinite(bSrc[1]) ? 4 : 0) +\r\n            (!isFinite(cSrc[0]) || !isFinite(cSrc[1]) ? 2 : 0) +\r\n            (!isFinite(dSrc[0]) || !isFinite(dSrc[1]) ? 1 : 0);\r\n          if (\r\n            isNotFinite != 1 &&\r\n            isNotFinite != 2 &&\r\n            isNotFinite != 4 &&\r\n            isNotFinite != 8\r\n          ) {\r\n            return;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    if (maxSubdivision > 0) {\r\n      if (!needsSubdivision) {\r\n        const center = [(a[0] + c[0]) / 2, (a[1] + c[1]) / 2];\r\n        const centerSrc = this.transformInv_(center);\r\n\r\n        let dx;\r\n        if (wrapsX) {\r\n          const centerSrcEstimX =\r\n            (modulo(aSrc[0], sourceWorldWidth) +\r\n              modulo(cSrc[0], sourceWorldWidth)) /\r\n            2;\r\n          dx = centerSrcEstimX - modulo(centerSrc[0], sourceWorldWidth);\r\n        } else {\r\n          dx = (aSrc[0] + cSrc[0]) / 2 - centerSrc[0];\r\n        }\r\n        const dy = (aSrc[1] + cSrc[1]) / 2 - centerSrc[1];\r\n        const centerSrcErrorSquared = dx * dx + dy * dy;\r\n        needsSubdivision = centerSrcErrorSquared > this.errorThresholdSquared_;\r\n      }\r\n      if (needsSubdivision) {\r\n        if (Math.abs(a[0] - c[0]) <= Math.abs(a[1] - c[1])) {\r\n          // split horizontally (top & bottom)\r\n          const bc = [(b[0] + c[0]) / 2, (b[1] + c[1]) / 2];\r\n          const bcSrc = this.transformInv_(bc);\r\n          const da = [(d[0] + a[0]) / 2, (d[1] + a[1]) / 2];\r\n          const daSrc = this.transformInv_(da);\r\n\r\n          this.addQuad_(\r\n            a,\r\n            b,\r\n            bc,\r\n            da,\r\n            aSrc,\r\n            bSrc,\r\n            bcSrc,\r\n            daSrc,\r\n            maxSubdivision - 1,\r\n          );\r\n          this.addQuad_(\r\n            da,\r\n            bc,\r\n            c,\r\n            d,\r\n            daSrc,\r\n            bcSrc,\r\n            cSrc,\r\n            dSrc,\r\n            maxSubdivision - 1,\r\n          );\r\n        } else {\r\n          // split vertically (left & right)\r\n          const ab = [(a[0] + b[0]) / 2, (a[1] + b[1]) / 2];\r\n          const abSrc = this.transformInv_(ab);\r\n          const cd = [(c[0] + d[0]) / 2, (c[1] + d[1]) / 2];\r\n          const cdSrc = this.transformInv_(cd);\r\n\r\n          this.addQuad_(\r\n            a,\r\n            ab,\r\n            cd,\r\n            d,\r\n            aSrc,\r\n            abSrc,\r\n            cdSrc,\r\n            dSrc,\r\n            maxSubdivision - 1,\r\n          );\r\n          this.addQuad_(\r\n            ab,\r\n            b,\r\n            c,\r\n            cd,\r\n            abSrc,\r\n            bSrc,\r\n            cSrc,\r\n            cdSrc,\r\n            maxSubdivision - 1,\r\n          );\r\n        }\r\n        return;\r\n      }\r\n    }\r\n\r\n    if (wrapsX) {\r\n      if (!this.canWrapXInSource_) {\r\n        return;\r\n      }\r\n      this.wrapsXInSource_ = true;\r\n    }\r\n\r\n    // Exactly zero or one of *Src is not finite\r\n    // The triangles must have the diagonal line as the first side\r\n    // This is to allow easy code in reproj.s to make it straight for broken\r\n    // browsers that can't handle diagonal clipping\r\n    if ((isNotFinite & 0xb) == 0) {\r\n      this.addTriangle_(a, c, d, aSrc, cSrc, dSrc);\r\n    }\r\n    if ((isNotFinite & 0xe) == 0) {\r\n      this.addTriangle_(a, c, b, aSrc, cSrc, bSrc);\r\n    }\r\n    if (isNotFinite) {\r\n      // Try the other two triangles\r\n      if ((isNotFinite & 0xd) == 0) {\r\n        this.addTriangle_(b, d, a, bSrc, dSrc, aSrc);\r\n      }\r\n      if ((isNotFinite & 0x7) == 0) {\r\n        this.addTriangle_(b, d, c, bSrc, dSrc, cSrc);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculates extent of the `source` coordinates from all the triangles.\r\n   *\r\n   * @return {import(\"../extent.js\").Extent} Calculated extent.\r\n   */\r\n  calculateSourceExtent() {\r\n    const extent = createEmpty();\r\n\r\n    this.triangles_.forEach(function (triangle, i, arr) {\r\n      const src = triangle.source;\r\n      extendCoordinate(extent, src[0]);\r\n      extendCoordinate(extent, src[1]);\r\n      extendCoordinate(extent, src[2]);\r\n    });\r\n\r\n    return extent;\r\n  }\r\n\r\n  /**\r\n   * @return {Array<Triangle>} Array of the calculated triangles.\r\n   */\r\n  getTriangles() {\r\n    return this.triangles_;\r\n  }\r\n}\r\n\r\nexport default Triangulation;\r\n","/**\r\n * @module ol/reproj/common\r\n */\r\n\r\n/**\r\n * Default maximum allowed threshold  (in pixels) for reprojection\r\n * triangulation.\r\n * @type {number}\r\n */\r\nexport const ERROR_THRESHOLD = 0.5;\r\n","/**\r\n * @module ol/source/UrlTile\r\n */\r\nimport TileState from '../TileState.js';\r\nimport {createFromTemplates} from '../tileurlfunction.js';\r\nimport {expandUrl} from '../uri.js';\r\nimport {getUid} from '../util.js';\r\nimport TileSource, {TileSourceEvent} from './Tile.js';\r\nimport TileEventType from './TileEventType.js';\r\n\r\n/**\r\n * @typedef {Object} Options\r\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\r\n * @property {boolean} [attributionsCollapsible=true] Attributions are collapsible.\r\n * @property {number} [cacheSize] Deprecated.  Use the cacheSize option on the layer instead.\r\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection.\r\n * @property {import(\"./Source.js\").State} [state] State.\r\n * @property {import(\"../tilegrid/TileGrid.js\").default} [tileGrid] TileGrid.\r\n * @property {import(\"../Tile.js\").LoadFunction} tileLoadFunction TileLoadFunction.\r\n * @property {number} [tilePixelRatio] TilePixelRatio.\r\n * @property {import(\"../Tile.js\").UrlFunction} [tileUrlFunction] Deprecated.  Use an ImageTile source and provide a function\r\n * for the url option instead.\r\n * @property {string} [url] Url.\r\n * @property {Array<string>} [urls] Urls.\r\n * @property {boolean} [wrapX=true] WrapX.\r\n * @property {number} [transition] Transition.\r\n * @property {string} [key] Key.\r\n * @property {number|import(\"../array.js\").NearestDirectionFunction} [zDirection=0] ZDirection.\r\n * @property {boolean} [interpolate=false] Use interpolated values when resampling.  By default,\r\n * the nearest neighbor is used when resampling.\r\n */\r\n\r\n/**\r\n * @deprecated Use the ol/source/ImageTile.js instead.\r\n *\r\n * @fires import(\"./Tile.js\").TileSourceEvent\r\n */\r\nclass UrlTile extends TileSource {\r\n  /**\r\n   * @param {Options} options Image tile options.\r\n   */\r\n  constructor(options) {\r\n    super({\r\n      attributions: options.attributions,\r\n      cacheSize: options.cacheSize,\r\n      projection: options.projection,\r\n      state: options.state,\r\n      tileGrid: options.tileGrid,\r\n      tilePixelRatio: options.tilePixelRatio,\r\n      wrapX: options.wrapX,\r\n      transition: options.transition,\r\n      interpolate: options.interpolate,\r\n      key: options.key,\r\n      attributionsCollapsible: options.attributionsCollapsible,\r\n      zDirection: options.zDirection,\r\n    });\r\n\r\n    /**\r\n     * @private\r\n     * @type {boolean}\r\n     */\r\n    this.generateTileUrlFunction_ =\r\n      this.tileUrlFunction === UrlTile.prototype.tileUrlFunction;\r\n\r\n    /**\r\n     * @protected\r\n     * @type {import(\"../Tile.js\").LoadFunction}\r\n     */\r\n    this.tileLoadFunction = options.tileLoadFunction;\r\n\r\n    if (options.tileUrlFunction) {\r\n      this.tileUrlFunction = options.tileUrlFunction;\r\n    }\r\n\r\n    /**\r\n     * @protected\r\n     * @type {!Array<string>|null}\r\n     */\r\n    this.urls = null;\r\n\r\n    if (options.urls) {\r\n      this.setUrls(options.urls);\r\n    } else if (options.url) {\r\n      this.setUrl(options.url);\r\n    }\r\n\r\n    /**\r\n     * @private\r\n     * @type {!Object<string, boolean>}\r\n     */\r\n    this.tileLoadingKeys_ = {};\r\n  }\r\n\r\n  /**\r\n   * Deprecated.  Use an ImageTile source instead.\r\n   * Return the tile load function of the source.\r\n   * @return {import(\"../Tile.js\").LoadFunction} TileLoadFunction\r\n   * @api\r\n   */\r\n  getTileLoadFunction() {\r\n    return this.tileLoadFunction;\r\n  }\r\n\r\n  /**\r\n   * Deprecated.  Use an ImageTile source instead.\r\n   * Return the tile URL function of the source.\r\n   * @return {import(\"../Tile.js\").UrlFunction} TileUrlFunction\r\n   * @api\r\n   */\r\n  getTileUrlFunction() {\r\n    return Object.getPrototypeOf(this).tileUrlFunction === this.tileUrlFunction\r\n      ? this.tileUrlFunction.bind(this)\r\n      : this.tileUrlFunction;\r\n  }\r\n\r\n  /**\r\n   * Deprecated.  Use an ImageTile source instead.\r\n   * Return the URLs used for this source.\r\n   * When a tileUrlFunction is used instead of url or urls,\r\n   * null will be returned.\r\n   * @return {!Array<string>|null} URLs.\r\n   * @api\r\n   */\r\n  getUrls() {\r\n    return this.urls;\r\n  }\r\n\r\n  /**\r\n   * Handle tile change events.\r\n   * @param {import(\"../events/Event.js\").default} event Event.\r\n   * @protected\r\n   */\r\n  handleTileChange(event) {\r\n    const tile = /** @type {import(\"../Tile.js\").default} */ (event.target);\r\n    const uid = getUid(tile);\r\n    const tileState = tile.getState();\r\n    let type;\r\n    if (tileState == TileState.LOADING) {\r\n      this.tileLoadingKeys_[uid] = true;\r\n      type = TileEventType.TILELOADSTART;\r\n    } else if (uid in this.tileLoadingKeys_) {\r\n      delete this.tileLoadingKeys_[uid];\r\n      type =\r\n        tileState == TileState.ERROR\r\n          ? TileEventType.TILELOADERROR\r\n          : tileState == TileState.LOADED\r\n            ? TileEventType.TILELOADEND\r\n            : undefined;\r\n    }\r\n    if (type != undefined) {\r\n      this.dispatchEvent(new TileSourceEvent(type, tile));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Deprecated.  Use an ImageTile source instead.\r\n   * Set the tile load function of the source.\r\n   * @param {import(\"../Tile.js\").LoadFunction} tileLoadFunction Tile load function.\r\n   * @api\r\n   */\r\n  setTileLoadFunction(tileLoadFunction) {\r\n    this.tileLoadFunction = tileLoadFunction;\r\n    this.changed();\r\n  }\r\n\r\n  /**\r\n   * Deprecated.  Use an ImageTile source instead.\r\n   * Set the tile URL function of the source.\r\n   * @param {import(\"../Tile.js\").UrlFunction} tileUrlFunction Tile URL function.\r\n   * @param {string} [key] Optional new tile key for the source.\r\n   * @api\r\n   */\r\n  setTileUrlFunction(tileUrlFunction, key) {\r\n    this.tileUrlFunction = tileUrlFunction;\r\n    if (typeof key !== 'undefined') {\r\n      this.setKey(key);\r\n    } else {\r\n      this.changed();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Set the URL to use for requests.\r\n   * @param {string} url URL.\r\n   * @api\r\n   */\r\n  setUrl(url) {\r\n    const urls = expandUrl(url);\r\n    this.urls = urls;\r\n    this.setUrls(urls);\r\n  }\r\n\r\n  /**\r\n   * Deprecated.  Use an ImageTile source instead.\r\n   * Set the URLs to use for requests.\r\n   * @param {Array<string>} urls URLs.\r\n   * @api\r\n   */\r\n  setUrls(urls) {\r\n    this.urls = urls;\r\n    const key = urls.join('\\n');\r\n    if (this.generateTileUrlFunction_) {\r\n      this.setTileUrlFunction(createFromTemplates(urls, this.tileGrid), key);\r\n    } else {\r\n      this.setKey(key);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\r\n   * @param {number} pixelRatio Pixel ratio.\r\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\r\n   * @return {string|undefined} Tile URL.\r\n   */\r\n  tileUrlFunction(tileCoord, pixelRatio, projection) {\r\n    return undefined;\r\n  }\r\n}\r\n\r\nexport default UrlTile;\r\n","/**\r\n * @module ol/tileurlfunction\r\n */\r\nimport {modulo} from './math.js';\r\nimport {hash as tileCoordHash} from './tilecoord.js';\r\nimport {renderXYZTemplate} from './uri.js';\r\n\r\n/**\r\n * @param {string} template Template.\r\n * @param {import(\"./tilegrid/TileGrid.js\").default|null} tileGrid Tile grid.\r\n * @return {import(\"./Tile.js\").UrlFunction} Tile URL function.\r\n */\r\nexport function createFromTemplate(template, tileGrid) {\r\n  return (\r\n    /**\r\n     * @param {import(\"./tilecoord.js\").TileCoord} tileCoord Tile Coordinate.\r\n     * @param {number} pixelRatio Pixel ratio.\r\n     * @param {import(\"./proj/Projection.js\").default} projection Projection.\r\n     * @return {string|undefined} Tile URL.\r\n     */\r\n    function (tileCoord, pixelRatio, projection) {\r\n      if (!tileCoord) {\r\n        return undefined;\r\n      }\r\n      let maxY;\r\n      const z = tileCoord[0];\r\n      if (tileGrid) {\r\n        // The `{-y}` placeholder only works for sources that have a tile grid at construction\r\n        const range = tileGrid.getFullTileRange(z);\r\n        if (range) {\r\n          maxY = range.getHeight() - 1;\r\n        }\r\n      }\r\n      return renderXYZTemplate(template, z, tileCoord[1], tileCoord[2], maxY);\r\n    }\r\n  );\r\n}\r\n\r\n/**\r\n * @param {Array<string>} templates Templates.\r\n * @param {import(\"./tilegrid/TileGrid.js\").default} tileGrid Tile grid.\r\n * @return {import(\"./Tile.js\").UrlFunction} Tile URL function.\r\n */\r\nexport function createFromTemplates(templates, tileGrid) {\r\n  const len = templates.length;\r\n  const tileUrlFunctions = new Array(len);\r\n  for (let i = 0; i < len; ++i) {\r\n    tileUrlFunctions[i] = createFromTemplate(templates[i], tileGrid);\r\n  }\r\n  return createFromTileUrlFunctions(tileUrlFunctions);\r\n}\r\n\r\n/**\r\n * @param {Array<import(\"./Tile.js\").UrlFunction>} tileUrlFunctions Tile URL Functions.\r\n * @return {import(\"./Tile.js\").UrlFunction} Tile URL function.\r\n */\r\nexport function createFromTileUrlFunctions(tileUrlFunctions) {\r\n  if (tileUrlFunctions.length === 1) {\r\n    return tileUrlFunctions[0];\r\n  }\r\n  return (\r\n    /**\r\n     * @param {import(\"./tilecoord.js\").TileCoord} tileCoord Tile Coordinate.\r\n     * @param {number} pixelRatio Pixel ratio.\r\n     * @param {import(\"./proj/Projection.js\").default} projection Projection.\r\n     * @return {string|undefined} Tile URL.\r\n     */\r\n    function (tileCoord, pixelRatio, projection) {\r\n      if (!tileCoord) {\r\n        return undefined;\r\n      }\r\n      const h = tileCoordHash(tileCoord);\r\n      const index = modulo(h, tileUrlFunctions.length);\r\n      return tileUrlFunctions[index](tileCoord, pixelRatio, projection);\r\n    }\r\n  );\r\n}\r\n\r\n/**\r\n * @param {import(\"./tilecoord.js\").TileCoord} tileCoord Tile coordinate.\r\n * @param {number} pixelRatio Pixel ratio.\r\n * @param {import(\"./proj/Projection.js\").default} projection Projection.\r\n * @return {string|undefined} Tile URL.\r\n */\r\nexport function nullTileUrlFunction(tileCoord, pixelRatio, projection) {\r\n  return undefined;\r\n}\r\n","/**\r\n * @module ol/uri\r\n */\r\n\r\nimport {modulo} from './math.js';\r\nimport {hashZXY} from './tilecoord.js';\r\n\r\n/**\r\n * Appends query parameters to a URI.\r\n *\r\n * @param {string} uri The original URI, which may already have query data.\r\n * @param {!Object} params An object where keys are URI-encoded parameter keys,\r\n *     and the values are arbitrary types or arrays.\r\n * @return {string} The new URI.\r\n */\r\nexport function appendParams(uri, params) {\r\n  /** @type {Array<string>} */\r\n  const keyParams = [];\r\n  // Skip any null or undefined parameter values\r\n  Object.keys(params).forEach(function (k) {\r\n    if (params[k] !== null && params[k] !== undefined) {\r\n      keyParams.push(k + '=' + encodeURIComponent(params[k]));\r\n    }\r\n  });\r\n  const qs = keyParams.join('&');\r\n  // remove any trailing ? or &\r\n  uri = uri.replace(/[?&]$/, '');\r\n  // append ? or & depending on whether uri has existing parameters\r\n  uri += uri.includes('?') ? '&' : '?';\r\n  return uri + qs;\r\n}\r\n\r\nconst zRegEx = /\\{z\\}/g;\r\nconst xRegEx = /\\{x\\}/g;\r\nconst yRegEx = /\\{y\\}/g;\r\nconst dashYRegEx = /\\{-y\\}/g;\r\n\r\n/**\r\n * @param {string} template The URL template.  Should have `{x}`, `{y}`, and `{z}` placeholders.  If\r\n * the template has a `{-y}` placeholder, the `maxY` parameter must be supplied.\r\n * @param {number} z The tile z coordinate.\r\n * @param {number} x The tile x coordinate.\r\n * @param {number} y The tile y coordinate.\r\n * @param {number} [maxY] The maximum y coordinate at the given z level.\r\n * @return {string} The URL.\r\n */\r\nexport function renderXYZTemplate(template, z, x, y, maxY) {\r\n  return template\r\n    .replace(zRegEx, z.toString())\r\n    .replace(xRegEx, x.toString())\r\n    .replace(yRegEx, y.toString())\r\n    .replace(dashYRegEx, function () {\r\n      if (maxY === undefined) {\r\n        throw new Error(\r\n          'If the URL template has a {-y} placeholder, the grid extent must be known',\r\n        );\r\n      }\r\n      return (maxY - y).toString();\r\n    });\r\n}\r\n\r\n/**\r\n * @param {Array<string>} urls List of URLs.\r\n * @param {number} z The tile z coordinate.\r\n * @param {number} x The tile x coordinate.\r\n * @param {number} y The tile y coordinate.\r\n * @return {string} The chosen URL.\r\n */\r\nexport function pickUrl(urls, z, x, y) {\r\n  const hash = hashZXY(z, x, y);\r\n  const index = modulo(hash, urls.length);\r\n  return urls[index];\r\n}\r\n\r\n/**\r\n * @param {string} url URL.\r\n * @return {Array<string>} Array of urls.\r\n */\r\nexport function expandUrl(url) {\r\n  const urls = [];\r\n  let match = /\\{([a-z])-([a-z])\\}/.exec(url);\r\n  if (match) {\r\n    // char range\r\n    const startCharCode = match[1].charCodeAt(0);\r\n    const stopCharCode = match[2].charCodeAt(0);\r\n    let charCode;\r\n    for (charCode = startCharCode; charCode <= stopCharCode; ++charCode) {\r\n      urls.push(url.replace(match[0], String.fromCharCode(charCode)));\r\n    }\r\n    return urls;\r\n  }\r\n  match = /\\{(\\d+)-(\\d+)\\}/.exec(url);\r\n  if (match) {\r\n    // number range\r\n    const stop = parseInt(match[2], 10);\r\n    for (let i = parseInt(match[1], 10); i <= stop; i++) {\r\n      urls.push(url.replace(match[0], i.toString()));\r\n    }\r\n    return urls;\r\n  }\r\n  urls.push(url);\r\n  return urls;\r\n}\r\n","/**\r\n * @module ol/source/Tile\r\n */\r\nimport Event from '../events/Event.js';\r\nimport {scale as scaleSize, toSize} from '../size.js';\r\nimport {withinExtentAndZ} from '../tilecoord.js';\r\nimport {\r\n  getForProjection as getTileGridForProjection,\r\n  wrapX,\r\n} from '../tilegrid.js';\r\nimport {abstract, getUid} from '../util.js';\r\nimport Source from './Source.js';\r\n\r\n/***\r\n * @template Return\r\n * @typedef {import(\"../Observable\").OnSignature<import(\"../Observable\").EventTypes, import(\"../events/Event.js\").default, Return> &\r\n *   import(\"../Observable\").OnSignature<import(\"../ObjectEventType\").Types, import(\"../Object\").ObjectEvent, Return> &\r\n *   import(\"../Observable\").OnSignature<import(\"./TileEventType\").TileSourceEventTypes, TileSourceEvent, Return> &\r\n *   import(\"../Observable\").CombinedOnSignature<import(\"../Observable\").EventTypes|import(\"../ObjectEventType\").Types|\r\n *     import(\"./TileEventType\").TileSourceEventTypes, Return>} TileSourceOnSignature\r\n */\r\n\r\n/**\r\n * @typedef {Object} Options\r\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\r\n * @property {boolean} [attributionsCollapsible=true] Attributions are collapsible.\r\n * @property {number} [cacheSize] Deprecated.  Use the cacheSize option on the layer instead.\r\n * @property {number} [tilePixelRatio] TilePixelRatio.\r\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection.\r\n * @property {import(\"./Source.js\").State} [state] State.\r\n * @property {import(\"../tilegrid/TileGrid.js\").default} [tileGrid] TileGrid.\r\n * @property {boolean} [wrapX=false] WrapX.\r\n * @property {number} [transition] Transition.\r\n * @property {string} [key] Key.\r\n * @property {number|import(\"../array.js\").NearestDirectionFunction} [zDirection=0] ZDirection.\r\n * @property {boolean} [interpolate=false] Use interpolated values when resampling.  By default,\r\n * the nearest neighbor is used when resampling.\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * Abstract base class; normally only used for creating subclasses and not\r\n * instantiated in apps.\r\n * Base class for sources providing images divided into a tile grid.\r\n *\r\n * @template {import(\"../Tile.js\").default} [TileType=import(\"../Tile.js\").default]\r\n * @abstract\r\n * @api\r\n */\r\nclass TileSource extends Source {\r\n  /**\r\n   * @param {Options} options SourceTile source options.\r\n   */\r\n  constructor(options) {\r\n    super({\r\n      attributions: options.attributions,\r\n      attributionsCollapsible: options.attributionsCollapsible,\r\n      projection: options.projection,\r\n      state: options.state,\r\n      wrapX: options.wrapX,\r\n      interpolate: options.interpolate,\r\n    });\r\n\r\n    /***\r\n     * @type {TileSourceOnSignature<import(\"../events\").EventsKey>}\r\n     */\r\n    this.on;\r\n\r\n    /***\r\n     * @type {TileSourceOnSignature<import(\"../events\").EventsKey>}\r\n     */\r\n    this.once;\r\n\r\n    /***\r\n     * @type {TileSourceOnSignature<void>}\r\n     */\r\n    this.un;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.tilePixelRatio_ =\r\n      options.tilePixelRatio !== undefined ? options.tilePixelRatio : 1;\r\n\r\n    /**\r\n     * @type {import(\"../tilegrid/TileGrid.js\").default|null}\r\n     * @protected\r\n     */\r\n    this.tileGrid = options.tileGrid !== undefined ? options.tileGrid : null;\r\n\r\n    const tileSize = [256, 256];\r\n    if (this.tileGrid) {\r\n      toSize(this.tileGrid.getTileSize(this.tileGrid.getMinZoom()), tileSize);\r\n    }\r\n\r\n    /**\r\n     * @protected\r\n     * @type {import(\"../size.js\").Size}\r\n     */\r\n    this.tmpSize = [0, 0];\r\n\r\n    /**\r\n     * @private\r\n     * @type {string}\r\n     */\r\n    this.key_ = options.key || getUid(this);\r\n\r\n    /**\r\n     * @protected\r\n     * @type {import(\"../Tile.js\").Options}\r\n     */\r\n    this.tileOptions = {\r\n      transition: options.transition,\r\n      interpolate: options.interpolate,\r\n    };\r\n\r\n    /**\r\n     * zDirection hint, read by the renderer. Indicates which resolution should be used\r\n     * by a renderer if the views resolution does not match any resolution of the tile source.\r\n     * If 0, the nearest resolution will be used. If 1, the nearest lower resolution\r\n     * will be used. If -1, the nearest higher resolution will be used.\r\n     * @type {number|import(\"../array.js\").NearestDirectionFunction}\r\n     */\r\n    this.zDirection = options.zDirection ? options.zDirection : 0;\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\r\n   * @return {number} Gutter.\r\n   */\r\n  getGutterForProjection(projection) {\r\n    return 0;\r\n  }\r\n\r\n  /**\r\n   * Return the key to be used for all tiles in the source.\r\n   * @return {string} The key for all tiles.\r\n   */\r\n  getKey() {\r\n    return this.key_;\r\n  }\r\n\r\n  /**\r\n   * Set the value to be used as the key for all tiles in the source.\r\n   * @param {string} key The key for tiles.\r\n   * @protected\r\n   */\r\n  setKey(key) {\r\n    if (this.key_ !== key) {\r\n      this.key_ = key;\r\n      this.changed();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../proj/Projection\").default} [projection] Projection.\r\n   * @return {Array<number>|null} Resolutions.\r\n   * @override\r\n   */\r\n  getResolutions(projection) {\r\n    const tileGrid = projection\r\n      ? this.getTileGridForProjection(projection)\r\n      : this.tileGrid;\r\n    if (!tileGrid) {\r\n      return null;\r\n    }\r\n    return tileGrid.getResolutions();\r\n  }\r\n\r\n  /**\r\n   * @abstract\r\n   * @param {number} z Tile coordinate z.\r\n   * @param {number} x Tile coordinate x.\r\n   * @param {number} y Tile coordinate y.\r\n   * @param {number} pixelRatio Pixel ratio.\r\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\r\n   * @return {TileType|null} Tile.\r\n   */\r\n  getTile(z, x, y, pixelRatio, projection) {\r\n    return abstract();\r\n  }\r\n\r\n  /**\r\n   * Return the tile grid of the tile source.\r\n   * @return {import(\"../tilegrid/TileGrid.js\").default|null} Tile grid.\r\n   * @api\r\n   */\r\n  getTileGrid() {\r\n    return this.tileGrid;\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\r\n   * @return {!import(\"../tilegrid/TileGrid.js\").default} Tile grid.\r\n   */\r\n  getTileGridForProjection(projection) {\r\n    if (!this.tileGrid) {\r\n      return getTileGridForProjection(projection);\r\n    }\r\n    return this.tileGrid;\r\n  }\r\n\r\n  /**\r\n   * Get the tile pixel ratio for this source. Subclasses may override this\r\n   * method, which is meant to return a supported pixel ratio that matches the\r\n   * provided `pixelRatio` as close as possible.\r\n   * @param {number} pixelRatio Pixel ratio.\r\n   * @return {number} Tile pixel ratio.\r\n   */\r\n  getTilePixelRatio(pixelRatio) {\r\n    return this.tilePixelRatio_;\r\n  }\r\n\r\n  /**\r\n   * @param {number} z Z.\r\n   * @param {number} pixelRatio Pixel ratio.\r\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\r\n   * @return {import(\"../size.js\").Size} Tile size.\r\n   */\r\n  getTilePixelSize(z, pixelRatio, projection) {\r\n    const tileGrid = this.getTileGridForProjection(projection);\r\n    const tilePixelRatio = this.getTilePixelRatio(pixelRatio);\r\n    const tileSize = toSize(tileGrid.getTileSize(z), this.tmpSize);\r\n    if (tilePixelRatio == 1) {\r\n      return tileSize;\r\n    }\r\n    return scaleSize(tileSize, tilePixelRatio, this.tmpSize);\r\n  }\r\n\r\n  /**\r\n   * Returns a tile coordinate wrapped around the x-axis. When the tile coordinate\r\n   * is outside the resolution and extent range of the tile grid, `null` will be\r\n   * returned.\r\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\r\n   * @param {import(\"../proj/Projection.js\").default} [projection] Projection.\r\n   * @return {import(\"../tilecoord.js\").TileCoord} Tile coordinate to be passed to the tileUrlFunction or\r\n   *     null if no tile URL should be created for the passed `tileCoord`.\r\n   */\r\n  getTileCoordForTileUrlFunction(tileCoord, projection) {\r\n    const gridProjection =\r\n      projection !== undefined ? projection : this.getProjection();\r\n    const tileGrid =\r\n      projection !== undefined\r\n        ? this.getTileGridForProjection(gridProjection)\r\n        : this.tileGrid || this.getTileGridForProjection(gridProjection);\r\n    if (this.getWrapX() && gridProjection.isGlobal()) {\r\n      tileCoord = wrapX(tileGrid, tileCoord, gridProjection);\r\n    }\r\n    return withinExtentAndZ(tileCoord, tileGrid) ? tileCoord : null;\r\n  }\r\n\r\n  /**\r\n   * Remove all cached reprojected tiles from the source. The next render cycle will create new tiles.\r\n   * @api\r\n   */\r\n  clear() {}\r\n\r\n  /**\r\n   * @override\r\n   */\r\n  refresh() {\r\n    this.clear();\r\n    super.refresh();\r\n  }\r\n}\r\n\r\n/**\r\n * @classdesc\r\n * Events emitted by {@link module:ol/source/Tile~TileSource} instances are instances of this\r\n * type.\r\n */\r\nexport class TileSourceEvent extends Event {\r\n  /**\r\n   * @param {string} type Type.\r\n   * @param {import(\"../Tile.js\").default} tile The tile.\r\n   */\r\n  constructor(type, tile) {\r\n    super(type);\r\n\r\n    /**\r\n     * The tile related to the event.\r\n     * @type {import(\"../Tile.js\").default}\r\n     * @api\r\n     */\r\n    this.tile = tile;\r\n  }\r\n}\r\n\r\nexport default TileSource;\r\n","/**\r\n * @module ol/source/Source\r\n */\r\nimport BaseObject from '../Object.js';\r\nimport {get as getProjection} from '../proj.js';\r\n\r\n/**\r\n * @typedef {'undefined' | 'loading' | 'ready' | 'error'} State\r\n * State of the source, one of 'undefined', 'loading', 'ready' or 'error'.\r\n */\r\n\r\n/**\r\n * A function that takes a {@link import(\"../View.js\").ViewStateLayerStateExtent} and returns a string or\r\n * an array of strings representing source attributions.\r\n *\r\n * @typedef {function(import(\"../View.js\").ViewStateLayerStateExtent): (string|Array<string>)} Attribution\r\n */\r\n\r\n/**\r\n * A type that can be used to provide attribution information for data sources.\r\n *\r\n * It represents either\r\n * a simple string (e.g. `'© Acme Inc.'`)\r\n * an array of simple strings (e.g. `['© Acme Inc.', '© Bacme Inc.']`)\r\n * a function that returns a string or array of strings ({@link module:ol/source/Source~Attribution})\r\n *\r\n * @typedef {string|Array<string>|Attribution} AttributionLike\r\n */\r\n\r\n/**\r\n * @typedef {Object} Options\r\n * @property {AttributionLike} [attributions] Attributions.\r\n * @property {boolean} [attributionsCollapsible=true] Attributions are collapsible.\r\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection. Default is the view projection.\r\n * @property {import(\"./Source.js\").State} [state='ready'] State.\r\n * @property {boolean} [wrapX=false] WrapX.\r\n * @property {boolean} [interpolate=false] Use interpolated values when resampling.  By default,\r\n * the nearest neighbor is used when resampling.\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * Abstract base class; normally only used for creating subclasses and not\r\n * instantiated in apps.\r\n * Base class for {@link module:ol/layer/Layer~Layer} sources.\r\n *\r\n * A generic `change` event is triggered when the state of the source changes.\r\n * @abstract\r\n * @api\r\n */\r\nclass Source extends BaseObject {\r\n  /**\r\n   * @param {Options} options Source options.\r\n   */\r\n  constructor(options) {\r\n    super();\r\n\r\n    /**\r\n     * @protected\r\n     * @type {import(\"../proj/Projection.js\").default|null}\r\n     */\r\n    this.projection = getProjection(options.projection);\r\n\r\n    /**\r\n     * @private\r\n     * @type {?Attribution}\r\n     */\r\n    this.attributions_ = adaptAttributions(options.attributions);\r\n\r\n    /**\r\n     * @private\r\n     * @type {boolean}\r\n     */\r\n    this.attributionsCollapsible_ = options.attributionsCollapsible ?? true;\r\n\r\n    /**\r\n     * This source is currently loading data. Sources that defer loading to the\r\n     * map's tile queue never set this to `true`.\r\n     * @type {boolean}\r\n     */\r\n    this.loading = false;\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"./Source.js\").State}\r\n     */\r\n    this.state_ = options.state !== undefined ? options.state : 'ready';\r\n\r\n    /**\r\n     * @private\r\n     * @type {boolean}\r\n     */\r\n    this.wrapX_ = options.wrapX !== undefined ? options.wrapX : false;\r\n\r\n    /**\r\n     * @private\r\n     * @type {boolean}\r\n     */\r\n    this.interpolate_ = !!options.interpolate;\r\n\r\n    /**\r\n     * @protected\r\n     * @type {function(import(\"../View.js\").ViewOptions):void}\r\n     */\r\n    this.viewResolver = null;\r\n\r\n    /**\r\n     * @protected\r\n     * @type {function(Error):void}\r\n     */\r\n    this.viewRejector = null;\r\n\r\n    const self = this;\r\n    /**\r\n     * @private\r\n     * @type {Promise<import(\"../View.js\").ViewOptions>}\r\n     */\r\n    this.viewPromise_ = new Promise(function (resolve, reject) {\r\n      self.viewResolver = resolve;\r\n      self.viewRejector = reject;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Get the attribution function for the source.\r\n   * @return {?Attribution} Attribution function.\r\n   * @api\r\n   */\r\n  getAttributions() {\r\n    return this.attributions_;\r\n  }\r\n\r\n  /**\r\n   * @return {boolean} Attributions are collapsible.\r\n   * @api\r\n   */\r\n  getAttributionsCollapsible() {\r\n    return this.attributionsCollapsible_;\r\n  }\r\n\r\n  /**\r\n   * Get the projection of the source.\r\n   * @return {import(\"../proj/Projection.js\").default|null} Projection.\r\n   * @api\r\n   */\r\n  getProjection() {\r\n    return this.projection;\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../proj/Projection\").default} [projection] Projection.\r\n   * @return {Array<number>|null} Resolutions.\r\n   */\r\n  getResolutions(projection) {\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * @return {Promise<import(\"../View.js\").ViewOptions>} A promise for view-related properties.\r\n   */\r\n  getView() {\r\n    return this.viewPromise_;\r\n  }\r\n\r\n  /**\r\n   * Get the state of the source, see {@link import(\"./Source.js\").State} for possible states.\r\n   * @return {import(\"./Source.js\").State} State.\r\n   * @api\r\n   */\r\n  getState() {\r\n    return this.state_;\r\n  }\r\n\r\n  /**\r\n   * @return {boolean|undefined} Wrap X.\r\n   */\r\n  getWrapX() {\r\n    return this.wrapX_;\r\n  }\r\n\r\n  /**\r\n   * @return {boolean} Use linear interpolation when resampling.\r\n   */\r\n  getInterpolate() {\r\n    return this.interpolate_;\r\n  }\r\n\r\n  /**\r\n   * Refreshes the source. The source will be cleared, and data from the server will be reloaded.\r\n   * @api\r\n   */\r\n  refresh() {\r\n    this.changed();\r\n  }\r\n\r\n  /**\r\n   * Set the attributions of the source.\r\n   * @param {AttributionLike|undefined} attributions Attributions.\r\n   *     Can be passed as `string`, `Array<string>`, {@link module:ol/source/Source~Attribution},\r\n   *     or `undefined`.\r\n   * @api\r\n   */\r\n  setAttributions(attributions) {\r\n    this.attributions_ = adaptAttributions(attributions);\r\n    this.changed();\r\n  }\r\n\r\n  /**\r\n   * Set the state of the source.\r\n   * @param {import(\"./Source.js\").State} state State.\r\n   */\r\n  setState(state) {\r\n    this.state_ = state;\r\n    this.changed();\r\n  }\r\n}\r\n\r\n/**\r\n * Turns the attributions option into an attributions function.\r\n * @param {AttributionLike|undefined} attributionLike The attribution option.\r\n * @return {Attribution|null} An attribution function (or null).\r\n */\r\nfunction adaptAttributions(attributionLike) {\r\n  if (!attributionLike) {\r\n    return null;\r\n  }\r\n  if (typeof attributionLike === 'function') {\r\n    return attributionLike;\r\n  }\r\n  if (!Array.isArray(attributionLike)) {\r\n    attributionLike = [attributionLike];\r\n  }\r\n  return (frameState) => attributionLike;\r\n}\r\n\r\nexport default Source;\r\n","/**\r\n * @module ol/source/TileEventType\r\n */\r\n\r\n/**\r\n * @enum {string}\r\n */\r\nexport default {\r\n  /**\r\n   * Triggered when a tile starts loading.\r\n   * @event module:ol/source/Tile.TileSourceEvent#tileloadstart\r\n   * @api\r\n   */\r\n  TILELOADSTART: 'tileloadstart',\r\n\r\n  /**\r\n   * Triggered when a tile finishes loading, either when its data is loaded,\r\n   * or when loading was aborted because the tile is no longer needed.\r\n   * @event module:ol/source/Tile.TileSourceEvent#tileloadend\r\n   * @api\r\n   */\r\n  TILELOADEND: 'tileloadend',\r\n\r\n  /**\r\n   * Triggered if tile loading results in an error. Note that this is not the\r\n   * right place to re-fetch tiles. See {@link module:ol/ImageTile~ImageTile#load}\r\n   * for details.\r\n   * @event module:ol/source/Tile.TileSourceEvent#tileloaderror\r\n   * @api\r\n   */\r\n  TILELOADERROR: 'tileloaderror',\r\n};\r\n\r\n/**\r\n * @typedef {'tileloadstart'|'tileloadend'|'tileloaderror'} TileSourceEventTypes\r\n */\r\n","/**\r\n * @module ol/layer/Vector\r\n */\r\nimport CanvasVectorLayerRenderer from '../renderer/canvas/VectorLayer.js';\r\nimport BaseVectorLayer from './BaseVector.js';\r\n\r\n/**\r\n * @template {import(\"../source/Vector.js\").default<FeatureType>} [VectorSourceType=import(\"../source/Vector.js\").default<*>]\r\n * @template {import('../Feature.js').FeatureLike} [FeatureType=import(\"./BaseVector.js\").ExtractedFeatureType<VectorSourceType>]\r\n * @typedef {Object} Options\r\n * @property {string} [className='ol-layer'] A CSS class name to set to the layer element.\r\n * @property {number} [opacity=1] Opacity (0, 1).\r\n * @property {boolean} [visible=true] Visibility.\r\n * @property {import(\"../extent.js\").Extent} [extent] The bounding extent for layer rendering.  The layer will not be\r\n * rendered outside of this extent.\r\n * @property {number} [zIndex] The z-index for layer rendering.  At rendering time, the layers\r\n * will be ordered, first by Z-index and then by position. When `undefined`, a `zIndex` of 0 is assumed\r\n * for layers that are added to the map's `layers` collection, or `Infinity` when the layer's `setMap()`\r\n * method was used.\r\n * @property {number} [minResolution] The minimum resolution (inclusive) at which this layer will be\r\n * visible.\r\n * @property {number} [maxResolution] The maximum resolution (exclusive) below which this layer will\r\n * be visible.\r\n * @property {number} [minZoom] The minimum view zoom level (exclusive) above which this layer will be\r\n * visible.\r\n * @property {number} [maxZoom] The maximum view zoom level (inclusive) at which this layer will\r\n * be visible.\r\n * @property {import(\"../render.js\").OrderFunction} [renderOrder] Render order. Function to be used when sorting\r\n * features before rendering. By default features are drawn in the order that they are created. Use\r\n * `null` to avoid the sort, but get an undefined draw order.\r\n * @property {number} [renderBuffer=100] The buffer in pixels around the viewport extent used by the\r\n * renderer when getting features from the vector source for the rendering or hit-detection.\r\n * Recommended value: the size of the largest symbol, line width or label.\r\n * @property {VectorSourceType} [source] Source.\r\n * @property {import(\"../Map.js\").default} [map] Sets the layer as overlay on a map. The map will not manage\r\n * this layer in its layers collection, and the layer will be rendered on top. This is useful for\r\n * temporary layers. The standard way to add a layer to a map and have it managed by the map is to\r\n * use [map.addLayer()]{@link import(\"../Map.js\").default#addLayer}.\r\n * @property {boolean|string|number} [declutter=false] Declutter images and text. Any truthy value will enable\r\n * decluttering. Within a layer, a feature rendered before another has higher priority. All layers with the\r\n * same `declutter` value will be decluttered together. The priority is determined by the drawing order of the\r\n * layers with the same `declutter` value. Higher in the layer stack means higher priority. To declutter distinct\r\n * layers or groups of layers separately, use different truthy values for `declutter`.\r\n * @property {import(\"../style/Style.js\").StyleLike|import(\"../style/flat.js\").FlatStyleLike|null} [style] Layer style. When set to `null`, only\r\n * features that have their own style will be rendered. See {@link module:ol/style/Style~Style} for the default style\r\n * which will be used if this is not set.\r\n * @property {import(\"./Base.js\").BackgroundColor} [background] Background color for the layer. If not specified, no background\r\n * will be rendered.\r\n * @property {boolean} [updateWhileAnimating=false] When set to `true`, feature batches will\r\n * be recreated during animations. This means that no vectors will be shown clipped, but the\r\n * setting will have a performance impact for large amounts of vector data. When set to `false`,\r\n * batches will be recreated when no animation is active.\r\n * @property {boolean} [updateWhileInteracting=false] When set to `true`, feature batches will\r\n * be recreated during interactions. See also `updateWhileAnimating`.\r\n * @property {Object<string, *>} [properties] Arbitrary observable properties. Can be accessed with `#get()` and `#set()`.\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * Vector data is rendered client-side, as vectors. This layer type provides most accurate rendering\r\n * even during animations. Points and labels stay upright on rotated views. For very large\r\n * amounts of vector data, performance may suffer during pan and zoom animations. In this case,\r\n * try {@link module:ol/layer/VectorImage~VectorImageLayer}.\r\n *\r\n * Note that any property set in the options is set as a {@link module:ol/Object~BaseObject}\r\n * property on the layer object; for example, setting `title: 'My Title'` in the\r\n * options means that `title` is observable, and has get/set accessors.\r\n *\r\n * @template {import(\"../source/Vector.js\").default<FeatureType>} [VectorSourceType=import(\"../source/Vector.js\").default<*>]\r\n * @template {import('../Feature.js').FeatureLike} [FeatureType=import(\"./BaseVector.js\").ExtractedFeatureType<VectorSourceType>]\r\n * @extends {BaseVectorLayer<FeatureType, VectorSourceType, CanvasVectorLayerRenderer>}\r\n * @api\r\n */\r\nclass VectorLayer extends BaseVectorLayer {\r\n  /**\r\n   * @param {Options<VectorSourceType, FeatureType>} [options] Options.\r\n   */\r\n  constructor(options) {\r\n    super(options);\r\n  }\r\n\r\n  /**\r\n   * @override\r\n   */\r\n  createRenderer() {\r\n    return new CanvasVectorLayerRenderer(this);\r\n  }\r\n}\r\n\r\nexport default VectorLayer;\r\n","/**\r\n * @module ol/renderer/canvas/VectorLayer\r\n */\r\nimport ViewHint from '../../ViewHint.js';\r\nimport {equals} from '../../array.js';\r\nimport {wrapX as wrapCoordinateX} from '../../coordinate.js';\r\nimport {createCanvasContext2D, releaseCanvas} from '../../dom.js';\r\nimport {\r\n  buffer,\r\n  containsExtent,\r\n  createEmpty,\r\n  getHeight,\r\n  getWidth,\r\n  intersects as intersectsExtent,\r\n  wrapX as wrapExtentX,\r\n} from '../../extent.js';\r\nimport {\r\n  fromUserExtent,\r\n  getTransformFromProjections,\r\n  getUserProjection,\r\n  toUserExtent,\r\n  toUserResolution,\r\n} from '../../proj.js';\r\nimport RenderEventType from '../../render/EventType.js';\r\nimport CanvasBuilderGroup from '../../render/canvas/BuilderGroup.js';\r\nimport ExecutorGroup, {\r\n  ALL,\r\n  DECLUTTER,\r\n  NON_DECLUTTER,\r\n} from '../../render/canvas/ExecutorGroup.js';\r\nimport {\r\n  HIT_DETECT_RESOLUTION,\r\n  createHitDetectionImageData,\r\n  hitDetect,\r\n} from '../../render/canvas/hitdetect.js';\r\nimport {getUid} from '../../util.js';\r\nimport {\r\n  defaultOrder as defaultRenderOrder,\r\n  getSquaredTolerance as getSquaredRenderTolerance,\r\n  getTolerance as getRenderTolerance,\r\n  renderFeature,\r\n} from '../vector.js';\r\nimport CanvasLayerRenderer, {canvasPool} from './Layer.js';\r\n\r\n/**\r\n * @classdesc\r\n * Canvas renderer for vector layers.\r\n * @api\r\n */\r\nclass CanvasVectorLayerRenderer extends CanvasLayerRenderer {\r\n  /**\r\n   * @param {import(\"../../layer/BaseVector.js\").default} vectorLayer Vector layer.\r\n   */\r\n  constructor(vectorLayer) {\r\n    super(vectorLayer);\r\n\r\n    /** @private */\r\n    this.boundHandleStyleImageChange_ = this.handleStyleImageChange_.bind(this);\r\n\r\n    /**\r\n     * @private\r\n     * @type {boolean}\r\n     */\r\n    this.animatingOrInteracting_;\r\n\r\n    /**\r\n     * @private\r\n     * @type {ImageData|null}\r\n     */\r\n    this.hitDetectionImageData_ = null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {boolean}\r\n     */\r\n    this.clipped_ = false;\r\n\r\n    /**\r\n     * @private\r\n     * @type {Array<import(\"../../Feature.js\").default>}\r\n     */\r\n    this.renderedFeatures_ = null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.renderedRevision_ = -1;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.renderedResolution_ = NaN;\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"../../extent.js\").Extent}\r\n     */\r\n    this.renderedExtent_ = createEmpty();\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"../../extent.js\").Extent}\r\n     */\r\n    this.wrappedRenderedExtent_ = createEmpty();\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.renderedRotation_;\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"../../coordinate\").Coordinate}\r\n     */\r\n    this.renderedCenter_ = null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"../../proj/Projection\").default}\r\n     */\r\n    this.renderedProjection_ = null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.renderedPixelRatio_ = 1;\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"../../render.js\").OrderFunction|null}\r\n     */\r\n    this.renderedRenderOrder_ = null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {boolean}\r\n     */\r\n    this.renderedFrameDeclutter_;\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"../../render/canvas/ExecutorGroup\").default}\r\n     */\r\n    this.replayGroup_ = null;\r\n\r\n    /**\r\n     * A new replay group had to be created by `prepareFrame()`\r\n     * @type {boolean}\r\n     */\r\n    this.replayGroupChanged = true;\r\n\r\n    /**\r\n     * Clipping to be performed by `renderFrame()`\r\n     * @type {boolean}\r\n     */\r\n    this.clipping = true;\r\n\r\n    /**\r\n     * @private\r\n     * @type {CanvasRenderingContext2D}\r\n     */\r\n    this.targetContext_ = null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.opacity_ = 1;\r\n  }\r\n\r\n  /**\r\n   * @param {ExecutorGroup} executorGroup Executor group.\r\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\r\n   * @param {boolean} [declutterable] `true` to only render declutterable items,\r\n   *     `false` to only render non-declutterable items, `undefined` to render all.\r\n   */\r\n  renderWorlds(executorGroup, frameState, declutterable) {\r\n    const extent = frameState.extent;\r\n    const viewState = frameState.viewState;\r\n    const center = viewState.center;\r\n    const resolution = viewState.resolution;\r\n    const projection = viewState.projection;\r\n    const rotation = viewState.rotation;\r\n    const projectionExtent = projection.getExtent();\r\n    const vectorSource = this.getLayer().getSource();\r\n    const declutter = this.getLayer().getDeclutter();\r\n    const pixelRatio = frameState.pixelRatio;\r\n    const viewHints = frameState.viewHints;\r\n    const snapToPixel = !(\r\n      viewHints[ViewHint.ANIMATING] || viewHints[ViewHint.INTERACTING]\r\n    );\r\n    const context = this.context;\r\n    const width = Math.round((getWidth(extent) / resolution) * pixelRatio);\r\n    const height = Math.round((getHeight(extent) / resolution) * pixelRatio);\r\n\r\n    const multiWorld = vectorSource.getWrapX() && projection.canWrapX();\r\n    const worldWidth = multiWorld ? getWidth(projectionExtent) : null;\r\n    const endWorld = multiWorld\r\n      ? Math.ceil((extent[2] - projectionExtent[2]) / worldWidth) + 1\r\n      : 1;\r\n    let world = multiWorld\r\n      ? Math.floor((extent[0] - projectionExtent[0]) / worldWidth)\r\n      : 0;\r\n    do {\r\n      let transform = this.getRenderTransform(\r\n        center,\r\n        resolution,\r\n        0,\r\n        pixelRatio,\r\n        width,\r\n        height,\r\n        world * worldWidth,\r\n      );\r\n      if (frameState.declutter) {\r\n        transform = transform.slice(0);\r\n      }\r\n      executorGroup.execute(\r\n        context,\r\n        [context.canvas.width, context.canvas.height],\r\n        transform,\r\n        rotation,\r\n        snapToPixel,\r\n        declutterable === undefined\r\n          ? ALL\r\n          : declutterable\r\n            ? DECLUTTER\r\n            : NON_DECLUTTER,\r\n        declutterable\r\n          ? declutter && frameState.declutter[declutter]\r\n          : undefined,\r\n      );\r\n    } while (++world < endWorld);\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  setDrawContext_() {\r\n    if (this.opacity_ !== 1) {\r\n      this.targetContext_ = this.context;\r\n      this.context = createCanvasContext2D(\r\n        this.context.canvas.width,\r\n        this.context.canvas.height,\r\n        canvasPool,\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  resetDrawContext_() {\r\n    if (this.opacity_ !== 1) {\r\n      const alpha = this.targetContext_.globalAlpha;\r\n      this.targetContext_.globalAlpha = this.opacity_;\r\n      this.targetContext_.drawImage(this.context.canvas, 0, 0);\r\n      this.targetContext_.globalAlpha = alpha;\r\n      releaseCanvas(this.context);\r\n      canvasPool.push(this.context.canvas);\r\n      this.context = this.targetContext_;\r\n      this.targetContext_ = null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Render declutter items for this layer\r\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\r\n   */\r\n  renderDeclutter(frameState) {\r\n    if (!this.replayGroup_ || !this.getLayer().getDeclutter()) {\r\n      return;\r\n    }\r\n    this.renderWorlds(this.replayGroup_, frameState, true);\r\n  }\r\n\r\n  /**\r\n   * Render deferred instructions.\r\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\r\n   * @override\r\n   */\r\n  renderDeferredInternal(frameState) {\r\n    if (!this.replayGroup_) {\r\n      return;\r\n    }\r\n    this.replayGroup_.renderDeferred();\r\n    if (this.clipped_) {\r\n      this.context.restore();\r\n    }\r\n    this.resetDrawContext_();\r\n  }\r\n\r\n  /**\r\n   * Render the layer.\r\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\r\n   * @param {HTMLElement|null} target Target that may be used to render content to.\r\n   * @return {HTMLElement} The rendered element.\r\n   * @override\r\n   */\r\n  renderFrame(frameState, target) {\r\n    const layerState = frameState.layerStatesArray[frameState.layerIndex];\r\n    this.opacity_ = layerState.opacity;\r\n    const viewState = frameState.viewState;\r\n\r\n    this.prepareContainer(frameState, target);\r\n    const context = this.context;\r\n\r\n    const replayGroup = this.replayGroup_;\r\n    let render = replayGroup && !replayGroup.isEmpty();\r\n    if (!render) {\r\n      const hasRenderListeners =\r\n        this.getLayer().hasListener(RenderEventType.PRERENDER) ||\r\n        this.getLayer().hasListener(RenderEventType.POSTRENDER);\r\n      if (!hasRenderListeners) {\r\n        return this.container;\r\n      }\r\n    }\r\n\r\n    this.setDrawContext_();\r\n\r\n    this.preRender(context, frameState);\r\n\r\n    const projection = viewState.projection;\r\n\r\n    // clipped rendering if layer extent is set\r\n    this.clipped_ = false;\r\n    if (render && layerState.extent && this.clipping) {\r\n      const layerExtent = fromUserExtent(layerState.extent, projection);\r\n      render = intersectsExtent(layerExtent, frameState.extent);\r\n      this.clipped_ = render && !containsExtent(layerExtent, frameState.extent);\r\n      if (this.clipped_) {\r\n        this.clipUnrotated(context, frameState, layerExtent);\r\n      }\r\n    }\r\n\r\n    if (render) {\r\n      this.renderWorlds(\r\n        replayGroup,\r\n        frameState,\r\n        this.getLayer().getDeclutter() ? false : undefined,\r\n      );\r\n    }\r\n\r\n    if (!frameState.declutter && this.clipped_) {\r\n      context.restore();\r\n    }\r\n\r\n    this.postRender(context, frameState);\r\n\r\n    if (this.renderedRotation_ !== viewState.rotation) {\r\n      this.renderedRotation_ = viewState.rotation;\r\n      this.hitDetectionImageData_ = null;\r\n    }\r\n    if (!frameState.declutter) {\r\n      this.resetDrawContext_();\r\n    }\r\n    return this.container;\r\n  }\r\n\r\n  /**\r\n   * Asynchronous layer level hit detection.\r\n   * @param {import(\"../../pixel.js\").Pixel} pixel Pixel.\r\n   * @return {Promise<Array<import(\"../../Feature\").default>>} Promise\r\n   * that resolves with an array of features.\r\n   * @override\r\n   */\r\n  getFeatures(pixel) {\r\n    return new Promise((resolve) => {\r\n      if (\r\n        this.frameState &&\r\n        !this.hitDetectionImageData_ &&\r\n        !this.animatingOrInteracting_\r\n      ) {\r\n        const size = this.frameState.size.slice();\r\n        const center = this.renderedCenter_;\r\n        const resolution = this.renderedResolution_;\r\n        const rotation = this.renderedRotation_;\r\n        const projection = this.renderedProjection_;\r\n        const extent = this.wrappedRenderedExtent_;\r\n        const layer = this.getLayer();\r\n        const transforms = [];\r\n        const width = size[0] * HIT_DETECT_RESOLUTION;\r\n        const height = size[1] * HIT_DETECT_RESOLUTION;\r\n        transforms.push(\r\n          this.getRenderTransform(\r\n            center,\r\n            resolution,\r\n            rotation,\r\n            HIT_DETECT_RESOLUTION,\r\n            width,\r\n            height,\r\n            0,\r\n          ).slice(),\r\n        );\r\n        const source = layer.getSource();\r\n        const projectionExtent = projection.getExtent();\r\n        if (\r\n          source.getWrapX() &&\r\n          projection.canWrapX() &&\r\n          !containsExtent(projectionExtent, extent)\r\n        ) {\r\n          let startX = extent[0];\r\n          const worldWidth = getWidth(projectionExtent);\r\n          let world = 0;\r\n          let offsetX;\r\n          while (startX < projectionExtent[0]) {\r\n            --world;\r\n            offsetX = worldWidth * world;\r\n            transforms.push(\r\n              this.getRenderTransform(\r\n                center,\r\n                resolution,\r\n                rotation,\r\n                HIT_DETECT_RESOLUTION,\r\n                width,\r\n                height,\r\n                offsetX,\r\n              ).slice(),\r\n            );\r\n            startX += worldWidth;\r\n          }\r\n          world = 0;\r\n          startX = extent[2];\r\n          while (startX > projectionExtent[2]) {\r\n            ++world;\r\n            offsetX = worldWidth * world;\r\n            transforms.push(\r\n              this.getRenderTransform(\r\n                center,\r\n                resolution,\r\n                rotation,\r\n                HIT_DETECT_RESOLUTION,\r\n                width,\r\n                height,\r\n                offsetX,\r\n              ).slice(),\r\n            );\r\n            startX -= worldWidth;\r\n          }\r\n        }\r\n        const userProjection = getUserProjection();\r\n        this.hitDetectionImageData_ = createHitDetectionImageData(\r\n          size,\r\n          transforms,\r\n          this.renderedFeatures_,\r\n          layer.getStyleFunction(),\r\n          extent,\r\n          resolution,\r\n          rotation,\r\n          getSquaredRenderTolerance(resolution, this.renderedPixelRatio_),\r\n          userProjection ? projection : null,\r\n        );\r\n      }\r\n      resolve(\r\n        hitDetect(pixel, this.renderedFeatures_, this.hitDetectionImageData_),\r\n      );\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../../coordinate.js\").Coordinate} coordinate Coordinate.\r\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\r\n   * @param {number} hitTolerance Hit tolerance in pixels.\r\n   * @param {import(\"../vector.js\").FeatureCallback<T>} callback Feature callback.\r\n   * @param {Array<import(\"../Map.js\").HitMatch<T>>} matches The hit detected matches with tolerance.\r\n   * @return {T|undefined} Callback result.\r\n   * @template T\r\n   * @override\r\n   */\r\n  forEachFeatureAtCoordinate(\r\n    coordinate,\r\n    frameState,\r\n    hitTolerance,\r\n    callback,\r\n    matches,\r\n  ) {\r\n    if (!this.replayGroup_) {\r\n      return undefined;\r\n    }\r\n    const resolution = frameState.viewState.resolution;\r\n    const rotation = frameState.viewState.rotation;\r\n    const layer = this.getLayer();\r\n\r\n    /** @type {!Object<string, import(\"../Map.js\").HitMatch<T>|true>} */\r\n    const features = {};\r\n\r\n    /**\r\n     * @param {import(\"../../Feature.js\").FeatureLike} feature Feature.\r\n     * @param {import(\"../../geom/SimpleGeometry.js\").default} geometry Geometry.\r\n     * @param {number} distanceSq The squared distance to the click position\r\n     * @return {T|undefined} Callback result.\r\n     */\r\n    const featureCallback = function (feature, geometry, distanceSq) {\r\n      const key = getUid(feature);\r\n      const match = features[key];\r\n      if (!match) {\r\n        if (distanceSq === 0) {\r\n          features[key] = true;\r\n          return callback(feature, layer, geometry);\r\n        }\r\n        matches.push(\r\n          (features[key] = {\r\n            feature: feature,\r\n            layer: layer,\r\n            geometry: geometry,\r\n            distanceSq: distanceSq,\r\n            callback: callback,\r\n          }),\r\n        );\r\n      } else if (match !== true && distanceSq < match.distanceSq) {\r\n        if (distanceSq === 0) {\r\n          features[key] = true;\r\n          matches.splice(matches.lastIndexOf(match), 1);\r\n          return callback(feature, layer, geometry);\r\n        }\r\n        match.geometry = geometry;\r\n        match.distanceSq = distanceSq;\r\n      }\r\n      return undefined;\r\n    };\r\n\r\n    const declutter = this.getLayer().getDeclutter();\r\n    return this.replayGroup_.forEachFeatureAtCoordinate(\r\n      coordinate,\r\n      resolution,\r\n      rotation,\r\n      hitTolerance,\r\n      featureCallback,\r\n      declutter\r\n        ? frameState.declutter?.[declutter]?.all().map((item) => item.value)\r\n        : null,\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Perform action necessary to get the layer rendered after new fonts have loaded\r\n   * @override\r\n   */\r\n  handleFontsChanged() {\r\n    const layer = this.getLayer();\r\n    if (layer.getVisible() && this.replayGroup_) {\r\n      layer.changed();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handle changes in image style state.\r\n   * @param {import(\"../../events/Event.js\").default} event Image style change event.\r\n   * @private\r\n   */\r\n  handleStyleImageChange_(event) {\r\n    this.renderIfReadyAndVisible();\r\n  }\r\n\r\n  /**\r\n   * Determine whether render should be called.\r\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\r\n   * @return {boolean} Layer is ready to be rendered.\r\n   * @override\r\n   */\r\n  prepareFrame(frameState) {\r\n    const vectorLayer = this.getLayer();\r\n    const vectorSource = vectorLayer.getSource();\r\n    if (!vectorSource) {\r\n      return false;\r\n    }\r\n\r\n    const animating = frameState.viewHints[ViewHint.ANIMATING];\r\n    const interacting = frameState.viewHints[ViewHint.INTERACTING];\r\n    const updateWhileAnimating = vectorLayer.getUpdateWhileAnimating();\r\n    const updateWhileInteracting = vectorLayer.getUpdateWhileInteracting();\r\n\r\n    if (\r\n      (this.ready && !updateWhileAnimating && animating) ||\r\n      (!updateWhileInteracting && interacting)\r\n    ) {\r\n      this.animatingOrInteracting_ = true;\r\n      return true;\r\n    }\r\n    this.animatingOrInteracting_ = false;\r\n\r\n    const frameStateExtent = frameState.extent;\r\n    const viewState = frameState.viewState;\r\n    const projection = viewState.projection;\r\n    const resolution = viewState.resolution;\r\n    const pixelRatio = frameState.pixelRatio;\r\n    const vectorLayerRevision = vectorLayer.getRevision();\r\n    const vectorLayerRenderBuffer = vectorLayer.getRenderBuffer();\r\n    let vectorLayerRenderOrder = vectorLayer.getRenderOrder();\r\n\r\n    if (vectorLayerRenderOrder === undefined) {\r\n      vectorLayerRenderOrder = defaultRenderOrder;\r\n    }\r\n\r\n    const center = viewState.center.slice();\r\n    const extent = buffer(\r\n      frameStateExtent,\r\n      vectorLayerRenderBuffer * resolution,\r\n    );\r\n    const renderedExtent = extent.slice();\r\n    const loadExtents = [extent.slice()];\r\n    const projectionExtent = projection.getExtent();\r\n\r\n    if (\r\n      vectorSource.getWrapX() &&\r\n      projection.canWrapX() &&\r\n      !containsExtent(projectionExtent, frameState.extent)\r\n    ) {\r\n      // For the replay group, we need an extent that intersects the real world\r\n      // (-180° to +180°). To support geometries in a coordinate range from -540°\r\n      // to +540°, we add at least 1 world width on each side of the projection\r\n      // extent. If the viewport is wider than the world, we need to add half of\r\n      // the viewport width to make sure we cover the whole viewport.\r\n      const worldWidth = getWidth(projectionExtent);\r\n      const gutter = Math.max(getWidth(extent) / 2, worldWidth);\r\n      extent[0] = projectionExtent[0] - gutter;\r\n      extent[2] = projectionExtent[2] + gutter;\r\n      wrapCoordinateX(center, projection);\r\n      const loadExtent = wrapExtentX(loadExtents[0], projection);\r\n      // If the extent crosses the date line, we load data for both edges of the worlds\r\n      if (\r\n        loadExtent[0] < projectionExtent[0] &&\r\n        loadExtent[2] < projectionExtent[2]\r\n      ) {\r\n        loadExtents.push([\r\n          loadExtent[0] + worldWidth,\r\n          loadExtent[1],\r\n          loadExtent[2] + worldWidth,\r\n          loadExtent[3],\r\n        ]);\r\n      } else if (\r\n        loadExtent[0] > projectionExtent[0] &&\r\n        loadExtent[2] > projectionExtent[2]\r\n      ) {\r\n        loadExtents.push([\r\n          loadExtent[0] - worldWidth,\r\n          loadExtent[1],\r\n          loadExtent[2] - worldWidth,\r\n          loadExtent[3],\r\n        ]);\r\n      }\r\n    }\r\n\r\n    if (\r\n      this.ready &&\r\n      this.renderedResolution_ == resolution &&\r\n      this.renderedRevision_ == vectorLayerRevision &&\r\n      this.renderedRenderOrder_ == vectorLayerRenderOrder &&\r\n      this.renderedFrameDeclutter_ === !!frameState.declutter &&\r\n      containsExtent(this.wrappedRenderedExtent_, extent)\r\n    ) {\r\n      if (!equals(this.renderedExtent_, renderedExtent)) {\r\n        this.hitDetectionImageData_ = null;\r\n        this.renderedExtent_ = renderedExtent;\r\n      }\r\n      this.renderedCenter_ = center;\r\n      this.replayGroupChanged = false;\r\n      return true;\r\n    }\r\n\r\n    this.replayGroup_ = null;\r\n\r\n    const replayGroup = new CanvasBuilderGroup(\r\n      getRenderTolerance(resolution, pixelRatio),\r\n      extent,\r\n      resolution,\r\n      pixelRatio,\r\n    );\r\n\r\n    const userProjection = getUserProjection();\r\n    let userTransform;\r\n    if (userProjection) {\r\n      for (let i = 0, ii = loadExtents.length; i < ii; ++i) {\r\n        const extent = loadExtents[i];\r\n        const userExtent = toUserExtent(extent, projection);\r\n        vectorSource.loadFeatures(\r\n          userExtent,\r\n          toUserResolution(resolution, projection),\r\n          userProjection,\r\n        );\r\n      }\r\n      userTransform = getTransformFromProjections(userProjection, projection);\r\n    } else {\r\n      for (let i = 0, ii = loadExtents.length; i < ii; ++i) {\r\n        vectorSource.loadFeatures(loadExtents[i], resolution, projection);\r\n      }\r\n    }\r\n\r\n    const squaredTolerance = getSquaredRenderTolerance(resolution, pixelRatio);\r\n    let ready = true;\r\n    const render =\r\n      /**\r\n       * @param {import(\"../../Feature.js\").default} feature Feature.\r\n       * @param {number} index Index.\r\n       */\r\n      (feature, index) => {\r\n        let styles;\r\n        const styleFunction =\r\n          feature.getStyleFunction() || vectorLayer.getStyleFunction();\r\n        if (styleFunction) {\r\n          styles = styleFunction(feature, resolution);\r\n        }\r\n        if (styles) {\r\n          const dirty = this.renderFeature(\r\n            feature,\r\n            squaredTolerance,\r\n            styles,\r\n            replayGroup,\r\n            userTransform,\r\n            this.getLayer().getDeclutter(),\r\n            index,\r\n          );\r\n          ready = ready && !dirty;\r\n        }\r\n      };\r\n\r\n    const userExtent = toUserExtent(extent, projection);\r\n    /** @type {Array<import(\"../../Feature.js\").default>} */\r\n    const features = vectorSource.getFeaturesInExtent(userExtent);\r\n    if (vectorLayerRenderOrder) {\r\n      features.sort(vectorLayerRenderOrder);\r\n    }\r\n    for (let i = 0, ii = features.length; i < ii; ++i) {\r\n      render(features[i], i);\r\n    }\r\n    this.renderedFeatures_ = features;\r\n    this.ready = ready;\r\n\r\n    const replayGroupInstructions = replayGroup.finish();\r\n    const executorGroup = new ExecutorGroup(\r\n      extent,\r\n      resolution,\r\n      pixelRatio,\r\n      vectorSource.getOverlaps(),\r\n      replayGroupInstructions,\r\n      vectorLayer.getRenderBuffer(),\r\n      !!frameState.declutter,\r\n    );\r\n\r\n    this.renderedResolution_ = resolution;\r\n    this.renderedRevision_ = vectorLayerRevision;\r\n    this.renderedRenderOrder_ = vectorLayerRenderOrder;\r\n    this.renderedFrameDeclutter_ = !!frameState.declutter;\r\n    this.renderedExtent_ = renderedExtent;\r\n    this.wrappedRenderedExtent_ = extent;\r\n    this.renderedCenter_ = center;\r\n    this.renderedProjection_ = projection;\r\n    this.renderedPixelRatio_ = pixelRatio;\r\n    this.replayGroup_ = executorGroup;\r\n    this.hitDetectionImageData_ = null;\r\n\r\n    this.replayGroupChanged = true;\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../../Feature.js\").default} feature Feature.\r\n   * @param {number} squaredTolerance Squared render tolerance.\r\n   * @param {import(\"../../style/Style.js\").default|Array<import(\"../../style/Style.js\").default>} styles The style or array of styles.\r\n   * @param {import(\"../../render/canvas/BuilderGroup.js\").default} builderGroup Builder group.\r\n   * @param {import(\"../../proj.js\").TransformFunction} [transform] Transform from user to view projection.\r\n   * @param {boolean} [declutter] Enable decluttering.\r\n   * @param {number} [index] Render order index.\r\n   * @return {boolean} `true` if an image is loading.\r\n   */\r\n  renderFeature(\r\n    feature,\r\n    squaredTolerance,\r\n    styles,\r\n    builderGroup,\r\n    transform,\r\n    declutter,\r\n    index,\r\n  ) {\r\n    if (!styles) {\r\n      return false;\r\n    }\r\n    let loading = false;\r\n    if (Array.isArray(styles)) {\r\n      for (let i = 0, ii = styles.length; i < ii; ++i) {\r\n        loading =\r\n          renderFeature(\r\n            builderGroup,\r\n            feature,\r\n            styles[i],\r\n            squaredTolerance,\r\n            this.boundHandleStyleImageChange_,\r\n            transform,\r\n            declutter,\r\n            index,\r\n          ) || loading;\r\n      }\r\n    } else {\r\n      loading = renderFeature(\r\n        builderGroup,\r\n        feature,\r\n        styles,\r\n        squaredTolerance,\r\n        this.boundHandleStyleImageChange_,\r\n        transform,\r\n        declutter,\r\n        index,\r\n      );\r\n    }\r\n    return loading;\r\n  }\r\n}\r\n\r\nexport default CanvasVectorLayerRenderer;\r\n","/**\r\n * @module ol/render/canvas/BuilderGroup\r\n */\r\n\r\nimport Builder from './Builder.js';\r\nimport ImageBuilder from './ImageBuilder.js';\r\nimport LineStringBuilder from './LineStringBuilder.js';\r\nimport PolygonBuilder from './PolygonBuilder.js';\r\nimport TextBuilder from './TextBuilder.js';\r\n\r\n/**\r\n * @type {Object<import(\"../canvas.js\").BuilderType, typeof Builder>}\r\n */\r\nconst BATCH_CONSTRUCTORS = {\r\n  'Circle': PolygonBuilder,\r\n  'Default': Builder,\r\n  'Image': ImageBuilder,\r\n  'LineString': LineStringBuilder,\r\n  'Polygon': PolygonBuilder,\r\n  'Text': TextBuilder,\r\n};\r\n\r\nclass BuilderGroup {\r\n  /**\r\n   * @param {number} tolerance Tolerance.\r\n   * @param {import(\"../../extent.js\").Extent} maxExtent Max extent.\r\n   * @param {number} resolution Resolution.\r\n   * @param {number} pixelRatio Pixel ratio.\r\n   */\r\n  constructor(tolerance, maxExtent, resolution, pixelRatio) {\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.tolerance_ = tolerance;\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"../../extent.js\").Extent}\r\n     */\r\n    this.maxExtent_ = maxExtent;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.pixelRatio_ = pixelRatio;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.resolution_ = resolution;\r\n\r\n    /**\r\n     * @private\r\n     * @type {!Object<string, !Object<import(\"../canvas.js\").BuilderType, Builder>>}\r\n     */\r\n    this.buildersByZIndex_ = {};\r\n  }\r\n\r\n  /**\r\n   * @return {!Object<string, !Object<import(\"../canvas.js\").BuilderType, import(\"./Builder.js\").SerializableInstructions>>} The serializable instructions\r\n   */\r\n  finish() {\r\n    const builderInstructions = {};\r\n    for (const zKey in this.buildersByZIndex_) {\r\n      builderInstructions[zKey] = builderInstructions[zKey] || {};\r\n      const builders = this.buildersByZIndex_[zKey];\r\n      for (const builderKey in builders) {\r\n        const builderInstruction = builders[builderKey].finish();\r\n        builderInstructions[zKey][builderKey] = builderInstruction;\r\n      }\r\n    }\r\n    return builderInstructions;\r\n  }\r\n\r\n  /**\r\n   * @param {number|undefined} zIndex Z index.\r\n   * @param {import(\"../canvas.js\").BuilderType} builderType Replay type.\r\n   * @return {import(\"../VectorContext.js\").default} Replay.\r\n   */\r\n  getBuilder(zIndex, builderType) {\r\n    const zIndexKey = zIndex !== undefined ? zIndex.toString() : '0';\r\n    let replays = this.buildersByZIndex_[zIndexKey];\r\n    if (replays === undefined) {\r\n      replays = {};\r\n      this.buildersByZIndex_[zIndexKey] = replays;\r\n    }\r\n    let replay = replays[builderType];\r\n    if (replay === undefined) {\r\n      const Constructor = BATCH_CONSTRUCTORS[builderType];\r\n      replay = new Constructor(\r\n        this.tolerance_,\r\n        this.maxExtent_,\r\n        this.resolution_,\r\n        this.pixelRatio_,\r\n      );\r\n      replays[builderType] = replay;\r\n    }\r\n    return replay;\r\n  }\r\n}\r\n\r\nexport default BuilderGroup;\r\n","/**\r\n * @module ol/render/canvas/Builder\r\n */\r\nimport {equals, reverseSubArray} from '../../array.js';\r\nimport {asColorLike} from '../../colorlike.js';\r\nimport Relationship from '../../extent/Relationship.js';\r\nimport {\r\n  buffer,\r\n  clone,\r\n  containsCoordinate,\r\n  coordinateRelationship,\r\n} from '../../extent.js';\r\nimport {\r\n  inflateCoordinates,\r\n  inflateCoordinatesArray,\r\n  inflateMultiCoordinatesArray,\r\n} from '../../geom/flat/inflate.js';\r\nimport VectorContext from '../VectorContext.js';\r\nimport {\r\n  defaultFillStyle,\r\n  defaultLineCap,\r\n  defaultLineDash,\r\n  defaultLineDashOffset,\r\n  defaultLineJoin,\r\n  defaultLineWidth,\r\n  defaultMiterLimit,\r\n  defaultStrokeStyle,\r\n} from '../canvas.js';\r\nimport CanvasInstruction from './Instruction.js';\r\n\r\nclass CanvasBuilder extends VectorContext {\r\n  /**\r\n   * @param {number} tolerance Tolerance.\r\n   * @param {import(\"../../extent.js\").Extent} maxExtent Maximum extent.\r\n   * @param {number} resolution Resolution.\r\n   * @param {number} pixelRatio Pixel ratio.\r\n   */\r\n  constructor(tolerance, maxExtent, resolution, pixelRatio) {\r\n    super();\r\n\r\n    /**\r\n     * @protected\r\n     * @type {number}\r\n     */\r\n    this.tolerance = tolerance;\r\n\r\n    /**\r\n     * @protected\r\n     * @const\r\n     * @type {import(\"../../extent.js\").Extent}\r\n     */\r\n    this.maxExtent = maxExtent;\r\n\r\n    /**\r\n     * @protected\r\n     * @type {number}\r\n     */\r\n    this.pixelRatio = pixelRatio;\r\n\r\n    /**\r\n     * @protected\r\n     * @type {number}\r\n     */\r\n    this.maxLineWidth = 0;\r\n\r\n    /**\r\n     * @protected\r\n     * @const\r\n     * @type {number}\r\n     */\r\n    this.resolution = resolution;\r\n\r\n    /**\r\n     * @private\r\n     * @type {Array<*>}\r\n     */\r\n    this.beginGeometryInstruction1_ = null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {Array<*>}\r\n     */\r\n    this.beginGeometryInstruction2_ = null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"../../extent.js\").Extent}\r\n     */\r\n    this.bufferedMaxExtent_ = null;\r\n\r\n    /**\r\n     * @protected\r\n     * @type {Array<*>}\r\n     */\r\n    this.instructions = [];\r\n\r\n    /**\r\n     * @protected\r\n     * @type {Array<number>}\r\n     */\r\n    this.coordinates = [];\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"../../coordinate.js\").Coordinate}\r\n     */\r\n    this.tmpCoordinate_ = [];\r\n\r\n    /**\r\n     * @protected\r\n     * @type {Array<*>}\r\n     */\r\n    this.hitDetectionInstructions = [];\r\n\r\n    /**\r\n     * @protected\r\n     * @type {import(\"../canvas.js\").FillStrokeState}\r\n     */\r\n    this.state = /** @type {import(\"../canvas.js\").FillStrokeState} */ ({});\r\n  }\r\n\r\n  /**\r\n   * @protected\r\n   * @param {Array<number>} dashArray Dash array.\r\n   * @return {Array<number>} Dash array with pixel ratio applied\r\n   */\r\n  applyPixelRatio(dashArray) {\r\n    const pixelRatio = this.pixelRatio;\r\n    return pixelRatio == 1\r\n      ? dashArray\r\n      : dashArray.map(function (dash) {\r\n          return dash * pixelRatio;\r\n        });\r\n  }\r\n\r\n  /**\r\n   * @param {Array<number>} flatCoordinates Flat coordinates.\r\n   * @param {number} stride Stride.\r\n   * @protected\r\n   * @return {number} My end\r\n   */\r\n  appendFlatPointCoordinates(flatCoordinates, stride) {\r\n    const extent = this.getBufferedMaxExtent();\r\n    const tmpCoord = this.tmpCoordinate_;\r\n    const coordinates = this.coordinates;\r\n    let myEnd = coordinates.length;\r\n    for (let i = 0, ii = flatCoordinates.length; i < ii; i += stride) {\r\n      tmpCoord[0] = flatCoordinates[i];\r\n      tmpCoord[1] = flatCoordinates[i + 1];\r\n      if (containsCoordinate(extent, tmpCoord)) {\r\n        coordinates[myEnd++] = tmpCoord[0];\r\n        coordinates[myEnd++] = tmpCoord[1];\r\n      }\r\n    }\r\n    return myEnd;\r\n  }\r\n\r\n  /**\r\n   * @param {Array<number>} flatCoordinates Flat coordinates.\r\n   * @param {number} offset Offset.\r\n   * @param {number} end End.\r\n   * @param {number} stride Stride.\r\n   * @param {boolean} closed Last input coordinate equals first.\r\n   * @param {boolean} skipFirst Skip first coordinate.\r\n   * @protected\r\n   * @return {number} My end.\r\n   */\r\n  appendFlatLineCoordinates(\r\n    flatCoordinates,\r\n    offset,\r\n    end,\r\n    stride,\r\n    closed,\r\n    skipFirst,\r\n  ) {\r\n    const coordinates = this.coordinates;\r\n    let myEnd = coordinates.length;\r\n    const extent = this.getBufferedMaxExtent();\r\n    if (skipFirst) {\r\n      offset += stride;\r\n    }\r\n    let lastXCoord = flatCoordinates[offset];\r\n    let lastYCoord = flatCoordinates[offset + 1];\r\n    const nextCoord = this.tmpCoordinate_;\r\n    let skipped = true;\r\n\r\n    let i, lastRel, nextRel;\r\n    for (i = offset + stride; i < end; i += stride) {\r\n      nextCoord[0] = flatCoordinates[i];\r\n      nextCoord[1] = flatCoordinates[i + 1];\r\n      nextRel = coordinateRelationship(extent, nextCoord);\r\n      if (nextRel !== lastRel) {\r\n        if (skipped) {\r\n          coordinates[myEnd++] = lastXCoord;\r\n          coordinates[myEnd++] = lastYCoord;\r\n          skipped = false;\r\n        }\r\n        coordinates[myEnd++] = nextCoord[0];\r\n        coordinates[myEnd++] = nextCoord[1];\r\n      } else if (nextRel === Relationship.INTERSECTING) {\r\n        coordinates[myEnd++] = nextCoord[0];\r\n        coordinates[myEnd++] = nextCoord[1];\r\n        skipped = false;\r\n      } else {\r\n        skipped = true;\r\n      }\r\n      lastXCoord = nextCoord[0];\r\n      lastYCoord = nextCoord[1];\r\n      lastRel = nextRel;\r\n    }\r\n\r\n    // Last coordinate equals first or only one point to append:\r\n    if ((closed && skipped) || i === offset + stride) {\r\n      coordinates[myEnd++] = lastXCoord;\r\n      coordinates[myEnd++] = lastYCoord;\r\n    }\r\n    return myEnd;\r\n  }\r\n\r\n  /**\r\n   * @param {Array<number>} flatCoordinates Flat coordinates.\r\n   * @param {number} offset Offset.\r\n   * @param {Array<number>} ends Ends.\r\n   * @param {number} stride Stride.\r\n   * @param {Array<number>} builderEnds Builder ends.\r\n   * @return {number} Offset.\r\n   */\r\n  drawCustomCoordinates_(flatCoordinates, offset, ends, stride, builderEnds) {\r\n    for (let i = 0, ii = ends.length; i < ii; ++i) {\r\n      const end = ends[i];\r\n      const builderEnd = this.appendFlatLineCoordinates(\r\n        flatCoordinates,\r\n        offset,\r\n        end,\r\n        stride,\r\n        false,\r\n        false,\r\n      );\r\n      builderEnds.push(builderEnd);\r\n      offset = end;\r\n    }\r\n    return offset;\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../../geom/SimpleGeometry.js\").default} geometry Geometry.\r\n   * @param {import(\"../../Feature.js\").FeatureLike} feature Feature.\r\n   * @param {Function} renderer Renderer.\r\n   * @param {Function} hitDetectionRenderer Renderer.\r\n   * @param {number} [index] Render order index.\r\n   * @override\r\n   */\r\n  drawCustom(geometry, feature, renderer, hitDetectionRenderer, index) {\r\n    this.beginGeometry(geometry, feature, index);\r\n\r\n    const type = geometry.getType();\r\n    const stride = geometry.getStride();\r\n    const builderBegin = this.coordinates.length;\r\n\r\n    let flatCoordinates, builderEnd, builderEnds, builderEndss;\r\n    let offset;\r\n\r\n    switch (type) {\r\n      case 'MultiPolygon':\r\n        flatCoordinates =\r\n          /** @type {import(\"../../geom/MultiPolygon.js\").default} */ (\r\n            geometry\r\n          ).getOrientedFlatCoordinates();\r\n        builderEndss = [];\r\n        const endss =\r\n          /** @type {import(\"../../geom/MultiPolygon.js\").default} */ (\r\n            geometry\r\n          ).getEndss();\r\n        offset = 0;\r\n        for (let i = 0, ii = endss.length; i < ii; ++i) {\r\n          const myEnds = [];\r\n          offset = this.drawCustomCoordinates_(\r\n            flatCoordinates,\r\n            offset,\r\n            endss[i],\r\n            stride,\r\n            myEnds,\r\n          );\r\n          builderEndss.push(myEnds);\r\n        }\r\n        this.instructions.push([\r\n          CanvasInstruction.CUSTOM,\r\n          builderBegin,\r\n          builderEndss,\r\n          geometry,\r\n          renderer,\r\n          inflateMultiCoordinatesArray,\r\n          index,\r\n        ]);\r\n        this.hitDetectionInstructions.push([\r\n          CanvasInstruction.CUSTOM,\r\n          builderBegin,\r\n          builderEndss,\r\n          geometry,\r\n          hitDetectionRenderer || renderer,\r\n          inflateMultiCoordinatesArray,\r\n          index,\r\n        ]);\r\n        break;\r\n      case 'Polygon':\r\n      case 'MultiLineString':\r\n        builderEnds = [];\r\n        flatCoordinates =\r\n          type == 'Polygon'\r\n            ? /** @type {import(\"../../geom/Polygon.js\").default} */ (\r\n                geometry\r\n              ).getOrientedFlatCoordinates()\r\n            : geometry.getFlatCoordinates();\r\n        offset = this.drawCustomCoordinates_(\r\n          flatCoordinates,\r\n          0,\r\n          /** @type {import(\"../../geom/Polygon.js\").default|import(\"../../geom/MultiLineString.js\").default} */ (\r\n            geometry\r\n          ).getEnds(),\r\n          stride,\r\n          builderEnds,\r\n        );\r\n        this.instructions.push([\r\n          CanvasInstruction.CUSTOM,\r\n          builderBegin,\r\n          builderEnds,\r\n          geometry,\r\n          renderer,\r\n          inflateCoordinatesArray,\r\n          index,\r\n        ]);\r\n        this.hitDetectionInstructions.push([\r\n          CanvasInstruction.CUSTOM,\r\n          builderBegin,\r\n          builderEnds,\r\n          geometry,\r\n          hitDetectionRenderer || renderer,\r\n          inflateCoordinatesArray,\r\n          index,\r\n        ]);\r\n        break;\r\n      case 'LineString':\r\n      case 'Circle':\r\n        flatCoordinates = geometry.getFlatCoordinates();\r\n        builderEnd = this.appendFlatLineCoordinates(\r\n          flatCoordinates,\r\n          0,\r\n          flatCoordinates.length,\r\n          stride,\r\n          false,\r\n          false,\r\n        );\r\n        this.instructions.push([\r\n          CanvasInstruction.CUSTOM,\r\n          builderBegin,\r\n          builderEnd,\r\n          geometry,\r\n          renderer,\r\n          inflateCoordinates,\r\n          index,\r\n        ]);\r\n        this.hitDetectionInstructions.push([\r\n          CanvasInstruction.CUSTOM,\r\n          builderBegin,\r\n          builderEnd,\r\n          geometry,\r\n          hitDetectionRenderer || renderer,\r\n          inflateCoordinates,\r\n          index,\r\n        ]);\r\n        break;\r\n      case 'MultiPoint':\r\n        flatCoordinates = geometry.getFlatCoordinates();\r\n        builderEnd = this.appendFlatPointCoordinates(flatCoordinates, stride);\r\n\r\n        if (builderEnd > builderBegin) {\r\n          this.instructions.push([\r\n            CanvasInstruction.CUSTOM,\r\n            builderBegin,\r\n            builderEnd,\r\n            geometry,\r\n            renderer,\r\n            inflateCoordinates,\r\n            index,\r\n          ]);\r\n          this.hitDetectionInstructions.push([\r\n            CanvasInstruction.CUSTOM,\r\n            builderBegin,\r\n            builderEnd,\r\n            geometry,\r\n            hitDetectionRenderer || renderer,\r\n            inflateCoordinates,\r\n            index,\r\n          ]);\r\n        }\r\n        break;\r\n      case 'Point':\r\n        flatCoordinates = geometry.getFlatCoordinates();\r\n        this.coordinates.push(flatCoordinates[0], flatCoordinates[1]);\r\n        builderEnd = this.coordinates.length;\r\n\r\n        this.instructions.push([\r\n          CanvasInstruction.CUSTOM,\r\n          builderBegin,\r\n          builderEnd,\r\n          geometry,\r\n          renderer,\r\n          undefined,\r\n          index,\r\n        ]);\r\n        this.hitDetectionInstructions.push([\r\n          CanvasInstruction.CUSTOM,\r\n          builderBegin,\r\n          builderEnd,\r\n          geometry,\r\n          hitDetectionRenderer || renderer,\r\n          undefined,\r\n          index,\r\n        ]);\r\n        break;\r\n      default:\r\n    }\r\n    this.endGeometry(feature);\r\n  }\r\n\r\n  /**\r\n   * @protected\r\n   * @param {import(\"../../geom/Geometry\").default|import(\"../Feature.js\").default} geometry The geometry.\r\n   * @param {import(\"../../Feature.js\").FeatureLike} feature Feature.\r\n   * @param {number} index Render order index\r\n   */\r\n  beginGeometry(geometry, feature, index) {\r\n    this.beginGeometryInstruction1_ = [\r\n      CanvasInstruction.BEGIN_GEOMETRY,\r\n      feature,\r\n      0,\r\n      geometry,\r\n      index,\r\n    ];\r\n    this.instructions.push(this.beginGeometryInstruction1_);\r\n    this.beginGeometryInstruction2_ = [\r\n      CanvasInstruction.BEGIN_GEOMETRY,\r\n      feature,\r\n      0,\r\n      geometry,\r\n      index,\r\n    ];\r\n    this.hitDetectionInstructions.push(this.beginGeometryInstruction2_);\r\n  }\r\n\r\n  /**\r\n   * @return {import(\"../canvas.js\").SerializableInstructions} the serializable instructions.\r\n   */\r\n  finish() {\r\n    return {\r\n      instructions: this.instructions,\r\n      hitDetectionInstructions: this.hitDetectionInstructions,\r\n      coordinates: this.coordinates,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Reverse the hit detection instructions.\r\n   */\r\n  reverseHitDetectionInstructions() {\r\n    const hitDetectionInstructions = this.hitDetectionInstructions;\r\n    // step 1 - reverse array\r\n    hitDetectionInstructions.reverse();\r\n    // step 2 - reverse instructions within geometry blocks\r\n    let i;\r\n    const n = hitDetectionInstructions.length;\r\n    let instruction;\r\n    let type;\r\n    let begin = -1;\r\n    for (i = 0; i < n; ++i) {\r\n      instruction = hitDetectionInstructions[i];\r\n      type = /** @type {import(\"./Instruction.js\").default} */ (instruction[0]);\r\n      if (type == CanvasInstruction.END_GEOMETRY) {\r\n        begin = i;\r\n      } else if (type == CanvasInstruction.BEGIN_GEOMETRY) {\r\n        instruction[2] = i;\r\n        reverseSubArray(this.hitDetectionInstructions, begin, i);\r\n        begin = -1;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../../style/Fill.js\").default} fillStyle Fill style.\r\n   * @param {import('../canvas.js').FillStrokeState} [state] State.\r\n   * @return {import('../canvas.js').FillStrokeState} State.\r\n   */\r\n  fillStyleToState(\r\n    fillStyle,\r\n    state = /** @type {import('../canvas.js').FillStrokeState} */ ({}),\r\n  ) {\r\n    if (fillStyle) {\r\n      const fillStyleColor = fillStyle.getColor();\r\n      state.fillPatternScale =\r\n        fillStyleColor &&\r\n        typeof fillStyleColor === 'object' &&\r\n        'src' in fillStyleColor\r\n          ? this.pixelRatio\r\n          : 1;\r\n      state.fillStyle = asColorLike(\r\n        fillStyleColor ? fillStyleColor : defaultFillStyle,\r\n      );\r\n    } else {\r\n      state.fillStyle = undefined;\r\n    }\r\n    return state;\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../../style/Stroke.js\").default} strokeStyle Stroke style.\r\n   * @param {import(\"../canvas.js\").FillStrokeState} state State.\r\n   * @return {import(\"../canvas.js\").FillStrokeState} State.\r\n   */\r\n  strokeStyleToState(\r\n    strokeStyle,\r\n    state = /** @type {import('../canvas.js').FillStrokeState} */ ({}),\r\n  ) {\r\n    if (strokeStyle) {\r\n      const strokeStyleColor = strokeStyle.getColor();\r\n      state.strokeStyle = asColorLike(\r\n        strokeStyleColor ? strokeStyleColor : defaultStrokeStyle,\r\n      );\r\n      const strokeStyleLineCap = strokeStyle.getLineCap();\r\n      state.lineCap =\r\n        strokeStyleLineCap !== undefined ? strokeStyleLineCap : defaultLineCap;\r\n      const strokeStyleLineDash = strokeStyle.getLineDash();\r\n      state.lineDash = strokeStyleLineDash\r\n        ? strokeStyleLineDash.slice()\r\n        : defaultLineDash;\r\n      const strokeStyleLineDashOffset = strokeStyle.getLineDashOffset();\r\n      state.lineDashOffset = strokeStyleLineDashOffset\r\n        ? strokeStyleLineDashOffset\r\n        : defaultLineDashOffset;\r\n      const strokeStyleLineJoin = strokeStyle.getLineJoin();\r\n      state.lineJoin =\r\n        strokeStyleLineJoin !== undefined\r\n          ? strokeStyleLineJoin\r\n          : defaultLineJoin;\r\n      const strokeStyleWidth = strokeStyle.getWidth();\r\n      state.lineWidth =\r\n        strokeStyleWidth !== undefined ? strokeStyleWidth : defaultLineWidth;\r\n      const strokeStyleMiterLimit = strokeStyle.getMiterLimit();\r\n      state.miterLimit =\r\n        strokeStyleMiterLimit !== undefined\r\n          ? strokeStyleMiterLimit\r\n          : defaultMiterLimit;\r\n\r\n      if (state.lineWidth > this.maxLineWidth) {\r\n        this.maxLineWidth = state.lineWidth;\r\n        // invalidate the buffered max extent cache\r\n        this.bufferedMaxExtent_ = null;\r\n      }\r\n    } else {\r\n      state.strokeStyle = undefined;\r\n      state.lineCap = undefined;\r\n      state.lineDash = null;\r\n      state.lineDashOffset = undefined;\r\n      state.lineJoin = undefined;\r\n      state.lineWidth = undefined;\r\n      state.miterLimit = undefined;\r\n    }\r\n    return state;\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../../style/Fill.js\").default} fillStyle Fill style.\r\n   * @param {import(\"../../style/Stroke.js\").default} strokeStyle Stroke style.\r\n   * @override\r\n   */\r\n  setFillStrokeStyle(fillStyle, strokeStyle) {\r\n    const state = this.state;\r\n    this.fillStyleToState(fillStyle, state);\r\n    this.strokeStyleToState(strokeStyle, state);\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../canvas.js\").FillStrokeState} state State.\r\n   * @return {Array<*>} Fill instruction.\r\n   */\r\n  createFill(state) {\r\n    const fillStyle = state.fillStyle;\r\n    /** @type {Array<*>} */\r\n    const fillInstruction = [CanvasInstruction.SET_FILL_STYLE, fillStyle];\r\n    if (typeof fillStyle !== 'string') {\r\n      // Fill is a pattern or gradient - align and scale it!\r\n      fillInstruction.push(state.fillPatternScale);\r\n    }\r\n    return fillInstruction;\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../canvas.js\").FillStrokeState} state State.\r\n   */\r\n  applyStroke(state) {\r\n    this.instructions.push(this.createStroke(state));\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../canvas.js\").FillStrokeState} state State.\r\n   * @return {Array<*>} Stroke instruction.\r\n   */\r\n  createStroke(state) {\r\n    return [\r\n      CanvasInstruction.SET_STROKE_STYLE,\r\n      state.strokeStyle,\r\n      state.lineWidth * this.pixelRatio,\r\n      state.lineCap,\r\n      state.lineJoin,\r\n      state.miterLimit,\r\n      state.lineDash ? this.applyPixelRatio(state.lineDash) : null,\r\n      state.lineDashOffset * this.pixelRatio,\r\n    ];\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../canvas.js\").FillStrokeState} state State.\r\n   * @param {function(this:CanvasBuilder, import(\"../canvas.js\").FillStrokeState):Array<*>} createFill Create fill.\r\n   */\r\n  updateFillStyle(state, createFill) {\r\n    const fillStyle = state.fillStyle;\r\n    if (typeof fillStyle !== 'string' || state.currentFillStyle != fillStyle) {\r\n      if (fillStyle !== undefined) {\r\n        this.instructions.push(createFill.call(this, state));\r\n      }\r\n      state.currentFillStyle = fillStyle;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../canvas.js\").FillStrokeState} state State.\r\n   * @param {function(this:CanvasBuilder, import(\"../canvas.js\").FillStrokeState): void} applyStroke Apply stroke.\r\n   */\r\n  updateStrokeStyle(state, applyStroke) {\r\n    const strokeStyle = state.strokeStyle;\r\n    const lineCap = state.lineCap;\r\n    const lineDash = state.lineDash;\r\n    const lineDashOffset = state.lineDashOffset;\r\n    const lineJoin = state.lineJoin;\r\n    const lineWidth = state.lineWidth;\r\n    const miterLimit = state.miterLimit;\r\n    if (\r\n      state.currentStrokeStyle != strokeStyle ||\r\n      state.currentLineCap != lineCap ||\r\n      (lineDash != state.currentLineDash &&\r\n        !equals(state.currentLineDash, lineDash)) ||\r\n      state.currentLineDashOffset != lineDashOffset ||\r\n      state.currentLineJoin != lineJoin ||\r\n      state.currentLineWidth != lineWidth ||\r\n      state.currentMiterLimit != miterLimit\r\n    ) {\r\n      if (strokeStyle !== undefined) {\r\n        applyStroke.call(this, state);\r\n      }\r\n      state.currentStrokeStyle = strokeStyle;\r\n      state.currentLineCap = lineCap;\r\n      state.currentLineDash = lineDash;\r\n      state.currentLineDashOffset = lineDashOffset;\r\n      state.currentLineJoin = lineJoin;\r\n      state.currentLineWidth = lineWidth;\r\n      state.currentMiterLimit = miterLimit;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../../Feature.js\").FeatureLike} feature Feature.\r\n   */\r\n  endGeometry(feature) {\r\n    this.beginGeometryInstruction1_[2] = this.instructions.length;\r\n    this.beginGeometryInstruction1_ = null;\r\n    this.beginGeometryInstruction2_[2] = this.hitDetectionInstructions.length;\r\n    this.beginGeometryInstruction2_ = null;\r\n    const endGeometryInstruction = [CanvasInstruction.END_GEOMETRY, feature];\r\n    this.instructions.push(endGeometryInstruction);\r\n    this.hitDetectionInstructions.push(endGeometryInstruction);\r\n  }\r\n\r\n  /**\r\n   * Get the buffered rendering extent.  Rendering will be clipped to the extent\r\n   * provided to the constructor.  To account for symbolizers that may intersect\r\n   * this extent, we calculate a buffered extent (e.g. based on stroke width).\r\n   * @return {import(\"../../extent.js\").Extent} The buffered rendering extent.\r\n   * @protected\r\n   */\r\n  getBufferedMaxExtent() {\r\n    if (!this.bufferedMaxExtent_) {\r\n      this.bufferedMaxExtent_ = clone(this.maxExtent);\r\n      if (this.maxLineWidth > 0) {\r\n        const width = (this.resolution * (this.maxLineWidth + 1)) / 2;\r\n        buffer(this.bufferedMaxExtent_, width, this.bufferedMaxExtent_);\r\n      }\r\n    }\r\n    return this.bufferedMaxExtent_;\r\n  }\r\n}\r\n\r\nexport default CanvasBuilder;\r\n","/**\r\n * @module ol/render/VectorContext\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * Context for drawing geometries.  A vector context is available on render\r\n * events and does not need to be constructed directly.\r\n * @api\r\n */\r\nclass VectorContext {\r\n  /**\r\n   * Render a geometry with a custom renderer.\r\n   *\r\n   * @param {import(\"../geom/SimpleGeometry.js\").default} geometry Geometry.\r\n   * @param {import(\"../Feature.js\").FeatureLike} feature Feature.\r\n   * @param {Function} renderer Renderer.\r\n   * @param {Function} hitDetectionRenderer Renderer.\r\n   * @param {number} [index] Render order index.\r\n   */\r\n  drawCustom(geometry, feature, renderer, hitDetectionRenderer, index) {}\r\n\r\n  /**\r\n   * Render a geometry.\r\n   *\r\n   * @param {import(\"../geom/Geometry.js\").default} geometry The geometry to render.\r\n   */\r\n  drawGeometry(geometry) {}\r\n\r\n  /**\r\n   * Set the rendering style.\r\n   *\r\n   * @param {import(\"../style/Style.js\").default} style The rendering style.\r\n   */\r\n  setStyle(style) {}\r\n\r\n  /**\r\n   * @param {import(\"../geom/Circle.js\").default} circleGeometry Circle geometry.\r\n   * @param {import(\"../Feature.js\").default} feature Feature.\r\n   * @param {number} [index] Render order index.\r\n   */\r\n  drawCircle(circleGeometry, feature, index) {}\r\n\r\n  /**\r\n   * @param {import(\"../Feature.js\").default} feature Feature.\r\n   * @param {import(\"../style/Style.js\").default} style Style.\r\n   * @param {number} [index] Render order index.\r\n   */\r\n  drawFeature(feature, style, index) {}\r\n\r\n  /**\r\n   * @param {import(\"../geom/GeometryCollection.js\").default} geometryCollectionGeometry Geometry collection.\r\n   * @param {import(\"../Feature.js\").default} feature Feature.\r\n   * @param {number} [index] Render order index.\r\n   */\r\n  drawGeometryCollection(geometryCollectionGeometry, feature, index) {}\r\n\r\n  /**\r\n   * @param {import(\"../geom/LineString.js\").default|import(\"./Feature.js\").default} lineStringGeometry Line string geometry.\r\n   * @param {import(\"../Feature.js\").FeatureLike} feature Feature.\r\n   * @param {number} [index] Render order index.\r\n   */\r\n  drawLineString(lineStringGeometry, feature, index) {}\r\n\r\n  /**\r\n   * @param {import(\"../geom/MultiLineString.js\").default|import(\"./Feature.js\").default} multiLineStringGeometry MultiLineString geometry.\r\n   * @param {import(\"../Feature.js\").FeatureLike} feature Feature.\r\n   * @param {number} [index] Render order index.\r\n   */\r\n  drawMultiLineString(multiLineStringGeometry, feature, index) {}\r\n\r\n  /**\r\n   * @param {import(\"../geom/MultiPoint.js\").default|import(\"./Feature.js\").default} multiPointGeometry MultiPoint geometry.\r\n   * @param {import(\"../Feature.js\").FeatureLike} feature Feature.\r\n   * @param {number} [index] Render order index.\r\n   */\r\n  drawMultiPoint(multiPointGeometry, feature, index) {}\r\n\r\n  /**\r\n   * @param {import(\"../geom/MultiPolygon.js\").default} multiPolygonGeometry MultiPolygon geometry.\r\n   * @param {import(\"../Feature.js\").FeatureLike} feature Feature.\r\n   * @param {number} [index] Render order index.\r\n   */\r\n  drawMultiPolygon(multiPolygonGeometry, feature, index) {}\r\n\r\n  /**\r\n   * @param {import(\"../geom/Point.js\").default|import(\"./Feature.js\").default} pointGeometry Point geometry.\r\n   * @param {import(\"../Feature.js\").FeatureLike} feature Feature.\r\n   * @param {number} [index] Render order index.\r\n   */\r\n  drawPoint(pointGeometry, feature, index) {}\r\n\r\n  /**\r\n   * @param {import(\"../geom/Polygon.js\").default|import(\"./Feature.js\").default} polygonGeometry Polygon geometry.\r\n   * @param {import(\"../Feature.js\").FeatureLike} feature Feature.\r\n   * @param {number} [index] Render order index.\r\n   */\r\n  drawPolygon(polygonGeometry, feature, index) {}\r\n\r\n  /**\r\n   * @param {import(\"../geom/SimpleGeometry.js\").default|import(\"./Feature.js\").default} geometry Geometry.\r\n   * @param {import(\"../Feature.js\").FeatureLike} feature Feature.\r\n   * @param {number} [index] Render order index.\r\n   */\r\n  drawText(geometry, feature, index) {}\r\n\r\n  /**\r\n   * @param {import(\"../style/Fill.js\").default} fillStyle Fill style.\r\n   * @param {import(\"../style/Stroke.js\").default} strokeStyle Stroke style.\r\n   */\r\n  setFillStrokeStyle(fillStyle, strokeStyle) {}\r\n\r\n  /**\r\n   * @param {import(\"../style/Image.js\").default} imageStyle Image style.\r\n   * @param {import(\"../render/canvas.js\").DeclutterImageWithText} [declutterImageWithText] Shared data for combined decluttering with a text style.\r\n   */\r\n  setImageStyle(imageStyle, declutterImageWithText) {}\r\n\r\n  /**\r\n   * @param {import(\"../style/Text.js\").default} textStyle Text style.\r\n   * @param {import(\"../render/canvas.js\").DeclutterImageWithText} [declutterImageWithText] Shared data for combined decluttering with an image style.\r\n   */\r\n  setTextStyle(textStyle, declutterImageWithText) {}\r\n}\r\n\r\nexport default VectorContext;\r\n","/**\r\n * @module ol/render/canvas/Instruction\r\n */\r\n\r\n/**\r\n * @enum {number}\r\n */\r\nconst Instruction = {\r\n  BEGIN_GEOMETRY: 0,\r\n  BEGIN_PATH: 1,\r\n  CIRCLE: 2,\r\n  CLOSE_PATH: 3,\r\n  CUSTOM: 4,\r\n  DRAW_CHARS: 5,\r\n  DRAW_IMAGE: 6,\r\n  END_GEOMETRY: 7,\r\n  FILL: 8,\r\n  MOVE_TO_LINE_TO: 9,\r\n  SET_FILL_STYLE: 10,\r\n  SET_STROKE_STYLE: 11,\r\n  STROKE: 12,\r\n};\r\n\r\n/**\r\n * @type {Array<Instruction>}\r\n */\r\nexport const fillInstruction = [Instruction.FILL];\r\n\r\n/**\r\n * @type {Array<Instruction>}\r\n */\r\nexport const strokeInstruction = [Instruction.STROKE];\r\n\r\n/**\r\n * @type {Array<Instruction>}\r\n */\r\nexport const beginPathInstruction = [Instruction.BEGIN_PATH];\r\n\r\n/**\r\n * @type {Array<Instruction>}\r\n */\r\nexport const closePathInstruction = [Instruction.CLOSE_PATH];\r\n\r\nexport default Instruction;\r\n","/**\r\n * @module ol/render/canvas/ImageBuilder\r\n */\r\nimport {containsCoordinate} from '../../extent.js';\r\nimport CanvasBuilder from './Builder.js';\r\nimport CanvasInstruction from './Instruction.js';\r\n\r\nclass CanvasImageBuilder extends CanvasBuilder {\r\n  /**\r\n   * @param {number} tolerance Tolerance.\r\n   * @param {import(\"../../extent.js\").Extent} maxExtent Maximum extent.\r\n   * @param {number} resolution Resolution.\r\n   * @param {number} pixelRatio Pixel ratio.\r\n   */\r\n  constructor(tolerance, maxExtent, resolution, pixelRatio) {\r\n    super(tolerance, maxExtent, resolution, pixelRatio);\r\n\r\n    /**\r\n     * @private\r\n     * @type {import('../../DataTile.js').ImageLike}\r\n     */\r\n    this.hitDetectionImage_ = null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {import('../../DataTile.js').ImageLike}\r\n     */\r\n    this.image_ = null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number|undefined}\r\n     */\r\n    this.imagePixelRatio_ = undefined;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number|undefined}\r\n     */\r\n    this.anchorX_ = undefined;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number|undefined}\r\n     */\r\n    this.anchorY_ = undefined;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number|undefined}\r\n     */\r\n    this.height_ = undefined;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number|undefined}\r\n     */\r\n    this.opacity_ = undefined;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number|undefined}\r\n     */\r\n    this.originX_ = undefined;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number|undefined}\r\n     */\r\n    this.originY_ = undefined;\r\n\r\n    /**\r\n     * @private\r\n     * @type {boolean|undefined}\r\n     */\r\n    this.rotateWithView_ = undefined;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number|undefined}\r\n     */\r\n    this.rotation_ = undefined;\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"../../size.js\").Size|undefined}\r\n     */\r\n    this.scale_ = undefined;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number|undefined}\r\n     */\r\n    this.width_ = undefined;\r\n\r\n    /**\r\n     * @private\r\n     * @type {import('../../style/Style.js').DeclutterMode}\r\n     */\r\n    this.declutterMode_ = undefined;\r\n\r\n    /**\r\n     * Data shared with a text builder for combined decluttering.\r\n     * @private\r\n     * @type {import(\"../canvas.js\").DeclutterImageWithText}\r\n     */\r\n    this.declutterImageWithText_ = undefined;\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../../geom/Point.js\").default|import(\"../Feature.js\").default} pointGeometry Point geometry.\r\n   * @param {import(\"../../Feature.js\").FeatureLike} feature Feature.\r\n   * @param {number} [index] Render order index.\r\n   * @override\r\n   */\r\n  drawPoint(pointGeometry, feature, index) {\r\n    if (\r\n      !this.image_ ||\r\n      (this.maxExtent &&\r\n        !containsCoordinate(this.maxExtent, pointGeometry.getFlatCoordinates()))\r\n    ) {\r\n      return;\r\n    }\r\n    this.beginGeometry(pointGeometry, feature, index);\r\n    const flatCoordinates = pointGeometry.getFlatCoordinates();\r\n    const stride = pointGeometry.getStride();\r\n    const myBegin = this.coordinates.length;\r\n    const myEnd = this.appendFlatPointCoordinates(flatCoordinates, stride);\r\n    this.instructions.push([\r\n      CanvasInstruction.DRAW_IMAGE,\r\n      myBegin,\r\n      myEnd,\r\n      this.image_,\r\n      // Remaining arguments to DRAW_IMAGE are in alphabetical order\r\n      this.anchorX_ * this.imagePixelRatio_,\r\n      this.anchorY_ * this.imagePixelRatio_,\r\n      Math.ceil(this.height_ * this.imagePixelRatio_),\r\n      this.opacity_,\r\n      this.originX_ * this.imagePixelRatio_,\r\n      this.originY_ * this.imagePixelRatio_,\r\n      this.rotateWithView_,\r\n      this.rotation_,\r\n      [\r\n        (this.scale_[0] * this.pixelRatio) / this.imagePixelRatio_,\r\n        (this.scale_[1] * this.pixelRatio) / this.imagePixelRatio_,\r\n      ],\r\n      Math.ceil(this.width_ * this.imagePixelRatio_),\r\n      this.declutterMode_,\r\n      this.declutterImageWithText_,\r\n    ]);\r\n    this.hitDetectionInstructions.push([\r\n      CanvasInstruction.DRAW_IMAGE,\r\n      myBegin,\r\n      myEnd,\r\n      this.hitDetectionImage_,\r\n      // Remaining arguments to DRAW_IMAGE are in alphabetical order\r\n      this.anchorX_,\r\n      this.anchorY_,\r\n      this.height_,\r\n      1,\r\n      this.originX_,\r\n      this.originY_,\r\n      this.rotateWithView_,\r\n      this.rotation_,\r\n      this.scale_,\r\n      this.width_,\r\n      this.declutterMode_,\r\n      this.declutterImageWithText_,\r\n    ]);\r\n    this.endGeometry(feature);\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../../geom/MultiPoint.js\").default|import(\"../Feature.js\").default} multiPointGeometry MultiPoint geometry.\r\n   * @param {import(\"../../Feature.js\").FeatureLike} feature Feature.\r\n   * @param {number} [index] Render order index.\r\n   * @override\r\n   */\r\n  drawMultiPoint(multiPointGeometry, feature, index) {\r\n    if (!this.image_) {\r\n      return;\r\n    }\r\n    this.beginGeometry(multiPointGeometry, feature, index);\r\n    const flatCoordinates = multiPointGeometry.getFlatCoordinates();\r\n    const filteredFlatCoordinates = [];\r\n    for (\r\n      let i = 0, ii = flatCoordinates.length;\r\n      i < ii;\r\n      i += multiPointGeometry.getStride()\r\n    ) {\r\n      if (\r\n        !this.maxExtent ||\r\n        containsCoordinate(this.maxExtent, flatCoordinates.slice(i, i + 2))\r\n      ) {\r\n        filteredFlatCoordinates.push(\r\n          flatCoordinates[i],\r\n          flatCoordinates[i + 1],\r\n        );\r\n      }\r\n    }\r\n    const myBegin = this.coordinates.length;\r\n    const myEnd = this.appendFlatPointCoordinates(filteredFlatCoordinates, 2);\r\n    this.instructions.push([\r\n      CanvasInstruction.DRAW_IMAGE,\r\n      myBegin,\r\n      myEnd,\r\n      this.image_,\r\n      // Remaining arguments to DRAW_IMAGE are in alphabetical order\r\n      this.anchorX_ * this.imagePixelRatio_,\r\n      this.anchorY_ * this.imagePixelRatio_,\r\n      Math.ceil(this.height_ * this.imagePixelRatio_),\r\n      this.opacity_,\r\n      this.originX_ * this.imagePixelRatio_,\r\n      this.originY_ * this.imagePixelRatio_,\r\n      this.rotateWithView_,\r\n      this.rotation_,\r\n      [\r\n        (this.scale_[0] * this.pixelRatio) / this.imagePixelRatio_,\r\n        (this.scale_[1] * this.pixelRatio) / this.imagePixelRatio_,\r\n      ],\r\n      Math.ceil(this.width_ * this.imagePixelRatio_),\r\n      this.declutterMode_,\r\n      this.declutterImageWithText_,\r\n    ]);\r\n    this.hitDetectionInstructions.push([\r\n      CanvasInstruction.DRAW_IMAGE,\r\n      myBegin,\r\n      myEnd,\r\n      this.hitDetectionImage_,\r\n      // Remaining arguments to DRAW_IMAGE are in alphabetical order\r\n      this.anchorX_,\r\n      this.anchorY_,\r\n      this.height_,\r\n      1,\r\n      this.originX_,\r\n      this.originY_,\r\n      this.rotateWithView_,\r\n      this.rotation_,\r\n      this.scale_,\r\n      this.width_,\r\n      this.declutterMode_,\r\n      this.declutterImageWithText_,\r\n    ]);\r\n    this.endGeometry(feature);\r\n  }\r\n\r\n  /**\r\n   * @return {import(\"../canvas.js\").SerializableInstructions} the serializable instructions.\r\n   * @override\r\n   */\r\n  finish() {\r\n    this.reverseHitDetectionInstructions();\r\n    // FIXME this doesn't really protect us against further calls to draw*Geometry\r\n    this.anchorX_ = undefined;\r\n    this.anchorY_ = undefined;\r\n    this.hitDetectionImage_ = null;\r\n    this.image_ = null;\r\n    this.imagePixelRatio_ = undefined;\r\n    this.height_ = undefined;\r\n    this.scale_ = undefined;\r\n    this.opacity_ = undefined;\r\n    this.originX_ = undefined;\r\n    this.originY_ = undefined;\r\n    this.rotateWithView_ = undefined;\r\n    this.rotation_ = undefined;\r\n    this.width_ = undefined;\r\n    return super.finish();\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../../style/Image.js\").default} imageStyle Image style.\r\n   * @param {Object} [sharedData] Shared data.\r\n   * @override\r\n   */\r\n  setImageStyle(imageStyle, sharedData) {\r\n    const anchor = imageStyle.getAnchor();\r\n    const size = imageStyle.getSize();\r\n    const origin = imageStyle.getOrigin();\r\n    this.imagePixelRatio_ = imageStyle.getPixelRatio(this.pixelRatio);\r\n    this.anchorX_ = anchor[0];\r\n    this.anchorY_ = anchor[1];\r\n    this.hitDetectionImage_ = imageStyle.getHitDetectionImage();\r\n    this.image_ = imageStyle.getImage(this.pixelRatio);\r\n    this.height_ = size[1];\r\n    this.opacity_ = imageStyle.getOpacity();\r\n    this.originX_ = origin[0];\r\n    this.originY_ = origin[1];\r\n    this.rotateWithView_ = imageStyle.getRotateWithView();\r\n    this.rotation_ = imageStyle.getRotation();\r\n    this.scale_ = imageStyle.getScaleArray();\r\n    this.width_ = size[0];\r\n    this.declutterMode_ = imageStyle.getDeclutterMode();\r\n    this.declutterImageWithText_ = sharedData;\r\n  }\r\n}\r\n\r\nexport default CanvasImageBuilder;\r\n","/**\r\n * @module ol/render/canvas/LineStringBuilder\r\n */\r\nimport {defaultLineDash, defaultLineDashOffset} from '../canvas.js';\r\nimport CanvasBuilder from './Builder.js';\r\nimport CanvasInstruction, {\r\n  beginPathInstruction,\r\n  strokeInstruction,\r\n} from './Instruction.js';\r\n\r\nclass CanvasLineStringBuilder extends CanvasBuilder {\r\n  /**\r\n   * @param {number} tolerance Tolerance.\r\n   * @param {import(\"../../extent.js\").Extent} maxExtent Maximum extent.\r\n   * @param {number} resolution Resolution.\r\n   * @param {number} pixelRatio Pixel ratio.\r\n   */\r\n  constructor(tolerance, maxExtent, resolution, pixelRatio) {\r\n    super(tolerance, maxExtent, resolution, pixelRatio);\r\n  }\r\n\r\n  /**\r\n   * @param {Array<number>} flatCoordinates Flat coordinates.\r\n   * @param {number} offset Offset.\r\n   * @param {number} end End.\r\n   * @param {number} stride Stride.\r\n   * @private\r\n   * @return {number} end.\r\n   */\r\n  drawFlatCoordinates_(flatCoordinates, offset, end, stride) {\r\n    const myBegin = this.coordinates.length;\r\n    const myEnd = this.appendFlatLineCoordinates(\r\n      flatCoordinates,\r\n      offset,\r\n      end,\r\n      stride,\r\n      false,\r\n      false,\r\n    );\r\n    const moveToLineToInstruction = [\r\n      CanvasInstruction.MOVE_TO_LINE_TO,\r\n      myBegin,\r\n      myEnd,\r\n    ];\r\n    this.instructions.push(moveToLineToInstruction);\r\n    this.hitDetectionInstructions.push(moveToLineToInstruction);\r\n    return end;\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../../geom/LineString.js\").default|import(\"../Feature.js\").default} lineStringGeometry Line string geometry.\r\n   * @param {import(\"../../Feature.js\").FeatureLike} feature Feature.\r\n   * @param {number} [index] Render order index.\r\n   * @override\r\n   */\r\n  drawLineString(lineStringGeometry, feature, index) {\r\n    const state = this.state;\r\n    const strokeStyle = state.strokeStyle;\r\n    const lineWidth = state.lineWidth;\r\n    if (strokeStyle === undefined || lineWidth === undefined) {\r\n      return;\r\n    }\r\n    this.updateStrokeStyle(state, this.applyStroke);\r\n    this.beginGeometry(lineStringGeometry, feature, index);\r\n    this.hitDetectionInstructions.push(\r\n      [\r\n        CanvasInstruction.SET_STROKE_STYLE,\r\n        state.strokeStyle,\r\n        state.lineWidth,\r\n        state.lineCap,\r\n        state.lineJoin,\r\n        state.miterLimit,\r\n        defaultLineDash,\r\n        defaultLineDashOffset,\r\n      ],\r\n      beginPathInstruction,\r\n    );\r\n    const flatCoordinates = lineStringGeometry.getFlatCoordinates();\r\n    const stride = lineStringGeometry.getStride();\r\n    this.drawFlatCoordinates_(\r\n      flatCoordinates,\r\n      0,\r\n      flatCoordinates.length,\r\n      stride,\r\n    );\r\n    this.hitDetectionInstructions.push(strokeInstruction);\r\n    this.endGeometry(feature);\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../../geom/MultiLineString.js\").default|import(\"../Feature.js\").default} multiLineStringGeometry MultiLineString geometry.\r\n   * @param {import(\"../../Feature.js\").FeatureLike} feature Feature.\r\n   * @param {number} [index] Render order index.\r\n   * @override\r\n   */\r\n  drawMultiLineString(multiLineStringGeometry, feature, index) {\r\n    const state = this.state;\r\n    const strokeStyle = state.strokeStyle;\r\n    const lineWidth = state.lineWidth;\r\n    if (strokeStyle === undefined || lineWidth === undefined) {\r\n      return;\r\n    }\r\n    this.updateStrokeStyle(state, this.applyStroke);\r\n    this.beginGeometry(multiLineStringGeometry, feature, index);\r\n    this.hitDetectionInstructions.push(\r\n      [\r\n        CanvasInstruction.SET_STROKE_STYLE,\r\n        state.strokeStyle,\r\n        state.lineWidth,\r\n        state.lineCap,\r\n        state.lineJoin,\r\n        state.miterLimit,\r\n        defaultLineDash,\r\n        defaultLineDashOffset,\r\n      ],\r\n      beginPathInstruction,\r\n    );\r\n    const ends = multiLineStringGeometry.getEnds();\r\n    const flatCoordinates = multiLineStringGeometry.getFlatCoordinates();\r\n    const stride = multiLineStringGeometry.getStride();\r\n    let offset = 0;\r\n    for (let i = 0, ii = ends.length; i < ii; ++i) {\r\n      offset = this.drawFlatCoordinates_(\r\n        flatCoordinates,\r\n        offset,\r\n        /** @type {number} */ (ends[i]),\r\n        stride,\r\n      );\r\n    }\r\n    this.hitDetectionInstructions.push(strokeInstruction);\r\n    this.endGeometry(feature);\r\n  }\r\n\r\n  /**\r\n   * @return {import(\"../canvas.js\").SerializableInstructions} the serializable instructions.\r\n   * @override\r\n   */\r\n  finish() {\r\n    const state = this.state;\r\n    if (\r\n      state.lastStroke != undefined &&\r\n      state.lastStroke != this.coordinates.length\r\n    ) {\r\n      this.instructions.push(strokeInstruction);\r\n    }\r\n    this.reverseHitDetectionInstructions();\r\n    this.state = null;\r\n    return super.finish();\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../canvas.js\").FillStrokeState} state State.\r\n   * @override\r\n   */\r\n  applyStroke(state) {\r\n    if (\r\n      state.lastStroke != undefined &&\r\n      state.lastStroke != this.coordinates.length\r\n    ) {\r\n      this.instructions.push(strokeInstruction);\r\n      state.lastStroke = this.coordinates.length;\r\n    }\r\n    state.lastStroke = 0;\r\n    super.applyStroke(state);\r\n    this.instructions.push(beginPathInstruction);\r\n  }\r\n}\r\n\r\nexport default CanvasLineStringBuilder;\r\n","/**\r\n * @module ol/render/canvas/PolygonBuilder\r\n */\r\nimport {snap} from '../../geom/flat/simplify.js';\r\nimport {\r\n  defaultFillStyle,\r\n  defaultLineDash,\r\n  defaultLineDashOffset,\r\n} from '../canvas.js';\r\nimport CanvasBuilder from './Builder.js';\r\nimport CanvasInstruction, {\r\n  beginPathInstruction,\r\n  closePathInstruction,\r\n  fillInstruction,\r\n  strokeInstruction,\r\n} from './Instruction.js';\r\n\r\nclass CanvasPolygonBuilder extends CanvasBuilder {\r\n  /**\r\n   * @param {number} tolerance Tolerance.\r\n   * @param {import(\"../../extent.js\").Extent} maxExtent Maximum extent.\r\n   * @param {number} resolution Resolution.\r\n   * @param {number} pixelRatio Pixel ratio.\r\n   */\r\n  constructor(tolerance, maxExtent, resolution, pixelRatio) {\r\n    super(tolerance, maxExtent, resolution, pixelRatio);\r\n  }\r\n\r\n  /**\r\n   * @param {Array<number>} flatCoordinates Flat coordinates.\r\n   * @param {number} offset Offset.\r\n   * @param {Array<number>} ends Ends.\r\n   * @param {number} stride Stride.\r\n   * @private\r\n   * @return {number} End.\r\n   */\r\n  drawFlatCoordinatess_(flatCoordinates, offset, ends, stride) {\r\n    const state = this.state;\r\n    const fill = state.fillStyle !== undefined;\r\n    const stroke = state.strokeStyle !== undefined;\r\n    const numEnds = ends.length;\r\n    this.instructions.push(beginPathInstruction);\r\n    this.hitDetectionInstructions.push(beginPathInstruction);\r\n    for (let i = 0; i < numEnds; ++i) {\r\n      const end = ends[i];\r\n      const myBegin = this.coordinates.length;\r\n      const myEnd = this.appendFlatLineCoordinates(\r\n        flatCoordinates,\r\n        offset,\r\n        end,\r\n        stride,\r\n        true,\r\n        !stroke,\r\n      );\r\n      const moveToLineToInstruction = [\r\n        CanvasInstruction.MOVE_TO_LINE_TO,\r\n        myBegin,\r\n        myEnd,\r\n      ];\r\n      this.instructions.push(moveToLineToInstruction);\r\n      this.hitDetectionInstructions.push(moveToLineToInstruction);\r\n      if (stroke) {\r\n        // Performance optimization: only call closePath() when we have a stroke.\r\n        // Otherwise the ring is closed already (see appendFlatLineCoordinates above).\r\n        this.instructions.push(closePathInstruction);\r\n        this.hitDetectionInstructions.push(closePathInstruction);\r\n      }\r\n      offset = end;\r\n    }\r\n    if (fill) {\r\n      this.instructions.push(fillInstruction);\r\n      this.hitDetectionInstructions.push(fillInstruction);\r\n    }\r\n    if (stroke) {\r\n      this.instructions.push(strokeInstruction);\r\n      this.hitDetectionInstructions.push(strokeInstruction);\r\n    }\r\n    return offset;\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../../geom/Circle.js\").default} circleGeometry Circle geometry.\r\n   * @param {import(\"../../Feature.js\").default} feature Feature.\r\n   * @param {number} [index] Render order index.\r\n   * @override\r\n   */\r\n  drawCircle(circleGeometry, feature, index) {\r\n    const state = this.state;\r\n    const fillStyle = state.fillStyle;\r\n    const strokeStyle = state.strokeStyle;\r\n    if (fillStyle === undefined && strokeStyle === undefined) {\r\n      return;\r\n    }\r\n    this.setFillStrokeStyles_();\r\n    this.beginGeometry(circleGeometry, feature, index);\r\n    if (state.fillStyle !== undefined) {\r\n      this.hitDetectionInstructions.push([\r\n        CanvasInstruction.SET_FILL_STYLE,\r\n        defaultFillStyle,\r\n      ]);\r\n    }\r\n    if (state.strokeStyle !== undefined) {\r\n      this.hitDetectionInstructions.push([\r\n        CanvasInstruction.SET_STROKE_STYLE,\r\n        state.strokeStyle,\r\n        state.lineWidth,\r\n        state.lineCap,\r\n        state.lineJoin,\r\n        state.miterLimit,\r\n        defaultLineDash,\r\n        defaultLineDashOffset,\r\n      ]);\r\n    }\r\n    const flatCoordinates = circleGeometry.getFlatCoordinates();\r\n    const stride = circleGeometry.getStride();\r\n    const myBegin = this.coordinates.length;\r\n    this.appendFlatLineCoordinates(\r\n      flatCoordinates,\r\n      0,\r\n      flatCoordinates.length,\r\n      stride,\r\n      false,\r\n      false,\r\n    );\r\n    const circleInstruction = [CanvasInstruction.CIRCLE, myBegin];\r\n    this.instructions.push(beginPathInstruction, circleInstruction);\r\n    this.hitDetectionInstructions.push(beginPathInstruction, circleInstruction);\r\n    if (state.fillStyle !== undefined) {\r\n      this.instructions.push(fillInstruction);\r\n      this.hitDetectionInstructions.push(fillInstruction);\r\n    }\r\n    if (state.strokeStyle !== undefined) {\r\n      this.instructions.push(strokeInstruction);\r\n      this.hitDetectionInstructions.push(strokeInstruction);\r\n    }\r\n    this.endGeometry(feature);\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../../geom/Polygon.js\").default|import(\"../Feature.js\").default} polygonGeometry Polygon geometry.\r\n   * @param {import(\"../../Feature.js\").FeatureLike} feature Feature.\r\n   * @param {number} [index] Render order index.\r\n   * @override\r\n   */\r\n  drawPolygon(polygonGeometry, feature, index) {\r\n    const state = this.state;\r\n    const fillStyle = state.fillStyle;\r\n    const strokeStyle = state.strokeStyle;\r\n    if (fillStyle === undefined && strokeStyle === undefined) {\r\n      return;\r\n    }\r\n    this.setFillStrokeStyles_();\r\n    this.beginGeometry(polygonGeometry, feature, index);\r\n    if (state.fillStyle !== undefined) {\r\n      this.hitDetectionInstructions.push([\r\n        CanvasInstruction.SET_FILL_STYLE,\r\n        defaultFillStyle,\r\n      ]);\r\n    }\r\n    if (state.strokeStyle !== undefined) {\r\n      this.hitDetectionInstructions.push([\r\n        CanvasInstruction.SET_STROKE_STYLE,\r\n        state.strokeStyle,\r\n        state.lineWidth,\r\n        state.lineCap,\r\n        state.lineJoin,\r\n        state.miterLimit,\r\n        defaultLineDash,\r\n        defaultLineDashOffset,\r\n      ]);\r\n    }\r\n    const ends = polygonGeometry.getEnds();\r\n    const flatCoordinates = polygonGeometry.getOrientedFlatCoordinates();\r\n    const stride = polygonGeometry.getStride();\r\n    this.drawFlatCoordinatess_(\r\n      flatCoordinates,\r\n      0,\r\n      /** @type {Array<number>} */ (ends),\r\n      stride,\r\n    );\r\n    this.endGeometry(feature);\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../../geom/MultiPolygon.js\").default} multiPolygonGeometry MultiPolygon geometry.\r\n   * @param {import(\"../../Feature.js\").FeatureLike} feature Feature.\r\n   * @param {number} [index] Render order index.\r\n   * @override\r\n   */\r\n  drawMultiPolygon(multiPolygonGeometry, feature, index) {\r\n    const state = this.state;\r\n    const fillStyle = state.fillStyle;\r\n    const strokeStyle = state.strokeStyle;\r\n    if (fillStyle === undefined && strokeStyle === undefined) {\r\n      return;\r\n    }\r\n    this.setFillStrokeStyles_();\r\n    this.beginGeometry(multiPolygonGeometry, feature, index);\r\n    if (state.fillStyle !== undefined) {\r\n      this.hitDetectionInstructions.push([\r\n        CanvasInstruction.SET_FILL_STYLE,\r\n        defaultFillStyle,\r\n      ]);\r\n    }\r\n    if (state.strokeStyle !== undefined) {\r\n      this.hitDetectionInstructions.push([\r\n        CanvasInstruction.SET_STROKE_STYLE,\r\n        state.strokeStyle,\r\n        state.lineWidth,\r\n        state.lineCap,\r\n        state.lineJoin,\r\n        state.miterLimit,\r\n        defaultLineDash,\r\n        defaultLineDashOffset,\r\n      ]);\r\n    }\r\n    const endss = multiPolygonGeometry.getEndss();\r\n    const flatCoordinates = multiPolygonGeometry.getOrientedFlatCoordinates();\r\n    const stride = multiPolygonGeometry.getStride();\r\n    let offset = 0;\r\n    for (let i = 0, ii = endss.length; i < ii; ++i) {\r\n      offset = this.drawFlatCoordinatess_(\r\n        flatCoordinates,\r\n        offset,\r\n        endss[i],\r\n        stride,\r\n      );\r\n    }\r\n    this.endGeometry(feature);\r\n  }\r\n\r\n  /**\r\n   * @return {import(\"../canvas.js\").SerializableInstructions} the serializable instructions.\r\n   * @override\r\n   */\r\n  finish() {\r\n    this.reverseHitDetectionInstructions();\r\n    this.state = null;\r\n    // We want to preserve topology when drawing polygons.  Polygons are\r\n    // simplified using quantization and point elimination. However, we might\r\n    // have received a mix of quantized and non-quantized geometries, so ensure\r\n    // that all are quantized by quantizing all coordinates in the batch.\r\n    const tolerance = this.tolerance;\r\n    if (tolerance !== 0) {\r\n      const coordinates = this.coordinates;\r\n      for (let i = 0, ii = coordinates.length; i < ii; ++i) {\r\n        coordinates[i] = snap(coordinates[i], tolerance);\r\n      }\r\n    }\r\n    return super.finish();\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  setFillStrokeStyles_() {\r\n    const state = this.state;\r\n    const fillStyle = state.fillStyle;\r\n    if (fillStyle !== undefined) {\r\n      this.updateFillStyle(state, this.createFill);\r\n    }\r\n    if (state.strokeStyle !== undefined) {\r\n      this.updateStrokeStyle(state, this.applyStroke);\r\n    }\r\n  }\r\n}\r\n\r\nexport default CanvasPolygonBuilder;\r\n","/**\r\n * @module ol/render/canvas/TextBuilder\r\n */\r\nimport {asColorLike} from '../../colorlike.js';\r\nimport {intersects} from '../../extent.js';\r\nimport {lineChunk} from '../../geom/flat/linechunk.js';\r\nimport {matchingChunk} from '../../geom/flat/straightchunk.js';\r\nimport {getUid} from '../../util.js';\r\nimport {\r\n  defaultFillStyle,\r\n  defaultFont,\r\n  defaultLineCap,\r\n  defaultLineDash,\r\n  defaultLineDashOffset,\r\n  defaultLineJoin,\r\n  defaultLineWidth,\r\n  defaultMiterLimit,\r\n  defaultPadding,\r\n  defaultStrokeStyle,\r\n  defaultTextAlign,\r\n  defaultTextBaseline,\r\n  registerFont,\r\n} from '../canvas.js';\r\nimport CanvasBuilder from './Builder.js';\r\nimport CanvasInstruction from './Instruction.js';\r\n/**\r\n * @const\r\n * @type {{left: 0, center: 0.5, right: 1, top: 0, middle: 0.5, hanging: 0.2, alphabetic: 0.8, ideographic: 0.8, bottom: 1}}\r\n */\r\nexport const TEXT_ALIGN = {\r\n  'left': 0,\r\n  'center': 0.5,\r\n  'right': 1,\r\n  'top': 0,\r\n  'middle': 0.5,\r\n  'hanging': 0.2,\r\n  'alphabetic': 0.8,\r\n  'ideographic': 0.8,\r\n  'bottom': 1,\r\n};\r\n\r\nclass CanvasTextBuilder extends CanvasBuilder {\r\n  /**\r\n   * @param {number} tolerance Tolerance.\r\n   * @param {import(\"../../extent.js\").Extent} maxExtent Maximum extent.\r\n   * @param {number} resolution Resolution.\r\n   * @param {number} pixelRatio Pixel ratio.\r\n   */\r\n  constructor(tolerance, maxExtent, resolution, pixelRatio) {\r\n    super(tolerance, maxExtent, resolution, pixelRatio);\r\n\r\n    /**\r\n     * @private\r\n     * @type {Array<HTMLCanvasElement>}\r\n     */\r\n    this.labels_ = null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {string|Array<string>}\r\n     */\r\n    this.text_ = '';\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.textOffsetX_ = 0;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.textOffsetY_ = 0;\r\n\r\n    /**\r\n     * @private\r\n     * @type {boolean|undefined}\r\n     */\r\n    this.textRotateWithView_ = undefined;\r\n\r\n    /**\r\n     * @private\r\n     * @type {boolean|undefined}\r\n     */\r\n    this.textKeepUpright_ = undefined;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.textRotation_ = 0;\r\n\r\n    /**\r\n     * @private\r\n     * @type {?import(\"../canvas.js\").FillState}\r\n     */\r\n    this.textFillState_ = null;\r\n\r\n    /**\r\n     * @type {!Object<string, import(\"../canvas.js\").FillState>}\r\n     */\r\n    this.fillStates = {};\r\n    this.fillStates[defaultFillStyle] = {fillStyle: defaultFillStyle};\r\n\r\n    /**\r\n     * @private\r\n     * @type {?import(\"../canvas.js\").StrokeState}\r\n     */\r\n    this.textStrokeState_ = null;\r\n\r\n    /**\r\n     * @type {!Object<string, import(\"../canvas.js\").StrokeState>}\r\n     */\r\n    this.strokeStates = {};\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"../canvas.js\").TextState}\r\n     */\r\n    this.textState_ = /** @type {import(\"../canvas.js\").TextState} */ ({});\r\n\r\n    /**\r\n     * @type {!Object<string, import(\"../canvas.js\").TextState>}\r\n     */\r\n    this.textStates = {};\r\n\r\n    /**\r\n     * @private\r\n     * @type {string}\r\n     */\r\n    this.textKey_ = '';\r\n\r\n    /**\r\n     * @private\r\n     * @type {string}\r\n     */\r\n    this.fillKey_ = '';\r\n\r\n    /**\r\n     * @private\r\n     * @type {string}\r\n     */\r\n    this.strokeKey_ = '';\r\n\r\n    /**\r\n     * @private\r\n     * @type {import('../../style/Style.js').DeclutterMode}\r\n     */\r\n    this.declutterMode_ = undefined;\r\n\r\n    /**\r\n     * Data shared with an image builder for combined decluttering.\r\n     * @private\r\n     * @type {import(\"../canvas.js\").DeclutterImageWithText}\r\n     */\r\n    this.declutterImageWithText_ = undefined;\r\n  }\r\n\r\n  /**\r\n   * @return {import(\"../canvas.js\").SerializableInstructions} the serializable instructions.\r\n   * @override\r\n   */\r\n  finish() {\r\n    const instructions = super.finish();\r\n    instructions.textStates = this.textStates;\r\n    instructions.fillStates = this.fillStates;\r\n    instructions.strokeStates = this.strokeStates;\r\n    return instructions;\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../../geom/SimpleGeometry.js\").default|import(\"../Feature.js\").default} geometry Geometry.\r\n   * @param {import(\"../../Feature.js\").FeatureLike} feature Feature.\r\n   * @param {number} [index] Render order index.\r\n   * @override\r\n   */\r\n  drawText(geometry, feature, index) {\r\n    const fillState = this.textFillState_;\r\n    const strokeState = this.textStrokeState_;\r\n    const textState = this.textState_;\r\n    if (this.text_ === '' || !textState || (!fillState && !strokeState)) {\r\n      return;\r\n    }\r\n\r\n    const coordinates = this.coordinates;\r\n    let begin = coordinates.length;\r\n\r\n    const geometryType = geometry.getType();\r\n    let flatCoordinates = null;\r\n    let stride = geometry.getStride();\r\n\r\n    if (\r\n      textState.placement === 'line' &&\r\n      (geometryType == 'LineString' ||\r\n        geometryType == 'MultiLineString' ||\r\n        geometryType == 'Polygon' ||\r\n        geometryType == 'MultiPolygon')\r\n    ) {\r\n      if (!intersects(this.maxExtent, geometry.getExtent())) {\r\n        return;\r\n      }\r\n      let ends;\r\n      flatCoordinates = geometry.getFlatCoordinates();\r\n      if (geometryType == 'LineString') {\r\n        ends = [flatCoordinates.length];\r\n      } else if (geometryType == 'MultiLineString') {\r\n        ends = /** @type {import(\"../../geom/MultiLineString.js\").default} */ (\r\n          geometry\r\n        ).getEnds();\r\n      } else if (geometryType == 'Polygon') {\r\n        ends = /** @type {import(\"../../geom/Polygon.js\").default} */ (geometry)\r\n          .getEnds()\r\n          .slice(0, 1);\r\n      } else if (geometryType == 'MultiPolygon') {\r\n        const endss =\r\n          /** @type {import(\"../../geom/MultiPolygon.js\").default} */ (\r\n            geometry\r\n          ).getEndss();\r\n        ends = [];\r\n        for (let i = 0, ii = endss.length; i < ii; ++i) {\r\n          ends.push(endss[i][0]);\r\n        }\r\n      }\r\n      this.beginGeometry(geometry, feature, index);\r\n      const repeat = textState.repeat;\r\n      const textAlign = repeat ? undefined : textState.textAlign;\r\n      // No `justify` support for line placement.\r\n      let flatOffset = 0;\r\n      for (let o = 0, oo = ends.length; o < oo; ++o) {\r\n        let chunks;\r\n        if (repeat) {\r\n          chunks = lineChunk(\r\n            repeat * this.resolution,\r\n            flatCoordinates,\r\n            flatOffset,\r\n            ends[o],\r\n            stride,\r\n          );\r\n        } else {\r\n          chunks = [flatCoordinates.slice(flatOffset, ends[o])];\r\n        }\r\n        for (let c = 0, cc = chunks.length; c < cc; ++c) {\r\n          const chunk = chunks[c];\r\n          let chunkBegin = 0;\r\n          let chunkEnd = chunk.length;\r\n          if (textAlign == undefined) {\r\n            const range = matchingChunk(\r\n              textState.maxAngle,\r\n              chunk,\r\n              0,\r\n              chunk.length,\r\n              2,\r\n            );\r\n            chunkBegin = range[0];\r\n            chunkEnd = range[1];\r\n          }\r\n          for (let i = chunkBegin; i < chunkEnd; i += stride) {\r\n            coordinates.push(chunk[i], chunk[i + 1]);\r\n          }\r\n          const end = coordinates.length;\r\n          flatOffset = ends[o];\r\n          this.drawChars_(begin, end);\r\n          begin = end;\r\n        }\r\n      }\r\n      this.endGeometry(feature);\r\n    } else {\r\n      let geometryWidths = textState.overflow ? null : [];\r\n      switch (geometryType) {\r\n        case 'Point':\r\n        case 'MultiPoint':\r\n          flatCoordinates =\r\n            /** @type {import(\"../../geom/MultiPoint.js\").default} */ (\r\n              geometry\r\n            ).getFlatCoordinates();\r\n          break;\r\n        case 'LineString':\r\n          flatCoordinates =\r\n            /** @type {import(\"../../geom/LineString.js\").default} */ (\r\n              geometry\r\n            ).getFlatMidpoint();\r\n          break;\r\n        case 'Circle':\r\n          flatCoordinates =\r\n            /** @type {import(\"../../geom/Circle.js\").default} */ (\r\n              geometry\r\n            ).getCenter();\r\n          break;\r\n        case 'MultiLineString':\r\n          flatCoordinates =\r\n            /** @type {import(\"../../geom/MultiLineString.js\").default} */ (\r\n              geometry\r\n            ).getFlatMidpoints();\r\n          stride = 2;\r\n          break;\r\n        case 'Polygon':\r\n          flatCoordinates =\r\n            /** @type {import(\"../../geom/Polygon.js\").default} */ (\r\n              geometry\r\n            ).getFlatInteriorPoint();\r\n          if (!textState.overflow) {\r\n            geometryWidths.push(flatCoordinates[2] / this.resolution);\r\n          }\r\n          stride = 3;\r\n          break;\r\n        case 'MultiPolygon':\r\n          const interiorPoints =\r\n            /** @type {import(\"../../geom/MultiPolygon.js\").default} */ (\r\n              geometry\r\n            ).getFlatInteriorPoints();\r\n          flatCoordinates = [];\r\n          for (let i = 0, ii = interiorPoints.length; i < ii; i += 3) {\r\n            if (!textState.overflow) {\r\n              geometryWidths.push(interiorPoints[i + 2] / this.resolution);\r\n            }\r\n            flatCoordinates.push(interiorPoints[i], interiorPoints[i + 1]);\r\n          }\r\n          if (flatCoordinates.length === 0) {\r\n            return;\r\n          }\r\n          stride = 2;\r\n          break;\r\n        default:\r\n      }\r\n      const end = this.appendFlatPointCoordinates(flatCoordinates, stride);\r\n      if (end === begin) {\r\n        return;\r\n      }\r\n      if (\r\n        geometryWidths &&\r\n        (end - begin) / 2 !== flatCoordinates.length / stride\r\n      ) {\r\n        let beg = begin / 2;\r\n        geometryWidths = geometryWidths.filter((w, i) => {\r\n          const keep =\r\n            coordinates[(beg + i) * 2] === flatCoordinates[i * stride] &&\r\n            coordinates[(beg + i) * 2 + 1] === flatCoordinates[i * stride + 1];\r\n          if (!keep) {\r\n            --beg;\r\n          }\r\n          return keep;\r\n        });\r\n      }\r\n\r\n      this.saveTextStates_();\r\n\r\n      const backgroundFill = textState.backgroundFill\r\n        ? this.createFill(this.fillStyleToState(textState.backgroundFill))\r\n        : null;\r\n      const backgroundStroke = textState.backgroundStroke\r\n        ? this.createStroke(this.strokeStyleToState(textState.backgroundStroke))\r\n        : null;\r\n\r\n      this.beginGeometry(geometry, feature, index);\r\n\r\n      // adjust padding for negative scale\r\n      let padding = textState.padding;\r\n      if (\r\n        padding != defaultPadding &&\r\n        (textState.scale[0] < 0 || textState.scale[1] < 0)\r\n      ) {\r\n        let p0 = textState.padding[0];\r\n        let p1 = textState.padding[1];\r\n        let p2 = textState.padding[2];\r\n        let p3 = textState.padding[3];\r\n        if (textState.scale[0] < 0) {\r\n          p1 = -p1;\r\n          p3 = -p3;\r\n        }\r\n        if (textState.scale[1] < 0) {\r\n          p0 = -p0;\r\n          p2 = -p2;\r\n        }\r\n        padding = [p0, p1, p2, p3];\r\n      }\r\n\r\n      // The image is unknown at this stage so we pass null; it will be computed at render time.\r\n      // For clarity, we pass NaN for offsetX, offsetY, width and height, which will be computed at\r\n      // render time.\r\n      const pixelRatio = this.pixelRatio;\r\n      this.instructions.push([\r\n        CanvasInstruction.DRAW_IMAGE,\r\n        begin,\r\n        end,\r\n        null,\r\n        NaN,\r\n        NaN,\r\n        NaN,\r\n        1,\r\n        0,\r\n        0,\r\n        this.textRotateWithView_,\r\n        this.textRotation_,\r\n        [1, 1],\r\n        NaN,\r\n        this.declutterMode_,\r\n        this.declutterImageWithText_,\r\n        padding == defaultPadding\r\n          ? defaultPadding\r\n          : padding.map(function (p) {\r\n              return p * pixelRatio;\r\n            }),\r\n        backgroundFill,\r\n        backgroundStroke,\r\n        this.text_,\r\n        this.textKey_,\r\n        this.strokeKey_,\r\n        this.fillKey_,\r\n        this.textOffsetX_,\r\n        this.textOffsetY_,\r\n        geometryWidths,\r\n      ]);\r\n      const scale = 1 / pixelRatio;\r\n      // Set default fill for hit detection background\r\n      const hitDetectionBackgroundFill = backgroundFill\r\n        ? backgroundFill.slice(0)\r\n        : null;\r\n      if (hitDetectionBackgroundFill) {\r\n        hitDetectionBackgroundFill[1] = defaultFillStyle;\r\n      }\r\n      this.hitDetectionInstructions.push([\r\n        CanvasInstruction.DRAW_IMAGE,\r\n        begin,\r\n        end,\r\n        null,\r\n        NaN,\r\n        NaN,\r\n        NaN,\r\n        1,\r\n        0,\r\n        0,\r\n        this.textRotateWithView_,\r\n        this.textRotation_,\r\n        [scale, scale],\r\n        NaN,\r\n        this.declutterMode_,\r\n        this.declutterImageWithText_,\r\n        padding,\r\n        hitDetectionBackgroundFill,\r\n        backgroundStroke,\r\n        this.text_,\r\n        this.textKey_,\r\n        this.strokeKey_,\r\n        this.fillKey_ ? defaultFillStyle : this.fillKey_,\r\n        this.textOffsetX_,\r\n        this.textOffsetY_,\r\n        geometryWidths,\r\n      ]);\r\n\r\n      this.endGeometry(feature);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  saveTextStates_() {\r\n    const strokeState = this.textStrokeState_;\r\n    const textState = this.textState_;\r\n    const fillState = this.textFillState_;\r\n\r\n    const strokeKey = this.strokeKey_;\r\n    if (strokeState) {\r\n      if (!(strokeKey in this.strokeStates)) {\r\n        this.strokeStates[strokeKey] = {\r\n          strokeStyle: strokeState.strokeStyle,\r\n          lineCap: strokeState.lineCap,\r\n          lineDashOffset: strokeState.lineDashOffset,\r\n          lineWidth: strokeState.lineWidth,\r\n          lineJoin: strokeState.lineJoin,\r\n          miterLimit: strokeState.miterLimit,\r\n          lineDash: strokeState.lineDash,\r\n        };\r\n      }\r\n    }\r\n    const textKey = this.textKey_;\r\n    if (!(textKey in this.textStates)) {\r\n      this.textStates[textKey] = {\r\n        font: textState.font,\r\n        textAlign: textState.textAlign || defaultTextAlign,\r\n        justify: textState.justify,\r\n        textBaseline: textState.textBaseline || defaultTextBaseline,\r\n        scale: textState.scale,\r\n      };\r\n    }\r\n    const fillKey = this.fillKey_;\r\n    if (fillState) {\r\n      if (!(fillKey in this.fillStates)) {\r\n        this.fillStates[fillKey] = {\r\n          fillStyle: fillState.fillStyle,\r\n        };\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {number} begin Begin.\r\n   * @param {number} end End.\r\n   */\r\n  drawChars_(begin, end) {\r\n    const strokeState = this.textStrokeState_;\r\n    const textState = this.textState_;\r\n\r\n    const strokeKey = this.strokeKey_;\r\n    const textKey = this.textKey_;\r\n    const fillKey = this.fillKey_;\r\n    this.saveTextStates_();\r\n\r\n    const pixelRatio = this.pixelRatio;\r\n    const baseline = TEXT_ALIGN[textState.textBaseline];\r\n\r\n    const offsetY = this.textOffsetY_ * pixelRatio;\r\n    const text = this.text_;\r\n    const strokeWidth = strokeState\r\n      ? (strokeState.lineWidth * Math.abs(textState.scale[0])) / 2\r\n      : 0;\r\n\r\n    this.instructions.push([\r\n      CanvasInstruction.DRAW_CHARS,\r\n      begin,\r\n      end,\r\n      baseline,\r\n      textState.overflow,\r\n      fillKey,\r\n      textState.maxAngle,\r\n      pixelRatio,\r\n      offsetY,\r\n      strokeKey,\r\n      strokeWidth * pixelRatio,\r\n      text,\r\n      textKey,\r\n      1,\r\n      this.declutterMode_,\r\n      this.textKeepUpright_,\r\n    ]);\r\n    this.hitDetectionInstructions.push([\r\n      CanvasInstruction.DRAW_CHARS,\r\n      begin,\r\n      end,\r\n      baseline,\r\n      textState.overflow,\r\n      fillKey ? defaultFillStyle : fillKey,\r\n      textState.maxAngle,\r\n      pixelRatio,\r\n      offsetY,\r\n      strokeKey,\r\n      strokeWidth * pixelRatio,\r\n      text,\r\n      textKey,\r\n      1 / pixelRatio,\r\n      this.declutterMode_,\r\n      this.textKeepUpright_,\r\n    ]);\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../../style/Text.js\").default} textStyle Text style.\r\n   * @param {Object} [sharedData] Shared data.\r\n   * @override\r\n   */\r\n  setTextStyle(textStyle, sharedData) {\r\n    let textState, fillState, strokeState;\r\n    if (!textStyle) {\r\n      this.text_ = '';\r\n    } else {\r\n      const textFillStyle = textStyle.getFill();\r\n      if (!textFillStyle) {\r\n        fillState = null;\r\n        this.textFillState_ = fillState;\r\n      } else {\r\n        fillState = this.textFillState_;\r\n        if (!fillState) {\r\n          fillState = /** @type {import(\"../canvas.js\").FillState} */ ({});\r\n          this.textFillState_ = fillState;\r\n        }\r\n        fillState.fillStyle = asColorLike(\r\n          textFillStyle.getColor() || defaultFillStyle,\r\n        );\r\n      }\r\n\r\n      const textStrokeStyle = textStyle.getStroke();\r\n      if (!textStrokeStyle) {\r\n        strokeState = null;\r\n        this.textStrokeState_ = strokeState;\r\n      } else {\r\n        strokeState = this.textStrokeState_;\r\n        if (!strokeState) {\r\n          strokeState = /** @type {import(\"../canvas.js\").StrokeState} */ ({});\r\n          this.textStrokeState_ = strokeState;\r\n        }\r\n        const lineDash = textStrokeStyle.getLineDash();\r\n        const lineDashOffset = textStrokeStyle.getLineDashOffset();\r\n        const lineWidth = textStrokeStyle.getWidth();\r\n        const miterLimit = textStrokeStyle.getMiterLimit();\r\n        strokeState.lineCap = textStrokeStyle.getLineCap() || defaultLineCap;\r\n        strokeState.lineDash = lineDash ? lineDash.slice() : defaultLineDash;\r\n        strokeState.lineDashOffset =\r\n          lineDashOffset === undefined ? defaultLineDashOffset : lineDashOffset;\r\n        strokeState.lineJoin = textStrokeStyle.getLineJoin() || defaultLineJoin;\r\n        strokeState.lineWidth =\r\n          lineWidth === undefined ? defaultLineWidth : lineWidth;\r\n        strokeState.miterLimit =\r\n          miterLimit === undefined ? defaultMiterLimit : miterLimit;\r\n        strokeState.strokeStyle = asColorLike(\r\n          textStrokeStyle.getColor() || defaultStrokeStyle,\r\n        );\r\n      }\r\n\r\n      textState = this.textState_;\r\n      const font = textStyle.getFont() || defaultFont;\r\n      registerFont(font);\r\n      const textScale = textStyle.getScaleArray();\r\n      textState.overflow = textStyle.getOverflow();\r\n      textState.font = font;\r\n      textState.maxAngle = textStyle.getMaxAngle();\r\n      textState.placement = textStyle.getPlacement();\r\n      textState.textAlign = textStyle.getTextAlign();\r\n      textState.repeat = textStyle.getRepeat();\r\n      textState.justify = textStyle.getJustify();\r\n      textState.textBaseline =\r\n        textStyle.getTextBaseline() || defaultTextBaseline;\r\n      textState.backgroundFill = textStyle.getBackgroundFill();\r\n      textState.backgroundStroke = textStyle.getBackgroundStroke();\r\n      textState.padding = textStyle.getPadding() || defaultPadding;\r\n      textState.scale = textScale === undefined ? [1, 1] : textScale;\r\n\r\n      const textOffsetX = textStyle.getOffsetX();\r\n      const textOffsetY = textStyle.getOffsetY();\r\n      const textRotateWithView = textStyle.getRotateWithView();\r\n      const textKeepUpright = textStyle.getKeepUpright();\r\n      const textRotation = textStyle.getRotation();\r\n      this.text_ = textStyle.getText() || '';\r\n      this.textOffsetX_ = textOffsetX === undefined ? 0 : textOffsetX;\r\n      this.textOffsetY_ = textOffsetY === undefined ? 0 : textOffsetY;\r\n      this.textRotateWithView_ =\r\n        textRotateWithView === undefined ? false : textRotateWithView;\r\n      this.textKeepUpright_ =\r\n        textKeepUpright === undefined ? true : textKeepUpright;\r\n      this.textRotation_ = textRotation === undefined ? 0 : textRotation;\r\n\r\n      this.strokeKey_ = strokeState\r\n        ? (typeof strokeState.strokeStyle == 'string'\r\n            ? strokeState.strokeStyle\r\n            : getUid(strokeState.strokeStyle)) +\r\n          strokeState.lineCap +\r\n          strokeState.lineDashOffset +\r\n          '|' +\r\n          strokeState.lineWidth +\r\n          strokeState.lineJoin +\r\n          strokeState.miterLimit +\r\n          '[' +\r\n          strokeState.lineDash.join() +\r\n          ']'\r\n        : '';\r\n      this.textKey_ =\r\n        textState.font +\r\n        textState.scale +\r\n        (textState.textAlign || '?') +\r\n        (textState.repeat || '?') +\r\n        (textState.justify || '?') +\r\n        (textState.textBaseline || '?');\r\n      this.fillKey_ =\r\n        fillState && fillState.fillStyle\r\n          ? typeof fillState.fillStyle == 'string'\r\n            ? fillState.fillStyle\r\n            : '|' + getUid(fillState.fillStyle)\r\n          : '';\r\n    }\r\n    this.declutterMode_ = textStyle.getDeclutterMode();\r\n    this.declutterImageWithText_ = sharedData;\r\n  }\r\n}\r\n\r\nexport default CanvasTextBuilder;\r\n","import {lerp} from '../../math.js';\r\n\r\n/**\r\n * Creates chunks of equal length from a linestring\r\n * @param {number} chunkLength Length of each chunk.\r\n * @param {Array<number>} flatCoordinates Flat coordinates.\r\n * @param {number} offset Start offset of the `flatCoordinates`.\r\n * @param {number} end End offset of the `flatCoordinates`.\r\n * @param {number} stride Stride.\r\n * @return {Array<Array<number>>} Chunks of linestrings with stride 2.\r\n */\r\nexport function lineChunk(chunkLength, flatCoordinates, offset, end, stride) {\r\n  const chunks = [];\r\n  let cursor = offset;\r\n  let chunkM = 0;\r\n  let currentChunk = flatCoordinates.slice(offset, 2);\r\n  while (chunkM < chunkLength && cursor + stride < end) {\r\n    const [x1, y1] = currentChunk.slice(-2);\r\n    const x2 = flatCoordinates[cursor + stride];\r\n    const y2 = flatCoordinates[cursor + stride + 1];\r\n    const segmentLength = Math.sqrt(\r\n      (x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1),\r\n    );\r\n    chunkM += segmentLength;\r\n    if (chunkM >= chunkLength) {\r\n      const m = (chunkLength - chunkM + segmentLength) / segmentLength;\r\n      const x = lerp(x1, x2, m);\r\n      const y = lerp(y1, y2, m);\r\n      currentChunk.push(x, y);\r\n      chunks.push(currentChunk);\r\n      currentChunk = [x, y];\r\n      if (chunkM == chunkLength) {\r\n        cursor += stride;\r\n      }\r\n      chunkM = 0;\r\n    } else if (chunkM < chunkLength) {\r\n      currentChunk.push(\r\n        flatCoordinates[cursor + stride],\r\n        flatCoordinates[cursor + stride + 1],\r\n      );\r\n      cursor += stride;\r\n    } else {\r\n      const missing = segmentLength - chunkM;\r\n      const x = lerp(x1, x2, missing / segmentLength);\r\n      const y = lerp(y1, y2, missing / segmentLength);\r\n      currentChunk.push(x, y);\r\n      chunks.push(currentChunk);\r\n      currentChunk = [x, y];\r\n      chunkM = 0;\r\n      cursor += stride;\r\n    }\r\n  }\r\n  if (chunkM > 0) {\r\n    chunks.push(currentChunk);\r\n  }\r\n  return chunks;\r\n}\r\n","/**\r\n * @module ol/geom/flat/straightchunk\r\n */\r\n\r\n/**\r\n * @param {number} maxAngle Maximum acceptable angle delta between segments.\r\n * @param {Array<number>} flatCoordinates Flat coordinates.\r\n * @param {number} offset Offset.\r\n * @param {number} end End.\r\n * @param {number} stride Stride.\r\n * @return {Array<number>} Start and end of the first suitable chunk of the\r\n * given `flatCoordinates`.\r\n */\r\nexport function matchingChunk(maxAngle, flatCoordinates, offset, end, stride) {\r\n  let chunkStart = offset;\r\n  let chunkEnd = offset;\r\n  let chunkM = 0;\r\n  let m = 0;\r\n  let start = offset;\r\n  let acos, i, m12, m23, x1, y1, x12, y12, x23, y23;\r\n  for (i = offset; i < end; i += stride) {\r\n    const x2 = flatCoordinates[i];\r\n    const y2 = flatCoordinates[i + 1];\r\n    if (x1 !== undefined) {\r\n      x23 = x2 - x1;\r\n      y23 = y2 - y1;\r\n      m23 = Math.sqrt(x23 * x23 + y23 * y23);\r\n      if (x12 !== undefined) {\r\n        m += m12;\r\n        acos = Math.acos((x12 * x23 + y12 * y23) / (m12 * m23));\r\n        if (acos > maxAngle) {\r\n          if (m > chunkM) {\r\n            chunkM = m;\r\n            chunkStart = start;\r\n            chunkEnd = i;\r\n          }\r\n          m = 0;\r\n          start = i - stride;\r\n        }\r\n      }\r\n      m12 = m23;\r\n      x12 = x23;\r\n      y12 = y23;\r\n    }\r\n    x1 = x2;\r\n    y1 = y2;\r\n  }\r\n  m += m23;\r\n  return m > chunkM ? [start, i] : [chunkStart, chunkEnd];\r\n}\r\n","/**\r\n * @module ol/render/canvas/ExecutorGroup\r\n */\r\n\r\nimport {ascending, descending} from '../../array.js';\r\nimport {createCanvasContext2D} from '../../dom.js';\r\nimport {buffer, createEmpty, extendCoordinate} from '../../extent.js';\r\nimport {transform2D} from '../../geom/flat/transform.js';\r\nimport {isEmpty} from '../../obj.js';\r\nimport {\r\n  compose as composeTransform,\r\n  create as createTransform,\r\n} from '../../transform.js';\r\nimport Executor from './Executor.js';\r\n\r\n/**\r\n * @const\r\n * @type {Array<import(\"../canvas.js\").BuilderType>}\r\n */\r\nexport const ALL = [\r\n  'Polygon',\r\n  'Circle',\r\n  'LineString',\r\n  'Image',\r\n  'Text',\r\n  'Default',\r\n];\r\n\r\n/**\r\n * @const\r\n * @type {Array<import(\"../canvas.js\").BuilderType>}\r\n */\r\nexport const DECLUTTER = ['Image', 'Text'];\r\n\r\n/**\r\n * @const\r\n * @type {Array<import(\"../canvas.js\").BuilderType>}\r\n */\r\nexport const NON_DECLUTTER = ALL.filter(\r\n  (builderType) => !DECLUTTER.includes(builderType),\r\n);\r\n\r\nclass ExecutorGroup {\r\n  /**\r\n   * @param {import(\"../../extent.js\").Extent} maxExtent Max extent for clipping. When a\r\n   * `maxExtent` was set on the Builder for this executor group, the same `maxExtent`\r\n   * should be set here, unless the target context does not exceed that extent (which\r\n   * can be the case when rendering to tiles).\r\n   * @param {number} resolution Resolution.\r\n   * @param {number} pixelRatio Pixel ratio.\r\n   * @param {boolean} overlaps The executor group can have overlapping geometries.\r\n   * @param {!Object<string, !Object<import(\"../canvas.js\").BuilderType, import(\"../canvas.js\").SerializableInstructions>>} allInstructions\r\n   * The serializable instructions.\r\n   * @param {number} [renderBuffer] Optional rendering buffer.\r\n   * @param {boolean} [deferredRendering] Enable deferred rendering with renderDeferred().\r\n   */\r\n  constructor(\r\n    maxExtent,\r\n    resolution,\r\n    pixelRatio,\r\n    overlaps,\r\n    allInstructions,\r\n    renderBuffer,\r\n    deferredRendering,\r\n  ) {\r\n    /**\r\n     * @private\r\n     * @type {import(\"../../extent.js\").Extent}\r\n     */\r\n    this.maxExtent_ = maxExtent;\r\n\r\n    /**\r\n     * @private\r\n     * @type {boolean}\r\n     */\r\n    this.overlaps_ = overlaps;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.pixelRatio_ = pixelRatio;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.resolution_ = resolution;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number|undefined}\r\n     */\r\n    this.renderBuffer_ = renderBuffer;\r\n\r\n    /**\r\n     * @private\r\n     * @type {!Object<string, !Object<string, import(\"./Executor\").default>>}\r\n     */\r\n    this.executorsByZIndex_ = {};\r\n\r\n    /**\r\n     * @private\r\n     * @type {CanvasRenderingContext2D}\r\n     */\r\n    this.hitDetectionContext_ = null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"../../transform.js\").Transform}\r\n     */\r\n    this.hitDetectionTransform_ = createTransform();\r\n\r\n    /**\r\n     * @private\r\n     * @type {CanvasRenderingContext2D}\r\n     */\r\n    this.renderedContext_ = null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {Object<number, Array<import(\"./ZIndexContext.js\").default>>}\r\n     */\r\n    this.deferredZIndexContexts_ = {};\r\n\r\n    this.createExecutors_(allInstructions, deferredRendering);\r\n  }\r\n\r\n  /**\r\n   * @param {CanvasRenderingContext2D} context Context.\r\n   * @param {import(\"../../transform.js\").Transform} transform Transform.\r\n   */\r\n  clip(context, transform) {\r\n    const flatClipCoords = this.getClipCoords(transform);\r\n    context.beginPath();\r\n    context.moveTo(flatClipCoords[0], flatClipCoords[1]);\r\n    context.lineTo(flatClipCoords[2], flatClipCoords[3]);\r\n    context.lineTo(flatClipCoords[4], flatClipCoords[5]);\r\n    context.lineTo(flatClipCoords[6], flatClipCoords[7]);\r\n    context.clip();\r\n  }\r\n\r\n  /**\r\n   * Create executors and populate them using the provided instructions.\r\n   * @private\r\n   * @param {!Object<string, !Object<string, import(\"../canvas.js\").SerializableInstructions>>} allInstructions The serializable instructions\r\n   * @param {boolean} deferredRendering Enable deferred rendering.\r\n   */\r\n  createExecutors_(allInstructions, deferredRendering) {\r\n    for (const zIndex in allInstructions) {\r\n      let executors = this.executorsByZIndex_[zIndex];\r\n      if (executors === undefined) {\r\n        executors = {};\r\n        this.executorsByZIndex_[zIndex] = executors;\r\n      }\r\n      const instructionByZindex = allInstructions[zIndex];\r\n      for (const builderType in instructionByZindex) {\r\n        const instructions = instructionByZindex[builderType];\r\n        executors[builderType] = new Executor(\r\n          this.resolution_,\r\n          this.pixelRatio_,\r\n          this.overlaps_,\r\n          instructions,\r\n          deferredRendering,\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {Array<import(\"../canvas.js\").BuilderType>} executors Executors.\r\n   * @return {boolean} Has executors of the provided types.\r\n   */\r\n  hasExecutors(executors) {\r\n    for (const zIndex in this.executorsByZIndex_) {\r\n      const candidates = this.executorsByZIndex_[zIndex];\r\n      for (let i = 0, ii = executors.length; i < ii; ++i) {\r\n        if (executors[i] in candidates) {\r\n          return true;\r\n        }\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../../coordinate.js\").Coordinate} coordinate Coordinate.\r\n   * @param {number} resolution Resolution.\r\n   * @param {number} rotation Rotation.\r\n   * @param {number} hitTolerance Hit tolerance in pixels.\r\n   * @param {function(import(\"../../Feature.js\").FeatureLike, import(\"../../geom/SimpleGeometry.js\").default, number): T} callback Feature callback.\r\n   * @param {Array<import(\"../../Feature.js\").FeatureLike>} declutteredFeatures Decluttered features.\r\n   * @return {T|undefined} Callback result.\r\n   * @template T\r\n   */\r\n  forEachFeatureAtCoordinate(\r\n    coordinate,\r\n    resolution,\r\n    rotation,\r\n    hitTolerance,\r\n    callback,\r\n    declutteredFeatures,\r\n  ) {\r\n    hitTolerance = Math.round(hitTolerance);\r\n    const contextSize = hitTolerance * 2 + 1;\r\n    const transform = composeTransform(\r\n      this.hitDetectionTransform_,\r\n      hitTolerance + 0.5,\r\n      hitTolerance + 0.5,\r\n      1 / resolution,\r\n      -1 / resolution,\r\n      -rotation,\r\n      -coordinate[0],\r\n      -coordinate[1],\r\n    );\r\n\r\n    const newContext = !this.hitDetectionContext_;\r\n    if (newContext) {\r\n      this.hitDetectionContext_ = createCanvasContext2D(\r\n        contextSize,\r\n        contextSize,\r\n      );\r\n    }\r\n    const context = this.hitDetectionContext_;\r\n\r\n    if (\r\n      context.canvas.width !== contextSize ||\r\n      context.canvas.height !== contextSize\r\n    ) {\r\n      context.canvas.width = contextSize;\r\n      context.canvas.height = contextSize;\r\n    } else if (!newContext) {\r\n      context.clearRect(0, 0, contextSize, contextSize);\r\n    }\r\n\r\n    /** @type {import(\"../../extent.js\").Extent|undefined} */\r\n    let hitExtent;\r\n    if (this.renderBuffer_ !== undefined) {\r\n      hitExtent = createEmpty();\r\n      extendCoordinate(hitExtent, coordinate);\r\n      buffer(\r\n        hitExtent,\r\n        resolution * (this.renderBuffer_ + hitTolerance),\r\n        hitExtent,\r\n      );\r\n    }\r\n\r\n    const indexes = getPixelIndexArray(hitTolerance);\r\n\r\n    /** @type {import(\"../canvas.js\").BuilderType} */\r\n    let builderType;\r\n\r\n    /**\r\n     * @param {import(\"../../Feature.js\").FeatureLike} feature Feature.\r\n     * @param {import(\"../../geom/SimpleGeometry.js\").default} geometry Geometry.\r\n     * @param {import('../../style/Style.js').DeclutterMode} declutterMode Declutter mode.\r\n     * @return {T|undefined} Callback result.\r\n     */\r\n    function featureCallback(feature, geometry, declutterMode) {\r\n      const imageData = context.getImageData(\r\n        0,\r\n        0,\r\n        contextSize,\r\n        contextSize,\r\n      ).data;\r\n      for (let i = 0, ii = indexes.length; i < ii; i++) {\r\n        if (imageData[indexes[i]] > 0) {\r\n          if (\r\n            !declutteredFeatures ||\r\n            declutterMode === 'none' ||\r\n            (builderType !== 'Image' && builderType !== 'Text') ||\r\n            declutteredFeatures.includes(feature)\r\n          ) {\r\n            const idx = (indexes[i] - 3) / 4;\r\n            const x = hitTolerance - (idx % contextSize);\r\n            const y = hitTolerance - ((idx / contextSize) | 0);\r\n            const result = callback(feature, geometry, x * x + y * y);\r\n            if (result) {\r\n              return result;\r\n            }\r\n          }\r\n          context.clearRect(0, 0, contextSize, contextSize);\r\n          break;\r\n        }\r\n      }\r\n      return undefined;\r\n    }\r\n\r\n    /** @type {Array<number>} */\r\n    const zs = Object.keys(this.executorsByZIndex_).map(Number);\r\n    zs.sort(ascending);\r\n\r\n    let i, j, executors, executor, result;\r\n    for (i = zs.length - 1; i >= 0; --i) {\r\n      const zIndexKey = zs[i].toString();\r\n      executors = this.executorsByZIndex_[zIndexKey];\r\n      for (j = ALL.length - 1; j >= 0; --j) {\r\n        builderType = ALL[j];\r\n        executor = executors[builderType];\r\n        if (executor !== undefined) {\r\n          result = executor.executeHitDetection(\r\n            context,\r\n            transform,\r\n            rotation,\r\n            featureCallback,\r\n            hitExtent,\r\n          );\r\n          if (result) {\r\n            return result;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return undefined;\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../../transform.js\").Transform} transform Transform.\r\n   * @return {Array<number>|null} Clip coordinates.\r\n   */\r\n  getClipCoords(transform) {\r\n    const maxExtent = this.maxExtent_;\r\n    if (!maxExtent) {\r\n      return null;\r\n    }\r\n    const minX = maxExtent[0];\r\n    const minY = maxExtent[1];\r\n    const maxX = maxExtent[2];\r\n    const maxY = maxExtent[3];\r\n    const flatClipCoords = [minX, minY, minX, maxY, maxX, maxY, maxX, minY];\r\n    transform2D(flatClipCoords, 0, 8, 2, transform, flatClipCoords);\r\n    return flatClipCoords;\r\n  }\r\n\r\n  /**\r\n   * @return {boolean} Is empty.\r\n   */\r\n  isEmpty() {\r\n    return isEmpty(this.executorsByZIndex_);\r\n  }\r\n\r\n  /**\r\n   * @param {CanvasRenderingContext2D} targetContext Context.\r\n   * @param {import('../../size.js').Size} scaledCanvasSize Scale of the context.\r\n   * @param {import(\"../../transform.js\").Transform} transform Transform.\r\n   * @param {number} viewRotation View rotation.\r\n   * @param {boolean} snapToPixel Snap point symbols and test to integer pixel.\r\n   * @param {Array<import(\"../canvas.js\").BuilderType>} [builderTypes] Ordered replay types to replay.\r\n   *     Default is {@link module:ol/render/replay~ALL}\r\n   * @param {import(\"rbush\").default<import('./Executor.js').DeclutterEntry>|null} [declutterTree] Declutter tree.\r\n   *     When set to null, no decluttering is done, even when the executor group has a `ZIndexContext`.\r\n   */\r\n  execute(\r\n    targetContext,\r\n    scaledCanvasSize,\r\n    transform,\r\n    viewRotation,\r\n    snapToPixel,\r\n    builderTypes,\r\n    declutterTree,\r\n  ) {\r\n    const zs = Object.keys(this.executorsByZIndex_).map(Number);\r\n    zs.sort(declutterTree ? descending : ascending);\r\n\r\n    builderTypes = builderTypes ? builderTypes : ALL;\r\n    const maxBuilderTypes = ALL.length;\r\n    for (let i = 0, ii = zs.length; i < ii; ++i) {\r\n      const zIndexKey = zs[i].toString();\r\n      const replays = this.executorsByZIndex_[zIndexKey];\r\n      for (let j = 0, jj = builderTypes.length; j < jj; ++j) {\r\n        const builderType = builderTypes[j];\r\n        const replay = replays[builderType];\r\n        if (replay !== undefined) {\r\n          const zIndexContext =\r\n            declutterTree === null ? undefined : replay.getZIndexContext();\r\n          const context = zIndexContext\r\n            ? zIndexContext.getContext()\r\n            : targetContext;\r\n          const requireClip =\r\n            this.maxExtent_ &&\r\n            builderType !== 'Image' &&\r\n            builderType !== 'Text';\r\n          if (requireClip) {\r\n            context.save();\r\n            // setup clipping so that the parts of over-simplified geometries are not\r\n            // visible outside the current extent when panning\r\n            this.clip(context, transform);\r\n          }\r\n          if (\r\n            !zIndexContext ||\r\n            builderType === 'Text' ||\r\n            builderType === 'Image'\r\n          ) {\r\n            replay.execute(\r\n              context,\r\n              scaledCanvasSize,\r\n              transform,\r\n              viewRotation,\r\n              snapToPixel,\r\n              declutterTree,\r\n            );\r\n          } else {\r\n            zIndexContext.pushFunction((context) =>\r\n              replay.execute(\r\n                context,\r\n                scaledCanvasSize,\r\n                transform,\r\n                viewRotation,\r\n                snapToPixel,\r\n                declutterTree,\r\n              ),\r\n            );\r\n          }\r\n          if (requireClip) {\r\n            context.restore();\r\n          }\r\n          if (zIndexContext) {\r\n            zIndexContext.offset();\r\n            const index = zs[i] * maxBuilderTypes + j;\r\n            if (!this.deferredZIndexContexts_[index]) {\r\n              this.deferredZIndexContexts_[index] = [];\r\n            }\r\n            this.deferredZIndexContexts_[index].push(zIndexContext);\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    this.renderedContext_ = targetContext;\r\n  }\r\n\r\n  getDeferredZIndexContexts() {\r\n    return this.deferredZIndexContexts_;\r\n  }\r\n\r\n  getRenderedContext() {\r\n    return this.renderedContext_;\r\n  }\r\n\r\n  renderDeferred() {\r\n    const deferredZIndexContexts = this.deferredZIndexContexts_;\r\n    const zs = Object.keys(deferredZIndexContexts).map(Number).sort(ascending);\r\n    for (let i = 0, ii = zs.length; i < ii; ++i) {\r\n      deferredZIndexContexts[zs[i]].forEach((zIndexContext) => {\r\n        zIndexContext.draw(this.renderedContext_); // FIXME Pass clip to replay for temporarily enabling clip\r\n        zIndexContext.clear();\r\n      });\r\n      deferredZIndexContexts[zs[i]].length = 0;\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * This cache is used to store arrays of indexes for calculated pixel circles\r\n * to increase performance.\r\n * It is a static property to allow each Replaygroup to access it.\r\n * @type {Object<number, Array<number>>}\r\n */\r\nconst circlePixelIndexArrayCache = {};\r\n\r\n/**\r\n * This methods creates an array with indexes of all pixels within a circle,\r\n * ordered by how close they are to the center.\r\n * A cache is used to increase performance.\r\n * @param {number} radius Radius.\r\n * @return {Array<number>} An array with indexes within a circle.\r\n */\r\nexport function getPixelIndexArray(radius) {\r\n  if (circlePixelIndexArrayCache[radius] !== undefined) {\r\n    return circlePixelIndexArrayCache[radius];\r\n  }\r\n\r\n  const size = radius * 2 + 1;\r\n  const maxDistanceSq = radius * radius;\r\n  const distances = new Array(maxDistanceSq + 1);\r\n  for (let i = 0; i <= radius; ++i) {\r\n    for (let j = 0; j <= radius; ++j) {\r\n      const distanceSq = i * i + j * j;\r\n      if (distanceSq > maxDistanceSq) {\r\n        break;\r\n      }\r\n      let distance = distances[distanceSq];\r\n      if (!distance) {\r\n        distance = [];\r\n        distances[distanceSq] = distance;\r\n      }\r\n      distance.push(((radius + i) * size + (radius + j)) * 4 + 3);\r\n      if (i > 0) {\r\n        distance.push(((radius - i) * size + (radius + j)) * 4 + 3);\r\n      }\r\n      if (j > 0) {\r\n        distance.push(((radius + i) * size + (radius - j)) * 4 + 3);\r\n        if (i > 0) {\r\n          distance.push(((radius - i) * size + (radius - j)) * 4 + 3);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  const pixelIndex = [];\r\n  for (let i = 0, ii = distances.length; i < ii; ++i) {\r\n    if (distances[i]) {\r\n      pixelIndex.push(...distances[i]);\r\n    }\r\n  }\r\n\r\n  circlePixelIndexArrayCache[radius] = pixelIndex;\r\n  return pixelIndex;\r\n}\r\n\r\nexport default ExecutorGroup;\r\n","/**\r\n * @module ol/render/canvas/Executor\r\n */\r\nimport {equals} from '../../array.js';\r\nimport {createEmpty, createOrUpdate, intersects} from '../../extent.js';\r\nimport {lineStringLength} from '../../geom/flat/length.js';\r\nimport {drawTextOnPath} from '../../geom/flat/textpath.js';\r\nimport {transform2D} from '../../geom/flat/transform.js';\r\nimport {\r\n  apply as applyTransform,\r\n  compose as composeTransform,\r\n  create as createTransform,\r\n  setFromArray as transformSetFromArray,\r\n} from '../../transform.js';\r\nimport ZIndexContext from '../canvas/ZIndexContext.js';\r\nimport {\r\n  defaultPadding,\r\n  defaultTextAlign,\r\n  defaultTextBaseline,\r\n  drawImageOrLabel,\r\n  getTextDimensions,\r\n  measureAndCacheTextWidth,\r\n} from '../canvas.js';\r\nimport CanvasInstruction from './Instruction.js';\r\nimport {TEXT_ALIGN} from './TextBuilder.js';\r\n\r\n/**\r\n * @typedef {import('../../structs/RBush.js').Entry<import('../../Feature.js').FeatureLike>} DeclutterEntry\r\n */\r\n\r\n/**\r\n * @typedef {Object} ImageOrLabelDimensions\r\n * @property {number} drawImageX DrawImageX.\r\n * @property {number} drawImageY DrawImageY.\r\n * @property {number} drawImageW DrawImageW.\r\n * @property {number} drawImageH DrawImageH.\r\n * @property {number} originX OriginX.\r\n * @property {number} originY OriginY.\r\n * @property {Array<number>} scale Scale.\r\n * @property {DeclutterEntry} declutterBox DeclutterBox.\r\n * @property {import(\"../../transform.js\").Transform} canvasTransform CanvasTransform.\r\n */\r\n\r\n/**\r\n * @typedef {{0: CanvasRenderingContext2D, 1: import('../../size.js').Size, 2: import(\"../canvas.js\").Label|HTMLImageElement|HTMLCanvasElement|HTMLVideoElement, 3: ImageOrLabelDimensions, 4: number, 5: Array<*>, 6: Array<*>}} ReplayImageOrLabelArgs\r\n */\r\n\r\n/**\r\n * @template T\r\n * @typedef {function(import(\"../../Feature.js\").FeatureLike, import(\"../../geom/SimpleGeometry.js\").default, import(\"../../style/Style.js\").DeclutterMode): T} FeatureCallback\r\n */\r\n\r\n/**\r\n * @type {import(\"../../extent.js\").Extent}\r\n */\r\nconst tmpExtent = createEmpty();\r\n\r\n/** @type {import(\"../../coordinate.js\").Coordinate} */\r\nconst p1 = [];\r\n/** @type {import(\"../../coordinate.js\").Coordinate} */\r\nconst p2 = [];\r\n/** @type {import(\"../../coordinate.js\").Coordinate} */\r\nconst p3 = [];\r\n/** @type {import(\"../../coordinate.js\").Coordinate} */\r\nconst p4 = [];\r\n\r\n/**\r\n * @param {ReplayImageOrLabelArgs} replayImageOrLabelArgs Arguments to replayImageOrLabel\r\n * @return {DeclutterEntry} Declutter rbush entry.\r\n */\r\nfunction getDeclutterBox(replayImageOrLabelArgs) {\r\n  return replayImageOrLabelArgs[3].declutterBox;\r\n}\r\n\r\nconst rtlRegEx = new RegExp(\r\n  /* eslint-disable prettier/prettier */\r\n  '[' +\r\n    String.fromCharCode(0x00591) + '-' + String.fromCharCode(0x008ff) +\r\n    String.fromCharCode(0x0fb1d) + '-' + String.fromCharCode(0x0fdff) +\r\n    String.fromCharCode(0x0fe70) + '-' + String.fromCharCode(0x0fefc) +\r\n    String.fromCharCode(0x10800) + '-' + String.fromCharCode(0x10fff) +\r\n    String.fromCharCode(0x1e800) + '-' + String.fromCharCode(0x1efff) +\r\n  ']'\r\n  /* eslint-enable prettier/prettier */\r\n);\r\n\r\n/**\r\n * @param {string} text Text.\r\n * @param {CanvasTextAlign} align Alignment.\r\n * @return {number} Text alignment.\r\n */\r\nfunction horizontalTextAlign(text, align) {\r\n  if (align === 'start') {\r\n    align = rtlRegEx.test(text) ? 'right' : 'left';\r\n  } else if (align === 'end') {\r\n    align = rtlRegEx.test(text) ? 'left' : 'right';\r\n  }\r\n  return TEXT_ALIGN[align];\r\n}\r\n\r\n/**\r\n * @param {Array<string>} acc Accumulator.\r\n * @param {string} line Line of text.\r\n * @param {number} i Index\r\n * @return {Array<string>} Accumulator.\r\n */\r\nfunction createTextChunks(acc, line, i) {\r\n  if (i > 0) {\r\n    acc.push('\\n', '');\r\n  }\r\n  acc.push(line, '');\r\n  return acc;\r\n}\r\n\r\n/**\r\n * Converts rich text to plain text for text along lines.\r\n * @param {string} result The resulting plain text.\r\n * @param {string} part Item of the rich text array.\r\n * @param {number} index Index of the item in the rich text array.\r\n * @return {string} The resulting plain text.\r\n */\r\nfunction richTextToPlainText(result, part, index) {\r\n  if (index % 2 === 0) {\r\n    result += part;\r\n  }\r\n  return result;\r\n}\r\n\r\nclass Executor {\r\n  /**\r\n   * @param {number} resolution Resolution.\r\n   * @param {number} pixelRatio Pixel ratio.\r\n   * @param {boolean} overlaps The replay can have overlapping geometries.\r\n   * @param {import(\"../canvas.js\").SerializableInstructions} instructions The serializable instructions.\r\n   * @param {boolean} [deferredRendering] Enable deferred rendering.\r\n   */\r\n  constructor(\r\n    resolution,\r\n    pixelRatio,\r\n    overlaps,\r\n    instructions,\r\n    deferredRendering,\r\n  ) {\r\n    /**\r\n     * @protected\r\n     * @type {boolean}\r\n     */\r\n    this.overlaps = overlaps;\r\n\r\n    /**\r\n     * @protected\r\n     * @type {number}\r\n     */\r\n    this.pixelRatio = pixelRatio;\r\n\r\n    /**\r\n     * @protected\r\n     * @const\r\n     * @type {number}\r\n     */\r\n    this.resolution = resolution;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.alignAndScaleFill_;\r\n\r\n    /**\r\n     * @protected\r\n     * @type {Array<*>}\r\n     */\r\n    this.instructions = instructions.instructions;\r\n\r\n    /**\r\n     * @protected\r\n     * @type {Array<number>}\r\n     */\r\n    this.coordinates = instructions.coordinates;\r\n\r\n    /**\r\n     * @private\r\n     * @type {!Object<number,import(\"../../coordinate.js\").Coordinate|Array<import(\"../../coordinate.js\").Coordinate>|Array<Array<import(\"../../coordinate.js\").Coordinate>>>}\r\n     */\r\n    this.coordinateCache_ = {};\r\n\r\n    /**\r\n     * @private\r\n     * @type {!import(\"../../transform.js\").Transform}\r\n     */\r\n    this.renderedTransform_ = createTransform();\r\n\r\n    /**\r\n     * @protected\r\n     * @type {Array<*>}\r\n     */\r\n    this.hitDetectionInstructions = instructions.hitDetectionInstructions;\r\n\r\n    /**\r\n     * @private\r\n     * @type {Array<number>}\r\n     */\r\n    this.pixelCoordinates_ = null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.viewRotation_ = 0;\r\n\r\n    /**\r\n     * @type {!Object<string, import(\"../canvas.js\").FillState>}\r\n     */\r\n    this.fillStates = instructions.fillStates || {};\r\n\r\n    /**\r\n     * @type {!Object<string, import(\"../canvas.js\").StrokeState>}\r\n     */\r\n    this.strokeStates = instructions.strokeStates || {};\r\n\r\n    /**\r\n     * @type {!Object<string, import(\"../canvas.js\").TextState>}\r\n     */\r\n    this.textStates = instructions.textStates || {};\r\n\r\n    /**\r\n     * @private\r\n     * @type {Object<string, Object<string, number>>}\r\n     */\r\n    this.widths_ = {};\r\n\r\n    /**\r\n     * @private\r\n     * @type {Object<string, import(\"../canvas.js\").Label>}\r\n     */\r\n    this.labels_ = {};\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"../canvas/ZIndexContext.js\").default}\r\n     */\r\n    this.zIndexContext_ = deferredRendering ? new ZIndexContext() : null;\r\n  }\r\n\r\n  /**\r\n   * @return {ZIndexContext} ZIndex context.\r\n   */\r\n  getZIndexContext() {\r\n    return this.zIndexContext_;\r\n  }\r\n\r\n  /**\r\n   * @param {string|Array<string>} text Text.\r\n   * @param {string} textKey Text style key.\r\n   * @param {string} fillKey Fill style key.\r\n   * @param {string} strokeKey Stroke style key.\r\n   * @return {import(\"../canvas.js\").Label} Label.\r\n   */\r\n  createLabel(text, textKey, fillKey, strokeKey) {\r\n    const key = text + textKey + fillKey + strokeKey;\r\n    if (this.labels_[key]) {\r\n      return this.labels_[key];\r\n    }\r\n    const strokeState = strokeKey ? this.strokeStates[strokeKey] : null;\r\n    const fillState = fillKey ? this.fillStates[fillKey] : null;\r\n    const textState = this.textStates[textKey];\r\n    const pixelRatio = this.pixelRatio;\r\n    const scale = [\r\n      textState.scale[0] * pixelRatio,\r\n      textState.scale[1] * pixelRatio,\r\n    ];\r\n    const align = textState.justify\r\n      ? TEXT_ALIGN[textState.justify]\r\n      : horizontalTextAlign(\r\n          Array.isArray(text) ? text[0] : text,\r\n          textState.textAlign || defaultTextAlign,\r\n        );\r\n    const strokeWidth =\r\n      strokeKey && strokeState.lineWidth ? strokeState.lineWidth : 0;\r\n\r\n    const chunks = Array.isArray(text)\r\n      ? text\r\n      : String(text).split('\\n').reduce(createTextChunks, []);\r\n\r\n    const {width, height, widths, heights, lineWidths} = getTextDimensions(\r\n      textState,\r\n      chunks,\r\n    );\r\n    const renderWidth = width + strokeWidth;\r\n    const contextInstructions = [];\r\n    // make canvas 2 pixels wider to account for italic text width measurement errors\r\n    const w = (renderWidth + 2) * scale[0];\r\n    const h = (height + strokeWidth) * scale[1];\r\n    /** @type {import(\"../canvas.js\").Label} */\r\n    const label = {\r\n      width: w < 0 ? Math.floor(w) : Math.ceil(w),\r\n      height: h < 0 ? Math.floor(h) : Math.ceil(h),\r\n      contextInstructions: contextInstructions,\r\n    };\r\n    if (scale[0] != 1 || scale[1] != 1) {\r\n      contextInstructions.push('scale', scale);\r\n    }\r\n    if (strokeKey) {\r\n      contextInstructions.push('strokeStyle', strokeState.strokeStyle);\r\n      contextInstructions.push('lineWidth', strokeWidth);\r\n      contextInstructions.push('lineCap', strokeState.lineCap);\r\n      contextInstructions.push('lineJoin', strokeState.lineJoin);\r\n      contextInstructions.push('miterLimit', strokeState.miterLimit);\r\n      contextInstructions.push('setLineDash', [strokeState.lineDash]);\r\n      contextInstructions.push('lineDashOffset', strokeState.lineDashOffset);\r\n    }\r\n    if (fillKey) {\r\n      contextInstructions.push('fillStyle', fillState.fillStyle);\r\n    }\r\n    contextInstructions.push('textBaseline', 'middle');\r\n    contextInstructions.push('textAlign', 'center');\r\n    const leftRight = 0.5 - align;\r\n    let x = align * renderWidth + leftRight * strokeWidth;\r\n    const strokeInstructions = [];\r\n    const fillInstructions = [];\r\n    let lineHeight = 0;\r\n    let lineOffset = 0;\r\n    let widthHeightIndex = 0;\r\n    let lineWidthIndex = 0;\r\n    let previousFont;\r\n    for (let i = 0, ii = chunks.length; i < ii; i += 2) {\r\n      const text = chunks[i];\r\n      if (text === '\\n') {\r\n        lineOffset += lineHeight;\r\n        lineHeight = 0;\r\n        x = align * renderWidth + leftRight * strokeWidth;\r\n        ++lineWidthIndex;\r\n        continue;\r\n      }\r\n      const font = chunks[i + 1] || textState.font;\r\n      if (font !== previousFont) {\r\n        if (strokeKey) {\r\n          strokeInstructions.push('font', font);\r\n        }\r\n        if (fillKey) {\r\n          fillInstructions.push('font', font);\r\n        }\r\n        previousFont = font;\r\n      }\r\n      lineHeight = Math.max(lineHeight, heights[widthHeightIndex]);\r\n      const fillStrokeArgs = [\r\n        text,\r\n        x +\r\n          leftRight * widths[widthHeightIndex] +\r\n          align * (widths[widthHeightIndex] - lineWidths[lineWidthIndex]),\r\n        0.5 * (strokeWidth + lineHeight) + lineOffset,\r\n      ];\r\n      x += widths[widthHeightIndex];\r\n      if (strokeKey) {\r\n        strokeInstructions.push('strokeText', fillStrokeArgs);\r\n      }\r\n      if (fillKey) {\r\n        fillInstructions.push('fillText', fillStrokeArgs);\r\n      }\r\n      ++widthHeightIndex;\r\n    }\r\n    Array.prototype.push.apply(contextInstructions, strokeInstructions);\r\n    Array.prototype.push.apply(contextInstructions, fillInstructions);\r\n    this.labels_[key] = label;\r\n    return label;\r\n  }\r\n\r\n  /**\r\n   * @param {CanvasRenderingContext2D} context Context.\r\n   * @param {import(\"../../coordinate.js\").Coordinate} p1 1st point of the background box.\r\n   * @param {import(\"../../coordinate.js\").Coordinate} p2 2nd point of the background box.\r\n   * @param {import(\"../../coordinate.js\").Coordinate} p3 3rd point of the background box.\r\n   * @param {import(\"../../coordinate.js\").Coordinate} p4 4th point of the background box.\r\n   * @param {Array<*>} fillInstruction Fill instruction.\r\n   * @param {Array<*>} strokeInstruction Stroke instruction.\r\n   */\r\n  replayTextBackground_(\r\n    context,\r\n    p1,\r\n    p2,\r\n    p3,\r\n    p4,\r\n    fillInstruction,\r\n    strokeInstruction,\r\n  ) {\r\n    context.beginPath();\r\n    context.moveTo.apply(context, p1);\r\n    context.lineTo.apply(context, p2);\r\n    context.lineTo.apply(context, p3);\r\n    context.lineTo.apply(context, p4);\r\n    context.lineTo.apply(context, p1);\r\n    if (fillInstruction) {\r\n      this.alignAndScaleFill_ = /** @type {number} */ (fillInstruction[2]);\r\n      context.fillStyle = /** @type {string} */ (fillInstruction[1]);\r\n      this.fill_(context);\r\n    }\r\n    if (strokeInstruction) {\r\n      this.setStrokeStyle_(\r\n        context,\r\n        /** @type {Array<*>} */ (strokeInstruction),\r\n      );\r\n      context.stroke();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {number} sheetWidth Width of the sprite sheet.\r\n   * @param {number} sheetHeight Height of the sprite sheet.\r\n   * @param {number} centerX X.\r\n   * @param {number} centerY Y.\r\n   * @param {number} width Width.\r\n   * @param {number} height Height.\r\n   * @param {number} anchorX Anchor X.\r\n   * @param {number} anchorY Anchor Y.\r\n   * @param {number} originX Origin X.\r\n   * @param {number} originY Origin Y.\r\n   * @param {number} rotation Rotation.\r\n   * @param {import(\"../../size.js\").Size} scale Scale.\r\n   * @param {boolean} snapToPixel Snap to pixel.\r\n   * @param {Array<number>} padding Padding.\r\n   * @param {boolean} fillStroke Background fill or stroke.\r\n   * @param {import(\"../../Feature.js\").FeatureLike} feature Feature.\r\n   * @return {ImageOrLabelDimensions} Dimensions for positioning and decluttering the image or label.\r\n   */\r\n  calculateImageOrLabelDimensions_(\r\n    sheetWidth,\r\n    sheetHeight,\r\n    centerX,\r\n    centerY,\r\n    width,\r\n    height,\r\n    anchorX,\r\n    anchorY,\r\n    originX,\r\n    originY,\r\n    rotation,\r\n    scale,\r\n    snapToPixel,\r\n    padding,\r\n    fillStroke,\r\n    feature,\r\n  ) {\r\n    anchorX *= scale[0];\r\n    anchorY *= scale[1];\r\n    let x = centerX - anchorX;\r\n    let y = centerY - anchorY;\r\n\r\n    const w = width + originX > sheetWidth ? sheetWidth - originX : width;\r\n    const h = height + originY > sheetHeight ? sheetHeight - originY : height;\r\n    const boxW = padding[3] + w * scale[0] + padding[1];\r\n    const boxH = padding[0] + h * scale[1] + padding[2];\r\n    const boxX = x - padding[3];\r\n    const boxY = y - padding[0];\r\n\r\n    if (fillStroke || rotation !== 0) {\r\n      p1[0] = boxX;\r\n      p4[0] = boxX;\r\n      p1[1] = boxY;\r\n      p2[1] = boxY;\r\n      p2[0] = boxX + boxW;\r\n      p3[0] = p2[0];\r\n      p3[1] = boxY + boxH;\r\n      p4[1] = p3[1];\r\n    }\r\n\r\n    let transform;\r\n    if (rotation !== 0) {\r\n      transform = composeTransform(\r\n        createTransform(),\r\n        centerX,\r\n        centerY,\r\n        1,\r\n        1,\r\n        rotation,\r\n        -centerX,\r\n        -centerY,\r\n      );\r\n\r\n      applyTransform(transform, p1);\r\n      applyTransform(transform, p2);\r\n      applyTransform(transform, p3);\r\n      applyTransform(transform, p4);\r\n      createOrUpdate(\r\n        Math.min(p1[0], p2[0], p3[0], p4[0]),\r\n        Math.min(p1[1], p2[1], p3[1], p4[1]),\r\n        Math.max(p1[0], p2[0], p3[0], p4[0]),\r\n        Math.max(p1[1], p2[1], p3[1], p4[1]),\r\n        tmpExtent,\r\n      );\r\n    } else {\r\n      createOrUpdate(\r\n        Math.min(boxX, boxX + boxW),\r\n        Math.min(boxY, boxY + boxH),\r\n        Math.max(boxX, boxX + boxW),\r\n        Math.max(boxY, boxY + boxH),\r\n        tmpExtent,\r\n      );\r\n    }\r\n    if (snapToPixel) {\r\n      x = Math.round(x);\r\n      y = Math.round(y);\r\n    }\r\n    return {\r\n      drawImageX: x,\r\n      drawImageY: y,\r\n      drawImageW: w,\r\n      drawImageH: h,\r\n      originX: originX,\r\n      originY: originY,\r\n      declutterBox: {\r\n        minX: tmpExtent[0],\r\n        minY: tmpExtent[1],\r\n        maxX: tmpExtent[2],\r\n        maxY: tmpExtent[3],\r\n        value: feature,\r\n      },\r\n      canvasTransform: transform,\r\n      scale: scale,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {CanvasRenderingContext2D} context Context.\r\n   * @param {import('../../size.js').Size} scaledCanvasSize Scaled canvas size.\r\n   * @param {import(\"../canvas.js\").Label|HTMLImageElement|HTMLCanvasElement|HTMLVideoElement} imageOrLabel Image.\r\n   * @param {ImageOrLabelDimensions} dimensions Dimensions.\r\n   * @param {number} opacity Opacity.\r\n   * @param {Array<*>} fillInstruction Fill instruction.\r\n   * @param {Array<*>} strokeInstruction Stroke instruction.\r\n   * @return {boolean} The image or label was rendered.\r\n   */\r\n  replayImageOrLabel_(\r\n    context,\r\n    scaledCanvasSize,\r\n    imageOrLabel,\r\n    dimensions,\r\n    opacity,\r\n    fillInstruction,\r\n    strokeInstruction,\r\n  ) {\r\n    const fillStroke = !!(fillInstruction || strokeInstruction);\r\n\r\n    const box = dimensions.declutterBox;\r\n    const strokePadding = strokeInstruction\r\n      ? (strokeInstruction[2] * dimensions.scale[0]) / 2\r\n      : 0;\r\n    const intersects =\r\n      box.minX - strokePadding <= scaledCanvasSize[0] &&\r\n      box.maxX + strokePadding >= 0 &&\r\n      box.minY - strokePadding <= scaledCanvasSize[1] &&\r\n      box.maxY + strokePadding >= 0;\r\n\r\n    if (intersects) {\r\n      if (fillStroke) {\r\n        this.replayTextBackground_(\r\n          context,\r\n          p1,\r\n          p2,\r\n          p3,\r\n          p4,\r\n          /** @type {Array<*>} */ (fillInstruction),\r\n          /** @type {Array<*>} */ (strokeInstruction),\r\n        );\r\n      }\r\n      drawImageOrLabel(\r\n        context,\r\n        dimensions.canvasTransform,\r\n        opacity,\r\n        imageOrLabel,\r\n        dimensions.originX,\r\n        dimensions.originY,\r\n        dimensions.drawImageW,\r\n        dimensions.drawImageH,\r\n        dimensions.drawImageX,\r\n        dimensions.drawImageY,\r\n        dimensions.scale,\r\n      );\r\n    }\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {CanvasRenderingContext2D} context Context.\r\n   */\r\n  fill_(context) {\r\n    const alignAndScale = this.alignAndScaleFill_;\r\n    if (alignAndScale) {\r\n      const origin = applyTransform(this.renderedTransform_, [0, 0]);\r\n      const repeatSize = 512 * this.pixelRatio;\r\n      context.save();\r\n      context.translate(origin[0] % repeatSize, origin[1] % repeatSize);\r\n      if (alignAndScale !== 1) {\r\n        context.scale(alignAndScale, alignAndScale);\r\n      }\r\n      context.rotate(this.viewRotation_);\r\n    }\r\n    context.fill();\r\n    if (alignAndScale) {\r\n      context.restore();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {CanvasRenderingContext2D} context Context.\r\n   * @param {Array<*>} instruction Instruction.\r\n   */\r\n  setStrokeStyle_(context, instruction) {\r\n    context.strokeStyle =\r\n      /** @type {import(\"../../colorlike.js\").ColorLike} */ (instruction[1]);\r\n    context.lineWidth = /** @type {number} */ (instruction[2]);\r\n    context.lineCap = /** @type {CanvasLineCap} */ (instruction[3]);\r\n    context.lineJoin = /** @type {CanvasLineJoin} */ (instruction[4]);\r\n    context.miterLimit = /** @type {number} */ (instruction[5]);\r\n    context.lineDashOffset = /** @type {number} */ (instruction[7]);\r\n    context.setLineDash(/** @type {Array<number>} */ (instruction[6]));\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {string|Array<string>} text The text to draw.\r\n   * @param {string} textKey The key of the text state.\r\n   * @param {string} strokeKey The key for the stroke state.\r\n   * @param {string} fillKey The key for the fill state.\r\n   * @return {{label: import(\"../canvas.js\").Label, anchorX: number, anchorY: number}} The text image and its anchor.\r\n   */\r\n  drawLabelWithPointPlacement_(text, textKey, strokeKey, fillKey) {\r\n    const textState = this.textStates[textKey];\r\n\r\n    const label = this.createLabel(text, textKey, fillKey, strokeKey);\r\n\r\n    const strokeState = this.strokeStates[strokeKey];\r\n    const pixelRatio = this.pixelRatio;\r\n    const align = horizontalTextAlign(\r\n      Array.isArray(text) ? text[0] : text,\r\n      textState.textAlign || defaultTextAlign,\r\n    );\r\n    const baseline = TEXT_ALIGN[textState.textBaseline || defaultTextBaseline];\r\n    const strokeWidth =\r\n      strokeState && strokeState.lineWidth ? strokeState.lineWidth : 0;\r\n\r\n    // Remove the 2 pixels we added in createLabel() for the anchor\r\n    const width = label.width / pixelRatio - 2 * textState.scale[0];\r\n    const anchorX = align * width + 2 * (0.5 - align) * strokeWidth;\r\n    const anchorY =\r\n      (baseline * label.height) / pixelRatio +\r\n      2 * (0.5 - baseline) * strokeWidth;\r\n\r\n    return {\r\n      label: label,\r\n      anchorX: anchorX,\r\n      anchorY: anchorY,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {CanvasRenderingContext2D} context Context.\r\n   * @param {import('../../size.js').Size} scaledCanvasSize Scaled canvas size\r\n   * @param {import(\"../../transform.js\").Transform} transform Transform.\r\n   * @param {Array<*>} instructions Instructions array.\r\n   * @param {boolean} snapToPixel Snap point symbols and text to integer pixels.\r\n   * @param {FeatureCallback<T>} [featureCallback] Feature callback.\r\n   * @param {import(\"../../extent.js\").Extent} [hitExtent] Only check\r\n   *     features that intersect this extent.\r\n   * @param {import(\"rbush\").default<DeclutterEntry>} [declutterTree] Declutter tree.\r\n   * @return {T|undefined} Callback result.\r\n   * @template T\r\n   */\r\n  execute_(\r\n    context,\r\n    scaledCanvasSize,\r\n    transform,\r\n    instructions,\r\n    snapToPixel,\r\n    featureCallback,\r\n    hitExtent,\r\n    declutterTree,\r\n  ) {\r\n    const zIndexContext = this.zIndexContext_;\r\n    /** @type {Array<number>} */\r\n    let pixelCoordinates;\r\n    if (this.pixelCoordinates_ && equals(transform, this.renderedTransform_)) {\r\n      pixelCoordinates = this.pixelCoordinates_;\r\n    } else {\r\n      if (!this.pixelCoordinates_) {\r\n        this.pixelCoordinates_ = [];\r\n      }\r\n      pixelCoordinates = transform2D(\r\n        this.coordinates,\r\n        0,\r\n        this.coordinates.length,\r\n        2,\r\n        transform,\r\n        this.pixelCoordinates_,\r\n      );\r\n      transformSetFromArray(this.renderedTransform_, transform);\r\n    }\r\n    let i = 0; // instruction index\r\n    const ii = instructions.length; // end of instructions\r\n    let d = 0; // data index\r\n    let dd; // end of per-instruction data\r\n    let anchorX,\r\n      anchorY,\r\n      /** @type {import('../../style/Style.js').DeclutterMode} */\r\n      declutterMode,\r\n      prevX,\r\n      prevY,\r\n      roundX,\r\n      roundY,\r\n      image,\r\n      text,\r\n      textKey,\r\n      strokeKey,\r\n      fillKey;\r\n    let pendingFill = 0;\r\n    let pendingStroke = 0;\r\n    const coordinateCache = this.coordinateCache_;\r\n    const viewRotation = this.viewRotation_;\r\n    const viewRotationFromTransform =\r\n      Math.round(Math.atan2(-transform[1], transform[0]) * 1e12) / 1e12;\r\n\r\n    const state = /** @type {import(\"../../render.js\").State} */ ({\r\n      context: context,\r\n      pixelRatio: this.pixelRatio,\r\n      resolution: this.resolution,\r\n      rotation: viewRotation,\r\n    });\r\n\r\n    // When the batch size gets too big, performance decreases. 200 is a good\r\n    // balance between batch size and number of fill/stroke instructions.\r\n    const batchSize =\r\n      this.instructions != instructions || this.overlaps ? 0 : 200;\r\n    let /** @type {import(\"../../Feature.js\").FeatureLike} */ feature;\r\n    let x, y, currentGeometry;\r\n    while (i < ii) {\r\n      const instruction = instructions[i];\r\n      const type = /** @type {import(\"./Instruction.js\").default} */ (\r\n        instruction[0]\r\n      );\r\n      switch (type) {\r\n        case CanvasInstruction.BEGIN_GEOMETRY:\r\n          feature = /** @type {import(\"../../Feature.js\").FeatureLike} */ (\r\n            instruction[1]\r\n          );\r\n          currentGeometry = instruction[3];\r\n          if (!feature.getGeometry()) {\r\n            i = /** @type {number} */ (instruction[2]);\r\n          } else if (\r\n            hitExtent !== undefined &&\r\n            !intersects(hitExtent, currentGeometry.getExtent())\r\n          ) {\r\n            i = /** @type {number} */ (instruction[2]) + 1;\r\n          } else {\r\n            ++i;\r\n          }\r\n          if (zIndexContext) {\r\n            zIndexContext.zIndex = instruction[4];\r\n          }\r\n          break;\r\n        case CanvasInstruction.BEGIN_PATH:\r\n          if (pendingFill > batchSize) {\r\n            this.fill_(context);\r\n            pendingFill = 0;\r\n          }\r\n          if (pendingStroke > batchSize) {\r\n            context.stroke();\r\n            pendingStroke = 0;\r\n          }\r\n          if (!pendingFill && !pendingStroke) {\r\n            context.beginPath();\r\n            prevX = NaN;\r\n            prevY = NaN;\r\n          }\r\n          ++i;\r\n          break;\r\n        case CanvasInstruction.CIRCLE:\r\n          d = /** @type {number} */ (instruction[1]);\r\n          const x1 = pixelCoordinates[d];\r\n          const y1 = pixelCoordinates[d + 1];\r\n          const x2 = pixelCoordinates[d + 2];\r\n          const y2 = pixelCoordinates[d + 3];\r\n          const dx = x2 - x1;\r\n          const dy = y2 - y1;\r\n          const r = Math.sqrt(dx * dx + dy * dy);\r\n          context.moveTo(x1 + r, y1);\r\n          context.arc(x1, y1, r, 0, 2 * Math.PI, true);\r\n          ++i;\r\n          break;\r\n        case CanvasInstruction.CLOSE_PATH:\r\n          context.closePath();\r\n          ++i;\r\n          break;\r\n        case CanvasInstruction.CUSTOM:\r\n          d = /** @type {number} */ (instruction[1]);\r\n          dd = instruction[2];\r\n          const geometry =\r\n            /** @type {import(\"../../geom/SimpleGeometry.js\").default} */ (\r\n              instruction[3]\r\n            );\r\n          const renderer = instruction[4];\r\n          const fn = instruction[5];\r\n          state.geometry = geometry;\r\n          state.feature = feature;\r\n          if (!(i in coordinateCache)) {\r\n            coordinateCache[i] = [];\r\n          }\r\n          const coords = coordinateCache[i];\r\n          if (fn) {\r\n            fn(pixelCoordinates, d, dd, 2, coords);\r\n          } else {\r\n            coords[0] = pixelCoordinates[d];\r\n            coords[1] = pixelCoordinates[d + 1];\r\n            coords.length = 2;\r\n          }\r\n          if (zIndexContext) {\r\n            zIndexContext.zIndex = instruction[6];\r\n          }\r\n          renderer(coords, state);\r\n          ++i;\r\n          break;\r\n        case CanvasInstruction.DRAW_IMAGE:\r\n          d = /** @type {number} */ (instruction[1]);\r\n          dd = /** @type {number} */ (instruction[2]);\r\n          image =\r\n            /** @type {HTMLCanvasElement|HTMLVideoElement|HTMLImageElement} */ (\r\n              instruction[3]\r\n            );\r\n\r\n          // Remaining arguments in DRAW_IMAGE are in alphabetical order\r\n          anchorX = /** @type {number} */ (instruction[4]);\r\n          anchorY = /** @type {number} */ (instruction[5]);\r\n          let height = /** @type {number} */ (instruction[6]);\r\n          const opacity = /** @type {number} */ (instruction[7]);\r\n          const originX = /** @type {number} */ (instruction[8]);\r\n          const originY = /** @type {number} */ (instruction[9]);\r\n          const rotateWithView = /** @type {boolean} */ (instruction[10]);\r\n          let rotation = /** @type {number} */ (instruction[11]);\r\n          const scale = /** @type {import(\"../../size.js\").Size} */ (\r\n            instruction[12]\r\n          );\r\n          let width = /** @type {number} */ (instruction[13]);\r\n          declutterMode = instruction[14] || 'declutter';\r\n          const declutterImageWithText =\r\n            /** @type {{args: import(\"../canvas.js\").DeclutterImageWithText, declutterMode: import('../../style/Style.js').DeclutterMode}} */ (\r\n              instruction[15]\r\n            );\r\n\r\n          if (!image && instruction.length >= 20) {\r\n            // create label images\r\n            text = /** @type {string} */ (instruction[19]);\r\n            textKey = /** @type {string} */ (instruction[20]);\r\n            strokeKey = /** @type {string} */ (instruction[21]);\r\n            fillKey = /** @type {string} */ (instruction[22]);\r\n            const labelWithAnchor = this.drawLabelWithPointPlacement_(\r\n              text,\r\n              textKey,\r\n              strokeKey,\r\n              fillKey,\r\n            );\r\n            image = labelWithAnchor.label;\r\n            instruction[3] = image;\r\n            const textOffsetX = /** @type {number} */ (instruction[23]);\r\n            anchorX = (labelWithAnchor.anchorX - textOffsetX) * this.pixelRatio;\r\n            instruction[4] = anchorX;\r\n            const textOffsetY = /** @type {number} */ (instruction[24]);\r\n            anchorY = (labelWithAnchor.anchorY - textOffsetY) * this.pixelRatio;\r\n            instruction[5] = anchorY;\r\n            height = image.height;\r\n            instruction[6] = height;\r\n            width = image.width;\r\n            instruction[13] = width;\r\n          }\r\n\r\n          let geometryWidths;\r\n          if (instruction.length > 25) {\r\n            geometryWidths = /** @type {number} */ (instruction[25]);\r\n          }\r\n\r\n          let padding, backgroundFillInstruction, backgroundStrokeInstruction;\r\n          if (instruction.length > 17) {\r\n            padding = /** @type {Array<number>} */ (instruction[16]);\r\n            backgroundFillInstruction = /** @type {Array<*>} */ (\r\n              instruction[17]\r\n            );\r\n            backgroundStrokeInstruction = /** @type {Array<*>} */ (\r\n              instruction[18]\r\n            );\r\n          } else {\r\n            padding = defaultPadding;\r\n            backgroundFillInstruction = null;\r\n            backgroundStrokeInstruction = null;\r\n          }\r\n\r\n          if (rotateWithView && viewRotationFromTransform) {\r\n            // Canvas is expected to be rotated to reverse view rotation.\r\n            rotation += viewRotation;\r\n          } else if (!rotateWithView && !viewRotationFromTransform) {\r\n            // Canvas is not rotated, images need to be rotated back to be north-up.\r\n            rotation -= viewRotation;\r\n          }\r\n          let widthIndex = 0;\r\n          for (; d < dd; d += 2) {\r\n            if (\r\n              geometryWidths &&\r\n              geometryWidths[widthIndex++] < width / this.pixelRatio\r\n            ) {\r\n              continue;\r\n            }\r\n            const dimensions = this.calculateImageOrLabelDimensions_(\r\n              image.width,\r\n              image.height,\r\n              pixelCoordinates[d],\r\n              pixelCoordinates[d + 1],\r\n              width,\r\n              height,\r\n              anchorX,\r\n              anchorY,\r\n              originX,\r\n              originY,\r\n              rotation,\r\n              scale,\r\n              snapToPixel,\r\n              padding,\r\n              !!backgroundFillInstruction || !!backgroundStrokeInstruction,\r\n              feature,\r\n            );\r\n            /** @type {ReplayImageOrLabelArgs} */\r\n            const args = [\r\n              context,\r\n              scaledCanvasSize,\r\n              image,\r\n              dimensions,\r\n              opacity,\r\n              backgroundFillInstruction,\r\n              backgroundStrokeInstruction,\r\n            ];\r\n            if (declutterTree) {\r\n              let imageArgs, imageDeclutterMode, imageDeclutterBox;\r\n              if (declutterImageWithText) {\r\n                const index = dd - d;\r\n                if (!declutterImageWithText[index]) {\r\n                  // We now have the image for an image+text combination.\r\n                  declutterImageWithText[index] = {args, declutterMode};\r\n                  // Don't render anything for now, wait for the text.\r\n                  continue;\r\n                }\r\n                const imageDeclutter = declutterImageWithText[index];\r\n                imageArgs = imageDeclutter.args;\r\n                imageDeclutterMode = imageDeclutter.declutterMode;\r\n                delete declutterImageWithText[index];\r\n                imageDeclutterBox = getDeclutterBox(imageArgs);\r\n              }\r\n              // We now have image and text for an image+text combination.\r\n              let renderImage, renderText;\r\n              if (\r\n                imageArgs &&\r\n                (imageDeclutterMode !== 'declutter' ||\r\n                  !declutterTree.collides(imageDeclutterBox))\r\n              ) {\r\n                renderImage = true;\r\n              }\r\n              if (\r\n                declutterMode !== 'declutter' ||\r\n                !declutterTree.collides(dimensions.declutterBox)\r\n              ) {\r\n                renderText = true;\r\n              }\r\n              if (\r\n                imageDeclutterMode === 'declutter' &&\r\n                declutterMode === 'declutter'\r\n              ) {\r\n                const render = renderImage && renderText;\r\n                renderImage = render;\r\n                renderText = render;\r\n              }\r\n              if (renderImage) {\r\n                if (imageDeclutterMode !== 'none') {\r\n                  declutterTree.insert(imageDeclutterBox);\r\n                }\r\n                this.replayImageOrLabel_.apply(this, imageArgs);\r\n              }\r\n              if (renderText) {\r\n                if (declutterMode !== 'none') {\r\n                  declutterTree.insert(dimensions.declutterBox);\r\n                }\r\n                this.replayImageOrLabel_.apply(this, args);\r\n              }\r\n            } else {\r\n              this.replayImageOrLabel_.apply(this, args);\r\n            }\r\n          }\r\n          ++i;\r\n          break;\r\n        case CanvasInstruction.DRAW_CHARS:\r\n          const begin = /** @type {number} */ (instruction[1]);\r\n          const end = /** @type {number} */ (instruction[2]);\r\n          const baseline = /** @type {number} */ (instruction[3]);\r\n          const overflow = /** @type {number} */ (instruction[4]);\r\n          fillKey = /** @type {string} */ (instruction[5]);\r\n          const maxAngle = /** @type {number} */ (instruction[6]);\r\n          const measurePixelRatio = /** @type {number} */ (instruction[7]);\r\n          const offsetY = /** @type {number} */ (instruction[8]);\r\n          strokeKey = /** @type {string} */ (instruction[9]);\r\n          const strokeWidth = /** @type {number} */ (instruction[10]);\r\n          text = /** @type {string|Array<string>} */ (instruction[11]);\r\n          if (Array.isArray(text)) {\r\n            //FIXME Add support for rich text along lines\r\n            text = text.reduce(richTextToPlainText, '');\r\n          }\r\n          textKey = /** @type {string} */ (instruction[12]);\r\n          const pixelRatioScale = [\r\n            /** @type {number} */ (instruction[13]),\r\n            /** @type {number} */ (instruction[13]),\r\n          ];\r\n          declutterMode = instruction[14] || 'declutter';\r\n\r\n          const textKeepUpright = /** @type {boolean} */ (instruction[15]);\r\n          const textState = this.textStates[textKey];\r\n          const font = textState.font;\r\n          const textScale = [\r\n            textState.scale[0] * measurePixelRatio,\r\n            textState.scale[1] * measurePixelRatio,\r\n          ];\r\n\r\n          let cachedWidths;\r\n          if (font in this.widths_) {\r\n            cachedWidths = this.widths_[font];\r\n          } else {\r\n            cachedWidths = {};\r\n            this.widths_[font] = cachedWidths;\r\n          }\r\n\r\n          const pathLength = lineStringLength(pixelCoordinates, begin, end, 2);\r\n          const textLength =\r\n            Math.abs(textScale[0]) *\r\n            measureAndCacheTextWidth(font, text, cachedWidths);\r\n          if (overflow || textLength <= pathLength) {\r\n            const textAlign = this.textStates[textKey].textAlign;\r\n            const startM =\r\n              (pathLength - textLength) * horizontalTextAlign(text, textAlign);\r\n            const parts = drawTextOnPath(\r\n              pixelCoordinates,\r\n              begin,\r\n              end,\r\n              2,\r\n              text,\r\n              startM,\r\n              maxAngle,\r\n              Math.abs(textScale[0]),\r\n              measureAndCacheTextWidth,\r\n              font,\r\n              cachedWidths,\r\n              viewRotationFromTransform ? 0 : this.viewRotation_,\r\n              textKeepUpright,\r\n            );\r\n            drawChars: if (parts) {\r\n              /** @type {Array<ReplayImageOrLabelArgs>} */\r\n              const replayImageOrLabelArgs = [];\r\n              let c, cc, chars, label, part;\r\n              if (strokeKey) {\r\n                for (c = 0, cc = parts.length; c < cc; ++c) {\r\n                  part = parts[c]; // x, y, anchorX, rotation, chunk\r\n                  chars = /** @type {string} */ (part[4]);\r\n                  label = this.createLabel(chars, textKey, '', strokeKey);\r\n                  anchorX =\r\n                    /** @type {number} */ (part[2]) +\r\n                    (textScale[0] < 0 ? -strokeWidth : strokeWidth);\r\n                  anchorY =\r\n                    baseline * label.height +\r\n                    ((0.5 - baseline) * 2 * strokeWidth * textScale[1]) /\r\n                      textScale[0] -\r\n                    offsetY;\r\n                  const dimensions = this.calculateImageOrLabelDimensions_(\r\n                    label.width,\r\n                    label.height,\r\n                    part[0],\r\n                    part[1],\r\n                    label.width,\r\n                    label.height,\r\n                    anchorX,\r\n                    anchorY,\r\n                    0,\r\n                    0,\r\n                    part[3],\r\n                    pixelRatioScale,\r\n                    false,\r\n                    defaultPadding,\r\n                    false,\r\n                    feature,\r\n                  );\r\n                  if (\r\n                    declutterTree &&\r\n                    declutterMode === 'declutter' &&\r\n                    declutterTree.collides(dimensions.declutterBox)\r\n                  ) {\r\n                    break drawChars;\r\n                  }\r\n                  replayImageOrLabelArgs.push([\r\n                    context,\r\n                    scaledCanvasSize,\r\n                    label,\r\n                    dimensions,\r\n                    1,\r\n                    null,\r\n                    null,\r\n                  ]);\r\n                }\r\n              }\r\n              if (fillKey) {\r\n                for (c = 0, cc = parts.length; c < cc; ++c) {\r\n                  part = parts[c]; // x, y, anchorX, rotation, chunk\r\n                  chars = /** @type {string} */ (part[4]);\r\n                  label = this.createLabel(chars, textKey, fillKey, '');\r\n                  anchorX = /** @type {number} */ (part[2]);\r\n                  anchorY = baseline * label.height - offsetY;\r\n                  const dimensions = this.calculateImageOrLabelDimensions_(\r\n                    label.width,\r\n                    label.height,\r\n                    part[0],\r\n                    part[1],\r\n                    label.width,\r\n                    label.height,\r\n                    anchorX,\r\n                    anchorY,\r\n                    0,\r\n                    0,\r\n                    part[3],\r\n                    pixelRatioScale,\r\n                    false,\r\n                    defaultPadding,\r\n                    false,\r\n                    feature,\r\n                  );\r\n                  if (\r\n                    declutterTree &&\r\n                    declutterMode === 'declutter' &&\r\n                    declutterTree.collides(dimensions.declutterBox)\r\n                  ) {\r\n                    break drawChars;\r\n                  }\r\n                  replayImageOrLabelArgs.push([\r\n                    context,\r\n                    scaledCanvasSize,\r\n                    label,\r\n                    dimensions,\r\n                    1,\r\n                    null,\r\n                    null,\r\n                  ]);\r\n                }\r\n              }\r\n              if (declutterTree && declutterMode !== 'none') {\r\n                declutterTree.load(replayImageOrLabelArgs.map(getDeclutterBox));\r\n              }\r\n              for (let i = 0, ii = replayImageOrLabelArgs.length; i < ii; ++i) {\r\n                this.replayImageOrLabel_.apply(this, replayImageOrLabelArgs[i]);\r\n              }\r\n            }\r\n          }\r\n          ++i;\r\n          break;\r\n        case CanvasInstruction.END_GEOMETRY:\r\n          if (featureCallback !== undefined) {\r\n            feature = /** @type {import(\"../../Feature.js\").FeatureLike} */ (\r\n              instruction[1]\r\n            );\r\n            const result = featureCallback(\r\n              feature,\r\n              currentGeometry,\r\n              declutterMode,\r\n            );\r\n            if (result) {\r\n              return result;\r\n            }\r\n          }\r\n          ++i;\r\n          break;\r\n        case CanvasInstruction.FILL:\r\n          if (batchSize) {\r\n            pendingFill++;\r\n          } else {\r\n            this.fill_(context);\r\n          }\r\n          ++i;\r\n          break;\r\n        case CanvasInstruction.MOVE_TO_LINE_TO:\r\n          d = /** @type {number} */ (instruction[1]);\r\n          dd = /** @type {number} */ (instruction[2]);\r\n          x = pixelCoordinates[d];\r\n          y = pixelCoordinates[d + 1];\r\n          context.moveTo(x, y);\r\n          prevX = (x + 0.5) | 0;\r\n          prevY = (y + 0.5) | 0;\r\n          for (d += 2; d < dd; d += 2) {\r\n            x = pixelCoordinates[d];\r\n            y = pixelCoordinates[d + 1];\r\n            roundX = (x + 0.5) | 0;\r\n            roundY = (y + 0.5) | 0;\r\n            if (d == dd - 2 || roundX !== prevX || roundY !== prevY) {\r\n              context.lineTo(x, y);\r\n              prevX = roundX;\r\n              prevY = roundY;\r\n            }\r\n          }\r\n          ++i;\r\n          break;\r\n        case CanvasInstruction.SET_FILL_STYLE:\r\n          this.alignAndScaleFill_ = instruction[2];\r\n\r\n          if (pendingFill) {\r\n            this.fill_(context);\r\n            pendingFill = 0;\r\n            if (pendingStroke) {\r\n              context.stroke();\r\n              pendingStroke = 0;\r\n            }\r\n          }\r\n\r\n          /** @type {import(\"../../colorlike.js\").ColorLike} */\r\n          context.fillStyle = instruction[1];\r\n          ++i;\r\n          break;\r\n        case CanvasInstruction.SET_STROKE_STYLE:\r\n          if (pendingStroke) {\r\n            context.stroke();\r\n            pendingStroke = 0;\r\n          }\r\n          this.setStrokeStyle_(context, /** @type {Array<*>} */ (instruction));\r\n          ++i;\r\n          break;\r\n        case CanvasInstruction.STROKE:\r\n          if (batchSize) {\r\n            pendingStroke++;\r\n          } else {\r\n            context.stroke();\r\n          }\r\n          ++i;\r\n          break;\r\n        default: // consume the instruction anyway, to avoid an infinite loop\r\n          ++i;\r\n          break;\r\n      }\r\n    }\r\n    if (pendingFill) {\r\n      this.fill_(context);\r\n    }\r\n    if (pendingStroke) {\r\n      context.stroke();\r\n    }\r\n    return undefined;\r\n  }\r\n\r\n  /**\r\n   * @param {CanvasRenderingContext2D} context Context.\r\n   * @param {import('../../size.js').Size} scaledCanvasSize Scaled canvas size.\r\n   * @param {import(\"../../transform.js\").Transform} transform Transform.\r\n   * @param {number} viewRotation View rotation.\r\n   * @param {boolean} snapToPixel Snap point symbols and text to integer pixels.\r\n   * @param {import(\"rbush\").default<DeclutterEntry>} [declutterTree] Declutter tree.\r\n   */\r\n  execute(\r\n    context,\r\n    scaledCanvasSize,\r\n    transform,\r\n    viewRotation,\r\n    snapToPixel,\r\n    declutterTree,\r\n  ) {\r\n    this.viewRotation_ = viewRotation;\r\n    this.execute_(\r\n      context,\r\n      scaledCanvasSize,\r\n      transform,\r\n      this.instructions,\r\n      snapToPixel,\r\n      undefined,\r\n      undefined,\r\n      declutterTree,\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @param {CanvasRenderingContext2D} context Context.\r\n   * @param {import(\"../../transform.js\").Transform} transform Transform.\r\n   * @param {number} viewRotation View rotation.\r\n   * @param {FeatureCallback<T>} [featureCallback] Feature callback.\r\n   * @param {import(\"../../extent.js\").Extent} [hitExtent] Only check\r\n   *     features that intersect this extent.\r\n   * @return {T|undefined} Callback result.\r\n   * @template T\r\n   */\r\n  executeHitDetection(\r\n    context,\r\n    transform,\r\n    viewRotation,\r\n    featureCallback,\r\n    hitExtent,\r\n  ) {\r\n    this.viewRotation_ = viewRotation;\r\n    return this.execute_(\r\n      context,\r\n      [context.canvas.width, context.canvas.height],\r\n      transform,\r\n      this.hitDetectionInstructions,\r\n      true,\r\n      featureCallback,\r\n      hitExtent,\r\n    );\r\n  }\r\n}\r\n\r\nexport default Executor;\r\n","/**\r\n * @module ol/geom/flat/textpath\r\n */\r\nimport {lerp} from '../../math.js';\r\nimport {rotate} from './transform.js';\r\n\r\n/**\r\n * @param {Array<number>} flatCoordinates Path to put text on.\r\n * @param {number} offset Start offset of the `flatCoordinates`.\r\n * @param {number} end End offset of the `flatCoordinates`.\r\n * @param {number} stride Stride.\r\n * @param {string} text Text to place on the path.\r\n * @param {number} startM m along the path where the text starts.\r\n * @param {number} maxAngle Max angle between adjacent chars in radians.\r\n * @param {number} scale The product of the text scale and the device pixel ratio.\r\n * @param {function(string, string, Object<string, number>):number} measureAndCacheTextWidth Measure and cache text width.\r\n * @param {string} font The font.\r\n * @param {Object<string, number>} cache A cache of measured widths.\r\n * @param {number} rotation Rotation to apply to the flatCoordinates to determine whether text needs to be reversed.\r\n * @param {boolean} keepUpright Whether the text needs to be kept upright\r\n * @return {Array<Array<*>>|null} The result array (or null if `maxAngle` was\r\n * exceeded). Entries of the array are x, y, anchorX, angle, chunk.\r\n */\r\nexport function drawTextOnPath(\r\n  flatCoordinates,\r\n  offset,\r\n  end,\r\n  stride,\r\n  text,\r\n  startM,\r\n  maxAngle,\r\n  scale,\r\n  measureAndCacheTextWidth,\r\n  font,\r\n  cache,\r\n  rotation,\r\n  keepUpright = true,\r\n) {\r\n  let x2 = flatCoordinates[offset];\r\n  let y2 = flatCoordinates[offset + 1];\r\n  let x1 = 0;\r\n  let y1 = 0;\r\n  let segmentLength = 0;\r\n  let segmentM = 0;\r\n\r\n  function advance() {\r\n    x1 = x2;\r\n    y1 = y2;\r\n    offset += stride;\r\n    x2 = flatCoordinates[offset];\r\n    y2 = flatCoordinates[offset + 1];\r\n    segmentM += segmentLength;\r\n    segmentLength = Math.sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1));\r\n  }\r\n  do {\r\n    advance();\r\n  } while (offset < end - stride && segmentM + segmentLength < startM);\r\n\r\n  let interpolate =\r\n    segmentLength === 0 ? 0 : (startM - segmentM) / segmentLength;\r\n  const beginX = lerp(x1, x2, interpolate);\r\n  const beginY = lerp(y1, y2, interpolate);\r\n\r\n  const startOffset = offset - stride;\r\n  const startLength = segmentM;\r\n  const endM = startM + scale * measureAndCacheTextWidth(font, text, cache);\r\n  while (offset < end - stride && segmentM + segmentLength < endM) {\r\n    advance();\r\n  }\r\n  interpolate = segmentLength === 0 ? 0 : (endM - segmentM) / segmentLength;\r\n  const endX = lerp(x1, x2, interpolate);\r\n  const endY = lerp(y1, y2, interpolate);\r\n\r\n  // Keep text upright if the option is selected\r\n  let reverse = false;\r\n  if (keepUpright) {\r\n    if (rotation) {\r\n      const flat = [beginX, beginY, endX, endY];\r\n      rotate(flat, 0, 4, 2, rotation, flat, flat);\r\n      reverse = flat[0] > flat[2];\r\n    } else {\r\n      reverse = beginX > endX;\r\n    }\r\n  }\r\n\r\n  const PI = Math.PI;\r\n  const result = [];\r\n  const singleSegment = startOffset + stride === offset;\r\n\r\n  offset = startOffset;\r\n  segmentLength = 0;\r\n  segmentM = startLength;\r\n  x2 = flatCoordinates[offset];\r\n  y2 = flatCoordinates[offset + 1];\r\n\r\n  let previousAngle;\r\n  // All on the same segment\r\n  if (singleSegment) {\r\n    advance();\r\n\r\n    previousAngle = Math.atan2(y2 - y1, x2 - x1);\r\n    if (reverse) {\r\n      previousAngle += previousAngle > 0 ? -PI : PI;\r\n    }\r\n    const x = (endX + beginX) / 2;\r\n    const y = (endY + beginY) / 2;\r\n    result[0] = [x, y, (endM - startM) / 2, previousAngle, text];\r\n    return result;\r\n  }\r\n\r\n  // rendering across line segments\r\n  text = text.replace(/\\n/g, ' '); // ensure rendering in single-line as all calculations below don't handle multi-lines\r\n\r\n  for (let i = 0, ii = text.length; i < ii; ) {\r\n    advance();\r\n    let angle = Math.atan2(y2 - y1, x2 - x1);\r\n    if (reverse) {\r\n      angle += angle > 0 ? -PI : PI;\r\n    }\r\n    if (previousAngle !== undefined) {\r\n      let delta = angle - previousAngle;\r\n      delta += delta > PI ? -2 * PI : delta < -PI ? 2 * PI : 0;\r\n      if (Math.abs(delta) > maxAngle) {\r\n        return null;\r\n      }\r\n    }\r\n    previousAngle = angle;\r\n\r\n    const iStart = i;\r\n    let charLength = 0;\r\n    for (; i < ii; ++i) {\r\n      const index = reverse ? ii - i - 1 : i;\r\n      const len = scale * measureAndCacheTextWidth(font, text[index], cache);\r\n      if (\r\n        offset + stride < end &&\r\n        segmentM + segmentLength < startM + charLength + len / 2\r\n      ) {\r\n        break;\r\n      }\r\n      charLength += len;\r\n    }\r\n    if (i === iStart) {\r\n      continue;\r\n    }\r\n    const chars = reverse\r\n      ? text.substring(ii - iStart, ii - i)\r\n      : text.substring(iStart, i);\r\n    interpolate =\r\n      segmentLength === 0\r\n        ? 0\r\n        : (startM + charLength / 2 - segmentM) / segmentLength;\r\n    const x = lerp(x1, x2, interpolate);\r\n    const y = lerp(y1, y2, interpolate);\r\n    result.push([x, y, charLength / 2, angle, chars]);\r\n    startM += charLength;\r\n  }\r\n  return result;\r\n}\r\n","/**\r\n * @module ol/render/canvas/ZIndexContext\r\n */\r\n\r\nimport {getSharedCanvasContext2D} from '../../dom.js';\r\n\r\n/** @typedef {CanvasRenderingContext2D & {globalAlpha: any}} ZIndexContextProxy */\r\n\r\n/**\r\n * @extends {CanvasRenderingContext2D}\r\n */\r\nclass ZIndexContext {\r\n  constructor() {\r\n    /**\r\n     * @private\r\n     * @type {Array<Array<*>>}\r\n     */\r\n    this.instructions_ = [];\r\n    /**\r\n     * @type {number}\r\n     */\r\n    this.zIndex = 0;\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.offset_ = 0;\r\n\r\n    /**\r\n     * @private\r\n     * @type {ZIndexContextProxy}\r\n     */\r\n    this.context_ = /** @type {ZIndexContextProxy} */ (\r\n      new Proxy(getSharedCanvasContext2D(), {\r\n        get: (target, property) => {\r\n          if (\r\n            typeof (/** @type {*} */ (getSharedCanvasContext2D())[property]) !==\r\n            'function'\r\n          ) {\r\n            // we only accept calling functions on the proxy, not accessing properties\r\n            return undefined;\r\n          }\r\n          this.push_(property);\r\n          return this.pushMethodArgs_;\r\n        },\r\n        set: (target, property, value) => {\r\n          this.push_(property, value);\r\n          return true;\r\n        },\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @param {...*} args Arguments to push to the instructions array.\r\n   * @private\r\n   */\r\n  push_(...args) {\r\n    const instructions = this.instructions_;\r\n    const index = this.zIndex + this.offset_;\r\n    if (!instructions[index]) {\r\n      instructions[index] = [];\r\n    }\r\n    instructions[index].push(...args);\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {...*} args Args.\r\n   * @return {ZIndexContext} This.\r\n   */\r\n  pushMethodArgs_ = (...args) => {\r\n    this.push_(args);\r\n    return this;\r\n  };\r\n\r\n  /**\r\n   * Push a function that renders to the context directly.\r\n   * @param {function(CanvasRenderingContext2D): void} render Function.\r\n   */\r\n  pushFunction(render) {\r\n    this.push_(render);\r\n  }\r\n\r\n  /**\r\n   * Get a proxy for CanvasRenderingContext2D which does not support getting state\r\n   * (e.g. `context.globalAlpha`, which will return `undefined`). To set state, if it relies on a\r\n   * previous state (e.g. `context.globalAlpha = context.globalAlpha / 2`), set a function,\r\n   * e.g. `context.globalAlpha = (context) => context.globalAlpha / 2`.\r\n   * @return {ZIndexContextProxy} Context.\r\n   */\r\n  getContext() {\r\n    return this.context_;\r\n  }\r\n\r\n  /**\r\n   * @param {CanvasRenderingContext2D} context Context.\r\n   */\r\n  draw(context) {\r\n    this.instructions_.forEach((instructionsAtIndex) => {\r\n      for (let i = 0, ii = instructionsAtIndex.length; i < ii; ++i) {\r\n        const property = instructionsAtIndex[i];\r\n        if (typeof property === 'function') {\r\n          property(context);\r\n          continue;\r\n        }\r\n        const instructionAtIndex = instructionsAtIndex[++i];\r\n        if (typeof (/** @type {*} */ (context)[property]) === 'function') {\r\n          /** @type {*} */ (context)[property](...instructionAtIndex);\r\n        } else {\r\n          if (typeof instructionAtIndex === 'function') {\r\n            /** @type {*} */ (context)[property] = instructionAtIndex(context);\r\n            continue;\r\n          }\r\n          /** @type {*} */ (context)[property] = instructionAtIndex;\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  clear() {\r\n    this.instructions_.length = 0;\r\n    this.zIndex = 0;\r\n    this.offset_ = 0;\r\n  }\r\n\r\n  /**\r\n   * Offsets the zIndex by the highest current zIndex. Useful for rendering multiple worlds or tiles, to\r\n   * avoid conflicting context.clip() or context.save()/restore() calls.\r\n   */\r\n  offset() {\r\n    this.offset_ = this.instructions_.length;\r\n    this.zIndex = 0;\r\n  }\r\n}\r\n\r\nexport default ZIndexContext;\r\n","/**\r\n * @module ol/render/canvas/hitdetect\r\n */\r\n\r\nimport {ascending} from '../../array.js';\r\nimport {createCanvasContext2D} from '../../dom.js';\r\nimport {intersects} from '../../extent.js';\r\nimport {clamp} from '../../math.js';\r\nimport {\r\n  getTransformFromProjections,\r\n  getUserProjection,\r\n  toUserExtent,\r\n} from '../../proj.js';\r\nimport {Icon} from '../../style.js';\r\nimport CanvasImmediateRenderer from './Immediate.js';\r\n\r\nexport const HIT_DETECT_RESOLUTION = 0.5;\r\n\r\n/**\r\n * @param {import(\"../../size.js\").Size} size Canvas size in css pixels.\r\n * @param {Array<import(\"../../transform.js\").Transform>} transforms Transforms\r\n * for rendering features to all worlds of the viewport, from coordinates to css\r\n * pixels.\r\n * @param {Array<import(\"../../Feature.js\").FeatureLike>} features\r\n * Features to consider for hit detection.\r\n * @param {import(\"../../style/Style.js\").StyleFunction|undefined} styleFunction\r\n * Layer style function.\r\n * @param {import(\"../../extent.js\").Extent} extent Extent in render projection.\r\n * @param {number} resolution Resolution.\r\n * @param {number} rotation Rotation.\r\n * @param {number} [squaredTolerance] Squared tolerance.\r\n * @param {import(\"../../proj/Projection.js\").default} [projection] Render projection.\r\n * @return {ImageData} Hit detection image data.\r\n */\r\nexport function createHitDetectionImageData(\r\n  size,\r\n  transforms,\r\n  features,\r\n  styleFunction,\r\n  extent,\r\n  resolution,\r\n  rotation,\r\n  squaredTolerance,\r\n  projection,\r\n) {\r\n  const userExtent = projection ? toUserExtent(extent, projection) : extent;\r\n  const width = size[0] * HIT_DETECT_RESOLUTION;\r\n  const height = size[1] * HIT_DETECT_RESOLUTION;\r\n  const context = createCanvasContext2D(width, height);\r\n  context.imageSmoothingEnabled = false;\r\n  const canvas = context.canvas;\r\n  const renderer = new CanvasImmediateRenderer(\r\n    context,\r\n    HIT_DETECT_RESOLUTION,\r\n    extent,\r\n    null,\r\n    rotation,\r\n    squaredTolerance,\r\n    projection\r\n      ? getTransformFromProjections(getUserProjection(), projection)\r\n      : null,\r\n  );\r\n  const featureCount = features.length;\r\n  // Stretch hit detection index to use the whole available color range\r\n  const indexFactor = Math.floor((256 * 256 * 256 - 1) / featureCount);\r\n  const featuresByZIndex = {};\r\n  for (let i = 1; i <= featureCount; ++i) {\r\n    const feature = features[i - 1];\r\n    const featureStyleFunction = feature.getStyleFunction() || styleFunction;\r\n    if (!featureStyleFunction) {\r\n      continue;\r\n    }\r\n    let styles = featureStyleFunction(feature, resolution);\r\n    if (!styles) {\r\n      continue;\r\n    }\r\n    if (!Array.isArray(styles)) {\r\n      styles = [styles];\r\n    }\r\n    const index = i * indexFactor;\r\n    const color = index.toString(16).padStart(7, '#00000');\r\n    for (let j = 0, jj = styles.length; j < jj; ++j) {\r\n      const originalStyle = styles[j];\r\n      const geometry = originalStyle.getGeometryFunction()(feature);\r\n      if (!geometry || !intersects(userExtent, geometry.getExtent())) {\r\n        continue;\r\n      }\r\n      const style = originalStyle.clone();\r\n      const fill = style.getFill();\r\n      if (fill) {\r\n        fill.setColor(color);\r\n      }\r\n      const stroke = style.getStroke();\r\n      if (stroke) {\r\n        stroke.setColor(color);\r\n        stroke.setLineDash(null);\r\n      }\r\n      style.setText(undefined);\r\n      const image = originalStyle.getImage();\r\n      if (image) {\r\n        const imgSize = image.getImageSize();\r\n        if (!imgSize) {\r\n          continue;\r\n        }\r\n\r\n        const imgContext = createCanvasContext2D(\r\n          imgSize[0],\r\n          imgSize[1],\r\n          undefined,\r\n          {alpha: false},\r\n        );\r\n        const img = imgContext.canvas;\r\n        imgContext.fillStyle = color;\r\n        imgContext.fillRect(0, 0, img.width, img.height);\r\n        style.setImage(\r\n          new Icon({\r\n            img: img,\r\n            anchor: image.getAnchor(),\r\n            anchorXUnits: 'pixels',\r\n            anchorYUnits: 'pixels',\r\n            offset: image.getOrigin(),\r\n            opacity: 1,\r\n            size: image.getSize(),\r\n            scale: image.getScale(),\r\n            rotation: image.getRotation(),\r\n            rotateWithView: image.getRotateWithView(),\r\n          }),\r\n        );\r\n      }\r\n      const zIndex = style.getZIndex() || 0;\r\n      let byGeometryType = featuresByZIndex[zIndex];\r\n      if (!byGeometryType) {\r\n        byGeometryType = {};\r\n        featuresByZIndex[zIndex] = byGeometryType;\r\n        byGeometryType['Polygon'] = [];\r\n        byGeometryType['Circle'] = [];\r\n        byGeometryType['LineString'] = [];\r\n        byGeometryType['Point'] = [];\r\n      }\r\n      const type = geometry.getType();\r\n      if (type === 'GeometryCollection') {\r\n        const geometries =\r\n          /** @type {import(\"../../geom/GeometryCollection.js\").default} */ (\r\n            geometry\r\n          ).getGeometriesArrayRecursive();\r\n        for (let i = 0, ii = geometries.length; i < ii; ++i) {\r\n          const geometry = geometries[i];\r\n          byGeometryType[geometry.getType().replace('Multi', '')].push(\r\n            geometry,\r\n            style,\r\n          );\r\n        }\r\n      } else {\r\n        byGeometryType[type.replace('Multi', '')].push(geometry, style);\r\n      }\r\n    }\r\n  }\r\n\r\n  const zIndexKeys = Object.keys(featuresByZIndex).map(Number).sort(ascending);\r\n  for (let i = 0, ii = zIndexKeys.length; i < ii; ++i) {\r\n    const byGeometryType = featuresByZIndex[zIndexKeys[i]];\r\n    for (const type in byGeometryType) {\r\n      const geomAndStyle = byGeometryType[type];\r\n      for (let j = 0, jj = geomAndStyle.length; j < jj; j += 2) {\r\n        renderer.setStyle(geomAndStyle[j + 1]);\r\n        for (let k = 0, kk = transforms.length; k < kk; ++k) {\r\n          renderer.setTransform(transforms[k]);\r\n          renderer.drawGeometry(geomAndStyle[j]);\r\n        }\r\n      }\r\n    }\r\n  }\r\n  return context.getImageData(0, 0, canvas.width, canvas.height);\r\n}\r\n\r\n/**\r\n * @param {import(\"../../pixel\").Pixel} pixel Pixel coordinate on the hit\r\n * detection canvas in css pixels.\r\n * @param {Array<F>} features Features. Has to\r\n * match the `features` array that was passed to `createHitDetectionImageData()`.\r\n * @param {ImageData} imageData Hit detection image data generated by\r\n * `createHitDetectionImageData()`.\r\n * @return {Array<F>} Features.\r\n * @template {import(\"../../Feature.js\").FeatureLike} F\r\n */\r\nexport function hitDetect(pixel, features, imageData) {\r\n  /** @type {Array<F>} */\r\n  const resultFeatures = [];\r\n  if (imageData) {\r\n    const x = Math.floor(Math.round(pixel[0]) * HIT_DETECT_RESOLUTION);\r\n    const y = Math.floor(Math.round(pixel[1]) * HIT_DETECT_RESOLUTION);\r\n    // The pixel coordinate is clamped down to the hit-detect canvas' size to account\r\n    // for browsers returning coordinates slightly larger than the actual canvas size\r\n    // due to a non-integer pixel ratio.\r\n    const index =\r\n      (clamp(x, 0, imageData.width - 1) +\r\n        clamp(y, 0, imageData.height - 1) * imageData.width) *\r\n      4;\r\n    const r = imageData.data[index];\r\n    const g = imageData.data[index + 1];\r\n    const b = imageData.data[index + 2];\r\n    const i = b + 256 * (g + 256 * r);\r\n    const indexFactor = Math.floor((256 * 256 * 256 - 1) / features.length);\r\n    if (i && i % indexFactor === 0) {\r\n      resultFeatures.push(features[i / indexFactor - 1]);\r\n    }\r\n  }\r\n  return resultFeatures;\r\n}\r\n","/**\r\n * @module ol/render/canvas/Immediate\r\n */\r\n// FIXME test, especially polygons with holes and multipolygons\r\n// FIXME need to handle large thick features (where pixel size matters)\r\n// FIXME add offset and end to ol/geom/flat/transform~transform2D?\r\n\r\nimport {equals} from '../../array.js';\r\nimport {asColorLike} from '../../colorlike.js';\r\nimport {intersects} from '../../extent.js';\r\nimport {transformGeom2D} from '../../geom/SimpleGeometry.js';\r\nimport {transform2D} from '../../geom/flat/transform.js';\r\nimport {toFixed} from '../../math.js';\r\nimport {\r\n  compose as composeTransform,\r\n  create as createTransform,\r\n} from '../../transform.js';\r\nimport VectorContext from '../VectorContext.js';\r\nimport {\r\n  defaultFillStyle,\r\n  defaultFont,\r\n  defaultLineCap,\r\n  defaultLineDash,\r\n  defaultLineDashOffset,\r\n  defaultLineJoin,\r\n  defaultLineWidth,\r\n  defaultMiterLimit,\r\n  defaultStrokeStyle,\r\n  defaultTextAlign,\r\n  defaultTextBaseline,\r\n} from '../canvas.js';\r\n\r\n/**\r\n * @classdesc\r\n * A concrete subclass of {@link module:ol/render/VectorContext~VectorContext} that implements\r\n * direct rendering of features and geometries to an HTML5 Canvas context.\r\n * Instances of this class are created internally by the library and\r\n * provided to application code as vectorContext member of the\r\n * {@link module:ol/render/Event~RenderEvent} object associated with postcompose, precompose and\r\n * render events emitted by layers and maps.\r\n */\r\nclass CanvasImmediateRenderer extends VectorContext {\r\n  /**\r\n   * @param {CanvasRenderingContext2D} context Context.\r\n   * @param {number} pixelRatio Pixel ratio.\r\n   * @param {import(\"../../extent.js\").Extent} extent Extent.\r\n   * @param {import(\"../../transform.js\").Transform} transform Transform.\r\n   * @param {number} viewRotation View rotation.\r\n   * @param {number} [squaredTolerance] Optional squared tolerance for simplification.\r\n   * @param {import(\"../../proj.js\").TransformFunction} [userTransform] Transform from user to view projection.\r\n   */\r\n  constructor(\r\n    context,\r\n    pixelRatio,\r\n    extent,\r\n    transform,\r\n    viewRotation,\r\n    squaredTolerance,\r\n    userTransform,\r\n  ) {\r\n    super();\r\n\r\n    /**\r\n     * @private\r\n     * @type {CanvasRenderingContext2D}\r\n     */\r\n    this.context_ = context;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.pixelRatio_ = pixelRatio;\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"../../extent.js\").Extent}\r\n     */\r\n    this.extent_ = extent;\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"../../transform.js\").Transform}\r\n     */\r\n    this.transform_ = transform;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.transformRotation_ = transform\r\n      ? toFixed(Math.atan2(transform[1], transform[0]), 10)\r\n      : 0;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.viewRotation_ = viewRotation;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.squaredTolerance_ = squaredTolerance;\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"../../proj.js\").TransformFunction}\r\n     */\r\n    this.userTransform_ = userTransform;\r\n\r\n    /**\r\n     * @private\r\n     * @type {?import(\"../canvas.js\").FillState}\r\n     */\r\n    this.contextFillState_ = null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {?import(\"../canvas.js\").StrokeState}\r\n     */\r\n    this.contextStrokeState_ = null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {?import(\"../canvas.js\").TextState}\r\n     */\r\n    this.contextTextState_ = null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {?import(\"../canvas.js\").FillState}\r\n     */\r\n    this.fillState_ = null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {?import(\"../canvas.js\").StrokeState}\r\n     */\r\n    this.strokeState_ = null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {import('../../DataTile.js').ImageLike}\r\n     */\r\n    this.image_ = null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.imageAnchorX_ = 0;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.imageAnchorY_ = 0;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.imageHeight_ = 0;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.imageOpacity_ = 0;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.imageOriginX_ = 0;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.imageOriginY_ = 0;\r\n\r\n    /**\r\n     * @private\r\n     * @type {boolean}\r\n     */\r\n    this.imageRotateWithView_ = false;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.imageRotation_ = 0;\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"../../size.js\").Size}\r\n     */\r\n    this.imageScale_ = [0, 0];\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.imageWidth_ = 0;\r\n\r\n    /**\r\n     * @private\r\n     * @type {string}\r\n     */\r\n    this.text_ = '';\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.textOffsetX_ = 0;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.textOffsetY_ = 0;\r\n\r\n    /**\r\n     * @private\r\n     * @type {boolean}\r\n     */\r\n    this.textRotateWithView_ = false;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.textRotation_ = 0;\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"../../size.js\").Size}\r\n     */\r\n    this.textScale_ = [0, 0];\r\n\r\n    /**\r\n     * @private\r\n     * @type {?import(\"../canvas.js\").FillState}\r\n     */\r\n    this.textFillState_ = null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {?import(\"../canvas.js\").StrokeState}\r\n     */\r\n    this.textStrokeState_ = null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {?import(\"../canvas.js\").TextState}\r\n     */\r\n    this.textState_ = null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {Array<number>}\r\n     */\r\n    this.pixelCoordinates_ = [];\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"../../transform.js\").Transform}\r\n     */\r\n    this.tmpLocalTransform_ = createTransform();\r\n  }\r\n\r\n  /**\r\n   * @param {Array<number>} flatCoordinates Flat coordinates.\r\n   * @param {number} offset Offset.\r\n   * @param {number} end End.\r\n   * @param {number} stride Stride.\r\n   * @private\r\n   */\r\n  drawImages_(flatCoordinates, offset, end, stride) {\r\n    if (!this.image_) {\r\n      return;\r\n    }\r\n    const pixelCoordinates = transform2D(\r\n      flatCoordinates,\r\n      offset,\r\n      end,\r\n      stride,\r\n      this.transform_,\r\n      this.pixelCoordinates_,\r\n    );\r\n    const context = this.context_;\r\n    const localTransform = this.tmpLocalTransform_;\r\n    const alpha = context.globalAlpha;\r\n    if (this.imageOpacity_ != 1) {\r\n      context.globalAlpha = alpha * this.imageOpacity_;\r\n    }\r\n    let rotation = this.imageRotation_;\r\n    if (this.transformRotation_ === 0) {\r\n      rotation -= this.viewRotation_;\r\n    }\r\n    if (this.imageRotateWithView_) {\r\n      rotation += this.viewRotation_;\r\n    }\r\n    for (let i = 0, ii = pixelCoordinates.length; i < ii; i += 2) {\r\n      const x = pixelCoordinates[i] - this.imageAnchorX_;\r\n      const y = pixelCoordinates[i + 1] - this.imageAnchorY_;\r\n      if (\r\n        rotation !== 0 ||\r\n        this.imageScale_[0] != 1 ||\r\n        this.imageScale_[1] != 1\r\n      ) {\r\n        const centerX = x + this.imageAnchorX_;\r\n        const centerY = y + this.imageAnchorY_;\r\n        composeTransform(\r\n          localTransform,\r\n          centerX,\r\n          centerY,\r\n          1,\r\n          1,\r\n          rotation,\r\n          -centerX,\r\n          -centerY,\r\n        );\r\n        context.save();\r\n        context.transform.apply(context, localTransform);\r\n        context.translate(centerX, centerY);\r\n        context.scale(this.imageScale_[0], this.imageScale_[1]);\r\n        context.drawImage(\r\n          this.image_,\r\n          this.imageOriginX_,\r\n          this.imageOriginY_,\r\n          this.imageWidth_,\r\n          this.imageHeight_,\r\n          -this.imageAnchorX_,\r\n          -this.imageAnchorY_,\r\n          this.imageWidth_,\r\n          this.imageHeight_,\r\n        );\r\n        context.restore();\r\n      } else {\r\n        context.drawImage(\r\n          this.image_,\r\n          this.imageOriginX_,\r\n          this.imageOriginY_,\r\n          this.imageWidth_,\r\n          this.imageHeight_,\r\n          x,\r\n          y,\r\n          this.imageWidth_,\r\n          this.imageHeight_,\r\n        );\r\n      }\r\n    }\r\n    if (this.imageOpacity_ != 1) {\r\n      context.globalAlpha = alpha;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {Array<number>} flatCoordinates Flat coordinates.\r\n   * @param {number} offset Offset.\r\n   * @param {number} end End.\r\n   * @param {number} stride Stride.\r\n   * @private\r\n   */\r\n  drawText_(flatCoordinates, offset, end, stride) {\r\n    if (!this.textState_ || this.text_ === '') {\r\n      return;\r\n    }\r\n    if (this.textFillState_) {\r\n      this.setContextFillState_(this.textFillState_);\r\n    }\r\n    if (this.textStrokeState_) {\r\n      this.setContextStrokeState_(this.textStrokeState_);\r\n    }\r\n    this.setContextTextState_(this.textState_);\r\n    const pixelCoordinates = transform2D(\r\n      flatCoordinates,\r\n      offset,\r\n      end,\r\n      stride,\r\n      this.transform_,\r\n      this.pixelCoordinates_,\r\n    );\r\n    const context = this.context_;\r\n    let rotation = this.textRotation_;\r\n    if (this.transformRotation_ === 0) {\r\n      rotation -= this.viewRotation_;\r\n    }\r\n    if (this.textRotateWithView_) {\r\n      rotation += this.viewRotation_;\r\n    }\r\n    for (; offset < end; offset += stride) {\r\n      const x = pixelCoordinates[offset] + this.textOffsetX_;\r\n      const y = pixelCoordinates[offset + 1] + this.textOffsetY_;\r\n      if (\r\n        rotation !== 0 ||\r\n        this.textScale_[0] != 1 ||\r\n        this.textScale_[1] != 1\r\n      ) {\r\n        context.save();\r\n        context.translate(x - this.textOffsetX_, y - this.textOffsetY_);\r\n        context.rotate(rotation);\r\n        context.translate(this.textOffsetX_, this.textOffsetY_);\r\n        context.scale(this.textScale_[0], this.textScale_[1]);\r\n        if (this.textStrokeState_) {\r\n          context.strokeText(this.text_, 0, 0);\r\n        }\r\n        if (this.textFillState_) {\r\n          context.fillText(this.text_, 0, 0);\r\n        }\r\n        context.restore();\r\n      } else {\r\n        if (this.textStrokeState_) {\r\n          context.strokeText(this.text_, x, y);\r\n        }\r\n        if (this.textFillState_) {\r\n          context.fillText(this.text_, x, y);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {Array<number>} flatCoordinates Flat coordinates.\r\n   * @param {number} offset Offset.\r\n   * @param {number} end End.\r\n   * @param {number} stride Stride.\r\n   * @param {boolean} close Close.\r\n   * @private\r\n   * @return {number} end End.\r\n   */\r\n  moveToLineTo_(flatCoordinates, offset, end, stride, close) {\r\n    const context = this.context_;\r\n    const pixelCoordinates = transform2D(\r\n      flatCoordinates,\r\n      offset,\r\n      end,\r\n      stride,\r\n      this.transform_,\r\n      this.pixelCoordinates_,\r\n    );\r\n    context.moveTo(pixelCoordinates[0], pixelCoordinates[1]);\r\n    let length = pixelCoordinates.length;\r\n    if (close) {\r\n      length -= 2;\r\n    }\r\n    for (let i = 2; i < length; i += 2) {\r\n      context.lineTo(pixelCoordinates[i], pixelCoordinates[i + 1]);\r\n    }\r\n    if (close) {\r\n      context.closePath();\r\n    }\r\n    return end;\r\n  }\r\n\r\n  /**\r\n   * @param {Array<number>} flatCoordinates Flat coordinates.\r\n   * @param {number} offset Offset.\r\n   * @param {Array<number>} ends Ends.\r\n   * @param {number} stride Stride.\r\n   * @private\r\n   * @return {number} End.\r\n   */\r\n  drawRings_(flatCoordinates, offset, ends, stride) {\r\n    for (let i = 0, ii = ends.length; i < ii; ++i) {\r\n      offset = this.moveToLineTo_(\r\n        flatCoordinates,\r\n        offset,\r\n        ends[i],\r\n        stride,\r\n        true,\r\n      );\r\n    }\r\n    return offset;\r\n  }\r\n\r\n  /**\r\n   * Render a circle geometry into the canvas.  Rendering is immediate and uses\r\n   * the current fill and stroke styles.\r\n   *\r\n   * @param {import(\"../../geom/Circle.js\").default} geometry Circle geometry.\r\n   * @api\r\n   * @override\r\n   */\r\n  drawCircle(geometry) {\r\n    if (this.squaredTolerance_) {\r\n      geometry = /** @type {import(\"../../geom/Circle.js\").default} */ (\r\n        geometry.simplifyTransformed(\r\n          this.squaredTolerance_,\r\n          this.userTransform_,\r\n        )\r\n      );\r\n    }\r\n    if (!intersects(this.extent_, geometry.getExtent())) {\r\n      return;\r\n    }\r\n    if (this.fillState_ || this.strokeState_) {\r\n      if (this.fillState_) {\r\n        this.setContextFillState_(this.fillState_);\r\n      }\r\n      if (this.strokeState_) {\r\n        this.setContextStrokeState_(this.strokeState_);\r\n      }\r\n      const pixelCoordinates = transformGeom2D(\r\n        geometry,\r\n        this.transform_,\r\n        this.pixelCoordinates_,\r\n      );\r\n      const dx = pixelCoordinates[2] - pixelCoordinates[0];\r\n      const dy = pixelCoordinates[3] - pixelCoordinates[1];\r\n      const radius = Math.sqrt(dx * dx + dy * dy);\r\n      const context = this.context_;\r\n      context.beginPath();\r\n      context.arc(\r\n        pixelCoordinates[0],\r\n        pixelCoordinates[1],\r\n        radius,\r\n        0,\r\n        2 * Math.PI,\r\n      );\r\n      if (this.fillState_) {\r\n        context.fill();\r\n      }\r\n      if (this.strokeState_) {\r\n        context.stroke();\r\n      }\r\n    }\r\n    if (this.text_ !== '') {\r\n      this.drawText_(geometry.getCenter(), 0, 2, 2);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Set the rendering style.  Note that since this is an immediate rendering API,\r\n   * any `zIndex` on the provided style will be ignored.\r\n   *\r\n   * @param {import(\"../../style/Style.js\").default} style The rendering style.\r\n   * @api\r\n   * @override\r\n   */\r\n  setStyle(style) {\r\n    this.setFillStrokeStyle(style.getFill(), style.getStroke());\r\n    this.setImageStyle(style.getImage());\r\n    this.setTextStyle(style.getText());\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../../transform.js\").Transform} transform Transform.\r\n   */\r\n  setTransform(transform) {\r\n    this.transform_ = transform;\r\n  }\r\n\r\n  /**\r\n   * Render a geometry into the canvas.  Call\r\n   * {@link module:ol/render/canvas/Immediate~CanvasImmediateRenderer#setStyle renderer.setStyle()} first to set the rendering style.\r\n   *\r\n   * @param {import(\"../../geom/Geometry.js\").default|import(\"../Feature.js\").default} geometry The geometry to render.\r\n   * @api\r\n   * @override\r\n   */\r\n  drawGeometry(geometry) {\r\n    const type = geometry.getType();\r\n    switch (type) {\r\n      case 'Point':\r\n        this.drawPoint(\r\n          /** @type {import(\"../../geom/Point.js\").default} */ (geometry),\r\n        );\r\n        break;\r\n      case 'LineString':\r\n        this.drawLineString(\r\n          /** @type {import(\"../../geom/LineString.js\").default} */ (geometry),\r\n        );\r\n        break;\r\n      case 'Polygon':\r\n        this.drawPolygon(\r\n          /** @type {import(\"../../geom/Polygon.js\").default} */ (geometry),\r\n        );\r\n        break;\r\n      case 'MultiPoint':\r\n        this.drawMultiPoint(\r\n          /** @type {import(\"../../geom/MultiPoint.js\").default} */ (geometry),\r\n        );\r\n        break;\r\n      case 'MultiLineString':\r\n        this.drawMultiLineString(\r\n          /** @type {import(\"../../geom/MultiLineString.js\").default} */ (\r\n            geometry\r\n          ),\r\n        );\r\n        break;\r\n      case 'MultiPolygon':\r\n        this.drawMultiPolygon(\r\n          /** @type {import(\"../../geom/MultiPolygon.js\").default} */ (\r\n            geometry\r\n          ),\r\n        );\r\n        break;\r\n      case 'GeometryCollection':\r\n        this.drawGeometryCollection(\r\n          /** @type {import(\"../../geom/GeometryCollection.js\").default} */ (\r\n            geometry\r\n          ),\r\n        );\r\n        break;\r\n      case 'Circle':\r\n        this.drawCircle(\r\n          /** @type {import(\"../../geom/Circle.js\").default} */ (geometry),\r\n        );\r\n        break;\r\n      default:\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Render a feature into the canvas.  Note that any `zIndex` on the provided\r\n   * style will be ignored - features are rendered immediately in the order that\r\n   * this method is called.  If you need `zIndex` support, you should be using an\r\n   * {@link module:ol/layer/Vector~VectorLayer} instead.\r\n   *\r\n   * @param {import(\"../../Feature.js\").default} feature Feature.\r\n   * @param {import(\"../../style/Style.js\").default} style Style.\r\n   * @api\r\n   * @override\r\n   */\r\n  drawFeature(feature, style) {\r\n    const geometry = style.getGeometryFunction()(feature);\r\n    if (!geometry) {\r\n      return;\r\n    }\r\n    this.setStyle(style);\r\n    this.drawGeometry(geometry);\r\n  }\r\n\r\n  /**\r\n   * Render a GeometryCollection to the canvas.  Rendering is immediate and\r\n   * uses the current styles appropriate for each geometry in the collection.\r\n   *\r\n   * @param {import(\"../../geom/GeometryCollection.js\").default} geometry Geometry collection.\r\n   * @override\r\n   */\r\n  drawGeometryCollection(geometry) {\r\n    const geometries = geometry.getGeometriesArray();\r\n    for (let i = 0, ii = geometries.length; i < ii; ++i) {\r\n      this.drawGeometry(geometries[i]);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Render a Point geometry into the canvas.  Rendering is immediate and uses\r\n   * the current style.\r\n   *\r\n   * @param {import(\"../../geom/Point.js\").default|import(\"../Feature.js\").default} geometry Point geometry.\r\n   * @override\r\n   */\r\n  drawPoint(geometry) {\r\n    if (this.squaredTolerance_) {\r\n      geometry = /** @type {import(\"../../geom/Point.js\").default} */ (\r\n        geometry.simplifyTransformed(\r\n          this.squaredTolerance_,\r\n          this.userTransform_,\r\n        )\r\n      );\r\n    }\r\n    const flatCoordinates = geometry.getFlatCoordinates();\r\n    const stride = geometry.getStride();\r\n    if (this.image_) {\r\n      this.drawImages_(flatCoordinates, 0, flatCoordinates.length, stride);\r\n    }\r\n    if (this.text_ !== '') {\r\n      this.drawText_(flatCoordinates, 0, flatCoordinates.length, stride);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Render a MultiPoint geometry  into the canvas.  Rendering is immediate and\r\n   * uses the current style.\r\n   *\r\n   * @param {import(\"../../geom/MultiPoint.js\").default|import(\"../Feature.js\").default} geometry MultiPoint geometry.\r\n   * @override\r\n   */\r\n  drawMultiPoint(geometry) {\r\n    if (this.squaredTolerance_) {\r\n      geometry = /** @type {import(\"../../geom/MultiPoint.js\").default} */ (\r\n        geometry.simplifyTransformed(\r\n          this.squaredTolerance_,\r\n          this.userTransform_,\r\n        )\r\n      );\r\n    }\r\n    const flatCoordinates = geometry.getFlatCoordinates();\r\n    const stride = geometry.getStride();\r\n    if (this.image_) {\r\n      this.drawImages_(flatCoordinates, 0, flatCoordinates.length, stride);\r\n    }\r\n    if (this.text_ !== '') {\r\n      this.drawText_(flatCoordinates, 0, flatCoordinates.length, stride);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Render a LineString into the canvas.  Rendering is immediate and uses\r\n   * the current style.\r\n   *\r\n   * @param {import(\"../../geom/LineString.js\").default|import(\"../Feature.js\").default} geometry LineString geometry.\r\n   * @override\r\n   */\r\n  drawLineString(geometry) {\r\n    if (this.squaredTolerance_) {\r\n      geometry = /** @type {import(\"../../geom/LineString.js\").default} */ (\r\n        geometry.simplifyTransformed(\r\n          this.squaredTolerance_,\r\n          this.userTransform_,\r\n        )\r\n      );\r\n    }\r\n    if (!intersects(this.extent_, geometry.getExtent())) {\r\n      return;\r\n    }\r\n    if (this.strokeState_) {\r\n      this.setContextStrokeState_(this.strokeState_);\r\n      const context = this.context_;\r\n      const flatCoordinates = geometry.getFlatCoordinates();\r\n      context.beginPath();\r\n      this.moveToLineTo_(\r\n        flatCoordinates,\r\n        0,\r\n        flatCoordinates.length,\r\n        geometry.getStride(),\r\n        false,\r\n      );\r\n      context.stroke();\r\n    }\r\n    if (this.text_ !== '') {\r\n      const flatMidpoint = geometry.getFlatMidpoint();\r\n      this.drawText_(flatMidpoint, 0, 2, 2);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Render a MultiLineString geometry into the canvas.  Rendering is immediate\r\n   * and uses the current style.\r\n   *\r\n   * @param {import(\"../../geom/MultiLineString.js\").default|import(\"../Feature.js\").default} geometry MultiLineString geometry.\r\n   * @override\r\n   */\r\n  drawMultiLineString(geometry) {\r\n    if (this.squaredTolerance_) {\r\n      geometry =\r\n        /** @type {import(\"../../geom/MultiLineString.js\").default} */ (\r\n          geometry.simplifyTransformed(\r\n            this.squaredTolerance_,\r\n            this.userTransform_,\r\n          )\r\n        );\r\n    }\r\n    const geometryExtent = geometry.getExtent();\r\n    if (!intersects(this.extent_, geometryExtent)) {\r\n      return;\r\n    }\r\n    if (this.strokeState_) {\r\n      this.setContextStrokeState_(this.strokeState_);\r\n      const context = this.context_;\r\n      const flatCoordinates = geometry.getFlatCoordinates();\r\n      let offset = 0;\r\n      const ends = /** @type {Array<number>} */ (geometry.getEnds());\r\n      const stride = geometry.getStride();\r\n      context.beginPath();\r\n      for (let i = 0, ii = ends.length; i < ii; ++i) {\r\n        offset = this.moveToLineTo_(\r\n          flatCoordinates,\r\n          offset,\r\n          ends[i],\r\n          stride,\r\n          false,\r\n        );\r\n      }\r\n      context.stroke();\r\n    }\r\n    if (this.text_ !== '') {\r\n      const flatMidpoints = geometry.getFlatMidpoints();\r\n      this.drawText_(flatMidpoints, 0, flatMidpoints.length, 2);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Render a Polygon geometry into the canvas.  Rendering is immediate and uses\r\n   * the current style.\r\n   *\r\n   * @param {import(\"../../geom/Polygon.js\").default|import(\"../Feature.js\").default} geometry Polygon geometry.\r\n   * @override\r\n   */\r\n  drawPolygon(geometry) {\r\n    if (this.squaredTolerance_) {\r\n      geometry = /** @type {import(\"../../geom/Polygon.js\").default} */ (\r\n        geometry.simplifyTransformed(\r\n          this.squaredTolerance_,\r\n          this.userTransform_,\r\n        )\r\n      );\r\n    }\r\n    if (!intersects(this.extent_, geometry.getExtent())) {\r\n      return;\r\n    }\r\n    if (this.strokeState_ || this.fillState_) {\r\n      if (this.fillState_) {\r\n        this.setContextFillState_(this.fillState_);\r\n      }\r\n      if (this.strokeState_) {\r\n        this.setContextStrokeState_(this.strokeState_);\r\n      }\r\n      const context = this.context_;\r\n      context.beginPath();\r\n      this.drawRings_(\r\n        geometry.getOrientedFlatCoordinates(),\r\n        0,\r\n        /** @type {Array<number>} */ (geometry.getEnds()),\r\n        geometry.getStride(),\r\n      );\r\n      if (this.fillState_) {\r\n        context.fill();\r\n      }\r\n      if (this.strokeState_) {\r\n        context.stroke();\r\n      }\r\n    }\r\n    if (this.text_ !== '') {\r\n      const flatInteriorPoint = geometry.getFlatInteriorPoint();\r\n      this.drawText_(flatInteriorPoint, 0, 2, 2);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Render MultiPolygon geometry into the canvas.  Rendering is immediate and\r\n   * uses the current style.\r\n   * @param {import(\"../../geom/MultiPolygon.js\").default} geometry MultiPolygon geometry.\r\n   * @override\r\n   */\r\n  drawMultiPolygon(geometry) {\r\n    if (this.squaredTolerance_) {\r\n      geometry = /** @type {import(\"../../geom/MultiPolygon.js\").default} */ (\r\n        geometry.simplifyTransformed(\r\n          this.squaredTolerance_,\r\n          this.userTransform_,\r\n        )\r\n      );\r\n    }\r\n    if (!intersects(this.extent_, geometry.getExtent())) {\r\n      return;\r\n    }\r\n    if (this.strokeState_ || this.fillState_) {\r\n      if (this.fillState_) {\r\n        this.setContextFillState_(this.fillState_);\r\n      }\r\n      if (this.strokeState_) {\r\n        this.setContextStrokeState_(this.strokeState_);\r\n      }\r\n      const context = this.context_;\r\n      const flatCoordinates = geometry.getOrientedFlatCoordinates();\r\n      let offset = 0;\r\n      const endss = geometry.getEndss();\r\n      const stride = geometry.getStride();\r\n      context.beginPath();\r\n      for (let i = 0, ii = endss.length; i < ii; ++i) {\r\n        const ends = endss[i];\r\n        offset = this.drawRings_(flatCoordinates, offset, ends, stride);\r\n      }\r\n      if (this.fillState_) {\r\n        context.fill();\r\n      }\r\n      if (this.strokeState_) {\r\n        context.stroke();\r\n      }\r\n    }\r\n    if (this.text_ !== '') {\r\n      const flatInteriorPoints = geometry.getFlatInteriorPoints();\r\n      this.drawText_(flatInteriorPoints, 0, flatInteriorPoints.length, 2);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../canvas.js\").FillState} fillState Fill state.\r\n   * @private\r\n   */\r\n  setContextFillState_(fillState) {\r\n    const context = this.context_;\r\n    const contextFillState = this.contextFillState_;\r\n    if (!contextFillState) {\r\n      context.fillStyle = fillState.fillStyle;\r\n      this.contextFillState_ = {\r\n        fillStyle: fillState.fillStyle,\r\n      };\r\n    } else {\r\n      if (contextFillState.fillStyle != fillState.fillStyle) {\r\n        contextFillState.fillStyle = fillState.fillStyle;\r\n        context.fillStyle = fillState.fillStyle;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../canvas.js\").StrokeState} strokeState Stroke state.\r\n   * @private\r\n   */\r\n  setContextStrokeState_(strokeState) {\r\n    const context = this.context_;\r\n    const contextStrokeState = this.contextStrokeState_;\r\n    if (!contextStrokeState) {\r\n      context.lineCap = strokeState.lineCap;\r\n      context.setLineDash(strokeState.lineDash);\r\n      context.lineDashOffset = strokeState.lineDashOffset;\r\n      context.lineJoin = strokeState.lineJoin;\r\n      context.lineWidth = strokeState.lineWidth;\r\n      context.miterLimit = strokeState.miterLimit;\r\n      context.strokeStyle = strokeState.strokeStyle;\r\n      this.contextStrokeState_ = {\r\n        lineCap: strokeState.lineCap,\r\n        lineDash: strokeState.lineDash,\r\n        lineDashOffset: strokeState.lineDashOffset,\r\n        lineJoin: strokeState.lineJoin,\r\n        lineWidth: strokeState.lineWidth,\r\n        miterLimit: strokeState.miterLimit,\r\n        strokeStyle: strokeState.strokeStyle,\r\n      };\r\n    } else {\r\n      if (contextStrokeState.lineCap != strokeState.lineCap) {\r\n        contextStrokeState.lineCap = strokeState.lineCap;\r\n        context.lineCap = strokeState.lineCap;\r\n      }\r\n      if (!equals(contextStrokeState.lineDash, strokeState.lineDash)) {\r\n        context.setLineDash(\r\n          (contextStrokeState.lineDash = strokeState.lineDash),\r\n        );\r\n      }\r\n      if (contextStrokeState.lineDashOffset != strokeState.lineDashOffset) {\r\n        contextStrokeState.lineDashOffset = strokeState.lineDashOffset;\r\n        context.lineDashOffset = strokeState.lineDashOffset;\r\n      }\r\n      if (contextStrokeState.lineJoin != strokeState.lineJoin) {\r\n        contextStrokeState.lineJoin = strokeState.lineJoin;\r\n        context.lineJoin = strokeState.lineJoin;\r\n      }\r\n      if (contextStrokeState.lineWidth != strokeState.lineWidth) {\r\n        contextStrokeState.lineWidth = strokeState.lineWidth;\r\n        context.lineWidth = strokeState.lineWidth;\r\n      }\r\n      if (contextStrokeState.miterLimit != strokeState.miterLimit) {\r\n        contextStrokeState.miterLimit = strokeState.miterLimit;\r\n        context.miterLimit = strokeState.miterLimit;\r\n      }\r\n      if (contextStrokeState.strokeStyle != strokeState.strokeStyle) {\r\n        contextStrokeState.strokeStyle = strokeState.strokeStyle;\r\n        context.strokeStyle = strokeState.strokeStyle;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../canvas.js\").TextState} textState Text state.\r\n   * @private\r\n   */\r\n  setContextTextState_(textState) {\r\n    const context = this.context_;\r\n    const contextTextState = this.contextTextState_;\r\n    const textAlign = textState.textAlign\r\n      ? textState.textAlign\r\n      : defaultTextAlign;\r\n    if (!contextTextState) {\r\n      context.font = textState.font;\r\n      context.textAlign = textAlign;\r\n      context.textBaseline = textState.textBaseline;\r\n      this.contextTextState_ = {\r\n        font: textState.font,\r\n        textAlign: textAlign,\r\n        textBaseline: textState.textBaseline,\r\n      };\r\n    } else {\r\n      if (contextTextState.font != textState.font) {\r\n        contextTextState.font = textState.font;\r\n        context.font = textState.font;\r\n      }\r\n      if (contextTextState.textAlign != textAlign) {\r\n        contextTextState.textAlign = textAlign;\r\n        context.textAlign = textAlign;\r\n      }\r\n      if (contextTextState.textBaseline != textState.textBaseline) {\r\n        contextTextState.textBaseline = textState.textBaseline;\r\n        context.textBaseline = textState.textBaseline;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Set the fill and stroke style for subsequent draw operations.  To clear\r\n   * either fill or stroke styles, pass null for the appropriate parameter.\r\n   *\r\n   * @param {import(\"../../style/Fill.js\").default} fillStyle Fill style.\r\n   * @param {import(\"../../style/Stroke.js\").default} strokeStyle Stroke style.\r\n   * @override\r\n   */\r\n  setFillStrokeStyle(fillStyle, strokeStyle) {\r\n    if (!fillStyle) {\r\n      this.fillState_ = null;\r\n    } else {\r\n      const fillStyleColor = fillStyle.getColor();\r\n      this.fillState_ = {\r\n        fillStyle: asColorLike(\r\n          fillStyleColor ? fillStyleColor : defaultFillStyle,\r\n        ),\r\n      };\r\n    }\r\n    if (!strokeStyle) {\r\n      this.strokeState_ = null;\r\n    } else {\r\n      const strokeStyleColor = strokeStyle.getColor();\r\n      const strokeStyleLineCap = strokeStyle.getLineCap();\r\n      const strokeStyleLineDash = strokeStyle.getLineDash();\r\n      const strokeStyleLineDashOffset = strokeStyle.getLineDashOffset();\r\n      const strokeStyleLineJoin = strokeStyle.getLineJoin();\r\n      const strokeStyleWidth = strokeStyle.getWidth();\r\n      const strokeStyleMiterLimit = strokeStyle.getMiterLimit();\r\n      const lineDash = strokeStyleLineDash\r\n        ? strokeStyleLineDash\r\n        : defaultLineDash;\r\n      this.strokeState_ = {\r\n        lineCap:\r\n          strokeStyleLineCap !== undefined\r\n            ? strokeStyleLineCap\r\n            : defaultLineCap,\r\n        lineDash:\r\n          this.pixelRatio_ === 1\r\n            ? lineDash\r\n            : lineDash.map((n) => n * this.pixelRatio_),\r\n        lineDashOffset:\r\n          (strokeStyleLineDashOffset\r\n            ? strokeStyleLineDashOffset\r\n            : defaultLineDashOffset) * this.pixelRatio_,\r\n        lineJoin:\r\n          strokeStyleLineJoin !== undefined\r\n            ? strokeStyleLineJoin\r\n            : defaultLineJoin,\r\n        lineWidth:\r\n          (strokeStyleWidth !== undefined\r\n            ? strokeStyleWidth\r\n            : defaultLineWidth) * this.pixelRatio_,\r\n        miterLimit:\r\n          strokeStyleMiterLimit !== undefined\r\n            ? strokeStyleMiterLimit\r\n            : defaultMiterLimit,\r\n        strokeStyle: asColorLike(\r\n          strokeStyleColor ? strokeStyleColor : defaultStrokeStyle,\r\n        ),\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Set the image style for subsequent draw operations.  Pass null to remove\r\n   * the image style.\r\n   *\r\n   * @param {import(\"../../style/Image.js\").default} imageStyle Image style.\r\n   * @override\r\n   */\r\n  setImageStyle(imageStyle) {\r\n    let imageSize;\r\n    if (!imageStyle || !(imageSize = imageStyle.getSize())) {\r\n      this.image_ = null;\r\n      return;\r\n    }\r\n    const imagePixelRatio = imageStyle.getPixelRatio(this.pixelRatio_);\r\n    const imageAnchor = imageStyle.getAnchor();\r\n    const imageOrigin = imageStyle.getOrigin();\r\n    this.image_ = imageStyle.getImage(this.pixelRatio_);\r\n    this.imageAnchorX_ = imageAnchor[0] * imagePixelRatio;\r\n    this.imageAnchorY_ = imageAnchor[1] * imagePixelRatio;\r\n    this.imageHeight_ = imageSize[1] * imagePixelRatio;\r\n    this.imageOpacity_ = imageStyle.getOpacity();\r\n    this.imageOriginX_ = imageOrigin[0];\r\n    this.imageOriginY_ = imageOrigin[1];\r\n    this.imageRotateWithView_ = imageStyle.getRotateWithView();\r\n    this.imageRotation_ = imageStyle.getRotation();\r\n    const imageScale = imageStyle.getScaleArray();\r\n    this.imageScale_ = [\r\n      (imageScale[0] * this.pixelRatio_) / imagePixelRatio,\r\n      (imageScale[1] * this.pixelRatio_) / imagePixelRatio,\r\n    ];\r\n    this.imageWidth_ = imageSize[0] * imagePixelRatio;\r\n  }\r\n\r\n  /**\r\n   * Set the text style for subsequent draw operations.  Pass null to\r\n   * remove the text style.\r\n   *\r\n   * @param {import(\"../../style/Text.js\").default} textStyle Text style.\r\n   * @override\r\n   */\r\n  setTextStyle(textStyle) {\r\n    if (!textStyle) {\r\n      this.text_ = '';\r\n    } else {\r\n      const textFillStyle = textStyle.getFill();\r\n      if (!textFillStyle) {\r\n        this.textFillState_ = null;\r\n      } else {\r\n        const textFillStyleColor = textFillStyle.getColor();\r\n        this.textFillState_ = {\r\n          fillStyle: asColorLike(\r\n            textFillStyleColor ? textFillStyleColor : defaultFillStyle,\r\n          ),\r\n        };\r\n      }\r\n      const textStrokeStyle = textStyle.getStroke();\r\n      if (!textStrokeStyle) {\r\n        this.textStrokeState_ = null;\r\n      } else {\r\n        const textStrokeStyleColor = textStrokeStyle.getColor();\r\n        const textStrokeStyleLineCap = textStrokeStyle.getLineCap();\r\n        const textStrokeStyleLineDash = textStrokeStyle.getLineDash();\r\n        const textStrokeStyleLineDashOffset =\r\n          textStrokeStyle.getLineDashOffset();\r\n        const textStrokeStyleLineJoin = textStrokeStyle.getLineJoin();\r\n        const textStrokeStyleWidth = textStrokeStyle.getWidth();\r\n        const textStrokeStyleMiterLimit = textStrokeStyle.getMiterLimit();\r\n        this.textStrokeState_ = {\r\n          lineCap:\r\n            textStrokeStyleLineCap !== undefined\r\n              ? textStrokeStyleLineCap\r\n              : defaultLineCap,\r\n          lineDash: textStrokeStyleLineDash\r\n            ? textStrokeStyleLineDash\r\n            : defaultLineDash,\r\n          lineDashOffset: textStrokeStyleLineDashOffset\r\n            ? textStrokeStyleLineDashOffset\r\n            : defaultLineDashOffset,\r\n          lineJoin:\r\n            textStrokeStyleLineJoin !== undefined\r\n              ? textStrokeStyleLineJoin\r\n              : defaultLineJoin,\r\n          lineWidth:\r\n            textStrokeStyleWidth !== undefined\r\n              ? textStrokeStyleWidth\r\n              : defaultLineWidth,\r\n          miterLimit:\r\n            textStrokeStyleMiterLimit !== undefined\r\n              ? textStrokeStyleMiterLimit\r\n              : defaultMiterLimit,\r\n          strokeStyle: asColorLike(\r\n            textStrokeStyleColor ? textStrokeStyleColor : defaultStrokeStyle,\r\n          ),\r\n        };\r\n      }\r\n      const textFont = textStyle.getFont();\r\n      const textOffsetX = textStyle.getOffsetX();\r\n      const textOffsetY = textStyle.getOffsetY();\r\n      const textRotateWithView = textStyle.getRotateWithView();\r\n      const textRotation = textStyle.getRotation();\r\n      const textScale = textStyle.getScaleArray();\r\n      const textText = textStyle.getText();\r\n      const textTextAlign = textStyle.getTextAlign();\r\n      const textTextBaseline = textStyle.getTextBaseline();\r\n      this.textState_ = {\r\n        font: textFont !== undefined ? textFont : defaultFont,\r\n        textAlign:\r\n          textTextAlign !== undefined ? textTextAlign : defaultTextAlign,\r\n        textBaseline:\r\n          textTextBaseline !== undefined\r\n            ? textTextBaseline\r\n            : defaultTextBaseline,\r\n      };\r\n      this.text_ =\r\n        textText !== undefined\r\n          ? Array.isArray(textText)\r\n            ? textText.reduce((acc, t, i) => (acc += i % 2 ? ' ' : t), '')\r\n            : textText\r\n          : '';\r\n      this.textOffsetX_ =\r\n        textOffsetX !== undefined ? this.pixelRatio_ * textOffsetX : 0;\r\n      this.textOffsetY_ =\r\n        textOffsetY !== undefined ? this.pixelRatio_ * textOffsetY : 0;\r\n      this.textRotateWithView_ =\r\n        textRotateWithView !== undefined ? textRotateWithView : false;\r\n      this.textRotation_ = textRotation !== undefined ? textRotation : 0;\r\n      this.textScale_ = [\r\n        this.pixelRatio_ * textScale[0],\r\n        this.pixelRatio_ * textScale[1],\r\n      ];\r\n    }\r\n  }\r\n}\r\n\r\nexport default CanvasImmediateRenderer;\r\n","/**\r\n * @module ol/renderer/vector\r\n */\r\nimport ImageState from '../ImageState.js';\r\nimport {getUid} from '../util.js';\r\n\r\n/**\r\n * Feature callback. The callback will be called with three arguments. The first\r\n * argument is one {@link module:ol/Feature~Feature feature} or {@link module:ol/render/Feature~RenderFeature render feature}\r\n * at the pixel, the second is the {@link module:ol/layer/Layer~Layer layer} of the feature and will be null for\r\n * unmanaged layers. The third is the {@link module:ol/geom/SimpleGeometry~SimpleGeometry} of the feature. For features\r\n * with a GeometryCollection geometry, it will be the first detected geometry from the collection.\r\n * @template T\r\n * @typedef {function(import(\"../Feature.js\").FeatureLike, import(\"../layer/Layer.js\").default<import(\"../source/Source\").default>, import(\"../geom/SimpleGeometry.js\").default): T} FeatureCallback\r\n */\r\n\r\n/**\r\n * Tolerance for geometry simplification in device pixels.\r\n * @type {number}\r\n */\r\nconst SIMPLIFY_TOLERANCE = 0.5;\r\n\r\n/**\r\n * @const\r\n * @type {Object<import(\"../geom/Geometry.js\").Type,\r\n *                function(import(\"../render/canvas/BuilderGroup.js\").default, import(\"../geom/Geometry.js\").default,\r\n *                         import(\"../style/Style.js\").default, Object): void>}\r\n */\r\nconst GEOMETRY_RENDERERS = {\r\n  'Point': renderPointGeometry,\r\n  'LineString': renderLineStringGeometry,\r\n  'Polygon': renderPolygonGeometry,\r\n  'MultiPoint': renderMultiPointGeometry,\r\n  'MultiLineString': renderMultiLineStringGeometry,\r\n  'MultiPolygon': renderMultiPolygonGeometry,\r\n  'GeometryCollection': renderGeometryCollectionGeometry,\r\n  'Circle': renderCircleGeometry,\r\n};\r\n\r\n/**\r\n * @param {import(\"../Feature.js\").FeatureLike} feature1 Feature 1.\r\n * @param {import(\"../Feature.js\").FeatureLike} feature2 Feature 2.\r\n * @return {number} Order.\r\n */\r\nexport function defaultOrder(feature1, feature2) {\r\n  return parseInt(getUid(feature1), 10) - parseInt(getUid(feature2), 10);\r\n}\r\n\r\n/**\r\n * @param {number} resolution Resolution.\r\n * @param {number} pixelRatio Pixel ratio.\r\n * @return {number} Squared pixel tolerance.\r\n */\r\nexport function getSquaredTolerance(resolution, pixelRatio) {\r\n  const tolerance = getTolerance(resolution, pixelRatio);\r\n  return tolerance * tolerance;\r\n}\r\n\r\n/**\r\n * @param {number} resolution Resolution.\r\n * @param {number} pixelRatio Pixel ratio.\r\n * @return {number} Pixel tolerance.\r\n */\r\nexport function getTolerance(resolution, pixelRatio) {\r\n  return (SIMPLIFY_TOLERANCE * resolution) / pixelRatio;\r\n}\r\n\r\n/**\r\n * @param {import(\"../render/canvas/BuilderGroup.js\").default} builderGroup Builder group.\r\n * @param {import(\"../geom/Circle.js\").default} geometry Geometry.\r\n * @param {import(\"../style/Style.js\").default} style Style.\r\n * @param {import(\"../Feature.js\").default} feature Feature.\r\n * @param {number} [index] Render order index.\r\n */\r\nfunction renderCircleGeometry(builderGroup, geometry, style, feature, index) {\r\n  const fillStyle = style.getFill();\r\n  const strokeStyle = style.getStroke();\r\n  if (fillStyle || strokeStyle) {\r\n    const circleReplay = builderGroup.getBuilder(style.getZIndex(), 'Circle');\r\n    circleReplay.setFillStrokeStyle(fillStyle, strokeStyle);\r\n    circleReplay.drawCircle(geometry, feature, index);\r\n  }\r\n  const textStyle = style.getText();\r\n  if (textStyle && textStyle.getText()) {\r\n    const textReplay = builderGroup.getBuilder(style.getZIndex(), 'Text');\r\n    textReplay.setTextStyle(textStyle);\r\n    textReplay.drawText(geometry, feature);\r\n  }\r\n}\r\n\r\n/**\r\n * @param {import(\"../render/canvas/BuilderGroup.js\").default} replayGroup Replay group.\r\n * @param {import(\"../Feature.js\").FeatureLike} feature Feature.\r\n * @param {import(\"../style/Style.js\").default} style Style.\r\n * @param {number} squaredTolerance Squared tolerance.\r\n * @param {function(import(\"../events/Event.js\").default): void} listener Listener function.\r\n * @param {import(\"../proj.js\").TransformFunction} [transform] Transform from user to view projection.\r\n * @param {boolean} [declutter] Enable decluttering.\r\n * @param {number} [index] Render order index..\r\n * @return {boolean} `true` if style is loading.\r\n */\r\nexport function renderFeature(\r\n  replayGroup,\r\n  feature,\r\n  style,\r\n  squaredTolerance,\r\n  listener,\r\n  transform,\r\n  declutter,\r\n  index,\r\n) {\r\n  const loadingPromises = [];\r\n  const imageStyle = style.getImage();\r\n  if (imageStyle) {\r\n    let loading = true;\r\n    const imageState = imageStyle.getImageState();\r\n    if (imageState == ImageState.LOADED || imageState == ImageState.ERROR) {\r\n      loading = false;\r\n    } else {\r\n      if (imageState == ImageState.IDLE) {\r\n        imageStyle.load();\r\n      }\r\n    }\r\n    if (loading) {\r\n      loadingPromises.push(imageStyle.ready());\r\n    }\r\n  }\r\n  const fillStyle = style.getFill();\r\n  if (fillStyle && fillStyle.loading()) {\r\n    loadingPromises.push(fillStyle.ready());\r\n  }\r\n  const loading = loadingPromises.length > 0;\r\n  if (loading) {\r\n    Promise.all(loadingPromises).then(() => listener(null));\r\n  }\r\n  renderFeatureInternal(\r\n    replayGroup,\r\n    feature,\r\n    style,\r\n    squaredTolerance,\r\n    transform,\r\n    declutter,\r\n    index,\r\n  );\r\n\r\n  return loading;\r\n}\r\n\r\n/**\r\n * @param {import(\"../render/canvas/BuilderGroup.js\").default} replayGroup Replay group.\r\n * @param {import(\"../Feature.js\").FeatureLike} feature Feature.\r\n * @param {import(\"../style/Style.js\").default} style Style.\r\n * @param {number} squaredTolerance Squared tolerance.\r\n * @param {import(\"../proj.js\").TransformFunction} [transform] Optional transform function.\r\n * @param {boolean} [declutter] Enable decluttering.\r\n * @param {number} [index] Render order index..\r\n */\r\nfunction renderFeatureInternal(\r\n  replayGroup,\r\n  feature,\r\n  style,\r\n  squaredTolerance,\r\n  transform,\r\n  declutter,\r\n  index,\r\n) {\r\n  const geometry = style.getGeometryFunction()(feature);\r\n  if (!geometry) {\r\n    return;\r\n  }\r\n  const simplifiedGeometry = geometry.simplifyTransformed(\r\n    squaredTolerance,\r\n    transform,\r\n  );\r\n  const renderer = style.getRenderer();\r\n  if (renderer) {\r\n    renderGeometry(replayGroup, simplifiedGeometry, style, feature, index);\r\n  } else {\r\n    const geometryRenderer = GEOMETRY_RENDERERS[simplifiedGeometry.getType()];\r\n    geometryRenderer(\r\n      replayGroup,\r\n      simplifiedGeometry,\r\n      style,\r\n      feature,\r\n      index,\r\n      declutter,\r\n    );\r\n  }\r\n}\r\n\r\n/**\r\n * @param {import(\"../render/canvas/BuilderGroup.js\").default} replayGroup Replay group.\r\n * @param {import(\"../geom/Geometry.js\").default|import(\"../render/Feature.js\").default} geometry Geometry.\r\n * @param {import(\"../style/Style.js\").default} style Style.\r\n * @param {import(\"../Feature.js\").FeatureLike} feature Feature.\r\n * @param {number} [index] Render order index.\r\n */\r\nfunction renderGeometry(replayGroup, geometry, style, feature, index) {\r\n  if (geometry.getType() == 'GeometryCollection') {\r\n    const geometries =\r\n      /** @type {import(\"../geom/GeometryCollection.js\").default} */ (\r\n        geometry\r\n      ).getGeometries();\r\n    for (let i = 0, ii = geometries.length; i < ii; ++i) {\r\n      renderGeometry(replayGroup, geometries[i], style, feature, index);\r\n    }\r\n    return;\r\n  }\r\n  const replay = replayGroup.getBuilder(style.getZIndex(), 'Default');\r\n  replay.drawCustom(\r\n    /** @type {import(\"../geom/SimpleGeometry.js\").default} */ (geometry),\r\n    feature,\r\n    style.getRenderer(),\r\n    style.getHitDetectionRenderer(),\r\n    index,\r\n  );\r\n}\r\n\r\n/**\r\n * @param {import(\"../render/canvas/BuilderGroup.js\").default} replayGroup Replay group.\r\n * @param {import(\"../geom/GeometryCollection.js\").default} geometry Geometry.\r\n * @param {import(\"../style/Style.js\").default} style Style.\r\n * @param {import(\"../Feature.js\").default} feature Feature.\r\n * @param {import(\"../render/canvas/BuilderGroup.js\").default} [declutterBuilderGroup] Builder for decluttering.\r\n * @param {number} [index] Render order index.\r\n */\r\nfunction renderGeometryCollectionGeometry(\r\n  replayGroup,\r\n  geometry,\r\n  style,\r\n  feature,\r\n  declutterBuilderGroup,\r\n  index,\r\n) {\r\n  const geometries = geometry.getGeometriesArray();\r\n  let i, ii;\r\n  for (i = 0, ii = geometries.length; i < ii; ++i) {\r\n    const geometryRenderer = GEOMETRY_RENDERERS[geometries[i].getType()];\r\n    geometryRenderer(\r\n      replayGroup,\r\n      geometries[i],\r\n      style,\r\n      feature,\r\n      declutterBuilderGroup,\r\n      index,\r\n    );\r\n  }\r\n}\r\n\r\n/**\r\n * @param {import(\"../render/canvas/BuilderGroup.js\").default} builderGroup Replay group.\r\n * @param {import(\"../geom/LineString.js\").default|import(\"../render/Feature.js\").default} geometry Geometry.\r\n * @param {import(\"../style/Style.js\").default} style Style.\r\n * @param {import(\"../Feature.js\").FeatureLike} feature Feature.\r\n * @param {number} [index] Render order index.\r\n */\r\nfunction renderLineStringGeometry(\r\n  builderGroup,\r\n  geometry,\r\n  style,\r\n  feature,\r\n  index,\r\n) {\r\n  const strokeStyle = style.getStroke();\r\n  if (strokeStyle) {\r\n    const lineStringReplay = builderGroup.getBuilder(\r\n      style.getZIndex(),\r\n      'LineString',\r\n    );\r\n    lineStringReplay.setFillStrokeStyle(null, strokeStyle);\r\n    lineStringReplay.drawLineString(geometry, feature, index);\r\n  }\r\n  const textStyle = style.getText();\r\n  if (textStyle && textStyle.getText()) {\r\n    const textReplay = builderGroup.getBuilder(style.getZIndex(), 'Text');\r\n    textReplay.setTextStyle(textStyle);\r\n    textReplay.drawText(geometry, feature, index);\r\n  }\r\n}\r\n\r\n/**\r\n * @param {import(\"../render/canvas/BuilderGroup.js\").default} builderGroup Replay group.\r\n * @param {import(\"../geom/MultiLineString.js\").default|import(\"../render/Feature.js\").default} geometry Geometry.\r\n * @param {import(\"../style/Style.js\").default} style Style.\r\n * @param {import(\"../Feature.js\").FeatureLike} feature Feature.\r\n * @param {number} [index] Render order index.\r\n */\r\nfunction renderMultiLineStringGeometry(\r\n  builderGroup,\r\n  geometry,\r\n  style,\r\n  feature,\r\n  index,\r\n) {\r\n  const strokeStyle = style.getStroke();\r\n  if (strokeStyle) {\r\n    const lineStringReplay = builderGroup.getBuilder(\r\n      style.getZIndex(),\r\n      'LineString',\r\n    );\r\n    lineStringReplay.setFillStrokeStyle(null, strokeStyle);\r\n    lineStringReplay.drawMultiLineString(geometry, feature, index);\r\n  }\r\n  const textStyle = style.getText();\r\n  if (textStyle && textStyle.getText()) {\r\n    const textReplay = builderGroup.getBuilder(style.getZIndex(), 'Text');\r\n    textReplay.setTextStyle(textStyle);\r\n    textReplay.drawText(geometry, feature, index);\r\n  }\r\n}\r\n\r\n/**\r\n * @param {import(\"../render/canvas/BuilderGroup.js\").default} builderGroup Replay group.\r\n * @param {import(\"../geom/MultiPolygon.js\").default} geometry Geometry.\r\n * @param {import(\"../style/Style.js\").default} style Style.\r\n * @param {import(\"../Feature.js\").default} feature Feature.\r\n * @param {number} [index] Render order index.\r\n */\r\nfunction renderMultiPolygonGeometry(\r\n  builderGroup,\r\n  geometry,\r\n  style,\r\n  feature,\r\n  index,\r\n) {\r\n  const fillStyle = style.getFill();\r\n  const strokeStyle = style.getStroke();\r\n  if (strokeStyle || fillStyle) {\r\n    const polygonReplay = builderGroup.getBuilder(style.getZIndex(), 'Polygon');\r\n    polygonReplay.setFillStrokeStyle(fillStyle, strokeStyle);\r\n    polygonReplay.drawMultiPolygon(geometry, feature, index);\r\n  }\r\n  const textStyle = style.getText();\r\n  if (textStyle && textStyle.getText()) {\r\n    const textReplay = builderGroup.getBuilder(style.getZIndex(), 'Text');\r\n    textReplay.setTextStyle(textStyle);\r\n    textReplay.drawText(geometry, feature, index);\r\n  }\r\n}\r\n\r\n/**\r\n * @param {import(\"../render/canvas/BuilderGroup.js\").default} builderGroup Replay group.\r\n * @param {import(\"../geom/Point.js\").default|import(\"../render/Feature.js\").default} geometry Geometry.\r\n * @param {import(\"../style/Style.js\").default} style Style.\r\n * @param {import(\"../Feature.js\").FeatureLike} feature Feature.\r\n * @param {number} [index] Render order index.\r\n * @param {boolean} [declutter] Enable decluttering.\r\n */\r\nfunction renderPointGeometry(\r\n  builderGroup,\r\n  geometry,\r\n  style,\r\n  feature,\r\n  index,\r\n  declutter,\r\n) {\r\n  const imageStyle = style.getImage();\r\n  const textStyle = style.getText();\r\n  const hasText = textStyle && textStyle.getText();\r\n  /** @type {import(\"../render/canvas.js\").DeclutterImageWithText} */\r\n  const declutterImageWithText =\r\n    declutter && imageStyle && hasText ? {} : undefined;\r\n  if (imageStyle) {\r\n    if (imageStyle.getImageState() != ImageState.LOADED) {\r\n      return;\r\n    }\r\n    const imageReplay = builderGroup.getBuilder(style.getZIndex(), 'Image');\r\n    imageReplay.setImageStyle(imageStyle, declutterImageWithText);\r\n    imageReplay.drawPoint(geometry, feature, index);\r\n  }\r\n  if (hasText) {\r\n    const textReplay = builderGroup.getBuilder(style.getZIndex(), 'Text');\r\n    textReplay.setTextStyle(textStyle, declutterImageWithText);\r\n    textReplay.drawText(geometry, feature, index);\r\n  }\r\n}\r\n\r\n/**\r\n * @param {import(\"../render/canvas/BuilderGroup.js\").default} builderGroup Replay group.\r\n * @param {import(\"../geom/MultiPoint.js\").default|import(\"../render/Feature.js\").default} geometry Geometry.\r\n * @param {import(\"../style/Style.js\").default} style Style.\r\n * @param {import(\"../Feature.js\").FeatureLike} feature Feature.\r\n * @param {number} [index] Render order index.\r\n * @param {boolean} [declutter] Enable decluttering.\r\n */\r\nfunction renderMultiPointGeometry(\r\n  builderGroup,\r\n  geometry,\r\n  style,\r\n  feature,\r\n  index,\r\n  declutter,\r\n) {\r\n  const imageStyle = style.getImage();\r\n  const hasImage = imageStyle && imageStyle.getOpacity() !== 0;\r\n  const textStyle = style.getText();\r\n  const hasText = textStyle && textStyle.getText();\r\n  /** @type {import(\"../render/canvas.js\").DeclutterImageWithText} */\r\n  const declutterImageWithText =\r\n    declutter && hasImage && hasText ? {} : undefined;\r\n  if (hasImage) {\r\n    if (imageStyle.getImageState() != ImageState.LOADED) {\r\n      return;\r\n    }\r\n    const imageReplay = builderGroup.getBuilder(style.getZIndex(), 'Image');\r\n    imageReplay.setImageStyle(imageStyle, declutterImageWithText);\r\n    imageReplay.drawMultiPoint(geometry, feature, index);\r\n  }\r\n  if (hasText) {\r\n    const textReplay = builderGroup.getBuilder(style.getZIndex(), 'Text');\r\n    textReplay.setTextStyle(textStyle, declutterImageWithText);\r\n    textReplay.drawText(geometry, feature, index);\r\n  }\r\n}\r\n\r\n/**\r\n * @param {import(\"../render/canvas/BuilderGroup.js\").default} builderGroup Replay group.\r\n * @param {import(\"../geom/Polygon.js\").default|import(\"../render/Feature.js\").default} geometry Geometry.\r\n * @param {import(\"../style/Style.js\").default} style Style.\r\n * @param {import(\"../Feature.js\").FeatureLike} feature Feature.\r\n * @param {number} [index] Render order index.\r\n */\r\nfunction renderPolygonGeometry(builderGroup, geometry, style, feature, index) {\r\n  const fillStyle = style.getFill();\r\n  const strokeStyle = style.getStroke();\r\n  if (fillStyle || strokeStyle) {\r\n    const polygonReplay = builderGroup.getBuilder(style.getZIndex(), 'Polygon');\r\n    polygonReplay.setFillStrokeStyle(fillStyle, strokeStyle);\r\n    polygonReplay.drawPolygon(geometry, feature, index);\r\n  }\r\n  const textStyle = style.getText();\r\n  if (textStyle && textStyle.getText()) {\r\n    const textReplay = builderGroup.getBuilder(style.getZIndex(), 'Text');\r\n    textReplay.setTextStyle(textStyle);\r\n    textReplay.drawText(geometry, feature, index);\r\n  }\r\n}\r\n","/**\r\n * @module ol/renderer/canvas/Layer\r\n */\r\nimport {equals} from '../../array.js';\r\nimport {asArray} from '../../color.js';\r\nimport {createCanvasContext2D} from '../../dom.js';\r\nimport {\r\n  getBottomLeft,\r\n  getBottomRight,\r\n  getHeight,\r\n  getTopLeft,\r\n  getTopRight,\r\n  getWidth,\r\n} from '../../extent.js';\r\nimport RenderEvent from '../../render/Event.js';\r\nimport RenderEventType from '../../render/EventType.js';\r\nimport ZIndexContext from '../../render/canvas/ZIndexContext.js';\r\nimport {\r\n  apply as applyTransform,\r\n  compose as composeTransform,\r\n  create as createTransform,\r\n  equivalent,\r\n  makeInverse,\r\n  toString as toTransformString,\r\n} from '../../transform.js';\r\nimport LayerRenderer from '../Layer.js';\r\n\r\n/**\r\n * @type {Array<HTMLCanvasElement>}\r\n */\r\nexport const canvasPool = [];\r\n\r\n/**\r\n * @type {CanvasRenderingContext2D}\r\n */\r\nlet pixelContext = null;\r\n\r\nfunction createPixelContext() {\r\n  pixelContext = createCanvasContext2D(1, 1, undefined, {\r\n    willReadFrequently: true,\r\n  });\r\n}\r\n\r\n/**\r\n * @abstract\r\n * @template {import(\"../../layer/Layer.js\").default} LayerType\r\n * @extends {LayerRenderer<LayerType>}\r\n */\r\nclass CanvasLayerRenderer extends LayerRenderer {\r\n  /**\r\n   * @param {LayerType} layer Layer.\r\n   */\r\n  constructor(layer) {\r\n    super(layer);\r\n\r\n    /**\r\n     * @protected\r\n     * @type {HTMLElement}\r\n     */\r\n    this.container = null;\r\n\r\n    /**\r\n     * @protected\r\n     * @type {number}\r\n     */\r\n    this.renderedResolution;\r\n\r\n    /**\r\n     * A temporary transform.  The values in this transform should only be used in a\r\n     * function that sets the values.\r\n     * @protected\r\n     * @type {import(\"../../transform.js\").Transform}\r\n     */\r\n    this.tempTransform = createTransform();\r\n\r\n    /**\r\n     * The transform for rendered pixels to viewport CSS pixels.  This transform must\r\n     * be set when rendering a frame and may be used by other functions after rendering.\r\n     * @protected\r\n     * @type {import(\"../../transform.js\").Transform}\r\n     */\r\n    this.pixelTransform = createTransform();\r\n\r\n    /**\r\n     * The transform for viewport CSS pixels to rendered pixels.  This transform must\r\n     * be set when rendering a frame and may be used by other functions after rendering.\r\n     * @protected\r\n     * @type {import(\"../../transform.js\").Transform}\r\n     */\r\n    this.inversePixelTransform = createTransform();\r\n\r\n    /**\r\n     * @type {CanvasRenderingContext2D}\r\n     */\r\n    this.context = null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {ZIndexContext}\r\n     */\r\n    this.deferredContext_ = null;\r\n\r\n    /**\r\n     * @type {boolean}\r\n     */\r\n    this.containerReused = false;\r\n\r\n    /**\r\n     * @protected\r\n     * @type {import(\"../../Map.js\").FrameState|null}\r\n     */\r\n    this.frameState = null;\r\n  }\r\n\r\n  /**\r\n   * @param {import('../../DataTile.js').ImageLike} image Image.\r\n   * @param {number} col The column index.\r\n   * @param {number} row The row index.\r\n   * @return {Uint8ClampedArray|null} The image data.\r\n   */\r\n  getImageData(image, col, row) {\r\n    if (!pixelContext) {\r\n      createPixelContext();\r\n    }\r\n    pixelContext.clearRect(0, 0, 1, 1);\r\n\r\n    let data;\r\n    try {\r\n      pixelContext.drawImage(image, col, row, 1, 1, 0, 0, 1, 1);\r\n      data = pixelContext.getImageData(0, 0, 1, 1).data;\r\n    } catch {\r\n      pixelContext = null;\r\n      return null;\r\n    }\r\n    return data;\r\n  }\r\n\r\n  /**\r\n   * @param {import('../../Map.js').FrameState} frameState Frame state.\r\n   * @return {string} Background color.\r\n   */\r\n  getBackground(frameState) {\r\n    const layer = this.getLayer();\r\n    let background = layer.getBackground();\r\n    if (typeof background === 'function') {\r\n      background = background(frameState.viewState.resolution);\r\n    }\r\n    return background || undefined;\r\n  }\r\n\r\n  /**\r\n   * Get a rendering container from an existing target, if compatible.\r\n   * @param {HTMLElement} target Potential render target.\r\n   * @param {string} transform CSS transform matrix.\r\n   * @param {string} [backgroundColor] Background color.\r\n   */\r\n  useContainer(target, transform, backgroundColor) {\r\n    const layerClassName = this.getLayer().getClassName();\r\n    let container, context;\r\n    if (\r\n      target &&\r\n      target.className === layerClassName &&\r\n      (!backgroundColor ||\r\n        (target &&\r\n          target.style.backgroundColor &&\r\n          equals(\r\n            asArray(target.style.backgroundColor),\r\n            asArray(backgroundColor),\r\n          )))\r\n    ) {\r\n      const canvas = target.firstElementChild;\r\n      if (canvas instanceof HTMLCanvasElement) {\r\n        context = canvas.getContext('2d');\r\n      }\r\n    }\r\n    if (context && equivalent(context.canvas.style.transform, transform)) {\r\n      // Container of the previous layer renderer can be used.\r\n      this.container = target;\r\n      this.context = context;\r\n      this.containerReused = true;\r\n    } else if (this.containerReused) {\r\n      // Previously reused container cannot be used any more.\r\n      this.container = null;\r\n      this.context = null;\r\n      this.containerReused = false;\r\n    } else if (this.container) {\r\n      this.container.style.backgroundColor = null;\r\n    }\r\n    if (!this.container) {\r\n      container = document.createElement('div');\r\n      container.className = layerClassName;\r\n      let style = container.style;\r\n      style.position = 'absolute';\r\n      style.width = '100%';\r\n      style.height = '100%';\r\n      context = createCanvasContext2D();\r\n      const canvas = context.canvas;\r\n      container.appendChild(canvas);\r\n      style = canvas.style;\r\n      style.position = 'absolute';\r\n      style.left = '0';\r\n      style.transformOrigin = 'top left';\r\n      this.container = container;\r\n      this.context = context;\r\n    }\r\n    if (\r\n      !this.containerReused &&\r\n      backgroundColor &&\r\n      !this.container.style.backgroundColor\r\n    ) {\r\n      this.container.style.backgroundColor = backgroundColor;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {CanvasRenderingContext2D} context Context.\r\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\r\n   * @param {import(\"../../extent.js\").Extent} extent Clip extent.\r\n   * @protected\r\n   */\r\n  clipUnrotated(context, frameState, extent) {\r\n    const topLeft = getTopLeft(extent);\r\n    const topRight = getTopRight(extent);\r\n    const bottomRight = getBottomRight(extent);\r\n    const bottomLeft = getBottomLeft(extent);\r\n\r\n    applyTransform(frameState.coordinateToPixelTransform, topLeft);\r\n    applyTransform(frameState.coordinateToPixelTransform, topRight);\r\n    applyTransform(frameState.coordinateToPixelTransform, bottomRight);\r\n    applyTransform(frameState.coordinateToPixelTransform, bottomLeft);\r\n\r\n    const inverted = this.inversePixelTransform;\r\n    applyTransform(inverted, topLeft);\r\n    applyTransform(inverted, topRight);\r\n    applyTransform(inverted, bottomRight);\r\n    applyTransform(inverted, bottomLeft);\r\n\r\n    context.save();\r\n    context.beginPath();\r\n    context.moveTo(Math.round(topLeft[0]), Math.round(topLeft[1]));\r\n    context.lineTo(Math.round(topRight[0]), Math.round(topRight[1]));\r\n    context.lineTo(Math.round(bottomRight[0]), Math.round(bottomRight[1]));\r\n    context.lineTo(Math.round(bottomLeft[0]), Math.round(bottomLeft[1]));\r\n    context.clip();\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\r\n   * @param {HTMLElement} target Target that may be used to render content to.\r\n   * @protected\r\n   */\r\n  prepareContainer(frameState, target) {\r\n    const extent = frameState.extent;\r\n    const resolution = frameState.viewState.resolution;\r\n    const rotation = frameState.viewState.rotation;\r\n    const pixelRatio = frameState.pixelRatio;\r\n    const width = Math.round((getWidth(extent) / resolution) * pixelRatio);\r\n    const height = Math.round((getHeight(extent) / resolution) * pixelRatio);\r\n    // set forward and inverse pixel transforms\r\n    composeTransform(\r\n      this.pixelTransform,\r\n      frameState.size[0] / 2,\r\n      frameState.size[1] / 2,\r\n      1 / pixelRatio,\r\n      1 / pixelRatio,\r\n      rotation,\r\n      -width / 2,\r\n      -height / 2,\r\n    );\r\n    makeInverse(this.inversePixelTransform, this.pixelTransform);\r\n\r\n    const canvasTransform = toTransformString(this.pixelTransform);\r\n    this.useContainer(target, canvasTransform, this.getBackground(frameState));\r\n\r\n    if (!this.containerReused) {\r\n      const canvas = this.context.canvas;\r\n      if (canvas.width != width || canvas.height != height) {\r\n        canvas.width = width;\r\n        canvas.height = height;\r\n      } else {\r\n        this.context.clearRect(0, 0, width, height);\r\n      }\r\n      if (canvasTransform !== canvas.style.transform) {\r\n        canvas.style.transform = canvasTransform;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../../render/EventType.js\").default} type Event type.\r\n   * @param {CanvasRenderingContext2D} context Context.\r\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\r\n   * @private\r\n   */\r\n  dispatchRenderEvent_(type, context, frameState) {\r\n    const layer = this.getLayer();\r\n    if (layer.hasListener(type)) {\r\n      const event = new RenderEvent(\r\n        type,\r\n        this.inversePixelTransform,\r\n        frameState,\r\n        context,\r\n      );\r\n      layer.dispatchEvent(event);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {CanvasRenderingContext2D} context Context.\r\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\r\n   * @protected\r\n   */\r\n  preRender(context, frameState) {\r\n    this.frameState = frameState;\r\n    if (frameState.declutter) {\r\n      return;\r\n    }\r\n    this.dispatchRenderEvent_(RenderEventType.PRERENDER, context, frameState);\r\n  }\r\n\r\n  /**\r\n   * @param {CanvasRenderingContext2D} context Context.\r\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\r\n   * @protected\r\n   */\r\n  postRender(context, frameState) {\r\n    if (frameState.declutter) {\r\n      return;\r\n    }\r\n    this.dispatchRenderEvent_(RenderEventType.POSTRENDER, context, frameState);\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\r\n   */\r\n  renderDeferredInternal(frameState) {}\r\n\r\n  /**\r\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\r\n   * @return {import('../../render/canvas/ZIndexContext.js').ZIndexContextProxy} Context.\r\n   */\r\n  getRenderContext(frameState) {\r\n    if (frameState.declutter && !this.deferredContext_) {\r\n      this.deferredContext_ = new ZIndexContext();\r\n    }\r\n    return frameState.declutter\r\n      ? this.deferredContext_.getContext()\r\n      : this.context;\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\r\n   * @override\r\n   */\r\n  renderDeferred(frameState) {\r\n    if (!frameState.declutter) {\r\n      return;\r\n    }\r\n    this.dispatchRenderEvent_(\r\n      RenderEventType.PRERENDER,\r\n      this.context,\r\n      frameState,\r\n    );\r\n    if (frameState.declutter && this.deferredContext_) {\r\n      this.deferredContext_.draw(this.context);\r\n      this.deferredContext_.clear();\r\n    }\r\n    this.renderDeferredInternal(frameState);\r\n    this.dispatchRenderEvent_(\r\n      RenderEventType.POSTRENDER,\r\n      this.context,\r\n      frameState,\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Creates a transform for rendering to an element that will be rotated after rendering.\r\n   * @param {import(\"../../coordinate.js\").Coordinate} center Center.\r\n   * @param {number} resolution Resolution.\r\n   * @param {number} rotation Rotation.\r\n   * @param {number} pixelRatio Pixel ratio.\r\n   * @param {number} width Width of the rendered element (in pixels).\r\n   * @param {number} height Height of the rendered element (in pixels).\r\n   * @param {number} offsetX Offset on the x-axis in view coordinates.\r\n   * @protected\r\n   * @return {!import(\"../../transform.js\").Transform} Transform.\r\n   */\r\n  getRenderTransform(\r\n    center,\r\n    resolution,\r\n    rotation,\r\n    pixelRatio,\r\n    width,\r\n    height,\r\n    offsetX,\r\n  ) {\r\n    const dx1 = width / 2;\r\n    const dy1 = height / 2;\r\n    const sx = pixelRatio / resolution;\r\n    const sy = -sx;\r\n    const dx2 = -center[0] + offsetX;\r\n    const dy2 = -center[1];\r\n    return composeTransform(\r\n      this.tempTransform,\r\n      dx1,\r\n      dy1,\r\n      sx,\r\n      sy,\r\n      -rotation,\r\n      dx2,\r\n      dy2,\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Clean up.\r\n   * @override\r\n   */\r\n  disposeInternal() {\r\n    delete this.frameState;\r\n    super.disposeInternal();\r\n  }\r\n}\r\n\r\nexport default CanvasLayerRenderer;\r\n","/**\r\n * @module ol/renderer/Layer\r\n */\r\nimport ImageState from '../ImageState.js';\r\nimport Observable from '../Observable.js';\r\nimport EventType from '../events/EventType.js';\r\nimport {abstract} from '../util.js';\r\n\r\nconst maxStaleKeys = 5;\r\n\r\n/**\r\n * @template {import(\"../layer/Layer.js\").default} LayerType\r\n */\r\nclass LayerRenderer extends Observable {\r\n  /**\r\n   * @param {LayerType} layer Layer.\r\n   */\r\n  constructor(layer) {\r\n    super();\r\n\r\n    /**\r\n     * The renderer is initialized and ready to render.\r\n     * @type {boolean}\r\n     */\r\n    this.ready = true;\r\n\r\n    /** @private */\r\n    this.boundHandleImageChange_ = this.handleImageChange_.bind(this);\r\n\r\n    /**\r\n     * @private\r\n     * @type {LayerType}\r\n     */\r\n    this.layer_ = layer;\r\n\r\n    /**\r\n     * @type {Array<string>}\r\n     * @private\r\n     */\r\n    this.staleKeys_ = new Array();\r\n\r\n    /**\r\n     * @type {number}\r\n     * @protected\r\n     */\r\n    this.maxStaleKeys = maxStaleKeys;\r\n  }\r\n\r\n  /**\r\n   * @return {Array<string>} Get the list of stale keys.\r\n   */\r\n  getStaleKeys() {\r\n    return this.staleKeys_;\r\n  }\r\n\r\n  /**\r\n   * @param {string} key The new stale key.\r\n   */\r\n  prependStaleKey(key) {\r\n    this.staleKeys_.unshift(key);\r\n    if (this.staleKeys_.length > this.maxStaleKeys) {\r\n      this.staleKeys_.length = this.maxStaleKeys;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Asynchronous layer level hit detection.\r\n   * @param {import(\"../pixel.js\").Pixel} pixel Pixel.\r\n   * @return {Promise<Array<import(\"../Feature\").FeatureLike>>} Promise that resolves with\r\n   * an array of features.\r\n   */\r\n  getFeatures(pixel) {\r\n    return abstract();\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../pixel.js\").Pixel} pixel Pixel.\r\n   * @return {Uint8ClampedArray|Uint8Array|Float32Array|DataView|null} Pixel data.\r\n   */\r\n  getData(pixel) {\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * Determine whether render should be called.\r\n   * @abstract\r\n   * @param {import(\"../Map.js\").FrameState} frameState Frame state.\r\n   * @return {boolean} Layer is ready to be rendered.\r\n   */\r\n  prepareFrame(frameState) {\r\n    return abstract();\r\n  }\r\n\r\n  /**\r\n   * Render the layer.\r\n   * @abstract\r\n   * @param {import(\"../Map.js\").FrameState} frameState Frame state.\r\n   * @param {HTMLElement|null} target Target that may be used to render content to.\r\n   * @return {HTMLElement} The rendered element.\r\n   */\r\n  renderFrame(frameState, target) {\r\n    return abstract();\r\n  }\r\n\r\n  /**\r\n   * @abstract\r\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\r\n   * @param {import(\"../Map.js\").FrameState} frameState Frame state.\r\n   * @param {number} hitTolerance Hit tolerance in pixels.\r\n   * @param {import(\"./vector.js\").FeatureCallback<T>} callback Feature callback.\r\n   * @param {Array<import(\"./Map.js\").HitMatch<T>>} matches The hit detected matches with tolerance.\r\n   * @return {T|undefined} Callback result.\r\n   * @template T\r\n   */\r\n  forEachFeatureAtCoordinate(\r\n    coordinate,\r\n    frameState,\r\n    hitTolerance,\r\n    callback,\r\n    matches,\r\n  ) {\r\n    return undefined;\r\n  }\r\n\r\n  /**\r\n   * @return {LayerType} Layer.\r\n   */\r\n  getLayer() {\r\n    return this.layer_;\r\n  }\r\n\r\n  /**\r\n   * Perform action necessary to get the layer rendered after new fonts have loaded\r\n   * @abstract\r\n   */\r\n  handleFontsChanged() {}\r\n\r\n  /**\r\n   * Handle changes in image state.\r\n   * @param {import(\"../events/Event.js\").default} event Image change event.\r\n   * @private\r\n   */\r\n  handleImageChange_(event) {\r\n    const image = /** @type {import(\"../Image.js\").default} */ (event.target);\r\n    if (\r\n      image.getState() === ImageState.LOADED ||\r\n      image.getState() === ImageState.ERROR\r\n    ) {\r\n      this.renderIfReadyAndVisible();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Load the image if not already loaded, and register the image change\r\n   * listener if needed.\r\n   * @param {import(\"../Image.js\").default} image Image.\r\n   * @return {boolean} `true` if the image is already loaded, `false` otherwise.\r\n   * @protected\r\n   */\r\n  loadImage(image) {\r\n    let imageState = image.getState();\r\n    if (imageState != ImageState.LOADED && imageState != ImageState.ERROR) {\r\n      image.addEventListener(EventType.CHANGE, this.boundHandleImageChange_);\r\n    }\r\n    if (imageState == ImageState.IDLE) {\r\n      image.load();\r\n      imageState = image.getState();\r\n    }\r\n    return imageState == ImageState.LOADED;\r\n  }\r\n\r\n  /**\r\n   * @protected\r\n   */\r\n  renderIfReadyAndVisible() {\r\n    const layer = this.getLayer();\r\n    if (layer && layer.getVisible() && layer.getSourceState() === 'ready') {\r\n      layer.changed();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../Map.js\").FrameState} frameState Frame state.\r\n   */\r\n  renderDeferred(frameState) {}\r\n\r\n  /**\r\n   * Clean up.\r\n   * @override\r\n   */\r\n  disposeInternal() {\r\n    delete this.layer_;\r\n    super.disposeInternal();\r\n  }\r\n}\r\n\r\nexport default LayerRenderer;\r\n","/**\r\n * @module ol/source/Vector\r\n */\r\n\r\nimport Collection from '../Collection.js';\r\nimport CollectionEventType from '../CollectionEventType.js';\r\nimport ObjectEventType from '../ObjectEventType.js';\r\nimport {extend} from '../array.js';\r\nimport {assert} from '../asserts.js';\r\nimport Event from '../events/Event.js';\r\nimport EventType from '../events/EventType.js';\r\nimport {listen, unlistenByKey} from '../events.js';\r\nimport {containsExtent, equals, wrapAndSliceX} from '../extent.js';\r\nimport {xhr} from '../featureloader.js';\r\nimport {TRUE, VOID} from '../functions.js';\r\nimport {all as allStrategy} from '../loadingstrategy.js';\r\nimport {isEmpty} from '../obj.js';\r\nimport RenderFeature from '../render/Feature.js';\r\nimport RBush from '../structs/RBush.js';\r\nimport {getUid} from '../util.js';\r\nimport Source from './Source.js';\r\nimport VectorEventType from './VectorEventType.js';\r\n\r\n/**\r\n * A function that takes an {@link module:ol/extent~Extent} and a resolution as arguments, and\r\n * returns an array of {@link module:ol/extent~Extent} with the extents to load. Usually this\r\n * is one of the standard {@link module:ol/loadingstrategy} strategies.\r\n *\r\n * @typedef {function(import(\"../extent.js\").Extent, number, import(\"../proj/Projection.js\").default): Array<import(\"../extent.js\").Extent>} LoadingStrategy\r\n * @api\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * Events emitted by {@link module:ol/source/Vector~VectorSource} instances are instances of this\r\n * type.\r\n * @template {import(\"../Feature.js\").FeatureLike} [FeatureType=import(\"../Feature.js\").default]\r\n */\r\nexport class VectorSourceEvent extends Event {\r\n  /**\r\n   * @param {string} type Type.\r\n   * @param {FeatureType} [feature] Feature.\r\n   * @param {Array<FeatureType>} [features] Features.\r\n   */\r\n  constructor(type, feature, features) {\r\n    super(type);\r\n\r\n    /**\r\n     * The added or removed feature for the `ADDFEATURE` and `REMOVEFEATURE` events, `undefined` otherwise.\r\n     * @type {FeatureType|undefined}\r\n     * @api\r\n     */\r\n    this.feature = feature;\r\n\r\n    /**\r\n     * The loaded features for the `FEATURESLOADED` event, `undefined` otherwise.\r\n     * @type {Array<FeatureType>|undefined}\r\n     * @api\r\n     */\r\n    this.features = features;\r\n  }\r\n}\r\n\r\n/***\r\n * @template {import(\"../Feature.js\").FeatureLike} [T=import(\"../Feature.js\").default]\r\n * @typedef {T extends RenderFeature ? T|Array<T> : T} FeatureClassOrArrayOfRenderFeatures\r\n */\r\n\r\n/***\r\n * @template Return\r\n * @template {import(\"../Feature.js\").FeatureLike} [FeatureType=import(\"../Feature.js\").default]\r\n * @typedef {import(\"../Observable\").OnSignature<import(\"../Observable\").EventTypes, import(\"../events/Event.js\").default, Return> &\r\n *   import(\"../Observable\").OnSignature<import(\"../ObjectEventType\").Types, import(\"../Object\").ObjectEvent, Return> &\r\n *   import(\"../Observable\").OnSignature<import(\"./VectorEventType\").VectorSourceEventTypes, VectorSourceEvent<FeatureType>, Return> &\r\n *   import(\"../Observable\").CombinedOnSignature<import(\"../Observable\").EventTypes|import(\"../ObjectEventType\").Types|\r\n *     import(\"./VectorEventType\").VectorSourceEventTypes, Return>} VectorSourceOnSignature\r\n */\r\n\r\n/**\r\n * @template {import(\"../Feature.js\").FeatureLike} [FeatureType=import(\"../Feature.js\").default]\r\n * @typedef {Object} Options\r\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\r\n * @property {Array<FeatureType>|Collection<FeatureType>} [features]\r\n * Features. If provided as {@link module:ol/Collection~Collection}, the features in the source\r\n * and the collection will stay in sync.\r\n * @property {import(\"../format/Feature.js\").default<FeatureType>} [format] The feature format used by the XHR\r\n * feature loader when `url` is set. Required if `url` is set, otherwise ignored.\r\n * @property {import(\"../featureloader.js\").FeatureLoader<FeatureType>} [loader]\r\n * The loader function used to load features, from a remote source for example.\r\n * If this is not set and `url` is set, the source will create and use an XHR\r\n * feature loader. The `'featuresloadend'` and `'featuresloaderror'` events\r\n * will only fire if the `success` and `failure` callbacks are used.\r\n *\r\n * Example:\r\n *\r\n * ```js\r\n * import Vector from 'ol/source/Vector.js';\r\n * import GeoJSON from 'ol/format/GeoJSON.js';\r\n * import {bbox} from 'ol/loadingstrategy.js';\r\n *\r\n * const vectorSource = new Vector({\r\n *   format: new GeoJSON(),\r\n *   loader: function(extent, resolution, projection, success, failure) {\r\n *      const proj = projection.getCode();\r\n *      const url = 'https://ahocevar.com/geoserver/wfs?service=WFS&' +\r\n *          'version=1.1.0&request=GetFeature&typename=osm:water_areas&' +\r\n *          'outputFormat=application/json&srsname=' + proj + '&' +\r\n *          'bbox=' + extent.join(',') + ',' + proj;\r\n *      const xhr = new XMLHttpRequest();\r\n *      xhr.open('GET', url);\r\n *      const onError = function() {\r\n *        vectorSource.removeLoadedExtent(extent);\r\n *        failure();\r\n *      }\r\n *      xhr.onerror = onError;\r\n *      xhr.onload = function() {\r\n *        if (xhr.status == 200) {\r\n *          const features = vectorSource.getFormat().readFeatures(xhr.responseText);\r\n *          vectorSource.addFeatures(features);\r\n *          success(features);\r\n *        } else {\r\n *          onError();\r\n *        }\r\n *      }\r\n *      xhr.send();\r\n *    },\r\n *    strategy: bbox,\r\n *  });\r\n * ```\r\n * @property {boolean} [overlaps=true] This source may have overlapping geometries.\r\n * Setting this to `false` (e.g. for sources with polygons that represent administrative\r\n * boundaries or TopoJSON sources) allows the renderer to optimise fill and\r\n * stroke operations.\r\n * @property {LoadingStrategy} [strategy] The loading strategy to use.\r\n * By default an {@link module:ol/loadingstrategy.all}\r\n * strategy is used, a one-off strategy which loads all features at once.\r\n * @property {string|import(\"../featureloader.js\").FeatureUrlFunction} [url]\r\n * Setting this option instructs the source to load features using an XHR loader\r\n * (see {@link module:ol/featureloader.xhr}). Use a `string` and an\r\n * {@link module:ol/loadingstrategy.all} for a one-off download of all features from\r\n * the given URL. Use a {@link module:ol/featureloader~FeatureUrlFunction} to generate the url with\r\n * other loading strategies.\r\n * Requires `format` to be set as well.\r\n * When default XHR feature loader is provided, the features will\r\n * be transformed from the data projection to the view projection\r\n * during parsing. If your remote data source does not advertise its projection\r\n * properly, this transformation will be incorrect. For some formats, the\r\n * default projection (usually EPSG:4326) can be overridden by setting the\r\n * dataProjection constructor option on the format.\r\n * Note that if a source contains non-feature data, such as a GeoJSON geometry\r\n * or a KML NetworkLink, these will be ignored. Use a custom loader to load these.\r\n * @property {boolean} [useSpatialIndex=true]\r\n * By default, an RTree is used as spatial index. When features are removed and\r\n * added frequently, and the total number of features is low, setting this to\r\n * `false` may improve performance.\r\n *\r\n * Note that\r\n * {@link module:ol/source/Vector~VectorSource#getFeaturesInExtent},\r\n * {@link module:ol/source/Vector~VectorSource#getClosestFeatureToCoordinate} and\r\n * {@link module:ol/source/Vector~VectorSource#getExtent} cannot be used when `useSpatialIndex` is\r\n * set to `false`, and {@link module:ol/source/Vector~VectorSource#forEachFeatureInExtent} will loop\r\n * through all features.\r\n *\r\n * When set to `false`, the features will be maintained in an\r\n * {@link module:ol/Collection~Collection}, which can be retrieved through\r\n * {@link module:ol/source/Vector~VectorSource#getFeaturesCollection}.\r\n * @property {boolean} [wrapX=true] Wrap the world horizontally. For vector editing across the\r\n * -180° and 180° meridians to work properly, this should be set to `false`. The\r\n * resulting geometry coordinates will then exceed the world bounds.\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * Provides a source of features for vector layers. Vector features provided\r\n * by this source are suitable for editing. See {@link module:ol/source/VectorTile~VectorTile} for\r\n * vector data that is optimized for rendering.\r\n *\r\n * @fires VectorSourceEvent\r\n * @api\r\n * @template {import(\"../Feature.js\").FeatureLike} [FeatureType=import(\"../Feature.js\").default]\r\n */\r\nclass VectorSource extends Source {\r\n  /**\r\n   * @param {Options<FeatureType>} [options] Vector source options.\r\n   */\r\n  constructor(options) {\r\n    options = options || {};\r\n\r\n    super({\r\n      attributions: options.attributions,\r\n      interpolate: true,\r\n      projection: undefined,\r\n      state: 'ready',\r\n      wrapX: options.wrapX !== undefined ? options.wrapX : true,\r\n    });\r\n\r\n    /***\r\n     * @type {VectorSourceOnSignature<import(\"../events\").EventsKey, FeatureType>}\r\n     */\r\n    this.on;\r\n\r\n    /***\r\n     * @type {VectorSourceOnSignature<import(\"../events\").EventsKey, FeatureType>}\r\n     */\r\n    this.once;\r\n\r\n    /***\r\n     * @type {VectorSourceOnSignature<void>}\r\n     */\r\n    this.un;\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"../featureloader.js\").FeatureLoader<import(\"../Feature.js\").FeatureLike>}\r\n     */\r\n    this.loader_ = VOID;\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"../format/Feature.js\").default<FeatureType>|null}\r\n     */\r\n    this.format_ = options.format || null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {boolean}\r\n     */\r\n    this.overlaps_ = options.overlaps === undefined ? true : options.overlaps;\r\n\r\n    /**\r\n     * @private\r\n     * @type {string|import(\"../featureloader.js\").FeatureUrlFunction|undefined}\r\n     */\r\n    this.url_ = options.url;\r\n\r\n    if (options.loader !== undefined) {\r\n      this.loader_ = options.loader;\r\n    } else if (this.url_ !== undefined) {\r\n      assert(this.format_, '`format` must be set when `url` is set');\r\n      // create a XHR feature loader for \"url\" and \"format\"\r\n      this.loader_ = xhr(this.url_, this.format_);\r\n    }\r\n\r\n    /**\r\n     * @private\r\n     * @type {LoadingStrategy}\r\n     */\r\n    this.strategy_ =\r\n      options.strategy !== undefined ? options.strategy : allStrategy;\r\n\r\n    const useSpatialIndex =\r\n      options.useSpatialIndex !== undefined ? options.useSpatialIndex : true;\r\n\r\n    /**\r\n     * @private\r\n     * @type {RBush<FeatureType>}\r\n     */\r\n    this.featuresRtree_ = useSpatialIndex ? new RBush() : null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {RBush<{extent: import(\"../extent.js\").Extent}>}\r\n     */\r\n    this.loadedExtentsRtree_ = new RBush();\r\n\r\n    /**\r\n     * @type {number}\r\n     * @private\r\n     */\r\n    this.loadingExtentsCount_ = 0;\r\n\r\n    /**\r\n     * @private\r\n     * @type {!Object<string, FeatureType>}\r\n     */\r\n    this.nullGeometryFeatures_ = {};\r\n\r\n    /**\r\n     * A lookup of features by id (the return from feature.getId()).\r\n     * @private\r\n     * @type {!Object<string, import('../Feature.js').FeatureLike|Array<import('../Feature.js').FeatureLike>>}\r\n     */\r\n    this.idIndex_ = {};\r\n\r\n    /**\r\n     * A lookup of features by uid (using getUid(feature)).\r\n     * @private\r\n     * @type {!Object<string, FeatureType>}\r\n     */\r\n    this.uidIndex_ = {};\r\n\r\n    /**\r\n     * @private\r\n     * @type {Object<string, Array<import(\"../events.js\").EventsKey>>}\r\n     */\r\n    this.featureChangeKeys_ = {};\r\n\r\n    /**\r\n     * @private\r\n     * @type {Collection<FeatureType>|null}\r\n     */\r\n    this.featuresCollection_ = null;\r\n\r\n    /** @type {Collection<FeatureType>} */\r\n    let collection;\r\n    /** @type {Array<FeatureType>} */\r\n    let features;\r\n    if (Array.isArray(options.features)) {\r\n      features = options.features;\r\n    } else if (options.features) {\r\n      collection = options.features;\r\n      features = collection.getArray();\r\n    }\r\n    if (!useSpatialIndex && collection === undefined) {\r\n      collection = new Collection(features);\r\n    }\r\n    if (features !== undefined) {\r\n      this.addFeaturesInternal(features);\r\n    }\r\n    if (collection !== undefined) {\r\n      this.bindFeaturesCollection_(collection);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Add a single feature to the source.  If you want to add a batch of features\r\n   * at once, call {@link module:ol/source/Vector~VectorSource#addFeatures #addFeatures()}\r\n   * instead. A feature will not be added to the source if feature with\r\n   * the same id is already there. The reason for this behavior is to avoid\r\n   * feature duplication when using bbox or tile loading strategies.\r\n   * Note: this also applies if a {@link module:ol/Collection~Collection} is used for features,\r\n   * meaning that if a feature with a duplicate id is added in the collection, it will\r\n   * be removed from it right away.\r\n   * @param {FeatureType} feature Feature to add.\r\n   * @api\r\n   */\r\n  addFeature(feature) {\r\n    this.addFeatureInternal(feature);\r\n    this.changed();\r\n  }\r\n\r\n  /**\r\n   * Add a feature without firing a `change` event.\r\n   * @param {FeatureType} feature Feature.\r\n   * @protected\r\n   */\r\n  addFeatureInternal(feature) {\r\n    const featureKey = getUid(feature);\r\n\r\n    if (!this.addToIndex_(featureKey, feature)) {\r\n      if (this.featuresCollection_) {\r\n        this.featuresCollection_.remove(feature);\r\n      }\r\n      return;\r\n    }\r\n\r\n    this.setupChangeEvents_(featureKey, feature);\r\n\r\n    const geometry = feature.getGeometry();\r\n    if (geometry) {\r\n      const extent = geometry.getExtent();\r\n      if (this.featuresRtree_) {\r\n        this.featuresRtree_.insert(extent, feature);\r\n      }\r\n    } else {\r\n      this.nullGeometryFeatures_[featureKey] = feature;\r\n    }\r\n\r\n    this.dispatchEvent(\r\n      new VectorSourceEvent(VectorEventType.ADDFEATURE, feature),\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @param {string} featureKey Unique identifier for the feature.\r\n   * @param {FeatureType} feature The feature.\r\n   * @private\r\n   */\r\n  setupChangeEvents_(featureKey, feature) {\r\n    if (feature instanceof RenderFeature) {\r\n      return;\r\n    }\r\n    this.featureChangeKeys_[featureKey] = [\r\n      listen(feature, EventType.CHANGE, this.handleFeatureChange_, this),\r\n      listen(\r\n        feature,\r\n        ObjectEventType.PROPERTYCHANGE,\r\n        this.handleFeatureChange_,\r\n        this,\r\n      ),\r\n    ];\r\n  }\r\n\r\n  /**\r\n   * @param {string} featureKey Unique identifier for the feature.\r\n   * @param {FeatureType} feature The feature.\r\n   * @return {boolean} The feature is \"valid\", in the sense that it is also a\r\n   *     candidate for insertion into the Rtree.\r\n   * @private\r\n   */\r\n  addToIndex_(featureKey, feature) {\r\n    let valid = true;\r\n    if (feature.getId() !== undefined) {\r\n      const id = String(feature.getId());\r\n      if (!(id in this.idIndex_)) {\r\n        this.idIndex_[id] = feature;\r\n      } else if (feature instanceof RenderFeature) {\r\n        const indexedFeature = this.idIndex_[id];\r\n        if (!(indexedFeature instanceof RenderFeature)) {\r\n          valid = false;\r\n        } else if (!Array.isArray(indexedFeature)) {\r\n          this.idIndex_[id] = [indexedFeature, feature];\r\n        } else {\r\n          indexedFeature.push(feature);\r\n        }\r\n      } else {\r\n        valid = false;\r\n      }\r\n    }\r\n    if (valid) {\r\n      assert(\r\n        !(featureKey in this.uidIndex_),\r\n        'The passed `feature` was already added to the source',\r\n      );\r\n      this.uidIndex_[featureKey] = feature;\r\n    }\r\n    return valid;\r\n  }\r\n\r\n  /**\r\n   * Add a batch of features to the source.\r\n   * @param {Array<FeatureType>} features Features to add.\r\n   * @api\r\n   */\r\n  addFeatures(features) {\r\n    this.addFeaturesInternal(features);\r\n    this.changed();\r\n  }\r\n\r\n  /**\r\n   * Add features without firing a `change` event.\r\n   * @param {Array<FeatureType>} features Features.\r\n   * @protected\r\n   */\r\n  addFeaturesInternal(features) {\r\n    const extents = [];\r\n    /** @type {Array<FeatureType>} */\r\n    const newFeatures = [];\r\n    /** @type {Array<FeatureType>} */\r\n    const geometryFeatures = [];\r\n\r\n    for (let i = 0, length = features.length; i < length; i++) {\r\n      const feature = features[i];\r\n      const featureKey = getUid(feature);\r\n      if (this.addToIndex_(featureKey, feature)) {\r\n        newFeatures.push(feature);\r\n      }\r\n    }\r\n\r\n    for (let i = 0, length = newFeatures.length; i < length; i++) {\r\n      const feature = newFeatures[i];\r\n      const featureKey = getUid(feature);\r\n      this.setupChangeEvents_(featureKey, feature);\r\n\r\n      const geometry = feature.getGeometry();\r\n      if (geometry) {\r\n        const extent = geometry.getExtent();\r\n        extents.push(extent);\r\n        geometryFeatures.push(feature);\r\n      } else {\r\n        this.nullGeometryFeatures_[featureKey] = feature;\r\n      }\r\n    }\r\n    if (this.featuresRtree_) {\r\n      this.featuresRtree_.load(extents, geometryFeatures);\r\n    }\r\n\r\n    if (this.hasListener(VectorEventType.ADDFEATURE)) {\r\n      for (let i = 0, length = newFeatures.length; i < length; i++) {\r\n        this.dispatchEvent(\r\n          new VectorSourceEvent(VectorEventType.ADDFEATURE, newFeatures[i]),\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {!Collection<FeatureType>} collection Collection.\r\n   * @private\r\n   */\r\n  bindFeaturesCollection_(collection) {\r\n    let modifyingCollection = false;\r\n    this.addEventListener(\r\n      VectorEventType.ADDFEATURE,\r\n      /**\r\n       * @param {VectorSourceEvent<FeatureType>} evt The vector source event\r\n       */\r\n      function (evt) {\r\n        if (!modifyingCollection) {\r\n          modifyingCollection = true;\r\n          collection.push(evt.feature);\r\n          modifyingCollection = false;\r\n        }\r\n      },\r\n    );\r\n    this.addEventListener(\r\n      VectorEventType.REMOVEFEATURE,\r\n      /**\r\n       * @param {VectorSourceEvent<FeatureType>} evt The vector source event\r\n       */\r\n      function (evt) {\r\n        if (!modifyingCollection) {\r\n          modifyingCollection = true;\r\n          collection.remove(evt.feature);\r\n          modifyingCollection = false;\r\n        }\r\n      },\r\n    );\r\n    collection.addEventListener(\r\n      CollectionEventType.ADD,\r\n      /**\r\n       * @param {import(\"../Collection.js\").CollectionEvent<FeatureType>} evt The collection event\r\n       */\r\n      (evt) => {\r\n        if (!modifyingCollection) {\r\n          modifyingCollection = true;\r\n          this.addFeature(evt.element);\r\n          modifyingCollection = false;\r\n        }\r\n      },\r\n    );\r\n    collection.addEventListener(\r\n      CollectionEventType.REMOVE,\r\n      /**\r\n       * @param {import(\"../Collection.js\").CollectionEvent<FeatureType>} evt The collection event\r\n       */\r\n      (evt) => {\r\n        if (!modifyingCollection) {\r\n          modifyingCollection = true;\r\n          this.removeFeature(evt.element);\r\n          modifyingCollection = false;\r\n        }\r\n      },\r\n    );\r\n    this.featuresCollection_ = collection;\r\n  }\r\n\r\n  /**\r\n   * Remove all features from the source.\r\n   * @param {boolean} [fast] Skip dispatching of {@link module:ol/source/Vector.VectorSourceEvent#event:removefeature} events.\r\n   * @api\r\n   */\r\n  clear(fast) {\r\n    if (fast) {\r\n      for (const featureId in this.featureChangeKeys_) {\r\n        const keys = this.featureChangeKeys_[featureId];\r\n        keys.forEach(unlistenByKey);\r\n      }\r\n      if (!this.featuresCollection_) {\r\n        this.featureChangeKeys_ = {};\r\n        this.idIndex_ = {};\r\n        this.uidIndex_ = {};\r\n      }\r\n    } else {\r\n      if (this.featuresRtree_) {\r\n        this.featuresRtree_.forEach((feature) => {\r\n          this.removeFeatureInternal(feature);\r\n        });\r\n        for (const id in this.nullGeometryFeatures_) {\r\n          this.removeFeatureInternal(this.nullGeometryFeatures_[id]);\r\n        }\r\n      }\r\n    }\r\n    if (this.featuresCollection_) {\r\n      this.featuresCollection_.clear();\r\n    }\r\n\r\n    if (this.featuresRtree_) {\r\n      this.featuresRtree_.clear();\r\n    }\r\n    this.nullGeometryFeatures_ = {};\r\n\r\n    const clearEvent = new VectorSourceEvent(VectorEventType.CLEAR);\r\n    this.dispatchEvent(clearEvent);\r\n    this.changed();\r\n  }\r\n\r\n  /**\r\n   * Iterate through all features on the source, calling the provided callback\r\n   * with each one.  If the callback returns any \"truthy\" value, iteration will\r\n   * stop and the function will return the same value.\r\n   * Note: this function only iterate through the feature that have a defined geometry.\r\n   *\r\n   * @param {function(FeatureType): T} callback Called with each feature\r\n   *     on the source.  Return a truthy value to stop iteration.\r\n   * @return {T|undefined} The return value from the last call to the callback.\r\n   * @template T\r\n   * @api\r\n   */\r\n  forEachFeature(callback) {\r\n    if (this.featuresRtree_) {\r\n      return this.featuresRtree_.forEach(callback);\r\n    }\r\n    if (this.featuresCollection_) {\r\n      this.featuresCollection_.forEach(callback);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Iterate through all features whose geometries contain the provided\r\n   * coordinate, calling the callback with each feature.  If the callback returns\r\n   * a \"truthy\" value, iteration will stop and the function will return the same\r\n   * value.\r\n   *\r\n   * For {@link module:ol/render/Feature~RenderFeature} features, the callback will be\r\n   * called for all features.\r\n   *\r\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\r\n   * @param {function(FeatureType): T} callback Called with each feature\r\n   *     whose goemetry contains the provided coordinate.\r\n   * @return {T|undefined} The return value from the last call to the callback.\r\n   * @template T\r\n   */\r\n  forEachFeatureAtCoordinateDirect(coordinate, callback) {\r\n    const extent = [coordinate[0], coordinate[1], coordinate[0], coordinate[1]];\r\n    return this.forEachFeatureInExtent(extent, function (feature) {\r\n      const geometry = feature.getGeometry();\r\n      if (\r\n        geometry instanceof RenderFeature ||\r\n        geometry.intersectsCoordinate(coordinate)\r\n      ) {\r\n        return callback(feature);\r\n      }\r\n      return undefined;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Iterate through all features whose bounding box intersects the provided\r\n   * extent (note that the feature's geometry may not intersect the extent),\r\n   * calling the callback with each feature.  If the callback returns a \"truthy\"\r\n   * value, iteration will stop and the function will return the same value.\r\n   *\r\n   * If you are interested in features whose geometry intersects an extent, call\r\n   * the {@link module:ol/source/Vector~VectorSource#forEachFeatureIntersectingExtent #forEachFeatureIntersectingExtent()} method instead.\r\n   *\r\n   * When `useSpatialIndex` is set to false, this method will loop through all\r\n   * features, equivalent to {@link module:ol/source/Vector~VectorSource#forEachFeature #forEachFeature()}.\r\n   *\r\n   * @param {import(\"../extent.js\").Extent} extent Extent.\r\n   * @param {function(FeatureType): T} callback Called with each feature\r\n   *     whose bounding box intersects the provided extent.\r\n   * @return {T|undefined} The return value from the last call to the callback.\r\n   * @template T\r\n   * @api\r\n   */\r\n  forEachFeatureInExtent(extent, callback) {\r\n    if (this.featuresRtree_) {\r\n      return this.featuresRtree_.forEachInExtent(extent, callback);\r\n    }\r\n    if (this.featuresCollection_) {\r\n      this.featuresCollection_.forEach(callback);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Iterate through all features whose geometry intersects the provided extent,\r\n   * calling the callback with each feature.  If the callback returns a \"truthy\"\r\n   * value, iteration will stop and the function will return the same value.\r\n   *\r\n   * If you only want to test for bounding box intersection, call the\r\n   * {@link module:ol/source/Vector~VectorSource#forEachFeatureInExtent #forEachFeatureInExtent()} method instead.\r\n   *\r\n   * @param {import(\"../extent.js\").Extent} extent Extent.\r\n   * @param {function(FeatureType): T} callback Called with each feature\r\n   *     whose geometry intersects the provided extent.\r\n   * @return {T|undefined} The return value from the last call to the callback.\r\n   * @template T\r\n   * @api\r\n   */\r\n  forEachFeatureIntersectingExtent(extent, callback) {\r\n    return this.forEachFeatureInExtent(\r\n      extent,\r\n      /**\r\n       * @param {FeatureType} feature Feature.\r\n       * @return {T|undefined} The return value from the last call to the callback.\r\n       */\r\n      function (feature) {\r\n        const geometry = feature.getGeometry();\r\n        if (\r\n          geometry instanceof RenderFeature ||\r\n          geometry.intersectsExtent(extent)\r\n        ) {\r\n          const result = callback(feature);\r\n          if (result) {\r\n            return result;\r\n          }\r\n        }\r\n      },\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Get the features collection associated with this source. Will be `null`\r\n   * unless the source was configured with `useSpatialIndex` set to `false`, or\r\n   * with a {@link module:ol/Collection~Collection} as `features`.\r\n   * @return {Collection<FeatureType>|null} The collection of features.\r\n   * @api\r\n   */\r\n  getFeaturesCollection() {\r\n    return this.featuresCollection_;\r\n  }\r\n\r\n  /**\r\n   * Get a snapshot of the features currently on the source in random order. The returned array\r\n   * is a copy, the features are references to the features in the source.\r\n   * @return {Array<FeatureType>} Features.\r\n   * @api\r\n   */\r\n  getFeatures() {\r\n    let features;\r\n    if (this.featuresCollection_) {\r\n      features = this.featuresCollection_.getArray().slice(0);\r\n    } else if (this.featuresRtree_) {\r\n      features = this.featuresRtree_.getAll();\r\n      if (!isEmpty(this.nullGeometryFeatures_)) {\r\n        extend(features, Object.values(this.nullGeometryFeatures_));\r\n      }\r\n    }\r\n    return features;\r\n  }\r\n\r\n  /**\r\n   * Get all features whose geometry intersects the provided coordinate.\r\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\r\n   * @return {Array<FeatureType>} Features.\r\n   * @api\r\n   */\r\n  getFeaturesAtCoordinate(coordinate) {\r\n    /** @type {Array<FeatureType>} */\r\n    const features = [];\r\n    this.forEachFeatureAtCoordinateDirect(coordinate, function (feature) {\r\n      features.push(feature);\r\n    });\r\n    return features;\r\n  }\r\n\r\n  /**\r\n   * Get all features whose bounding box intersects the provided extent.  Note that this returns an array of\r\n   * all features intersecting the given extent in random order (so it may include\r\n   * features whose geometries do not intersect the extent).\r\n   *\r\n   * When `useSpatialIndex` is set to false, this method will return all\r\n   * features.\r\n   *\r\n   * @param {import(\"../extent.js\").Extent} extent Extent.\r\n   * @param {import(\"../proj/Projection.js\").default} [projection] Include features\r\n   * where `extent` exceeds the x-axis bounds of `projection` and wraps around the world.\r\n   * @return {Array<FeatureType>} Features.\r\n   * @api\r\n   */\r\n  getFeaturesInExtent(extent, projection) {\r\n    if (this.featuresRtree_) {\r\n      const multiWorld = projection && projection.canWrapX() && this.getWrapX();\r\n\r\n      if (!multiWorld) {\r\n        return this.featuresRtree_.getInExtent(extent);\r\n      }\r\n\r\n      const extents = wrapAndSliceX(extent, projection);\r\n\r\n      return [].concat(\r\n        ...extents.map((anExtent) => this.featuresRtree_.getInExtent(anExtent)),\r\n      );\r\n    }\r\n    if (this.featuresCollection_) {\r\n      return this.featuresCollection_.getArray().slice(0);\r\n    }\r\n    return [];\r\n  }\r\n\r\n  /**\r\n   * Get the closest feature to the provided coordinate.\r\n   *\r\n   * This method is not available when the source is configured with\r\n   * `useSpatialIndex` set to `false` and the features in this source are of type\r\n   * {@link module:ol/Feature~Feature}.\r\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\r\n   * @param {function(FeatureType):boolean} [filter] Feature filter function.\r\n   *     The filter function will receive one argument, the {@link module:ol/Feature~Feature feature}\r\n   *     and it should return a boolean value. By default, no filtering is made.\r\n   * @return {FeatureType} Closest feature.\r\n   * @api\r\n   */\r\n  getClosestFeatureToCoordinate(coordinate, filter) {\r\n    // Find the closest feature using branch and bound.  We start searching an\r\n    // infinite extent, and find the distance from the first feature found.  This\r\n    // becomes the closest feature.  We then compute a smaller extent which any\r\n    // closer feature must intersect.  We continue searching with this smaller\r\n    // extent, trying to find a closer feature.  Every time we find a closer\r\n    // feature, we update the extent being searched so that any even closer\r\n    // feature must intersect it.  We continue until we run out of features.\r\n    const x = coordinate[0];\r\n    const y = coordinate[1];\r\n    let closestFeature = null;\r\n    const closestPoint = [NaN, NaN];\r\n    let minSquaredDistance = Infinity;\r\n    const extent = [-Infinity, -Infinity, Infinity, Infinity];\r\n    filter = filter ? filter : TRUE;\r\n    this.featuresRtree_.forEachInExtent(\r\n      extent,\r\n      /**\r\n       * @param {FeatureType} feature Feature.\r\n       */\r\n      function (feature) {\r\n        if (filter(feature)) {\r\n          const geometry = feature.getGeometry();\r\n          const previousMinSquaredDistance = minSquaredDistance;\r\n          minSquaredDistance =\r\n            geometry instanceof RenderFeature\r\n              ? 0\r\n              : geometry.closestPointXY(x, y, closestPoint, minSquaredDistance);\r\n          if (minSquaredDistance < previousMinSquaredDistance) {\r\n            closestFeature = feature;\r\n            // This is sneaky.  Reduce the extent that it is currently being\r\n            // searched while the R-Tree traversal using this same extent object\r\n            // is still in progress.  This is safe because the new extent is\r\n            // strictly contained by the old extent.\r\n            const minDistance = Math.sqrt(minSquaredDistance);\r\n            extent[0] = x - minDistance;\r\n            extent[1] = y - minDistance;\r\n            extent[2] = x + minDistance;\r\n            extent[3] = y + minDistance;\r\n          }\r\n        }\r\n      },\r\n    );\r\n    return closestFeature;\r\n  }\r\n\r\n  /**\r\n   * Get the extent of the features currently in the source.\r\n   *\r\n   * This method is not available when the source is configured with\r\n   * `useSpatialIndex` set to `false`.\r\n   * @param {import(\"../extent.js\").Extent} [extent] Destination extent. If provided, no new extent\r\n   *     will be created. Instead, that extent's coordinates will be overwritten.\r\n   * @return {import(\"../extent.js\").Extent} Extent.\r\n   * @api\r\n   */\r\n  getExtent(extent) {\r\n    return this.featuresRtree_.getExtent(extent);\r\n  }\r\n\r\n  /**\r\n   * Get a feature by its identifier (the value returned by feature.getId()). When `RenderFeature`s\r\n   * are used, `getFeatureById()` can return an array of `RenderFeature`s. This allows for handling\r\n   * of `GeometryCollection` geometries, where format readers create one `RenderFeature` per\r\n   * `GeometryCollection` member.\r\n   * Note that the index treats string and numeric identifiers as the same.  So\r\n   * `source.getFeatureById(2)` will return a feature with id `'2'` or `2`.\r\n   *\r\n   * @param {string|number} id Feature identifier.\r\n   * @return {FeatureClassOrArrayOfRenderFeatures<FeatureType>|null} The feature (or `null` if not found).\r\n   * @api\r\n   */\r\n  getFeatureById(id) {\r\n    const feature = this.idIndex_[id.toString()];\r\n    return feature !== undefined\r\n      ? /** @type {FeatureClassOrArrayOfRenderFeatures<FeatureType>} */ (\r\n          feature\r\n        )\r\n      : null;\r\n  }\r\n\r\n  /**\r\n   * Get a feature by its internal unique identifier (using `getUid`).\r\n   *\r\n   * @param {string} uid Feature identifier.\r\n   * @return {FeatureType|null} The feature (or `null` if not found).\r\n   */\r\n  getFeatureByUid(uid) {\r\n    const feature = this.uidIndex_[uid];\r\n    return feature !== undefined ? feature : null;\r\n  }\r\n\r\n  /**\r\n   * Get the format associated with this source.\r\n   *\r\n   * @return {import(\"../format/Feature.js\").default<FeatureType>|null}} The feature format.\r\n   * @api\r\n   */\r\n  getFormat() {\r\n    return this.format_;\r\n  }\r\n\r\n  /**\r\n   * @return {boolean} The source can have overlapping geometries.\r\n   */\r\n  getOverlaps() {\r\n    return this.overlaps_;\r\n  }\r\n\r\n  /**\r\n   * Get the url associated with this source.\r\n   *\r\n   * @return {string|import(\"../featureloader.js\").FeatureUrlFunction|undefined} The url.\r\n   * @api\r\n   */\r\n  getUrl() {\r\n    return this.url_;\r\n  }\r\n\r\n  /**\r\n   * @param {Event} event Event.\r\n   * @private\r\n   */\r\n  handleFeatureChange_(event) {\r\n    const feature = /** @type {FeatureType} */ (event.target);\r\n    const featureKey = getUid(feature);\r\n    const geometry = feature.getGeometry();\r\n    if (!geometry) {\r\n      if (!(featureKey in this.nullGeometryFeatures_)) {\r\n        if (this.featuresRtree_) {\r\n          this.featuresRtree_.remove(feature);\r\n        }\r\n        this.nullGeometryFeatures_[featureKey] = feature;\r\n      }\r\n    } else {\r\n      const extent = geometry.getExtent();\r\n      if (featureKey in this.nullGeometryFeatures_) {\r\n        delete this.nullGeometryFeatures_[featureKey];\r\n        if (this.featuresRtree_) {\r\n          this.featuresRtree_.insert(extent, feature);\r\n        }\r\n      } else {\r\n        if (this.featuresRtree_) {\r\n          this.featuresRtree_.update(extent, feature);\r\n        }\r\n      }\r\n    }\r\n    const id = feature.getId();\r\n    if (id !== undefined) {\r\n      const sid = id.toString();\r\n      if (this.idIndex_[sid] !== feature) {\r\n        this.removeFromIdIndex_(feature);\r\n        this.idIndex_[sid] = feature;\r\n      }\r\n    } else {\r\n      this.removeFromIdIndex_(feature);\r\n      this.uidIndex_[featureKey] = feature;\r\n    }\r\n    this.changed();\r\n    this.dispatchEvent(\r\n      new VectorSourceEvent(VectorEventType.CHANGEFEATURE, feature),\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Returns true if the feature is contained within the source.\r\n   * @param {FeatureType} feature Feature.\r\n   * @return {boolean} Has feature.\r\n   * @api\r\n   */\r\n  hasFeature(feature) {\r\n    const id = feature.getId();\r\n    if (id !== undefined) {\r\n      return id in this.idIndex_;\r\n    }\r\n    return getUid(feature) in this.uidIndex_;\r\n  }\r\n\r\n  /**\r\n   * @return {boolean} Is empty.\r\n   */\r\n  isEmpty() {\r\n    if (this.featuresRtree_) {\r\n      return (\r\n        this.featuresRtree_.isEmpty() && isEmpty(this.nullGeometryFeatures_)\r\n      );\r\n    }\r\n    if (this.featuresCollection_) {\r\n      return this.featuresCollection_.getLength() === 0;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../extent.js\").Extent} extent Extent.\r\n   * @param {number} resolution Resolution.\r\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\r\n   */\r\n  loadFeatures(extent, resolution, projection) {\r\n    const loadedExtentsRtree = this.loadedExtentsRtree_;\r\n    const extentsToLoad = this.strategy_(extent, resolution, projection);\r\n    for (let i = 0, ii = extentsToLoad.length; i < ii; ++i) {\r\n      const extentToLoad = extentsToLoad[i];\r\n      const alreadyLoaded = loadedExtentsRtree.forEachInExtent(\r\n        extentToLoad,\r\n        /**\r\n         * @param {{extent: import(\"../extent.js\").Extent}} object Object.\r\n         * @return {boolean} Contains.\r\n         */\r\n        function (object) {\r\n          return containsExtent(object.extent, extentToLoad);\r\n        },\r\n      );\r\n      if (!alreadyLoaded) {\r\n        ++this.loadingExtentsCount_;\r\n        this.dispatchEvent(\r\n          new VectorSourceEvent(VectorEventType.FEATURESLOADSTART),\r\n        );\r\n        this.loader_.call(\r\n          this,\r\n          extentToLoad,\r\n          resolution,\r\n          projection,\r\n          /**\r\n           * @param {Array<FeatureType>} features Loaded features\r\n           */\r\n          (features) => {\r\n            --this.loadingExtentsCount_;\r\n            this.dispatchEvent(\r\n              new VectorSourceEvent(\r\n                VectorEventType.FEATURESLOADEND,\r\n                undefined,\r\n                features,\r\n              ),\r\n            );\r\n          },\r\n          () => {\r\n            --this.loadingExtentsCount_;\r\n            this.dispatchEvent(\r\n              new VectorSourceEvent(VectorEventType.FEATURESLOADERROR),\r\n            );\r\n          },\r\n        );\r\n        loadedExtentsRtree.insert(extentToLoad, {extent: extentToLoad.slice()});\r\n      }\r\n    }\r\n    this.loading =\r\n      this.loader_.length < 4 ? false : this.loadingExtentsCount_ > 0;\r\n  }\r\n\r\n  /**\r\n   * @override\r\n   */\r\n  refresh() {\r\n    this.clear(true);\r\n    this.loadedExtentsRtree_.clear();\r\n    super.refresh();\r\n  }\r\n\r\n  /**\r\n   * Remove an extent from the list of loaded extents.\r\n   * @param {import(\"../extent.js\").Extent} extent Extent.\r\n   * @api\r\n   */\r\n  removeLoadedExtent(extent) {\r\n    const loadedExtentsRtree = this.loadedExtentsRtree_;\r\n    const obj = loadedExtentsRtree.forEachInExtent(extent, function (object) {\r\n      if (equals(object.extent, extent)) {\r\n        return object;\r\n      }\r\n    });\r\n    if (obj) {\r\n      loadedExtentsRtree.remove(obj);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Batch remove features from the source.  If you want to remove all features\r\n   * at once, use the {@link module:ol/source/Vector~VectorSource#clear #clear()} method\r\n   * instead.\r\n   * @param {Array<FeatureType>} features Features to remove.\r\n   * @api\r\n   */\r\n  removeFeatures(features) {\r\n    let removed = false;\r\n    for (let i = 0, ii = features.length; i < ii; ++i) {\r\n      removed = this.removeFeatureInternal(features[i]) || removed;\r\n    }\r\n    if (removed) {\r\n      this.changed();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Remove a single feature from the source. If you want to batch remove\r\n   * features, use the {@link module:ol/source/Vector~VectorSource#removeFeatures #removeFeatures()} method\r\n   * instead.\r\n   * @param {FeatureType} feature Feature to remove.\r\n   * @api\r\n   */\r\n  removeFeature(feature) {\r\n    if (!feature) {\r\n      return;\r\n    }\r\n    const removed = this.removeFeatureInternal(feature);\r\n    if (removed) {\r\n      this.changed();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Remove feature without firing a `change` event.\r\n   * @param {FeatureType} feature Feature.\r\n   * @return {boolean} True if the feature was removed, false if it was not found.\r\n   * @protected\r\n   */\r\n  removeFeatureInternal(feature) {\r\n    const featureKey = getUid(feature);\r\n    if (!(featureKey in this.uidIndex_)) {\r\n      return false;\r\n    }\r\n\r\n    if (featureKey in this.nullGeometryFeatures_) {\r\n      delete this.nullGeometryFeatures_[featureKey];\r\n    } else {\r\n      if (this.featuresRtree_) {\r\n        this.featuresRtree_.remove(feature);\r\n      }\r\n    }\r\n\r\n    const featureChangeKeys = this.featureChangeKeys_[featureKey];\r\n    featureChangeKeys?.forEach(unlistenByKey);\r\n    delete this.featureChangeKeys_[featureKey];\r\n\r\n    const id = feature.getId();\r\n    if (id !== undefined) {\r\n      const idString = id.toString();\r\n      const indexedFeature = this.idIndex_[idString];\r\n      if (indexedFeature === feature) {\r\n        delete this.idIndex_[idString];\r\n      } else if (Array.isArray(indexedFeature)) {\r\n        indexedFeature.splice(indexedFeature.indexOf(feature), 1);\r\n        if (indexedFeature.length === 1) {\r\n          this.idIndex_[idString] = indexedFeature[0];\r\n        }\r\n      }\r\n    }\r\n    delete this.uidIndex_[featureKey];\r\n    if (this.hasListener(VectorEventType.REMOVEFEATURE)) {\r\n      this.dispatchEvent(\r\n        new VectorSourceEvent(VectorEventType.REMOVEFEATURE, feature),\r\n      );\r\n    }\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Remove a feature from the id index.  Called internally when the feature id\r\n   * may have changed.\r\n   * @param {FeatureType} feature The feature.\r\n   * @private\r\n   */\r\n  removeFromIdIndex_(feature) {\r\n    for (const id in this.idIndex_) {\r\n      if (this.idIndex_[id] === feature) {\r\n        delete this.idIndex_[id];\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Set the new loader of the source. The next render cycle will use the\r\n   * new loader.\r\n   * @param {import(\"../featureloader.js\").FeatureLoader} loader The loader to set.\r\n   * @api\r\n   */\r\n  setLoader(loader) {\r\n    this.loader_ = loader;\r\n  }\r\n\r\n  /**\r\n   * Points the source to a new url. The next render cycle will use the new url.\r\n   * @param {string|import(\"../featureloader.js\").FeatureUrlFunction} url Url.\r\n   * @api\r\n   */\r\n  setUrl(url) {\r\n    assert(this.format_, '`format` must be set when `url` is set');\r\n    this.url_ = url;\r\n    this.setLoader(xhr(url, this.format_));\r\n  }\r\n\r\n  /**\r\n   * @param {boolean} overlaps The source can have overlapping geometries.\r\n   */\r\n  setOverlaps(overlaps) {\r\n    this.overlaps_ = overlaps;\r\n    this.changed();\r\n  }\r\n}\r\n\r\nexport default VectorSource;\r\n","/**\r\n * @module ol/featureloader\r\n */\r\n\r\n/**\r\n *\r\n * @type {boolean}\r\n * @private\r\n */\r\nlet withCredentials = false;\r\n\r\n/**\r\n * {@link module:ol/source/Vector~VectorSource} sources use a function of this type to\r\n * load features.\r\n *\r\n * This function takes up to 5 arguments. These are an {@link module:ol/extent~Extent} representing\r\n * the area to be loaded, a `{number}` representing the resolution (map units per pixel), a\r\n * {@link module:ol/proj/Projection~Projection} for the projection, an optional success callback that should get\r\n * the loaded features passed as an argument and an optional failure callback with no arguments. If\r\n * the callbacks are not used, the corresponding vector source will not fire `'featuresloadend'` and\r\n * `'featuresloaderror'` events. `this` within the function is bound to the\r\n * {@link module:ol/source/Vector~VectorSource} it's called from.\r\n *\r\n * The function is responsible for loading the features and adding them to the\r\n * source.\r\n *\r\n * @template {import(\"./Feature.js\").FeatureLike} [FeatureType=import(\"./Feature.js\").FeatureLike]\r\n * @typedef {(\r\n *           extent: import(\"./extent.js\").Extent,\r\n *           resolution: number,\r\n *           projection: import(\"./proj/Projection.js\").default,\r\n *           success?: (features: Array<FeatureType>) => void,\r\n *           failure?: () => void) => void} FeatureLoader\r\n * @api\r\n */\r\n\r\n/**\r\n * {@link module:ol/source/Vector~VectorSource} sources use a function of this type to\r\n * get the url to load features from.\r\n *\r\n * This function takes an {@link module:ol/extent~Extent} representing the area\r\n * to be loaded, a `{number}` representing the resolution (map units per pixel)\r\n * and an {@link module:ol/proj/Projection~Projection} for the projection  as\r\n * arguments and returns a `{string}` representing the URL.\r\n * @typedef {function(import(\"./extent.js\").Extent, number, import(\"./proj/Projection.js\").default): string} FeatureUrlFunction\r\n * @api\r\n */\r\n\r\n/**\r\n * @template {import(\"./Feature.js\").FeatureLike} [FeatureType=import(\"./Feature.js\").default]\r\n * @param {string|FeatureUrlFunction} url Feature URL service.\r\n * @param {import(\"./format/Feature.js\").default<FeatureType>} format Feature format.\r\n * @param {import(\"./extent.js\").Extent} extent Extent.\r\n * @param {number} resolution Resolution.\r\n * @param {import(\"./proj/Projection.js\").default} projection Projection.\r\n * @param {function(Array<FeatureType>, import(\"./proj/Projection.js\").default): void} success Success\r\n *      Function called with the loaded features and optionally with the data projection.\r\n * @param {function(): void} failure Failure\r\n *      Function called when loading failed.\r\n */\r\nexport function loadFeaturesXhr(\r\n  url,\r\n  format,\r\n  extent,\r\n  resolution,\r\n  projection,\r\n  success,\r\n  failure,\r\n) {\r\n  const xhr = new XMLHttpRequest();\r\n  xhr.open(\r\n    'GET',\r\n    typeof url === 'function' ? url(extent, resolution, projection) : url,\r\n    true,\r\n  );\r\n  if (format.getType() == 'arraybuffer') {\r\n    xhr.responseType = 'arraybuffer';\r\n  }\r\n  xhr.withCredentials = withCredentials;\r\n  /**\r\n   * @param {Event} event Event.\r\n   * @private\r\n   */\r\n  xhr.onload = function (event) {\r\n    // status will be 0 for file:// urls\r\n    if (!xhr.status || (xhr.status >= 200 && xhr.status < 300)) {\r\n      const type = format.getType();\r\n      try {\r\n        /** @type {Document|Node|Object|string|undefined} */\r\n        let source;\r\n        if (type == 'text' || type == 'json') {\r\n          source = xhr.responseText;\r\n        } else if (type == 'xml') {\r\n          source = xhr.responseXML || xhr.responseText;\r\n        } else if (type == 'arraybuffer') {\r\n          source = /** @type {ArrayBuffer} */ (xhr.response);\r\n        }\r\n        if (source) {\r\n          success(\r\n            /** @type {Array<FeatureType>} */\r\n            (\r\n              format.readFeatures(source, {\r\n                extent: extent,\r\n                featureProjection: projection,\r\n              })\r\n            ),\r\n            format.readProjection(source),\r\n          );\r\n        } else {\r\n          failure();\r\n        }\r\n      } catch {\r\n        failure();\r\n      }\r\n    } else {\r\n      failure();\r\n    }\r\n  };\r\n  /**\r\n   * @private\r\n   */\r\n  xhr.onerror = failure;\r\n  xhr.send();\r\n}\r\n\r\n/**\r\n * Create an XHR feature loader for a `url` and `format`. The feature loader\r\n * loads features (with XHR), parses the features, and adds them to the\r\n * vector source.\r\n *\r\n * @template {import(\"./Feature.js\").FeatureLike} [FeatureType=import(\"./Feature.js\").default]\r\n * @param {string|FeatureUrlFunction} url Feature URL service.\r\n * @param {import(\"./format/Feature.js\").default<FeatureType>} format Feature format.\r\n * @return {FeatureLoader<FeatureType>} The feature loader.\r\n * @api\r\n */\r\nexport function xhr(url, format) {\r\n  /**\r\n   * @param {import(\"./extent.js\").Extent} extent Extent.\r\n   * @param {number} resolution Resolution.\r\n   * @param {import(\"./proj/Projection.js\").default} projection Projection.\r\n   * @param {function(Array<FeatureType>): void} [success] Success\r\n   *      Function called when loading succeeded.\r\n   * @param {function(): void} [failure] Failure\r\n   *      Function called when loading failed.\r\n   * @this {import(\"./source/Vector.js\").default<FeatureType>}\r\n   */\r\n  return function (extent, resolution, projection, success, failure) {\r\n    loadFeaturesXhr(\r\n      url,\r\n      format,\r\n      extent,\r\n      resolution,\r\n      projection,\r\n      /**\r\n       * @param {Array<FeatureType>} features The loaded features.\r\n       * @param {import(\"./proj/Projection.js\").default} dataProjection Data\r\n       * projection.\r\n       */\r\n      (features, dataProjection) => {\r\n        this.addFeatures(features);\r\n        if (success !== undefined) {\r\n          success(features);\r\n        }\r\n      },\r\n      () => {\r\n        this.changed();\r\n        if (failure !== undefined) {\r\n          failure();\r\n        }\r\n      },\r\n    );\r\n  };\r\n}\r\n\r\n/**\r\n * Setter for the withCredentials configuration for the XHR.\r\n *\r\n * @param {boolean} xhrWithCredentials The value of withCredentials to set.\r\n * Compare https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/\r\n * @api\r\n */\r\nexport function setWithCredentials(xhrWithCredentials) {\r\n  withCredentials = xhrWithCredentials;\r\n}\r\n","/**\r\n * @module ol/loadingstrategy\r\n */\r\n\r\nimport {fromUserExtent, fromUserResolution, toUserExtent} from './proj.js';\r\n\r\n/**\r\n * Strategy function for loading all features with a single request.\r\n * @param {import(\"./extent.js\").Extent} extent Extent.\r\n * @param {number} resolution Resolution.\r\n * @return {Array<import(\"./extent.js\").Extent>} Extents.\r\n * @api\r\n */\r\nexport function all(extent, resolution) {\r\n  return [[-Infinity, -Infinity, Infinity, Infinity]];\r\n}\r\n\r\n/**\r\n * Strategy function for loading features based on the view's extent and\r\n * resolution.\r\n * @param {import(\"./extent.js\").Extent} extent Extent.\r\n * @param {number} resolution Resolution.\r\n * @return {Array<import(\"./extent.js\").Extent>} Extents.\r\n * @api\r\n */\r\nexport function bbox(extent, resolution) {\r\n  return [extent];\r\n}\r\n\r\n/**\r\n * Creates a strategy function for loading features based on a tile grid.\r\n * @param {import(\"./tilegrid/TileGrid.js\").default} tileGrid Tile grid.\r\n * @return {function(import(\"./extent.js\").Extent, number, import(\"./proj.js\").Projection): Array<import(\"./extent.js\").Extent>} Loading strategy.\r\n * @api\r\n */\r\nexport function tile(tileGrid) {\r\n  return (\r\n    /**\r\n     * @param {import(\"./extent.js\").Extent} extent Extent.\r\n     * @param {number} resolution Resolution.\r\n     * @param {import(\"./proj.js\").Projection} projection Projection.\r\n     * @return {Array<import(\"./extent.js\").Extent>} Extents.\r\n     */\r\n    function (extent, resolution, projection) {\r\n      const z = tileGrid.getZForResolution(\r\n        fromUserResolution(resolution, projection),\r\n      );\r\n      const tileRange = tileGrid.getTileRangeForExtentAndZ(\r\n        fromUserExtent(extent, projection),\r\n        z,\r\n      );\r\n      /** @type {Array<import(\"./extent.js\").Extent>} */\r\n      const extents = [];\r\n      /** @type {import(\"./tilecoord.js\").TileCoord} */\r\n      const tileCoord = [z, 0, 0];\r\n      for (\r\n        tileCoord[1] = tileRange.minX;\r\n        tileCoord[1] <= tileRange.maxX;\r\n        ++tileCoord[1]\r\n      ) {\r\n        for (\r\n          tileCoord[2] = tileRange.minY;\r\n          tileCoord[2] <= tileRange.maxY;\r\n          ++tileCoord[2]\r\n        ) {\r\n          extents.push(\r\n            toUserExtent(tileGrid.getTileCoordExtent(tileCoord), projection),\r\n          );\r\n        }\r\n      }\r\n      return extents;\r\n    }\r\n  );\r\n}\r\n","/**\r\n * @module ol/structs/RBush\r\n */\r\nimport RBush_ from 'rbush';\r\nimport {createOrUpdate, equals} from '../extent.js';\r\nimport {isEmpty} from '../obj.js';\r\nimport {getUid} from '../util.js';\r\n\r\n/**\r\n * @typedef {import(\"rbush\").BBox & {value: T}} Entry\r\n * @template T\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * Wrapper around the RBush by Vladimir Agafonkin.\r\n * See https://github.com/mourner/rbush.\r\n *\r\n * @template {Object} T\r\n */\r\nclass RBush {\r\n  /**\r\n   * @param {number} [maxEntries] Max entries.\r\n   */\r\n  constructor(maxEntries) {\r\n    /**\r\n     * @private\r\n     * @type {RBush_<Entry<T>>}\r\n     */\r\n    this.rbush_ = new RBush_(maxEntries);\r\n\r\n    /**\r\n     * A mapping between the objects added to this rbush wrapper\r\n     * and the objects that are actually added to the internal rbush.\r\n     * @private\r\n     * @type {Object<string, Entry<T>>}\r\n     */\r\n    this.items_ = {};\r\n  }\r\n\r\n  /**\r\n   * Insert a value into the RBush.\r\n   * @param {import(\"../extent.js\").Extent} extent Extent.\r\n   * @param {T} value Value.\r\n   */\r\n  insert(extent, value) {\r\n    /** @type {Entry<T>} */\r\n    const item = {\r\n      minX: extent[0],\r\n      minY: extent[1],\r\n      maxX: extent[2],\r\n      maxY: extent[3],\r\n      value: value,\r\n    };\r\n\r\n    this.rbush_.insert(item);\r\n    this.items_[getUid(value)] = item;\r\n  }\r\n\r\n  /**\r\n   * Bulk-insert values into the RBush.\r\n   * @param {Array<import(\"../extent.js\").Extent>} extents Extents.\r\n   * @param {Array<T>} values Values.\r\n   */\r\n  load(extents, values) {\r\n    const items = new Array(values.length);\r\n    for (let i = 0, l = values.length; i < l; i++) {\r\n      const extent = extents[i];\r\n      const value = values[i];\r\n\r\n      /** @type {Entry<T>} */\r\n      const item = {\r\n        minX: extent[0],\r\n        minY: extent[1],\r\n        maxX: extent[2],\r\n        maxY: extent[3],\r\n        value: value,\r\n      };\r\n      items[i] = item;\r\n      this.items_[getUid(value)] = item;\r\n    }\r\n    this.rbush_.load(items);\r\n  }\r\n\r\n  /**\r\n   * Remove a value from the RBush.\r\n   * @param {T} value Value.\r\n   * @return {boolean} Removed.\r\n   */\r\n  remove(value) {\r\n    const uid = getUid(value);\r\n\r\n    // get the object in which the value was wrapped when adding to the\r\n    // internal rbush. then use that object to do the removal.\r\n    const item = this.items_[uid];\r\n    delete this.items_[uid];\r\n    return this.rbush_.remove(item) !== null;\r\n  }\r\n\r\n  /**\r\n   * Update the extent of a value in the RBush.\r\n   * @param {import(\"../extent.js\").Extent} extent Extent.\r\n   * @param {T} value Value.\r\n   */\r\n  update(extent, value) {\r\n    const item = this.items_[getUid(value)];\r\n    const bbox = [item.minX, item.minY, item.maxX, item.maxY];\r\n    if (!equals(bbox, extent)) {\r\n      this.remove(value);\r\n      this.insert(extent, value);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Return all values in the RBush.\r\n   * @return {Array<T>} All.\r\n   */\r\n  getAll() {\r\n    const items = this.rbush_.all();\r\n    return items.map(function (item) {\r\n      return item.value;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Return all values in the given extent.\r\n   * @param {import(\"../extent.js\").Extent} extent Extent.\r\n   * @return {Array<T>} All in extent.\r\n   */\r\n  getInExtent(extent) {\r\n    /** @type {import(\"rbush\").BBox} */\r\n    const bbox = {\r\n      minX: extent[0],\r\n      minY: extent[1],\r\n      maxX: extent[2],\r\n      maxY: extent[3],\r\n    };\r\n    const items = this.rbush_.search(bbox);\r\n    return items.map(function (item) {\r\n      return item.value;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Calls a callback function with each value in the tree.\r\n   * If the callback returns a truthy value, this value is returned without\r\n   * checking the rest of the tree.\r\n   * @param {function(T): R} callback Callback.\r\n   * @return {R|undefined} Callback return value.\r\n   * @template R\r\n   */\r\n  forEach(callback) {\r\n    return this.forEach_(this.getAll(), callback);\r\n  }\r\n\r\n  /**\r\n   * Calls a callback function with each value in the provided extent.\r\n   * @param {import(\"../extent.js\").Extent} extent Extent.\r\n   * @param {function(T): R} callback Callback.\r\n   * @return {R|undefined} Callback return value.\r\n   * @template R\r\n   */\r\n  forEachInExtent(extent, callback) {\r\n    return this.forEach_(this.getInExtent(extent), callback);\r\n  }\r\n\r\n  /**\r\n   * @param {Array<T>} values Values.\r\n   * @param {function(T): R} callback Callback.\r\n   * @return {R|undefined} Callback return value.\r\n   * @template R\r\n   * @private\r\n   */\r\n  forEach_(values, callback) {\r\n    let result;\r\n    for (let i = 0, l = values.length; i < l; i++) {\r\n      result = callback(values[i]);\r\n      if (result) {\r\n        return result;\r\n      }\r\n    }\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * @return {boolean} Is empty.\r\n   */\r\n  isEmpty() {\r\n    return isEmpty(this.items_);\r\n  }\r\n\r\n  /**\r\n   * Remove all values from the RBush.\r\n   */\r\n  clear() {\r\n    this.rbush_.clear();\r\n    this.items_ = {};\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../extent.js\").Extent} [extent] Extent.\r\n   * @return {import(\"../extent.js\").Extent} Extent.\r\n   */\r\n  getExtent(extent) {\r\n    const data = this.rbush_.toJSON();\r\n    return createOrUpdate(data.minX, data.minY, data.maxX, data.maxY, extent);\r\n  }\r\n\r\n  /**\r\n   * @param {RBush<T>} rbush R-Tree.\r\n   */\r\n  concat(rbush) {\r\n    this.rbush_.load(rbush.rbush_.all());\r\n    for (const i in rbush.items_) {\r\n      this.items_[i] = rbush.items_[i];\r\n    }\r\n  }\r\n}\r\n\r\nexport default RBush;\r\n","/**\r\n * @module ol/source/VectorEventType\r\n */\r\n\r\n/**\r\n * @enum {string}\r\n */\r\nexport default {\r\n  /**\r\n   * Triggered when a feature is added to the source.\r\n   * @event module:ol/source/Vector.VectorSourceEvent#addfeature\r\n   * @api\r\n   */\r\n  ADDFEATURE: 'addfeature',\r\n\r\n  /**\r\n   * Triggered when a feature is updated.\r\n   * @event module:ol/source/Vector.VectorSourceEvent#changefeature\r\n   * @api\r\n   */\r\n  CHANGEFEATURE: 'changefeature',\r\n\r\n  /**\r\n   * Triggered when the clear method is called on the source.\r\n   * @event module:ol/source/Vector.VectorSourceEvent#clear\r\n   * @api\r\n   */\r\n  CLEAR: 'clear',\r\n\r\n  /**\r\n   * Triggered when a feature is removed from the source.\r\n   * See {@link module:ol/source/Vector~VectorSource#clear source.clear()} for exceptions.\r\n   * @event module:ol/source/Vector.VectorSourceEvent#removefeature\r\n   * @api\r\n   */\r\n  REMOVEFEATURE: 'removefeature',\r\n\r\n  /**\r\n   * Triggered when features starts loading.\r\n   * @event module:ol/source/Vector.VectorSourceEvent#featuresloadstart\r\n   * @api\r\n   */\r\n  FEATURESLOADSTART: 'featuresloadstart',\r\n\r\n  /**\r\n   * Triggered when features finishes loading.\r\n   * @event module:ol/source/Vector.VectorSourceEvent#featuresloadend\r\n   * @api\r\n   */\r\n  FEATURESLOADEND: 'featuresloadend',\r\n\r\n  /**\r\n   * Triggered if feature loading results in an error.\r\n   * @event module:ol/source/Vector.VectorSourceEvent#featuresloaderror\r\n   * @api\r\n   */\r\n  FEATURESLOADERROR: 'featuresloaderror',\r\n};\r\n\r\n/**\r\n * @typedef {'addfeature'|'changefeature'|'clear'|'removefeature'|'featuresloadstart'|'featuresloadend'|'featuresloaderror'} VectorSourceEventTypes\r\n */\r\n","/**\r\n * @module ol/layer/Tile\r\n */\r\nimport CanvasTileLayerRenderer from '../renderer/canvas/TileLayer.js';\r\nimport BaseTileLayer from './BaseTile.js';\r\n\r\n/**\r\n * @classdesc\r\n * For layer sources that provide pre-rendered, tiled images in grids that are\r\n * organized by zoom levels for specific resolutions.\r\n * Note that any property set in the options is set as a {@link module:ol/Object~BaseObject}\r\n * property on the layer object; for example, setting `title: 'My Title'` in the\r\n * options means that `title` is observable, and has get/set accessors.\r\n *\r\n * @template {import(\"../source/Tile.js\").default} [TileSourceType=import(\"../source/Tile.js\").default]\r\n * @extends BaseTileLayer<TileSourceType, CanvasTileLayerRenderer>\r\n * @api\r\n */\r\nclass TileLayer extends BaseTileLayer {\r\n  /**\r\n   * @param {import(\"./BaseTile.js\").Options<TileSourceType>} [options] Tile layer options.\r\n   */\r\n  constructor(options) {\r\n    super(options);\r\n  }\r\n\r\n  /**\r\n   * @override\r\n   */\r\n  createRenderer() {\r\n    return new CanvasTileLayerRenderer(this, {\r\n      cacheSize: this.getCacheSize(),\r\n    });\r\n  }\r\n}\r\n\r\nexport default TileLayer;\r\n","/**\r\n * @module ol/renderer/canvas/TileLayer\r\n */\r\nimport DataTile, {asImageLike} from '../../DataTile.js';\r\nimport ImageTile from '../../ImageTile.js';\r\nimport TileRange from '../../TileRange.js';\r\nimport TileState from '../../TileState.js';\r\nimport {ascending} from '../../array.js';\r\nimport {\r\n  containsCoordinate,\r\n  createEmpty,\r\n  equals,\r\n  getIntersection,\r\n  getRotatedViewport,\r\n  getTopLeft,\r\n  intersects,\r\n} from '../../extent.js';\r\nimport {fromUserExtent} from '../../proj.js';\r\nimport ReprojTile from '../../reproj/Tile.js';\r\nimport {toSize} from '../../size.js';\r\nimport LRUCache from '../../structs/LRUCache.js';\r\nimport {createOrUpdate as createTileCoord, getKeyZXY} from '../../tilecoord.js';\r\nimport {\r\n  apply as applyTransform,\r\n  compose as composeTransform,\r\n} from '../../transform.js';\r\nimport {getUid} from '../../util.js';\r\nimport CanvasLayerRenderer from './Layer.js';\r\n\r\n/**\r\n * @param {string} sourceKey The source key.\r\n * @param {number} z The tile z level.\r\n * @param {number} x The tile x level.\r\n * @param {number} y The tile y level.\r\n * @return {string} The cache key.\r\n */\r\nfunction getCacheKey(sourceKey, z, x, y) {\r\n  return `${sourceKey},${getKeyZXY(z, x, y)}`;\r\n}\r\n\r\n/**\r\n * @typedef {Object<number, Set<import(\"../../Tile.js\").default>>} TileLookup\r\n */\r\n\r\n/**\r\n * Add a tile to the lookup.\r\n * @param {TileLookup} tilesByZ Lookup of tiles by zoom level.\r\n * @param {import(\"../../Tile.js\").default} tile A tile.\r\n * @param {number} z The zoom level.\r\n * @return {boolean} The tile was added to the lookup.\r\n */\r\nfunction addTileToLookup(tilesByZ, tile, z) {\r\n  if (!(z in tilesByZ)) {\r\n    tilesByZ[z] = new Set([tile]);\r\n    return true;\r\n  }\r\n  const set = tilesByZ[z];\r\n  const existing = set.has(tile);\r\n  if (!existing) {\r\n    set.add(tile);\r\n  }\r\n  return !existing;\r\n}\r\n\r\n/**\r\n * Remove a tile from the lookup.\r\n * @param {TileLookup} tilesByZ Lookup of tiles by zoom level.\r\n * @param {import(\"../../Tile.js\").default} tile A tile.\r\n * @param {number} z The zoom level.\r\n * @return {boolean} The tile was removed from the lookup.\r\n */\r\nfunction removeTileFromLookup(tilesByZ, tile, z) {\r\n  const set = tilesByZ[z];\r\n  if (set) {\r\n    return set.delete(tile);\r\n  }\r\n  return false;\r\n}\r\n\r\n/**\r\n * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\r\n * @param {import(\"../../extent.js\").Extent} extent The frame extent.\r\n * @return {import(\"../../extent.js\").Extent} Frame extent intersected with layer extents.\r\n */\r\nfunction getRenderExtent(frameState, extent) {\r\n  const layerState = frameState.layerStatesArray[frameState.layerIndex];\r\n  if (layerState.extent) {\r\n    extent = getIntersection(\r\n      extent,\r\n      fromUserExtent(layerState.extent, frameState.viewState.projection),\r\n    );\r\n  }\r\n  const source = /** @type {import(\"../../source/Tile.js\").default} */ (\r\n    layerState.layer.getRenderSource()\r\n  );\r\n  if (!source.getWrapX()) {\r\n    const gridExtent = source\r\n      .getTileGridForProjection(frameState.viewState.projection)\r\n      .getExtent();\r\n    if (gridExtent) {\r\n      extent = getIntersection(extent, gridExtent);\r\n    }\r\n  }\r\n  return extent;\r\n}\r\n\r\n/**\r\n * @typedef {Object} Options\r\n * @property {number} [cacheSize=512] The cache size.\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * Canvas renderer for tile layers.\r\n * @api\r\n * @template {import(\"../../layer/Tile.js\").default|import(\"../../layer/VectorTile.js\").default} [LayerType=import(\"../../layer/Tile.js\").default<import(\"../../source/Tile.js\").default>|import(\"../../layer/VectorTile.js\").default]\r\n * @extends {CanvasLayerRenderer<LayerType>}\r\n */\r\nclass CanvasTileLayerRenderer extends CanvasLayerRenderer {\r\n  /**\r\n   * @param {LayerType} tileLayer Tile layer.\r\n   * @param {Options} [options] Options.\r\n   */\r\n  constructor(tileLayer, options) {\r\n    super(tileLayer);\r\n\r\n    options = options || {};\r\n\r\n    /**\r\n     * Rendered extent has changed since the previous `renderFrame()` call\r\n     * @type {boolean}\r\n     */\r\n    this.extentChanged = true;\r\n\r\n    /**\r\n     * The last call to `renderFrame` was completed with all tiles loaded\r\n     * @type {boolean}\r\n     */\r\n    this.renderComplete = false;\r\n\r\n    /**\r\n     * @private\r\n     * @type {?import(\"../../extent.js\").Extent}\r\n     */\r\n    this.renderedExtent_ = null;\r\n\r\n    /**\r\n     * @protected\r\n     * @type {number}\r\n     */\r\n    this.renderedPixelRatio;\r\n\r\n    /**\r\n     * @protected\r\n     * @type {import(\"../../proj/Projection.js\").default|null}\r\n     */\r\n    this.renderedProjection = null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.renderedRevision_;\r\n\r\n    /**\r\n     * @protected\r\n     * @type {!Array<import(\"../../Tile.js\").default>}\r\n     */\r\n    this.renderedTiles = [];\r\n\r\n    /**\r\n     * @private\r\n     * @type {string}\r\n     */\r\n    this.renderedSourceKey_;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.renderedSourceRevision_;\r\n\r\n    /**\r\n     * @protected\r\n     * @type {import(\"../../extent.js\").Extent}\r\n     */\r\n    this.tempExtent = createEmpty();\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"../../TileRange.js\").default}\r\n     */\r\n    this.tempTileRange_ = new TileRange(0, 0, 0, 0);\r\n\r\n    /**\r\n     * @type {import(\"../../tilecoord.js\").TileCoord}\r\n     * @private\r\n     */\r\n    this.tempTileCoord_ = createTileCoord(0, 0, 0);\r\n\r\n    const cacheSize = options.cacheSize !== undefined ? options.cacheSize : 512;\r\n\r\n    /**\r\n     * @type {import(\"../../structs/LRUCache.js\").default<import(\"../../Tile.js\").default>}\r\n     * @private\r\n     */\r\n    this.tileCache_ = new LRUCache(cacheSize);\r\n\r\n    this.maxStaleKeys = cacheSize * 0.5;\r\n  }\r\n\r\n  /**\r\n   * @return {LRUCache} Tile cache.\r\n   */\r\n  getTileCache() {\r\n    return this.tileCache_;\r\n  }\r\n\r\n  /**\r\n   * Get a tile from the cache or create one if needed.\r\n   *\r\n   * @param {number} z Tile coordinate z.\r\n   * @param {number} x Tile coordinate x.\r\n   * @param {number} y Tile coordinate y.\r\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\r\n   * @return {import(\"../../Tile.js\").default|null} Tile (or null if outside source extent).\r\n   * @protected\r\n   */\r\n  getOrCreateTile(z, x, y, frameState) {\r\n    const tileCache = this.tileCache_;\r\n    const tileLayer = this.getLayer();\r\n    const tileSource = tileLayer.getSource();\r\n    const cacheKey = getCacheKey(tileSource.getKey(), z, x, y);\r\n\r\n    /** @type {import(\"../../Tile.js\").default} */\r\n    let tile;\r\n\r\n    if (tileCache.containsKey(cacheKey)) {\r\n      tile = tileCache.get(cacheKey);\r\n    } else {\r\n      tile = tileSource.getTile(\r\n        z,\r\n        x,\r\n        y,\r\n        frameState.pixelRatio,\r\n        frameState.viewState.projection,\r\n      );\r\n      if (!tile) {\r\n        return null;\r\n      }\r\n      tileCache.set(cacheKey, tile);\r\n    }\r\n    return tile;\r\n  }\r\n\r\n  /**\r\n   * @param {number} z Tile coordinate z.\r\n   * @param {number} x Tile coordinate x.\r\n   * @param {number} y Tile coordinate y.\r\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\r\n   * @return {import(\"../../Tile.js\").default|null} Tile (or null if outside source extent).\r\n   * @protected\r\n   */\r\n  getTile(z, x, y, frameState) {\r\n    const tile = this.getOrCreateTile(z, x, y, frameState);\r\n    if (!tile) {\r\n      return null;\r\n    }\r\n    return tile;\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../../pixel.js\").Pixel} pixel Pixel.\r\n   * @return {Uint8ClampedArray} Data at the pixel location.\r\n   * @override\r\n   */\r\n  getData(pixel) {\r\n    const frameState = this.frameState;\r\n    if (!frameState) {\r\n      return null;\r\n    }\r\n\r\n    const layer = this.getLayer();\r\n    const coordinate = applyTransform(\r\n      frameState.pixelToCoordinateTransform,\r\n      pixel.slice(),\r\n    );\r\n\r\n    const layerExtent = layer.getExtent();\r\n    if (layerExtent) {\r\n      if (!containsCoordinate(layerExtent, coordinate)) {\r\n        return null;\r\n      }\r\n    }\r\n\r\n    const viewState = frameState.viewState;\r\n    const source = layer.getRenderSource();\r\n    const tileGrid = source.getTileGridForProjection(viewState.projection);\r\n    const tilePixelRatio = source.getTilePixelRatio(frameState.pixelRatio);\r\n\r\n    for (\r\n      let z = tileGrid.getZForResolution(viewState.resolution);\r\n      z >= tileGrid.getMinZoom();\r\n      --z\r\n    ) {\r\n      const tileCoord = tileGrid.getTileCoordForCoordAndZ(coordinate, z);\r\n      const tile = this.getTile(z, tileCoord[1], tileCoord[2], frameState);\r\n      if (!tile || tile.getState() !== TileState.LOADED) {\r\n        continue;\r\n      }\r\n\r\n      const tileOrigin = tileGrid.getOrigin(z);\r\n      const tileSize = toSize(tileGrid.getTileSize(z));\r\n      const tileResolution = tileGrid.getResolution(z);\r\n\r\n      /**\r\n       * @type {import('../../DataTile.js').ImageLike}\r\n       */\r\n      let image;\r\n      if (tile instanceof ImageTile || tile instanceof ReprojTile) {\r\n        image = tile.getImage();\r\n      } else if (tile instanceof DataTile) {\r\n        image = asImageLike(tile.getData());\r\n        if (!image) {\r\n          continue;\r\n        }\r\n      } else {\r\n        continue;\r\n      }\r\n\r\n      const col = Math.floor(\r\n        tilePixelRatio *\r\n          ((coordinate[0] - tileOrigin[0]) / tileResolution -\r\n            tileCoord[1] * tileSize[0]),\r\n      );\r\n\r\n      const row = Math.floor(\r\n        tilePixelRatio *\r\n          ((tileOrigin[1] - coordinate[1]) / tileResolution -\r\n            tileCoord[2] * tileSize[1]),\r\n      );\r\n\r\n      const gutter = Math.round(\r\n        tilePixelRatio * source.getGutterForProjection(viewState.projection),\r\n      );\r\n\r\n      return this.getImageData(image, col + gutter, row + gutter);\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * Determine whether render should be called.\r\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\r\n   * @return {boolean} Layer is ready to be rendered.\r\n   * @override\r\n   */\r\n  prepareFrame(frameState) {\r\n    if (!this.renderedProjection) {\r\n      this.renderedProjection = frameState.viewState.projection;\r\n    } else if (frameState.viewState.projection !== this.renderedProjection) {\r\n      this.tileCache_.clear();\r\n      this.renderedProjection = frameState.viewState.projection;\r\n    }\r\n\r\n    const source = this.getLayer().getSource();\r\n    if (!source) {\r\n      return false;\r\n    }\r\n    const sourceRevision = source.getRevision();\r\n    if (!this.renderedRevision_) {\r\n      this.renderedRevision_ = sourceRevision;\r\n    } else if (this.renderedRevision_ !== sourceRevision) {\r\n      this.renderedRevision_ = sourceRevision;\r\n      if (this.renderedSourceKey_ === source.getKey()) {\r\n        this.tileCache_.clear();\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\r\n   * @param {import(\"../../extent.js\").Extent} extent The extent to be rendered.\r\n   * @param {number} initialZ The zoom level.\r\n   * @param {TileLookup} tilesByZ Lookup of tiles by zoom level.\r\n   * @param {number} preload Number of additional levels to load.\r\n   */\r\n  enqueueTiles(frameState, extent, initialZ, tilesByZ, preload) {\r\n    const viewState = frameState.viewState;\r\n    const tileLayer = this.getLayer();\r\n    const tileSource = tileLayer.getRenderSource();\r\n    const tileGrid = tileSource.getTileGridForProjection(viewState.projection);\r\n\r\n    const tileSourceKey = getUid(tileSource);\r\n    if (!(tileSourceKey in frameState.wantedTiles)) {\r\n      frameState.wantedTiles[tileSourceKey] = {};\r\n    }\r\n\r\n    const wantedTiles = frameState.wantedTiles[tileSourceKey];\r\n\r\n    const map = tileLayer.getMapInternal();\r\n    const minZ = Math.max(\r\n      initialZ - preload,\r\n      tileGrid.getMinZoom(),\r\n      tileGrid.getZForResolution(\r\n        Math.min(\r\n          tileLayer.getMaxResolution(),\r\n          map\r\n            ? map\r\n                .getView()\r\n                .getResolutionForZoom(Math.max(tileLayer.getMinZoom(), 0))\r\n            : tileGrid.getResolution(0),\r\n        ),\r\n        tileSource.zDirection,\r\n      ),\r\n    );\r\n    const rotation = viewState.rotation;\r\n    const viewport = rotation\r\n      ? getRotatedViewport(\r\n          viewState.center,\r\n          viewState.resolution,\r\n          rotation,\r\n          frameState.size,\r\n        )\r\n      : undefined;\r\n    for (let z = initialZ; z >= minZ; --z) {\r\n      const tileRange = tileGrid.getTileRangeForExtentAndZ(\r\n        extent,\r\n        z,\r\n        this.tempTileRange_,\r\n      );\r\n\r\n      const tileResolution = tileGrid.getResolution(z);\r\n\r\n      for (let x = tileRange.minX; x <= tileRange.maxX; ++x) {\r\n        for (let y = tileRange.minY; y <= tileRange.maxY; ++y) {\r\n          if (\r\n            rotation &&\r\n            !tileGrid.tileCoordIntersectsViewport([z, x, y], viewport)\r\n          ) {\r\n            continue;\r\n          }\r\n          const tile = this.getTile(z, x, y, frameState);\r\n          if (!tile) {\r\n            continue;\r\n          }\r\n          const added = addTileToLookup(tilesByZ, tile, z);\r\n          if (!added) {\r\n            continue;\r\n          }\r\n\r\n          const tileQueueKey = tile.getKey();\r\n          wantedTiles[tileQueueKey] = true;\r\n\r\n          if (tile.getState() === TileState.IDLE) {\r\n            if (!frameState.tileQueue.isKeyQueued(tileQueueKey)) {\r\n              const tileCoord = createTileCoord(z, x, y, this.tempTileCoord_);\r\n              frameState.tileQueue.enqueue([\r\n                tile,\r\n                tileSourceKey,\r\n                tileGrid.getTileCoordCenter(tileCoord),\r\n                tileResolution,\r\n              ]);\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Look for tiles covering the provided tile coordinate at an alternate\r\n   * zoom level.  Loaded tiles will be added to the provided tile texture lookup.\r\n   * @param {import(\"../../tilecoord.js\").TileCoord} tileCoord The target tile coordinate.\r\n   * @param {TileLookup} tilesByZ Lookup of tiles by zoom level.\r\n   * @return {boolean} The tile coordinate is covered by loaded tiles at the alternate zoom level.\r\n   * @private\r\n   */\r\n  findStaleTile_(tileCoord, tilesByZ) {\r\n    const tileCache = this.tileCache_;\r\n    const z = tileCoord[0];\r\n    const x = tileCoord[1];\r\n    const y = tileCoord[2];\r\n    const staleKeys = this.getStaleKeys();\r\n    for (let i = 0; i < staleKeys.length; ++i) {\r\n      const cacheKey = getCacheKey(staleKeys[i], z, x, y);\r\n      if (tileCache.containsKey(cacheKey)) {\r\n        const tile = tileCache.peek(cacheKey);\r\n        if (tile.getState() === TileState.LOADED) {\r\n          tile.endTransition(getUid(this));\r\n          addTileToLookup(tilesByZ, tile, z);\r\n          return true;\r\n        }\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Look for tiles covering the provided tile coordinate at an alternate\r\n   * zoom level.  Loaded tiles will be added to the provided tile texture lookup.\r\n   * @param {import(\"../../tilegrid/TileGrid.js\").default} tileGrid The tile grid.\r\n   * @param {import(\"../../tilecoord.js\").TileCoord} tileCoord The target tile coordinate.\r\n   * @param {number} altZ The alternate zoom level.\r\n   * @param {TileLookup} tilesByZ Lookup of tiles by zoom level.\r\n   * @return {boolean} The tile coordinate is covered by loaded tiles at the alternate zoom level.\r\n   * @private\r\n   */\r\n  findAltTiles_(tileGrid, tileCoord, altZ, tilesByZ) {\r\n    const tileRange = tileGrid.getTileRangeForTileCoordAndZ(\r\n      tileCoord,\r\n      altZ,\r\n      this.tempTileRange_,\r\n    );\r\n\r\n    if (!tileRange) {\r\n      return false;\r\n    }\r\n\r\n    let covered = true;\r\n    const tileCache = this.tileCache_;\r\n    const source = this.getLayer().getRenderSource();\r\n    const sourceKey = source.getKey();\r\n    for (let x = tileRange.minX; x <= tileRange.maxX; ++x) {\r\n      for (let y = tileRange.minY; y <= tileRange.maxY; ++y) {\r\n        const cacheKey = getCacheKey(sourceKey, altZ, x, y);\r\n        let loaded = false;\r\n        if (tileCache.containsKey(cacheKey)) {\r\n          const tile = tileCache.peek(cacheKey);\r\n          if (tile.getState() === TileState.LOADED) {\r\n            addTileToLookup(tilesByZ, tile, altZ);\r\n            loaded = true;\r\n          }\r\n        }\r\n        if (!loaded) {\r\n          covered = false;\r\n        }\r\n      }\r\n    }\r\n    return covered;\r\n  }\r\n\r\n  /**\r\n   * Render the layer.\r\n   *\r\n   * The frame rendering logic has three parts:\r\n   *\r\n   *  1. Enqueue tiles\r\n   *  2. Find alt tiles for those that are not yet loaded\r\n   *  3. Render loaded tiles\r\n   *\r\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\r\n   * @param {HTMLElement} target Target that may be used to render content to.\r\n   * @return {HTMLElement} The rendered element.\r\n   * @override\r\n   */\r\n  renderFrame(frameState, target) {\r\n    this.renderComplete = true;\r\n\r\n    /**\r\n     * TODO:\r\n     *  maybe skip transition when not fully opaque\r\n     *  decide if this.renderComplete is useful\r\n     */\r\n\r\n    const layerState = frameState.layerStatesArray[frameState.layerIndex];\r\n    const viewState = frameState.viewState;\r\n    const projection = viewState.projection;\r\n    const viewResolution = viewState.resolution;\r\n    const viewCenter = viewState.center;\r\n    const pixelRatio = frameState.pixelRatio;\r\n\r\n    const tileLayer = this.getLayer();\r\n    const tileSource = tileLayer.getSource();\r\n    const tileGrid = tileSource.getTileGridForProjection(projection);\r\n    const z = tileGrid.getZForResolution(viewResolution, tileSource.zDirection);\r\n    const tileResolution = tileGrid.getResolution(z);\r\n\r\n    const sourceKey = tileSource.getKey();\r\n    if (!this.renderedSourceKey_) {\r\n      this.renderedSourceKey_ = sourceKey;\r\n    } else if (this.renderedSourceKey_ !== sourceKey) {\r\n      this.prependStaleKey(this.renderedSourceKey_);\r\n      this.renderedSourceKey_ = sourceKey;\r\n    }\r\n\r\n    let frameExtent = frameState.extent;\r\n    const tilePixelRatio = tileSource.getTilePixelRatio(pixelRatio);\r\n\r\n    this.prepareContainer(frameState, target);\r\n\r\n    // desired dimensions of the canvas in pixels\r\n    const width = this.context.canvas.width;\r\n    const height = this.context.canvas.height;\r\n\r\n    const layerExtent =\r\n      layerState.extent && fromUserExtent(layerState.extent, projection);\r\n    if (layerExtent) {\r\n      frameExtent = getIntersection(\r\n        frameExtent,\r\n        fromUserExtent(layerState.extent, projection),\r\n      );\r\n    }\r\n\r\n    const dx = (tileResolution * width) / 2 / tilePixelRatio;\r\n    const dy = (tileResolution * height) / 2 / tilePixelRatio;\r\n    const canvasExtent = [\r\n      viewCenter[0] - dx,\r\n      viewCenter[1] - dy,\r\n      viewCenter[0] + dx,\r\n      viewCenter[1] + dy,\r\n    ];\r\n\r\n    /**\r\n     * @type {TileLookup}\r\n     */\r\n    const tilesByZ = {};\r\n\r\n    this.renderedTiles.length = 0;\r\n\r\n    /**\r\n     * Part 1: Enqueue tiles\r\n     */\r\n\r\n    const preload = tileLayer.getPreload();\r\n    if (frameState.nextExtent) {\r\n      const targetZ = tileGrid.getZForResolution(\r\n        viewState.nextResolution,\r\n        tileSource.zDirection,\r\n      );\r\n      const nextExtent = getRenderExtent(frameState, frameState.nextExtent);\r\n      this.enqueueTiles(frameState, nextExtent, targetZ, tilesByZ, preload);\r\n    }\r\n\r\n    const renderExtent = getRenderExtent(frameState, frameExtent);\r\n    this.enqueueTiles(frameState, renderExtent, z, tilesByZ, 0);\r\n    if (preload > 0) {\r\n      setTimeout(() => {\r\n        this.enqueueTiles(\r\n          frameState,\r\n          renderExtent,\r\n          z - 1,\r\n          tilesByZ,\r\n          preload - 1,\r\n        );\r\n      }, 0);\r\n    }\r\n\r\n    if (!(z in tilesByZ)) {\r\n      return this.container;\r\n    }\r\n\r\n    /**\r\n     * Part 2: Find alt tiles for those that are not yet loaded\r\n     */\r\n\r\n    const uid = getUid(this);\r\n    const time = frameState.time;\r\n\r\n    // look for cached tiles to use if a target tile is not ready\r\n    for (const tile of tilesByZ[z]) {\r\n      const tileState = tile.getState();\r\n      if (tileState === TileState.EMPTY) {\r\n        continue;\r\n      }\r\n      const tileCoord = tile.tileCoord;\r\n\r\n      if (tileState === TileState.LOADED) {\r\n        const alpha = tile.getAlpha(uid, time);\r\n        if (alpha === 1) {\r\n          // no need to look for alt tiles\r\n          tile.endTransition(uid);\r\n          continue;\r\n        }\r\n      }\r\n      if (tileState !== TileState.ERROR) {\r\n        this.renderComplete = false;\r\n      }\r\n\r\n      const hasStaleTile = this.findStaleTile_(tileCoord, tilesByZ);\r\n      if (hasStaleTile) {\r\n        // use the stale tile before the new tile's transition has completed\r\n        removeTileFromLookup(tilesByZ, tile, z);\r\n        frameState.animate = true;\r\n        continue;\r\n      }\r\n\r\n      // first look for child tiles (at z + 1)\r\n      const coveredByChildren = this.findAltTiles_(\r\n        tileGrid,\r\n        tileCoord,\r\n        z + 1,\r\n        tilesByZ,\r\n      );\r\n\r\n      if (coveredByChildren) {\r\n        continue;\r\n      }\r\n\r\n      // next look for parent tiles\r\n      const minZoom = tileGrid.getMinZoom();\r\n      for (let parentZ = z - 1; parentZ >= minZoom; --parentZ) {\r\n        const coveredByParent = this.findAltTiles_(\r\n          tileGrid,\r\n          tileCoord,\r\n          parentZ,\r\n          tilesByZ,\r\n        );\r\n\r\n        if (coveredByParent) {\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Part 3: Render loaded tiles\r\n     */\r\n\r\n    const canvasScale =\r\n      ((tileResolution / viewResolution) * pixelRatio) / tilePixelRatio;\r\n\r\n    const context = this.getRenderContext(frameState);\r\n\r\n    // set scale transform for calculating tile positions on the canvas\r\n    composeTransform(\r\n      this.tempTransform,\r\n      width / 2,\r\n      height / 2,\r\n      canvasScale,\r\n      canvasScale,\r\n      0,\r\n      -width / 2,\r\n      -height / 2,\r\n    );\r\n\r\n    if (layerState.extent) {\r\n      this.clipUnrotated(context, frameState, layerExtent);\r\n    }\r\n\r\n    if (!tileSource.getInterpolate()) {\r\n      context.imageSmoothingEnabled = false;\r\n    }\r\n\r\n    this.preRender(context, frameState);\r\n\r\n    /** @type {Array<number>} */\r\n    const zs = Object.keys(tilesByZ).map(Number);\r\n    zs.sort(ascending);\r\n\r\n    let currentClip;\r\n    const clips = [];\r\n    const clipZs = [];\r\n    for (let i = zs.length - 1; i >= 0; --i) {\r\n      const currentZ = zs[i];\r\n      const currentTilePixelSize = tileSource.getTilePixelSize(\r\n        currentZ,\r\n        pixelRatio,\r\n        projection,\r\n      );\r\n      const currentResolution = tileGrid.getResolution(currentZ);\r\n      const currentScale = currentResolution / tileResolution;\r\n      const dx = currentTilePixelSize[0] * currentScale * canvasScale;\r\n      const dy = currentTilePixelSize[1] * currentScale * canvasScale;\r\n      const originTileCoord = tileGrid.getTileCoordForCoordAndZ(\r\n        getTopLeft(canvasExtent),\r\n        currentZ,\r\n      );\r\n      const originTileExtent = tileGrid.getTileCoordExtent(originTileCoord);\r\n      const origin = applyTransform(this.tempTransform, [\r\n        (tilePixelRatio * (originTileExtent[0] - canvasExtent[0])) /\r\n          tileResolution,\r\n        (tilePixelRatio * (canvasExtent[3] - originTileExtent[3])) /\r\n          tileResolution,\r\n      ]);\r\n      const tileGutter =\r\n        tilePixelRatio * tileSource.getGutterForProjection(projection);\r\n      for (const tile of tilesByZ[currentZ]) {\r\n        if (tile.getState() !== TileState.LOADED) {\r\n          continue;\r\n        }\r\n        const tileCoord = tile.tileCoord;\r\n\r\n        // Calculate integer positions and sizes so that tiles align\r\n        const xIndex = originTileCoord[1] - tileCoord[1];\r\n        const nextX = Math.round(origin[0] - (xIndex - 1) * dx);\r\n        const yIndex = originTileCoord[2] - tileCoord[2];\r\n        const nextY = Math.round(origin[1] - (yIndex - 1) * dy);\r\n        const x = Math.round(origin[0] - xIndex * dx);\r\n        const y = Math.round(origin[1] - yIndex * dy);\r\n        const w = nextX - x;\r\n        const h = nextY - y;\r\n        const transition = zs.length === 1;\r\n\r\n        let contextSaved = false;\r\n\r\n        // Clip mask for regions in this tile that already filled by a higher z tile\r\n        currentClip = [x, y, x + w, y, x + w, y + h, x, y + h];\r\n        for (let i = 0, ii = clips.length; i < ii; ++i) {\r\n          if (!transition && currentZ < clipZs[i]) {\r\n            const clip = clips[i];\r\n            if (\r\n              intersects(\r\n                [x, y, x + w, y + h],\r\n                [clip[0], clip[3], clip[4], clip[7]],\r\n              )\r\n            ) {\r\n              if (!contextSaved) {\r\n                context.save();\r\n                contextSaved = true;\r\n              }\r\n              context.beginPath();\r\n              // counter-clockwise (outer ring) for current tile\r\n              context.moveTo(currentClip[0], currentClip[1]);\r\n              context.lineTo(currentClip[2], currentClip[3]);\r\n              context.lineTo(currentClip[4], currentClip[5]);\r\n              context.lineTo(currentClip[6], currentClip[7]);\r\n              // clockwise (inner ring) for higher z tile\r\n              context.moveTo(clip[6], clip[7]);\r\n              context.lineTo(clip[4], clip[5]);\r\n              context.lineTo(clip[2], clip[3]);\r\n              context.lineTo(clip[0], clip[1]);\r\n              context.clip();\r\n            }\r\n          }\r\n        }\r\n        clips.push(currentClip);\r\n        clipZs.push(currentZ);\r\n\r\n        this.drawTile(tile, frameState, x, y, w, h, tileGutter, transition);\r\n        if (contextSaved) {\r\n          context.restore();\r\n        }\r\n        this.renderedTiles.unshift(tile);\r\n\r\n        // TODO: decide if this is necessary\r\n        this.updateUsedTiles(frameState.usedTiles, tileSource, tile);\r\n      }\r\n    }\r\n\r\n    this.renderedResolution = tileResolution;\r\n    this.extentChanged =\r\n      !this.renderedExtent_ || !equals(this.renderedExtent_, canvasExtent);\r\n    this.renderedExtent_ = canvasExtent;\r\n    this.renderedPixelRatio = pixelRatio;\r\n\r\n    this.postRender(this.context, frameState);\r\n\r\n    if (layerState.extent) {\r\n      context.restore();\r\n    }\r\n    context.imageSmoothingEnabled = true;\r\n\r\n    if (this.renderComplete) {\r\n      /**\r\n       * @param {import(\"../../Map.js\").default} map Map.\r\n       * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\r\n       */\r\n      const postRenderFunction = (map, frameState) => {\r\n        const tileSourceKey = getUid(tileSource);\r\n        const wantedTiles = frameState.wantedTiles[tileSourceKey];\r\n        const tilesCount = wantedTiles ? Object.keys(wantedTiles).length : 0;\r\n        this.updateCacheSize(tilesCount);\r\n        this.tileCache_.expireCache();\r\n      };\r\n\r\n      frameState.postRenderFunctions.push(postRenderFunction);\r\n    }\r\n\r\n    return this.container;\r\n  }\r\n\r\n  /**\r\n   * Increases the cache size if needed\r\n   * @param {number} tileCount Minimum number of tiles needed.\r\n   */\r\n  updateCacheSize(tileCount) {\r\n    this.tileCache_.highWaterMark = Math.max(\r\n      this.tileCache_.highWaterMark,\r\n      tileCount * 2,\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../../Tile.js\").default} tile Tile.\r\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\r\n   * @param {number} x Left of the tile.\r\n   * @param {number} y Top of the tile.\r\n   * @param {number} w Width of the tile.\r\n   * @param {number} h Height of the tile.\r\n   * @param {number} gutter Tile gutter.\r\n   * @param {boolean} transition Apply an alpha transition.\r\n   * @protected\r\n   */\r\n  drawTile(tile, frameState, x, y, w, h, gutter, transition) {\r\n    let image;\r\n    if (tile instanceof DataTile) {\r\n      image = asImageLike(tile.getData());\r\n      if (!image) {\r\n        throw new Error('Rendering array data is not yet supported');\r\n      }\r\n    } else {\r\n      image = this.getTileImage(\r\n        /** @type {import(\"../../ImageTile.js\").default} */ (tile),\r\n      );\r\n    }\r\n    if (!image) {\r\n      return;\r\n    }\r\n    const context = this.getRenderContext(frameState);\r\n    const uid = getUid(this);\r\n    const layerState = frameState.layerStatesArray[frameState.layerIndex];\r\n    const alpha =\r\n      layerState.opacity *\r\n      (transition ? tile.getAlpha(uid, frameState.time) : 1);\r\n    const alphaChanged = alpha !== context.globalAlpha;\r\n    if (alphaChanged) {\r\n      context.save();\r\n      context.globalAlpha = alpha;\r\n    }\r\n    context.drawImage(\r\n      image,\r\n      gutter,\r\n      gutter,\r\n      image.width - 2 * gutter,\r\n      image.height - 2 * gutter,\r\n      x,\r\n      y,\r\n      w,\r\n      h,\r\n    );\r\n\r\n    if (alphaChanged) {\r\n      context.restore();\r\n    }\r\n    if (alpha !== layerState.opacity) {\r\n      frameState.animate = true;\r\n    } else if (transition) {\r\n      tile.endTransition(uid);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @return {HTMLCanvasElement} Image\r\n   */\r\n  getImage() {\r\n    const context = this.context;\r\n    return context ? context.canvas : null;\r\n  }\r\n\r\n  /**\r\n   * Get the image from a tile.\r\n   * @param {import(\"../../ImageTile.js\").default} tile Tile.\r\n   * @return {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement} Image.\r\n   * @protected\r\n   */\r\n  getTileImage(tile) {\r\n    return tile.getImage();\r\n  }\r\n\r\n  /**\r\n   * @param {!Object<string, !Object<string, boolean>>} usedTiles Used tiles.\r\n   * @param {import(\"../../source/Tile.js\").default} tileSource Tile source.\r\n   * @param {import('../../Tile.js').default} tile Tile.\r\n   * @protected\r\n   */\r\n  updateUsedTiles(usedTiles, tileSource, tile) {\r\n    // FIXME should we use tilesToDrawByZ instead?\r\n    const tileSourceKey = getUid(tileSource);\r\n    if (!(tileSourceKey in usedTiles)) {\r\n      usedTiles[tileSourceKey] = {};\r\n    }\r\n    usedTiles[tileSourceKey][tile.getKey()] = true;\r\n  }\r\n}\r\n\r\nexport default CanvasTileLayerRenderer;\r\n","/**\r\n * @module ol/DataTile\r\n */\r\nimport Tile from './Tile.js';\r\nimport TileState from './TileState.js';\r\nimport {createCanvasContext2D} from './dom.js';\r\n\r\n/**\r\n * @typedef {HTMLImageElement|HTMLCanvasElement|HTMLVideoElement|ImageBitmap} ImageLike\r\n */\r\n\r\n/**\r\n * @typedef {Uint8Array|Uint8ClampedArray|Float32Array|DataView} ArrayLike\r\n */\r\n\r\n/**\r\n * Data that can be used with a DataTile.\r\n * @typedef {ArrayLike|ImageLike} Data\r\n */\r\n\r\n/**\r\n * @param {Data} data Tile data.\r\n * @return {ImageLike|null} The image-like data.\r\n */\r\nexport function asImageLike(data) {\r\n  return data instanceof Image ||\r\n    data instanceof HTMLCanvasElement ||\r\n    data instanceof HTMLVideoElement ||\r\n    data instanceof ImageBitmap\r\n    ? data\r\n    : null;\r\n}\r\n\r\n/**\r\n * @param {Data} data Tile data.\r\n * @return {ArrayLike|null} The array-like data.\r\n */\r\nexport function asArrayLike(data) {\r\n  return data instanceof Uint8Array ||\r\n    data instanceof Uint8ClampedArray ||\r\n    data instanceof Float32Array ||\r\n    data instanceof DataView\r\n    ? data\r\n    : null;\r\n}\r\n\r\n/**\r\n * This is set as the cancellation reason when a tile is disposed.\r\n */\r\nexport const disposedError = new Error('disposed');\r\n\r\n/**\r\n * @type {CanvasRenderingContext2D|null}\r\n */\r\nlet sharedContext = null;\r\n\r\n/**\r\n * @param {ImageLike} image The image.\r\n * @return {Uint8ClampedArray} The data.\r\n */\r\nexport function toArray(image) {\r\n  if (!sharedContext) {\r\n    sharedContext = createCanvasContext2D(\r\n      image.width,\r\n      image.height,\r\n      undefined,\r\n      {willReadFrequently: true},\r\n    );\r\n  }\r\n  const canvas = sharedContext.canvas;\r\n  const width = image.width;\r\n  if (canvas.width !== width) {\r\n    canvas.width = width;\r\n  }\r\n  const height = image.height;\r\n  if (canvas.height !== height) {\r\n    canvas.height = height;\r\n  }\r\n  sharedContext.clearRect(0, 0, width, height);\r\n  sharedContext.drawImage(image, 0, 0);\r\n  return sharedContext.getImageData(0, 0, width, height).data;\r\n}\r\n\r\n/**\r\n * @type {import('./size.js').Size}\r\n */\r\nconst defaultSize = [256, 256];\r\n\r\n/**\r\n * @typedef {Object} Options\r\n * @property {import(\"./tilecoord.js\").TileCoord} tileCoord Tile coordinate.\r\n * @property {function(): Promise<Data>} loader Data loader.  For loaders that generate images,\r\n * the promise should not resolve until the image is loaded.\r\n * @property {number} [transition=250] A duration for tile opacity\r\n * transitions in milliseconds. A duration of 0 disables the opacity transition.\r\n * @property {boolean} [interpolate=false] Use interpolated values when resampling.  By default,\r\n * the nearest neighbor is used when resampling.\r\n * @property {import('./size.js').Size} [size=[256, 256]] Tile size.\r\n * @property {AbortController} [controller] An abort controller.\r\n * @api\r\n */\r\n\r\nclass DataTile extends Tile {\r\n  /**\r\n   * @param {Options} options Tile options.\r\n   */\r\n  constructor(options) {\r\n    const state = TileState.IDLE;\r\n\r\n    super(options.tileCoord, state, {\r\n      transition: options.transition,\r\n      interpolate: options.interpolate,\r\n    });\r\n\r\n    /**\r\n     * @type {function(): Promise<Data>}\r\n     * @private\r\n     */\r\n    this.loader_ = options.loader;\r\n\r\n    /**\r\n     * @type {Data}\r\n     * @private\r\n     */\r\n    this.data_ = null;\r\n\r\n    /**\r\n     * @type {Error}\r\n     * @private\r\n     */\r\n    this.error_ = null;\r\n\r\n    /**\r\n     * @type {import('./size.js').Size|null}\r\n     * @private\r\n     */\r\n    this.size_ = options.size || null;\r\n\r\n    /**\r\n     * @type {AbortController|null}\r\n     * @private\r\n     */\r\n    this.controller_ = options.controller || null;\r\n  }\r\n\r\n  /**\r\n   * Get the tile size.\r\n   * @return {import('./size.js').Size} Tile size.\r\n   */\r\n  getSize() {\r\n    if (this.size_) {\r\n      return this.size_;\r\n    }\r\n    const imageData = asImageLike(this.data_);\r\n    if (imageData) {\r\n      return [imageData.width, imageData.height];\r\n    }\r\n    return defaultSize;\r\n  }\r\n\r\n  /**\r\n   * Get the data for the tile.\r\n   * @return {Data} Tile data.\r\n   * @api\r\n   */\r\n  getData() {\r\n    return this.data_;\r\n  }\r\n\r\n  /**\r\n   * Get any loading error.\r\n   * @return {Error} Loading error.\r\n   * @api\r\n   */\r\n  getError() {\r\n    return this.error_;\r\n  }\r\n\r\n  /**\r\n   * Load the tile data.\r\n   * @api\r\n   * @override\r\n   */\r\n  load() {\r\n    if (this.state !== TileState.IDLE && this.state !== TileState.ERROR) {\r\n      return;\r\n    }\r\n    this.state = TileState.LOADING;\r\n    this.changed();\r\n\r\n    const self = this;\r\n    this.loader_()\r\n      .then(function (data) {\r\n        self.data_ = data;\r\n        self.state = TileState.LOADED;\r\n        self.changed();\r\n      })\r\n      .catch(function (error) {\r\n        self.error_ = error;\r\n        self.state = TileState.ERROR;\r\n        self.changed();\r\n      });\r\n  }\r\n\r\n  /**\r\n   * Clean up.\r\n   * @override\r\n   */\r\n  disposeInternal() {\r\n    if (this.controller_) {\r\n      this.controller_.abort(disposedError);\r\n      this.controller_ = null;\r\n    }\r\n    super.disposeInternal();\r\n  }\r\n}\r\n\r\nexport default DataTile;\r\n","/**\r\n * @module ol/structs/LRUCache\r\n */\r\n\r\nimport Disposable from '../Disposable.js';\r\nimport {assert} from '../asserts.js';\r\n\r\n/**\r\n * @typedef {Object} Entry\r\n * @property {string} key_ Key.\r\n * @property {Entry|null} newer Newer.\r\n * @property {Entry|null} older Older.\r\n * @property {*} value_ Value.\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * Implements a Least-Recently-Used cache where the keys do not conflict with\r\n * Object's properties (e.g. 'hasOwnProperty' is not allowed as a key). Expiring\r\n * items from the cache is the responsibility of the user.\r\n *\r\n * @fires import(\"../events/Event.js\").default\r\n * @template T\r\n */\r\nclass LRUCache {\r\n  /**\r\n   * @param {number} [highWaterMark] High water mark.\r\n   */\r\n  constructor(highWaterMark) {\r\n    /**\r\n     * Desired max cache size after expireCache(). If set to 0, no cache entries\r\n     * will be pruned at all.\r\n     * @type {number}\r\n     */\r\n    this.highWaterMark = highWaterMark !== undefined ? highWaterMark : 2048;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.count_ = 0;\r\n\r\n    /**\r\n     * @private\r\n     * @type {!Object<string, Entry>}\r\n     */\r\n    this.entries_ = {};\r\n\r\n    /**\r\n     * @private\r\n     * @type {?Entry}\r\n     */\r\n    this.oldest_ = null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {?Entry}\r\n     */\r\n    this.newest_ = null;\r\n  }\r\n\r\n  deleteOldest() {\r\n    const entry = this.pop();\r\n    if (entry instanceof Disposable) {\r\n      entry.dispose();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @return {boolean} Can expire cache.\r\n   */\r\n  canExpireCache() {\r\n    return this.highWaterMark > 0 && this.getCount() > this.highWaterMark;\r\n  }\r\n\r\n  /**\r\n   * Expire the cache. When the cache entry is a {@link module:ol/Disposable~Disposable},\r\n   * the entry will be disposed.\r\n   * @param {!Object<string, boolean>} [keep] Keys to keep. To be implemented by subclasses.\r\n   */\r\n  expireCache(keep) {\r\n    while (this.canExpireCache()) {\r\n      this.deleteOldest();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * FIXME empty description for jsdoc\r\n   */\r\n  clear() {\r\n    while (this.oldest_) {\r\n      this.deleteOldest();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {string} key Key.\r\n   * @return {boolean} Contains key.\r\n   */\r\n  containsKey(key) {\r\n    return this.entries_.hasOwnProperty(key);\r\n  }\r\n\r\n  /**\r\n   * @param {function(T, string, LRUCache<T>): ?} f The function\r\n   *     to call for every entry from the oldest to the newer. This function takes\r\n   *     3 arguments (the entry value, the entry key and the LRUCache object).\r\n   *     The return value is ignored.\r\n   */\r\n  forEach(f) {\r\n    let entry = this.oldest_;\r\n    while (entry) {\r\n      f(entry.value_, entry.key_, this);\r\n      entry = entry.newer;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {string} key Key.\r\n   * @param {*} [options] Options (reserved for subclasses).\r\n   * @return {T} Value.\r\n   */\r\n  get(key, options) {\r\n    const entry = this.entries_[key];\r\n    assert(\r\n      entry !== undefined,\r\n      'Tried to get a value for a key that does not exist in the cache',\r\n    );\r\n    if (entry === this.newest_) {\r\n      return entry.value_;\r\n    }\r\n    if (entry === this.oldest_) {\r\n      this.oldest_ = /** @type {Entry} */ (this.oldest_.newer);\r\n      this.oldest_.older = null;\r\n    } else {\r\n      entry.newer.older = entry.older;\r\n      entry.older.newer = entry.newer;\r\n    }\r\n    entry.newer = null;\r\n    entry.older = this.newest_;\r\n    this.newest_.newer = entry;\r\n    this.newest_ = entry;\r\n    return entry.value_;\r\n  }\r\n\r\n  /**\r\n   * Remove an entry from the cache.\r\n   * @param {string} key The entry key.\r\n   * @return {T} The removed entry.\r\n   */\r\n  remove(key) {\r\n    const entry = this.entries_[key];\r\n    assert(\r\n      entry !== undefined,\r\n      'Tried to get a value for a key that does not exist in the cache',\r\n    );\r\n    if (entry === this.newest_) {\r\n      this.newest_ = /** @type {Entry} */ (entry.older);\r\n      if (this.newest_) {\r\n        this.newest_.newer = null;\r\n      }\r\n    } else if (entry === this.oldest_) {\r\n      this.oldest_ = /** @type {Entry} */ (entry.newer);\r\n      if (this.oldest_) {\r\n        this.oldest_.older = null;\r\n      }\r\n    } else {\r\n      entry.newer.older = entry.older;\r\n      entry.older.newer = entry.newer;\r\n    }\r\n    delete this.entries_[key];\r\n    --this.count_;\r\n    return entry.value_;\r\n  }\r\n\r\n  /**\r\n   * @return {number} Count.\r\n   */\r\n  getCount() {\r\n    return this.count_;\r\n  }\r\n\r\n  /**\r\n   * @return {Array<string>} Keys.\r\n   */\r\n  getKeys() {\r\n    const keys = new Array(this.count_);\r\n    let i = 0;\r\n    let entry;\r\n    for (entry = this.newest_; entry; entry = entry.older) {\r\n      keys[i++] = entry.key_;\r\n    }\r\n    return keys;\r\n  }\r\n\r\n  /**\r\n   * @return {Array<T>} Values.\r\n   */\r\n  getValues() {\r\n    const values = new Array(this.count_);\r\n    let i = 0;\r\n    let entry;\r\n    for (entry = this.newest_; entry; entry = entry.older) {\r\n      values[i++] = entry.value_;\r\n    }\r\n    return values;\r\n  }\r\n\r\n  /**\r\n   * @return {T} Last value.\r\n   */\r\n  peekLast() {\r\n    return this.oldest_.value_;\r\n  }\r\n\r\n  /**\r\n   * @return {string} Last key.\r\n   */\r\n  peekLastKey() {\r\n    return this.oldest_.key_;\r\n  }\r\n\r\n  /**\r\n   * Get the key of the newest item in the cache.  Throws if the cache is empty.\r\n   * @return {string} The newest key.\r\n   */\r\n  peekFirstKey() {\r\n    return this.newest_.key_;\r\n  }\r\n\r\n  /**\r\n   * Return an entry without updating least recently used time.\r\n   * @param {string} key Key.\r\n   * @return {T|undefined} Value.\r\n   */\r\n  peek(key) {\r\n    return this.entries_[key]?.value_;\r\n  }\r\n\r\n  /**\r\n   * @return {T} value Value.\r\n   */\r\n  pop() {\r\n    const entry = this.oldest_;\r\n    delete this.entries_[entry.key_];\r\n    if (entry.newer) {\r\n      entry.newer.older = null;\r\n    }\r\n    this.oldest_ = /** @type {Entry} */ (entry.newer);\r\n    if (!this.oldest_) {\r\n      this.newest_ = null;\r\n    }\r\n    --this.count_;\r\n    return entry.value_;\r\n  }\r\n\r\n  /**\r\n   * @param {string} key Key.\r\n   * @param {T} value Value.\r\n   */\r\n  replace(key, value) {\r\n    this.get(key); // update `newest_`\r\n    this.entries_[key].value_ = value;\r\n  }\r\n\r\n  /**\r\n   * @param {string} key Key.\r\n   * @param {T} value Value.\r\n   */\r\n  set(key, value) {\r\n    assert(\r\n      !(key in this.entries_),\r\n      'Tried to set a value for a key that is used already',\r\n    );\r\n    const entry = {\r\n      key_: key,\r\n      newer: null,\r\n      older: this.newest_,\r\n      value_: value,\r\n    };\r\n    if (!this.newest_) {\r\n      this.oldest_ = entry;\r\n    } else {\r\n      this.newest_.newer = entry;\r\n    }\r\n    this.newest_ = entry;\r\n    this.entries_[key] = entry;\r\n    ++this.count_;\r\n  }\r\n\r\n  /**\r\n   * Set a maximum number of entries for the cache.\r\n   * @param {number} size Cache size.\r\n   * @api\r\n   */\r\n  setSize(size) {\r\n    this.highWaterMark = size;\r\n  }\r\n}\r\n\r\nexport default LRUCache;\r\n","/**\r\n * @module ol/layer/BaseTile\r\n */\r\nimport Layer from './Layer.js';\r\nimport TileProperty from './TileProperty.js';\r\n\r\n/***\r\n * @template Return\r\n * @typedef {import(\"../Observable\").OnSignature<import(\"../Observable\").EventTypes, import(\"../events/Event.js\").default, Return> &\r\n *   import(\"../Observable\").OnSignature<import(\"./Base\").BaseLayerObjectEventTypes|\r\n *     import(\"./Layer.js\").LayerEventType|'change:preload'|'change:useInterimTilesOnError', import(\"../Object\").ObjectEvent, Return> &\r\n *   import(\"../Observable\").OnSignature<import(\"../render/EventType\").LayerRenderEventTypes, import(\"../render/Event\").default, Return> &\r\n *   import(\"../Observable\").CombinedOnSignature<import(\"../Observable\").EventTypes|import(\"./Base\").BaseLayerObjectEventTypes|\r\n *   import(\"./Layer.js\").LayerEventType|'change:preload'|'change:useInterimTilesOnError'|import(\"../render/EventType\").LayerRenderEventTypes, Return>} BaseTileLayerOnSignature\r\n */\r\n\r\n/**\r\n * @template {import(\"../source/Tile.js\").default} TileSourceType\r\n * @typedef {Object} Options\r\n * @property {string} [className='ol-layer'] A CSS class name to set to the layer element.\r\n * @property {number} [opacity=1] Opacity (0, 1).\r\n * @property {boolean} [visible=true] Visibility.\r\n * @property {import(\"../extent.js\").Extent} [extent] The bounding extent for layer rendering.  The layer will not be\r\n * rendered outside of this extent.\r\n * @property {number} [zIndex] The z-index for layer rendering.  At rendering time, the layers\r\n * will be ordered, first by Z-index and then by position. When `undefined`, a `zIndex` of 0 is assumed\r\n * for layers that are added to the map's `layers` collection, or `Infinity` when the layer's `setMap()`\r\n * method was used.\r\n * @property {number} [minResolution] The minimum resolution (inclusive) at which this layer will be\r\n * visible.\r\n * @property {number} [maxResolution] The maximum resolution (exclusive) below which this layer will\r\n * be visible.\r\n * @property {number} [minZoom] The minimum view zoom level (exclusive) above which this layer will be\r\n * visible.\r\n * @property {number} [maxZoom] The maximum view zoom level (inclusive) at which this layer will\r\n * be visible.\r\n * @property {number} [preload=0] Preload. Load low-resolution tiles up to `preload` levels. `0`\r\n * means no preloading.\r\n * @property {TileSourceType} [source] Source for this layer.\r\n * @property {import(\"../Map.js\").default} [map] Sets the layer as overlay on a map. The map will not manage\r\n * this layer in its layers collection, and the layer will be rendered on top. This is useful for\r\n * temporary layers. The standard way to add a layer to a map and have it managed by the map is to\r\n * use {@link import(\"../Map.js\").default#addLayer map.addLayer()}.\r\n * @property {import(\"./Base.js\").BackgroundColor} [background] Background color for the layer. If not specified, no background\r\n * will be rendered.\r\n * @property {boolean} [useInterimTilesOnError=true] Deprecated.  Use interim tiles on error.\r\n * @property {Object<string, *>} [properties] Arbitrary observable properties. Can be accessed with `#get()` and `#set()`.\r\n * @property {number} [cacheSize=512] The internal tile cache size.  This needs to be large enough to render\r\n * two zoom levels worth of tiles.\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * For layer sources that provide pre-rendered, tiled images in grids that are\r\n * organized by zoom levels for specific resolutions.\r\n * Note that any property set in the options is set as a {@link module:ol/Object~BaseObject}\r\n * property on the layer object; for example, setting `title: 'My Title'` in the\r\n * options means that `title` is observable, and has get/set accessors.\r\n *\r\n * @template {import(\"../source/Tile.js\").default} TileSourceType\r\n * @template {import(\"../renderer/Layer.js\").default} RendererType\r\n * @extends {Layer<TileSourceType, RendererType>}\r\n * @api\r\n */\r\nclass BaseTileLayer extends Layer {\r\n  /**\r\n   * @param {Options<TileSourceType>} [options] Tile layer options.\r\n   */\r\n  constructor(options) {\r\n    options = options ? options : {};\r\n\r\n    const baseOptions = Object.assign({}, options);\r\n\r\n    const cacheSize = options.cacheSize;\r\n    delete options.cacheSize;\r\n\r\n    delete baseOptions.preload;\r\n    delete baseOptions.useInterimTilesOnError;\r\n    super(baseOptions);\r\n\r\n    /***\r\n     * @type {BaseTileLayerOnSignature<import(\"../events\").EventsKey>}\r\n     */\r\n    this.on;\r\n\r\n    /***\r\n     * @type {BaseTileLayerOnSignature<import(\"../events\").EventsKey>}\r\n     */\r\n    this.once;\r\n\r\n    /***\r\n     * @type {BaseTileLayerOnSignature<void>}\r\n     */\r\n    this.un;\r\n\r\n    /**\r\n     * @type {number|undefined}\r\n     * @private\r\n     */\r\n    this.cacheSize_ = cacheSize;\r\n\r\n    this.setPreload(options.preload !== undefined ? options.preload : 0);\r\n    this.setUseInterimTilesOnError(\r\n      options.useInterimTilesOnError !== undefined\r\n        ? options.useInterimTilesOnError\r\n        : true,\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @return {number|undefined} The suggested cache size\r\n   * @protected\r\n   */\r\n  getCacheSize() {\r\n    return this.cacheSize_;\r\n  }\r\n\r\n  /**\r\n   * Return the level as number to which we will preload tiles up to.\r\n   * @return {number} The level to preload tiles up to.\r\n   * @observable\r\n   * @api\r\n   */\r\n  getPreload() {\r\n    return /** @type {number} */ (this.get(TileProperty.PRELOAD));\r\n  }\r\n\r\n  /**\r\n   * Set the level as number to which we will preload tiles up to.\r\n   * @param {number} preload The level to preload tiles up to.\r\n   * @observable\r\n   * @api\r\n   */\r\n  setPreload(preload) {\r\n    this.set(TileProperty.PRELOAD, preload);\r\n  }\r\n\r\n  /**\r\n   * Deprecated.  Whether we use interim tiles on error.\r\n   * @return {boolean} Use interim tiles on error.\r\n   * @observable\r\n   * @api\r\n   */\r\n  getUseInterimTilesOnError() {\r\n    return /** @type {boolean} */ (\r\n      this.get(TileProperty.USE_INTERIM_TILES_ON_ERROR)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Deprecated.  Set whether we use interim tiles on error.\r\n   * @param {boolean} useInterimTilesOnError Use interim tiles on error.\r\n   * @observable\r\n   * @api\r\n   */\r\n  setUseInterimTilesOnError(useInterimTilesOnError) {\r\n    this.set(TileProperty.USE_INTERIM_TILES_ON_ERROR, useInterimTilesOnError);\r\n  }\r\n\r\n  /**\r\n   * Get data for a pixel location.  The return type depends on the source data.  For image tiles,\r\n   * a four element RGBA array will be returned.  For data tiles, the array length will match the\r\n   * number of bands in the dataset.  For requests outside the layer extent, `null` will be returned.\r\n   * Data for a image tiles can only be retrieved if the source's `crossOrigin` property is set.\r\n   *\r\n   * ```js\r\n   * // display layer data on every pointer move\r\n   * map.on('pointermove', (event) => {\r\n   *   console.log(layer.getData(event.pixel));\r\n   * });\r\n   * ```\r\n   * @param {import(\"../pixel\").Pixel} pixel Pixel.\r\n   * @return {Uint8ClampedArray|Uint8Array|Float32Array|DataView|null} Pixel data.\r\n   * @api\r\n   * @override\r\n   */\r\n  getData(pixel) {\r\n    return super.getData(pixel);\r\n  }\r\n}\r\n\r\nexport default BaseTileLayer;\r\n","/**\r\n * @module ol/layer/TileProperty\r\n */\r\n\r\n/**\r\n * @enum {string}\r\n */\r\nexport default {\r\n  PRELOAD: 'preload',\r\n  USE_INTERIM_TILES_ON_ERROR: 'useInterimTilesOnError',\r\n};\r\n","/**\r\n * @module ol/Geolocation\r\n */\r\nimport BaseObject from './Object.js';\r\nimport BaseEvent from './events/Event.js';\r\nimport {circular as circularPolygon} from './geom/Polygon.js';\r\nimport {toRadians} from './math.js';\r\nimport {\r\n  get as getProjection,\r\n  getTransformFromProjections,\r\n  identityTransform,\r\n} from './proj.js';\r\n\r\n/**\r\n * @enum {string}\r\n */\r\nconst Property = {\r\n  ACCURACY: 'accuracy',\r\n  ACCURACY_GEOMETRY: 'accuracyGeometry',\r\n  ALTITUDE: 'altitude',\r\n  ALTITUDE_ACCURACY: 'altitudeAccuracy',\r\n  HEADING: 'heading',\r\n  POSITION: 'position',\r\n  PROJECTION: 'projection',\r\n  SPEED: 'speed',\r\n  TRACKING: 'tracking',\r\n  TRACKING_OPTIONS: 'trackingOptions',\r\n};\r\n\r\n/**\r\n * @enum string\r\n */\r\nconst GeolocationErrorType = {\r\n  /**\r\n   * Triggered when a `GeolocationPositionError` occurs.\r\n   * @event module:ol/Geolocation.GeolocationError#error\r\n   * @api\r\n   */\r\n  ERROR: 'error',\r\n};\r\n\r\n/**\r\n * @classdesc\r\n * Events emitted on [GeolocationPositionError](https://developer.mozilla.org/en-US/docs/Web/API/GeolocationPositionError).\r\n */\r\nexport class GeolocationError extends BaseEvent {\r\n  /**\r\n   * @param {GeolocationPositionError} error error object.\r\n   */\r\n  constructor(error) {\r\n    super(GeolocationErrorType.ERROR);\r\n\r\n    /**\r\n     * Code of the underlying `GeolocationPositionError`.\r\n     * @type {number}\r\n     * @api\r\n     */\r\n    this.code = error.code;\r\n\r\n    /**\r\n     * Message of the underlying `GeolocationPositionError`.\r\n     * @type {string}\r\n     * @api\r\n     */\r\n    this.message = error.message;\r\n  }\r\n}\r\n\r\n/**\r\n * @typedef {Object} Options\r\n * @property {boolean} [tracking=false] Start Tracking right after\r\n * instantiation.\r\n * @property {PositionOptions} [trackingOptions] Tracking options.\r\n * See https://www.w3.org/TR/geolocation-API/#position_options_interface.\r\n * @property {import(\"./proj.js\").ProjectionLike} [projection] The projection the position\r\n * is reported in.\r\n */\r\n\r\n/**\r\n * @typedef {import(\"./ObjectEventType\").Types|'change:accuracy'|'change:accuracyGeometry'|'change:altitude'|\r\n *    'change:altitudeAccuracy'|'change:heading'|'change:position'|'change:projection'|'change:speed'|'change:tracking'|\r\n *    'change:trackingOptions'} GeolocationObjectEventTypes\r\n */\r\n\r\n/***\r\n * @template Return\r\n * @typedef {import(\"./Observable\").OnSignature<GeolocationObjectEventTypes, import(\"./Object\").ObjectEvent, Return> &\r\n *   import(\"./Observable\").OnSignature<'error', GeolocationError, Return> &\r\n *   import(\"./Observable\").CombinedOnSignature<import(\"./Observable\").EventTypes|GeolocationObjectEventTypes, Return> &\r\n *   import(\"./Observable\").OnSignature<import(\"./Observable\").EventTypes, import(\"./events/Event.js\").default, Return>} GeolocationOnSignature\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * Helper class for providing HTML5 Geolocation capabilities.\r\n * The [Geolocation API](https://www.w3.org/TR/geolocation-API/)\r\n * is used to locate a user's position.\r\n *\r\n * To get notified of position changes and errors, register listeners for the generic\r\n * `change` event and the `error` event on your instance of {@link module:ol/Geolocation~Geolocation}.\r\n *\r\n * Example:\r\n *\r\n *     const geolocation = new Geolocation({\r\n *       // take the projection to use from the map's view\r\n *       projection: view.getProjection()\r\n *     });\r\n *     // listen to changes in position\r\n *     geolocation.on('change', function(evt) {\r\n *       console.log(geolocation.getPosition());\r\n *     });\r\n *     // listen to error\r\n *     geolocation.on('error', function(evt) {\r\n *       window.console.log(evt.message);\r\n *     });\r\n *\r\n * @fires GeolocationError\r\n * @api\r\n */\r\nclass Geolocation extends BaseObject {\r\n  /**\r\n   * @param {Options} [options] Options.\r\n   */\r\n  constructor(options) {\r\n    super();\r\n\r\n    /***\r\n     * @type {GeolocationOnSignature<import(\"./events\").EventsKey>}\r\n     */\r\n    this.on;\r\n\r\n    /***\r\n     * @type {GeolocationOnSignature<import(\"./events\").EventsKey>}\r\n     */\r\n    this.once;\r\n\r\n    /***\r\n     * @type {GeolocationOnSignature<void>}\r\n     */\r\n    this.un;\r\n\r\n    options = options || {};\r\n\r\n    /**\r\n     * The unprojected (EPSG:4326) device position.\r\n     * @private\r\n     * @type {?import(\"./coordinate.js\").Coordinate}\r\n     */\r\n    this.position_ = null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"./proj.js\").TransformFunction}\r\n     */\r\n    this.transform_ = identityTransform;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number|undefined}\r\n     */\r\n    this.watchId_ = undefined;\r\n\r\n    this.addChangeListener(Property.PROJECTION, this.handleProjectionChanged_);\r\n    this.addChangeListener(Property.TRACKING, this.handleTrackingChanged_);\r\n\r\n    if (options.projection !== undefined) {\r\n      this.setProjection(options.projection);\r\n    }\r\n    if (options.trackingOptions !== undefined) {\r\n      this.setTrackingOptions(options.trackingOptions);\r\n    }\r\n\r\n    this.setTracking(options.tracking !== undefined ? options.tracking : false);\r\n  }\r\n\r\n  /**\r\n   * Clean up.\r\n   * @override\r\n   */\r\n  disposeInternal() {\r\n    this.setTracking(false);\r\n    super.disposeInternal();\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  handleProjectionChanged_() {\r\n    const projection = this.getProjection();\r\n    if (projection) {\r\n      this.transform_ = getTransformFromProjections(\r\n        getProjection('EPSG:4326'),\r\n        projection,\r\n      );\r\n      if (this.position_) {\r\n        this.set(Property.POSITION, this.transform_(this.position_));\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  handleTrackingChanged_() {\r\n    if ('geolocation' in navigator) {\r\n      const tracking = this.getTracking();\r\n      if (tracking && this.watchId_ === undefined) {\r\n        this.watchId_ = navigator.geolocation.watchPosition(\r\n          this.positionChange_.bind(this),\r\n          this.positionError_.bind(this),\r\n          this.getTrackingOptions(),\r\n        );\r\n      } else if (!tracking && this.watchId_ !== undefined) {\r\n        navigator.geolocation.clearWatch(this.watchId_);\r\n        this.watchId_ = undefined;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {GeolocationPosition} position position event.\r\n   */\r\n  positionChange_(position) {\r\n    const coords = position.coords;\r\n    this.set(Property.ACCURACY, coords.accuracy);\r\n    this.set(\r\n      Property.ALTITUDE,\r\n      coords.altitude === null ? undefined : coords.altitude,\r\n    );\r\n    this.set(\r\n      Property.ALTITUDE_ACCURACY,\r\n      coords.altitudeAccuracy === null ? undefined : coords.altitudeAccuracy,\r\n    );\r\n    this.set(\r\n      Property.HEADING,\r\n      coords.heading === null ? undefined : toRadians(coords.heading),\r\n    );\r\n    if (!this.position_) {\r\n      this.position_ = [coords.longitude, coords.latitude];\r\n    } else {\r\n      this.position_[0] = coords.longitude;\r\n      this.position_[1] = coords.latitude;\r\n    }\r\n    const projectedPosition = this.transform_(this.position_);\r\n    this.set(Property.POSITION, projectedPosition.slice());\r\n    this.set(Property.SPEED, coords.speed === null ? undefined : coords.speed);\r\n    const geometry = circularPolygon(this.position_, coords.accuracy);\r\n    geometry.applyTransform(this.transform_);\r\n    this.set(Property.ACCURACY_GEOMETRY, geometry);\r\n    this.changed();\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {GeolocationPositionError} error error object.\r\n   */\r\n  positionError_(error) {\r\n    this.dispatchEvent(new GeolocationError(error));\r\n  }\r\n\r\n  /**\r\n   * Get the accuracy of the position in meters.\r\n   * @return {number|undefined} The accuracy of the position measurement in\r\n   *     meters.\r\n   * @observable\r\n   * @api\r\n   */\r\n  getAccuracy() {\r\n    return /** @type {number|undefined} */ (this.get(Property.ACCURACY));\r\n  }\r\n\r\n  /**\r\n   * Get a geometry of the position accuracy.\r\n   * @return {?import(\"./geom/Polygon.js\").default} A geometry of the position accuracy.\r\n   * @observable\r\n   * @api\r\n   */\r\n  getAccuracyGeometry() {\r\n    return /** @type {?import(\"./geom/Polygon.js\").default} */ (\r\n      this.get(Property.ACCURACY_GEOMETRY) || null\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Get the altitude associated with the position.\r\n   * @return {number|undefined} The altitude of the position in meters above mean\r\n   *     sea level.\r\n   * @observable\r\n   * @api\r\n   */\r\n  getAltitude() {\r\n    return /** @type {number|undefined} */ (this.get(Property.ALTITUDE));\r\n  }\r\n\r\n  /**\r\n   * Get the altitude accuracy of the position.\r\n   * @return {number|undefined} The accuracy of the altitude measurement in\r\n   *     meters.\r\n   * @observable\r\n   * @api\r\n   */\r\n  getAltitudeAccuracy() {\r\n    return /** @type {number|undefined} */ (\r\n      this.get(Property.ALTITUDE_ACCURACY)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Get the heading as radians clockwise from North.\r\n   * Note: depending on the browser, the heading is only defined if the `enableHighAccuracy`\r\n   * is set to `true` in the tracking options.\r\n   * @return {number|undefined} The heading of the device in radians from north.\r\n   * @observable\r\n   * @api\r\n   */\r\n  getHeading() {\r\n    return /** @type {number|undefined} */ (this.get(Property.HEADING));\r\n  }\r\n\r\n  /**\r\n   * Get the position of the device.\r\n   * @return {import(\"./coordinate.js\").Coordinate|undefined} The current position of the device reported\r\n   *     in the current projection.\r\n   * @observable\r\n   * @api\r\n   */\r\n  getPosition() {\r\n    return /** @type {import(\"./coordinate.js\").Coordinate|undefined} */ (\r\n      this.get(Property.POSITION)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Get the projection associated with the position.\r\n   * @return {import(\"./proj/Projection.js\").default|undefined} The projection the position is\r\n   *     reported in.\r\n   * @observable\r\n   * @api\r\n   */\r\n  getProjection() {\r\n    return /** @type {import(\"./proj/Projection.js\").default|undefined} */ (\r\n      this.get(Property.PROJECTION)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Get the speed in meters per second.\r\n   * @return {number|undefined} The instantaneous speed of the device in meters\r\n   *     per second.\r\n   * @observable\r\n   * @api\r\n   */\r\n  getSpeed() {\r\n    return /** @type {number|undefined} */ (this.get(Property.SPEED));\r\n  }\r\n\r\n  /**\r\n   * Determine if the device location is being tracked.\r\n   * @return {boolean} The device location is being tracked.\r\n   * @observable\r\n   * @api\r\n   */\r\n  getTracking() {\r\n    return /** @type {boolean} */ (this.get(Property.TRACKING));\r\n  }\r\n\r\n  /**\r\n   * Get the tracking options.\r\n   * See https://www.w3.org/TR/geolocation-API/#position-options.\r\n   * @return {PositionOptions|undefined} PositionOptions as defined by\r\n   *     the [HTML5 Geolocation spec\r\n   *     ](https://www.w3.org/TR/geolocation-API/#position_options_interface).\r\n   * @observable\r\n   * @api\r\n   */\r\n  getTrackingOptions() {\r\n    return /** @type {PositionOptions|undefined} */ (\r\n      this.get(Property.TRACKING_OPTIONS)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Set the projection to use for transforming the coordinates.\r\n   * @param {import(\"./proj.js\").ProjectionLike} projection The projection the position is\r\n   *     reported in.\r\n   * @observable\r\n   * @api\r\n   */\r\n  setProjection(projection) {\r\n    this.set(Property.PROJECTION, getProjection(projection));\r\n  }\r\n\r\n  /**\r\n   * Enable or disable tracking.\r\n   * @param {boolean} tracking Enable tracking.\r\n   * @observable\r\n   * @api\r\n   */\r\n  setTracking(tracking) {\r\n    this.set(Property.TRACKING, tracking);\r\n  }\r\n\r\n  /**\r\n   * Set the tracking options.\r\n   * See http://www.w3.org/TR/geolocation-API/#position-options.\r\n   * @param {PositionOptions} options PositionOptions as defined by the\r\n   *     [HTML5 Geolocation spec\r\n   *     ](http://www.w3.org/TR/geolocation-API/#position_options_interface).\r\n   * @observable\r\n   * @api\r\n   */\r\n  setTrackingOptions(options) {\r\n    this.set(Property.TRACKING_OPTIONS, options);\r\n  }\r\n}\r\n\r\nexport default Geolocation;\r\n"],"names":["$075f937d7366f1a2$var$sharedCanvasContext","$322346e1ff7894ca$var$colorParseContext","$d4aabc5c971073f1$var$measureFont","$2b0a118af78fb031$var$brokenDiagonalRendering_","measureElement","$parcel$interopDefault","a","__esModule","default","forwardTransform","inverseTransform","$e881b5dca21eb5d4$export$2e2bcd8739ae039","PROPERTYCHANGE","$294047c5e65f31a3$export$2e2bcd8739ae039","CHANGE","ERROR","CONTEXTMENU","CLICK","DBLCLICK","KEYDOWN","KEYPRESS","LOAD","TOUCHMOVE","WHEEL","$3273ed08087da3da$export$2e2bcd8739ae039","constructor","disposed","dispose","disposeInternal","$b998d41b678ed5d1$export$fcb633242ef15540","b","$b998d41b678ed5d1$export$4fa3190a997c3d8f","$b998d41b678ed5d1$export$8a3786cc03fdb777","arr","target","direction","n","length","i","candidate","$b998d41b678ed5d1$export$8b58be045bf06082","data","extension","Array","isArray","$b998d41b678ed5d1$export$e9bab7fafb253603","arr1","arr2","len1","$013a1733c226ec50$export$22e23a2304399231","$013a1733c226ec50$export$8f11cee4bdc7e668","$013a1733c226ec50$export$1cd1943b3a73bbe8","$013a1733c226ec50$export$ff83df6f9971435f","fn","lastResult","lastArgs","lastThis","nextArgs","prototype","slice","call","arguments","apply","$beaefe87199bb537$export$42ffd38884aecdac","object","property","$beaefe87199bb537$export$dd1bc94b04021eeb","$aeedce20e9577100$export$2e2bcd8739ae039","type","propagationStopped","defaultPrevented","preventDefault","stopPropagation","$08c28d22c0cb5a39$export$2e2bcd8739ae039","eventTarget_","pendingRemovals_","dispatching_","listeners_","addEventListener","listener","listeners","listenersForType","includes","push","dispatchEvent","event","propagate","isString","evt","dispatching","pendingRemovals","ii","handleEvent","pr","removeEventListener","getListeners","undefined","hasListener","Object","keys","index","indexOf","splice","$d5bf8abd656a3cdc$export$63174c828edd6ff8","thisArg","once","originalListener","bind","eventsKey","$d5bf8abd656a3cdc$export$b0a21c8b3c1c921","key","$1f093ab5083c8a1f$var$Observable","on","onInternal","onceInternal","un","unInternal","revision_","changed","getRevision","len","ol_key","$1f093ab5083c8a1f$export$b7ef3f8527533384","$1f093ab5083c8a1f$export$2e2bcd8739ae039","$6c5e11070e371322$export$817eb92a8194bab0","Error","$6c5e11070e371322$var$uidCounter_","$6c5e11070e371322$export$5e82334337e0f204","obj","ol_uid","String","$b68b3d6e32e3074a$export$cf395d7c4a2d5a17","oldValue","$b68b3d6e32e3074a$export$2e2bcd8739ae039","values","values_","setProperties","get","value","hasOwnProperty","getKeys","getProperties","assign","getPropertiesInternal","hasProperties","notify","eventType","addChangeListener","removeChangeListener","set","silent","applyProperties","source","unset","$35d5ec884318008e$export$a7a9523472993e97","assertion","errorMessage","$9fd014ab6df63665$var$Feature","geometryOrProperties","id_","geometryName_","style_","styleFunction_","geometryChangeKey_","handleGeometryChanged_","getSimplifiedGeometry","setGeometry","clone","setGeometryName","getGeometryName","geometry","getGeometry","style","getStyle","setStyle","getId","getStyleFunction","handleGeometryChange_","styles","getZIndex","setId","id","name","$161dd067fe2d672c$export$2e2bcd8739ae039","ADD","REMOVE","$931ffc4e747c14db$export$a87ae6eb2761ec6d","element","$931ffc4e747c14db$export$2e2bcd8739ae039","array","options","unique_","unique","array_","assertUnique_","updateLength_","clear","getLength","pop","extend","forEach","f","getArray","item","insertAt","elem","removeAt","remove","prev","setAt","except","$3a171922c3a0c5ed$export$2e2bcd8739ae039","map","frameState","$a1b91f073c6a6c43$export$2e2bcd8739ae039","originalEvent","dragging","activePointers","pixel_","coordinate_","pixel","getEventPixel","coordinate","getCoordinateFromPixel","$150f412a4a7fa263$export$2e2bcd8739ae039","SINGLECLICK","POINTERDRAG","POINTERMOVE","POINTERDOWN","POINTERUP","POINTEROVER","POINTEROUT","POINTERENTER","POINTERLEAVE","POINTERCANCEL","$67c66761d21428d0$var$ua","navigator","userAgent","toLowerCase","$67c66761d21428d0$export$3227bfbdaa9275de","test","$67c66761d21428d0$export$39dfd62a25e0fe93","$67c66761d21428d0$export$76c0a3b101d93136","$67c66761d21428d0$export$6b83a0446fc26f94","devicePixelRatio","$67c66761d21428d0$export$98fcef3dc9973292","WorkerGlobalScope","OffscreenCanvas","self","$67c66761d21428d0$export$716f8695eedb9bad","Image","decode","$67c66761d21428d0$export$f751ce96c6c4e4fc","passive","defineProperty","window","$d564567e31203d44$export$2e2bcd8739ae039","$6085d006f9d0efe2$export$2e2bcd8739ae039","moveTolerance","map_","clickTimeoutId_","emulateClicks_","dragging_","dragListenerKeys_","moveTolerance_","down_","getViewport","activePointers_","trackedTouches_","element_","pointerdownListenerKey_","handlePointerDown_","originalPointerMoveEvent_","relayedListenerKey_","relayMoveEvent_","boundHandleTouchMove_","handleTouchMove_","emulateClick_","pointerEvent","newEvent","clearTimeout","setTimeout","updateActivePointers_","pointerId","handlePointerUp_","isMouseActionButton_","button","PointerEvent","writable","doc","getOwnerDocument","handlePointerMove_","getRootNode","isMoving_","cancelable","Math","abs","clientX","clientY","$e4ad75f913b6f7ff$export$2e2bcd8739ae039","POSTRENDER","MOVESTART","MOVEEND","LOADSTART","LOADEND","$07fa325567004bb7$export$2e2bcd8739ae039","LAYERGROUP","SIZE","TARGET","VIEW","$b8291d9739c3c64e$export$2e2bcd8739ae039","IDLE","LOADING","LOADED","EMPTY","$716c6804ea170b71$export$b4af72c40fd57063","Infinity","$716c6804ea170b71$export$2e2bcd8739ae039","priorityFunction","keyFunction","priorityFunction_","keyFunction_","elements_","priorities_","queuedElements_","dequeue","elements","priorities","siftUp_","elementKey","enqueue","priority","siftDown_","getCount","getLeftChildIndex_","getRightChildIndex_","getParentIndex_","heapify_","isEmpty","isKeyQueued","isQueued","count","startIndex","lIndex","rIndex","smallerChildIndex","parentIndex","reprioritize","$4c51fd53052a6bbc$export$2e2bcd8739ae039","tilePriorityFunction","tileChangeCallback","getKey","boundHandleTileChange_","handleTileChange","tileChangeCallback_","tilesLoading_","tilesLoadingKeys_","added","tile","getTilesLoading","state","getState","tileKey","loadMoreTiles","maxTotalLoading","maxNewLoads","newLoads","load","$7d362782b4ccb93d$export$2e2bcd8739ae039","ANIMATING","INTERACTING","$d35baefbe89be4c5$export$2e2bcd8739ae039","CENTER","RESOLUTION","ROTATION","$6b000a049d919fe5$export$7d15b64cf5a3a4c4","min","max","$6b000a049d919fe5$export$88e6ebb4fe54f538","x1","y1","x2","y2","dx","dy","$6b000a049d919fe5$export$56cb859c01fa134d","angleInRadians","PI","$6b000a049d919fe5$export$cba01ba138429a1d","angleInDegrees","$6b000a049d919fe5$export$ba467bec01d66def","r","$6b000a049d919fe5$export$a81f732198733497","decimals","factor","pow","round","$6b000a049d919fe5$export$a3fe094919f356fd","floor","$6b000a049d919fe5$export$803ce6b71a0a94b2","ceil","$6b000a049d919fe5$export$4997ffc0176396a6","range","$b21a6e049949bb31$export$c2f0af2c946f6897","extent","onlyCenter","smooth","center","resolution","size","isMoving","centerShift","viewWidth","viewHeight","shiftX","shiftY","minX","maxX","minY","maxY","x","y","ratio","log","$b21a6e049949bb31$export$f883a24d5edde77c","$dab4245bc22b806c$export$2e2bcd8739ae039","UNKNOWN","INTERSECTING","ABOVE","RIGHT","BELOW","LEFT","$6da4c8ed3074c92b$export$8aceca7c77505534","coordinates","$6da4c8ed3074c92b$export$fe201bb3bbe031e9","$6da4c8ed3074c92b$export$1f820e3920fa5715","$6da4c8ed3074c92b$export$ab1029bcae9ddb4a","dest","$6da4c8ed3074c92b$export$9cd59f9826255e47","$6da4c8ed3074c92b$export$cbe64c389534206f","$6da4c8ed3074c92b$export$ac68c24d37ca240f","$6da4c8ed3074c92b$export$805bdfd6d6690e97","$6da4c8ed3074c92b$export$be866b1e0809b17e","extent1","extent2","$6da4c8ed3074c92b$export$f97905ead28c61a8","relationship","$6da4c8ed3074c92b$export$958e3e1a02eac4b6","$6da4c8ed3074c92b$export$3e2152b047719fa1","$6da4c8ed3074c92b$export$4838bf78d04a9440","$6da4c8ed3074c92b$export$e9bab7fafb253603","$6da4c8ed3074c92b$export$8b58be045bf06082","$6da4c8ed3074c92b$export$30570204156ffd18","flatCoordinates","offset","end","stride","$6da4c8ed3074c92b$export$f1dab130b92b85a9","$6da4c8ed3074c92b$export$f9ed8a3d123a08e2","callback","val","$6da4c8ed3074c92b$export$8d09f5e2e1bf560d","$6da4c8ed3074c92b$export$e77c1cf70445e168","$6da4c8ed3074c92b$export$b84fa077c8b05295","$6da4c8ed3074c92b$export$cb1538b07e6964ff","$6da4c8ed3074c92b$export$520c40045967cb15","area","$6da4c8ed3074c92b$export$dd1bc94b04021eeb","$6da4c8ed3074c92b$export$3c49c185de0c2bfc","$6da4c8ed3074c92b$export$c08559766941f856","$6da4c8ed3074c92b$export$c91255cadecfe081","$6da4c8ed3074c92b$export$13ba650faf8308","rotation","x0","y0","x3","y3","$6da4c8ed3074c92b$export$4b7a6fb4002cd6ac","cosRotation","cos","sinRotation","sin","xCos","xSin","yCos","ySin","$6da4c8ed3074c92b$export$72209efa88586d42","intersection","$6da4c8ed3074c92b$export$7b0a31e10bbff018","$6da4c8ed3074c92b$export$39a9ce3624977b84","projection","projectionExtent","getExtent","canWrapX","worldWidth","worldsAway","$6da4c8ed3074c92b$export$9031237f01de0947","multiWorld","isFinite","$1bd0a226f9a16141$export$e9bab7fafb253603","coordinate1","coordinate2","equals","$1bd0a226f9a16141$export$bb628a54ab399bc9","angle","cosAngle","sinAngle","$1bd0a226f9a16141$export$39a9ce3624977b84","$1bd0a226f9a16141$export$24e2b27d1ff0c1d5","sourceExtentWidth","$c7ccf7e681a9b333$export$929e5a82286172a6","t","$c7ccf7e681a9b333$export$57636bb43b1ccbb0","$c7ccf7e681a9b333$export$9b47139b511b56e4","$c7ccf7e681a9b333$export$45db2fc2f15997e7","$fb75384508533d8f$export$79376507b09a66f","c1","c2","radius","lat1","lat2","deltaLatBy2","deltaLonBy2","atan2","sqrt","$8c65b0699f3f3f8e$export$c106dd0671a0fc2d","args","console","warn","$03edbd434a9e6608$export$1482081eec883108","$6dc418afeec7068a$export$2e2bcd8739ae039","code_","code","units_","units","extent_","worldExtent_","worldExtent","axisOrientation_","axisOrientation","global_","global","canWrapX_","getPointResolutionFunc_","getPointResolution","defaultTileGrid_","metersPerUnit_","metersPerUnit","getCode","getUnits","getMetersPerUnit","getWorldExtent","getAxisOrientation","isGlobal","setGlobal","getDefaultTileGrid","setDefaultTileGrid","tileGrid","setExtent","setWorldExtent","setGetPointResolution","func","getPointResolutionFunc","$84ad988f04807ab1$export$f3928063e5e96d35","$84ad988f04807ab1$export$21e6da8a7375dfe8","$84ad988f04807ab1$export$ae9d6ed80df710e5","$84ad988f04807ab1$export$d26945d1ad52feeb","$84ad988f04807ab1$export$2d2c9be8b5b863f","tan","$84ad988f04807ab1$var$EPSG3857Projection","point","cosh","$84ad988f04807ab1$export$b508d7ad9a891c1b","$b58ae362632b32c5$export$21e6da8a7375dfe8","$b58ae362632b32c5$export$1482081eec883108","$b58ae362632b32c5$var$EPSG4326Projection","$b58ae362632b32c5$export$b508d7ad9a891c1b","$f5ec5c943d804ecb$var$cache","$11b5dd198626e1de$var$transforms","$11b5dd198626e1de$export$e16d8520af44a096","destination","transformFn","sourceCode","destinationCode","$11b5dd198626e1de$export$3988ae62b71be9a3","$5f19451ebc03a1eb$var$SQRT_E","$5f19451ebc03a1eb$var$_E","$5f19451ebc03a1eb$var$_E2","$5f19451ebc03a1eb$var$_E3","$5f19451ebc03a1eb$var$_E4","$5f19451ebc03a1eb$var$_E5","$5f19451ebc03a1eb$var$P2","$5f19451ebc03a1eb$var$P3","$5f19451ebc03a1eb$var$P4","$5f19451ebc03a1eb$var$P5","$5f19451ebc03a1eb$var$toLonLat","easting","northing","zone","mu","m","north","$5f19451ebc03a1eb$var$R","pRad","pSin","pSin2","pCos","pTan","pTan2","pTan4","c","$5f19451ebc03a1eb$var$E_P2","$5f19451ebc03a1eb$var$E","d","d2","d3","d4","d5","latitude","d6","longitude","$5f19451ebc03a1eb$var$zoneToCentralLongitude","number","$5f19451ebc03a1eb$var$fromLonLat","latRad","latSin","latCos","latTan","latTan2","latTan4","lonRad","centralLonRad","a2","a3","a4","a5","$5f19451ebc03a1eb$var$K0","$5f19451ebc03a1eb$var$M1","$5f19451ebc03a1eb$var$M2","$5f19451ebc03a1eb$var$M3","$5f19451ebc03a1eb$var$M4","a6","$5f19451ebc03a1eb$var$epsgRegExes","$5f19451ebc03a1eb$export$bb54dc52a08ed170","epsgId","re","match","parseInt","$5f19451ebc03a1eb$var$makeTransformFunction","transformer","input","output","dimension","coord","$9c4744460e43e41b$var$transformFactories","forward","inverse","$9c4744460e43e41b$var$projectionFactories","$9c4744460e43e41b$var$showCoordinateWarning","$9c4744460e43e41b$export$dd516654c5f598fb","$9c4744460e43e41b$export$83e8ab53904f8022","$9c4744460e43e41b$export$59ae956cd3e343f7","$9c4744460e43e41b$export$3988ae62b71be9a3","projectionLike","replace","makeProjection","$9c4744460e43e41b$export$2d8f7b4eec383d44","pointResolution","getter","projUnits","toEPSG4326","$9c4744460e43e41b$export$e3c4995a701c26a3","vertices","width","$9c4744460e43e41b$export$eeb8392580a05a37","projections","$9c4744460e43e41b$export$549167224996a0fb","defaultCode","$9c4744460e43e41b$export$fe091d73a555748b","projection1","projection2","equalUnits","transformFunc","sourceTransforms","destinationTransforms","makeTransforms","intermediateCode","$9c4744460e43e41b$var$composeTransformFuncs","fromSource","toDestination","t1","t2","dimensions","$9c4744460e43e41b$export$fce0c6cfca85ed96","$9c4744460e43e41b$export$51186ad6e864892a","$9c4744460e43e41b$export$698f563af1ba02a5","sourceProjection","$9c4744460e43e41b$export$d4b8ec0b96db1ee2","destProjection","$9c4744460e43e41b$export$96bfd09e2cffb006","$9c4744460e43e41b$export$494be3a3a25689ca","$e22e7611e69f42a9$export$185802fd694ee1f5","$e22e7611e69f42a9$export$5635d7ef4b8fee1c","transform","$e22e7611e69f42a9$export$f672e0b6f7222cd7","dx1","dy1","sx","sy","dx2","dy2","$e22e7611e69f42a9$export$bd70ea2a93c0fa4","mat","det","e","atan","exp","projections1","projections2","$e22e7611e69f42a9$var$matrixPrecision","$e22e7611e69f42a9$var$fromString","cssTransform","substring","split","parseFloat","$14c6e714516e527b$export$b92b2dedcfff79de","destinationStride","j","k","$14c6e714516e527b$export$bb628a54ab399bc9","anchor","anchorX","anchorY","deltaX","deltaY","$50db89a00eb954f6$var$tmpTransform","$50db89a00eb954f6$var$tmpPoint","NaN","$50db89a00eb954f6$export$2e2bcd8739ae039","extentRevision_","simplifiedGeometryMaxMinSquaredTolerance","simplifiedGeometryRevision","simplifyTransformedInternal","revision","squaredTolerance","applyTransform","simplifyTransformed","closestPointXY","closestPoint","minSquaredDistance","containsXY","Number","MIN_VALUE","getClosestPoint","intersectsCoordinate","computeExtent","isNaN","rotate","scale","simplify","tolerance","getType","intersectsExtent","translate","sourceProj","inCoordinates","outCoordinates","pixelExtent","projectedExtent","transformed","projTransform","$c76e993e57efc8c4$export$61bb6938093db2c8","layout","$c76e993e57efc8c4$export$6af0c1b4a8549a43","$c76e993e57efc8c4$export$2e2bcd8739ae039","getCoordinates","getFirstCoordinate","getFlatCoordinates","getLastCoordinate","getLayout","simplifiedGeometry","getSimplifiedGeometryInternal","simplifiedFlatCoordinates","getStride","setFlatCoordinates","setCoordinates","setLayout","nesting","startsWith","$01ff26a2f986a1d0$export$3c5e1905f889266e","twiceArea","$01ff26a2f986a1d0$export$7a8ee541dfdf2ed5","ends","$bf5604c1b8258b71$var$assignClosest","offset1","offset2","$bf5604c1b8258b71$export$bc2eb611ddf80103","squaredDelta","$bf5604c1b8258b71$export$fbf31c8f2668ed5a","$bf5604c1b8258b71$export$4adc8e5135fb44c","maxDelta","isRing","tmpPoint","squaredDistance","$bf5604c1b8258b71$export$5a48a0eefcf14992","$6b086aa46281540d$export$5c4daf67e03c190f","$6b086aa46281540d$export$47c3746a74384d45","coordinatess","jj","$6b086aa46281540d$export$f9f2bb59da4accd3","coordinatesss","endss","$5454470599558ddd$export$9c0934e4e9c3f61e","$5454470599558ddd$export$cbb9596fc0f40db2","$5454470599558ddd$export$915c7058aeb4dfeb","$8780aae6970f5f65$export$ef693d1572e64fb8","simplifiedOffset","markers","stack","last","first","maxSquaredDistance","$8780aae6970f5f65$export$cedb9900c0b225c2","simplifiedEnds","$8780aae6970f5f65$export$51a0620f7a28532b","$8780aae6970f5f65$export$60a9904b67f8d51b","$8780aae6970f5f65$export$b84e8d2c4920a0c6","$548636579b4087f2$var$LinearRing","maxDelta_","maxDeltaRevision_","getArea","$6eced4c969949f6b$var$Point","$239aa88e7a573859$export$949a7a3a4b6f34fa","wn","$239aa88e7a573859$export$ae868c0f6acc3355","$2166f19777f69377$export$50e3b25928a5e892","flatCenters","flatCentersOffset","intersections","rr","pointX","maxSegmentLength","sort","segmentLength","$2166f19777f69377$export$11463803eda8a372","interiorPoints","$3e64078bffae1cbd$export$4b80e395e36b5a56","ret","$acee589e5b390c5c$export$40d8d71841a3d779","coordinatesExtent","point1","point2","start","intersects","startRel","endRel","startX","startY","endX","endY","slope","$acee589e5b390c5c$export$830a0dafbb2ef1c5","$acee589e5b390c5c$export$76dcd8f8f83b6ddb","$7892dc06ffd23218$export$318f2842ed17e094","edge","$7892dc06ffd23218$export$f27cd06e85f4ba28","right","isClockwise","$7892dc06ffd23218$export$a1d138f4bd85f4b4","$7892dc06ffd23218$export$b71b604ddfc778c7","reverse","tmp","$7892dc06ffd23218$export$ea9ed55fc2a85010","$40aa8d43bbe572bf$var$Polygon","ends_","flatInteriorPointRevision_","flatInteriorPoint_","orientedRevision_","orientedFlatCoordinates_","appendLinearRing","linearRing","polygon","getOrientedFlatCoordinates","getEnds","getFlatInteriorPoint","flatCenter","getInteriorPoint","getLinearRingCount","getLinearRing","getLinearRings","linearRings","$40aa8d43bbe572bf$export$c16b671815801c75","$bac43a1f4a628548$var$getViewportClampedResolution","maxExtent","viewportSize","showFullExtent","xResolution","yResolution","$bac43a1f4a628548$var$getSmoothClampedResolution","maxResolution","minResolution","result","$bac43a1f4a628548$export$1c4e6da9b4b066fe","cappedMaxRes","$d65f0a322291d127$export$e20fbacbb41798b","$d65f0a322291d127$export$f883a24d5edde77c","$70364d0195659942$var$animationCallback","returnValue","$70364d0195659942$var$calculateCenterOn","position","rotX","rotY","$70364d0195659942$export$2e2bcd8739ae039","hints_","animations_","updateAnimationKey_","projection_","viewportSize_","targetCenter_","targetResolution_","targetRotation_","nextCenter_","nextResolution_","nextRotation_","cancelAnchor_","applyOptions_","properties","resolutionConstraintInfo","$70364d0195659942$export$c68d65f9148da196","resolutionConstraint","minZoom","maxZoom","zoomFactor","smoothResolutionConstraint","projExtent","constrainOnlyCenter","resolutions","constrainResolution","z","defaultMaxResolution","degrees","zoomLevel","constraint","maxResolution_","minResolution_","zoomFactor_","resolutions_","padding_","padding","minZoom_","centerConstraint","$70364d0195659942$export$964345001ee9ac52","smoothExtentConstraint","rotationConstraint","$70364d0195659942$export$4eeaa08dd550e3c0","enableRotation","constrainRotation","theta","constraints_","setRotation","setCenterInternal","setResolution","zoom","setZoom","oldPadding","getCenterInternal","newPadding","getResolution","offsetX","offsetY","getUpdatedOptions_","newOptions","getZoom","getRotation","animate","var_args","isDef","getAnimating","resolveConstraints","getProjection","animateInternal","animationCount","Date","now","series","animation","complete","duration","easing","sourceCenter","targetCenter","sourceResolution","targetResolution","getResolutionForZoom","sourceRotation","delta","targetRotation","setHint","updateAnimations_","getInteracting","cancelAnimations","cancelAnimationFrame","more","seriesComplete","elapsed","fraction","progress","getViewportSize_","constrainedResolution","calculateCenterZoom","applyTargetState_","constrainedRotation","calculateCenterRotate","filter","Boolean","requestAnimationFrame","currentCenter","currentResolution","w","h","setViewportSize","getCenter","getConstraints","getConstrainResolution","getHints","hints","calculateExtent","calculateExtentInternal","getViewportSizeMinusPadding_","getMaxResolution","getMinResolution","getMaxZoom","getZoomForResolution","setMaxZoom","getMinZoom","setMinZoom","setConstrainResolution","enabled","getResolutions","getResolutionForExtent","getResolutionForExtentInternal","getResolutionForValueFunction","power","getConstrainedResolution","getValueForResolutionFunction","logPower","reducedSize","nextCenter","nextResolution","nextRotation","getViewStateAndExtent","viewState","nearest","baseLevel","fit","geometryOrExtent","fitInternal","rotatedExtentForGeometry","coords","minRotX","minRotY","maxRotX","maxRotY","rotatedExtent","centerRot","centerX","centerY","getConstrainedCenter","centerOn","centerOnInternal","calculateCenterShift","shiftedCenter","adjustCenter","deltaCoordinates","setCenter","adjustCenterInternal","adjustResolution","adjustResolutionInternal","newResolution","adjustZoom","adjustRotation","adjustRotationInternal","newRotation","hint","doNotCancelAnims","forceMoving","newCenter","resolutionDirection","beginInteraction","endInteraction","endInteractionInternal","getConstrainedZoom","targetZoom","targetRes","$ce07df6d5d4656f1$export$981241db82723ce2","$ce07df6d5d4656f1$export$1afde3d6e16a7b29","$ce07df6d5d4656f1$export$4d4f8be70b656192","$ce07df6d5d4656f1$export$e16017ac68d14492","$ce07df6d5d4656f1$var$fontRegEx","RegExp","$ce07df6d5d4656f1$var$fontRegExMatchIndex","$ce07df6d5d4656f1$export$5abde8a6aec4a131","fontSpec","lineHeight","weight","variant","families","family","$075f937d7366f1a2$export$9e05d10eae75c464","height","canvasPool","settings","canvas","shift","document","createElement","getContext","$075f937d7366f1a2$export$fcb72ce088a6632c","$075f937d7366f1a2$export$e918ac6a1026a12a","context","clearRect","$075f937d7366f1a2$export$5542201de9311ab2","newNode","oldNode","parent","parentNode","replaceChild","$b978dafe8f7d27ff$export$2e2bcd8739ae039","pointerEvents","target_","listenerKeys","render","setTarget","getMap","setMap","getOverlayContainerStopEvent","appendChild","mapEvent","getElementById","$6a26ab11104d2c24$export$2e2bcd8739ae039","ulElement_","collapsed_","collapsed","userCollapsed_","overrideCollapsible_","collapsible","collapsible_","attributions_","attributions","className","tipLabel","expandClassName","collapseLabel","collapseClassName","collapseLabel_","textContent","label","label_","activeLabel","toggleButton_","setAttribute","title","handleClick_","cssClasses","renderedAttributions_","renderedVisible_","collectSourceAttributions_","layers","getAllLayers","visibleAttributions","Set","flatMap","layer","getAttributions","add","some","getSource","getAttributionsCollapsible","setCollapsible","from","updateElement_","display","Promise","all","attribution","err","reject","resolve","visible","node","lastChild","innerHTML","handleToggle_","classList","toggle","getCollapsible","setCollapsed","getCollapsed","$a305cff1f91b3b86$export$2e2bcd8739ae039","compassClassName","callResetNorth_","resetNorth","duration_","autoHide_","autoHide","rotation_","resetNorth_","view","getView","contains","$4901e3e27e30416a$export$2e2bcd8739ae039","zoomInClassName","zoomOutClassName","zoomInLabel","zoomOutLabel","zoomInTipLabel","zoomOutTipLabel","inElement","createTextNode","outElement","zoomByDelta_","currentZoom","newZoom","$9a54ea8d5f7a49ee$export$2e2bcd8739ae039","decay","minVelocity","delay","decay_","minVelocity_","delay_","points_","angle_","initialVelocity_","begin","update","lastIndex","firstIndex","getDistance","getAngle","$39210df8527e63e5$export$ace321ff2a8016ef","$39210df8527e63e5$export$2e2bcd8739ae039","setActive","getActive","mapBrowserEvent","active","$b50403621294a654$export$2e2bcd8739ae039","delta_","stopEvent","browserEvent","shiftKey","$edf87b50170125f7$export$84bf76cd7afc7469","conditions","pass","$edf87b50170125f7$export$4e5f01653f9f1f82","altKey","metaKey","ctrlKey","$edf87b50170125f7$export$d7ddd398f22d79ef","targetElement","getTargetElement","rootNode","activeElement","ShadowRoot","host","$edf87b50170125f7$export$ae2cdf064e3b0c55","tabIndexCandidate","hasAttribute","$edf87b50170125f7$export$1238ad6b5e7fff70","$edf87b50170125f7$export$fdc892d0d8fe3bfb","$edf87b50170125f7$export$32603ad571dd22b5","$edf87b50170125f7$export$5d31fe68a477cfbb","$edf87b50170125f7$export$e5570ca80cd8fd54","tagName","isContentEditable","$edf87b50170125f7$export$abb7acbfa76bf3c4","pointerType","$edf87b50170125f7$export$189f0d593022b199","isPrimary","$cf1eb502962d87a8$export$e2a20c553f6c85ce","$cf1eb502962d87a8$export$2e2bcd8739ae039","handleDownEvent","handleDragEvent","handleMoveEvent","handleUpEvent","stopDown","handlingDownUpSequence","targetPointers","getPointerCount","updateTrackedPointers_","handledUp","handled","$c11585da26a016db$export$2e2bcd8739ae039","kinetic_","kinetic","lastCentroid","lastPointersCount_","panning_","condition","condition_","onFocusOnly","noKinetic_","centroid","distance","centerpx","getPixelFromCoordinateInternal","getCoordinateFromPixelInternal","$197c7092261b2aa0$export$2e2bcd8739ae039","lastAngle_","getSize","$c47adf75308683a6$export$2e2bcd8739ae039","geometry_","startPixel_","endPixel_","render_","startPixel","endPixel","left","top","getOverlayContainer","removeChild","setPixels","createOrUpdateGeometry","pixels","$e05f414bc3918235$var$DragBoxEventType","BOXSTART","BOXDRAG","BOXEND","BOXCANCEL","$e05f414bc3918235$export$7053c33c051365ea","$e05f414bc3918235$export$2e2bcd8739ae039","box_","minArea_","minArea","onBoxEnd","boxEndCondition_","boxEndCondition","defaultBoxEndCondition","completeBox","$afc7f51010a5b660$export$2e2bcd8739ae039","out_","out","$368e06a3031941b5$export$2e2bcd8739ae039","UP","DOWN","$178bb1517d626802$export$2e2bcd8739ae039","defaultCondition_","pixelDelta_","pixelDelta","keyEvent","mapUnitsDelta","$2237fabfa170eefc$export$2e2bcd8739ae039","$aaa378764710d71e$export$2e2bcd8739ae039","totalDelta_","lastDelta_","timeout_","timeout","useAnchor_","useAnchor","constrainResolution_","lastAnchor_","startTime_","timeoutId_","mode_","trackpadEventGap_","trackpadTimeoutId_","deltaPerZoom_","endInteraction_","wheelEvent","deltaMode","WheelEvent","DOM_DELTA_LINE","timeLeft","handleWheelZoom_","setMouseAnchor","$9727451f2459496c$export$2e2bcd8739ae039","pointerOptions","anchor_","rotating_","rotationDelta_","threshold_","threshold","rotationDelta","touch0","touch1","$79c946b60b88d4a6$export$2e2bcd8739ae039","lastDistance_","lastScaleDelta_","scaleDelta","$57c5f0299cb9b82f$export$2e2bcd8739ae039","background_","background","opacity","zIndex","className_","state_","getBackground","getClassName","getLayerState","managed","getOpacity","getVisible","getLayersArray","getLayerStatesArray","states","getSourceState","setBackground","setMaxResolution","setMinResolution","setOpacity","setVisible","setZIndex","zindex","$0b703156bb914e6f$export$2f5ff21d758d25a7","$0b703156bb914e6f$var$LayerGroup","baseOptions","layersListenerKeys_","listenerKeys_","handleLayersChanged_","setLayers","handleLayerChange_","getLayers","handleLayersAdd_","handleLayersRemove_","layersArray","registerLayerListeners_","handleLayerGroupAdd_","handleLayerGroupRemove_","collectionEvent","collection","currentLayers","pos","ownLayerState","defaultZIndex","layerState","$f5e92a4d985a2824$export$2e2bcd8739ae039","PRERENDER","PRECOMPOSE","POSTCOMPOSE","RENDERCOMPLETE","$534f30fce11effcd$export$acb1e9cb9ce4ca56","$534f30fce11effcd$export$2e2bcd8739ae039","mapPrecomposeKey_","mapRenderKey_","sourceChangeKey_","renderer_","sourceReady_","rendered","handleSourcePropertyChange_","setSource","getRenderSource","handleSourceChange_","clearRenderer","getFeatures","getData","isVisible","getMapInternal","layerStatesArray","getLayerGroup","find","layerExtent","layerRenderer","getRenderer","prepareFrame","renderFrame","unrender","getDeclutter","renderDeclutter","renderDeferred","setMapInternal","handlePrecompose_","renderEvent","arrayLayerState","createRenderer","hasRenderer","$176ca75ee9f69668$exports","children","s","leaf","o","l","u","_maxEntries","_minEntries","_all","search","toBBox","collides","insert","_build","_splitRoot","_insert","_condense","compareMinX","compareMinY","toJSON","fromJSON","_chooseSubtree","_split","_adjustParentBBoxes","_chooseSplitAxis","_chooseSplitIndex","_allDistMargin","$322346e1ff7894ca$export$6c844c64a5efe1ee","$322346e1ff7894ca$var$rgbModernRegEx","$322346e1ff7894ca$var$rgbLegacyAbsoluteRegEx","$322346e1ff7894ca$var$rgbLegacyPercentageRegEx","$322346e1ff7894ca$var$hexRegEx","$322346e1ff7894ca$var$toColorComponent","divider","endsWith","$322346e1ff7894ca$var$throwInvalidColor","color","$322346e1ff7894ca$var$cache","$322346e1ff7894ca$var$cacheSize","$322346e1ff7894ca$var$b1","v","$322346e1ff7894ca$var$b2","$322346e1ff7894ca$var$a1","$322346e1ff7894ca$var$a2","$322346e1ff7894ca$export$44fb54fa2e0c0d4","g","q","$322346e1ff7894ca$export$3004f64547af360e","$322346e1ff7894ca$var$parseRgba","rgb","alpha","rgbDivider","hex","step","colorFromHex","colorComponent","willReadFrequently","desynchronized","fillStyle","invalidCheckFillStyle","colorString","fillRect","colorFromImage","getImageData","$322346e1ff7894ca$export$75093a47a9fa838d","$322346e1ff7894ca$export$f84e8e69fd4488a5","$cc435a5409103773$export$622c471beb1693c7","$cc435a5409103773$export$a71a825ff42fb8e1","$778943ec39690f8e$var$numTypes","$778943ec39690f8e$export$240f7fffab1b25a0","$778943ec39690f8e$export$86a7aca748b1e260","$778943ec39690f8e$export$2b93044cbf134323","$778943ec39690f8e$export$2cd82751acc0e609","$778943ec39690f8e$export$d701d0e49f4bcb39","$778943ec39690f8e$export$52725c8a6d4c61d1","$778943ec39690f8e$export$ec4c9a150bae86cd","$778943ec39690f8e$var$typeNames","$778943ec39690f8e$var$namedTypes","$778943ec39690f8e$export$b2afc7c96b2b4a45","names","namedType","specific","$778943ec39690f8e$export$9fdcb8b441c4f2b4","broad","join","$778943ec39690f8e$export$eb63e96e0913dda4","$778943ec39690f8e$export$6f3d80189eb72cd4","operator","$778943ec39690f8e$export$1c8b4c1584800354","variables","featureId","geometryType","mapState","$778943ec39690f8e$export$98e6a39c04603d36","encoded","expectedType","toString","$778943ec39690f8e$var$parseCallExpression","returnType","parser","$778943ec39690f8e$var$parsers","$778943ec39690f8e$export$2655e45458bc48f3","Get","Var","Concat","GeometryType","LineMetric","Any","All","Not","Resolution","Zoom","Time","Equal","NotEqual","GreaterThan","GreaterThanOrEqualTo","LessThan","LessThanOrEqualTo","Multiply","Divide","Add","Subtract","Clamp","Mod","Pow","Abs","Floor","Ceil","Round","Sin","Cos","Atan","Sqrt","Match","Between","Interpolate","Coalesce","Case","In","Color","Id","Band","Palette","ToString","Has","$778943ec39690f8e$var$createCallExpressionParser","$778943ec39690f8e$var$hasArgsCount","$778943ec39690f8e$var$withGetArgs","$778943ec39690f8e$var$withNoArgs","$778943ec39690f8e$var$withArgsOfType","$778943ec39690f8e$var$usesMapState","$778943ec39690f8e$var$withArgsOfReturnType","$778943ec39690f8e$var$hasEvenArgs","argsCount","inputType","fallback","message","base","interpolationType","JSON","stringify","interpolation","stop","operation","argCount","needleType","haystack","arg","colors","parsedColors","minArgs","maxArgs","expression","argType","validators","parsed","$d597295b1f166e98$export$c18f39f0e136c26","$d597295b1f166e98$export$b5f535122a9211f0","$d597295b1f166e98$var$compileExpression","colorValue","nameExpression","keyExpression","hasOwn","concat","op","previousInput","previousOutput","isColor","$d597295b1f166e98$var$interpolateColor","input1","rgba1","input2","rgba2","lcha1","lcha2","deltaHue","$d597295b1f166e98$var$interpolateNumber","output1","output2","along","$7eb75c96a6b6f2c6$export$2e2bcd8739ae039","$f351daabfe6e2d22$export$611736262b635f8d","src","crossOrigin","$f351daabfe6e2d22$export$747ccdf771a87ab8","cache_","patternCache_","cacheSize_","maxCacheSize_","canExpireCache","expire","iconImage","getPattern","pattern","getImageState","ready","then","createPattern","getImage","setSize","maxCacheSize","$0e5ad1d3b638689e$var$taintedTestContext","$0e5ad1d3b638689e$var$IconImage","image","imageState","hitDetectionImage_","image_","crossOrigin_","canvas_","color_","imageState_","size_","src_","tainted_","ready_","initializeImage_","isTainted_","drawImage","dispatchChangeEvent_","handleImageError_","handleImageLoad_","pixelRatio","replaceColor_","getPixelRatio","getHitDetectionImage","getSrc","HTMLImageElement","catch","handleLoad","unlisten","handleError","ctx","globalCompositeOperation","onChange","$0e5ad1d3b638689e$export$3988ae62b71be9a3","cacheKey","$e0807f400ec9a0a9$export$dc5b1400ac3a10a8","$e0807f400ec9a0a9$var$asCanvasPattern","canvasPattern","patternCanvasContext","$d4aabc5c971073f1$export$3847dfea4f8d4dfa","$d4aabc5c971073f1$export$c495d52ee3fd74b2","$d4aabc5c971073f1$export$17bd0c38d6ae694e","$d4aabc5c971073f1$export$e21b4112fdc612fc","$d4aabc5c971073f1$export$365eb9648cf19bd0","$d4aabc5c971073f1$export$1eb2eaecacf2031e","$d4aabc5c971073f1$export$94d53b95641b5766","$d4aabc5c971073f1$export$cf2279a1bff62eb","$d4aabc5c971073f1$export$40a9eeef55665a40","$d4aabc5c971073f1$export$1d36981fcadac93b","$d4aabc5c971073f1$var$measureContext","$d4aabc5c971073f1$export$7fdcec604f0b1fa7","$d4aabc5c971073f1$export$a534074a28fa87ff","interval","referenceWidth","referenceFonts","text","isAvailable","fontStyle","fontWeight","fontFamily","available","referenceFont","$d4aabc5c971073f1$export$4ea92329b673abd1","check","done","fonts","font","clearInterval","setInterval","$d4aabc5c971073f1$export$4feaf6852ff92513","metrics","$d4aabc5c971073f1$var$measureText","actualBoundingBoxAscent","actualBoundingBoxDescent","minHeight","maxHeight","border","body","offsetHeight","measureText","$d4aabc5c971073f1$export$915c7ba51467308f","cache","reduce","curr","$e60011aea38e6239$var$ImageStyle","opacity_","rotateWithView_","rotateWithView","scale_","scaleArray_","displacement_","displacement","declutterMode_","declutterMode","getScale","getRotateWithView","getDisplacement","getDeclutterMode","getScaleArray","getAnchor","getImageSize","getOrigin","setDisplacement","setRotateWithView","setScale","listenImageChange","unlistenImageChange","$e60011aea38e6239$export$2e2bcd8739ae039","$3e99c452138b2224$var$RegularShape","hitDetectionCanvas_","fill_","fill","origin_","points","radius2_","radius2","stroke_","stroke","renderOptions_","loading","getFill","getPoints","getRadius","getRadius2","getStroke","setFill","createHitDetectionCanvas_","fillKey","renderOptions","draw_","setStroke","calculateLineJoinSize_","lineJoin","strokeWidth","miterLimit","r1","r2","miterRatio","bevelAdd","maxr","aa","dd","innerMiterRatio","ee","createRenderOptions","strokeStyle","lineCap","lineDash","lineDashOffset","getColor","getWidth","getLineDash","getLineDashOffset","getLineJoin","getLineCap","getMiterLimit","createPath_","lineWidth","setLineDash","drawHitDetectionCanvas_","arc","startAngle","angle0","radiusC","lineTo","closePath","$3e99c452138b2224$export$2e2bcd8739ae039","$06150d8570b7481b$var$CircleStyle","setRadius","$d61d1dcaf3c44610$var$Fill","patternImage_","setColor","patternImage","CanvasPattern","CanvasGradient","$8463d325b53eeb0c$var$calculateScale","wantedWidth","wantedHeight","$8463d325b53eeb0c$var$Icon","normalizedAnchor_","anchorOrigin_","anchorOrigin","anchorXUnits_","anchorXUnits","anchorYUnits_","anchorYUnits","img","iconImage_","offset_","offsetOrigin_","offsetOrigin","initialOptions_","onload","imageSize","setAnchor","iconImageSize","getHeight","$f9d0329c5c745263$var$Stroke","lineCap_","lineDash_","lineDashOffset_","lineJoin_","miterLimit_","width_","setLineCap","setLineDashOffset","setLineJoin","setMiterLimit","setWidth","$8c7f6dda98e8cb9c$var$Style","geometryFunction_","$8c7f6dda98e8cb9c$var$defaultGeometryFunction","renderer","hitDetectionRenderer_","hitDetectionRenderer","text_","zIndex_","getText","setRenderer","setHitDetectionRenderer","getHitDetectionRenderer","getGeometryFunction","setImage","setText","feature","$8c7f6dda98e8cb9c$var$defaultStyles","$8c7f6dda98e8cb9c$export$6865c5ac2f5ce8b6","$944be50faeff5321$var$Text","font_","keepUpright_","keepUpright","textAlign_","textAlign","justify_","justify","repeat_","repeat","textBaseline_","textBaseline","maxAngle_","maxAngle","placement_","placement","overflow_","overflow","offsetX_","offsetY_","backgroundFill_","backgroundFill","backgroundStroke_","backgroundStroke","getFont","getPlacement","getRepeat","getMaxAngle","getOverflow","getKeepUpright","getTextAlign","getJustify","getTextBaseline","getOffsetX","getOffsetY","getBackgroundFill","getBackgroundStroke","getPadding","setOverflow","setFont","setMaxAngle","setOffsetX","setOffsetY","setPlacement","setRepeat","setKeepUpright","setTextAlign","setJustify","setTextBaseline","setBackgroundFill","setBackgroundStroke","setPadding","$6000539d86fde80c$var$always","$6000539d86fde80c$export$5a130bc4f0a0420b","flatStyles","parsingContext","evaluators","$6000539d86fde80c$export$a6e5f510497b7388","evaluationContext","nonNullCount","flatStyle","evaluateFill","$6000539d86fde80c$var$buildFill","evaluateStroke","$6000539d86fde80c$var$buildStroke","evaluateText","$6000539d86fde80c$var$buildText","prefix","evaluateValue","$6000539d86fde80c$var$stringEvaluator","evaluateBackgroundFill","evaluateBackgroundStroke","evaluateFont","evaluateMaxAngle","$6000539d86fde80c$var$numberEvaluator","evaluateOffsetX","evaluateOffsetY","evaluateOverflow","$6000539d86fde80c$var$booleanEvaluator","evaluatePlacement","evaluateRepeat","evaluateScale","$6000539d86fde80c$var$sizeLikeEvaluator","evaluateRotateWithView","evaluateRotation","evaluateAlign","evaluateJustify","evaluateBaseline","evaluateKeepUpright","evaluatePadding","$6000539d86fde80c$var$numberArrayEvaluator","$6000539d86fde80c$var$optionalDeclutterMode","evaluateImage","$6000539d86fde80c$var$buildIcon","srcName","$6000539d86fde80c$var$requireString","evaluateAnchor","$6000539d86fde80c$var$coordinateEvaluator","evaluateOpacity","evaluateDisplacement","$6000539d86fde80c$var$optionalIconOrigin","$6000539d86fde80c$var$optionalIconAnchorUnits","$6000539d86fde80c$var$optionalColorLike","$6000539d86fde80c$var$requireColorLike","$6000539d86fde80c$var$optionalString","$6000539d86fde80c$var$optionalNumberArray","$6000539d86fde80c$var$requireNumberArray","$6000539d86fde80c$var$optionalNumber","icon","$6000539d86fde80c$var$optionalSize","$6000539d86fde80c$var$buildShape","pointsName","radiusName","$6000539d86fde80c$var$requireNumber","shape","$6000539d86fde80c$var$buildCircle","evaluateRadius","circle","evaluateZIndex","empty","evaluateColor","$6000539d86fde80c$var$patternEvaluator","srcEvaluator","offsetEvaluator","$6000539d86fde80c$var$sizeEvaluator","patternSizeEvaluator","colorEvaluator","$6000539d86fde80c$var$colorLikeEvaluator","evaluateWidth","evaluateLineCap","evaluateLineJoin","evaluateLineDash","evaluateLineDashOffset","evaluateMiterLimit","evaluator","$6000539d86fde80c$var$requireSize","$c8d6dc4c09ed9916$export$2e2bcd8739ae039","renderBuffer","updateWhileAnimating","updateWhileInteracting","declutter_","declutter","renderBuffer_","updateWhileAnimating_","updateWhileInteracting_","getRenderBuffer","getRenderOrder","getUpdateWhileAnimating","getUpdateWhileInteracting","declutterGroup","setRenderOrder","renderOrder","styleLike","$c8d6dc4c09ed9916$var$toStyleLike","rules","$6000539d86fde80c$export$d6ae6a4799989976","compiledRules","rule","styleLength","someMatched","filterEvaluator","else","styleEvaluator","$778943ec39690f8e$export$8da88d86d10c1295","getGeometries","styleFunction","setDeclutter","$b80dddceb0c42ad4$export$2e2bcd8739ae039","inversePixelTransform","$b370ab32454a96fd$var$expireIconCache","$b370ab32454a96fd$export$2e2bcd8739ae039","dispatchRenderEvent","calculateMatrices2D","coordinateToPixelTransform","pixelToCoordinateTransform","forEachFeatureAtCoordinate","hitTolerance","checkWrapped","layerFilter","thisArg2","translatedCoordinate","offsets","layerStates","numLayers","matches","tmpCoord","getWrapX","order","distanceSq","hasFeatureAtCoordinate","hasFeature","scheduleExpireIconCache","postRenderFunctions","$fa78c97693b12120$export$2e2bcd8739ae039","fontChangeListenerKey_","redrawText","container","insertBefore","firstChild","children_","renderedLayerStates","previousElement","layerIndex","sourceState","oldChildren","childNodes","oldChild","newChild","$41aa29ae0c4b607a$export$2e2bcd8739ae039","optionsInternal","$41aa29ae0c4b607a$var$createOptionsInternal","controls","interactions","overlays","keyboardEventTarget","layerGroup","renderComplete_","loaded_","boundHandleBrowserEvent_","handleBrowserEvent","maxTilesLoading_","maxTilesLoading","pixelRatio_","postRenderTimeoutHandle_","animationDelayKey_","animationDelay_","coordinateToPixelTransform_","pixelToCoordinateTransform_","frameIndex_","frameState_","previousExtent_","viewPropertyListenerKey_","viewChangeListenerKey_","layerGroupPropertyListenerKeys_","viewport_","overlayContainer_","overlayContainerStopEvent_","mapBrowserEventHandler_","keyboardEventTarget_","targetChangeHandlerKeys_","targetElement_","resizeObserver_","ResizeObserver","updateSize","zoomControl","zoomOptions","rotateControl","rotateOptions","attributionControl","attributionOptions","altShiftDragRotate","doubleClickZoom","zoomDelta","zoomDuration","dragPan","pinchRotate","pinchZoom","keyboard","mouseWheelZoom","shiftDragZoom","overlays_","overlayIdIndex_","postRenderFunctions_","tileQueue_","getTilePriority","handleTileChange_","handleLayerGroupChanged_","handleViewChanged_","handleSizeChanged_","handleTargetChanged_","viewOptions","setView","addOverlayInternal_","control","interaction","addControl","getControls","addInteraction","getInteractions","addLayer","handleLayerAdd_","$41aa29ae0c4b607a$var$setLayerMapProperty","addOverlay","overlay","getOverlays","disconnect","forEachFeatureAtPixel","getFeaturesAtPixel","features","addLayersFrom","hasFeatureAtPixel","getEventCoordinate","getEventCoordinateInternal","viewportPosition","viewport","getBoundingClientRect","scaleX","scaleY","eventPosition","changedTouches","getTarget","getOverlayById","group","getLoadingOrNotReady","getPixelFromCoordinate","viewCoordinate","ownerDocument","tileSourceKey","tileCenter","tileResolution","wantedTiles","handleMapBrowserEvent","currentDoc","documentElement","interactionsArray","handlePostRender","tileQueue","viewHints","lowOnFrameBudget","time","unobserve","targetRoot","observe","handleViewPropertyChanged_","updateViewportSize_","handleLayerRemove_","isRendered","renderFrame_","renderSync","handleFontsChanged","removeControl","removeInteraction","removeLayer","$41aa29ae0c4b607a$var$removeLayerMapProperty","removeOverlay","previousFrameState","usedTiles","mapId","renderTargets","nextExtent","setLayerGroup","oldLayerGroup","computedStyle","getComputedStyle","offsetWidth","getClientRects","oldSize","$9825fadaf3b68c4e$export$78e139679ca7205","$43ed5485a1d0c509$export$687ff82efd78795b","cumulativeLengths","needle","comparator","mid","cmp","low","high","found","$43ed5485a1d0c509$export$8f44c3c220ef6f09","extrapolate","lo","hi","m0","m1","$bf04349d827c1d16$export$153f8c6b4d8caebc","$292e4002746c8223$var$LineString","flatMidpoint_","flatMidpointRevision_","appendCoordinate","lineString","forEachSegment","getCoordinateAtM","getCoordinateAt","getFlatMidpoint","$b4c0e2e13beea46e$var$MultiLineString","lineStrings","appendLineString","multiLineString","interpolate","getLineString","getLineStrings","getFlatMidpoints","midpoints","$e6080c63a9451eda$var$MultiPoint","appendPoint","multiPoint","getPoint","$f73f35eb6af8b987$var$MultiPolygon","endss_","flatInteriorPointsRevision_","flatInteriorPoints_","polygons","thisEndss","appendPolygon","newEndss","multiPolygon","getEndss","getFlatInteriorPoints","getInteriorPoints","simplifiedEndss","getPolygon","prevEnds","getPolygons","lastEnds","$36d6c36c1f9ad5d9$var$tmpTransform","$36d6c36c1f9ad5d9$var$RenderFeature","type_","flatCoordinates_","flatMidpoints_","properties_","squaredTolerance_","stride_","simplifiedGeometry_","startOrientation","prevEndIndex","orientation","midpoint","enableSimplifyTransformed","$0e4f3959219eede5$var$GeometryCollection","geometries","geometries_","changeEventsKeys_","listenGeometriesChange_","unlistenGeometriesChange_","geometryCollection","$0e4f3959219eede5$var$cloneGeometries","getGeometriesArray","getGeometriesArrayRecursive","geometriesArray","simplifiedGeometries","simplified","setGeometries","setGeometriesArray","$ec084d0ff9c13a22$export$2e2bcd8739ae039","dataProjection","defaultFeatureProjection","featureClass","supportedMediaTypes","getReadOptions","readProjection","featureProjection","adaptOptions","readFeature","readFeatures","readGeometry","writeFeature","writeFeatures","writeGeometry","$ec084d0ff9c13a22$export$7beeea566b560d4","write","fromProjection","toProjection","$ec084d0ff9c13a22$var$GeometryConstructor","Point","LineString","Polygon","MultiPoint","MultiLineString","MultiPolygon","$ec084d0ff9c13a22$export$322c9678d8c47bf","$2f9f6f6b6e1ba437$var$getObject","parse","$2f9f6f6b6e1ba437$export$2e2bcd8739ae039","readFeatureFromObject","readFeaturesFromObject","readGeometryFromObject","readProjectionFromObject","writeFeatureObject","writeFeaturesObject","writeGeometryObject","$f602cef51a2e6950$var$readGeometryInternal","$f602cef51a2e6950$var$readPointGeometry","$f602cef51a2e6950$var$readLineStringGeometry","flat","$f602cef51a2e6950$var$readPolygonGeometry","$f602cef51a2e6950$var$readMultiPointGeometry","$f602cef51a2e6950$var$readMultiLineStringGeometry","$f602cef51a2e6950$var$readMultiPolygonGeometry","$f602cef51a2e6950$var$writeGeometry","geoJSON","rightHanded","$f602cef51a2e6950$export$2e2bcd8739ae039","geometryName","extractGeometryName_","extractGeometryName","geoJSONFeature","$ec084d0ff9c13a22$export$f935e77582b330a","geoJSONObject","geoJSONFeatures","geoJSONFeatureCollection","featureObject","crs","objects","$550e524b0d1b61d4$var$TileRange","tileCoord","containsTileRange","tileRange","$550e524b0d1b61d4$export$958e3e1a02eac4b6","$bf2a04496fadabc6$export$958e3e1a02eac4b6","$bb602a307ef98bb5$var$tmpTileCoord","$bb602a307ef98bb5$export$2e2bcd8739ae039","strict","compare","every","currentVal","res","origins","origin","origins_","tileSizes_","tileSizes","tileSize_","tileSize","fullTileRanges_","tmpSize_","tmpExtent_","sizes","restrictedTileRange","getTileRangeForExtentAndZ","calculateTileRanges_","forEachTileCoord","forEachTileCoordParentTileRange","tempTileRange","tempExtent","tileCoordExtent","getTileCoordExtent","getTileCoordChildTileRange","getTileRangeForTileCoordAndZ","tileCoordZ","tileCoordX","tileCoordY","getTileCoordForXYAndZ_","getTileCoordCenter","getTileSize","getTileCoordForCoordAndResolution","opt_tileCoord","getTileCoordForXYAndResolution_","reverseIntersectionPolicy","getZForResolution","getTileCoordForCoordAndZ","getTileCoordResolution","getFullTileRange","opt_direction","tileCoordIntersectsViewport","fullTileRanges","$5779655d81caea04$export$1f4812384df8a9c5","$5779655d81caea04$export$a251b12f5601c16f","corner","$5779655d81caea04$export$7b5b6ef8fd55fac4","$5779655d81caea04$var$resolutionsFromExtent","half","$0f235d2d04095c6e$export$2e2bcd8739ae039","transition_","transition","transitionStarts_","release","setState","getTileCoord","getAlpha","inTransition","endTransition","$cd3bc8d185522361$export$2e2bcd8739ae039","tileLoadFunction","unlisten_","tileLoadFunction_","unlistenImage_","$cd3bc8d185522361$var$getBlankImage","naturalWidth","naturalHeight","loadHandler","errorHandler","listening","decoding","loaded","error","$2b0a118af78fb031$export$a166f0857c555517","$2b0a118af78fb031$var$drawTestTriangle","u1","v1","u2","v2","beginPath","moveTo","save","clip","restore","$2b0a118af78fb031$var$verifyBrokenDiagonalRendering","$2b0a118af78fb031$export$5fbb958059b7e71f","targetProj","targetMetersPerUnit","sourceMetersPerUnit","sourceExtent","compensationFactor","$6be53f6edfbf1854$export$2e2bcd8739ae039","targetExtent","maxSourceExtent","errorThreshold","destinationResolution","sourceMatrix","coordTransform","sourceProj_","targetProj_","transformInvCache","transformInv","pointLength","transformInv_","maxSourceExtent_","errorThresholdSquared_","triangles_","wrapsXInSource_","canWrapXInSource_","sourceWorldWidth_","targetWorldWidth_","destinationTopLeft","destinationTopRight","destinationBottomRight","destinationBottomLeft","sourceTopLeft","sourceTopRight","sourceBottomRight","sourceBottomLeft","maxSubdivision","$6be53f6edfbf1854$var$MAX_SUBDIVISION","log2","addQuad_","leftBound","triangle","newTriangle","addTriangle_","aSrc","bSrc","cSrc","dSrc","sourceQuadExtent","sourceCoverageX","sourceWorldWidth","wrapsX","needsSubdivision","targetCoverageX","isNotFinite","centerSrc","centerSrcEstimX","centerSrcErrorSquared","bc","bcSrc","da","daSrc","ab","abSrc","cd","cdSrc","calculateSourceExtent","getTriangles","$398e350e33050c07$export$2e2bcd8739ae039","sourceTileGrid","targetTileGrid","wrappedTileCoord","gutter","getTileFunction","renderEdges","renderEdges_","gutter_","sourceTileGrid_","targetTileGrid_","wrappedTileCoord_","sourceTiles_","sourcesListenerKeys_","sourceZ_","clipExtent_","maxTargetExtent","limitedTargetExtent","sourceProjExtent","triangulation_","sourceExtents","sourceRange","srcX","srcY","reproject_","sources","clipExtent","triangulation","drawSingle","stitchContext","imageSmoothingEnabled","pixelRound","sourceDataExtent","stitchScale","inverseScale","xPos","yPos","rect","srcWidth","srcHeight","targetTopLeft","u0","v0","sourceNumericalShiftX","sourceNumericalShiftY","affineCoefs","maxRow","maxEl","absValue","coef","$2b0a118af78fb031$var$isBrokenDiagonalRendering","ud","vd","steps","leftToLoad","sourceListenKey","unlistenSources_","$60db182c0252e220$var$zRegEx","$60db182c0252e220$var$xRegEx","$60db182c0252e220$var$yRegEx","$60db182c0252e220$var$dashYRegEx","$ed6dc99f268f3882$var$adaptAttributions","attributionLike","$ed6dc99f268f3882$export$2e2bcd8739ae039","attributionsCollapsible_","attributionsCollapsible","wrapX_","wrapX","interpolate_","viewResolver","viewRejector","viewPromise_","getInterpolate","refresh","setAttributions","$988a11d09320f6a8$export$c571855c51e6c4b6","$988a11d09320f6a8$export$2e2bcd8739ae039","tilePixelRatio_","tilePixelRatio","tmpSize","key_","tileOptions","zDirection","getGutterForProjection","setKey","getTileGridForProjection","getTile","getTileGrid","getTilePixelRatio","getTilePixelSize","getTileCoordForTileUrlFunction","gridProjection","$7e3d7a0f8b272861$export$2e2bcd8739ae039","TILELOADSTART","TILELOADEND","TILELOADERROR","$e6408236331c2614$var$UrlTile","cacheSize","generateTileUrlFunction_","tileUrlFunction","urls","setUrls","url","setUrl","tileLoadingKeys_","getTileLoadFunction","getTileUrlFunction","getPrototypeOf","getUrls","uid","tileState","setTileLoadFunction","setTileUrlFunction","exec","charCode","startCharCode","charCodeAt","stopCharCode","fromCharCode","templates","tileUrlFunctions","$91dd08a0f5859882$export$f0ecb46e90798741","template","$e6408236331c2614$export$2e2bcd8739ae039","$51d055913ca55b5e$var$defaultTileLoadFunction","imageTile","$51d055913ca55b5e$export$2e2bcd8739ae039","tileClass","tileGridForProjection","reprojectionErrorThreshold_","reprojectionErrorThreshold","renderReprojectionEdges_","getGutter","thisProj","projKey","createTile_","urlTileCoord","tileUrl","getTileInternal","setRenderReprojectionEdges","setTileGridForProjection","tilegrid","proj","$963a7ef65488964c$export$2e2bcd8739ae039","xyzOptions","$6c8498cc816f2362$export$2e2bcd8739ae039","$eb0e5c3938110b4c$export$2e2bcd8739ae039","drawCustom","drawGeometry","drawCircle","circleGeometry","drawFeature","drawGeometryCollection","geometryCollectionGeometry","drawLineString","lineStringGeometry","drawMultiLineString","multiLineStringGeometry","drawMultiPoint","multiPointGeometry","drawMultiPolygon","multiPolygonGeometry","drawPoint","pointGeometry","drawPolygon","polygonGeometry","drawText","setFillStrokeStyle","setImageStyle","imageStyle","declutterImageWithText","setTextStyle","textStyle","$cf547866e052f25b$var$Instruction","BEGIN_GEOMETRY","BEGIN_PATH","CIRCLE","CLOSE_PATH","CUSTOM","DRAW_CHARS","DRAW_IMAGE","END_GEOMETRY","FILL","MOVE_TO_LINE_TO","SET_FILL_STYLE","SET_STROKE_STYLE","STROKE","$cf547866e052f25b$export$f21891651e408226","$cf547866e052f25b$export$7a98aa5364d62ba8","$cf547866e052f25b$export$9f746cc58a899a00","$cf547866e052f25b$export$89b10f327e413e71","$2bb20f8873deb436$export$2e2bcd8739ae039","maxLineWidth","beginGeometryInstruction1_","beginGeometryInstruction2_","bufferedMaxExtent_","instructions","tmpCoordinate_","hitDetectionInstructions","applyPixelRatio","dashArray","dash","appendFlatPointCoordinates","getBufferedMaxExtent","myEnd","appendFlatLineCoordinates","closed","skipFirst","lastRel","nextRel","lastXCoord","lastYCoord","nextCoord","skipped","drawCustomCoordinates_","builderEnds","builderEnd","builderEndss","beginGeometry","builderBegin","myEnds","endGeometry","finish","reverseHitDetectionInstructions","instruction","fillStyleToState","fillStyleColor","fillPatternScale","strokeStyleToState","strokeStyleColor","strokeStyleLineCap","strokeStyleLineDash","strokeStyleLineDashOffset","strokeStyleLineJoin","strokeStyleWidth","strokeStyleMiterLimit","createFill","fillInstruction","applyStroke","createStroke","updateFillStyle","currentFillStyle","updateStrokeStyle","currentStrokeStyle","currentLineCap","currentLineDash","currentLineDashOffset","currentLineJoin","currentLineWidth","currentMiterLimit","endGeometryInstruction","$b652f9dd73b29cfe$export$2e2bcd8739ae039","imagePixelRatio_","anchorX_","anchorY_","height_","originX_","originY_","declutterImageWithText_","myBegin","filteredFlatCoordinates","sharedData","$a207f23baa5aa2c5$export$2e2bcd8739ae039","drawFlatCoordinates_","moveToLineToInstruction","lastStroke","$7d2e8ba11a45ae8a$export$2e2bcd8739ae039","drawFlatCoordinatess_","numEnds","setFillStrokeStyles_","circleInstruction","$8243e906fae47bbe$export$91a016276e4aee96","$8243e906fae47bbe$export$2e2bcd8739ae039","labels_","textOffsetX_","textOffsetY_","textRotateWithView_","textKeepUpright_","textRotation_","textFillState_","fillStates","textStrokeState_","strokeStates","textState_","textStates","textKey_","fillKey_","strokeKey_","fillState","strokeState","textState","flatOffset","oo","chunks","chunkLength","cursor","chunkM","currentChunk","missing","cc","chunk","chunkBegin","chunkEnd","m12","m23","x12","y12","x23","y23","chunkStart","acos","drawChars_","geometryWidths","beg","keep","saveTextStates_","p0","p1","p2","p3","p","hitDetectionBackgroundFill","strokeKey","textKey","baseline","textFillStyle","textStrokeStyle","textScale","textOffsetX","textOffsetY","textRotateWithView","textKeepUpright","textRotation","$e22658f4b743550b$var$BATCH_CONSTRUCTORS","$e22658f4b743550b$export$2e2bcd8739ae039","tolerance_","maxExtent_","resolution_","buildersByZIndex_","builderInstructions","zKey","builders","builderKey","builderInstruction","getBuilder","builderType","zIndexKey","replays","replay","$c1cb593c98d2cbd0$export$2e2bcd8739ae039","instructions_","context_","Proxy","push_","pushMethodArgs_","pushFunction","draw","instructionsAtIndex","instructionAtIndex","$6526fa4ee42dc39d$var$tmpExtent","$6526fa4ee42dc39d$var$p1","$6526fa4ee42dc39d$var$p2","$6526fa4ee42dc39d$var$p3","$6526fa4ee42dc39d$var$p4","$6526fa4ee42dc39d$var$getDeclutterBox","replayImageOrLabelArgs","declutterBox","$6526fa4ee42dc39d$var$rtlRegEx","$6526fa4ee42dc39d$var$horizontalTextAlign","align","$6526fa4ee42dc39d$var$createTextChunks","acc","line","$6526fa4ee42dc39d$var$richTextToPlainText","part","$6526fa4ee42dc39d$export$2e2bcd8739ae039","overlaps","deferredRendering","alignAndScaleFill_","coordinateCache_","renderedTransform_","pixelCoordinates_","viewRotation_","widths_","zIndexContext_","getZIndexContext","createLabel","previousFont","widths","heights","lineWidths","baseStyle","currentWidth","currentHeight","renderWidth","contextInstructions","leftRight","strokeInstructions","fillInstructions","lineOffset","widthHeightIndex","lineWidthIndex","fillStrokeArgs","replayTextBackground_","p4","strokeInstruction","setStrokeStyle_","calculateImageOrLabelDimensions_","sheetWidth","sheetHeight","originX","originY","snapToPixel","fillStroke","boxW","boxH","boxX","boxY","drawImageX","drawImageY","drawImageW","drawImageH","canvasTransform","replayImageOrLabel_","scaledCanvasSize","imageOrLabel","box","strokePadding","globalAlpha","labelOrImage","$d4aabc5c971073f1$var$executeLabelInstructions","alignAndScale","repeatSize","drawLabelWithPointPlacement_","execute_","featureCallback","hitExtent","declutterTree","pixelCoordinates","prevX","prevY","roundX","roundY","currentGeometry","zIndexContext","transform1","transform2","pendingFill","pendingStroke","coordinateCache","viewRotation","viewRotationFromTransform","batchSize","backgroundFillInstruction","backgroundStrokeInstruction","labelWithAnchor","widthIndex","imageArgs","imageDeclutterMode","imageDeclutterBox","renderImage","renderText","imageDeclutter","cachedWidths","measurePixelRatio","pixelRatioScale","pathLength","textLength","startM","parts","measureAndCacheTextWidth","previousAngle","segmentM","advance","beginX","beginY","startOffset","startLength","endM","singleSegment","iStart","charLength","chars","drawChars","execute","executeHitDetection","$a34a824d875e4ea1$export$61b49a5ae59d663","$a34a824d875e4ea1$export$6195a93a6c97ce02","$a34a824d875e4ea1$export$d0fe61ccfaa1ca87","$a34a824d875e4ea1$var$circlePixelIndexArrayCache","$a34a824d875e4ea1$export$2e2bcd8739ae039","allInstructions","overlaps_","executorsByZIndex_","hitDetectionContext_","hitDetectionTransform_","renderedContext_","deferredZIndexContexts_","createExecutors_","flatClipCoords","getClipCoords","executors","instructionByZindex","hasExecutors","candidates","declutteredFeatures","executor","contextSize","newContext","indexes","$a34a824d875e4ea1$export$96fc84ea21b8269f","maxDistanceSq","distances","pixelIndex","imageData","idx","zs","targetContext","builderTypes","maxBuilderTypes","requireClip","getDeferredZIndexContexts","getRenderedContext","deferredZIndexContexts","$7b0c2128a27f5020$export$2e2bcd8739ae039","userTransform","transform_","transformRotation_","userTransform_","contextFillState_","contextStrokeState_","contextTextState_","fillState_","strokeState_","imageAnchorX_","imageAnchorY_","imageHeight_","imageOpacity_","imageOriginX_","imageOriginY_","imageRotateWithView_","imageRotation_","imageScale_","imageWidth_","textScale_","tmpLocalTransform_","drawImages_","localTransform","drawText_","setContextFillState_","setContextStrokeState_","setContextTextState_","strokeText","fillText","moveToLineTo_","close","drawRings_","simpleGeometry","setTransform","flatMidpoint","geometryExtent","flatMidpoints","flatInteriorPoint","flatInteriorPoints","contextFillState","contextStrokeState","contextTextState","imagePixelRatio","imageAnchor","imageOrigin","imageScale","textFillStyleColor","textStrokeStyleColor","textStrokeStyleLineCap","textStrokeStyleLineDash","textStrokeStyleLineDashOffset","textStrokeStyleLineJoin","textStrokeStyleWidth","textStrokeStyleMiterLimit","textFont","textText","textTextAlign","textTextBaseline","$4b9ac454600c05d2$var$GEOMETRY_RENDERERS","builderGroup","hasText","imageReplay","textReplay","lineStringReplay","polygonReplay","hasImage","replayGroup","declutterBuilderGroup","geometryRenderer","circleReplay","$4b9ac454600c05d2$export$531ddd8416d52dfc","feature1","feature2","$4b9ac454600c05d2$export$75084a70d324c1e6","$4b9ac454600c05d2$var$SIMPLIFY_TOLERANCE","$4b9ac454600c05d2$export$36f470a33a42f413","loadingPromises","$4b9ac454600c05d2$var$renderFeatureInternal","$4b9ac454600c05d2$var$renderGeometry","$cb18cdefd702a327$export$2e2bcd8739ae039","boundHandleImageChange_","handleImageChange_","layer_","staleKeys_","maxStaleKeys","getStaleKeys","prependStaleKey","unshift","getLayer","renderIfReadyAndVisible","loadImage","$42152f52b26b6ca7$export$a166f0857c555517","$42152f52b26b6ca7$var$pixelContext","$42152f52b26b6ca7$export$2e2bcd8739ae039","renderedResolution","tempTransform","pixelTransform","deferredContext_","containerReused","col","row","useContainer","backgroundColor","layerClassName","firstElementChild","HTMLCanvasElement","cssTransform1","cssTransform2","mat1","mat2","transformOrigin","clipUnrotated","topLeft","topRight","bottomRight","bottomLeft","inverted","prepareContainer","dispatchRenderEvent_","preRender","postRender","renderDeferredInternal","getRenderContext","getRenderTransform","$659e0e97392a5f5e$export$2e2bcd8739ae039","vectorLayer","boundHandleStyleImageChange_","handleStyleImageChange_","animatingOrInteracting_","hitDetectionImageData_","clipped_","renderedFeatures_","renderedRevision_","renderedResolution_","renderedExtent_","wrappedRenderedExtent_","renderedRotation_","renderedCenter_","renderedProjection_","renderedPixelRatio_","renderedRenderOrder_","renderedFrameDeclutter_","replayGroup_","replayGroupChanged","clipping","targetContext_","renderWorlds","executorGroup","declutterable","vectorSource","endWorld","world","setDrawContext_","resetDrawContext_","transforms","userExtent","featureCount","indexFactor","featuresByZIndex","featureStyleFunction","padStart","originalStyle","imgSize","imgContext","byGeometryType","zIndexKeys","geomAndStyle","kk","resultFeatures","lastIndexOf","animating","interacting","frameStateExtent","vectorLayerRevision","vectorLayerRenderBuffer","vectorLayerRenderOrder","renderedExtent","loadExtents","loadExtent","loadFeatures","dirty","renderFeature","getFeaturesInExtent","replayGroupInstructions","getOverlaps","$82a68515bd6ef378$export$2e2bcd8739ae039","$588823c001569193$export$14cc81df70b6707e","format","success","failure","$588823c001569193$export$441d7b57adab24d0","xhr","XMLHttpRequest","open","responseType","withCredentials","status","responseText","responseXML","response","onerror","send","addFeatures","$eb51d0a16123ee90$export$84bf76cd7afc7469","$34c742891733e7a4$export$2e2bcd8739ae039","maxEntries","rbush_","items_","extents","items","getAll","getInExtent","bbox","forEach_","forEachInExtent","rbush","$ccc4e6f11f11978f$export$2e2bcd8739ae039","ADDFEATURE","CHANGEFEATURE","CLEAR","REMOVEFEATURE","FEATURESLOADSTART","FEATURESLOADEND","FEATURESLOADERROR","$84888e4daf3fdf44$export$d402fd02dc2b661c","$84888e4daf3fdf44$export$2e2bcd8739ae039","loader_","format_","url_","loader","strategy_","strategy","useSpatialIndex","featuresRtree_","loadedExtentsRtree_","loadingExtentsCount_","nullGeometryFeatures_","idIndex_","uidIndex_","featureChangeKeys_","featuresCollection_","addFeaturesInternal","bindFeaturesCollection_","addFeature","addFeatureInternal","featureKey","addToIndex_","setupChangeEvents_","handleFeatureChange_","valid","indexedFeature","newFeatures","geometryFeatures","modifyingCollection","removeFeature","fast","removeFeatureInternal","clearEvent","forEachFeature","forEachFeatureAtCoordinateDirect","forEachFeatureInExtent","forEachFeatureIntersectingExtent","getFeaturesCollection","getFeaturesAtCoordinate","anExtent","getClosestFeatureToCoordinate","closestFeature","previousMinSquaredDistance","minDistance","getFeatureById","getFeatureByUid","getFormat","getUrl","sid","removeFromIdIndex_","loadedExtentsRtree","extentsToLoad","extentToLoad","removeLoadedExtent","removeFeatures","removed","featureChangeKeys","idString","setLoader","setOverlaps","$fd518ba473015b27$export$3a7c913cb40dcb7d","HTMLVideoElement","ImageBitmap","$fd518ba473015b27$export$df4c617b86128e3e","$fd518ba473015b27$var$defaultSize","$fd518ba473015b27$export$2e2bcd8739ae039","data_","error_","controller_","controller","getError","abort","$859b1614288c6316$export$2e2bcd8739ae039","highWaterMark","count_","entries_","oldest_","newest_","deleteOldest","entry","expireCache","containsKey","value_","newer","older","getValues","peekLast","peekLastKey","peekFirstKey","peek","$02fffef185f4339b$var$getCacheKey","sourceKey","$02fffef185f4339b$var$addTileToLookup","tilesByZ","existing","has","$02fffef185f4339b$var$getRenderExtent","gridExtent","$02fffef185f4339b$export$2e2bcd8739ae039","tileLayer","extentChanged","renderComplete","renderedPixelRatio","renderedProjection","renderedTiles","renderedSourceKey_","renderedSourceRevision_","tempTileRange_","tempTileCoord_","tileCache_","getTileCache","getOrCreateTile","tileCache","tileSource","tileOrigin","sourceRevision","enqueueTiles","initialZ","preload","minZ","tileQueueKey","findStaleTile_","staleKeys","findAltTiles_","altZ","covered","currentClip","viewResolution","viewCenter","frameExtent","canvasExtent","getPreload","targetZ","renderExtent","$02fffef185f4339b$var$removeTileFromLookup","delete","parentZ","canvasScale","clips","clipZs","currentZ","currentTilePixelSize","currentScale","originTileCoord","originTileExtent","tileGutter","xIndex","nextX","yIndex","nextY","contextSaved","drawTile","updateUsedTiles","tilesCount","updateCacheSize","tileCount","getTileImage","alphaChanged","$93be2de6a052f587$export$2e2bcd8739ae039","useInterimTilesOnError","setPreload","setUseInterimTilesOnError","getCacheSize","getUseInterimTilesOnError","$32e67a4d3559554a$export$2e2bcd8739ae039","$8434dbb660345c0b$var$Property","ACCURACY","ACCURACY_GEOMETRY","ALTITUDE","ALTITUDE_ACCURACY","HEADING","POSITION","PROJECTION","SPEED","TRACKING","TRACKING_OPTIONS","$8434dbb660345c0b$export$862abd191a2ee43","$8434dbb660345c0b$export$2e2bcd8739ae039","position_","watchId_","handleProjectionChanged_","handleTrackingChanged_","setProjection","trackingOptions","setTrackingOptions","setTracking","tracking","getTracking","geolocation","watchPosition","positionChange_","positionError_","getTrackingOptions","clearWatch","accuracy","altitude","altitudeAccuracy","heading","projectedPosition","speed","sphereRadius","bearing","lon1","dByR","lat","asin","getAccuracy","getAccuracyGeometry","getAltitude","getAltitudeAccuracy","getHeading","getPosition","getSpeed","$9407cca828b9601a$var$view","$9407cca828b9601a$var$geojsonObject","fetch","json","$9407cca828b9601a$var$vectorLayer","lineStr1","lineStr2","$9407cca828b9601a$var$geolocation","enableHighAccuracy","$9407cca828b9601a$var$el","checked","innerText","info","$9407cca828b9601a$var$accuracyFeature","$9407cca828b9601a$var$positionFeature","$9407cca828b9601a$var$locationLayer"],"version":3,"file":"maps-src.945c34b8.js.map"}